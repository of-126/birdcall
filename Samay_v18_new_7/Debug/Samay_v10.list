
Samay_v10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c370  0800c370  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c370  0800c370  0001c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c378  0800c378  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c378  0800c378  0001c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c37c  0800c37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000044f8  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004584  20004584  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178a1  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003312  00000000  00000000  0003795d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0003bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024337  00000000  00000000  0003d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a973  00000000  00000000  00061507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf12e  00000000  00000000  0007be7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014afa8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005530  00000000  00000000  0014aff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b82c 	.word	0x0800b82c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800b82c 	.word	0x0800b82c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff fe1f 	bl	80001d0 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <Send_Uart+0x28>)
 800059e:	f006 faea 	bl	8006b76 <HAL_UART_Transmit>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000320 	.word	0x20000320

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 fc05 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 fa3f 	bl	8000a3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005be:	f000 faa7 	bl	8000b10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fbe9 	bl	8000d98 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c6:	f000 fbbf 	bl	8000d48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fb67 	bl	8000c9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 fb8f 	bl	8000cf0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005d2:	f007 fb77 	bl	8007cc4 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005d6:	f000 fb41 	bl	8000c5c <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80005da:	f000 fae3 	bl	8000ba4 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005de:	f000 fb0f 	bl	8000c00 <MX_I2S3_Init>
  MX_I2C2_Init();
 80005e2:	f000 fab1 	bl	8000b48 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f001 fc5d 	bl	8001ea8 <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 80005ee:	f000 fda7 	bl	8001140 <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 80005f2:	f000 fd7b 	bl	80010ec <CODEC_RST>

  configure_codec();
 80005f6:	f000 fd07 	bl	8001008 <configure_codec>

  /**********************************************************************************************************	SD card ***/

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);// OE	SD 1 and 2
 80005fa:	2201      	movs	r2, #1
 80005fc:	2108      	movs	r1, #8
 80005fe:	487a      	ldr	r0, [pc, #488]	; (80007e8 <main+0x238>)
 8000600:	f002 fb04 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4877      	ldr	r0, [pc, #476]	; (80007e8 <main+0x238>)
 800060a:	f002 faff 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);// OE	SD 3 and 4
 800060e:	2201      	movs	r2, #1
 8000610:	2120      	movs	r1, #32
 8000612:	4875      	ldr	r0, [pc, #468]	; (80007e8 <main+0x238>)
 8000614:	f002 fafa 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4872      	ldr	r0, [pc, #456]	; (80007e8 <main+0x238>)
 800061e:	f002 faf5 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 fc40 	bl	8001ea8 <HAL_Delay>

  /**********************************************************************************************************	SD 1	***/
  message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 8000628:	4970      	ldr	r1, [pc, #448]	; (80007ec <main+0x23c>)
 800062a:	4871      	ldr	r0, [pc, #452]	; (80007f0 <main+0x240>)
 800062c:	f001 f842 	bl	80016b4 <message>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);	// OE  Pin pulled low		SD 1 and 2
 8000630:	2200      	movs	r2, #0
 8000632:	2108      	movs	r1, #8
 8000634:	486c      	ldr	r0, [pc, #432]	; (80007e8 <main+0x238>)
 8000636:	f002 fae9 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f001 fc34 	bl	8001ea8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);	// SEL Pin pulled low		SD 1
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4868      	ldr	r0, [pc, #416]	; (80007e8 <main+0x238>)
 8000646:	f002 fae1 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f001 fc2c 	bl	8001ea8 <HAL_Delay>

//  Mount_SD("/");
//  Format_SD();
//  Unmount_SD("/");

  message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 8000650:	4968      	ldr	r1, [pc, #416]	; (80007f4 <main+0x244>)
 8000652:	4867      	ldr	r0, [pc, #412]	; (80007f0 <main+0x240>)
 8000654:	f001 f82e 	bl	80016b4 <message>

	fresult = f_mount(&fs_local, "/", 1);/*	Mount Stroge	*/
 8000658:	2201      	movs	r2, #1
 800065a:	4967      	ldr	r1, [pc, #412]	; (80007f8 <main+0x248>)
 800065c:	4867      	ldr	r0, [pc, #412]	; (80007fc <main+0x24c>)
 800065e:	f009 fb05 	bl	8009c6c <f_mount>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <main+0x250>)
 8000668:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) message ("ERROR!!! in mounting SD CARD...\r\n");
 800066a:	4b65      	ldr	r3, [pc, #404]	; (8000800 <main+0x250>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <main+0xc8>
 8000672:	4864      	ldr	r0, [pc, #400]	; (8000804 <main+0x254>)
 8000674:	f001 f81e 	bl	80016b4 <message>

	History_update();
 8000678:	f000 fdfa 	bl	8001270 <History_update>

/************************************************************************************************************/
	sprintf(File_name_1, "file_%d_1.wav",number);
 800067c:	4b62      	ldr	r3, [pc, #392]	; (8000808 <main+0x258>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4962      	ldr	r1, [pc, #392]	; (800080c <main+0x25c>)
 8000684:	4862      	ldr	r0, [pc, #392]	; (8000810 <main+0x260>)
 8000686:	f00a fc8d 	bl	800afa4 <siprintf>
	sprintf(File_name_2, "file_%d_2.wav",number);
 800068a:	4b5f      	ldr	r3, [pc, #380]	; (8000808 <main+0x258>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	4960      	ldr	r1, [pc, #384]	; (8000814 <main+0x264>)
 8000692:	4861      	ldr	r0, [pc, #388]	; (8000818 <main+0x268>)
 8000694:	f00a fc86 	bl	800afa4 <siprintf>

	fresult = f_stat (File_name_1, &fno_local);	/*	Check For File Presence	*/
 8000698:	4960      	ldr	r1, [pc, #384]	; (800081c <main+0x26c>)
 800069a:	485d      	ldr	r0, [pc, #372]	; (8000810 <main+0x260>)
 800069c:	f00a fab7 	bl	800ac0e <f_stat>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b56      	ldr	r3, [pc, #344]	; (8000800 <main+0x250>)
 80006a6:	701a      	strb	r2, [r3, #0]
	fresult = f_stat (File_name_2, &fno_local);	/*	Check For File Presence	*/
 80006a8:	495c      	ldr	r1, [pc, #368]	; (800081c <main+0x26c>)
 80006aa:	485b      	ldr	r0, [pc, #364]	; (8000818 <main+0x268>)
 80006ac:	f00a faaf 	bl	800ac0e <f_stat>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b52      	ldr	r3, [pc, #328]	; (8000800 <main+0x250>)
 80006b6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n","FILE1.txt");
 80006b8:	4b51      	ldr	r3, [pc, #324]	; (8000800 <main+0x250>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <main+0x11a>
 80006c0:	4957      	ldr	r1, [pc, #348]	; (8000820 <main+0x270>)
 80006c2:	4858      	ldr	r0, [pc, #352]	; (8000824 <main+0x274>)
 80006c4:	f000 fff6 	bl	80016b4 <message>
 80006c8:	e040      	b.n	800074c <main+0x19c>
	else
	{
		fresult = f_open(&file_1,File_name_1, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);	/*	Create file	by opening */
 80006ca:	220b      	movs	r2, #11
 80006cc:	4950      	ldr	r1, [pc, #320]	; (8000810 <main+0x260>)
 80006ce:	4856      	ldr	r0, [pc, #344]	; (8000828 <main+0x278>)
 80006d0:	f009 fb12 	bl	8009cf8 <f_open>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b49      	ldr	r3, [pc, #292]	; (8000800 <main+0x250>)
 80006da:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK) message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 80006dc:	4b48      	ldr	r3, [pc, #288]	; (8000800 <main+0x250>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <main+0x142>
 80006e4:	4b46      	ldr	r3, [pc, #280]	; (8000800 <main+0x250>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4a49      	ldr	r2, [pc, #292]	; (8000810 <main+0x260>)
 80006ea:	4619      	mov	r1, r3
 80006ec:	484f      	ldr	r0, [pc, #316]	; (800082c <main+0x27c>)
 80006ee:	f000 ffe1 	bl	80016b4 <message>

		fresult = f_open(&file_2,File_name_2, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);	/*	Create file	by opening */
 80006f2:	220b      	movs	r2, #11
 80006f4:	4948      	ldr	r1, [pc, #288]	; (8000818 <main+0x268>)
 80006f6:	484e      	ldr	r0, [pc, #312]	; (8000830 <main+0x280>)
 80006f8:	f009 fafe 	bl	8009cf8 <f_open>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <main+0x250>)
 8000702:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK) message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <main+0x250>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <main+0x16a>
 800070c:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <main+0x250>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4a3f      	ldr	r2, [pc, #252]	; (8000810 <main+0x260>)
 8000712:	4619      	mov	r1, r3
 8000714:	4845      	ldr	r0, [pc, #276]	; (800082c <main+0x27c>)
 8000716:	f000 ffcd 	bl	80016b4 <message>

		fresult = f_close(&file_1);	/*	Close file	*/
 800071a:	4843      	ldr	r0, [pc, #268]	; (8000828 <main+0x278>)
 800071c:	f00a f829 	bl	800a772 <f_close>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b36      	ldr	r3, [pc, #216]	; (8000800 <main+0x250>)
 8000726:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&file_2);	/*	Close file	*/
 8000728:	4841      	ldr	r0, [pc, #260]	; (8000830 <main+0x280>)
 800072a:	f00a f822 	bl	800a772 <f_close>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b33      	ldr	r3, [pc, #204]	; (8000800 <main+0x250>)
 8000734:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult,File_name_1);
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <main+0x250>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <main+0x19c>
 800073e:	4b30      	ldr	r3, [pc, #192]	; (8000800 <main+0x250>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4a33      	ldr	r2, [pc, #204]	; (8000810 <main+0x260>)
 8000744:	4619      	mov	r1, r3
 8000746:	483b      	ldr	r0, [pc, #236]	; (8000834 <main+0x284>)
 8000748:	f000 ffb4 	bl	80016b4 <message>
	}

	f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 800074c:	2232      	movs	r2, #50	; 0x32
 800074e:	4930      	ldr	r1, [pc, #192]	; (8000810 <main+0x260>)
 8000750:	4835      	ldr	r0, [pc, #212]	; (8000828 <main+0x278>)
 8000752:	f009 fad1 	bl	8009cf8 <f_open>
	f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 8000756:	2232      	movs	r2, #50	; 0x32
 8000758:	492f      	ldr	r1, [pc, #188]	; (8000818 <main+0x268>)
 800075a:	4835      	ldr	r0, [pc, #212]	; (8000830 <main+0x280>)
 800075c:	f009 facc 	bl	8009cf8 <f_open>

  read_and_print_registers();
 8000760:	f000 fd12 	bl	8001188 <read_and_print_registers>

  /* Initialize header file */
  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8000764:	4934      	ldr	r1, [pc, #208]	; (8000838 <main+0x288>)
 8000766:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800076a:	f000 fe41 	bl	80013f0 <WavProcess_EncInit>

  /* Write the header Wave */
  f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <main+0x28c>)
 8000770:	222c      	movs	r2, #44	; 0x2c
 8000772:	4931      	ldr	r1, [pc, #196]	; (8000838 <main+0x288>)
 8000774:	482c      	ldr	r0, [pc, #176]	; (8000828 <main+0x278>)
 8000776:	f009 fdea 	bl	800a34e <f_write>
  f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <main+0x28c>)
 800077c:	222c      	movs	r2, #44	; 0x2c
 800077e:	492e      	ldr	r1, [pc, #184]	; (8000838 <main+0x288>)
 8000780:	482b      	ldr	r0, [pc, #172]	; (8000830 <main+0x280>)
 8000782:	f009 fde4 	bl	800a34e <f_write>



  /*********************/

  HAL_I2S_Receive(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE, HAL_MAX_DELAY);
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078e:	492c      	ldr	r1, [pc, #176]	; (8000840 <main+0x290>)
 8000790:	482c      	ldr	r0, [pc, #176]	; (8000844 <main+0x294>)
 8000792:	f003 fc83 	bl	800409c <HAL_I2S_Receive>
  message("\r\n");
 8000796:	482c      	ldr	r0, [pc, #176]	; (8000848 <main+0x298>)
 8000798:	f000 ff8c 	bl	80016b4 <message>

  // Print even-indexed 16-bit values 				ADC 3
  message("Even-indexed samples:\r\n");
 800079c:	482b      	ldr	r0, [pc, #172]	; (800084c <main+0x29c>)
 800079e:	f000 ff89 	bl	80016b4 <message>
  for (size_t i = 0; i < sizeof(audio_buffer_2) / sizeof(audio_buffer_2[0]); i += 2) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e012      	b.n	80007ce <main+0x21e>
	  message("%hd", audio_buffer_2[i]);
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <main+0x290>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b0:	4619      	mov	r1, r3
 80007b2:	4827      	ldr	r0, [pc, #156]	; (8000850 <main+0x2a0>)
 80007b4:	f000 ff7e 	bl	80016b4 <message>
      if (i < sizeof(audio_buffer_2) / sizeof(audio_buffer_2[0]) - 2) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80007be:	4293      	cmp	r3, r2
 80007c0:	d802      	bhi.n	80007c8 <main+0x218>
    	  message(", ");
 80007c2:	4824      	ldr	r0, [pc, #144]	; (8000854 <main+0x2a4>)
 80007c4:	f000 ff76 	bl	80016b4 <message>
  for (size_t i = 0; i < sizeof(audio_buffer_2) / sizeof(audio_buffer_2[0]); i += 2) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3302      	adds	r3, #2
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d4:	d3e8      	bcc.n	80007a8 <main+0x1f8>
      }
  }
  message("\r\n"); // New line at the end
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <main+0x298>)
 80007d8:	f000 ff6c 	bl	80016b4 <message>

  // Print odd-indexed 16-bit values 				ADC 4
  message("Odd-indexed samples:\r\n");
 80007dc:	481e      	ldr	r0, [pc, #120]	; (8000858 <main+0x2a8>)
 80007de:	f000 ff69 	bl	80016b4 <message>
  for (size_t i = 1; i < sizeof(audio_buffer_2) / sizeof(audio_buffer_2[0]); i += 2) {
 80007e2:	2301      	movs	r3, #1
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	e04c      	b.n	8000882 <main+0x2d2>
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	0800b940 	.word	0x0800b940
 80007f0:	0800b978 	.word	0x0800b978
 80007f4:	0800b988 	.word	0x0800b988
 80007f8:	0800b9dc 	.word	0x0800b9dc
 80007fc:	200003cc 	.word	0x200003cc
 8000800:	200000a8 	.word	0x200000a8
 8000804:	0800b9e0 	.word	0x0800b9e0
 8000808:	200003c8 	.word	0x200003c8
 800080c:	0800ba04 	.word	0x0800ba04
 8000810:	20003484 	.word	0x20003484
 8000814:	0800ba14 	.word	0x0800ba14
 8000818:	200034a4 	.word	0x200034a4
 800081c:	20003464 	.word	0x20003464
 8000820:	0800ba24 	.word	0x0800ba24
 8000824:	0800ba30 	.word	0x0800ba30
 8000828:	20001400 	.word	0x20001400
 800082c:	0800ba68 	.word	0x0800ba68
 8000830:	20002430 	.word	0x20002430
 8000834:	0800ba90 	.word	0x0800ba90
 8000838:	20004504 	.word	0x20004504
 800083c:	20004500 	.word	0x20004500
 8000840:	200034c4 	.word	0x200034c4
 8000844:	20000150 	.word	0x20000150
 8000848:	0800bab4 	.word	0x0800bab4
 800084c:	0800bab8 	.word	0x0800bab8
 8000850:	0800bad0 	.word	0x0800bad0
 8000854:	0800bad4 	.word	0x0800bad4
 8000858:	0800bad8 	.word	0x0800bad8
	  message("%hd", audio_buffer_2[i]);
 800085c:	4a60      	ldr	r2, [pc, #384]	; (80009e0 <main+0x430>)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000864:	4619      	mov	r1, r3
 8000866:	485f      	ldr	r0, [pc, #380]	; (80009e4 <main+0x434>)
 8000868:	f000 ff24 	bl	80016b4 <message>
      if (i < sizeof(audio_buffer_2) / sizeof(audio_buffer_2[0]) - 1) {
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000872:	4293      	cmp	r3, r2
 8000874:	d802      	bhi.n	800087c <main+0x2cc>
    	  message(", ");
 8000876:	485c      	ldr	r0, [pc, #368]	; (80009e8 <main+0x438>)
 8000878:	f000 ff1c 	bl	80016b4 <message>
  for (size_t i = 1; i < sizeof(audio_buffer_2) / sizeof(audio_buffer_2[0]); i += 2) {
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3302      	adds	r3, #2
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000888:	d3e8      	bcc.n	800085c <main+0x2ac>
      }
  }
  message("\r\n"); // New line at the end
 800088a:	4858      	ldr	r0, [pc, #352]	; (80009ec <main+0x43c>)
 800088c:	f000 ff12 	bl	80016b4 <message>

//  auto_gain_adjustment(audio_buffer_2, sizeof(audio_buffer_2), &current_gain);
//  while(1);
#endif

  memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 8000890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000894:	2100      	movs	r1, #0
 8000896:	4856      	ldr	r0, [pc, #344]	; (80009f0 <main+0x440>)
 8000898:	f00a fa8c 	bl	800adb4 <memset>
  memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 800089c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a0:	2100      	movs	r1, #0
 80008a2:	484f      	ldr	r0, [pc, #316]	; (80009e0 <main+0x430>)
 80008a4:	f00a fa86 	bl	800adb4 <memset>

  message("Message: %s\r\n", "________________	Recording Started	_____________\r\n");
 80008a8:	4952      	ldr	r1, [pc, #328]	; (80009f4 <main+0x444>)
 80008aa:	4853      	ldr	r0, [pc, #332]	; (80009f8 <main+0x448>)
 80008ac:	f000 ff02 	bl	80016b4 <message>
  // Start I2S DMA reception
   if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80008b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b4:	494e      	ldr	r1, [pc, #312]	; (80009f0 <main+0x440>)
 80008b6:	4851      	ldr	r0, [pc, #324]	; (80009fc <main+0x44c>)
 80008b8:	f003 fcba 	bl	8004230 <HAL_I2S_Receive_DMA>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d010      	beq.n	80008e4 <main+0x334>
       // Error handling
	   message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error !!!!__!!__\r\n");
 80008c2:	494f      	ldr	r1, [pc, #316]	; (8000a00 <main+0x450>)
 80008c4:	484c      	ldr	r0, [pc, #304]	; (80009f8 <main+0x448>)
 80008c6:	f000 fef5 	bl	80016b4 <message>
	   message("Message: %d\r\n", HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE));
 80008ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ce:	4948      	ldr	r1, [pc, #288]	; (80009f0 <main+0x440>)
 80008d0:	484a      	ldr	r0, [pc, #296]	; (80009fc <main+0x44c>)
 80008d2:	f003 fcad 	bl	8004230 <HAL_I2S_Receive_DMA>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4619      	mov	r1, r3
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <main+0x454>)
 80008dc:	f000 feea 	bl	80016b4 <message>
       Error_Handler();
 80008e0:	f000 ff0a 	bl	80016f8 <Error_Handler>
   }
   if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80008e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e8:	493d      	ldr	r1, [pc, #244]	; (80009e0 <main+0x430>)
 80008ea:	4847      	ldr	r0, [pc, #284]	; (8000a08 <main+0x458>)
 80008ec:	f003 fca0 	bl	8004230 <HAL_I2S_Receive_DMA>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d010      	beq.n	8000918 <main+0x368>
          // Error handling
   	   message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error !!!!__!!__\r\n");
 80008f6:	4942      	ldr	r1, [pc, #264]	; (8000a00 <main+0x450>)
 80008f8:	483f      	ldr	r0, [pc, #252]	; (80009f8 <main+0x448>)
 80008fa:	f000 fedb 	bl	80016b4 <message>
   	   message("Message: %d\r\n", HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE));
 80008fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000902:	4937      	ldr	r1, [pc, #220]	; (80009e0 <main+0x430>)
 8000904:	4840      	ldr	r0, [pc, #256]	; (8000a08 <main+0x458>)
 8000906:	f003 fc93 	bl	8004230 <HAL_I2S_Receive_DMA>
 800090a:	4603      	mov	r3, r0
 800090c:	4619      	mov	r1, r3
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x454>)
 8000910:	f000 fed0 	bl	80016b4 <message>
       Error_Handler();
 8000914:	f000 fef0 	bl	80016f8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8000918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091c:	f001 fac4 	bl	8001ea8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	4839      	ldr	r0, [pc, #228]	; (8000a0c <main+0x45c>)
 8000928:	f002 f970 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000930:	f001 faba 	bl	8001ea8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093a:	4834      	ldr	r0, [pc, #208]	; (8000a0c <main+0x45c>)
 800093c:	f002 f966 	bl	8002c0c <HAL_GPIO_WritePin>

	if(save_frequency >= AUDIO_BUFFER_SIZE * 2){
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <main+0x460>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000948:	dbe6      	blt.n	8000918 <main+0x368>
		stop_saving = 1;
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <main+0x464>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]

		HAL_I2S_DMAStop(&hi2s2);
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <main+0x44c>)
 8000952:	f003 fd29 	bl	80043a8 <HAL_I2S_DMAStop>
		HAL_I2S_DMAStop(&hi2s3);
 8000956:	482c      	ldr	r0, [pc, #176]	; (8000a08 <main+0x458>)
 8000958:	f003 fd26 	bl	80043a8 <HAL_I2S_DMAStop>

		read_and_print_registers();
 800095c:	f000 fc14 	bl	8001188 <read_and_print_registers>

		HAL_Delay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f001 faa0 	bl	8001ea8 <HAL_Delay>

		/* Update the data length in the header of the recorded Wave */
		f_lseek(&file_1, 0);
 8000968:	2100      	movs	r1, #0
 800096a:	482b      	ldr	r0, [pc, #172]	; (8000a18 <main+0x468>)
 800096c:	f009 ff2b 	bl	800a7c6 <f_lseek>
		f_lseek(&file_2, 0);
 8000970:	2100      	movs	r1, #0
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <main+0x46c>)
 8000974:	f009 ff27 	bl	800a7c6 <f_lseek>

		/* Parse the wav file header and extract required information */
		WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8000978:	4929      	ldr	r1, [pc, #164]	; (8000a20 <main+0x470>)
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0x474>)
 800097c:	f000 fe50 	bl	8001620 <WavProcess_HeaderUpdate>
		f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <main+0x478>)
 8000982:	222c      	movs	r2, #44	; 0x2c
 8000984:	4927      	ldr	r1, [pc, #156]	; (8000a24 <main+0x474>)
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <main+0x468>)
 8000988:	f009 fce1 	bl	800a34e <f_write>
		f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <main+0x478>)
 800098e:	222c      	movs	r2, #44	; 0x2c
 8000990:	4924      	ldr	r1, [pc, #144]	; (8000a24 <main+0x474>)
 8000992:	4822      	ldr	r0, [pc, #136]	; (8000a1c <main+0x46c>)
 8000994:	f009 fcdb 	bl	800a34e <f_write>

		f_close(&file_1);
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <main+0x468>)
 800099a:	f009 feea 	bl	800a772 <f_close>
		f_close(&file_2);
 800099e:	481f      	ldr	r0, [pc, #124]	; (8000a1c <main+0x46c>)
 80009a0:	f009 fee7 	bl	800a772 <f_close>

		fresult = f_mount(NULL, "/", 1);	/*	Unmount Stroge	*/
 80009a4:	2201      	movs	r2, #1
 80009a6:	4921      	ldr	r1, [pc, #132]	; (8000a2c <main+0x47c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f009 f95f 	bl	8009c6c <f_mount>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <main+0x480>)
 80009b4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <main+0x480>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <main+0x414>
 80009be:	481d      	ldr	r0, [pc, #116]	; (8000a34 <main+0x484>)
 80009c0:	f000 fe78 	bl	80016b4 <message>

		message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 80009c4:	481c      	ldr	r0, [pc, #112]	; (8000a38 <main+0x488>)
 80009c6:	f000 fe75 	bl	80016b4 <message>
		HAL_Delay(1000);
 80009ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ce:	f001 fa6b 	bl	8001ea8 <HAL_Delay>
		break;
 80009d2:	bf00      	nop
 80009d4:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200034c4 	.word	0x200034c4
 80009e4:	0800bad0 	.word	0x0800bad0
 80009e8:	0800bad4 	.word	0x0800bad4
 80009ec:	0800bab4 	.word	0x0800bab4
 80009f0:	20003cc4 	.word	0x20003cc4
 80009f4:	0800baf0 	.word	0x0800baf0
 80009f8:	0800b978 	.word	0x0800b978
 80009fc:	20000108 	.word	0x20000108
 8000a00:	0800bb24 	.word	0x0800bb24
 8000a04:	0800bb5c 	.word	0x0800bb5c
 8000a08:	20000150 	.word	0x20000150
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	200044c4 	.word	0x200044c4
 8000a14:	200044c8 	.word	0x200044c8
 8000a18:	20001400 	.word	0x20001400
 8000a1c:	20002430 	.word	0x20002430
 8000a20:	200044cc 	.word	0x200044cc
 8000a24:	20004504 	.word	0x20004504
 8000a28:	20004500 	.word	0x20004500
 8000a2c:	0800b9dc 	.word	0x0800b9dc
 8000a30:	200000a8 	.word	0x200000a8
 8000a34:	0800bb6c 	.word	0x0800bb6c
 8000a38:	0800bb90 	.word	0x0800bb90

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2230      	movs	r2, #48	; 0x30
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00a f9b2 	bl	800adb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 8000ab0:	23a5      	movs	r3, #165	; 0xa5
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fa3b 	bl	8004f3c <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000acc:	f000 fe14 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000adc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2105      	movs	r1, #5
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fc9c 	bl	800542c <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000afa:	f000 fdfd 	bl	80016f8 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b22:	2301      	movs	r3, #1
 8000b24:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000b26:	2332      	movs	r3, #50	; 0x32
 8000b28:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fe9b 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000b3c:	f000 fddc 	bl	80016f8 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <MX_I2C2_Init+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_I2C2_Init+0x58>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_I2C2_Init+0x50>)
 8000b86:	f002 f85b 	bl	8002c40 <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 fdb2 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000b4 	.word	0x200000b4
 8000b9c:	40005800 	.word	0x40005800
 8000ba0:	000186a0 	.word	0x000186a0

08000ba4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <MX_I2S2_Init+0x58>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bca:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000bce:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_I2S2_Init+0x54>)
 8000be4:	f003 f91a 	bl	8003e1c <HAL_I2S_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000bee:	f000 fd83 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000108 	.word	0x20000108
 8000bfc:	40003800 	.word	0x40003800

08000c00 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <MX_I2S3_Init+0x58>)
 8000c08:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c10:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c26:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c2a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_I2S3_Init+0x54>)
 8000c40:	f003 f8ec 	bl	8003e1c <HAL_I2S_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c4a:	f000 fd55 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000150 	.word	0x20000150
 8000c58:	40003c00 	.word	0x40003c00

08000c5c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <MX_SDIO_SD_Init+0x3c>)
 8000c64:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <MX_SDIO_SD_Init+0x38>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000258 	.word	0x20000258
 8000c98:	40012c00 	.word	0x40012c00

08000c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART2_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f005 fe92 	bl	80069fc <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 fd0b 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002dc 	.word	0x200002dc
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x54>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000d2c:	f005 feb3 	bl	8006a96 <HAL_MultiProcessor_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8000d36:	f000 fcdf 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000320 	.word	0x20000320
 8000d44:	40004800 	.word	0x40004800

08000d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_DMA_Init+0x4c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <MX_DMA_Init+0x4c>)
 8000d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_DMA_Init+0x4c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	200b      	movs	r0, #11
 8000d70:	f001 f999 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d74:	200b      	movs	r0, #11
 8000d76:	f001 f9b2 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200e      	movs	r0, #14
 8000d80:	f001 f991 	bl	80020a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d84:	200e      	movs	r0, #14
 8000d86:	f001 f9aa 	bl	80020de <HAL_NVIC_EnableIRQ>

}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a48      	ldr	r2, [pc, #288]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a41      	ldr	r2, [pc, #260]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a3a      	ldr	r2, [pc, #232]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <MX_GPIO_Init+0x140>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2132      	movs	r1, #50	; 0x32
 8000e5a:	4820      	ldr	r0, [pc, #128]	; (8000edc <MX_GPIO_Init+0x144>)
 8000e5c:	f001 fed6 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000e60:	2200      	movs	r2, #0
 8000e62:	f24b 0178 	movw	r1, #45176	; 0xb078
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <MX_GPIO_Init+0x148>)
 8000e68:	f001 fed0 	bl	8002c0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000e72:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <MX_GPIO_Init+0x14c>)
 8000e74:	f001 feca 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8000e78:	2332      	movs	r3, #50	; 0x32
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_GPIO_Init+0x144>)
 8000e90:	f001 fd20 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000e94:	f24b 0378 	movw	r3, #45176	; 0xb078
 8000e98:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_GPIO_Init+0x148>)
 8000eae:	f001 fd11 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000eb2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_GPIO_Init+0x14c>)
 8000ecc:	f001 fd02 	bl	80028d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */


// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_I2S_RxCpltCallback+0x74>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d12d      	bne.n	8000f54 <HAL_I2S_RxCpltCallback+0x6c>
	    if (hi2s->Instance == SPI2) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_I2S_RxCpltCallback+0x78>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10b      	bne.n	8000f1a <HAL_I2S_RxCpltCallback+0x32>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_I2S_RxCpltCallback+0x7c>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	4917      	ldr	r1, [pc, #92]	; (8000f68 <HAL_I2S_RxCpltCallback+0x80>)
 8000f0a:	4818      	ldr	r0, [pc, #96]	; (8000f6c <HAL_I2S_RxCpltCallback+0x84>)
 8000f0c:	f009 fa1f 	bl	800a34e <f_write>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2S_RxCpltCallback+0x32>
				Error_Handler();  // File write failed
 8000f16:	f000 fbef 	bl	80016f8 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_I2S_RxCpltCallback+0x88>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d10b      	bne.n	8000f3c <HAL_I2S_RxCpltCallback+0x54>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_I2S_RxCpltCallback+0x8c>)
 8000f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2a:	4913      	ldr	r1, [pc, #76]	; (8000f78 <HAL_I2S_RxCpltCallback+0x90>)
 8000f2c:	4813      	ldr	r0, [pc, #76]	; (8000f7c <HAL_I2S_RxCpltCallback+0x94>)
 8000f2e:	f009 fa0e 	bl	800a34e <f_write>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_I2S_RxCpltCallback+0x54>
				Error_Handler();  // File write failed
 8000f38:	f000 fbde 	bl	80016f8 <Error_Handler>
			}
		}
	    save_frequency ++;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_I2S_RxCpltCallback+0x98>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HAL_I2S_RxCpltCallback+0x98>)
 8000f44:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_I2S_RxCpltCallback+0x9c>)
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_I2S_RxCpltCallback+0x7c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <HAL_I2S_RxCpltCallback+0x9c>)
 8000f52:	6053      	str	r3, [r2, #4]
	}
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200044c8 	.word	0x200044c8
 8000f60:	40003800 	.word	0x40003800
 8000f64:	2000347c 	.word	0x2000347c
 8000f68:	200040c4 	.word	0x200040c4
 8000f6c:	20001400 	.word	0x20001400
 8000f70:	40003c00 	.word	0x40003c00
 8000f74:	20003480 	.word	0x20003480
 8000f78:	200038c4 	.word	0x200038c4
 8000f7c:	20002430 	.word	0x20002430
 8000f80:	200044c4 	.word	0x200044c4
 8000f84:	200044f8 	.word	0x200044f8

08000f88 <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d121      	bne.n	8000fdc <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10b      	bne.n	8000fba <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_I2S_RxHalfCpltCallback+0x64>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa8:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <HAL_I2S_RxHalfCpltCallback+0x68>)
 8000faa:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8000fac:	f009 f9cf 	bl	800a34e <f_write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 8000fb6:	f000 fb9f 	bl	80016f8 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_I2S_RxHalfCpltCallback+0x70>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d10b      	bne.n	8000fdc <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_I2S_RxHalfCpltCallback+0x74>)
 8000fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8000fce:	f009 f9be 	bl	800a34e <f_write>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 8000fd8:	f000 fb8e 	bl	80016f8 <Error_Handler>
	    	}
	    }
	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200044c8 	.word	0x200044c8
 8000fe8:	40003800 	.word	0x40003800
 8000fec:	2000347c 	.word	0x2000347c
 8000ff0:	20003cc4 	.word	0x20003cc4
 8000ff4:	20001400 	.word	0x20001400
 8000ff8:	40003c00 	.word	0x40003c00
 8000ffc:	20003480 	.word	0x20003480
 8001000:	200034c4 	.word	0x200034c4
 8001004:	20002430 	.word	0x20002430

08001008 <configure_codec>:
	else
		message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
}


void configure_codec() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	2205      	movs	r2, #5
 8001014:	21e2      	movs	r1, #226	; 0xe2
 8001016:	482e      	ldr	r0, [pc, #184]	; (80010d0 <configure_codec+0xc8>)
 8001018:	f002 fa76 	bl	8003508 <HAL_I2C_IsDeviceReady>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 8001022:	492c      	ldr	r1, [pc, #176]	; (80010d4 <configure_codec+0xcc>)
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <configure_codec+0xd0>)
 8001026:	f000 fb45 	bl	80016b4 <message>
    }
    HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102e:	f000 ff3b 	bl	8001ea8 <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e023      	b.n	8001080 <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 8001038:	4a28      	ldr	r2, [pc, #160]	; (80010dc <configure_codec+0xd4>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <configure_codec+0xd4>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	21e2      	movs	r1, #226	; 0xe2
 8001060:	481b      	ldr	r0, [pc, #108]	; (80010d0 <configure_codec+0xc8>)
 8001062:	f001 ff31 	bl	8002ec8 <HAL_I2C_Mem_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 800106c:	491c      	ldr	r1, [pc, #112]	; (80010e0 <configure_codec+0xd8>)
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <configure_codec+0xd0>)
 8001070:	f000 fb20 	bl	80016b4 <message>
        }
        HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f000 ff17 	bl	8001ea8 <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b0d      	cmp	r3, #13
 8001084:	d9d8      	bls.n	8001038 <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1cbb      	adds	r3, r7, #2
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	2206      	movs	r2, #6
 8001098:	21e2      	movs	r1, #226	; 0xe2
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <configure_codec+0xc8>)
 800109c:	f002 f80e 	bl	80030bc <HAL_I2C_Mem_Read>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10b      	bne.n	80010be <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <configure_codec+0xdc>)
 80010ae:	f001 fdad 	bl	8002c0c <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 fef6 	bl	8001ea8 <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 80010bc:	e003      	b.n	80010c6 <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 80010be:	490a      	ldr	r1, [pc, #40]	; (80010e8 <configure_codec+0xe0>)
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <configure_codec+0xd0>)
 80010c2:	f000 faf7 	bl	80016b4 <message>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	0800bbc4 	.word	0x0800bbc4
 80010d8:	0800b978 	.word	0x0800b978
 80010dc:	20000000 	.word	0x20000000
 80010e0:	0800bdd4 	.word	0x0800bdd4
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	0800bda0 	.word	0x0800bda0

080010ec <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <CODEC_RST+0x48>)
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <CODEC_RST+0x4c>)
 80010f4:	f000 fade 	bl	80016b4 <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 80010f8:	2201      	movs	r2, #1
 80010fa:	2102      	movs	r1, #2
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <CODEC_RST+0x50>)
 80010fe:	f001 fd85 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f000 fecf 	bl	8001ea8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2102      	movs	r1, #2
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <CODEC_RST+0x50>)
 8001110:	f001 fd7c 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001118:	f000 fec6 	bl	8001ea8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2102      	movs	r1, #2
 8001120:	4806      	ldr	r0, [pc, #24]	; (800113c <CODEC_RST+0x50>)
 8001122:	f001 fd73 	bl	8002c0c <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f000 febd 	bl	8001ea8 <HAL_Delay>

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	0800bee0 	.word	0x0800bee0
 8001138:	0800b978 	.word	0x0800b978
 800113c:	40021000 	.word	0x40021000

08001140 <TS472IQT_EN>:

void TS472IQT_EN(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <TS472IQT_EN+0x40>)
 800114c:	f001 fd5e 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <TS472IQT_EN+0x44>)
 8001158:	f001 fd58 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <TS472IQT_EN+0x44>)
 8001164:	f001 fd52 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <TS472IQT_EN+0x44>)
 8001170:	f001 fd4c 	bl	8002c0c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f000 fe97 	bl	8001ea8 <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40020000 	.word	0x40020000

08001188 <read_and_print_registers>:


// Function to read and print register values
void read_and_print_registers() {
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
    uint8_t i2c_rbf; // Buffer to store the read byte
    HAL_StatusTypeDef ret;

    message("Reg\tName\t\tRead Value\tReset Value\r\n");
 800118e:	4832      	ldr	r0, [pc, #200]	; (8001258 <read_and_print_registers+0xd0>)
 8001190:	f000 fa90 	bl	80016b4 <message>
    message("----------------------------------------------------------\r\n");
 8001194:	4831      	ldr	r0, [pc, #196]	; (800125c <read_and_print_registers+0xd4>)
 8001196:	f000 fa8d 	bl	80016b4 <message>

    for (uint8_t i = 0; i < NUM_REGISTERS; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e051      	b.n	8001244 <read_and_print_registers+0xbc>
        uint8_t reg = registers[i].address;
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	492f      	ldr	r1, [pc, #188]	; (8001260 <read_and_print_registers+0xd8>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	71bb      	strb	r3, [r7, #6]
        ret = HAL_I2C_Mem_Read(&hi2c2, I2C_DEVICE_ADDR, reg, 1, &i2c_rbf, 1, 1000);
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	21e2      	movs	r1, #226	; 0xe2
 80011c8:	4826      	ldr	r0, [pc, #152]	; (8001264 <read_and_print_registers+0xdc>)
 80011ca:	f001 ff77 	bl	80030bc <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	717b      	strb	r3, [r7, #5]

        if (ret == HAL_OK) {
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d11b      	bne.n	8001210 <read_and_print_registers+0x88>
        	message("0x%02X\t%-15s\t0x%02X\t\t0x%02X\r\n", reg, registers[i].name, i2c_rbf, registers[i].reset_value);
 80011d8:	79b9      	ldrb	r1, [r7, #6]
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	4820      	ldr	r0, [pc, #128]	; (8001260 <read_and_print_registers+0xd8>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4403      	add	r3, r0
 80011e8:	3304      	adds	r3, #4
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	793b      	ldrb	r3, [r7, #4]
 80011ee:	461d      	mov	r5, r3
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	4c1b      	ldr	r4, [pc, #108]	; (8001260 <read_and_print_registers+0xd8>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4423      	add	r3, r4
 80011fe:	3308      	adds	r3, #8
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	462b      	mov	r3, r5
 8001206:	4602      	mov	r2, r0
 8001208:	4817      	ldr	r0, [pc, #92]	; (8001268 <read_and_print_registers+0xe0>)
 800120a:	f000 fa53 	bl	80016b4 <message>
 800120e:	e016      	b.n	800123e <read_and_print_registers+0xb6>
        } else {
        	message("0x%02X\t%-15s\tError\t\t0x%02X\r\n", reg, registers[i].name, registers[i].reset_value);
 8001210:	79b9      	ldrb	r1, [r7, #6]
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <read_and_print_registers+0xd8>)
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4403      	add	r3, r0
 8001220:	3304      	adds	r3, #4
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	4c0e      	ldr	r4, [pc, #56]	; (8001260 <read_and_print_registers+0xd8>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4423      	add	r3, r4
 8001232:	3308      	adds	r3, #8
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4602      	mov	r2, r0
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <read_and_print_registers+0xe4>)
 800123a:	f000 fa3b 	bl	80016b4 <message>
    for (uint8_t i = 0; i < NUM_REGISTERS; i++) {
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	3301      	adds	r3, #1
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b0e      	cmp	r3, #14
 8001248:	d9aa      	bls.n	80011a0 <read_and_print_registers+0x18>
        }
    }

    message("----------------------------------------------------------\r\n");
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <read_and_print_registers+0xd4>)
 800124c:	f000 fa32 	bl	80016b4 <message>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bdb0      	pop	{r4, r5, r7, pc}
 8001258:	0800bf00 	.word	0x0800bf00
 800125c:	0800bf24 	.word	0x0800bf24
 8001260:	0800c0d4 	.word	0x0800c0d4
 8001264:	200000b4 	.word	0x200000b4
 8001268:	0800bf64 	.word	0x0800bf64
 800126c:	0800bf84 	.word	0x0800bf84

08001270 <History_update>:

void History_update(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 8001274:	494d      	ldr	r1, [pc, #308]	; (80013ac <History_update+0x13c>)
 8001276:	484e      	ldr	r0, [pc, #312]	; (80013b0 <History_update+0x140>)
 8001278:	f009 fcc9 	bl	800ac0e <f_stat>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <History_update+0x144>)
 8001282:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 8001284:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <History_update+0x144>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 800128c:	484a      	ldr	r0, [pc, #296]	; (80013b8 <History_update+0x148>)
 800128e:	f000 fa11 	bl	80016b4 <message>
 8001292:	e01a      	b.n	80012ca <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 8001294:	4849      	ldr	r0, [pc, #292]	; (80013bc <History_update+0x14c>)
 8001296:	f000 fa0d 	bl	80016b4 <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800129a:	220a      	movs	r2, #10
 800129c:	4944      	ldr	r1, [pc, #272]	; (80013b0 <History_update+0x140>)
 800129e:	4848      	ldr	r0, [pc, #288]	; (80013c0 <History_update+0x150>)
 80012a0:	f008 fd2a 	bl	8009cf8 <f_open>
		sprintf(buffer, "%d", number);
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <History_update+0x154>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4947      	ldr	r1, [pc, #284]	; (80013c8 <History_update+0x158>)
 80012ac:	4847      	ldr	r0, [pc, #284]	; (80013cc <History_update+0x15c>)
 80012ae:	f009 fe79 	bl	800afa4 <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 80012b2:	4846      	ldr	r0, [pc, #280]	; (80013cc <History_update+0x15c>)
 80012b4:	f7fe ff8c 	bl	80001d0 <strlen>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <History_update+0x160>)
 80012bc:	4943      	ldr	r1, [pc, #268]	; (80013cc <History_update+0x15c>)
 80012be:	4840      	ldr	r0, [pc, #256]	; (80013c0 <History_update+0x150>)
 80012c0:	f009 f845 	bl	800a34e <f_write>
		f_close(&file_1);
 80012c4:	483e      	ldr	r0, [pc, #248]	; (80013c0 <History_update+0x150>)
 80012c6:	f009 fa54 	bl	800a772 <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 80012ca:	2201      	movs	r2, #1
 80012cc:	4938      	ldr	r1, [pc, #224]	; (80013b0 <History_update+0x140>)
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <History_update+0x150>)
 80012d0:	f008 fd12 	bl	8009cf8 <f_open>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <History_update+0x164>)
 80012da:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <History_update+0x164>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15e      	bne.n	80013a2 <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 80012e4:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <History_update+0x168>)
 80012e6:	2263      	movs	r2, #99	; 0x63
 80012e8:	4938      	ldr	r1, [pc, #224]	; (80013cc <History_update+0x15c>)
 80012ea:	4835      	ldr	r0, [pc, #212]	; (80013c0 <History_update+0x150>)
 80012ec:	f008 fed0 	bl	800a090 <f_read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <History_update+0x164>)
 80012f6:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <History_update+0x164>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d11a      	bne.n	8001336 <History_update+0xc6>
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <History_update+0x168>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d016      	beq.n	8001336 <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <History_update+0x168>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <History_update+0x15c>)
 800130e:	2100      	movs	r1, #0
 8001310:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 8001312:	482e      	ldr	r0, [pc, #184]	; (80013cc <History_update+0x15c>)
 8001314:	f009 fd0f 	bl	800ad36 <atoi>
 8001318:	4603      	mov	r3, r0
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <History_update+0x154>)
 800131c:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <History_update+0x154>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <History_update+0x154>)
 8001326:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <History_update+0x154>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	482b      	ldr	r0, [pc, #172]	; (80013dc <History_update+0x16c>)
 8001330:	f000 f9c0 	bl	80016b4 <message>
 8001334:	e002      	b.n	800133c <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 8001336:	482a      	ldr	r0, [pc, #168]	; (80013e0 <History_update+0x170>)
 8001338:	f000 f9bc 	bl	80016b4 <message>
		}
		f_close(&file_1); // Close the file
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <History_update+0x150>)
 800133e:	f009 fa18 	bl	800a772 <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001342:	220a      	movs	r2, #10
 8001344:	491a      	ldr	r1, [pc, #104]	; (80013b0 <History_update+0x140>)
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <History_update+0x150>)
 8001348:	f008 fcd6 	bl	8009cf8 <f_open>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <History_update+0x164>)
 8001352:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <History_update+0x164>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d11e      	bne.n	800139a <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <History_update+0x154>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4919      	ldr	r1, [pc, #100]	; (80013c8 <History_update+0x158>)
 8001364:	4819      	ldr	r0, [pc, #100]	; (80013cc <History_update+0x15c>)
 8001366:	f009 fe1d 	bl	800afa4 <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <History_update+0x15c>)
 800136c:	f7fe ff30 	bl	80001d0 <strlen>
 8001370:	4602      	mov	r2, r0
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <History_update+0x160>)
 8001374:	4915      	ldr	r1, [pc, #84]	; (80013cc <History_update+0x15c>)
 8001376:	4812      	ldr	r0, [pc, #72]	; (80013c0 <History_update+0x150>)
 8001378:	f008 ffe9 	bl	800a34e <f_write>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <History_update+0x164>)
 8001382:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <History_update+0x164>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <History_update+0x174>)
 800138e:	f000 f991 	bl	80016b4 <message>
			}
			f_close(&file_1); // Close the file
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <History_update+0x150>)
 8001394:	f009 f9ed 	bl	800a772 <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 8001398:	e006      	b.n	80013a8 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 800139a:	4813      	ldr	r0, [pc, #76]	; (80013e8 <History_update+0x178>)
 800139c:	f000 f98a 	bl	80016b4 <message>
}
 80013a0:	e002      	b.n	80013a8 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <History_update+0x17c>)
 80013a4:	f000 f986 	bl	80016b4 <message>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20003464 	.word	0x20003464
 80013b0:	0800bfa4 	.word	0x0800bfa4
 80013b4:	200000a8 	.word	0x200000a8
 80013b8:	0800bfb0 	.word	0x0800bfb0
 80013bc:	0800bfd4 	.word	0x0800bfd4
 80013c0:	20001400 	.word	0x20001400
 80013c4:	200003c8 	.word	0x200003c8
 80013c8:	0800bff0 	.word	0x0800bff0
 80013cc:	20000364 	.word	0x20000364
 80013d0:	200000b0 	.word	0x200000b0
 80013d4:	20003460 	.word	0x20003460
 80013d8:	200000ac 	.word	0x200000ac
 80013dc:	0800bff4 	.word	0x0800bff4
 80013e0:	0800c00c 	.word	0x0800c00c
 80013e4:	0800c028 	.word	0x0800c028
 80013e8:	0800c044 	.word	0x0800c044
 80013ec:	0800c070 	.word	0x0800c070

080013f0 <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <WavProcess_EncInit+0x78>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <WavProcess_EncInit+0x78>)
 8001402:	2202      	movs	r2, #2
 8001404:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <WavProcess_EncInit+0x78>)
 8001408:	2210      	movs	r2, #16
 800140a:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <WavProcess_EncInit+0x78>)
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <WavProcess_EncInit+0x7c>)
 8001410:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <WavProcess_EncInit+0x78>)
 8001414:	222c      	movs	r2, #44	; 0x2c
 8001416:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <WavProcess_EncInit+0x78>)
 800141a:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <WavProcess_EncInit+0x78>)
 800141e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001420:	08d2      	lsrs	r2, r2, #3
 8001422:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001424:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <WavProcess_EncInit+0x78>)
 800142a:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800142c:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <WavProcess_EncInit+0x78>)
 8001432:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <WavProcess_EncInit+0x78>)
 8001436:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <WavProcess_EncInit+0x78>)
 800143a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	b29b      	uxth	r3, r3
 8001440:	fb12 f303 	smulbb	r3, r2, r3
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <WavProcess_EncInit+0x78>)
 8001448:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800144a:	4907      	ldr	r1, [pc, #28]	; (8001468 <WavProcess_EncInit+0x78>)
 800144c:	6838      	ldr	r0, [r7, #0]
 800144e:	f000 f80f 	bl	8001470 <WavProcess_HeaderInit>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <WavProcess_EncInit+0x6c>
  {
    return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <WavProcess_EncInit+0x6e>
  }
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200044cc 	.word	0x200044cc
 800146c:	001d4c00 	.word	0x001d4c00

08001470 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2252      	movs	r2, #82	; 0x52
 800147e:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	2249      	movs	r2, #73	; 0x49
 8001486:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3302      	adds	r3, #2
 800148c:	2246      	movs	r2, #70	; 0x46
 800148e:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3303      	adds	r3, #3
 8001494:	2246      	movs	r2, #70	; 0x46
 8001496:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3304      	adds	r3, #4
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3305      	adds	r3, #5
 80014a4:	224c      	movs	r2, #76	; 0x4c
 80014a6:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3306      	adds	r3, #6
 80014ac:	221d      	movs	r2, #29
 80014ae:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3307      	adds	r3, #7
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3308      	adds	r3, #8
 80014bc:	2257      	movs	r2, #87	; 0x57
 80014be:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3309      	adds	r3, #9
 80014c4:	2241      	movs	r2, #65	; 0x41
 80014c6:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	330a      	adds	r3, #10
 80014cc:	2256      	movs	r2, #86	; 0x56
 80014ce:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	330b      	adds	r3, #11
 80014d4:	2245      	movs	r2, #69	; 0x45
 80014d6:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	330c      	adds	r3, #12
 80014dc:	2266      	movs	r2, #102	; 0x66
 80014de:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	330d      	adds	r3, #13
 80014e4:	226d      	movs	r2, #109	; 0x6d
 80014e6:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	330e      	adds	r3, #14
 80014ec:	2274      	movs	r2, #116	; 0x74
 80014ee:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	330f      	adds	r3, #15
 80014f4:	2220      	movs	r2, #32
 80014f6:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3310      	adds	r3, #16
 80014fc:	2210      	movs	r2, #16
 80014fe:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3311      	adds	r3, #17
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3312      	adds	r3, #18
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3313      	adds	r3, #19
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3314      	adds	r3, #20
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3315      	adds	r3, #21
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	8ada      	ldrh	r2, [r3, #22]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3316      	adds	r3, #22
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3317      	adds	r3, #23
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	699a      	ldr	r2, [r3, #24]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3318      	adds	r3, #24
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	0a1a      	lsrs	r2, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3319      	adds	r3, #25
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	0c1a      	lsrs	r2, r3, #16
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	331a      	adds	r3, #26
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	0e1a      	lsrs	r2, r3, #24
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	331b      	adds	r3, #27
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	331c      	adds	r3, #28
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	0a1a      	lsrs	r2, r3, #8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	331d      	adds	r3, #29
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	0c1a      	lsrs	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	331e      	adds	r3, #30
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	0e1a      	lsrs	r2, r3, #24
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	331f      	adds	r3, #31
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	8c1a      	ldrh	r2, [r3, #32]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3320      	adds	r3, #32
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3321      	adds	r3, #33	; 0x21
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3322      	adds	r3, #34	; 0x22
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3323      	adds	r3, #35	; 0x23
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3324      	adds	r3, #36	; 0x24
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3325      	adds	r3, #37	; 0x25
 80015dc:	2261      	movs	r2, #97	; 0x61
 80015de:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3326      	adds	r3, #38	; 0x26
 80015e4:	2274      	movs	r2, #116	; 0x74
 80015e6:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3327      	adds	r3, #39	; 0x27
 80015ec:	2261      	movs	r2, #97	; 0x61
 80015ee:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3328      	adds	r3, #40	; 0x28
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3329      	adds	r3, #41	; 0x29
 80015fc:	224c      	movs	r2, #76	; 0x4c
 80015fe:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	332a      	adds	r3, #42	; 0x2a
 8001604:	221d      	movs	r2, #29
 8001606:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	332b      	adds	r3, #43	; 0x2b
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0a1a      	lsrs	r2, r3, #8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3305      	adds	r3, #5
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c1a      	lsrs	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3306      	adds	r3, #6
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0e1a      	lsrs	r2, r3, #24
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3307      	adds	r3, #7
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	3b2c      	subs	r3, #44	; 0x2c
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001668:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3328      	adds	r3, #40	; 0x28
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0a1a      	lsrs	r2, r3, #8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3329      	adds	r3, #41	; 0x29
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	0c1a      	lsrs	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	332a      	adds	r3, #42	; 0x2a
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <WavProcess_HeaderUpdate+0x90>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	0e1a      	lsrs	r2, r3, #24
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	332b      	adds	r3, #43	; 0x2b
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200044f8 	.word	0x200044f8

080016b4 <message>:

void message(const char *format, ...) {
 80016b4:	b40f      	push	{r0, r1, r2, r3}
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f009 fb69 	bl	800ad94 <malloc>
 80016c2:	4603      	mov	r3, r0
 80016c4:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <message+0x36>
        va_list args;
        va_start(args, format);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	2164      	movs	r1, #100	; 0x64
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f009 fd3b 	bl	800b154 <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7fe ff50 	bl	8000584 <Send_Uart>
        free(buf);      // Free the allocated memory
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f009 fb5d 	bl	800ada4 <free>
    }
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016f4:	b004      	add	sp, #16
 80016f6:	4770      	bx	lr

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_I2C_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001792:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001798:	2312      	movs	r3, #18
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017a4:	2304      	movs	r3, #4
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <HAL_I2C_MspInit+0x8c>)
 80017b0:	f001 f890 	bl	80028d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005800 	.word	0x40005800
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400

080017e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a91      	ldr	r2, [pc, #580]	; (8001a48 <HAL_I2S_MspInit+0x264>)
 8001802:	4293      	cmp	r3, r2
 8001804:	f040 808c 	bne.w	8001920 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	4b8f      	ldr	r3, [pc, #572]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a8e      	ldr	r2, [pc, #568]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b8c      	ldr	r3, [pc, #560]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a87      	ldr	r2, [pc, #540]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b7e      	ldr	r3, [pc, #504]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800185c:	2308      	movs	r3, #8
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800186c:	2305      	movs	r3, #5
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	4876      	ldr	r0, [pc, #472]	; (8001a50 <HAL_I2S_MspInit+0x26c>)
 8001878:	f001 f82c 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800187c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800188e:	2305      	movs	r3, #5
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	486e      	ldr	r0, [pc, #440]	; (8001a54 <HAL_I2S_MspInit+0x270>)
 800189a:	f001 f81b 	bl	80028d4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800189e:	4b6e      	ldr	r3, [pc, #440]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018a0:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_I2S_MspInit+0x278>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018aa:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018be:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c6:	4b64      	ldr	r3, [pc, #400]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80018cc:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d4:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018dc:	2204      	movs	r2, #4
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018e0:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018e2:	2203      	movs	r2, #3
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018ec:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018f2:	4859      	ldr	r0, [pc, #356]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 80018f4:	f000 fc0e 	bl	8002114 <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 80018fe:	f7ff fefb 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
 8001908:	4a53      	ldr	r2, [pc, #332]	; (8001a58 <HAL_I2S_MspInit+0x274>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2024      	movs	r0, #36	; 0x24
 8001914:	f000 fbc7 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001918:	2024      	movs	r0, #36	; 0x24
 800191a:	f000 fbe0 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800191e:	e08f      	b.n	8001a40 <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a4e      	ldr	r2, [pc, #312]	; (8001a60 <HAL_I2S_MspInit+0x27c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	f040 808a 	bne.w	8001a40 <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	6413      	str	r3, [r2, #64]	; 0x40
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a3e      	ldr	r2, [pc, #248]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_I2S_MspInit+0x268>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001980:	2310      	movs	r3, #16
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001990:	2306      	movs	r3, #6
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	4832      	ldr	r0, [pc, #200]	; (8001a64 <HAL_I2S_MspInit+0x280>)
 800199c:	f000 ff9a 	bl	80028d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80019a0:	2328      	movs	r3, #40	; 0x28
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019b0:	2306      	movs	r3, #6
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4826      	ldr	r0, [pc, #152]	; (8001a54 <HAL_I2S_MspInit+0x270>)
 80019bc:	f000 ff8a 	bl	80028d4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_I2S_MspInit+0x288>)
 80019c4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e6:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 8001a04:	2203      	movs	r2, #3
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001a14:	4814      	ldr	r0, [pc, #80]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 8001a16:	f000 fb7d 	bl	8002114 <HAL_DMA_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2S_MspInit+0x240>
      Error_Handler();
 8001a20:	f7ff fe6a 	bl	80016f8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 8001a28:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_I2S_MspInit+0x284>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2033      	movs	r0, #51	; 0x33
 8001a36:	f000 fb36 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a3a:	2033      	movs	r0, #51	; 0x33
 8001a3c:	f000 fb4f 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40003800 	.word	0x40003800
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020400 	.word	0x40020400
 8001a58:	20000198 	.word	0x20000198
 8001a5c:	40026058 	.word	0x40026058
 8001a60:	40003c00 	.word	0x40003c00
 8001a64:	40020000 	.word	0x40020000
 8001a68:	200001f8 	.word	0x200001f8
 8001a6c:	40026010 	.word	0x40026010

08001a70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <HAL_SD_MspInit+0xc0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d14a      	bne.n	8001b28 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_SD_MspInit+0xc4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001ae6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001af8:	230c      	movs	r3, #12
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <HAL_SD_MspInit+0xc8>)
 8001b04:	f000 fee6 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b18:	230c      	movs	r3, #12
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <HAL_SD_MspInit+0xcc>)
 8001b24:	f000 fed6 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40012c00 	.word	0x40012c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_UART_MspInit+0xe8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12c      	bne.n	8001bbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a30      	ldr	r2, [pc, #192]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001baa:	2307      	movs	r3, #7
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481e      	ldr	r0, [pc, #120]	; (8001c30 <HAL_UART_MspInit+0xf0>)
 8001bb6:	f000 fe8d 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bba:	e031      	b.n	8001c20 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_UART_MspInit+0xf4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_UART_MspInit+0xec>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c10:	2307      	movs	r3, #7
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <HAL_UART_MspInit+0xf8>)
 8001c1c:	f000 fe5a 	bl	80028d4 <HAL_GPIO_Init>
}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40004800 	.word	0x40004800
 8001c38:	40020c00 	.word	0x40020c00

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 f8ee 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <DMA1_Stream0_IRQHandler+0x10>)
 8001c96:	f000 fbb3 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200001f8 	.word	0x200001f8

08001ca4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <DMA1_Stream3_IRQHandler+0x10>)
 8001caa:	f000 fba9 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000198 	.word	0x20000198

08001cb8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <SPI2_IRQHandler+0x10>)
 8001cbe:	f002 fd4d 	bl	800475c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000108 	.word	0x20000108

08001ccc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <SPI3_IRQHandler+0x10>)
 8001cd2:	f002 fd43 	bl	800475c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000150 	.word	0x20000150

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f009 f816 	bl	800ad40 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	20004530 	.word	0x20004530
 8001d48:	20004588 	.word	0x20004588

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d76:	490e      	ldr	r1, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d8c:	4c0b      	ldr	r4, [pc, #44]	; (8001dbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d9a:	f7ff ffd7 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f008 ffd5 	bl	800ad4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7fe fc05 	bl	80005b0 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001db4:	0800c380 	.word	0x0800c380
  ldr r2, =_sbss
 8001db8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001dbc:	20004584 	.word	0x20004584

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f94f 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fc84 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f967 	bl	80020fa <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 f92f 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000001c 	.word	0x2000001c
 8001e60:	20000024 	.word	0x20000024
 8001e64:	20000020 	.word	0x20000020

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000024 	.word	0x20000024
 8001e8c:	20004534 	.word	0x20004534

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20004534 	.word	0x20004534

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000024 	.word	0x20000024

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff8e 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff29 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff3e 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff8e 	bl	8001fe4 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff31 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff feb6 	bl	8001e90 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e099      	b.n	8002264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	e00f      	b.n	8002172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002152:	f7ff fe9d 	bl	8001e90 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b05      	cmp	r3, #5
 800215e:	d908      	bls.n	8002172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e078      	b.n	8002264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e8      	bne.n	8002152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_DMA_Init+0x158>)
 800218c:	4013      	ands	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4313      	orrs	r3, r2
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0307 	bic.w	r3, r3, #7
 80021f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2b04      	cmp	r3, #4
 8002204:	d117      	bne.n	8002236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fadf 	bl	80027dc <DMA_CheckFifoParam>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002232:	2301      	movs	r3, #1
 8002234:	e016      	b.n	8002264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa96 	bl	8002770 <DMA_CalcBaseAndBitshift>
 8002244:	4603      	mov	r3, r0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	223f      	movs	r2, #63	; 0x3f
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f010803f 	.word	0xf010803f

08002270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Start_IT+0x26>
 8002292:	2302      	movs	r3, #2
 8002294:	e040      	b.n	8002318 <HAL_DMA_Start_IT+0xa8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d12f      	bne.n	800230a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fa28 	bl	8002714 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	223f      	movs	r2, #63	; 0x3f
 80022ca:	409a      	lsls	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0216 	orr.w	r2, r2, #22
 80022de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e005      	b.n	8002316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800232e:	f7ff fdaf 	bl	8001e90 <HAL_GetTick>
 8002332:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d008      	beq.n	8002352 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e052      	b.n	80023f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0216 	bic.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002370:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_DMA_Abort+0x62>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0208 	bic.w	r2, r2, #8
 8002390:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	e013      	b.n	80023cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a4:	f7ff fd74 	bl	8001e90 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d90c      	bls.n	80023cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2203      	movs	r2, #3
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e015      	b.n	80023f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e4      	bne.n	80023a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	223f      	movs	r2, #63	; 0x3f
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800240c:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_DMA_IRQHandler+0x248>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a8e      	ldr	r2, [pc, #568]	; (800264c <HAL_DMA_IRQHandler+0x24c>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2208      	movs	r2, #8
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2208      	movs	r2, #8
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2201      	movs	r2, #1
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	2204      	movs	r2, #4
 80024a8:	409a      	lsls	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2204      	movs	r2, #4
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2210      	movs	r2, #16
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d043      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03c      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2210      	movs	r2, #16
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d018      	beq.n	8002542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d024      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e01f      	b.n	8002570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e016      	b.n	8002570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2220      	movs	r2, #32
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 808f 	beq.w	80026a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8087 	beq.w	80026a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2220      	movs	r2, #32
 8002598:	409a      	lsls	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d136      	bne.n	8002618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0216 	bic.w	r2, r2, #22
 80025b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <HAL_DMA_IRQHandler+0x1da>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0208 	bic.w	r2, r2, #8
 80025e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	223f      	movs	r2, #63	; 0x3f
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07e      	beq.n	800270c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
        }
        return;
 8002616:	e079      	b.n	800270c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	2b00      	cmp	r3, #0
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
 8002644:	e02c      	b.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
 8002646:	bf00      	nop
 8002648:	2000001c 	.word	0x2000001c
 800264c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e01e      	b.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10f      	bne.n	8002690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0210 	bic.w	r2, r2, #16
 800267e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d032      	beq.n	800270e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d022      	beq.n	80026fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2205      	movs	r2, #5
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d307      	bcc.n	80026e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f2      	bne.n	80026cc <HAL_DMA_IRQHandler+0x2cc>
 80026e6:	e000      	b.n	80026ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e000      	b.n	800270e <HAL_DMA_IRQHandler+0x30e>
        return;
 800270c:	bf00      	nop
    }
  }
}
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002730:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d108      	bne.n	8002754 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002752:	e007      	b.n	8002764 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3b10      	subs	r3, #16
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <DMA_CalcBaseAndBitshift+0x68>)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d909      	bls.n	80027b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	1d1a      	adds	r2, r3, #4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58
 80027b0:	e007      	b.n	80027c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	aaaaaaab 	.word	0xaaaaaaab
 80027d8:	0800c1a0 	.word	0x0800c1a0

080027dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11f      	bne.n	8002836 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d856      	bhi.n	80028aa <DMA_CheckFifoParam+0xce>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <DMA_CheckFifoParam+0x28>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002815 	.word	0x08002815
 8002808:	08002827 	.word	0x08002827
 800280c:	08002815 	.word	0x08002815
 8002810:	080028ab 	.word	0x080028ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d046      	beq.n	80028ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002824:	e043      	b.n	80028ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800282e:	d140      	bne.n	80028b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002834:	e03d      	b.n	80028b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283e:	d121      	bne.n	8002884 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d837      	bhi.n	80028b6 <DMA_CheckFifoParam+0xda>
 8002846:	a201      	add	r2, pc, #4	; (adr r2, 800284c <DMA_CheckFifoParam+0x70>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	0800285d 	.word	0x0800285d
 8002850:	08002863 	.word	0x08002863
 8002854:	0800285d 	.word	0x0800285d
 8002858:	08002875 	.word	0x08002875
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      break;
 8002860:	e030      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d025      	beq.n	80028ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002872:	e022      	b.n	80028ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800287c:	d11f      	bne.n	80028be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002882:	e01c      	b.n	80028be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d903      	bls.n	8002892 <DMA_CheckFifoParam+0xb6>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d003      	beq.n	8002898 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002890:	e018      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      break;
 8002896:	e015      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00e      	beq.n	80028c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      break;
 80028a8:	e00b      	b.n	80028c2 <DMA_CheckFifoParam+0xe6>
      break;
 80028aa:	bf00      	nop
 80028ac:	e00a      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e008      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e006      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      break;
 80028b6:	bf00      	nop
 80028b8:	e004      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <DMA_CheckFifoParam+0xe8>
      break;
 80028c2:	bf00      	nop
    }
  } 
  
  return status; 
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	e16b      	b.n	8002bc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 815a 	bne.w	8002bc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d005      	beq.n	8002926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002922:	2b02      	cmp	r3, #2
 8002924:	d130      	bne.n	8002988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0201 	and.w	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b03      	cmp	r3, #3
 8002992:	d017      	beq.n	80029c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d123      	bne.n	8002a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80b4 	beq.w	8002bc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b60      	ldr	r3, [pc, #384]	; (8002be0 <HAL_GPIO_Init+0x30c>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a5f      	ldr	r2, [pc, #380]	; (8002be0 <HAL_GPIO_Init+0x30c>)
 8002a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_GPIO_Init+0x30c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a76:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <HAL_GPIO_Init+0x310>)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_GPIO_Init+0x314>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d02b      	beq.n	8002afa <HAL_GPIO_Init+0x226>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a51      	ldr	r2, [pc, #324]	; (8002bec <HAL_GPIO_Init+0x318>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d025      	beq.n	8002af6 <HAL_GPIO_Init+0x222>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <HAL_GPIO_Init+0x31c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01f      	beq.n	8002af2 <HAL_GPIO_Init+0x21e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	; (8002bf4 <HAL_GPIO_Init+0x320>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d019      	beq.n	8002aee <HAL_GPIO_Init+0x21a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4e      	ldr	r2, [pc, #312]	; (8002bf8 <HAL_GPIO_Init+0x324>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_GPIO_Init+0x216>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_GPIO_Init+0x328>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_GPIO_Init+0x212>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_GPIO_Init+0x32c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x20e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4b      	ldr	r2, [pc, #300]	; (8002c04 <HAL_GPIO_Init+0x330>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_GPIO_Init+0x20a>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e00e      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	e00c      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	e00a      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	e008      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e004      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x228>
 8002afa:	2300      	movs	r3, #0
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f002 0203 	and.w	r2, r2, #3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4093      	lsls	r3, r2
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b0c:	4935      	ldr	r1, [pc, #212]	; (8002be4 <HAL_GPIO_Init+0x310>)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b92:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	f67f ae90 	bls.w	80028f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40021400 	.word	0x40021400
 8002c00:	40021800 	.word	0x40021800
 8002c04:	40021c00 	.word	0x40021c00
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e12b      	b.n	8002eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fd74 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f002 fdba 	bl	800581c <HAL_RCC_GetPCLK1Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a81      	ldr	r2, [pc, #516]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d807      	bhi.n	8002cc4 <HAL_I2C_Init+0x84>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a80      	ldr	r2, [pc, #512]	; (8002eb8 <HAL_I2C_Init+0x278>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e006      	b.n	8002cd2 <HAL_I2C_Init+0x92>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7d      	ldr	r2, [pc, #500]	; (8002ebc <HAL_I2C_Init+0x27c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0e7      	b.n	8002eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a78      	ldr	r2, [pc, #480]	; (8002ec0 <HAL_I2C_Init+0x280>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <HAL_I2C_Init+0xd4>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3301      	adds	r3, #1
 8002d12:	e009      	b.n	8002d28 <HAL_I2C_Init+0xe8>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_I2C_Init+0x284>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	3301      	adds	r3, #1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	495c      	ldr	r1, [pc, #368]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002d44:	428b      	cmp	r3, r1
 8002d46:	d819      	bhi.n	8002d7c <HAL_I2C_Init+0x13c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e59      	subs	r1, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d56:	1c59      	adds	r1, r3, #1
 8002d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_I2C_Init+0x138>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e59      	subs	r1, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	e051      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	e04f      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <HAL_I2C_Init+0x168>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e012      	b.n	8002dce <HAL_I2C_Init+0x18e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e58      	subs	r0, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	0099      	lsls	r1, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Init+0x196>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e022      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10e      	bne.n	8002dfc <HAL_I2C_Init+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1e58      	subs	r0, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	440b      	add	r3, r1
 8002dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfa:	e00f      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	0099      	lsls	r1, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6809      	ldr	r1, [r1, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6911      	ldr	r1, [r2, #16]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	000186a0 	.word	0x000186a0
 8002eb8:	001e847f 	.word	0x001e847f
 8002ebc:	003d08ff 	.word	0x003d08ff
 8002ec0:	431bde83 	.word	0x431bde83
 8002ec4:	10624dd3 	.word	0x10624dd3

08002ec8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	817b      	strh	r3, [r7, #10]
 8002eda:	460b      	mov	r3, r1
 8002edc:	813b      	strh	r3, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee2:	f7fe ffd5 	bl	8001e90 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	f040 80d9 	bne.w	80030a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2319      	movs	r3, #25
 8002efc:	2201      	movs	r2, #1
 8002efe:	496d      	ldr	r1, [pc, #436]	; (80030b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fdad 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0cc      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Mem_Write+0x56>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0c5      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d007      	beq.n	8002f44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	; 0x21
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f86:	88f8      	ldrh	r0, [r7, #6]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	8979      	ldrh	r1, [r7, #10]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4603      	mov	r3, r0
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fbe4 	bl	8003764 <I2C_RequestMemoryWrite>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d052      	beq.n	8003048 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e081      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fe2e 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d11b      	bne.n	8003048 <HAL_I2C_Mem_Write+0x180>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1aa      	bne.n	8002fa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fe1a 	bl	8003c8e <I2C_WaitOnBTFFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2b04      	cmp	r3, #4
 8003066:	d107      	bne.n	8003078 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e016      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00100002 	.word	0x00100002
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d6:	f7fe fedb 	bl	8001e90 <HAL_GetTick>
 80030da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 8208 	bne.w	80034fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2319      	movs	r3, #25
 80030f0:	2201      	movs	r2, #1
 80030f2:	497b      	ldr	r1, [pc, #492]	; (80032e0 <HAL_I2C_Mem_Read+0x224>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fcb3 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	e1fb      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Mem_Read+0x56>
 800310e:	2302      	movs	r3, #2
 8003110:	e1f4      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d007      	beq.n	8003138 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2222      	movs	r2, #34	; 0x22
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a5b      	ldr	r2, [pc, #364]	; (80032e4 <HAL_I2C_Mem_Read+0x228>)
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317a:	88f8      	ldrh	r0, [r7, #6]
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4603      	mov	r3, r0
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fb80 	bl	8003890 <I2C_RequestMemoryRead>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1b0      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d113      	bne.n	80031ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	623b      	str	r3, [r7, #32]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	623b      	str	r3, [r7, #32]
 80031b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e184      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d11b      	bne.n	800320a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	e164      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	2b02      	cmp	r3, #2
 8003210:	d11b      	bne.n	800324a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003220:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	e144      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003260:	e138      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	2b03      	cmp	r3, #3
 8003268:	f200 80f1 	bhi.w	800344e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	2b01      	cmp	r3, #1
 8003272:	d123      	bne.n	80032bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fd49 	bl	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e139      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ba:	e10b      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d14e      	bne.n	8003362 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	2200      	movs	r2, #0
 80032cc:	4906      	ldr	r1, [pc, #24]	; (80032e8 <HAL_I2C_Mem_Read+0x22c>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fbc6 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e10e      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
 80032de:	bf00      	nop
 80032e0:	00100002 	.word	0x00100002
 80032e4:	ffff0000 	.word	0xffff0000
 80032e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003360:	e0b8      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	2200      	movs	r2, #0
 800336a:	4966      	ldr	r1, [pc, #408]	; (8003504 <HAL_I2C_Mem_Read+0x448>)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fb77 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0bf      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	2200      	movs	r2, #0
 80033c6:	494f      	ldr	r1, [pc, #316]	; (8003504 <HAL_I2C_Mem_Read+0x448>)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fb49 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e091      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800344c:	e042      	b.n	80034d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fc5c 	bl	8003d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e04c      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d118      	bne.n	80034d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f aec2 	bne.w	8003262 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00010004 	.word	0x00010004

08003508 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	460b      	mov	r3, r1
 8003516:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7fe fcba 	bl	8001e90 <HAL_GetTick>
 800351c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	f040 8111 	bne.w	8003752 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2319      	movs	r3, #25
 8003536:	2201      	movs	r2, #1
 8003538:	4988      	ldr	r1, [pc, #544]	; (800375c <HAL_I2C_IsDeviceReady+0x254>)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fa90 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	e104      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_I2C_IsDeviceReady+0x50>
 8003554:	2302      	movs	r3, #2
 8003556:	e0fd      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d007      	beq.n	800357e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800358c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2224      	movs	r2, #36	; 0x24
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a70      	ldr	r2, [pc, #448]	; (8003760 <HAL_I2C_IsDeviceReady+0x258>)
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa4e 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	d103      	bne.n	80035e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0b6      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035e6:	897b      	ldrh	r3, [r7, #10]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fe fc4b 	bl	8001e90 <HAL_GetTick>
 80035fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800362a:	e025      	b.n	8003678 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fe fc30 	bl	8001e90 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <HAL_I2C_IsDeviceReady+0x13a>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	22a0      	movs	r2, #160	; 0xa0
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2ba0      	cmp	r3, #160	; 0xa0
 8003682:	d005      	beq.n	8003690 <HAL_I2C_IsDeviceReady+0x188>
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_I2C_IsDeviceReady+0x188>
 800368a:	7dbb      	ldrb	r3, [r7, #22]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0cd      	beq.n	800362c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d129      	bne.n	80036fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	2319      	movs	r3, #25
 80036d2:	2201      	movs	r2, #1
 80036d4:	4921      	ldr	r1, [pc, #132]	; (800375c <HAL_I2C_IsDeviceReady+0x254>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f9c2 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e036      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e02c      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003712:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	490f      	ldr	r1, [pc, #60]	; (800375c <HAL_I2C_IsDeviceReady+0x254>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f99e 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e012      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	3301      	adds	r3, #1
 8003732:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	f4ff af32 	bcc.w	80035a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003752:	2302      	movs	r3, #2
  }
}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00100002 	.word	0x00100002
 8003760:	ffff0000 	.word	0xffff0000

08003764 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4603      	mov	r3, r0
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	460b      	mov	r3, r1
 8003778:	813b      	strh	r3, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2200      	movs	r2, #0
 8003796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f960 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b4:	d103      	bne.n	80037be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e05f      	b.n	8003882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	492d      	ldr	r1, [pc, #180]	; (800388c <I2C_RequestMemoryWrite+0x128>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f998 	bl	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e04c      	b.n	8003882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	6a39      	ldr	r1, [r7, #32]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fa02 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b04      	cmp	r3, #4
 8003814:	d107      	bne.n	8003826 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e02b      	b.n	8003882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003830:	893b      	ldrh	r3, [r7, #8]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	611a      	str	r2, [r3, #16]
 800383a:	e021      	b.n	8003880 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800383c:	893b      	ldrh	r3, [r7, #8]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	b29b      	uxth	r3, r3
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	6a39      	ldr	r1, [r7, #32]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f9dc 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b04      	cmp	r3, #4
 8003860:	d107      	bne.n	8003872 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e005      	b.n	8003882 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003876:	893b      	ldrh	r3, [r7, #8]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	00010002 	.word	0x00010002

08003890 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f8c2 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f0:	d103      	bne.n	80038fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0aa      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038fe:	897b      	ldrh	r3, [r7, #10]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800390c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	6a3a      	ldr	r2, [r7, #32]
 8003912:	4952      	ldr	r1, [pc, #328]	; (8003a5c <I2C_RequestMemoryRead+0x1cc>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f8fa 	bl	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e097      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	6a39      	ldr	r1, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f964 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2b04      	cmp	r3, #4
 8003950:	d107      	bne.n	8003962 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e076      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]
 8003976:	e021      	b.n	80039bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003978:	893b      	ldrh	r3, [r7, #8]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b29b      	uxth	r3, r3
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	6a39      	ldr	r1, [r7, #32]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f93e 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2b04      	cmp	r3, #4
 800399c:	d107      	bne.n	80039ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e050      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039b2:	893b      	ldrh	r3, [r7, #8]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	6a39      	ldr	r1, [r7, #32]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f923 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d107      	bne.n	80039e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e035      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f82b 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1e:	d103      	bne.n	8003a28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e013      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a2c:	897b      	ldrh	r3, [r7, #10]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	6a3a      	ldr	r2, [r7, #32]
 8003a40:	4906      	ldr	r1, [pc, #24]	; (8003a5c <I2C_RequestMemoryRead+0x1cc>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f863 	bl	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	00010002 	.word	0x00010002

08003a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a70:	e025      	b.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d021      	beq.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fe fa09 	bl	8001e90 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e023      	b.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10d      	bne.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	e00c      	b.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	43da      	mvns	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4013      	ands	r3, r2
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d0b6      	beq.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b1c:	e051      	b.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d123      	bne.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e046      	b.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d021      	beq.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fe f987 	bl	8001e90 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d116      	bne.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f043 0220 	orr.w	r2, r3, #32
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e020      	b.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10c      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e00b      	b.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d18d      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c18:	e02d      	b.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8ce 	bl	8003dbc <I2C_IsAcknowledgeFailed>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02d      	b.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d021      	beq.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe f92d 	bl	8001e90 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e007      	b.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d1ca      	bne.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c9a:	e02d      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f88d 	bl	8003dbc <I2C_IsAcknowledgeFailed>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e02d      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d021      	beq.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7fe f8ec 	bl	8001e90 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d1ca      	bne.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d1c:	e042      	b.n	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d119      	bne.n	8003d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e029      	b.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7fe f896 	bl	8001e90 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e007      	b.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d1b5      	bne.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d11b      	bne.n	8003e0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ddc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e128      	b.n	8004080 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a90      	ldr	r2, [pc, #576]	; (8004088 <HAL_I2S_Init+0x26c>)
 8003e46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fd fccb 	bl	80017e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d060      	beq.n	8003f3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e82:	2310      	movs	r3, #16
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e001      	b.n	8003e8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d802      	bhi.n	8003e9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f001 fdc8 	bl	8005a30 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ea0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eaa:	d125      	bne.n	8003ef8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	3305      	adds	r3, #5
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e01f      	b.n	8003f16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	3305      	adds	r3, #5
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	e00e      	b.n	8003f16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	3305      	adds	r3, #5
 8003f14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4a5c      	ldr	r2, [pc, #368]	; (800408c <HAL_I2S_Init+0x270>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	08db      	lsrs	r3, r3, #3
 8003f20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d902      	bls.n	8003f50 <HAL_I2S_Init+0x134>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2bff      	cmp	r3, #255	; 0xff
 8003f4e:	d907      	bls.n	8003f60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f043 0210 	orr.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e08f      	b.n	8004080 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f7e:	f023 030f 	bic.w	r3, r3, #15
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6851      	ldr	r1, [r2, #4]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6892      	ldr	r2, [r2, #8]
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68d2      	ldr	r2, [r2, #12]
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6992      	ldr	r2, [r2, #24]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d161      	bne.n	8004070 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HAL_I2S_Init+0x274>)
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a37      	ldr	r2, [pc, #220]	; (8004094 <HAL_I2S_Init+0x278>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2S_Init+0x1a4>
 8003fbc:	4b36      	ldr	r3, [pc, #216]	; (8004098 <HAL_I2S_Init+0x27c>)
 8003fbe:	e001      	b.n	8003fc4 <HAL_I2S_Init+0x1a8>
 8003fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	4932      	ldr	r1, [pc, #200]	; (8004094 <HAL_I2S_Init+0x278>)
 8003fcc:	428a      	cmp	r2, r1
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2S_Init+0x1b8>
 8003fd0:	4a31      	ldr	r2, [pc, #196]	; (8004098 <HAL_I2S_Init+0x27c>)
 8003fd2:	e001      	b.n	8003fd8 <HAL_I2S_Init+0x1bc>
 8003fd4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003fd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fdc:	f023 030f 	bic.w	r3, r3, #15
 8003fe0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <HAL_I2S_Init+0x278>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2S_Init+0x1d4>
 8003fec:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <HAL_I2S_Init+0x27c>)
 8003fee:	e001      	b.n	8003ff4 <HAL_I2S_Init+0x1d8>
 8003ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_I2S_Init+0x278>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_I2S_Init+0x1ea>
 8004002:	4b25      	ldr	r3, [pc, #148]	; (8004098 <HAL_I2S_Init+0x27c>)
 8004004:	e001      	b.n	800400a <HAL_I2S_Init+0x1ee>
 8004006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004016:	d003      	beq.n	8004020 <HAL_I2S_Init+0x204>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e001      	b.n	800402c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004036:	4313      	orrs	r3, r2
 8004038:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004040:	4313      	orrs	r3, r2
 8004042:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800404a:	4313      	orrs	r3, r2
 800404c:	b29a      	uxth	r2, r3
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	4313      	orrs	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004058:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <HAL_I2S_Init+0x278>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_I2S_Init+0x24c>
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_I2S_Init+0x27c>)
 8004066:	e001      	b.n	800406c <HAL_I2S_Init+0x250>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	897a      	ldrh	r2, [r7, #10]
 800406e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	08004901 	.word	0x08004901
 800408c:	cccccccd 	.word	0xcccccccd
 8004090:	08004a89 	.word	0x08004a89
 8004094:	40003800 	.word	0x40003800
 8004098:	40003400 	.word	0x40003400

0800409c <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_I2S_Receive+0x1c>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b4      	b.n	8004226 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_I2S_Receive+0x30>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e0ac      	b.n	8004226 <HAL_I2S_Receive+0x18a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d005      	beq.n	80040ec <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	e09c      	b.n	8004226 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2204      	movs	r2, #4
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d002      	beq.n	8004118 <HAL_I2S_Receive+0x7c>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b05      	cmp	r3, #5
 8004116:	d10a      	bne.n	800412e <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	865a      	strh	r2, [r3, #50]	; 0x32
 800412c:	e005      	b.n	800413a <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d007      	beq.n	800415a <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004158:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004168:	d14f      	bne.n	800420a <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8004180:	e043      	b.n	800420a <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	2101      	movs	r1, #1
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fc43 	bl	8004a14 <I2S_WaitFlagStateUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00f      	beq.n	80041b4 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e038      	b.n	8004226 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	b292      	uxth	r2, r2
 80041c0:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	1c9a      	adds	r2, r3, #2
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d110      	bne.n	800420a <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f043 0202 	orr.w	r2, r3, #2
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1b6      	bne.n	8004182 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_I2S_Receive_DMA+0x1a>
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0a1      	b.n	8004392 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_I2S_Receive_DMA+0x2e>
 800425a:	2302      	movs	r3, #2
 800425c:	e099      	b.n	8004392 <HAL_I2S_Receive_DMA+0x162>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d005      	beq.n	800427e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	e089      	b.n	8004392 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2204      	movs	r2, #4
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d002      	beq.n	80042aa <HAL_I2S_Receive_DMA+0x7a>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d10a      	bne.n	80042c0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	865a      	strh	r2, [r3, #50]	; 0x32
 80042be:	e005      	b.n	80042cc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	4a32      	ldr	r2, [pc, #200]	; (800439c <HAL_I2S_Receive_DMA+0x16c>)
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <HAL_I2S_Receive_DMA+0x170>)
 80042da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <HAL_I2S_Receive_DMA+0x174>)
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f2:	d10a      	bne.n	800430a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	4619      	mov	r1, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004320:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004322:	f7fd ffa5 	bl	8002270 <HAL_DMA_Start_IT>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00f      	beq.n	800434c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f043 0208 	orr.w	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e022      	b.n	8004392 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004356:	2b00      	cmp	r3, #0
 8004358:	d107      	bne.n	800436a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004368:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d107      	bne.n	8004388 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	080047df 	.word	0x080047df
 80043a0:	0800479d 	.word	0x0800479d
 80043a4:	080047fb 	.word	0x080047fb

080043a8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043bc:	d004      	beq.n	80043c8 <HAL_I2S_DMAStop+0x20>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 80d1 	bne.w	800456a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00f      	beq.n	80043f0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd ffa3 	bl	8002320 <HAL_DMA_Abort>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f043 0208 	orr.w	r2, r3, #8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80043f0:	2364      	movs	r3, #100	; 0x64
 80043f2:	2201      	movs	r2, #1
 80043f4:	2102      	movs	r1, #2
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fb0c 	bl	8004a14 <I2S_WaitFlagStateUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0201 	orr.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800441a:	2364      	movs	r3, #100	; 0x64
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 faf7 	bl	8004a14 <I2S_WaitFlagStateUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004452:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0202 	bic.w	r2, r2, #2
 8004470:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b05      	cmp	r3, #5
 800447c:	f040 8165 	bne.w	800474a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00f      	beq.n	80044a8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd ff47 	bl	8002320 <HAL_DMA_Abort>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	f043 0208 	orr.w	r2, r3, #8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a8a      	ldr	r2, [pc, #552]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_I2S_DMAStop+0x10e>
 80044b2:	4b8a      	ldr	r3, [pc, #552]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80044b4:	e001      	b.n	80044ba <HAL_I2S_DMAStop+0x112>
 80044b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4985      	ldr	r1, [pc, #532]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80044c2:	428b      	cmp	r3, r1
 80044c4:	d101      	bne.n	80044ca <HAL_I2S_DMAStop+0x122>
 80044c6:	4b85      	ldr	r3, [pc, #532]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80044c8:	e001      	b.n	80044ce <HAL_I2S_DMAStop+0x126>
 80044ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7e      	ldr	r2, [pc, #504]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_I2S_DMAStop+0x13e>
 80044e2:	4b7e      	ldr	r3, [pc, #504]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80044e4:	e001      	b.n	80044ea <HAL_I2S_DMAStop+0x142>
 80044e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a79      	ldr	r2, [pc, #484]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_I2S_DMAStop+0x154>
 80044f8:	4b78      	ldr	r3, [pc, #480]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80044fa:	e001      	b.n	8004500 <HAL_I2S_DMAStop+0x158>
 80044fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a73      	ldr	r2, [pc, #460]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <HAL_I2S_DMAStop+0x16c>
 8004510:	4b72      	ldr	r3, [pc, #456]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 8004512:	e001      	b.n	8004518 <HAL_I2S_DMAStop+0x170>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	496e      	ldr	r1, [pc, #440]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 8004520:	428b      	cmp	r3, r1
 8004522:	d101      	bne.n	8004528 <HAL_I2S_DMAStop+0x180>
 8004524:	4b6d      	ldr	r3, [pc, #436]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 8004526:	e001      	b.n	800452c <HAL_I2S_DMAStop+0x184>
 8004528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004552:	e0fa      	b.n	800474a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5f      	ldr	r2, [pc, #380]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_I2S_DMAStop+0x1ba>
 800455e:	4b5f      	ldr	r3, [pc, #380]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 8004560:	e001      	b.n	8004566 <HAL_I2S_DMAStop+0x1be>
 8004562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004566:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004568:	e0ef      	b.n	800474a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004572:	d005      	beq.n	8004580 <HAL_I2S_DMAStop+0x1d8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	f040 80e5 	bne.w	800474a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00f      	beq.n	80045a8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd fec7 	bl	8002320 <HAL_DMA_Abort>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f043 0208 	orr.w	r2, r3, #8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	f040 809a 	bne.w	80046ea <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00f      	beq.n	80045de <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd feac 	bl	8002320 <HAL_DMA_Abort>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f043 0208 	orr.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80045de:	f7fd fc57 	bl	8001e90 <HAL_GetTick>
 80045e2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80045e4:	e012      	b.n	800460c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80045e6:	f7fd fc53 	bl	8001e90 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b64      	cmp	r3, #100	; 0x64
 80045f2:	d90b      	bls.n	800460c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_I2S_DMAStop+0x272>
 8004616:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 8004618:	e001      	b.n	800461e <HAL_I2S_DMAStop+0x276>
 800461a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d1de      	bne.n	80045e6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004628:	e012      	b.n	8004650 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800462a:	f7fd fc31 	bl	8001e90 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b64      	cmp	r3, #100	; 0x64
 8004636:	d90b      	bls.n	8004650 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a20      	ldr	r2, [pc, #128]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <HAL_I2S_DMAStop+0x2b6>
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 800465c:	e001      	b.n	8004662 <HAL_I2S_DMAStop+0x2ba>
 800465e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d0de      	beq.n	800462a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_I2S_DMAStop+0x2d2>
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 8004678:	e001      	b.n	800467e <HAL_I2S_DMAStop+0x2d6>
 800467a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4914      	ldr	r1, [pc, #80]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 8004686:	428b      	cmp	r3, r1
 8004688:	d101      	bne.n	800468e <HAL_I2S_DMAStop+0x2e6>
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 800468c:	e001      	b.n	8004692 <HAL_I2S_DMAStop+0x2ea>
 800468e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004696:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_I2S_DMAStop+0x302>
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80046a8:	e001      	b.n	80046ae <HAL_I2S_DMAStop+0x306>
 80046aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_I2S_DMAStop+0x31a>
 80046be:	4b07      	ldr	r3, [pc, #28]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2S_DMAStop+0x31e>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4902      	ldr	r1, [pc, #8]	; (80046d8 <HAL_I2S_DMAStop+0x330>)
 80046ce:	428b      	cmp	r3, r1
 80046d0:	d106      	bne.n	80046e0 <HAL_I2S_DMAStop+0x338>
 80046d2:	4b02      	ldr	r3, [pc, #8]	; (80046dc <HAL_I2S_DMAStop+0x334>)
 80046d4:	e006      	b.n	80046e4 <HAL_I2S_DMAStop+0x33c>
 80046d6:	bf00      	nop
 80046d8:	40003800 	.word	0x40003800
 80046dc:	40003400 	.word	0x40003400
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	f022 0202 	bic.w	r2, r2, #2
 80046e8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004728:	d10c      	bne.n	8004744 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e002      	b.n	800474a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8004752:	7ffb      	ldrb	r3, [r7, #31]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10e      	bne.n	80047d0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7fc fb89 	bl	8000ee8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7fc fbcb 	bl	8000f88 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0203 	bic.w	r2, r2, #3
 8004816:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	f043 0208 	orr.w	r2, r3, #8
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ffa5 	bl	8004788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	881a      	ldrh	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10e      	bne.n	800489a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800488a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff6d 	bl	8004774 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	b292      	uxth	r2, r2
 80048b6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	1c9a      	adds	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc faf8 	bl	8000ee8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b04      	cmp	r3, #4
 800491a:	d13a      	bne.n	8004992 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d109      	bne.n	800493a <I2S_IRQHandler+0x3a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d102      	bne.n	800493a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ffb4 	bl	80048a2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d126      	bne.n	8004992 <I2S_IRQHandler+0x92>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d11f      	bne.n	8004992 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004960:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	f043 0202 	orr.w	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fefb 	bl	8004788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d136      	bne.n	8004a0c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d109      	bne.n	80049bc <I2S_IRQHandler+0xbc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d102      	bne.n	80049bc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ff45 	bl	8004846 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d122      	bne.n	8004a0c <I2S_IRQHandler+0x10c>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d11b      	bne.n	8004a0c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049e2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f043 0204 	orr.w	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff febe 	bl	8004788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a24:	f7fd fa34 	bl	8001e90 <HAL_GetTick>
 8004a28:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004a2a:	e018      	b.n	8004a5e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d014      	beq.n	8004a5e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004a34:	f7fd fa2c 	bl	8001e90 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d902      	bls.n	8004a4a <I2S_WaitFlagStateUntilTimeout+0x36>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00f      	b.n	8004a7e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1d7      	bne.n	8004a2c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a92      	ldr	r2, [pc, #584]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004aa2:	4b92      	ldr	r3, [pc, #584]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a8b      	ldr	r2, [pc, #556]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ac0:	4b8a      	ldr	r3, [pc, #552]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ac2:	e001      	b.n	8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d004      	beq.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 8099 	bne.w	8004c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d107      	bne.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f925 	bl	8004d44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f9c8 	bl	8004ea4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d13a      	bne.n	8004b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d035      	beq.n	8004b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6e      	ldr	r2, [pc, #440]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d101      	bne.n	8004b36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b32:	4b6e      	ldr	r3, [pc, #440]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b34:	e001      	b.n	8004b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4969      	ldr	r1, [pc, #420]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b42:	428b      	cmp	r3, r1
 8004b44:	d101      	bne.n	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b46:	4b69      	ldr	r3, [pc, #420]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b48:	e001      	b.n	8004b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f043 0202 	orr.w	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fdfa 	bl	8004788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	f040 80c3 	bne.w	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80bd 	beq.w	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a49      	ldr	r2, [pc, #292]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d101      	bne.n	8004bca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bc6:	4b49      	ldr	r3, [pc, #292]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bc8:	e001      	b.n	8004bce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004bca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4944      	ldr	r1, [pc, #272]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bd6:	428b      	cmp	r3, r1
 8004bd8:	d101      	bne.n	8004bde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bda:	4b44      	ldr	r3, [pc, #272]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bdc:	e001      	b.n	8004be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004be6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fdbc 	bl	8004788 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c10:	e089      	b.n	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8be 	bl	8004da8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d107      	bne.n	8004c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8fd 	bl	8004e40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d12f      	bne.n	8004cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02a      	beq.n	8004cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c76:	e001      	b.n	8004c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4919      	ldr	r1, [pc, #100]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d101      	bne.n	8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c8a:	e001      	b.n	8004c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f043 0202 	orr.w	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff fd6c 	bl	8004788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d136      	bne.n	8004d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d031      	beq.n	8004d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd0:	e001      	b.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4902      	ldr	r1, [pc, #8]	; (8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cde:	428b      	cmp	r3, r1
 8004ce0:	d106      	bne.n	8004cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004ce2:	4b02      	ldr	r3, [pc, #8]	; (8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ce4:	e006      	b.n	8004cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004ce6:	bf00      	nop
 8004ce8:	40003800 	.word	0x40003800
 8004cec:	40003400 	.word	0x40003400
 8004cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fd32 	bl	8004788 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d24:	e000      	b.n	8004d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d26:	bf00      	nop
}
 8004d28:	bf00      	nop
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c99      	adds	r1, r3, #2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6251      	str	r1, [r2, #36]	; 0x24
 8004d56:	881a      	ldrh	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d113      	bne.n	8004d9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ffc9 	bl	8004d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	1c99      	adds	r1, r3, #2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6251      	str	r1, [r2, #36]	; 0x24
 8004dba:	8819      	ldrh	r1, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <I2SEx_TxISR_I2SExt+0x90>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <I2SEx_TxISR_I2SExt+0x22>
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <I2SEx_TxISR_I2SExt+0x94>)
 8004dc8:	e001      	b.n	8004dce <I2SEx_TxISR_I2SExt+0x26>
 8004dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dce:	460a      	mov	r2, r1
 8004dd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d121      	bne.n	8004e2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <I2SEx_TxISR_I2SExt+0x90>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <I2SEx_TxISR_I2SExt+0x50>
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <I2SEx_TxISR_I2SExt+0x94>)
 8004df6:	e001      	b.n	8004dfc <I2SEx_TxISR_I2SExt+0x54>
 8004df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	490d      	ldr	r1, [pc, #52]	; (8004e38 <I2SEx_TxISR_I2SExt+0x90>)
 8004e04:	428b      	cmp	r3, r1
 8004e06:	d101      	bne.n	8004e0c <I2SEx_TxISR_I2SExt+0x64>
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <I2SEx_TxISR_I2SExt+0x94>)
 8004e0a:	e001      	b.n	8004e10 <I2SEx_TxISR_I2SExt+0x68>
 8004e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ff81 	bl	8004d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40003800 	.word	0x40003800
 8004e3c:	40003400 	.word	0x40003400

08004e40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68d8      	ldr	r0, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	1c99      	adds	r1, r3, #2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e58:	b282      	uxth	r2, r0
 8004e5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d113      	bne.n	8004e9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ff4a 	bl	8004d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <I2SEx_RxISR_I2SExt+0x90>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <I2SEx_RxISR_I2SExt+0x16>
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <I2SEx_RxISR_I2SExt+0x94>)
 8004eb8:	e001      	b.n	8004ebe <I2SEx_RxISR_I2SExt+0x1a>
 8004eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ebe:	68d8      	ldr	r0, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	1c99      	adds	r1, r3, #2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004eca:	b282      	uxth	r2, r0
 8004ecc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d121      	bne.n	8004f2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <I2SEx_RxISR_I2SExt+0x90>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <I2SEx_RxISR_I2SExt+0x50>
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <I2SEx_RxISR_I2SExt+0x94>)
 8004ef2:	e001      	b.n	8004ef8 <I2SEx_RxISR_I2SExt+0x54>
 8004ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	490d      	ldr	r1, [pc, #52]	; (8004f34 <I2SEx_RxISR_I2SExt+0x90>)
 8004f00:	428b      	cmp	r3, r1
 8004f02:	d101      	bne.n	8004f08 <I2SEx_RxISR_I2SExt+0x64>
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <I2SEx_RxISR_I2SExt+0x94>)
 8004f06:	e001      	b.n	8004f0c <I2SEx_RxISR_I2SExt+0x68>
 8004f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ff03 	bl	8004d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40003800 	.word	0x40003800
 8004f38:	40003400 	.word	0x40003400

08004f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e267      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d075      	beq.n	8005046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5a:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f66:	4b85      	ldr	r3, [pc, #532]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f72:	4b82      	ldr	r3, [pc, #520]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7e:	d10b      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b7e      	ldr	r3, [pc, #504]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05b      	beq.n	8005044 <HAL_RCC_OscConfig+0x108>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d157      	bne.n	8005044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e242      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x74>
 8004fa2:	4b76      	ldr	r3, [pc, #472]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a75      	ldr	r2, [pc, #468]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xb0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x98>
 8004fba:	4b70      	ldr	r3, [pc, #448]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6f      	ldr	r2, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a6c      	ldr	r2, [pc, #432]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xb0>
 8004fd4:	4b69      	ldr	r3, [pc, #420]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a68      	ldr	r2, [pc, #416]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b66      	ldr	r3, [pc, #408]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a65      	ldr	r2, [pc, #404]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fc ff4c 	bl	8001e90 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fc ff48 	bl	8001e90 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e207      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b5b      	ldr	r3, [pc, #364]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xc0>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fc ff38 	bl	8001e90 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005024:	f7fc ff34 	bl	8001e90 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e1f3      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005036:	4b51      	ldr	r3, [pc, #324]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0xe8>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d063      	beq.n	800511a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005052:	4b4a      	ldr	r3, [pc, #296]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505e:	4b47      	ldr	r3, [pc, #284]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005066:	2b08      	cmp	r3, #8
 8005068:	d11c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506a:	4b44      	ldr	r3, [pc, #272]	; (800517c <HAL_RCC_OscConfig+0x240>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d116      	bne.n	80050a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_RCC_OscConfig+0x152>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d001      	beq.n	800508e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e1c7      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508e:	4b3b      	ldr	r3, [pc, #236]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4937      	ldr	r1, [pc, #220]	; (800517c <HAL_RCC_OscConfig+0x240>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	e03a      	b.n	800511a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ac:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_RCC_OscConfig+0x244>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc feed 	bl	8001e90 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fc fee9 	bl	8001e90 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e1a8      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050cc:	4b2b      	ldr	r3, [pc, #172]	; (800517c <HAL_RCC_OscConfig+0x240>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b28      	ldr	r3, [pc, #160]	; (800517c <HAL_RCC_OscConfig+0x240>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4925      	ldr	r1, [pc, #148]	; (800517c <HAL_RCC_OscConfig+0x240>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]
 80050ec:	e015      	b.n	800511a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <HAL_RCC_OscConfig+0x244>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fc fecc 	bl	8001e90 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050fc:	f7fc fec8 	bl	8001e90 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e187      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510e:	4b1b      	ldr	r3, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d036      	beq.n	8005194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d016      	beq.n	800515c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_RCC_OscConfig+0x248>)
 8005130:	2201      	movs	r2, #1
 8005132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fc feac 	bl	8001e90 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513c:	f7fc fea8 	bl	8001e90 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e167      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_OscConfig+0x240>)
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0x200>
 800515a:	e01b      	b.n	8005194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <HAL_RCC_OscConfig+0x248>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005162:	f7fc fe95 	bl	8001e90 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005168:	e00e      	b.n	8005188 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516a:	f7fc fe91 	bl	8001e90 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d907      	bls.n	8005188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e150      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
 800517c:	40023800 	.word	0x40023800
 8005180:	42470000 	.word	0x42470000
 8005184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005188:	4b88      	ldr	r3, [pc, #544]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800518a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ea      	bne.n	800516a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8097 	beq.w	80052d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a6:	4b81      	ldr	r3, [pc, #516]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10f      	bne.n	80051d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	4b7d      	ldr	r3, [pc, #500]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a7c      	ldr	r2, [pc, #496]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b7a      	ldr	r3, [pc, #488]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ce:	2301      	movs	r3, #1
 80051d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	4b77      	ldr	r3, [pc, #476]	; (80053b0 <HAL_RCC_OscConfig+0x474>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d118      	bne.n	8005210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051de:	4b74      	ldr	r3, [pc, #464]	; (80053b0 <HAL_RCC_OscConfig+0x474>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a73      	ldr	r2, [pc, #460]	; (80053b0 <HAL_RCC_OscConfig+0x474>)
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ea:	f7fc fe51 	bl	8001e90 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f2:	f7fc fe4d 	bl	8001e90 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e10c      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005204:	4b6a      	ldr	r3, [pc, #424]	; (80053b0 <HAL_RCC_OscConfig+0x474>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d106      	bne.n	8005226 <HAL_RCC_OscConfig+0x2ea>
 8005218:	4b64      	ldr	r3, [pc, #400]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	4a63      	ldr	r2, [pc, #396]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	6713      	str	r3, [r2, #112]	; 0x70
 8005224:	e01c      	b.n	8005260 <HAL_RCC_OscConfig+0x324>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b05      	cmp	r3, #5
 800522c:	d10c      	bne.n	8005248 <HAL_RCC_OscConfig+0x30c>
 800522e:	4b5f      	ldr	r3, [pc, #380]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	4a5e      	ldr	r2, [pc, #376]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005234:	f043 0304 	orr.w	r3, r3, #4
 8005238:	6713      	str	r3, [r2, #112]	; 0x70
 800523a:	4b5c      	ldr	r3, [pc, #368]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	4a5b      	ldr	r2, [pc, #364]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
 8005246:	e00b      	b.n	8005260 <HAL_RCC_OscConfig+0x324>
 8005248:	4b58      	ldr	r3, [pc, #352]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	4a57      	ldr	r2, [pc, #348]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	6713      	str	r3, [r2, #112]	; 0x70
 8005254:	4b55      	ldr	r3, [pc, #340]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005258:	4a54      	ldr	r2, [pc, #336]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 800525a:	f023 0304 	bic.w	r3, r3, #4
 800525e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d015      	beq.n	8005294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fc fe12 	bl	8001e90 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fc fe0e 	bl	8001e90 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e0cb      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005286:	4b49      	ldr	r3, [pc, #292]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ee      	beq.n	8005270 <HAL_RCC_OscConfig+0x334>
 8005292:	e014      	b.n	80052be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005294:	f7fc fdfc 	bl	8001e90 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fc fdf8 	bl	8001e90 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e0b5      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b2:	4b3e      	ldr	r3, [pc, #248]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1ee      	bne.n	800529c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d105      	bne.n	80052d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c4:	4b39      	ldr	r3, [pc, #228]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	4a38      	ldr	r2, [pc, #224]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80052ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80a1 	beq.w	800541c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052da:	4b34      	ldr	r3, [pc, #208]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d05c      	beq.n	80053a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d141      	bne.n	8005372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCC_OscConfig+0x478>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fc fdcc 	bl	8001e90 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fc fdc8 	bl	8001e90 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e087      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	4b27      	ldr	r3, [pc, #156]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	019b      	lsls	r3, r3, #6
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	3b01      	subs	r3, #1
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	491b      	ldr	r1, [pc, #108]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005340:	4313      	orrs	r3, r2
 8005342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <HAL_RCC_OscConfig+0x478>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fc fda1 	bl	8001e90 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005352:	f7fc fd9d 	bl	8001e90 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e05c      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005364:	4b11      	ldr	r3, [pc, #68]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x416>
 8005370:	e054      	b.n	800541c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_RCC_OscConfig+0x478>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fc fd8a 	bl	8001e90 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005380:	f7fc fd86 	bl	8001e90 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e045      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_RCC_OscConfig+0x470>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x444>
 800539e:	e03d      	b.n	800541c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e038      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
 80053ac:	40023800 	.word	0x40023800
 80053b0:	40007000 	.word	0x40007000
 80053b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b8:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_OscConfig+0x4ec>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d028      	beq.n	8005418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d121      	bne.n	8005418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d11a      	bne.n	8005418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d111      	bne.n	8005418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	3b01      	subs	r3, #1
 8005402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d107      	bne.n	8005418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800

0800542c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0cc      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d90c      	bls.n	8005468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b65      	ldr	r3, [pc, #404]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b63      	ldr	r3, [pc, #396]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0b8      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d020      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a58      	ldr	r2, [pc, #352]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005498:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a52      	ldr	r2, [pc, #328]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a4:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	494d      	ldr	r1, [pc, #308]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d044      	beq.n	800554c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ca:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d119      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e07f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d003      	beq.n	80054ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ea:	4b3f      	ldr	r3, [pc, #252]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e06f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fa:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e067      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4934      	ldr	r1, [pc, #208]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800551c:	f7fc fcb8 	bl	8001e90 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	e00a      	b.n	800553a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005524:	f7fc fcb4 	bl	8001e90 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e04f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 020c 	and.w	r2, r3, #12
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d1eb      	bne.n	8005524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d20c      	bcs.n	8005574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e032      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4916      	ldr	r1, [pc, #88]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	490e      	ldr	r1, [pc, #56]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055b2:	f000 f821 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 80055b6:	4602      	mov	r2, r0
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	490a      	ldr	r1, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	5ccb      	ldrb	r3, [r1, r3]
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fc fc18 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023c00 	.word	0x40023c00
 80055e8:	40023800 	.word	0x40023800
 80055ec:	0800c188 	.word	0x0800c188
 80055f0:	2000001c 	.word	0x2000001c
 80055f4:	20000020 	.word	0x20000020

080055f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055fc:	b094      	sub	sp, #80	; 0x50
 80055fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
 8005604:	2300      	movs	r3, #0
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005608:	2300      	movs	r3, #0
 800560a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005610:	4b79      	ldr	r3, [pc, #484]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b08      	cmp	r3, #8
 800561a:	d00d      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x40>
 800561c:	2b08      	cmp	r3, #8
 800561e:	f200 80e1 	bhi.w	80057e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_RCC_GetSysClockFreq+0x34>
 8005626:	2b04      	cmp	r3, #4
 8005628:	d003      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x3a>
 800562a:	e0db      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800562c:	4b73      	ldr	r3, [pc, #460]	; (80057fc <HAL_RCC_GetSysClockFreq+0x204>)
 800562e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005630:	e0db      	b.n	80057ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005632:	4b73      	ldr	r3, [pc, #460]	; (8005800 <HAL_RCC_GetSysClockFreq+0x208>)
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005636:	e0d8      	b.n	80057ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005638:	4b6f      	ldr	r3, [pc, #444]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005642:	4b6d      	ldr	r3, [pc, #436]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d063      	beq.n	8005716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800564e:	4b6a      	ldr	r3, [pc, #424]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	099b      	lsrs	r3, r3, #6
 8005654:	2200      	movs	r2, #0
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
 8005658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
 8005662:	2300      	movs	r3, #0
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
 8005666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	f04f 0000 	mov.w	r0, #0
 8005672:	f04f 0100 	mov.w	r1, #0
 8005676:	0159      	lsls	r1, r3, #5
 8005678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800567c:	0150      	lsls	r0, r2, #5
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4621      	mov	r1, r4
 8005684:	1a51      	subs	r1, r2, r1
 8005686:	6139      	str	r1, [r7, #16]
 8005688:	4629      	mov	r1, r5
 800568a:	eb63 0301 	sbc.w	r3, r3, r1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800569c:	4659      	mov	r1, fp
 800569e:	018b      	lsls	r3, r1, #6
 80056a0:	4651      	mov	r1, sl
 80056a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056a6:	4651      	mov	r1, sl
 80056a8:	018a      	lsls	r2, r1, #6
 80056aa:	4651      	mov	r1, sl
 80056ac:	ebb2 0801 	subs.w	r8, r2, r1
 80056b0:	4659      	mov	r1, fp
 80056b2:	eb63 0901 	sbc.w	r9, r3, r1
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ca:	4690      	mov	r8, r2
 80056cc:	4699      	mov	r9, r3
 80056ce:	4623      	mov	r3, r4
 80056d0:	eb18 0303 	adds.w	r3, r8, r3
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	462b      	mov	r3, r5
 80056d8:	eb49 0303 	adc.w	r3, r9, r3
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ea:	4629      	mov	r1, r5
 80056ec:	024b      	lsls	r3, r1, #9
 80056ee:	4621      	mov	r1, r4
 80056f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056f4:	4621      	mov	r1, r4
 80056f6:	024a      	lsls	r2, r1, #9
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fe:	2200      	movs	r2, #0
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
 8005702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005708:	f7fa fdba 	bl	8000280 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4613      	mov	r3, r2
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	e058      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005716:	4b38      	ldr	r3, [pc, #224]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	099b      	lsrs	r3, r3, #6
 800571c:	2200      	movs	r2, #0
 800571e:	4618      	mov	r0, r3
 8005720:	4611      	mov	r1, r2
 8005722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	2300      	movs	r3, #0
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
 800572c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	f04f 0000 	mov.w	r0, #0
 8005738:	f04f 0100 	mov.w	r1, #0
 800573c:	0159      	lsls	r1, r3, #5
 800573e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005742:	0150      	lsls	r0, r2, #5
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4641      	mov	r1, r8
 800574a:	ebb2 0a01 	subs.w	sl, r2, r1
 800574e:	4649      	mov	r1, r9
 8005750:	eb63 0b01 	sbc.w	fp, r3, r1
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005768:	ebb2 040a 	subs.w	r4, r2, sl
 800576c:	eb63 050b 	sbc.w	r5, r3, fp
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	00eb      	lsls	r3, r5, #3
 800577a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800577e:	00e2      	lsls	r2, r4, #3
 8005780:	4614      	mov	r4, r2
 8005782:	461d      	mov	r5, r3
 8005784:	4643      	mov	r3, r8
 8005786:	18e3      	adds	r3, r4, r3
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	464b      	mov	r3, r9
 800578c:	eb45 0303 	adc.w	r3, r5, r3
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800579e:	4629      	mov	r1, r5
 80057a0:	028b      	lsls	r3, r1, #10
 80057a2:	4621      	mov	r1, r4
 80057a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057a8:	4621      	mov	r1, r4
 80057aa:	028a      	lsls	r2, r1, #10
 80057ac:	4610      	mov	r0, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b2:	2200      	movs	r2, #0
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	61fa      	str	r2, [r7, #28]
 80057b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057bc:	f7fa fd60 	bl	8000280 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4613      	mov	r3, r2
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	3301      	adds	r3, #1
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057e2:	e002      	b.n	80057ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <HAL_RCC_GetSysClockFreq+0x204>)
 80057e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3750      	adds	r7, #80	; 0x50
 80057f0:	46bd      	mov	sp, r7
 80057f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800
 80057fc:	00f42400 	.word	0x00f42400
 8005800:	007a1200 	.word	0x007a1200

08005804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <HAL_RCC_GetHCLKFreq+0x14>)
 800580a:	681b      	ldr	r3, [r3, #0]
}
 800580c:	4618      	mov	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000001c 	.word	0x2000001c

0800581c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005820:	f7ff fff0 	bl	8005804 <HAL_RCC_GetHCLKFreq>
 8005824:	4602      	mov	r2, r0
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0a9b      	lsrs	r3, r3, #10
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	4903      	ldr	r1, [pc, #12]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005832:	5ccb      	ldrb	r3, [r1, r3]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40023800 	.word	0x40023800
 8005840:	0800c198 	.word	0x0800c198

08005844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005848:	f7ff ffdc 	bl	8005804 <HAL_RCC_GetHCLKFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	0b5b      	lsrs	r3, r3, #13
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	4903      	ldr	r1, [pc, #12]	; (8005868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800585a:	5ccb      	ldrb	r3, [r1, r3]
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40023800 	.word	0x40023800
 8005868:	0800c198 	.word	0x0800c198

0800586c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005890:	2b00      	cmp	r3, #0
 8005892:	d035      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005894:	4b62      	ldr	r3, [pc, #392]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800589a:	f7fc faf9 	bl	8001e90 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058a2:	f7fc faf5 	bl	8001e90 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0b0      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b4:	4b5b      	ldr	r3, [pc, #364]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	019a      	lsls	r2, r3, #6
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	071b      	lsls	r3, r3, #28
 80058cc:	4955      	ldr	r1, [pc, #340]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058d4:	4b52      	ldr	r3, [pc, #328]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058da:	f7fc fad9 	bl	8001e90 <HAL_GetTick>
 80058de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058e2:	f7fc fad5 	bl	8001e90 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e090      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058f4:	4b4b      	ldr	r3, [pc, #300]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8083 	beq.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	4b44      	ldr	r3, [pc, #272]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	4a43      	ldr	r2, [pc, #268]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591c:	6413      	str	r3, [r2, #64]	; 0x40
 800591e:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800592a:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a3e      	ldr	r2, [pc, #248]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005934:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005936:	f7fc faab 	bl	8001e90 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800593c:	e008      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fc faa7 	bl	8001e90 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e062      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005950:	4b35      	ldr	r3, [pc, #212]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800595c:	4b31      	ldr	r3, [pc, #196]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005964:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d02f      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d028      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597a:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005984:	4b29      	ldr	r3, [pc, #164]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598a:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005990:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005996:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d114      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fc fa75 	bl	8001e90 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a8:	e00a      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fc fa71 	bl	8001e90 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e02a      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ee      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d8:	d10d      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80059da:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ee:	490d      	ldr	r1, [pc, #52]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]
 80059f4:	e005      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a00:	6093      	str	r3, [r2, #8]
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0e:	4905      	ldr	r1, [pc, #20]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	42470068 	.word	0x42470068
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	42470e40 	.word	0x42470e40

08005a30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d13e      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d12f      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a64:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a66:	617b      	str	r3, [r7, #20]
          break;
 8005a68:	e02f      	b.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a6a:	4b1c      	ldr	r3, [pc, #112]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a76:	d108      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a78:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a80:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	e007      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa0:	099b      	lsrs	r3, r3, #6
 8005aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
 8005aac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab4:	0f1b      	lsrs	r3, r3, #28
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	617b      	str	r3, [r7, #20]
          break;
 8005ac2:	e002      	b.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
          break;
 8005ac8:	bf00      	nop
        }
      }
      break;
 8005aca:	bf00      	nop
    }
  }
  return frequency;
 8005acc:	697b      	ldr	r3, [r7, #20]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	00bb8000 	.word	0x00bb8000
 8005ae4:	007a1200 	.word	0x007a1200
 8005ae8:	00f42400 	.word	0x00f42400

08005aec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e022      	b.n	8005b44 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fb ffad 	bl	8001a70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f814 	bl	8005b4c <HAL_SD_InitCard>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00a      	b.n	8005b44 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b4c:	b5b0      	push	{r4, r5, r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005b68:	2376      	movs	r3, #118	; 0x76
 8005b6a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681d      	ldr	r5, [r3, #0]
 8005b70:	466c      	mov	r4, sp
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b7e:	f107 0308 	add.w	r3, r7, #8
 8005b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b84:	4628      	mov	r0, r5
 8005b86:	f001 fb6b 	bl	8007260 <SDIO_Init>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e04f      	b.n	8005c3c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005b9c:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <HAL_SD_InitCard+0xf8>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fba3 	bl	80072f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <HAL_SD_InitCard+0xf8>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005bb2:	2002      	movs	r0, #2
 8005bb4:	f7fc f978 	bl	8001ea8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fe69 	bl	8006890 <SD_PowerON>
 8005bbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02e      	b.n	8005c3c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fd88 	bl	80066f4 <SD_InitCard>
 8005be4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01b      	b.n	8005c3c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 fc02 	bl	8007416 <SDMMC_CmdBlockLength>
 8005c12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00f      	beq.n	8005c3a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <HAL_SD_InitCard+0xfc>)
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3728      	adds	r7, #40	; 0x28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bdb0      	pop	{r4, r5, r7, pc}
 8005c44:	422580a0 	.word	0x422580a0
 8005c48:	004005ff 	.word	0x004005ff

08005c4c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b092      	sub	sp, #72	; 0x48
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c5a:	f7fc f919 	bl	8001e90 <HAL_GetTick>
 8005c5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d107      	bne.n	8005c7e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e1bd      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	f040 81b0 	bne.w	8005fec <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	441a      	add	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d907      	bls.n	8005cb0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e1a4      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d002      	beq.n	8005cce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	025b      	lsls	r3, r3, #9
 8005ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	025b      	lsls	r3, r3, #9
 8005cd8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005cda:	2390      	movs	r3, #144	; 0x90
 8005cdc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f107 0214 	add.w	r2, r7, #20
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fb62 	bl	80073be <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d90a      	bls.n	8005d16 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2202      	movs	r2, #2
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fbc6 	bl	800749e <SDMMC_CmdReadMultiBlock>
 8005d12:	6478      	str	r0, [r7, #68]	; 0x44
 8005d14:	e009      	b.n	8005d2a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fb99 	bl	800745a <SDMMC_CmdReadSingleBlock>
 8005d28:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d012      	beq.n	8005d56 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a7a      	ldr	r2, [pc, #488]	; (8005f20 <HAL_SD_ReadBlocks+0x2d4>)
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e151      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d5a:	e061      	b.n	8005e20 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d03c      	beq.n	8005de4 <HAL_SD_ReadBlocks+0x198>
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d039      	beq.n	8005de4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	643b      	str	r3, [r7, #64]	; 0x40
 8005d74:	e033      	b.n	8005dde <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fa9b 	bl	80072b6 <SDIO_ReadFIFO>
 8005d80:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d92:	3b01      	subs	r3, #1
 8005d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	3301      	adds	r3, #1
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da8:	3b01      	subs	r3, #1
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	3301      	adds	r3, #1
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	0e1b      	lsrs	r3, r3, #24
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	3301      	adds	r3, #1
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	3301      	adds	r3, #1
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	2b07      	cmp	r3, #7
 8005de2:	d9c8      	bls.n	8005d76 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005de4:	f7fc f854 	bl	8001e90 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d902      	bls.n	8005dfa <HAL_SD_ReadBlocks+0x1ae>
 8005df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a48      	ldr	r2, [pc, #288]	; (8005f20 <HAL_SD_ReadBlocks+0x2d4>)
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e0ec      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e26:	f240 332a 	movw	r3, #810	; 0x32a
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d095      	beq.n	8005d5c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d022      	beq.n	8005e84 <HAL_SD_ReadBlocks+0x238>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d91f      	bls.n	8005e84 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d01b      	beq.n	8005e84 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fb8b 	bl	800756c <SDMMC_CmdStopTransfer>
 8005e56:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d012      	beq.n	8005e84 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2f      	ldr	r2, [pc, #188]	; (8005f20 <HAL_SD_ReadBlocks+0x2d4>)
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0ba      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d012      	beq.n	8005eb8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <HAL_SD_ReadBlocks+0x2d4>)
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	f043 0208 	orr.w	r2, r3, #8
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0a0      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d012      	beq.n	8005eec <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <HAL_SD_ReadBlocks+0x2d4>)
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f043 0202 	orr.w	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e086      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d063      	beq.n	8005fc2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <HAL_SD_ReadBlocks+0x2d4>)
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e06c      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
 8005f20:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 f9c4 	bl	80072b6 <SDIO_ReadFIFO>
 8005f2e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	3b01      	subs	r3, #1
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	3301      	adds	r3, #1
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f56:	3b01      	subs	r3, #1
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	3301      	adds	r3, #1
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	0e1b      	lsrs	r3, r3, #24
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	3b01      	subs	r3, #1
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f86:	f7fb ff83 	bl	8001e90 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d902      	bls.n	8005f9c <HAL_SD_ReadBlocks+0x350>
 8005f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d112      	bne.n	8005fc2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_SD_ReadBlocks+0x3b8>)
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e01b      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SD_ReadBlocks+0x38a>
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1a6      	bne.n	8005f24 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e006      	b.n	8005ffa <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
  }
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3748      	adds	r7, #72	; 0x48
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	004005ff 	.word	0x004005ff

08006008 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b092      	sub	sp, #72	; 0x48
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006016:	f7fb ff3b 	bl	8001e90 <HAL_GetTick>
 800601a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d107      	bne.n	800603a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e166      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	f040 8159 	bne.w	80062fa <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800604e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	441a      	add	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	429a      	cmp	r2, r3
 800605a:	d907      	bls.n	800606c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e14d      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2203      	movs	r2, #3
 8006070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006080:	2b01      	cmp	r3, #1
 8006082:	d002      	beq.n	800608a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	025b      	lsls	r3, r3, #9
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	025b      	lsls	r3, r3, #9
 8006094:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006096:	2390      	movs	r3, #144	; 0x90
 8006098:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800609e:	2300      	movs	r3, #0
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80060a2:	2301      	movs	r3, #1
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f107 0218 	add.w	r2, r7, #24
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 f984 	bl	80073be <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d90a      	bls.n	80060d2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fa2c 	bl	8007526 <SDMMC_CmdWriteMultiBlock>
 80060ce:	6478      	str	r0, [r7, #68]	; 0x44
 80060d0:	e009      	b.n	80060e6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2210      	movs	r2, #16
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f9ff 	bl	80074e2 <SDMMC_CmdWriteSingleBlock>
 80060e4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d012      	beq.n	8006112 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a87      	ldr	r2, [pc, #540]	; (8006310 <HAL_SD_WriteBlocks+0x308>)
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e0fa      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006116:	e065      	b.n	80061e4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d040      	beq.n	80061a8 <HAL_SD_WriteBlocks+0x1a0>
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d03d      	beq.n	80061a8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800612c:	2300      	movs	r3, #0
 800612e:	643b      	str	r3, [r7, #64]	; 0x40
 8006130:	e037      	b.n	80061a2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	3301      	adds	r3, #1
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	3b01      	subs	r3, #1
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	021a      	lsls	r2, r3, #8
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	3301      	adds	r3, #1
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006158:	3b01      	subs	r3, #1
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	041a      	lsls	r2, r3, #16
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	3301      	adds	r3, #1
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800616e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006170:	3b01      	subs	r3, #1
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	061a      	lsls	r2, r3, #24
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	3301      	adds	r3, #1
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006188:	3b01      	subs	r3, #1
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f107 0214 	add.w	r2, r7, #20
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f89a 	bl	80072d0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800619c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619e:	3301      	adds	r3, #1
 80061a0:	643b      	str	r3, [r7, #64]	; 0x40
 80061a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a4:	2b07      	cmp	r3, #7
 80061a6:	d9c4      	bls.n	8006132 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80061a8:	f7fb fe72 	bl	8001e90 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d902      	bls.n	80061be <HAL_SD_WriteBlocks+0x1b6>
 80061b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d112      	bne.n	80061e4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a53      	ldr	r2, [pc, #332]	; (8006310 <HAL_SD_WriteBlocks+0x308>)
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061cc:	431a      	orrs	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e091      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ea:	f240 331a 	movw	r3, #794	; 0x31a
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d091      	beq.n	8006118 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d022      	beq.n	8006248 <HAL_SD_WriteBlocks+0x240>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d91f      	bls.n	8006248 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620c:	2b03      	cmp	r3, #3
 800620e:	d01b      	beq.n	8006248 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f001 f9a9 	bl	800756c <SDMMC_CmdStopTransfer>
 800621a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800621c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621e:	2b00      	cmp	r3, #0
 8006220:	d012      	beq.n	8006248 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <HAL_SD_WriteBlocks+0x308>)
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e05f      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d012      	beq.n	800627c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2d      	ldr	r2, [pc, #180]	; (8006310 <HAL_SD_WriteBlocks+0x308>)
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f043 0208 	orr.w	r2, r3, #8
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e045      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d012      	beq.n	80062b0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a20      	ldr	r2, [pc, #128]	; (8006310 <HAL_SD_WriteBlocks+0x308>)
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f043 0202 	orr.w	r2, r3, #2
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e02b      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d012      	beq.n	80062e4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_SD_WriteBlocks+0x308>)
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	f043 0210 	orr.w	r2, r3, #16
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e011      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e006      	b.n	8006308 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
  }
}
 8006308:	4618      	mov	r0, r3
 800630a:	3748      	adds	r7, #72	; 0x48
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	004005ff 	.word	0x004005ff

08006314 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	0f9b      	lsrs	r3, r3, #30
 8006324:	b2da      	uxtb	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800632e:	0e9b      	lsrs	r3, r3, #26
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	b2da      	uxtb	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006340:	0e1b      	lsrs	r3, r3, #24
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	b2da      	uxtb	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	b2da      	uxtb	r2, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	b2da      	uxtb	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636a:	b2da      	uxtb	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	0d1b      	lsrs	r3, r3, #20
 8006376:	b29a      	uxth	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006392:	0bdb      	lsrs	r3, r3, #15
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a4:	0b9b      	lsrs	r3, r3, #14
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b6:	0b5b      	lsrs	r3, r3, #13
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c8:	0b1b      	lsrs	r3, r3, #12
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2200      	movs	r2, #0
 80063da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d163      	bne.n	80064ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e8:	009a      	lsls	r2, r3, #2
 80063ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063ee:	4013      	ands	r3, r2
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063f4:	0f92      	lsrs	r2, r2, #30
 80063f6:	431a      	orrs	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006400:	0edb      	lsrs	r3, r3, #27
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	b2da      	uxtb	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006412:	0e1b      	lsrs	r3, r3, #24
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006424:	0d5b      	lsrs	r3, r3, #21
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	b2da      	uxtb	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006436:	0c9b      	lsrs	r3, r3, #18
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	b2da      	uxtb	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006448:	0bdb      	lsrs	r3, r3, #15
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	b2da      	uxtb	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	7e1b      	ldrb	r3, [r3, #24]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	3302      	adds	r3, #2
 800646c:	2201      	movs	r2, #1
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006476:	fb03 f202 	mul.w	r2, r3, r2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	7a1b      	ldrb	r3, [r3, #8]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006498:	0a52      	lsrs	r2, r2, #9
 800649a:	fb03 f202 	mul.w	r2, r3, r2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a8:	661a      	str	r2, [r3, #96]	; 0x60
 80064aa:	e031      	b.n	8006510 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d11d      	bne.n	80064f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	0c1b      	lsrs	r3, r3, #16
 80064c4:	431a      	orrs	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	3301      	adds	r3, #1
 80064d0:	029a      	lsls	r2, r3, #10
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	661a      	str	r2, [r3, #96]	; 0x60
 80064ee:	e00f      	b.n	8006510 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a58      	ldr	r2, [pc, #352]	; (8006658 <HAL_SD_GetCardCSD+0x344>)
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e09d      	b.n	800664c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006514:	0b9b      	lsrs	r3, r3, #14
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006526:	09db      	lsrs	r3, r3, #7
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	0fdb      	lsrs	r3, r3, #31
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	0f5b      	lsrs	r3, r3, #29
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	0e9b      	lsrs	r3, r3, #26
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	b2da      	uxtb	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006578:	0d9b      	lsrs	r3, r3, #22
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	b2da      	uxtb	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	0d5b      	lsrs	r3, r3, #21
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	0bdb      	lsrs	r3, r3, #15
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	0b9b      	lsrs	r3, r3, #14
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	0b5b      	lsrs	r3, r3, #13
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	0b1b      	lsrs	r3, r3, #12
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	0a9b      	lsrs	r3, r3, #10
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	b2da      	uxtb	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663a:	b2da      	uxtb	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	004005ff 	.word	0x004005ff

0800665c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f970 	bl	80069ac <SD_SendStatus>
 80066cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	0a5b      	lsrs	r3, r3, #9
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80066ea:	693b      	ldr	r3, [r7, #16]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066f4:	b5b0      	push	{r4, r5, r7, lr}
 80066f6:	b094      	sub	sp, #80	; 0x50
 80066f8:	af04      	add	r7, sp, #16
 80066fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80066fc:	2301      	movs	r3, #1
 80066fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fe02 	bl	800730e <SDIO_GetPowerState>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006714:	e0b8      	b.n	8006888 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	2b03      	cmp	r3, #3
 800671c:	d02f      	beq.n	800677e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 ffe9 	bl	80076fa <SDMMC_CmdSendCID>
 8006728:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <SD_InitCard+0x40>
    {
      return errorstate;
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006732:	e0a9      	b.n	8006888 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fe2c 	bl	8007398 <SDIO_GetResponse>
 8006740:	4602      	mov	r2, r0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2104      	movs	r1, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fe23 	bl	8007398 <SDIO_GetResponse>
 8006752:	4602      	mov	r2, r0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2108      	movs	r1, #8
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fe1a 	bl	8007398 <SDIO_GetResponse>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	210c      	movs	r1, #12
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fe11 	bl	8007398 <SDIO_GetResponse>
 8006776:	4602      	mov	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	2b03      	cmp	r3, #3
 8006784:	d00d      	beq.n	80067a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f107 020e 	add.w	r2, r7, #14
 800678e:	4611      	mov	r1, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f000 ffef 	bl	8007774 <SDMMC_CmdSetRelAdd>
 8006796:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	e072      	b.n	8006888 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d036      	beq.n	8006818 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067aa:	89fb      	ldrh	r3, [r7, #14]
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 ffb9 	bl	8007736 <SDMMC_CmdSendCSD>
 80067c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	e05b      	b.n	8006888 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fdde 	bl	8007398 <SDIO_GetResponse>
 80067dc:	4602      	mov	r2, r0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2104      	movs	r1, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fdd5 	bl	8007398 <SDIO_GetResponse>
 80067ee:	4602      	mov	r2, r0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2108      	movs	r1, #8
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fdcc 	bl	8007398 <SDIO_GetResponse>
 8006800:	4602      	mov	r2, r0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	210c      	movs	r1, #12
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fdc3 	bl	8007398 <SDIO_GetResponse>
 8006812:	4602      	mov	r2, r0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2104      	movs	r1, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fdba 	bl	8007398 <SDIO_GetResponse>
 8006824:	4603      	mov	r3, r0
 8006826:	0d1a      	lsrs	r2, r3, #20
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fd6e 	bl	8006314 <HAL_SD_GetCardCSD>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800683e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006842:	e021      	b.n	8006888 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6819      	ldr	r1, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	041b      	lsls	r3, r3, #16
 800684e:	2200      	movs	r2, #0
 8006850:	461c      	mov	r4, r3
 8006852:	4615      	mov	r5, r2
 8006854:	4622      	mov	r2, r4
 8006856:	462b      	mov	r3, r5
 8006858:	4608      	mov	r0, r1
 800685a:	f000 fea9 	bl	80075b0 <SDMMC_CmdSelDesel>
 800685e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <SD_InitCard+0x176>
  {
    return errorstate;
 8006866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006868:	e00e      	b.n	8006888 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681d      	ldr	r5, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	466c      	mov	r4, sp
 8006872:	f103 0210 	add.w	r2, r3, #16
 8006876:	ca07      	ldmia	r2, {r0, r1, r2}
 8006878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800687c:	3304      	adds	r3, #4
 800687e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006880:	4628      	mov	r0, r5
 8006882:	f000 fced 	bl	8007260 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3740      	adds	r7, #64	; 0x40
 800688c:	46bd      	mov	sp, r7
 800688e:	bdb0      	pop	{r4, r5, r7, pc}

08006890 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fea4 	bl	80075f6 <SDMMC_CmdGoIdleState>
 80068ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <SD_PowerON+0x2a>
  {
    return errorstate;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	e072      	b.n	80069a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 feb7 	bl	8007632 <SDMMC_CmdOperCond>
 80068c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fe8d 	bl	80075f6 <SDMMC_CmdGoIdleState>
 80068dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <SD_PowerON+0x5e>
    {
      return errorstate;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	e05b      	b.n	80069a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d137      	bne.n	8006966 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 feb7 	bl	8007670 <SDMMC_CmdAppCommand>
 8006902:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d02d      	beq.n	8006966 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800690a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800690e:	e047      	b.n	80069a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f000 feaa 	bl	8007670 <SDMMC_CmdAppCommand>
 800691c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <SD_PowerON+0x98>
    {
      return errorstate;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e03b      	b.n	80069a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	491e      	ldr	r1, [pc, #120]	; (80069a8 <SD_PowerON+0x118>)
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fec0 	bl	80076b4 <SDMMC_CmdAppOperCommand>
 8006934:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800693c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006940:	e02e      	b.n	80069a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fd25 	bl	8007398 <SDIO_GetResponse>
 800694e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	0fdb      	lsrs	r3, r3, #31
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <SD_PowerON+0xcc>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <SD_PowerON+0xce>
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]

    count++;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	3301      	adds	r3, #1
 8006964:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800696c:	4293      	cmp	r3, r2
 800696e:	d802      	bhi.n	8006976 <SD_PowerON+0xe6>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0cc      	beq.n	8006910 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800697c:	4293      	cmp	r3, r2
 800697e:	d902      	bls.n	8006986 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006984:	e00c      	b.n	80069a0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	645a      	str	r2, [r3, #68]	; 0x44
 8006996:	e002      	b.n	800699e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	c1100000 	.word	0xc1100000

080069ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80069bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c0:	e018      	b.n	80069f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f000 fef1 	bl	80077b6 <SDMMC_CmdSendStatus>
 80069d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e009      	b.n	80069f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fcd6 	bl	8007398 <SDIO_GetResponse>
 80069ec:	4602      	mov	r2, r0
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e03f      	b.n	8006a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fb f88c 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2224      	movs	r2, #36	; 0x24
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f999 	bl	8006d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e05f      	b.n	8006b6e <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7fb f83c 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2224      	movs	r2, #36	; 0x24
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f949 	bl	8006d78 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b04:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 020f 	bic.w	r2, r2, #15
 8006b14:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6919      	ldr	r1, [r3, #16]
 8006b1c:	7afa      	ldrb	r2, [r7, #11]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b34:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68d9      	ldr	r1, [r3, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b08a      	sub	sp, #40	; 0x28
 8006b7a:	af02      	add	r7, sp, #8
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d17c      	bne.n	8006c90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_UART_Transmit+0x2c>
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e075      	b.n	8006c92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_UART_Transmit+0x3e>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e06e      	b.n	8006c92 <HAL_UART_Transmit+0x11c>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2221      	movs	r2, #33	; 0x21
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bca:	f7fb f961 	bl	8001e90 <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be4:	d108      	bne.n	8006bf8 <HAL_UART_Transmit+0x82>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e003      	b.n	8006c00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c08:	e02a      	b.n	8006c60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2200      	movs	r2, #0
 8006c12:	2180      	movs	r1, #128	; 0x80
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f840 	bl	8006c9a <UART_WaitOnFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e036      	b.n	8006c92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	3302      	adds	r3, #2
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	e007      	b.n	8006c52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1cf      	bne.n	8006c0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2200      	movs	r2, #0
 8006c72:	2140      	movs	r1, #64	; 0x40
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f810 	bl	8006c9a <UART_WaitOnFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e006      	b.n	8006c92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e000      	b.n	8006c92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c90:	2302      	movs	r3, #2
  }
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b090      	sub	sp, #64	; 0x40
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006caa:	e050      	b.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d04c      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <UART_WaitOnFlagUntilTimeout+0x30>
 8006cba:	f7fb f8e9 	bl	8001e90 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d241      	bcs.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cea:	637a      	str	r2, [r7, #52]	; 0x34
 8006cec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3314      	adds	r3, #20
 8006d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f023 0301 	bic.w	r3, r3, #1
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d1e:	623a      	str	r2, [r7, #32]
 8006d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	69f9      	ldr	r1, [r7, #28]
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e00f      	b.n	8006d6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d09f      	beq.n	8006cac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3740      	adds	r7, #64	; 0x40
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d7c:	b0c0      	sub	sp, #256	; 0x100
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	68d9      	ldr	r1, [r3, #12]
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	ea40 0301 	orr.w	r3, r0, r1
 8006da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dd0:	f021 010c 	bic.w	r1, r1, #12
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dde:	430b      	orrs	r3, r1
 8006de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df2:	6999      	ldr	r1, [r3, #24]
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	ea40 0301 	orr.w	r3, r0, r1
 8006dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b8f      	ldr	r3, [pc, #572]	; (8007044 <UART_SetConfig+0x2cc>)
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d005      	beq.n	8006e18 <UART_SetConfig+0xa0>
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b8d      	ldr	r3, [pc, #564]	; (8007048 <UART_SetConfig+0x2d0>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d104      	bne.n	8006e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e18:	f7fe fd14 	bl	8005844 <HAL_RCC_GetPCLK2Freq>
 8006e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e20:	e003      	b.n	8006e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e22:	f7fe fcfb 	bl	800581c <HAL_RCC_GetPCLK1Freq>
 8006e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e34:	f040 810c 	bne.w	8007050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	1891      	adds	r1, r2, r2
 8006e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e52:	415b      	adcs	r3, r3
 8006e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	eb12 0801 	adds.w	r8, r2, r1
 8006e60:	4629      	mov	r1, r5
 8006e62:	eb43 0901 	adc.w	r9, r3, r1
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	4699      	mov	r9, r3
 8006e7e:	4623      	mov	r3, r4
 8006e80:	eb18 0303 	adds.w	r3, r8, r3
 8006e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e88:	462b      	mov	r3, r5
 8006e8a:	eb49 0303 	adc.w	r3, r9, r3
 8006e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	18db      	adds	r3, r3, r3
 8006eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8006eac:	4613      	mov	r3, r2
 8006eae:	eb42 0303 	adc.w	r3, r2, r3
 8006eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ebc:	f7f9 f9e0 	bl	8000280 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4b61      	ldr	r3, [pc, #388]	; (800704c <UART_SetConfig+0x2d4>)
 8006ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	011c      	lsls	r4, r3, #4
 8006ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	1891      	adds	r1, r2, r2
 8006ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ee8:	415b      	adcs	r3, r3
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f10:	4692      	mov	sl, r2
 8006f12:	469b      	mov	fp, r3
 8006f14:	4643      	mov	r3, r8
 8006f16:	eb1a 0303 	adds.w	r3, sl, r3
 8006f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	eb4b 0303 	adc.w	r3, fp, r3
 8006f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	18db      	adds	r3, r3, r3
 8006f40:	643b      	str	r3, [r7, #64]	; 0x40
 8006f42:	4613      	mov	r3, r2
 8006f44:	eb42 0303 	adc.w	r3, r2, r3
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f52:	f7f9 f995 	bl	8000280 <__aeabi_uldivmod>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4b3b      	ldr	r3, [pc, #236]	; (800704c <UART_SetConfig+0x2d4>)
 8006f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	2264      	movs	r2, #100	; 0x64
 8006f66:	fb02 f303 	mul.w	r3, r2, r3
 8006f6a:	1acb      	subs	r3, r1, r3
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <UART_SetConfig+0x2d4>)
 8006f74:	fba3 2302 	umull	r2, r3, r3, r2
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f80:	441c      	add	r4, r3
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	1851      	adds	r1, r2, r1
 8006fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8006faa:	4649      	mov	r1, r9
 8006fac:	414b      	adcs	r3, r1
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	00cb      	lsls	r3, r1, #3
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	00ca      	lsls	r2, r1, #3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fd8:	464b      	mov	r3, r9
 8006fda:	460a      	mov	r2, r1
 8006fdc:	eb42 0303 	adc.w	r3, r2, r3
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	18db      	adds	r3, r3, r3
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ffe:	4613      	mov	r3, r2
 8007000:	eb42 0303 	adc.w	r3, r2, r3
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800700a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800700e:	f7f9 f937 	bl	8000280 <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <UART_SetConfig+0x2d4>)
 8007018:	fba3 1302 	umull	r1, r3, r3, r2
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	2164      	movs	r1, #100	; 0x64
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	3332      	adds	r3, #50	; 0x32
 800702a:	4a08      	ldr	r2, [pc, #32]	; (800704c <UART_SetConfig+0x2d4>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f003 0207 	and.w	r2, r3, #7
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4422      	add	r2, r4
 800703e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007040:	e105      	b.n	800724e <UART_SetConfig+0x4d6>
 8007042:	bf00      	nop
 8007044:	40011000 	.word	0x40011000
 8007048:	40011400 	.word	0x40011400
 800704c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007054:	2200      	movs	r2, #0
 8007056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800705a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800705e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	1891      	adds	r1, r2, r2
 8007068:	6239      	str	r1, [r7, #32]
 800706a:	415b      	adcs	r3, r3
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
 800706e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007072:	4641      	mov	r1, r8
 8007074:	1854      	adds	r4, r2, r1
 8007076:	4649      	mov	r1, r9
 8007078:	eb43 0501 	adc.w	r5, r3, r1
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	00eb      	lsls	r3, r5, #3
 8007086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800708a:	00e2      	lsls	r2, r4, #3
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	4643      	mov	r3, r8
 8007092:	18e3      	adds	r3, r4, r3
 8007094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007098:	464b      	mov	r3, r9
 800709a:	eb45 0303 	adc.w	r3, r5, r3
 800709e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070be:	4629      	mov	r1, r5
 80070c0:	008b      	lsls	r3, r1, #2
 80070c2:	4621      	mov	r1, r4
 80070c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c8:	4621      	mov	r1, r4
 80070ca:	008a      	lsls	r2, r1, #2
 80070cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070d0:	f7f9 f8d6 	bl	8000280 <__aeabi_uldivmod>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4b60      	ldr	r3, [pc, #384]	; (800725c <UART_SetConfig+0x4e4>)
 80070da:	fba3 2302 	umull	r2, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	011c      	lsls	r4, r3, #4
 80070e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	1891      	adds	r1, r2, r2
 80070fa:	61b9      	str	r1, [r7, #24]
 80070fc:	415b      	adcs	r3, r3
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007104:	4641      	mov	r1, r8
 8007106:	1851      	adds	r1, r2, r1
 8007108:	6139      	str	r1, [r7, #16]
 800710a:	4649      	mov	r1, r9
 800710c:	414b      	adcs	r3, r1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800711c:	4659      	mov	r1, fp
 800711e:	00cb      	lsls	r3, r1, #3
 8007120:	4651      	mov	r1, sl
 8007122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007126:	4651      	mov	r1, sl
 8007128:	00ca      	lsls	r2, r1, #3
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	4603      	mov	r3, r0
 8007130:	4642      	mov	r2, r8
 8007132:	189b      	adds	r3, r3, r2
 8007134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007138:	464b      	mov	r3, r9
 800713a:	460a      	mov	r2, r1
 800713c:	eb42 0303 	adc.w	r3, r2, r3
 8007140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	67bb      	str	r3, [r7, #120]	; 0x78
 800714e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800715c:	4649      	mov	r1, r9
 800715e:	008b      	lsls	r3, r1, #2
 8007160:	4641      	mov	r1, r8
 8007162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007166:	4641      	mov	r1, r8
 8007168:	008a      	lsls	r2, r1, #2
 800716a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800716e:	f7f9 f887 	bl	8000280 <__aeabi_uldivmod>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4b39      	ldr	r3, [pc, #228]	; (800725c <UART_SetConfig+0x4e4>)
 8007178:	fba3 1302 	umull	r1, r3, r3, r2
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	2164      	movs	r1, #100	; 0x64
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	3332      	adds	r3, #50	; 0x32
 800718a:	4a34      	ldr	r2, [pc, #208]	; (800725c <UART_SetConfig+0x4e4>)
 800718c:	fba2 2303 	umull	r2, r3, r2, r3
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007196:	441c      	add	r4, r3
 8007198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800719c:	2200      	movs	r2, #0
 800719e:	673b      	str	r3, [r7, #112]	; 0x70
 80071a0:	677a      	str	r2, [r7, #116]	; 0x74
 80071a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	415b      	adcs	r3, r3
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071b6:	4641      	mov	r1, r8
 80071b8:	1851      	adds	r1, r2, r1
 80071ba:	6039      	str	r1, [r7, #0]
 80071bc:	4649      	mov	r1, r9
 80071be:	414b      	adcs	r3, r1
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071ce:	4659      	mov	r1, fp
 80071d0:	00cb      	lsls	r3, r1, #3
 80071d2:	4651      	mov	r1, sl
 80071d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071d8:	4651      	mov	r1, sl
 80071da:	00ca      	lsls	r2, r1, #3
 80071dc:	4610      	mov	r0, r2
 80071de:	4619      	mov	r1, r3
 80071e0:	4603      	mov	r3, r0
 80071e2:	4642      	mov	r2, r8
 80071e4:	189b      	adds	r3, r3, r2
 80071e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e8:	464b      	mov	r3, r9
 80071ea:	460a      	mov	r2, r1
 80071ec:	eb42 0303 	adc.w	r3, r2, r3
 80071f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	663b      	str	r3, [r7, #96]	; 0x60
 80071fc:	667a      	str	r2, [r7, #100]	; 0x64
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800720a:	4649      	mov	r1, r9
 800720c:	008b      	lsls	r3, r1, #2
 800720e:	4641      	mov	r1, r8
 8007210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007214:	4641      	mov	r1, r8
 8007216:	008a      	lsls	r2, r1, #2
 8007218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800721c:	f7f9 f830 	bl	8000280 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <UART_SetConfig+0x4e4>)
 8007226:	fba3 1302 	umull	r1, r3, r3, r2
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	2164      	movs	r1, #100	; 0x64
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	3332      	adds	r3, #50	; 0x32
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <UART_SetConfig+0x4e4>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f003 020f 	and.w	r2, r3, #15
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4422      	add	r2, r4
 800724c:	609a      	str	r2, [r3, #8]
}
 800724e:	bf00      	nop
 8007250:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007254:	46bd      	mov	sp, r7
 8007256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800725a:	bf00      	nop
 800725c:	51eb851f 	.word	0x51eb851f

08007260 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007260:	b084      	sub	sp, #16
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	f107 001c 	add.w	r0, r7, #28
 800726e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007276:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007278:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800727a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800727e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007282:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007286:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800728a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800729a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	b004      	add	sp, #16
 80072b4:	4770      	bx	lr

080072b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2203      	movs	r2, #3
 80072fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0303 	and.w	r3, r3, #3
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007348:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800734e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007354:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007364:	f023 030f 	bic.w	r3, r3, #15
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	b2db      	uxtb	r3, r3
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3314      	adds	r3, #20
 80073a6:	461a      	mov	r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4413      	add	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
}  
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073e4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80073ea:	431a      	orrs	r2, r3
                       Data->DPSM);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80073f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007408:	2300      	movs	r3, #0

}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b088      	sub	sp, #32
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007424:	2310      	movs	r3, #16
 8007426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007434:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007436:	f107 0308 	add.w	r3, r7, #8
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff ff74 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007442:	f241 3288 	movw	r2, #5000	; 0x1388
 8007446:	2110      	movs	r1, #16
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f9d7 	bl	80077fc <SDMMC_GetCmdResp1>
 800744e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007450:	69fb      	ldr	r3, [r7, #28]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b088      	sub	sp, #32
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007468:	2311      	movs	r3, #17
 800746a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007478:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ff52 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007486:	f241 3288 	movw	r2, #5000	; 0x1388
 800748a:	2111      	movs	r1, #17
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9b5 	bl	80077fc <SDMMC_GetCmdResp1>
 8007492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007494:	69fb      	ldr	r3, [r7, #28]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b088      	sub	sp, #32
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80074ac:	2312      	movs	r3, #18
 80074ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074be:	f107 0308 	add.w	r3, r7, #8
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ff30 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80074ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ce:	2112      	movs	r1, #18
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f993 	bl	80077fc <SDMMC_GetCmdResp1>
 80074d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d8:	69fb      	ldr	r3, [r7, #28]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b088      	sub	sp, #32
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80074f0:	2318      	movs	r3, #24
 80074f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007500:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff ff0e 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800750e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007512:	2118      	movs	r1, #24
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f971 	bl	80077fc <SDMMC_GetCmdResp1>
 800751a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800751c:	69fb      	ldr	r3, [r7, #28]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b088      	sub	sp, #32
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007534:	2319      	movs	r3, #25
 8007536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007538:	2340      	movs	r3, #64	; 0x40
 800753a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800753c:	2300      	movs	r3, #0
 800753e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007544:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff feec 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007552:	f241 3288 	movw	r2, #5000	; 0x1388
 8007556:	2119      	movs	r1, #25
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f94f 	bl	80077fc <SDMMC_GetCmdResp1>
 800755e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007560:	69fb      	ldr	r3, [r7, #28]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007578:	230c      	movs	r3, #12
 800757a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800757c:	2340      	movs	r3, #64	; 0x40
 800757e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007588:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800758a:	f107 0308 	add.w	r3, r7, #8
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff feca 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007596:	4a05      	ldr	r2, [pc, #20]	; (80075ac <SDMMC_CmdStopTransfer+0x40>)
 8007598:	210c      	movs	r1, #12
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f92e 	bl	80077fc <SDMMC_GetCmdResp1>
 80075a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075a2:	69fb      	ldr	r3, [r7, #28]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	05f5e100 	.word	0x05f5e100

080075b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	; 0x28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80075c0:	2307      	movs	r3, #7
 80075c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075d2:	f107 0310 	add.w	r3, r7, #16
 80075d6:	4619      	mov	r1, r3
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff fea6 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80075de:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e2:	2107      	movs	r1, #7
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f909 	bl	80077fc <SDMMC_GetCmdResp1>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b088      	sub	sp, #32
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800760e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007612:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007614:	f107 0308 	add.w	r3, r7, #8
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fe85 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb23 	bl	8007c6c <SDMMC_GetCmdError>
 8007626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007628:	69fb      	ldr	r3, [r7, #28]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3720      	adds	r7, #32
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b088      	sub	sp, #32
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800763a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800763e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007640:	2308      	movs	r3, #8
 8007642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007644:	2340      	movs	r3, #64	; 0x40
 8007646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800764c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007652:	f107 0308 	add.w	r3, r7, #8
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fe66 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fab6 	bl	8007bd0 <SDMMC_GetCmdResp7>
 8007664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007666:	69fb      	ldr	r3, [r7, #28]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800767e:	2337      	movs	r3, #55	; 0x37
 8007680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007682:	2340      	movs	r3, #64	; 0x40
 8007684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800768a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800768e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007690:	f107 0308 	add.w	r3, r7, #8
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff fe47 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800769c:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a0:	2137      	movs	r1, #55	; 0x37
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f8aa 	bl	80077fc <SDMMC_GetCmdResp1>
 80076a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076aa:	69fb      	ldr	r3, [r7, #28]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80076ca:	2329      	movs	r3, #41	; 0x29
 80076cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076ce:	2340      	movs	r3, #64	; 0x40
 80076d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076dc:	f107 0308 	add.w	r3, r7, #8
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fe21 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9bd 	bl	8007a68 <SDMMC_GetCmdResp3>
 80076ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076f0:	69fb      	ldr	r3, [r7, #28]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b088      	sub	sp, #32
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007706:	2302      	movs	r3, #2
 8007708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800770a:	23c0      	movs	r3, #192	; 0xc0
 800770c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007718:	f107 0308 	add.w	r3, r7, #8
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fe03 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f957 	bl	80079d8 <SDMMC_GetCmdResp2>
 800772a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800772c:	69fb      	ldr	r3, [r7, #28]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b088      	sub	sp, #32
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007744:	2309      	movs	r3, #9
 8007746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007748:	23c0      	movs	r3, #192	; 0xc0
 800774a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007754:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007756:	f107 0308 	add.w	r3, r7, #8
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff fde4 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f938 	bl	80079d8 <SDMMC_GetCmdResp2>
 8007768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800776a:	69fb      	ldr	r3, [r7, #28]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007782:	2303      	movs	r3, #3
 8007784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800778e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007794:	f107 0308 	add.w	r3, r7, #8
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fdc5 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	2103      	movs	r1, #3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f99d 	bl	8007ae4 <SDMMC_GetCmdResp6>
 80077aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ac:	69fb      	ldr	r3, [r7, #28]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3720      	adds	r7, #32
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b088      	sub	sp, #32
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80077c4:	230d      	movs	r3, #13
 80077c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077c8:	2340      	movs	r3, #64	; 0x40
 80077ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff fda4 	bl	800732a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80077e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e6:	210d      	movs	r1, #13
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f807 	bl	80077fc <SDMMC_GetCmdResp1>
 80077ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f0:	69fb      	ldr	r3, [r7, #28]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	460b      	mov	r3, r1
 8007806:	607a      	str	r2, [r7, #4]
 8007808:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800780a:	4b70      	ldr	r3, [pc, #448]	; (80079cc <SDMMC_GetCmdResp1+0x1d0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a70      	ldr	r2, [pc, #448]	; (80079d0 <SDMMC_GetCmdResp1+0x1d4>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	0a5a      	lsrs	r2, r3, #9
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	1e5a      	subs	r2, r3, #1
 8007822:	61fa      	str	r2, [r7, #28]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800782c:	e0c9      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0ef      	beq.n	800781e <SDMMC_GetCmdResp1+0x22>
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ea      	bne.n	800781e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2204      	movs	r2, #4
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800785a:	2304      	movs	r3, #4
 800785c:	e0b1      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007870:	2301      	movs	r3, #1
 8007872:	e0a6      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	22c5      	movs	r2, #197	; 0xc5
 8007878:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff fd7f 	bl	800737e <SDIO_GetCommandResponse>
 8007880:	4603      	mov	r3, r0
 8007882:	461a      	mov	r2, r3
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	4293      	cmp	r3, r2
 8007888:	d001      	beq.n	800788e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800788a:	2301      	movs	r3, #1
 800788c:	e099      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800788e:	2100      	movs	r1, #0
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fd81 	bl	8007398 <SDIO_GetResponse>
 8007896:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4b4e      	ldr	r3, [pc, #312]	; (80079d4 <SDMMC_GetCmdResp1+0x1d8>)
 800789c:	4013      	ands	r3, r2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e08d      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da02      	bge.n	80078b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80078ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078b0:	e087      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80078bc:	2340      	movs	r3, #64	; 0x40
 80078be:	e080      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80078ca:	2380      	movs	r3, #128	; 0x80
 80078cc:	e079      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80078d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078dc:	e071      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80078e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ec:	e069      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80078f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fc:	e061      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800790c:	e059      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800791c:	e051      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800792c:	e049      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800793c:	e041      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794c:	e039      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800795c:	e031      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007968:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800796c:	e029      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800797c:	e021      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007988:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800798c:	e019      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007998:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800799c:	e011      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80079a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079ac:	e009      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80079b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079bc:	e001      	b.n	80079c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80079be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	2000001c 	.word	0x2000001c
 80079d0:	10624dd3 	.word	0x10624dd3
 80079d4:	fdffe008 	.word	0xfdffe008

080079d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079e0:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <SDMMC_GetCmdResp2+0x88>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <SDMMC_GetCmdResp2+0x8c>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	0a5b      	lsrs	r3, r3, #9
 80079ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	1e5a      	subs	r2, r3, #1
 80079fa:	60fa      	str	r2, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a04:	e026      	b.n	8007a54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0ef      	beq.n	80079f6 <SDMMC_GetCmdResp2+0x1e>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1ea      	bne.n	80079f6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2204      	movs	r2, #4
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a32:	2304      	movs	r3, #4
 8007a34:	e00e      	b.n	8007a54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e003      	b.n	8007a54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	22c5      	movs	r2, #197	; 0xc5
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	2000001c 	.word	0x2000001c
 8007a64:	10624dd3 	.word	0x10624dd3

08007a68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a70:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <SDMMC_GetCmdResp3+0x74>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1a      	ldr	r2, [pc, #104]	; (8007ae0 <SDMMC_GetCmdResp3+0x78>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	0a5b      	lsrs	r3, r3, #9
 8007a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a80:	fb02 f303 	mul.w	r3, r2, r3
 8007a84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	1e5a      	subs	r2, r3, #1
 8007a8a:	60fa      	str	r2, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a94:	e01b      	b.n	8007ace <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0ef      	beq.n	8007a86 <SDMMC_GetCmdResp3+0x1e>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1ea      	bne.n	8007a86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	e003      	b.n	8007ace <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	22c5      	movs	r2, #197	; 0xc5
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000001c 	.word	0x2000001c
 8007ae0:	10624dd3 	.word	0x10624dd3

08007ae4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	460b      	mov	r3, r1
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007af2:	4b35      	ldr	r3, [pc, #212]	; (8007bc8 <SDMMC_GetCmdResp6+0xe4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a35      	ldr	r2, [pc, #212]	; (8007bcc <SDMMC_GetCmdResp6+0xe8>)
 8007af8:	fba2 2303 	umull	r2, r3, r2, r3
 8007afc:	0a5b      	lsrs	r3, r3, #9
 8007afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b02:	fb02 f303 	mul.w	r3, r2, r3
 8007b06:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	1e5a      	subs	r2, r3, #1
 8007b0c:	61fa      	str	r2, [r7, #28]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b16:	e052      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0ef      	beq.n	8007b08 <SDMMC_GetCmdResp6+0x24>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1ea      	bne.n	8007b08 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2204      	movs	r2, #4
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b44:	2304      	movs	r3, #4
 8007b46:	e03a      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e02f      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff fc0d 	bl	800737e <SDIO_GetCommandResponse>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d001      	beq.n	8007b72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e025      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	22c5      	movs	r2, #197	; 0xc5
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b78:	2100      	movs	r1, #0
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff fc0c 	bl	8007398 <SDIO_GetResponse>
 8007b80:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	0c1b      	lsrs	r3, r3, #16
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e011      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ba8:	e009      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bb8:	e001      	b.n	8007bbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000001c 	.word	0x2000001c
 8007bcc:	10624dd3 	.word	0x10624dd3

08007bd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bd8:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <SDMMC_GetCmdResp7+0x94>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <SDMMC_GetCmdResp7+0x98>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	0a5b      	lsrs	r3, r3, #9
 8007be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	60fa      	str	r2, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bfc:	e02c      	b.n	8007c58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0ef      	beq.n	8007bee <SDMMC_GetCmdResp7+0x1e>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1ea      	bne.n	8007bee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c2a:	2304      	movs	r3, #4
 8007c2c:	e014      	b.n	8007c58 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e009      	b.n	8007c58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2240      	movs	r2, #64	; 0x40
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
  
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	2000001c 	.word	0x2000001c
 8007c68:	10624dd3 	.word	0x10624dd3

08007c6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c74:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <SDMMC_GetCmdError+0x50>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a11      	ldr	r2, [pc, #68]	; (8007cc0 <SDMMC_GetCmdError+0x54>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	0a5b      	lsrs	r3, r3, #9
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	1e5a      	subs	r2, r3, #1
 8007c8e:	60fa      	str	r2, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c98:	e009      	b.n	8007cae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0f1      	beq.n	8007c8a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	22c5      	movs	r2, #197	; 0xc5
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	2000001c 	.word	0x2000001c
 8007cc0:	10624dd3 	.word	0x10624dd3

08007cc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007cc8:	4904      	ldr	r1, [pc, #16]	; (8007cdc <MX_FATFS_Init+0x18>)
 8007cca:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <MX_FATFS_Init+0x1c>)
 8007ccc:	f003 f824 	bl	800ad18 <FATFS_LinkDriver>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b03      	ldr	r3, [pc, #12]	; (8007ce4 <MX_FATFS_Init+0x20>)
 8007cd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007cd8:	bf00      	nop
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	2000453c 	.word	0x2000453c
 8007ce0:	0800c1a8 	.word	0x0800c1a8
 8007ce4:	20004538 	.word	0x20004538

08007ce8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007cec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007d02:	f000 f86b 	bl	8007ddc <BSP_SD_IsDetected>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d001      	beq.n	8007d10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e005      	b.n	8007d1c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007d10:	4804      	ldr	r0, [pc, #16]	; (8007d24 <BSP_SD_Init+0x2c>)
 8007d12:	f7fd feeb 	bl	8005aec <HAL_SD_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000258 	.word	0x20000258

08007d28 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	4806      	ldr	r0, [pc, #24]	; (8007d60 <BSP_SD_ReadBlocks+0x38>)
 8007d46:	f7fd ff81 	bl	8005c4c <HAL_SD_ReadBlocks>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000258 	.word	0x20000258

08007d64 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	4806      	ldr	r0, [pc, #24]	; (8007d9c <BSP_SD_WriteBlocks+0x38>)
 8007d82:	f7fe f941 	bl	8006008 <HAL_SD_WriteBlocks>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000258 	.word	0x20000258

08007da0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007da4:	4805      	ldr	r0, [pc, #20]	; (8007dbc <BSP_SD_GetCardState+0x1c>)
 8007da6:	f7fe fc85 	bl	80066b4 <HAL_SD_GetCardState>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000258 	.word	0x20000258

08007dc0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	4803      	ldr	r0, [pc, #12]	; (8007dd8 <BSP_SD_GetCardInfo+0x18>)
 8007dcc:	f7fe fc46 	bl	800665c <HAL_SD_GetCardInfo>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000258 	.word	0x20000258

08007ddc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007de2:	2301      	movs	r3, #1
 8007de4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	b2db      	uxtb	r3, r3
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
	...

08007df8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <SD_CheckStatus+0x38>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e08:	f7ff ffca 	bl	8007da0 <BSP_SD_GetCardState>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <SD_CheckStatus+0x38>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <SD_CheckStatus+0x38>)
 8007e20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007e22:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <SD_CheckStatus+0x38>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b2db      	uxtb	r3, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000025 	.word	0x20000025

08007e34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <SD_initialize+0x38>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007e44:	f7ff ff58 	bl	8007cf8 <BSP_SD_Init>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d107      	bne.n	8007e5e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff ffd1 	bl	8007df8 <SD_CheckStatus>
 8007e56:	4603      	mov	r3, r0
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <SD_initialize+0x38>)
 8007e5c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <SD_initialize+0x38>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b2db      	uxtb	r3, r3
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20000025 	.word	0x20000025

08007e70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff ffbb 	bl	8007df8 <SD_CheckStatus>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f7ff ff3d 	bl	8007d28 <BSP_SD_ReadBlocks>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d107      	bne.n	8007ec4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007eb4:	bf00      	nop
 8007eb6:	f7ff ff73 	bl	8007da0 <BSP_SD_GetCardState>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1fa      	bne.n	8007eb6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b086      	sub	sp, #24
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	68b8      	ldr	r0, [r7, #8]
 8007eec:	f7ff ff3a 	bl	8007d64 <BSP_SD_WriteBlocks>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007ef6:	bf00      	nop
 8007ef8:	f7ff ff52 	bl	8007da0 <BSP_SD_GetCardState>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1fa      	bne.n	8007ef8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08c      	sub	sp, #48	; 0x30
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	603a      	str	r2, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007f26:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <SD_ioctl+0xac>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <SD_ioctl+0x28>
 8007f34:	2303      	movs	r3, #3
 8007f36:	e03c      	b.n	8007fb2 <SD_ioctl+0xa2>

  switch (cmd)
 8007f38:	79bb      	ldrb	r3, [r7, #6]
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d834      	bhi.n	8007fa8 <SD_ioctl+0x98>
 8007f3e:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <SD_ioctl+0x34>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f55 	.word	0x08007f55
 8007f48:	08007f5d 	.word	0x08007f5d
 8007f4c:	08007f75 	.word	0x08007f75
 8007f50:	08007f8f 	.word	0x08007f8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f5a:	e028      	b.n	8007fae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f5c:	f107 030c 	add.w	r3, r7, #12
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff ff2d 	bl	8007dc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f72:	e01c      	b.n	8007fae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f74:	f107 030c 	add.w	r3, r7, #12
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff ff21 	bl	8007dc0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f8c:	e00f      	b.n	8007fae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f8e:	f107 030c 	add.w	r3, r7, #12
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff ff14 	bl	8007dc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	0a5a      	lsrs	r2, r3, #9
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007fa6:	e002      	b.n	8007fae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3730      	adds	r7, #48	; 0x30
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000025 	.word	0x20000025

08007fc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <disk_status+0x30>)
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	79fa      	ldrb	r2, [r7, #7]
 8007fd8:	4905      	ldr	r1, [pc, #20]	; (8007ff0 <disk_status+0x30>)
 8007fda:	440a      	add	r2, r1
 8007fdc:	7a12      	ldrb	r2, [r2, #8]
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4798      	blx	r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20004568 	.word	0x20004568

08007ff4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	4a0d      	ldr	r2, [pc, #52]	; (800803c <disk_initialize+0x48>)
 8008006:	5cd3      	ldrb	r3, [r2, r3]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d111      	bne.n	8008030 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	4a0b      	ldr	r2, [pc, #44]	; (800803c <disk_initialize+0x48>)
 8008010:	2101      	movs	r1, #1
 8008012:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	4a09      	ldr	r2, [pc, #36]	; (800803c <disk_initialize+0x48>)
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	79fa      	ldrb	r2, [r7, #7]
 8008022:	4906      	ldr	r1, [pc, #24]	; (800803c <disk_initialize+0x48>)
 8008024:	440a      	add	r2, r1
 8008026:	7a12      	ldrb	r2, [r2, #8]
 8008028:	4610      	mov	r0, r2
 800802a:	4798      	blx	r3
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20004568 	.word	0x20004568

08008040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	4a0a      	ldr	r2, [pc, #40]	; (800807c <disk_read+0x3c>)
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	689c      	ldr	r4, [r3, #8]
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	4a07      	ldr	r2, [pc, #28]	; (800807c <disk_read+0x3c>)
 8008060:	4413      	add	r3, r2
 8008062:	7a18      	ldrb	r0, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	47a0      	blx	r4
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
}
 8008072:	4618      	mov	r0, r3
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd90      	pop	{r4, r7, pc}
 800807a:	bf00      	nop
 800807c:	20004568 	.word	0x20004568

08008080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4a0a      	ldr	r2, [pc, #40]	; (80080bc <disk_write+0x3c>)
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	68dc      	ldr	r4, [r3, #12]
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	4a07      	ldr	r2, [pc, #28]	; (80080bc <disk_write+0x3c>)
 80080a0:	4413      	add	r3, r2
 80080a2:	7a18      	ldrb	r0, [r3, #8]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	47a0      	blx	r4
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd90      	pop	{r4, r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20004568 	.word	0x20004568

080080c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	603a      	str	r2, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
 80080cc:	460b      	mov	r3, r1
 80080ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <disk_ioctl+0x38>)
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	79fa      	ldrb	r2, [r7, #7]
 80080de:	4906      	ldr	r1, [pc, #24]	; (80080f8 <disk_ioctl+0x38>)
 80080e0:	440a      	add	r2, r1
 80080e2:	7a10      	ldrb	r0, [r2, #8]
 80080e4:	79b9      	ldrb	r1, [r7, #6]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4798      	blx	r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20004568 	.word	0x20004568

080080fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3301      	adds	r3, #1
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800810c:	89fb      	ldrh	r3, [r7, #14]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	b21a      	sxth	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b21b      	sxth	r3, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	b21b      	sxth	r3, r3
 800811c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800811e:	89fb      	ldrh	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3303      	adds	r3, #3
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	3202      	adds	r2, #2
 8008144:	7812      	ldrb	r2, [r2, #0]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	3201      	adds	r2, #1
 8008152:	7812      	ldrb	r2, [r2, #0]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
	return rv;
 8008164:	68fb      	ldr	r3, [r7, #12]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	887a      	ldrh	r2, [r7, #2]
 8008186:	b2d2      	uxtb	r2, r2
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	887b      	ldrh	r3, [r7, #2]
 800818c:	0a1b      	lsrs	r3, r3, #8
 800818e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	887a      	ldrh	r2, [r7, #2]
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	701a      	strb	r2, [r3, #0]
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	0a1b      	lsrs	r3, r3, #8
 80081c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	0a1b      	lsrs	r3, r3, #8
 80081e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	1c53      	adds	r3, r2, #1
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	1c59      	adds	r1, r3, #1
 8008224:	6179      	str	r1, [r7, #20]
 8008226:	7812      	ldrb	r2, [r2, #0]
 8008228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3b01      	subs	r3, #1
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f1      	bne.n	800821a <mem_cpy+0x1a>
	}
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008242:	b480      	push	{r7}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	617a      	str	r2, [r7, #20]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3b01      	subs	r3, #1
 8008262:	607b      	str	r3, [r7, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f3      	bne.n	8008252 <mem_set+0x10>
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	61fa      	str	r2, [r7, #28]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	4619      	mov	r1, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	61ba      	str	r2, [r7, #24]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	1acb      	subs	r3, r1, r3
 80082a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	607b      	str	r3, [r7, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <mem_cmp+0x40>
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0eb      	beq.n	8008290 <mem_cmp+0x18>

	return r;
 80082b8:	697b      	ldr	r3, [r7, #20]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3724      	adds	r7, #36	; 0x24
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80082d0:	e002      	b.n	80082d8 <chk_chr+0x12>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3301      	adds	r3, #1
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <chk_chr+0x26>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d1f2      	bne.n	80082d2 <chk_chr+0xc>
	return *str;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	781b      	ldrb	r3, [r3, #0]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	e029      	b.n	8008364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008310:	4a27      	ldr	r2, [pc, #156]	; (80083b0 <chk_lock+0xb4>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	4413      	add	r3, r2
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d01d      	beq.n	800835a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800831e:	4a24      	ldr	r2, [pc, #144]	; (80083b0 <chk_lock+0xb4>)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	4413      	add	r3, r2
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d116      	bne.n	800835e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008330:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <chk_lock+0xb4>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008340:	429a      	cmp	r2, r3
 8008342:	d10c      	bne.n	800835e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008344:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <chk_lock+0xb4>)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	4413      	add	r3, r2
 800834c:	3308      	adds	r3, #8
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008354:	429a      	cmp	r2, r3
 8008356:	d102      	bne.n	800835e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008358:	e007      	b.n	800836a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800835a:	2301      	movs	r3, #1
 800835c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3301      	adds	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d9d2      	bls.n	8008310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d109      	bne.n	8008384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <chk_lock+0x80>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d101      	bne.n	8008380 <chk_lock+0x84>
 800837c:	2300      	movs	r3, #0
 800837e:	e010      	b.n	80083a2 <chk_lock+0xa6>
 8008380:	2312      	movs	r3, #18
 8008382:	e00e      	b.n	80083a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d108      	bne.n	800839c <chk_lock+0xa0>
 800838a:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <chk_lock+0xb4>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	4413      	add	r3, r2
 8008392:	330c      	adds	r3, #12
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839a:	d101      	bne.n	80083a0 <chk_lock+0xa4>
 800839c:	2310      	movs	r3, #16
 800839e:	e000      	b.n	80083a2 <chk_lock+0xa6>
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20004548 	.word	0x20004548

080083b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083ba:	2300      	movs	r3, #0
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	e002      	b.n	80083c6 <enq_lock+0x12>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3301      	adds	r3, #1
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d806      	bhi.n	80083da <enq_lock+0x26>
 80083cc:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <enq_lock+0x40>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	4413      	add	r3, r2
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f2      	bne.n	80083c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	bf14      	ite	ne
 80083e0:	2301      	movne	r3, #1
 80083e2:	2300      	moveq	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20004548 	.word	0x20004548

080083f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e01f      	b.n	8008448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008408:	4a41      	ldr	r2, [pc, #260]	; (8008510 <inc_lock+0x118>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	4413      	add	r3, r2
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d113      	bne.n	8008442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800841a:	4a3d      	ldr	r2, [pc, #244]	; (8008510 <inc_lock+0x118>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	4413      	add	r3, r2
 8008422:	3304      	adds	r3, #4
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800842a:	429a      	cmp	r2, r3
 800842c:	d109      	bne.n	8008442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800842e:	4a38      	ldr	r2, [pc, #224]	; (8008510 <inc_lock+0x118>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	4413      	add	r3, r2
 8008436:	3308      	adds	r3, #8
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800843e:	429a      	cmp	r2, r3
 8008440:	d006      	beq.n	8008450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d9dc      	bls.n	8008408 <inc_lock+0x10>
 800844e:	e000      	b.n	8008452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d132      	bne.n	80084be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	e002      	b.n	8008464 <inc_lock+0x6c>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d806      	bhi.n	8008478 <inc_lock+0x80>
 800846a:	4a29      	ldr	r2, [pc, #164]	; (8008510 <inc_lock+0x118>)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	4413      	add	r3, r2
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f2      	bne.n	800845e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d101      	bne.n	8008482 <inc_lock+0x8a>
 800847e:	2300      	movs	r3, #0
 8008480:	e040      	b.n	8008504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4922      	ldr	r1, [pc, #136]	; (8008510 <inc_lock+0x118>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	440b      	add	r3, r1
 800848e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	491e      	ldr	r1, [pc, #120]	; (8008510 <inc_lock+0x118>)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	440b      	add	r3, r1
 800849c:	3304      	adds	r3, #4
 800849e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	695a      	ldr	r2, [r3, #20]
 80084a4:	491a      	ldr	r1, [pc, #104]	; (8008510 <inc_lock+0x118>)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	440b      	add	r3, r1
 80084ac:	3308      	adds	r3, #8
 80084ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80084b0:	4a17      	ldr	r2, [pc, #92]	; (8008510 <inc_lock+0x118>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	4413      	add	r3, r2
 80084b8:	330c      	adds	r3, #12
 80084ba:	2200      	movs	r2, #0
 80084bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <inc_lock+0xe0>
 80084c4:	4a12      	ldr	r2, [pc, #72]	; (8008510 <inc_lock+0x118>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	4413      	add	r3, r2
 80084cc:	330c      	adds	r3, #12
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <inc_lock+0xe0>
 80084d4:	2300      	movs	r3, #0
 80084d6:	e015      	b.n	8008504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d108      	bne.n	80084f0 <inc_lock+0xf8>
 80084de:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <inc_lock+0x118>)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	4413      	add	r3, r2
 80084e6:	330c      	adds	r3, #12
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	e001      	b.n	80084f4 <inc_lock+0xfc>
 80084f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084f4:	4906      	ldr	r1, [pc, #24]	; (8008510 <inc_lock+0x118>)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	440b      	add	r3, r1
 80084fc:	330c      	adds	r3, #12
 80084fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	20004548 	.word	0x20004548

08008514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3b01      	subs	r3, #1
 8008520:	607b      	str	r3, [r7, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d825      	bhi.n	8008574 <dec_lock+0x60>
		n = Files[i].ctr;
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <dec_lock+0x74>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	4413      	add	r3, r2
 8008530:	330c      	adds	r3, #12
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008536:	89fb      	ldrh	r3, [r7, #14]
 8008538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853c:	d101      	bne.n	8008542 <dec_lock+0x2e>
 800853e:	2300      	movs	r3, #0
 8008540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008542:	89fb      	ldrh	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <dec_lock+0x3a>
 8008548:	89fb      	ldrh	r3, [r7, #14]
 800854a:	3b01      	subs	r3, #1
 800854c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800854e:	4a0e      	ldr	r2, [pc, #56]	; (8008588 <dec_lock+0x74>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	4413      	add	r3, r2
 8008556:	330c      	adds	r3, #12
 8008558:	89fa      	ldrh	r2, [r7, #14]
 800855a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800855c:	89fb      	ldrh	r3, [r7, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d105      	bne.n	800856e <dec_lock+0x5a>
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <dec_lock+0x74>)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	4413      	add	r3, r2
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	737b      	strb	r3, [r7, #13]
 8008572:	e001      	b.n	8008578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008574:	2302      	movs	r3, #2
 8008576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008578:	7b7b      	ldrb	r3, [r7, #13]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20004548 	.word	0x20004548

0800858c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e010      	b.n	80085bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800859a:	4a0d      	ldr	r2, [pc, #52]	; (80085d0 <clear_lock+0x44>)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	4413      	add	r3, r2
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d105      	bne.n	80085b6 <clear_lock+0x2a>
 80085aa:	4a09      	ldr	r2, [pc, #36]	; (80085d0 <clear_lock+0x44>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	4413      	add	r3, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d9eb      	bls.n	800859a <clear_lock+0xe>
	}
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20004548 	.word	0x20004548

080085d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d034      	beq.n	8008652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	7858      	ldrb	r0, [r3, #1]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80085f8:	2301      	movs	r3, #1
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	f7ff fd40 	bl	8008080 <disk_write>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008606:	2301      	movs	r3, #1
 8008608:	73fb      	strb	r3, [r7, #15]
 800860a:	e022      	b.n	8008652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	429a      	cmp	r2, r3
 8008620:	d217      	bcs.n	8008652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	789b      	ldrb	r3, [r3, #2]
 8008626:	613b      	str	r3, [r7, #16]
 8008628:	e010      	b.n	800864c <sync_window+0x78>
					wsect += fs->fsize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7858      	ldrb	r0, [r3, #1]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800863e:	2301      	movs	r3, #1
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	f7ff fd1d 	bl	8008080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3b01      	subs	r3, #1
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d8eb      	bhi.n	800862a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d01b      	beq.n	80086ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff ffad 	bl	80085d4 <sync_window>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d113      	bne.n	80086ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7858      	ldrb	r0, [r3, #1]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800868e:	2301      	movs	r3, #1
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	f7ff fcd5 	bl	8008040 <disk_read>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800869c:	f04f 33ff 	mov.w	r3, #4294967295
 80086a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff87 	bl	80085d4 <sync_window>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d159      	bne.n	8008784 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d149      	bne.n	800876c <sync_fs+0xb4>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	791b      	ldrb	r3, [r3, #4]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d145      	bne.n	800876c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	899b      	ldrh	r3, [r3, #12]
 80086ea:	461a      	mov	r2, r3
 80086ec:	2100      	movs	r1, #0
 80086ee:	f7ff fda8 	bl	8008242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3334      	adds	r3, #52	; 0x34
 80086f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff fd37 	bl	8008172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3334      	adds	r3, #52	; 0x34
 8008708:	4921      	ldr	r1, [pc, #132]	; (8008790 <sync_fs+0xd8>)
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fd4c 	bl	80081a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3334      	adds	r3, #52	; 0x34
 8008714:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008718:	491e      	ldr	r1, [pc, #120]	; (8008794 <sync_fs+0xdc>)
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fd44 	bl	80081a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3334      	adds	r3, #52	; 0x34
 8008724:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f7ff fd3a 	bl	80081a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3334      	adds	r3, #52	; 0x34
 8008738:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7ff fd30 	bl	80081a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7858      	ldrb	r0, [r3, #1]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008760:	2301      	movs	r3, #1
 8008762:	f7ff fc8d 	bl	8008080 <disk_write>
			fs->fsi_flag = 0;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	2200      	movs	r2, #0
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff fca3 	bl	80080c0 <disk_ioctl>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <sync_fs+0xcc>
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	41615252 	.word	0x41615252
 8008794:	61417272 	.word	0x61417272

08008798 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	3b02      	subs	r3, #2
 80087a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	3b02      	subs	r3, #2
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d301      	bcc.n	80087b8 <clust2sect+0x20>
 80087b4:	2300      	movs	r3, #0
 80087b6:	e008      	b.n	80087ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	895b      	ldrh	r3, [r3, #10]
 80087bc:	461a      	mov	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	fb03 f202 	mul.w	r2, r3, r2
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	4413      	add	r3, r2
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d904      	bls.n	80087f6 <get_fat+0x20>
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d302      	bcc.n	80087fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80087f6:	2301      	movs	r3, #1
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e0bb      	b.n	8008974 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80087fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008800:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b03      	cmp	r3, #3
 8008808:	f000 8083 	beq.w	8008912 <get_fat+0x13c>
 800880c:	2b03      	cmp	r3, #3
 800880e:	f300 80a7 	bgt.w	8008960 <get_fat+0x18a>
 8008812:	2b01      	cmp	r3, #1
 8008814:	d002      	beq.n	800881c <get_fat+0x46>
 8008816:	2b02      	cmp	r3, #2
 8008818:	d056      	beq.n	80088c8 <get_fat+0xf2>
 800881a:	e0a1      	b.n	8008960 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4413      	add	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	899b      	ldrh	r3, [r3, #12]
 8008832:	4619      	mov	r1, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	fbb3 f3f1 	udiv	r3, r3, r1
 800883a:	4413      	add	r3, r2
 800883c:	4619      	mov	r1, r3
 800883e:	6938      	ldr	r0, [r7, #16]
 8008840:	f7ff ff0c 	bl	800865c <move_window>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 808d 	bne.w	8008966 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	60fa      	str	r2, [r7, #12]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	8992      	ldrh	r2, [r2, #12]
 8008856:	fbb3 f1f2 	udiv	r1, r3, r2
 800885a:	fb01 f202 	mul.w	r2, r1, r2
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4413      	add	r3, r2
 8008864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	899b      	ldrh	r3, [r3, #12]
 8008872:	4619      	mov	r1, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	fbb3 f3f1 	udiv	r3, r3, r1
 800887a:	4413      	add	r3, r2
 800887c:	4619      	mov	r1, r3
 800887e:	6938      	ldr	r0, [r7, #16]
 8008880:	f7ff feec 	bl	800865c <move_window>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d16f      	bne.n	800896a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	899b      	ldrh	r3, [r3, #12]
 800888e:	461a      	mov	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	fbb3 f1f2 	udiv	r1, r3, r2
 8008896:	fb01 f202 	mul.w	r2, r1, r2
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	461a      	mov	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <get_fat+0xe8>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	091b      	lsrs	r3, r3, #4
 80088bc:	e002      	b.n	80088c4 <get_fat+0xee>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088c4:	617b      	str	r3, [r7, #20]
			break;
 80088c6:	e055      	b.n	8008974 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	899b      	ldrh	r3, [r3, #12]
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	4619      	mov	r1, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80088dc:	4413      	add	r3, r2
 80088de:	4619      	mov	r1, r3
 80088e0:	6938      	ldr	r0, [r7, #16]
 80088e2:	f7ff febb 	bl	800865c <move_window>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d140      	bne.n	800896e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	8992      	ldrh	r2, [r2, #12]
 80088fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80088fe:	fb00 f202 	mul.w	r2, r0, r2
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	440b      	add	r3, r1
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fbf8 	bl	80080fc <ld_word>
 800890c:	4603      	mov	r3, r0
 800890e:	617b      	str	r3, [r7, #20]
			break;
 8008910:	e030      	b.n	8008974 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	899b      	ldrh	r3, [r3, #12]
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	b29b      	uxth	r3, r3
 800891e:	4619      	mov	r1, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	fbb3 f3f1 	udiv	r3, r3, r1
 8008926:	4413      	add	r3, r2
 8008928:	4619      	mov	r1, r3
 800892a:	6938      	ldr	r0, [r7, #16]
 800892c:	f7ff fe96 	bl	800865c <move_window>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d11d      	bne.n	8008972 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	8992      	ldrh	r2, [r2, #12]
 8008944:	fbb3 f0f2 	udiv	r0, r3, r2
 8008948:	fb00 f202 	mul.w	r2, r0, r2
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	440b      	add	r3, r1
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fbeb 	bl	800812c <ld_dword>
 8008956:	4603      	mov	r3, r0
 8008958:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800895c:	617b      	str	r3, [r7, #20]
			break;
 800895e:	e009      	b.n	8008974 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008960:	2301      	movs	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e006      	b.n	8008974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008966:	bf00      	nop
 8008968:	e004      	b.n	8008974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800896a:	bf00      	nop
 800896c:	e002      	b.n	8008974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800896e:	bf00      	nop
 8008970:	e000      	b.n	8008974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008972:	bf00      	nop
		}
	}

	return val;
 8008974:	697b      	ldr	r3, [r7, #20]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800897e:	b590      	push	{r4, r7, lr}
 8008980:	b089      	sub	sp, #36	; 0x24
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800898a:	2302      	movs	r3, #2
 800898c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b01      	cmp	r3, #1
 8008992:	f240 8102 	bls.w	8008b9a <put_fat+0x21c>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	429a      	cmp	r2, r3
 800899e:	f080 80fc 	bcs.w	8008b9a <put_fat+0x21c>
		switch (fs->fs_type) {
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	f000 80b6 	beq.w	8008b18 <put_fat+0x19a>
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	f300 80fd 	bgt.w	8008bac <put_fat+0x22e>
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d003      	beq.n	80089be <put_fat+0x40>
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	f000 8083 	beq.w	8008ac2 <put_fat+0x144>
 80089bc:	e0f6      	b.n	8008bac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	4413      	add	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	899b      	ldrh	r3, [r3, #12]
 80089d4:	4619      	mov	r1, r3
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80089dc:	4413      	add	r3, r2
 80089de:	4619      	mov	r1, r3
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff fe3b 	bl	800865c <move_window>
 80089e6:	4603      	mov	r3, r0
 80089e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089ea:	7ffb      	ldrb	r3, [r7, #31]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 80d6 	bne.w	8008b9e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	61ba      	str	r2, [r7, #24]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	8992      	ldrh	r2, [r2, #12]
 8008a02:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a06:	fb00 f202 	mul.w	r2, r0, r2
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00d      	beq.n	8008a36 <put_fat+0xb8>
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b25b      	sxtb	r3, r3
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	b25a      	sxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	011b      	lsls	r3, r3, #4
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	e001      	b.n	8008a3a <put_fat+0xbc>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	899b      	ldrh	r3, [r3, #12]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a54:	4413      	add	r3, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fdff 	bl	800865c <move_window>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a62:	7ffb      	ldrb	r3, [r7, #31]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f040 809c 	bne.w	8008ba2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	899b      	ldrh	r3, [r3, #12]
 8008a74:	461a      	mov	r2, r3
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a7c:	fb00 f202 	mul.w	r2, r0, r2
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	440b      	add	r3, r1
 8008a84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <put_fat+0x11a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	091b      	lsrs	r3, r3, #4
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	e00e      	b.n	8008ab6 <put_fat+0x138>
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	f023 030f 	bic.w	r3, r3, #15
 8008aa2:	b25a      	sxtb	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	b25b      	sxtb	r3, r3
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	70da      	strb	r2, [r3, #3]
			break;
 8008ac0:	e074      	b.n	8008bac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	899b      	ldrh	r3, [r3, #12]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fdbe 	bl	800865c <move_window>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ae4:	7ffb      	ldrb	r3, [r7, #31]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d15d      	bne.n	8008ba6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	8992      	ldrh	r2, [r2, #12]
 8008af8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008afc:	fb00 f202 	mul.w	r2, r0, r2
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	440b      	add	r3, r1
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	b292      	uxth	r2, r2
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff fb31 	bl	8008172 <st_word>
			fs->wflag = 1;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	70da      	strb	r2, [r3, #3]
			break;
 8008b16:	e049      	b.n	8008bac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	899b      	ldrh	r3, [r3, #12]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4619      	mov	r1, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b2c:	4413      	add	r3, r2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fd93 	bl	800865c <move_window>
 8008b36:	4603      	mov	r3, r0
 8008b38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b3a:	7ffb      	ldrb	r3, [r7, #31]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d134      	bne.n	8008baa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	8992      	ldrh	r2, [r2, #12]
 8008b54:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b58:	fb00 f202 	mul.w	r2, r0, r2
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	440b      	add	r3, r1
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fae3 	bl	800812c <ld_dword>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	4323      	orrs	r3, r4
 8008b6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	8992      	ldrh	r2, [r2, #12]
 8008b7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b82:	fb00 f202 	mul.w	r2, r0, r2
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	440b      	add	r3, r1
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fb0b 	bl	80081a8 <st_dword>
			fs->wflag = 1;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	70da      	strb	r2, [r3, #3]
			break;
 8008b98:	e008      	b.n	8008bac <put_fat+0x22e>
		}
	}
 8008b9a:	bf00      	nop
 8008b9c:	e006      	b.n	8008bac <put_fat+0x22e>
			if (res != FR_OK) break;
 8008b9e:	bf00      	nop
 8008ba0:	e004      	b.n	8008bac <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ba2:	bf00      	nop
 8008ba4:	e002      	b.n	8008bac <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ba6:	bf00      	nop
 8008ba8:	e000      	b.n	8008bac <put_fat+0x22e>
			if (res != FR_OK) break;
 8008baa:	bf00      	nop
	return res;
 8008bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3724      	adds	r7, #36	; 0x24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}

08008bb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d904      	bls.n	8008bdc <remove_chain+0x26>
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d301      	bcc.n	8008be0 <remove_chain+0x2a>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e04b      	b.n	8008c78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00c      	beq.n	8008c00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008be6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	69b8      	ldr	r0, [r7, #24]
 8008bee:	f7ff fec6 	bl	800897e <put_fat>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008bf6:	7ffb      	ldrb	r3, [r7, #31]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <remove_chain+0x4a>
 8008bfc:	7ffb      	ldrb	r3, [r7, #31]
 8008bfe:	e03b      	b.n	8008c78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f7ff fde7 	bl	80087d6 <get_fat>
 8008c08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d031      	beq.n	8008c74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d101      	bne.n	8008c1a <remove_chain+0x64>
 8008c16:	2302      	movs	r3, #2
 8008c18:	e02e      	b.n	8008c78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d101      	bne.n	8008c26 <remove_chain+0x70>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e028      	b.n	8008c78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c26:	2200      	movs	r2, #0
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	69b8      	ldr	r0, [r7, #24]
 8008c2c:	f7ff fea7 	bl	800897e <put_fat>
 8008c30:	4603      	mov	r3, r0
 8008c32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c34:	7ffb      	ldrb	r3, [r7, #31]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <remove_chain+0x88>
 8008c3a:	7ffb      	ldrb	r3, [r7, #31]
 8008c3c:	e01c      	b.n	8008c78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	695a      	ldr	r2, [r3, #20]
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	3b02      	subs	r3, #2
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d20b      	bcs.n	8008c64 <remove_chain+0xae>
			fs->free_clst++;
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	791b      	ldrb	r3, [r3, #4]
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d3c6      	bcc.n	8008c00 <remove_chain+0x4a>
 8008c72:	e000      	b.n	8008c76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008c74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3720      	adds	r7, #32
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10d      	bne.n	8008cb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <create_chain+0x2c>
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d31b      	bcc.n	8008ce4 <create_chain+0x64>
 8008cac:	2301      	movs	r3, #1
 8008cae:	61bb      	str	r3, [r7, #24]
 8008cb0:	e018      	b.n	8008ce4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff fd8e 	bl	80087d6 <get_fat>
 8008cba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d801      	bhi.n	8008cc6 <create_chain+0x46>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e070      	b.n	8008da8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d101      	bne.n	8008cd2 <create_chain+0x52>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	e06a      	b.n	8008da8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d201      	bcs.n	8008ce0 <create_chain+0x60>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	e063      	b.n	8008da8 <create_chain+0x128>
		scl = clst;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	3301      	adds	r3, #1
 8008cec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	69fa      	ldr	r2, [r7, #28]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d307      	bcc.n	8008d08 <create_chain+0x88>
				ncl = 2;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d901      	bls.n	8008d08 <create_chain+0x88>
 8008d04:	2300      	movs	r3, #0
 8008d06:	e04f      	b.n	8008da8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d08:	69f9      	ldr	r1, [r7, #28]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff fd63 	bl	80087d6 <get_fat>
 8008d10:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00e      	beq.n	8008d36 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d003      	beq.n	8008d26 <create_chain+0xa6>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d24:	d101      	bne.n	8008d2a <create_chain+0xaa>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	e03e      	b.n	8008da8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d1da      	bne.n	8008ce8 <create_chain+0x68>
 8008d32:	2300      	movs	r3, #0
 8008d34:	e038      	b.n	8008da8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d36:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d38:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3c:	69f9      	ldr	r1, [r7, #28]
 8008d3e:	6938      	ldr	r0, [r7, #16]
 8008d40:	f7ff fe1d 	bl	800897e <put_fat>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <create_chain+0xe2>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6938      	ldr	r0, [r7, #16]
 8008d5a:	f7ff fe10 	bl	800897e <put_fat>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d116      	bne.n	8008d96 <create_chain+0x116>
		fs->last_clst = ncl;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	3b02      	subs	r3, #2
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d804      	bhi.n	8008d86 <create_chain+0x106>
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	1e5a      	subs	r2, r3, #1
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	791b      	ldrb	r3, [r3, #4]
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	711a      	strb	r2, [r3, #4]
 8008d94:	e007      	b.n	8008da6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d102      	bne.n	8008da2 <create_chain+0x122>
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	e000      	b.n	8008da4 <create_chain+0x124>
 8008da2:	2301      	movs	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008da6:	69fb      	ldr	r3, [r7, #28]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3720      	adds	r7, #32
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	899b      	ldrh	r3, [r3, #12]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	8952      	ldrh	r2, [r2, #10]
 8008dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1d1a      	adds	r2, r3, #4
 8008de2:	613a      	str	r2, [r7, #16]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <clmt_clust+0x42>
 8008dee:	2300      	movs	r3, #0
 8008df0:	e010      	b.n	8008e14 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d307      	bcc.n	8008e0a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	617b      	str	r3, [r7, #20]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3304      	adds	r3, #4
 8008e06:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e08:	e7e9      	b.n	8008dde <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008e0a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	4413      	add	r3, r2
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e36:	d204      	bcs.n	8008e42 <dir_sdi+0x22>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e42:	2302      	movs	r3, #2
 8008e44:	e071      	b.n	8008f2a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <dir_sdi+0x46>
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d902      	bls.n	8008e66 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10c      	bne.n	8008e86 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	8912      	ldrh	r2, [r2, #8]
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d301      	bcc.n	8008e7c <dir_sdi+0x5c>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e056      	b.n	8008f2a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	61da      	str	r2, [r3, #28]
 8008e84:	e02d      	b.n	8008ee2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	895b      	ldrh	r3, [r3, #10]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	899b      	ldrh	r3, [r3, #12]
 8008e90:	fb02 f303 	mul.w	r3, r2, r3
 8008e94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e96:	e019      	b.n	8008ecc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6979      	ldr	r1, [r7, #20]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fc9a 	bl	80087d6 <get_fat>
 8008ea2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eaa:	d101      	bne.n	8008eb0 <dir_sdi+0x90>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e03c      	b.n	8008f2a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d904      	bls.n	8008ec0 <dir_sdi+0xa0>
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d301      	bcc.n	8008ec4 <dir_sdi+0xa4>
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e032      	b.n	8008f2a <dir_sdi+0x10a>
			ofs -= csz;
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d2e1      	bcs.n	8008e98 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008ed4:	6979      	ldr	r1, [r7, #20]
 8008ed6:	6938      	ldr	r0, [r7, #16]
 8008ed8:	f7ff fc5e 	bl	8008798 <clust2sect>
 8008edc:	4602      	mov	r2, r0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <dir_sdi+0xd4>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e01a      	b.n	8008f2a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	899b      	ldrh	r3, [r3, #12]
 8008efc:	4619      	mov	r1, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f04:	441a      	add	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	899b      	ldrh	r3, [r3, #12]
 8008f14:	461a      	mov	r2, r3
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f1c:	fb00 f202 	mul.w	r2, r0, r2
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	18ca      	adds	r2, r1, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b086      	sub	sp, #24
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	3320      	adds	r3, #32
 8008f48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <dir_next+0x28>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f58:	d301      	bcc.n	8008f5e <dir_next+0x2c>
 8008f5a:	2304      	movs	r3, #4
 8008f5c:	e0bb      	b.n	80090d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	899b      	ldrh	r3, [r3, #12]
 8008f62:	461a      	mov	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f6a:	fb01 f202 	mul.w	r2, r1, r2
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f040 809d 	bne.w	80090b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	8912      	ldrh	r2, [r2, #8]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	f0c0 808d 	bcc.w	80090b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	61da      	str	r2, [r3, #28]
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	e09a      	b.n	80090d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	899b      	ldrh	r3, [r3, #12]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	8952      	ldrh	r2, [r2, #10]
 8008fb0:	3a01      	subs	r2, #1
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d17b      	bne.n	80090b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f7ff fc08 	bl	80087d6 <get_fat>
 8008fc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d801      	bhi.n	8008fd2 <dir_next+0xa0>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e081      	b.n	80090d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d101      	bne.n	8008fde <dir_next+0xac>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e07b      	b.n	80090d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d359      	bcc.n	800909c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	61da      	str	r2, [r3, #28]
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	e06e      	b.n	80090d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	4619      	mov	r1, r3
 8009000:	4610      	mov	r0, r2
 8009002:	f7ff fe3d 	bl	8008c80 <create_chain>
 8009006:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <dir_next+0xe0>
 800900e:	2307      	movs	r3, #7
 8009010:	e061      	b.n	80090d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <dir_next+0xea>
 8009018:	2302      	movs	r3, #2
 800901a:	e05c      	b.n	80090d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009022:	d101      	bne.n	8009028 <dir_next+0xf6>
 8009024:	2301      	movs	r3, #1
 8009026:	e056      	b.n	80090d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff fad3 	bl	80085d4 <sync_window>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <dir_next+0x106>
 8009034:	2301      	movs	r3, #1
 8009036:	e04e      	b.n	80090d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	899b      	ldrh	r3, [r3, #12]
 8009042:	461a      	mov	r2, r3
 8009044:	2100      	movs	r1, #0
 8009046:	f7ff f8fc 	bl	8008242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff fba1 	bl	8008798 <clust2sect>
 8009056:	4602      	mov	r2, r0
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
 800905c:	e012      	b.n	8009084 <dir_next+0x152>
						fs->wflag = 1;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2201      	movs	r2, #1
 8009062:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff fab5 	bl	80085d4 <sync_window>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <dir_next+0x142>
 8009070:	2301      	movs	r3, #1
 8009072:	e030      	b.n	80090d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	3301      	adds	r3, #1
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	631a      	str	r2, [r3, #48]	; 0x30
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	895b      	ldrh	r3, [r3, #10]
 8009088:	461a      	mov	r2, r3
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	4293      	cmp	r3, r2
 800908e:	d3e6      	bcc.n	800905e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80090a2:	6979      	ldr	r1, [r7, #20]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fb77 	bl	8008798 <clust2sect>
 80090aa:	4602      	mov	r2, r0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	899b      	ldrh	r3, [r3, #12]
 80090c0:	461a      	mov	r2, r3
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80090c8:	fb00 f202 	mul.w	r2, r0, r2
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	18ca      	adds	r2, r1, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80090ee:	2100      	movs	r1, #0
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fe95 	bl	8008e20 <dir_sdi>
 80090f6:	4603      	mov	r3, r0
 80090f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d12b      	bne.n	8009158 <dir_alloc+0x7a>
		n = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	4619      	mov	r1, r3
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff faa6 	bl	800865c <move_window>
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d11d      	bne.n	8009156 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2be5      	cmp	r3, #229	; 0xe5
 8009122:	d004      	beq.n	800912e <dir_alloc+0x50>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3301      	adds	r3, #1
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d102      	bne.n	8009142 <dir_alloc+0x64>
 800913c:	e00c      	b.n	8009158 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009142:	2101      	movs	r1, #1
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff fef4 	bl	8008f32 <dir_next>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0d7      	beq.n	8009104 <dir_alloc+0x26>
 8009154:	e000      	b.n	8009158 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009156:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d101      	bne.n	8009162 <dir_alloc+0x84>
 800915e:	2307      	movs	r3, #7
 8009160:	75fb      	strb	r3, [r7, #23]
	return res;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	331a      	adds	r3, #26
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe ffbe 	bl	80080fc <ld_word>
 8009180:	4603      	mov	r3, r0
 8009182:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d109      	bne.n	80091a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	3314      	adds	r3, #20
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe ffb3 	bl	80080fc <ld_word>
 8009196:	4603      	mov	r3, r0
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80091a0:	68fb      	ldr	r3, [r7, #12]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	331a      	adds	r3, #26
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	b292      	uxth	r2, r2
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe ffd6 	bl	8008172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d109      	bne.n	80091e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f103 0214 	add.w	r2, r3, #20
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0c1b      	lsrs	r3, r3, #16
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fe ffc8 	bl	8008172 <st_word>
	}
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091f8:	2100      	movs	r1, #0
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fe10 	bl	8008e20 <dir_sdi>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <dir_find+0x24>
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	e03e      	b.n	800928c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	4619      	mov	r1, r3
 8009214:	6938      	ldr	r0, [r7, #16]
 8009216:	f7ff fa21 	bl	800865c <move_window>
 800921a:	4603      	mov	r3, r0
 800921c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d12f      	bne.n	8009284 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <dir_find+0x4e>
 8009232:	2304      	movs	r3, #4
 8009234:	75fb      	strb	r3, [r7, #23]
 8009236:	e028      	b.n	800928a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	330b      	adds	r3, #11
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009244:	b2da      	uxtb	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	330b      	adds	r3, #11
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <dir_find+0x86>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a18      	ldr	r0, [r3, #32]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3324      	adds	r3, #36	; 0x24
 8009262:	220b      	movs	r2, #11
 8009264:	4619      	mov	r1, r3
 8009266:	f7ff f807 	bl	8008278 <mem_cmp>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00b      	beq.n	8009288 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fe5d 	bl	8008f32 <dir_next>
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0c5      	beq.n	800920e <dir_find+0x24>
 8009282:	e002      	b.n	800928a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009288:	bf00      	nop

	return res;
 800928a:	7dfb      	ldrb	r3, [r7, #23]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80092a2:	2101      	movs	r1, #1
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff ff1a 	bl	80090de <dir_alloc>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d11c      	bne.n	80092ee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	4619      	mov	r1, r3
 80092ba:	68b8      	ldr	r0, [r7, #8]
 80092bc:	f7ff f9ce 	bl	800865c <move_window>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d111      	bne.n	80092ee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	2220      	movs	r2, #32
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe ffb5 	bl	8008242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a18      	ldr	r0, [r3, #32]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	220b      	movs	r2, #11
 80092e2:	4619      	mov	r1, r3
 80092e4:	f7fe ff8c 	bl	8008200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2201      	movs	r2, #1
 80092ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2200      	movs	r2, #0
 8009306:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d04e      	beq.n	80093ae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009318:	e021      	b.n	800935e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1a      	ldr	r2, [r3, #32]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	1c59      	adds	r1, r3, #1
 8009322:	6179      	str	r1, [r7, #20]
 8009324:	4413      	add	r3, r2
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b20      	cmp	r3, #32
 800932e:	d100      	bne.n	8009332 <get_fileinfo+0x3a>
 8009330:	e015      	b.n	800935e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b05      	cmp	r3, #5
 8009336:	d101      	bne.n	800933c <get_fileinfo+0x44>
 8009338:	23e5      	movs	r3, #229	; 0xe5
 800933a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b09      	cmp	r3, #9
 8009340:	d106      	bne.n	8009350 <get_fileinfo+0x58>
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	613a      	str	r2, [r7, #16]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	4413      	add	r3, r2
 800934c:	222e      	movs	r2, #46	; 0x2e
 800934e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	613a      	str	r2, [r7, #16]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4413      	add	r3, r2
 800935a:	7bfa      	ldrb	r2, [r7, #15]
 800935c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b0a      	cmp	r3, #10
 8009362:	d9da      	bls.n	800931a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	4413      	add	r3, r2
 800936a:	3309      	adds	r3, #9
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	7ada      	ldrb	r2, [r3, #11]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	331c      	adds	r3, #28
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fed3 	bl	800812c <ld_dword>
 8009386:	4602      	mov	r2, r0
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	3316      	adds	r3, #22
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe feca 	bl	800812c <ld_dword>
 8009398:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	b29a      	uxth	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	80da      	strh	r2, [r3, #6]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	0c1b      	lsrs	r3, r3, #16
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	809a      	strh	r2, [r3, #4]
 80093ac:	e000      	b.n	80093b0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80093ae:	bf00      	nop
}
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3324      	adds	r3, #36	; 0x24
 80093cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80093ce:	220b      	movs	r2, #11
 80093d0:	2120      	movs	r1, #32
 80093d2:	68b8      	ldr	r0, [r7, #8]
 80093d4:	f7fe ff35 	bl	8008242 <mem_set>
	si = i = 0; ni = 8;
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	61fb      	str	r3, [r7, #28]
 80093e0:	2308      	movs	r3, #8
 80093e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	61fa      	str	r2, [r7, #28]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093f2:	7efb      	ldrb	r3, [r7, #27]
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	d94e      	bls.n	8009496 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80093f8:	7efb      	ldrb	r3, [r7, #27]
 80093fa:	2b2f      	cmp	r3, #47	; 0x2f
 80093fc:	d006      	beq.n	800940c <create_name+0x54>
 80093fe:	7efb      	ldrb	r3, [r7, #27]
 8009400:	2b5c      	cmp	r3, #92	; 0x5c
 8009402:	d110      	bne.n	8009426 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009404:	e002      	b.n	800940c <create_name+0x54>
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	3301      	adds	r3, #1
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b2f      	cmp	r3, #47	; 0x2f
 8009416:	d0f6      	beq.n	8009406 <create_name+0x4e>
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	4413      	add	r3, r2
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b5c      	cmp	r3, #92	; 0x5c
 8009422:	d0f0      	beq.n	8009406 <create_name+0x4e>
			break;
 8009424:	e038      	b.n	8009498 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009426:	7efb      	ldrb	r3, [r7, #27]
 8009428:	2b2e      	cmp	r3, #46	; 0x2e
 800942a:	d003      	beq.n	8009434 <create_name+0x7c>
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	429a      	cmp	r2, r3
 8009432:	d30c      	bcc.n	800944e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b0b      	cmp	r3, #11
 8009438:	d002      	beq.n	8009440 <create_name+0x88>
 800943a:	7efb      	ldrb	r3, [r7, #27]
 800943c:	2b2e      	cmp	r3, #46	; 0x2e
 800943e:	d001      	beq.n	8009444 <create_name+0x8c>
 8009440:	2306      	movs	r3, #6
 8009442:	e044      	b.n	80094ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009444:	2308      	movs	r3, #8
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	230b      	movs	r3, #11
 800944a:	617b      	str	r3, [r7, #20]
			continue;
 800944c:	e022      	b.n	8009494 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800944e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009452:	2b00      	cmp	r3, #0
 8009454:	da04      	bge.n	8009460 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009456:	7efb      	ldrb	r3, [r7, #27]
 8009458:	3b80      	subs	r3, #128	; 0x80
 800945a:	4a1f      	ldr	r2, [pc, #124]	; (80094d8 <create_name+0x120>)
 800945c:	5cd3      	ldrb	r3, [r2, r3]
 800945e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009460:	7efb      	ldrb	r3, [r7, #27]
 8009462:	4619      	mov	r1, r3
 8009464:	481d      	ldr	r0, [pc, #116]	; (80094dc <create_name+0x124>)
 8009466:	f7fe ff2e 	bl	80082c6 <chk_chr>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <create_name+0xbc>
 8009470:	2306      	movs	r3, #6
 8009472:	e02c      	b.n	80094ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009474:	7efb      	ldrb	r3, [r7, #27]
 8009476:	2b60      	cmp	r3, #96	; 0x60
 8009478:	d905      	bls.n	8009486 <create_name+0xce>
 800947a:	7efb      	ldrb	r3, [r7, #27]
 800947c:	2b7a      	cmp	r3, #122	; 0x7a
 800947e:	d802      	bhi.n	8009486 <create_name+0xce>
 8009480:	7efb      	ldrb	r3, [r7, #27]
 8009482:	3b20      	subs	r3, #32
 8009484:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	613a      	str	r2, [r7, #16]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	4413      	add	r3, r2
 8009490:	7efa      	ldrb	r2, [r7, #27]
 8009492:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009494:	e7a6      	b.n	80093e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009496:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	441a      	add	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <create_name+0xf4>
 80094a8:	2306      	movs	r3, #6
 80094aa:	e010      	b.n	80094ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2be5      	cmp	r3, #229	; 0xe5
 80094b2:	d102      	bne.n	80094ba <create_name+0x102>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2205      	movs	r2, #5
 80094b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80094ba:	7efb      	ldrb	r3, [r7, #27]
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d801      	bhi.n	80094c4 <create_name+0x10c>
 80094c0:	2204      	movs	r2, #4
 80094c2:	e000      	b.n	80094c6 <create_name+0x10e>
 80094c4:	2200      	movs	r2, #0
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	330b      	adds	r3, #11
 80094ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80094cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3720      	adds	r7, #32
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	0800c1bc 	.word	0x0800c1bc
 80094dc:	0800c090 	.word	0x0800c090

080094e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80094f4:	e002      	b.n	80094fc <follow_path+0x1c>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b2f      	cmp	r3, #47	; 0x2f
 8009502:	d0f8      	beq.n	80094f6 <follow_path+0x16>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b5c      	cmp	r3, #92	; 0x5c
 800950a:	d0f4      	beq.n	80094f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2200      	movs	r2, #0
 8009510:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b1f      	cmp	r3, #31
 8009518:	d80a      	bhi.n	8009530 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2280      	movs	r2, #128	; 0x80
 800951e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff fc7b 	bl	8008e20 <dir_sdi>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]
 800952e:	e048      	b.n	80095c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009530:	463b      	mov	r3, r7
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ff3f 	bl	80093b8 <create_name>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d139      	bne.n	80095b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff fe50 	bl	80091ea <dir_find>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009554:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d12c      	bne.n	80095bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d127      	bne.n	80095bc <follow_path+0xdc>
 800956c:	2305      	movs	r3, #5
 800956e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009570:	e024      	b.n	80095bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009572:	7afb      	ldrb	r3, [r7, #11]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d121      	bne.n	80095c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	799b      	ldrb	r3, [r3, #6]
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	d102      	bne.n	800958e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009588:	2305      	movs	r3, #5
 800958a:	75fb      	strb	r3, [r7, #23]
 800958c:	e019      	b.n	80095c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	8992      	ldrh	r2, [r2, #12]
 800959c:	fbb3 f0f2 	udiv	r0, r3, r2
 80095a0:	fb00 f202 	mul.w	r2, r0, r2
 80095a4:	1a9b      	subs	r3, r3, r2
 80095a6:	440b      	add	r3, r1
 80095a8:	4619      	mov	r1, r3
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7ff fdde 	bl	800916c <ld_clust>
 80095b0:	4602      	mov	r2, r0
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80095b6:	e7bb      	b.n	8009530 <follow_path+0x50>
			if (res != FR_OK) break;
 80095b8:	bf00      	nop
 80095ba:	e002      	b.n	80095c2 <follow_path+0xe2>
				break;
 80095bc:	bf00      	nop
 80095be:	e000      	b.n	80095c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80095c0:	bf00      	nop
			}
		}
	}

	return res;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80095d4:	f04f 33ff 	mov.w	r3, #4294967295
 80095d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d031      	beq.n	8009646 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	e002      	b.n	80095f0 <get_ldnumber+0x24>
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	3301      	adds	r3, #1
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d903      	bls.n	8009600 <get_ldnumber+0x34>
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b3a      	cmp	r3, #58	; 0x3a
 80095fe:	d1f4      	bne.n	80095ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b3a      	cmp	r3, #58	; 0x3a
 8009606:	d11c      	bne.n	8009642 <get_ldnumber+0x76>
			tp = *path;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	60fa      	str	r2, [r7, #12]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b09      	cmp	r3, #9
 800961e:	d80e      	bhi.n	800963e <get_ldnumber+0x72>
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	429a      	cmp	r2, r3
 8009626:	d10a      	bne.n	800963e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d107      	bne.n	800963e <get_ldnumber+0x72>
					vol = (int)i;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	3301      	adds	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	e002      	b.n	8009648 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009642:	2300      	movs	r3, #0
 8009644:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009646:	693b      	ldr	r3, [r7, #16]
}
 8009648:	4618      	mov	r0, r3
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	70da      	strb	r2, [r3, #3]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fff4 	bl	800865c <move_window>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <check_fs+0x2a>
 800967a:	2304      	movs	r3, #4
 800967c:	e038      	b.n	80096f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3334      	adds	r3, #52	; 0x34
 8009682:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fd38 	bl	80080fc <ld_word>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009694:	429a      	cmp	r2, r3
 8009696:	d001      	beq.n	800969c <check_fs+0x48>
 8009698:	2303      	movs	r3, #3
 800969a:	e029      	b.n	80096f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096a2:	2be9      	cmp	r3, #233	; 0xe9
 80096a4:	d009      	beq.n	80096ba <check_fs+0x66>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096ac:	2beb      	cmp	r3, #235	; 0xeb
 80096ae:	d11e      	bne.n	80096ee <check_fs+0x9a>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80096b6:	2b90      	cmp	r3, #144	; 0x90
 80096b8:	d119      	bne.n	80096ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3334      	adds	r3, #52	; 0x34
 80096be:	3336      	adds	r3, #54	; 0x36
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fe fd33 	bl	800812c <ld_dword>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096cc:	4a0a      	ldr	r2, [pc, #40]	; (80096f8 <check_fs+0xa4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d101      	bne.n	80096d6 <check_fs+0x82>
 80096d2:	2300      	movs	r3, #0
 80096d4:	e00c      	b.n	80096f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3334      	adds	r3, #52	; 0x34
 80096da:	3352      	adds	r3, #82	; 0x52
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe fd25 	bl	800812c <ld_dword>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4a05      	ldr	r2, [pc, #20]	; (80096fc <check_fs+0xa8>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d101      	bne.n	80096ee <check_fs+0x9a>
 80096ea:	2300      	movs	r3, #0
 80096ec:	e000      	b.n	80096f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80096ee:	2302      	movs	r3, #2
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	00544146 	.word	0x00544146
 80096fc:	33544146 	.word	0x33544146

08009700 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b096      	sub	sp, #88	; 0x58
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	4613      	mov	r3, r2
 800970c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff ff59 	bl	80095cc <get_ldnumber>
 800971a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800971c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	da01      	bge.n	8009726 <find_volume+0x26>
 8009722:	230b      	movs	r3, #11
 8009724:	e262      	b.n	8009bec <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009726:	4a9f      	ldr	r2, [pc, #636]	; (80099a4 <find_volume+0x2a4>)
 8009728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800972e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <find_volume+0x3a>
 8009736:	230c      	movs	r3, #12
 8009738:	e258      	b.n	8009bec <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800973e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01a      	beq.n	8009786 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	785b      	ldrb	r3, [r3, #1]
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe fc33 	bl	8007fc0 <disk_status>
 800975a:	4603      	mov	r3, r0
 800975c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009760:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10c      	bne.n	8009786 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <find_volume+0x82>
 8009772:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800977e:	230a      	movs	r3, #10
 8009780:	e234      	b.n	8009bec <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8009782:	2300      	movs	r3, #0
 8009784:	e232      	b.n	8009bec <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800978c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978e:	b2da      	uxtb	r2, r3
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	4618      	mov	r0, r3
 800979a:	f7fe fc2b 	bl	8007ff4 <disk_initialize>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80097a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80097b0:	2303      	movs	r3, #3
 80097b2:	e21b      	b.n	8009bec <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d007      	beq.n	80097ca <find_volume+0xca>
 80097ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80097c6:	230a      	movs	r3, #10
 80097c8:	e210      	b.n	8009bec <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	7858      	ldrb	r0, [r3, #1]
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	330c      	adds	r3, #12
 80097d2:	461a      	mov	r2, r3
 80097d4:	2102      	movs	r1, #2
 80097d6:	f7fe fc73 	bl	80080c0 <disk_ioctl>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <find_volume+0xe4>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e203      	b.n	8009bec <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	899b      	ldrh	r3, [r3, #12]
 80097e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ec:	d80d      	bhi.n	800980a <find_volume+0x10a>
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	899b      	ldrh	r3, [r3, #12]
 80097f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f6:	d308      	bcc.n	800980a <find_volume+0x10a>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	899b      	ldrh	r3, [r3, #12]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	899b      	ldrh	r3, [r3, #12]
 8009802:	3b01      	subs	r3, #1
 8009804:	4013      	ands	r3, r2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <find_volume+0x10e>
 800980a:	2301      	movs	r3, #1
 800980c:	e1ee      	b.n	8009bec <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009816:	f7ff ff1d 	bl	8009654 <check_fs>
 800981a:	4603      	mov	r3, r0
 800981c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009824:	2b02      	cmp	r3, #2
 8009826:	d149      	bne.n	80098bc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009828:	2300      	movs	r3, #0
 800982a:	643b      	str	r3, [r7, #64]	; 0x40
 800982c:	e01e      	b.n	800986c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800983c:	4413      	add	r3, r2
 800983e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	3304      	adds	r3, #4
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d006      	beq.n	8009858 <find_volume+0x158>
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	3308      	adds	r3, #8
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fc6c 	bl	800812c <ld_dword>
 8009854:	4602      	mov	r2, r0
 8009856:	e000      	b.n	800985a <find_volume+0x15a>
 8009858:	2200      	movs	r2, #0
 800985a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	3358      	adds	r3, #88	; 0x58
 8009860:	443b      	add	r3, r7
 8009862:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009868:	3301      	adds	r3, #1
 800986a:	643b      	str	r3, [r7, #64]	; 0x40
 800986c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800986e:	2b03      	cmp	r3, #3
 8009870:	d9dd      	bls.n	800982e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009872:	2300      	movs	r3, #0
 8009874:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <find_volume+0x182>
 800987c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987e:	3b01      	subs	r3, #1
 8009880:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	3358      	adds	r3, #88	; 0x58
 8009888:	443b      	add	r3, r7
 800988a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800988e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <find_volume+0x1a2>
 8009896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800989a:	f7ff fedb 	bl	8009654 <check_fs>
 800989e:	4603      	mov	r3, r0
 80098a0:	e000      	b.n	80098a4 <find_volume+0x1a4>
 80098a2:	2303      	movs	r3, #3
 80098a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80098a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d905      	bls.n	80098bc <find_volume+0x1bc>
 80098b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b2:	3301      	adds	r3, #1
 80098b4:	643b      	str	r3, [r7, #64]	; 0x40
 80098b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d9e2      	bls.n	8009882 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80098bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d101      	bne.n	80098c8 <find_volume+0x1c8>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e191      	b.n	8009bec <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80098c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d901      	bls.n	80098d4 <find_volume+0x1d4>
 80098d0:	230d      	movs	r3, #13
 80098d2:	e18b      	b.n	8009bec <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	3334      	adds	r3, #52	; 0x34
 80098d8:	330b      	adds	r3, #11
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fc0e 	bl	80080fc <ld_word>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	899b      	ldrh	r3, [r3, #12]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d001      	beq.n	80098f0 <find_volume+0x1f0>
 80098ec:	230d      	movs	r3, #13
 80098ee:	e17d      	b.n	8009bec <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	3334      	adds	r3, #52	; 0x34
 80098f4:	3316      	adds	r3, #22
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fc00 	bl	80080fc <ld_word>
 80098fc:	4603      	mov	r3, r0
 80098fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <find_volume+0x214>
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	3334      	adds	r3, #52	; 0x34
 800990a:	3324      	adds	r3, #36	; 0x24
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fc0d 	bl	800812c <ld_dword>
 8009912:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009918:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	789b      	ldrb	r3, [r3, #2]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d005      	beq.n	8009938 <find_volume+0x238>
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	789b      	ldrb	r3, [r3, #2]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d001      	beq.n	8009938 <find_volume+0x238>
 8009934:	230d      	movs	r3, #13
 8009936:	e159      	b.n	8009bec <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	789b      	ldrb	r3, [r3, #2]
 800993c:	461a      	mov	r2, r3
 800993e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009940:	fb02 f303 	mul.w	r3, r2, r3
 8009944:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800994c:	b29a      	uxth	r2, r3
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	895b      	ldrh	r3, [r3, #10]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <find_volume+0x26c>
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	895b      	ldrh	r3, [r3, #10]
 800995e:	461a      	mov	r2, r3
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	895b      	ldrh	r3, [r3, #10]
 8009964:	3b01      	subs	r3, #1
 8009966:	4013      	ands	r3, r2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <find_volume+0x270>
 800996c:	230d      	movs	r3, #13
 800996e:	e13d      	b.n	8009bec <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	3334      	adds	r3, #52	; 0x34
 8009974:	3311      	adds	r3, #17
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fbc0 	bl	80080fc <ld_word>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	891b      	ldrh	r3, [r3, #8]
 8009988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800998a:	8992      	ldrh	r2, [r2, #12]
 800998c:	0952      	lsrs	r2, r2, #5
 800998e:	b292      	uxth	r2, r2
 8009990:	fbb3 f1f2 	udiv	r1, r3, r2
 8009994:	fb01 f202 	mul.w	r2, r1, r2
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	b29b      	uxth	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <find_volume+0x2a8>
 80099a0:	230d      	movs	r3, #13
 80099a2:	e123      	b.n	8009bec <find_volume+0x4ec>
 80099a4:	20004540 	.word	0x20004540

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	3334      	adds	r3, #52	; 0x34
 80099ac:	3313      	adds	r3, #19
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fba4 	bl	80080fc <ld_word>
 80099b4:	4603      	mov	r3, r0
 80099b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80099b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <find_volume+0x2cc>
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	3334      	adds	r3, #52	; 0x34
 80099c2:	3320      	adds	r3, #32
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe fbb1 	bl	800812c <ld_dword>
 80099ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	3334      	adds	r3, #52	; 0x34
 80099d0:	330e      	adds	r3, #14
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fb92 	bl	80080fc <ld_word>
 80099d8:	4603      	mov	r3, r0
 80099da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80099dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <find_volume+0x2e6>
 80099e2:	230d      	movs	r3, #13
 80099e4:	e102      	b.n	8009bec <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80099e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ea:	4413      	add	r3, r2
 80099ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ee:	8911      	ldrh	r1, [r2, #8]
 80099f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099f2:	8992      	ldrh	r2, [r2, #12]
 80099f4:	0952      	lsrs	r2, r2, #5
 80099f6:	b292      	uxth	r2, r2
 80099f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80099fc:	b292      	uxth	r2, r2
 80099fe:	4413      	add	r3, r2
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d201      	bcs.n	8009a0e <find_volume+0x30e>
 8009a0a:	230d      	movs	r3, #13
 8009a0c:	e0ee      	b.n	8009bec <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a16:	8952      	ldrh	r2, [r2, #10]
 8009a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <find_volume+0x328>
 8009a24:	230d      	movs	r3, #13
 8009a26:	e0e1      	b.n	8009bec <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d802      	bhi.n	8009a3e <find_volume+0x33e>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d802      	bhi.n	8009a4e <find_volume+0x34e>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	1c9a      	adds	r2, r3, #2
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a5a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009a5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a60:	441a      	add	r2, r3
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009a66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	441a      	add	r2, r3
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d11e      	bne.n	8009ab6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	3334      	adds	r3, #52	; 0x34
 8009a7c:	332a      	adds	r3, #42	; 0x2a
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe fb3c 	bl	80080fc <ld_word>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <find_volume+0x38e>
 8009a8a:	230d      	movs	r3, #13
 8009a8c:	e0ae      	b.n	8009bec <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	891b      	ldrh	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <find_volume+0x39a>
 8009a96:	230d      	movs	r3, #13
 8009a98:	e0a8      	b.n	8009bec <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	3334      	adds	r3, #52	; 0x34
 8009a9e:	332c      	adds	r3, #44	; 0x2c
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fb43 	bl	800812c <ld_dword>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ab4:	e01f      	b.n	8009af6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	891b      	ldrh	r3, [r3, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <find_volume+0x3c2>
 8009abe:	230d      	movs	r3, #13
 8009ac0:	e094      	b.n	8009bec <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac8:	441a      	add	r2, r3
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009ace:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d103      	bne.n	8009ade <find_volume+0x3de>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	e00a      	b.n	8009af4 <find_volume+0x3f4>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	085a      	lsrs	r2, r3, #1
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009af4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	69da      	ldr	r2, [r3, #28]
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	899b      	ldrh	r3, [r3, #12]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b02:	440b      	add	r3, r1
 8009b04:	3b01      	subs	r3, #1
 8009b06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b08:	8989      	ldrh	r1, [r1, #12]
 8009b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d201      	bcs.n	8009b16 <find_volume+0x416>
 8009b12:	230d      	movs	r3, #13
 8009b14:	e06a      	b.n	8009bec <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	615a      	str	r2, [r3, #20]
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b20:	695a      	ldr	r2, [r3, #20]
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	2280      	movs	r2, #128	; 0x80
 8009b2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d149      	bne.n	8009bc8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	3334      	adds	r3, #52	; 0x34
 8009b38:	3330      	adds	r3, #48	; 0x30
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fade 	bl	80080fc <ld_word>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d140      	bne.n	8009bc8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b48:	3301      	adds	r3, #1
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b4e:	f7fe fd85 	bl	800865c <move_window>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d137      	bne.n	8009bc8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	3334      	adds	r3, #52	; 0x34
 8009b62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fac8 	bl	80080fc <ld_word>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d127      	bne.n	8009bc8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7a:	3334      	adds	r3, #52	; 0x34
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fe fad5 	bl	800812c <ld_dword>
 8009b82:	4603      	mov	r3, r0
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <find_volume+0x4f4>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d11e      	bne.n	8009bc8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	3334      	adds	r3, #52	; 0x34
 8009b8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe faca 	bl	800812c <ld_dword>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	4a17      	ldr	r2, [pc, #92]	; (8009bf8 <find_volume+0x4f8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d113      	bne.n	8009bc8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	3334      	adds	r3, #52	; 0x34
 8009ba4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fabf 	bl	800812c <ld_dword>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	3334      	adds	r3, #52	; 0x34
 8009bb8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fe fab5 	bl	800812c <ld_dword>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009bce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <find_volume+0x4fc>)
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	4b08      	ldr	r3, [pc, #32]	; (8009bfc <find_volume+0x4fc>)
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <find_volume+0x4fc>)
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009be6:	f7fe fcd1 	bl	800858c <clear_lock>
#endif
	return FR_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3758      	adds	r7, #88	; 0x58
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	41615252 	.word	0x41615252
 8009bf8:	61417272 	.word	0x61417272
 8009bfc:	20004544 	.word	0x20004544

08009c00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009c0a:	2309      	movs	r3, #9
 8009c0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01c      	beq.n	8009c4e <validate+0x4e>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d018      	beq.n	8009c4e <validate+0x4e>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d013      	beq.n	8009c4e <validate+0x4e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	889a      	ldrh	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	88db      	ldrh	r3, [r3, #6]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d10c      	bne.n	8009c4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe f9c0 	bl	8007fc0 <disk_status>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <validate+0x4e>
			res = FR_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <validate+0x5a>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	e000      	b.n	8009c5c <validate+0x5c>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	6013      	str	r3, [r2, #0]
	return res;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009c7e:	f107 0310 	add.w	r3, r7, #16
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fca2 	bl	80095cc <get_ldnumber>
 8009c88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	da01      	bge.n	8009c94 <f_mount+0x28>
 8009c90:	230b      	movs	r3, #11
 8009c92:	e02b      	b.n	8009cec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c94:	4a17      	ldr	r2, [pc, #92]	; (8009cf4 <f_mount+0x88>)
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ca4:	69b8      	ldr	r0, [r7, #24]
 8009ca6:	f7fe fc71 	bl	800858c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	490d      	ldr	r1, [pc, #52]	; (8009cf4 <f_mount+0x88>)
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <f_mount+0x66>
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d001      	beq.n	8009cd6 <f_mount+0x6a>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e00a      	b.n	8009cec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009cd6:	f107 010c 	add.w	r1, r7, #12
 8009cda:	f107 0308 	add.w	r3, r7, #8
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fd0d 	bl	8009700 <find_volume>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3720      	adds	r7, #32
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20004540 	.word	0x20004540

08009cf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b098      	sub	sp, #96	; 0x60
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <f_open+0x18>
 8009d0c:	2309      	movs	r3, #9
 8009d0e:	e1bb      	b.n	800a088 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009d18:	79fa      	ldrb	r2, [r7, #7]
 8009d1a:	f107 0110 	add.w	r1, r7, #16
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff fcec 	bl	8009700 <find_volume>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 819f 	bne.w	800a076 <f_open+0x37e>
		dj.obj.fs = fs;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	f107 0314 	add.w	r3, r7, #20
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7ff fbcb 	bl	80094e0 <follow_path>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d11a      	bne.n	8009d8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d5c:	b25b      	sxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da03      	bge.n	8009d6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009d62:	2306      	movs	r3, #6
 8009d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d68:	e011      	b.n	8009d8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	f023 0301 	bic.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bf14      	ite	ne
 8009d74:	2301      	movne	r3, #1
 8009d76:	2300      	moveq	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f107 0314 	add.w	r3, r7, #20
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe faba 	bl	80082fc <chk_lock>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	f003 031c 	and.w	r3, r3, #28
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d07f      	beq.n	8009e98 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d017      	beq.n	8009dd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009da4:	2b04      	cmp	r3, #4
 8009da6:	d10e      	bne.n	8009dc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009da8:	f7fe fb04 	bl	80083b4 <enq_lock>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d006      	beq.n	8009dc0 <f_open+0xc8>
 8009db2:	f107 0314 	add.w	r3, r7, #20
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fa6c 	bl	8009294 <dir_register>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	e000      	b.n	8009dc2 <f_open+0xca>
 8009dc0:	2312      	movs	r3, #18
 8009dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	f043 0308 	orr.w	r3, r3, #8
 8009dcc:	71fb      	strb	r3, [r7, #7]
 8009dce:	e010      	b.n	8009df2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009dd0:	7ebb      	ldrb	r3, [r7, #26]
 8009dd2:	f003 0311 	and.w	r3, r3, #17
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <f_open+0xea>
					res = FR_DENIED;
 8009dda:	2307      	movs	r3, #7
 8009ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009de0:	e007      	b.n	8009df2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <f_open+0xfa>
 8009dec:	2308      	movs	r3, #8
 8009dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d168      	bne.n	8009ecc <f_open+0x1d4>
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	f003 0308 	and.w	r3, r3, #8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d063      	beq.n	8009ecc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009e04:	f7fd ff70 	bl	8007ce8 <get_fattime>
 8009e08:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0c:	330e      	adds	r3, #14
 8009e0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe f9c9 	bl	80081a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e18:	3316      	adds	r3, #22
 8009e1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe f9c3 	bl	80081a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e24:	330b      	adds	r3, #11
 8009e26:	2220      	movs	r2, #32
 8009e28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff f99b 	bl	800916c <ld_clust>
 8009e36:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff f9b3 	bl	80091aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e46:	331c      	adds	r3, #28
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe f9ac 	bl	80081a8 <st_dword>
					fs->wflag = 1;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2201      	movs	r2, #1
 8009e54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d037      	beq.n	8009ecc <f_open+0x1d4>
						dw = fs->winsect;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e60:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009e62:	f107 0314 	add.w	r3, r7, #20
 8009e66:	2200      	movs	r2, #0
 8009e68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fea3 	bl	8008bb6 <remove_chain>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d126      	bne.n	8009ecc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fbea 	bl	800865c <move_window>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e92:	3a01      	subs	r2, #1
 8009e94:	611a      	str	r2, [r3, #16]
 8009e96:	e019      	b.n	8009ecc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009e98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d115      	bne.n	8009ecc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ea0:	7ebb      	ldrb	r3, [r7, #26]
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009eaa:	2304      	movs	r3, #4
 8009eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009eb0:	e00c      	b.n	8009ecc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <f_open+0x1d4>
 8009ebc:	7ebb      	ldrb	r3, [r7, #26]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <f_open+0x1d4>
						res = FR_DENIED;
 8009ec6:	2307      	movs	r3, #7
 8009ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d128      	bne.n	8009f26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	f003 0308 	and.w	r3, r3, #8
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ef4:	79fb      	ldrb	r3, [r7, #7]
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bf14      	ite	ne
 8009efe:	2301      	movne	r3, #1
 8009f00:	2300      	moveq	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	f107 0314 	add.w	r3, r7, #20
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fa73 	bl	80083f8 <inc_lock>
 8009f12:	4602      	mov	r2, r0
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <f_open+0x22e>
 8009f20:	2302      	movs	r3, #2
 8009f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f040 80a3 	bne.w	800a076 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff f918 	bl	800916c <ld_clust>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f44:	331c      	adds	r3, #28
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe f8f0 	bl	800812c <ld_dword>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	88da      	ldrh	r2, [r3, #6]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	79fa      	ldrb	r2, [r7, #7]
 8009f6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3330      	adds	r3, #48	; 0x30
 8009f82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f86:	2100      	movs	r1, #0
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe f95a 	bl	8008242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d06e      	beq.n	800a076 <f_open+0x37e>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d06a      	beq.n	800a076 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	895b      	ldrh	r3, [r3, #10]
 8009fac:	461a      	mov	r2, r3
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
 8009fb6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8009fc4:	e016      	b.n	8009ff4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fc03 	bl	80087d6 <get_fat>
 8009fd0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d802      	bhi.n	8009fde <f_open+0x2e6>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe4:	d102      	bne.n	8009fec <f_open+0x2f4>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <f_open+0x30c>
 8009ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a000:	429a      	cmp	r2, r3
 800a002:	d8e0      	bhi.n	8009fc6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a008:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d131      	bne.n	800a076 <f_open+0x37e>
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	899b      	ldrh	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a01e:	fb01 f202 	mul.w	r2, r1, r2
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d026      	beq.n	800a076 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe fbb3 	bl	8008798 <clust2sect>
 800a032:	6478      	str	r0, [r7, #68]	; 0x44
 800a034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <f_open+0x34a>
						res = FR_INT_ERR;
 800a03a:	2302      	movs	r3, #2
 800a03c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a040:	e019      	b.n	800a076 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	899b      	ldrh	r3, [r3, #12]
 800a046:	461a      	mov	r2, r3
 800a048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a04a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a050:	441a      	add	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	7858      	ldrb	r0, [r3, #1]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a1a      	ldr	r2, [r3, #32]
 800a064:	2301      	movs	r3, #1
 800a066:	f7fd ffeb 	bl	8008040 <disk_read>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <f_open+0x37e>
 800a070:	2301      	movs	r3, #1
 800a072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <f_open+0x38c>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3760      	adds	r7, #96	; 0x60
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08e      	sub	sp, #56	; 0x38
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f107 0214 	add.w	r2, r7, #20
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff fda5 	bl	8009c00 <validate>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a0bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d107      	bne.n	800a0d4 <f_read+0x44>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	7d5b      	ldrb	r3, [r3, #21]
 800a0c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a0cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <f_read+0x4a>
 800a0d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0d8:	e135      	b.n	800a346 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	7d1b      	ldrb	r3, [r3, #20]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <f_read+0x5a>
 800a0e6:	2307      	movs	r3, #7
 800a0e8:	e12d      	b.n	800a346 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	f240 811e 	bls.w	800a33c <f_read+0x2ac>
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a104:	e11a      	b.n	800a33c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	697a      	ldr	r2, [r7, #20]
 800a10c:	8992      	ldrh	r2, [r2, #12]
 800a10e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a112:	fb01 f202 	mul.w	r2, r1, r2
 800a116:	1a9b      	subs	r3, r3, r2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f040 80d5 	bne.w	800a2c8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	8992      	ldrh	r2, [r2, #12]
 800a126:	fbb3 f3f2 	udiv	r3, r3, r2
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	8952      	ldrh	r2, [r2, #10]
 800a12e:	3a01      	subs	r2, #1
 800a130:	4013      	ands	r3, r2
 800a132:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d12f      	bne.n	800a19a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	633b      	str	r3, [r7, #48]	; 0x30
 800a148:	e013      	b.n	800a172 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	4619      	mov	r1, r3
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7fe fe29 	bl	8008db0 <clmt_clust>
 800a15e:	6338      	str	r0, [r7, #48]	; 0x30
 800a160:	e007      	b.n	800a172 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f7fe fb33 	bl	80087d6 <get_fat>
 800a170:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2b01      	cmp	r3, #1
 800a176:	d804      	bhi.n	800a182 <f_read+0xf2>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2202      	movs	r2, #2
 800a17c:	755a      	strb	r2, [r3, #21]
 800a17e:	2302      	movs	r3, #2
 800a180:	e0e1      	b.n	800a346 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d104      	bne.n	800a194 <f_read+0x104>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	755a      	strb	r2, [r3, #21]
 800a190:	2301      	movs	r3, #1
 800a192:	e0d8      	b.n	800a346 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a198:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f7fe faf8 	bl	8008798 <clust2sect>
 800a1a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <f_read+0x12a>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	755a      	strb	r2, [r3, #21]
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e0c5      	b.n	800a346 <f_read+0x2b6>
			sect += csect;
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	4413      	add	r3, r2
 800a1c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	899b      	ldrh	r3, [r3, #12]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d041      	beq.n	800a25a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	4413      	add	r3, r2
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	8952      	ldrh	r2, [r2, #10]
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d905      	bls.n	800a1f0 <f_read+0x160>
					cc = fs->csize - csect;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	895b      	ldrh	r3, [r3, #10]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	7858      	ldrb	r0, [r3, #1]
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1fa:	f7fd ff21 	bl	8008040 <disk_read>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d004      	beq.n	800a20e <f_read+0x17e>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2201      	movs	r2, #1
 800a208:	755a      	strb	r2, [r3, #21]
 800a20a:	2301      	movs	r3, #1
 800a20c:	e09b      	b.n	800a346 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	7d1b      	ldrb	r3, [r3, #20]
 800a212:	b25b      	sxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	da18      	bge.n	800a24a <f_read+0x1ba>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a1a      	ldr	r2, [r3, #32]
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a222:	429a      	cmp	r2, r3
 800a224:	d911      	bls.n	800a24a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6a1a      	ldr	r2, [r3, #32]
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	8992      	ldrh	r2, [r2, #12]
 800a232:	fb02 f303 	mul.w	r3, r2, r3
 800a236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a238:	18d0      	adds	r0, r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	899b      	ldrh	r3, [r3, #12]
 800a244:	461a      	mov	r2, r3
 800a246:	f7fd ffdb 	bl	8008200 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	899b      	ldrh	r3, [r3, #12]
 800a24e:	461a      	mov	r2, r3
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	fb02 f303 	mul.w	r3, r2, r3
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a258:	e05c      	b.n	800a314 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	429a      	cmp	r2, r3
 800a262:	d02e      	beq.n	800a2c2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	7d1b      	ldrb	r3, [r3, #20]
 800a268:	b25b      	sxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da18      	bge.n	800a2a0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	7858      	ldrb	r0, [r3, #1]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6a1a      	ldr	r2, [r3, #32]
 800a27c:	2301      	movs	r3, #1
 800a27e:	f7fd feff 	bl	8008080 <disk_write>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <f_read+0x202>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	755a      	strb	r2, [r3, #21]
 800a28e:	2301      	movs	r3, #1
 800a290:	e059      	b.n	800a346 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	7d1b      	ldrb	r3, [r3, #20]
 800a296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	7858      	ldrb	r0, [r3, #1]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	f7fd fec7 	bl	8008040 <disk_read>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <f_read+0x232>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	755a      	strb	r2, [r3, #21]
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e041      	b.n	800a346 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	899b      	ldrh	r3, [r3, #12]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	8992      	ldrh	r2, [r2, #12]
 800a2d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2da:	fb01 f202 	mul.w	r2, r1, r2
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	1ac3      	subs	r3, r0, r3
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d901      	bls.n	800a2f0 <f_read+0x260>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	8992      	ldrh	r2, [r2, #12]
 800a2fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800a302:	fb00 f202 	mul.w	r2, r0, r2
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	440b      	add	r3, r1
 800a30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30c:	4619      	mov	r1, r3
 800a30e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a310:	f7fd ff76 	bl	8008200 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	4413      	add	r3, r2
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	699a      	ldr	r2, [r3, #24]
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	441a      	add	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	619a      	str	r2, [r3, #24]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	441a      	add	r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f47f aee1 	bne.w	800a106 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3738      	adds	r7, #56	; 0x38
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b08c      	sub	sp, #48	; 0x30
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f107 0210 	add.w	r2, r7, #16
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fc46 	bl	8009c00 <validate>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a37a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <f_write+0x44>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	7d5b      	ldrb	r3, [r3, #21]
 800a386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a38a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <f_write+0x4a>
 800a392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a396:	e16a      	b.n	800a66e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	7d1b      	ldrb	r3, [r3, #20]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <f_write+0x5a>
 800a3a4:	2307      	movs	r3, #7
 800a3a6:	e162      	b.n	800a66e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	441a      	add	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	f080 814c 	bcs.w	800a652 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	43db      	mvns	r3, r3
 800a3c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a3c2:	e146      	b.n	800a652 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	8992      	ldrh	r2, [r2, #12]
 800a3cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3d0:	fb01 f202 	mul.w	r2, r1, r2
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f040 80f1 	bne.w	800a5be <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	8992      	ldrh	r2, [r2, #12]
 800a3e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	8952      	ldrh	r2, [r2, #10]
 800a3ec:	3a01      	subs	r2, #1
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d143      	bne.n	800a480 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10c      	bne.n	800a41a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d11a      	bne.n	800a442 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2100      	movs	r1, #0
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fc35 	bl	8008c80 <create_chain>
 800a416:	62b8      	str	r0, [r7, #40]	; 0x28
 800a418:	e013      	b.n	800a442 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7fe fcc1 	bl	8008db0 <clmt_clust>
 800a42e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a430:	e007      	b.n	800a442 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	4619      	mov	r1, r3
 800a43a:	4610      	mov	r0, r2
 800a43c:	f7fe fc20 	bl	8008c80 <create_chain>
 800a440:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8109 	beq.w	800a65c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d104      	bne.n	800a45a <f_write+0x10c>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2202      	movs	r2, #2
 800a454:	755a      	strb	r2, [r3, #21]
 800a456:	2302      	movs	r3, #2
 800a458:	e109      	b.n	800a66e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a460:	d104      	bne.n	800a46c <f_write+0x11e>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	755a      	strb	r2, [r3, #21]
 800a468:	2301      	movs	r3, #1
 800a46a:	e100      	b.n	800a66e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a470:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <f_write+0x132>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	7d1b      	ldrb	r3, [r3, #20]
 800a484:	b25b      	sxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	da18      	bge.n	800a4bc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	7858      	ldrb	r0, [r3, #1]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a1a      	ldr	r2, [r3, #32]
 800a498:	2301      	movs	r3, #1
 800a49a:	f7fd fdf1 	bl	8008080 <disk_write>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d004      	beq.n	800a4ae <f_write+0x160>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	755a      	strb	r2, [r3, #21]
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e0df      	b.n	800a66e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	7d1b      	ldrb	r3, [r3, #20]
 800a4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	f7fe f967 	bl	8008798 <clust2sect>
 800a4ca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d104      	bne.n	800a4dc <f_write+0x18e>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	755a      	strb	r2, [r3, #21]
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e0c8      	b.n	800a66e <f_write+0x320>
			sect += csect;
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	899b      	ldrh	r3, [r3, #12]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d043      	beq.n	800a580 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	8952      	ldrh	r2, [r2, #10]
 800a502:	4293      	cmp	r3, r2
 800a504:	d905      	bls.n	800a512 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	895b      	ldrh	r3, [r3, #10]
 800a50a:	461a      	mov	r2, r3
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	7858      	ldrb	r0, [r3, #1]
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	69f9      	ldr	r1, [r7, #28]
 800a51c:	f7fd fdb0 	bl	8008080 <disk_write>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d004      	beq.n	800a530 <f_write+0x1e2>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	755a      	strb	r2, [r3, #21]
 800a52c:	2301      	movs	r3, #1
 800a52e:	e09e      	b.n	800a66e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a1a      	ldr	r2, [r3, #32]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	6a3a      	ldr	r2, [r7, #32]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d918      	bls.n	800a570 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a1a      	ldr	r2, [r3, #32]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	8992      	ldrh	r2, [r2, #12]
 800a550:	fb02 f303 	mul.w	r3, r2, r3
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	18d1      	adds	r1, r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	461a      	mov	r2, r3
 800a55e:	f7fd fe4f 	bl	8008200 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	7d1b      	ldrb	r3, [r3, #20]
 800a566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	899b      	ldrh	r3, [r3, #12]
 800a574:	461a      	mov	r2, r3
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	fb02 f303 	mul.w	r3, r2, r3
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a57e:	e04b      	b.n	800a618 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	429a      	cmp	r2, r3
 800a588:	d016      	beq.n	800a5b8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a592:	429a      	cmp	r2, r3
 800a594:	d210      	bcs.n	800a5b8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	7858      	ldrb	r0, [r3, #1]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	f7fd fd4c 	bl	8008040 <disk_read>
 800a5a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	755a      	strb	r2, [r3, #21]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e05a      	b.n	800a66e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	899b      	ldrh	r3, [r3, #12]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	8992      	ldrh	r2, [r2, #12]
 800a5cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5d0:	fb01 f202 	mul.w	r2, r1, r2
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	1ac3      	subs	r3, r0, r3
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d901      	bls.n	800a5e6 <f_write+0x298>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	8992      	ldrh	r2, [r2, #12]
 800a5f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5f8:	fb00 f202 	mul.w	r2, r0, r2
 800a5fc:	1a9b      	subs	r3, r3, r2
 800a5fe:	440b      	add	r3, r1
 800a600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a602:	69f9      	ldr	r1, [r7, #28]
 800a604:	4618      	mov	r0, r3
 800a606:	f7fd fdfb 	bl	8008200 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	7d1b      	ldrb	r3, [r3, #20]
 800a60e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a612:	b2da      	uxtb	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	4413      	add	r3, r2
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	699a      	ldr	r2, [r3, #24]
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	441a      	add	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	619a      	str	r2, [r3, #24]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	429a      	cmp	r2, r3
 800a636:	bf38      	it	cc
 800a638:	461a      	movcc	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	60da      	str	r2, [r3, #12]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	441a      	add	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f47f aeb5 	bne.w	800a3c4 <f_write+0x76>
 800a65a:	e000      	b.n	800a65e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a65c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	7d1b      	ldrb	r3, [r3, #20]
 800a662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a666:	b2da      	uxtb	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3730      	adds	r7, #48	; 0x30
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b086      	sub	sp, #24
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f107 0208 	add.w	r2, r7, #8
 800a684:	4611      	mov	r1, r2
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff faba 	bl	8009c00 <validate>
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d168      	bne.n	800a768 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	7d1b      	ldrb	r3, [r3, #20]
 800a69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d062      	beq.n	800a768 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	7d1b      	ldrb	r3, [r3, #20]
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	da15      	bge.n	800a6d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	7858      	ldrb	r0, [r3, #1]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f7fd fce0 	bl	8008080 <disk_write>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <f_sync+0x54>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e04f      	b.n	800a76a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	7d1b      	ldrb	r3, [r3, #20]
 800a6ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a6d8:	f7fd fb06 	bl	8007ce8 <get_fattime>
 800a6dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f7fd ffb8 	bl	800865c <move_window>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d138      	bne.n	800a768 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	330b      	adds	r3, #11
 800a700:	781a      	ldrb	r2, [r3, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	330b      	adds	r3, #11
 800a706:	f042 0220 	orr.w	r2, r2, #32
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	461a      	mov	r2, r3
 800a718:	68f9      	ldr	r1, [r7, #12]
 800a71a:	f7fe fd46 	bl	80091aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f103 021c 	add.w	r2, r3, #28
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fd fd3c 	bl	80081a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3316      	adds	r3, #22
 800a734:	6939      	ldr	r1, [r7, #16]
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd fd36 	bl	80081a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3312      	adds	r3, #18
 800a740:	2100      	movs	r1, #0
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd fd15 	bl	8008172 <st_word>
					fs->wflag = 1;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2201      	movs	r2, #1
 800a74c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	4618      	mov	r0, r3
 800a752:	f7fd ffb1 	bl	80086b8 <sync_fs>
 800a756:	4603      	mov	r3, r0
 800a758:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	7d1b      	ldrb	r3, [r3, #20]
 800a75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a762:	b2da      	uxtb	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a768:	7dfb      	ldrb	r3, [r7, #23]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff ff7b 	bl	800a676 <f_sync>
 800a780:	4603      	mov	r3, r0
 800a782:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d118      	bne.n	800a7bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f107 0208 	add.w	r2, r7, #8
 800a790:	4611      	mov	r1, r2
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff fa34 	bl	8009c00 <validate>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10c      	bne.n	800a7bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fd feb4 	bl	8008514 <dec_lock>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b090      	sub	sp, #64	; 0x40
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f107 0208 	add.w	r2, r7, #8
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fa11 	bl	8009c00 <validate>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a7e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d103      	bne.n	800a7f4 <f_lseek+0x2e>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	7d5b      	ldrb	r3, [r3, #21]
 800a7f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a7f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <f_lseek+0x3c>
 800a7fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a800:	e201      	b.n	800ac06 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80d9 	beq.w	800a9be <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d15a      	bne.n	800a8ca <f_lseek+0x104>
			tbl = fp->cltbl;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	627a      	str	r2, [r7, #36]	; 0x24
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	2302      	movs	r3, #2
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	2b00      	cmp	r3, #0
 800a832:	d03a      	beq.n	800a8aa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	613b      	str	r3, [r7, #16]
 800a838:	2300      	movs	r3, #0
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	3302      	adds	r3, #2
 800a840:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	3301      	adds	r3, #1
 800a84a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a850:	4618      	mov	r0, r3
 800a852:	f7fd ffc0 	bl	80087d6 <get_fat>
 800a856:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d804      	bhi.n	800a868 <f_lseek+0xa2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2202      	movs	r2, #2
 800a862:	755a      	strb	r2, [r3, #21]
 800a864:	2302      	movs	r3, #2
 800a866:	e1ce      	b.n	800ac06 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d104      	bne.n	800a87a <f_lseek+0xb4>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	755a      	strb	r2, [r3, #21]
 800a876:	2301      	movs	r3, #1
 800a878:	e1c5      	b.n	800ac06 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3301      	adds	r3, #1
 800a87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a880:	429a      	cmp	r2, r3
 800a882:	d0de      	beq.n	800a842 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d809      	bhi.n	800a8a0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	627a      	str	r2, [r7, #36]	; 0x24
 800a892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	627a      	str	r2, [r7, #36]	; 0x24
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d3c4      	bcc.n	800a834 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d803      	bhi.n	800a8c2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2200      	movs	r2, #0
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	e19f      	b.n	800ac02 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a8c2:	2311      	movs	r3, #17
 800a8c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a8c8:	e19b      	b.n	800ac02 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d902      	bls.n	800a8da <f_lseek+0x114>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 818d 	beq.w	800ac02 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7fe fa5e 	bl	8008db0 <clmt_clust>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f7fd ff48 	bl	8008798 <clust2sect>
 800a908:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <f_lseek+0x154>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	755a      	strb	r2, [r3, #21]
 800a916:	2302      	movs	r3, #2
 800a918:	e175      	b.n	800ac06 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	8992      	ldrh	r2, [r2, #12]
 800a922:	fbb3 f3f2 	udiv	r3, r3, r2
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	8952      	ldrh	r2, [r2, #10]
 800a92a:	3a01      	subs	r2, #1
 800a92c:	4013      	ands	r3, r2
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	4413      	add	r3, r2
 800a932:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	8992      	ldrh	r2, [r2, #12]
 800a93c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a940:	fb01 f202 	mul.w	r2, r1, r2
 800a944:	1a9b      	subs	r3, r3, r2
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 815b 	beq.w	800ac02 <f_lseek+0x43c>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	429a      	cmp	r2, r3
 800a954:	f000 8155 	beq.w	800ac02 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7d1b      	ldrb	r3, [r3, #20]
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da18      	bge.n	800a994 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	7858      	ldrb	r0, [r3, #1]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a1a      	ldr	r2, [r3, #32]
 800a970:	2301      	movs	r3, #1
 800a972:	f7fd fb85 	bl	8008080 <disk_write>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <f_lseek+0x1c0>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	755a      	strb	r2, [r3, #21]
 800a982:	2301      	movs	r3, #1
 800a984:	e13f      	b.n	800ac06 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	7d1b      	ldrb	r3, [r3, #20]
 800a98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	7858      	ldrb	r0, [r3, #1]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a99e:	2301      	movs	r3, #1
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	f7fd fb4d 	bl	8008040 <disk_read>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <f_lseek+0x1f0>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	755a      	strb	r2, [r3, #21]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e127      	b.n	800ac06 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	621a      	str	r2, [r3, #32]
 800a9bc:	e121      	b.n	800ac02 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d908      	bls.n	800a9da <f_lseek+0x214>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7d1b      	ldrb	r3, [r3, #20]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9e8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 80b5 	beq.w	800ab5c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	895b      	ldrh	r3, [r3, #10]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	899b      	ldrh	r3, [r3, #12]
 800a9fc:	fb02 f303 	mul.w	r3, r2, r3
 800aa00:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01b      	beq.n	800aa40 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	1e5a      	subs	r2, r3, #1
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	1e59      	subs	r1, r3, #1
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d30f      	bcc.n	800aa40 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	1e5a      	subs	r2, r3, #1
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	425b      	negs	r3, r3
 800aa28:	401a      	ands	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa3e:	e022      	b.n	800aa86 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d119      	bne.n	800aa80 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe f915 	bl	8008c80 <create_chain>
 800aa56:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d104      	bne.n	800aa68 <f_lseek+0x2a2>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2202      	movs	r2, #2
 800aa62:	755a      	strb	r2, [r3, #21]
 800aa64:	2302      	movs	r3, #2
 800aa66:	e0ce      	b.n	800ac06 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6e:	d104      	bne.n	800aa7a <f_lseek+0x2b4>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	755a      	strb	r2, [r3, #21]
 800aa76:	2301      	movs	r3, #1
 800aa78:	e0c5      	b.n	800ac06 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa7e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa84:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d067      	beq.n	800ab5c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800aa8c:	e03a      	b.n	800ab04 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	603b      	str	r3, [r7, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699a      	ldr	r2, [r3, #24]
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	441a      	add	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	7d1b      	ldrb	r3, [r3, #20]
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00b      	beq.n	800aac6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe f8e4 	bl	8008c80 <create_chain>
 800aab8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d108      	bne.n	800aad2 <f_lseek+0x30c>
							ofs = 0; break;
 800aac0:	2300      	movs	r3, #0
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	e022      	b.n	800ab0c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fd fe83 	bl	80087d6 <get_fat>
 800aad0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d104      	bne.n	800aae4 <f_lseek+0x31e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	755a      	strb	r2, [r3, #21]
 800aae0:	2301      	movs	r3, #1
 800aae2:	e090      	b.n	800ac06 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d904      	bls.n	800aaf4 <f_lseek+0x32e>
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d304      	bcc.n	800aafe <f_lseek+0x338>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	755a      	strb	r2, [r3, #21]
 800aafa:	2302      	movs	r3, #2
 800aafc:	e083      	b.n	800ac06 <f_lseek+0x440>
					fp->clust = clst;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab02:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d8c0      	bhi.n	800aa8e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	441a      	add	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	899b      	ldrh	r3, [r3, #12]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab24:	fb01 f202 	mul.w	r2, r1, r2
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d016      	beq.n	800ab5c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fd fe30 	bl	8008798 <clust2sect>
 800ab38:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ab3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <f_lseek+0x384>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	755a      	strb	r2, [r3, #21]
 800ab46:	2302      	movs	r3, #2
 800ab48:	e05d      	b.n	800ac06 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	899b      	ldrh	r3, [r3, #12]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab58:	4413      	add	r3, r2
 800ab5a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d90a      	bls.n	800ab7e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699a      	ldr	r2, [r3, #24]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	7d1b      	ldrb	r3, [r3, #20]
 800ab74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	8992      	ldrh	r2, [r2, #12]
 800ab86:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab8a:	fb01 f202 	mul.w	r2, r1, r2
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d036      	beq.n	800ac02 <f_lseek+0x43c>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d031      	beq.n	800ac02 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	7d1b      	ldrb	r3, [r3, #20]
 800aba2:	b25b      	sxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	da18      	bge.n	800abda <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	7858      	ldrb	r0, [r3, #1]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	2301      	movs	r3, #1
 800abb8:	f7fd fa62 	bl	8008080 <disk_write>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <f_lseek+0x406>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	755a      	strb	r2, [r3, #21]
 800abc8:	2301      	movs	r3, #1
 800abca:	e01c      	b.n	800ac06 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	7d1b      	ldrb	r3, [r3, #20]
 800abd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	7858      	ldrb	r0, [r3, #1]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abe4:	2301      	movs	r3, #1
 800abe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abe8:	f7fd fa2a 	bl	8008040 <disk_read>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d004      	beq.n	800abfc <f_lseek+0x436>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	755a      	strb	r2, [r3, #21]
 800abf8:	2301      	movs	r3, #1
 800abfa:	e004      	b.n	800ac06 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac00:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ac02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3740      	adds	r7, #64	; 0x40
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b090      	sub	sp, #64	; 0x40
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ac18:	f107 010c 	add.w	r1, r7, #12
 800ac1c:	1d3b      	adds	r3, r7, #4
 800ac1e:	2200      	movs	r2, #0
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fe fd6d 	bl	8009700 <find_volume>
 800ac26:	4603      	mov	r3, r0
 800ac28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ac2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d11f      	bne.n	800ac74 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	f107 030c 	add.w	r3, r7, #12
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fc4f 	bl	80094e0 <follow_path>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ac48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d111      	bne.n	800ac74 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ac50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac54:	b25b      	sxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	da03      	bge.n	800ac62 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ac5a:	2306      	movs	r3, #6
 800ac5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ac60:	e008      	b.n	800ac74 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <f_stat+0x66>
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fb42 	bl	80092f8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ac74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3740      	adds	r7, #64	; 0x40
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac96:	4b1f      	ldr	r3, [pc, #124]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800ac98:	7a5b      	ldrb	r3, [r3, #9]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d131      	bne.n	800ad04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aca0:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800aca2:	7a5b      	ldrb	r3, [r3, #9]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	4b1a      	ldr	r3, [pc, #104]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acaa:	2100      	movs	r1, #0
 800acac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800acae:	4b19      	ldr	r3, [pc, #100]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acb0:	7a5b      	ldrb	r3, [r3, #9]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	4a17      	ldr	r2, [pc, #92]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800acbe:	4b15      	ldr	r3, [pc, #84]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acc0:	7a5b      	ldrb	r3, [r3, #9]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	461a      	mov	r2, r3
 800acc6:	4b13      	ldr	r3, [pc, #76]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acc8:	4413      	add	r3, r2
 800acca:	79fa      	ldrb	r2, [r7, #7]
 800accc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800acce:	4b11      	ldr	r3, [pc, #68]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acd0:	7a5b      	ldrb	r3, [r3, #9]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	b2d1      	uxtb	r1, r2
 800acd8:	4a0e      	ldr	r2, [pc, #56]	; (800ad14 <FATFS_LinkDriverEx+0x94>)
 800acda:	7251      	strb	r1, [r2, #9]
 800acdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800acde:	7dbb      	ldrb	r3, [r7, #22]
 800ace0:	3330      	adds	r3, #48	; 0x30
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	3301      	adds	r3, #1
 800acec:	223a      	movs	r2, #58	; 0x3a
 800acee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	3302      	adds	r3, #2
 800acf4:	222f      	movs	r2, #47	; 0x2f
 800acf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	3303      	adds	r3, #3
 800acfc:	2200      	movs	r2, #0
 800acfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	20004568 	.word	0x20004568

0800ad18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad22:	2200      	movs	r2, #0
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff ffaa 	bl	800ac80 <FATFS_LinkDriverEx>
 800ad2c:	4603      	mov	r3, r0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <atoi>:
 800ad36:	220a      	movs	r2, #10
 800ad38:	2100      	movs	r1, #0
 800ad3a:	f000 b9d5 	b.w	800b0e8 <strtol>
	...

0800ad40 <__errno>:
 800ad40:	4b01      	ldr	r3, [pc, #4]	; (800ad48 <__errno+0x8>)
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000028 	.word	0x20000028

0800ad4c <__libc_init_array>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	4d0d      	ldr	r5, [pc, #52]	; (800ad84 <__libc_init_array+0x38>)
 800ad50:	4c0d      	ldr	r4, [pc, #52]	; (800ad88 <__libc_init_array+0x3c>)
 800ad52:	1b64      	subs	r4, r4, r5
 800ad54:	10a4      	asrs	r4, r4, #2
 800ad56:	2600      	movs	r6, #0
 800ad58:	42a6      	cmp	r6, r4
 800ad5a:	d109      	bne.n	800ad70 <__libc_init_array+0x24>
 800ad5c:	4d0b      	ldr	r5, [pc, #44]	; (800ad8c <__libc_init_array+0x40>)
 800ad5e:	4c0c      	ldr	r4, [pc, #48]	; (800ad90 <__libc_init_array+0x44>)
 800ad60:	f000 fd64 	bl	800b82c <_init>
 800ad64:	1b64      	subs	r4, r4, r5
 800ad66:	10a4      	asrs	r4, r4, #2
 800ad68:	2600      	movs	r6, #0
 800ad6a:	42a6      	cmp	r6, r4
 800ad6c:	d105      	bne.n	800ad7a <__libc_init_array+0x2e>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad74:	4798      	blx	r3
 800ad76:	3601      	adds	r6, #1
 800ad78:	e7ee      	b.n	800ad58 <__libc_init_array+0xc>
 800ad7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7e:	4798      	blx	r3
 800ad80:	3601      	adds	r6, #1
 800ad82:	e7f2      	b.n	800ad6a <__libc_init_array+0x1e>
 800ad84:	0800c378 	.word	0x0800c378
 800ad88:	0800c378 	.word	0x0800c378
 800ad8c:	0800c378 	.word	0x0800c378
 800ad90:	0800c37c 	.word	0x0800c37c

0800ad94 <malloc>:
 800ad94:	4b02      	ldr	r3, [pc, #8]	; (800ada0 <malloc+0xc>)
 800ad96:	4601      	mov	r1, r0
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	f000 b87f 	b.w	800ae9c <_malloc_r>
 800ad9e:	bf00      	nop
 800ada0:	20000028 	.word	0x20000028

0800ada4 <free>:
 800ada4:	4b02      	ldr	r3, [pc, #8]	; (800adb0 <free+0xc>)
 800ada6:	4601      	mov	r1, r0
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	f000 b80b 	b.w	800adc4 <_free_r>
 800adae:	bf00      	nop
 800adb0:	20000028 	.word	0x20000028

0800adb4 <memset>:
 800adb4:	4402      	add	r2, r0
 800adb6:	4603      	mov	r3, r0
 800adb8:	4293      	cmp	r3, r2
 800adba:	d100      	bne.n	800adbe <memset+0xa>
 800adbc:	4770      	bx	lr
 800adbe:	f803 1b01 	strb.w	r1, [r3], #1
 800adc2:	e7f9      	b.n	800adb8 <memset+0x4>

0800adc4 <_free_r>:
 800adc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adc6:	2900      	cmp	r1, #0
 800adc8:	d044      	beq.n	800ae54 <_free_r+0x90>
 800adca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adce:	9001      	str	r0, [sp, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f1a1 0404 	sub.w	r4, r1, #4
 800add6:	bfb8      	it	lt
 800add8:	18e4      	addlt	r4, r4, r3
 800adda:	f000 f9c9 	bl	800b170 <__malloc_lock>
 800adde:	4a1e      	ldr	r2, [pc, #120]	; (800ae58 <_free_r+0x94>)
 800ade0:	9801      	ldr	r0, [sp, #4]
 800ade2:	6813      	ldr	r3, [r2, #0]
 800ade4:	b933      	cbnz	r3, 800adf4 <_free_r+0x30>
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	6014      	str	r4, [r2, #0]
 800adea:	b003      	add	sp, #12
 800adec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adf0:	f000 b9c4 	b.w	800b17c <__malloc_unlock>
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	d908      	bls.n	800ae0a <_free_r+0x46>
 800adf8:	6825      	ldr	r5, [r4, #0]
 800adfa:	1961      	adds	r1, r4, r5
 800adfc:	428b      	cmp	r3, r1
 800adfe:	bf01      	itttt	eq
 800ae00:	6819      	ldreq	r1, [r3, #0]
 800ae02:	685b      	ldreq	r3, [r3, #4]
 800ae04:	1949      	addeq	r1, r1, r5
 800ae06:	6021      	streq	r1, [r4, #0]
 800ae08:	e7ed      	b.n	800ade6 <_free_r+0x22>
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	b10b      	cbz	r3, 800ae14 <_free_r+0x50>
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d9fa      	bls.n	800ae0a <_free_r+0x46>
 800ae14:	6811      	ldr	r1, [r2, #0]
 800ae16:	1855      	adds	r5, r2, r1
 800ae18:	42a5      	cmp	r5, r4
 800ae1a:	d10b      	bne.n	800ae34 <_free_r+0x70>
 800ae1c:	6824      	ldr	r4, [r4, #0]
 800ae1e:	4421      	add	r1, r4
 800ae20:	1854      	adds	r4, r2, r1
 800ae22:	42a3      	cmp	r3, r4
 800ae24:	6011      	str	r1, [r2, #0]
 800ae26:	d1e0      	bne.n	800adea <_free_r+0x26>
 800ae28:	681c      	ldr	r4, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	6053      	str	r3, [r2, #4]
 800ae2e:	4421      	add	r1, r4
 800ae30:	6011      	str	r1, [r2, #0]
 800ae32:	e7da      	b.n	800adea <_free_r+0x26>
 800ae34:	d902      	bls.n	800ae3c <_free_r+0x78>
 800ae36:	230c      	movs	r3, #12
 800ae38:	6003      	str	r3, [r0, #0]
 800ae3a:	e7d6      	b.n	800adea <_free_r+0x26>
 800ae3c:	6825      	ldr	r5, [r4, #0]
 800ae3e:	1961      	adds	r1, r4, r5
 800ae40:	428b      	cmp	r3, r1
 800ae42:	bf04      	itt	eq
 800ae44:	6819      	ldreq	r1, [r3, #0]
 800ae46:	685b      	ldreq	r3, [r3, #4]
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	bf04      	itt	eq
 800ae4c:	1949      	addeq	r1, r1, r5
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	6054      	str	r4, [r2, #4]
 800ae52:	e7ca      	b.n	800adea <_free_r+0x26>
 800ae54:	b003      	add	sp, #12
 800ae56:	bd30      	pop	{r4, r5, pc}
 800ae58:	20004574 	.word	0x20004574

0800ae5c <sbrk_aligned>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4e0e      	ldr	r6, [pc, #56]	; (800ae98 <sbrk_aligned+0x3c>)
 800ae60:	460c      	mov	r4, r1
 800ae62:	6831      	ldr	r1, [r6, #0]
 800ae64:	4605      	mov	r5, r0
 800ae66:	b911      	cbnz	r1, 800ae6e <sbrk_aligned+0x12>
 800ae68:	f000 f88c 	bl	800af84 <_sbrk_r>
 800ae6c:	6030      	str	r0, [r6, #0]
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	f000 f887 	bl	800af84 <_sbrk_r>
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	d00a      	beq.n	800ae90 <sbrk_aligned+0x34>
 800ae7a:	1cc4      	adds	r4, r0, #3
 800ae7c:	f024 0403 	bic.w	r4, r4, #3
 800ae80:	42a0      	cmp	r0, r4
 800ae82:	d007      	beq.n	800ae94 <sbrk_aligned+0x38>
 800ae84:	1a21      	subs	r1, r4, r0
 800ae86:	4628      	mov	r0, r5
 800ae88:	f000 f87c 	bl	800af84 <_sbrk_r>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d101      	bne.n	800ae94 <sbrk_aligned+0x38>
 800ae90:	f04f 34ff 	mov.w	r4, #4294967295
 800ae94:	4620      	mov	r0, r4
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	20004578 	.word	0x20004578

0800ae9c <_malloc_r>:
 800ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea0:	1ccd      	adds	r5, r1, #3
 800aea2:	f025 0503 	bic.w	r5, r5, #3
 800aea6:	3508      	adds	r5, #8
 800aea8:	2d0c      	cmp	r5, #12
 800aeaa:	bf38      	it	cc
 800aeac:	250c      	movcc	r5, #12
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	db01      	blt.n	800aeb8 <_malloc_r+0x1c>
 800aeb4:	42a9      	cmp	r1, r5
 800aeb6:	d905      	bls.n	800aec4 <_malloc_r+0x28>
 800aeb8:	230c      	movs	r3, #12
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	2600      	movs	r6, #0
 800aebe:	4630      	mov	r0, r6
 800aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec4:	4e2e      	ldr	r6, [pc, #184]	; (800af80 <_malloc_r+0xe4>)
 800aec6:	f000 f953 	bl	800b170 <__malloc_lock>
 800aeca:	6833      	ldr	r3, [r6, #0]
 800aecc:	461c      	mov	r4, r3
 800aece:	bb34      	cbnz	r4, 800af1e <_malloc_r+0x82>
 800aed0:	4629      	mov	r1, r5
 800aed2:	4638      	mov	r0, r7
 800aed4:	f7ff ffc2 	bl	800ae5c <sbrk_aligned>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	4604      	mov	r4, r0
 800aedc:	d14d      	bne.n	800af7a <_malloc_r+0xde>
 800aede:	6834      	ldr	r4, [r6, #0]
 800aee0:	4626      	mov	r6, r4
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	d140      	bne.n	800af68 <_malloc_r+0xcc>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	4631      	mov	r1, r6
 800aeea:	4638      	mov	r0, r7
 800aeec:	eb04 0803 	add.w	r8, r4, r3
 800aef0:	f000 f848 	bl	800af84 <_sbrk_r>
 800aef4:	4580      	cmp	r8, r0
 800aef6:	d13a      	bne.n	800af6e <_malloc_r+0xd2>
 800aef8:	6821      	ldr	r1, [r4, #0]
 800aefa:	3503      	adds	r5, #3
 800aefc:	1a6d      	subs	r5, r5, r1
 800aefe:	f025 0503 	bic.w	r5, r5, #3
 800af02:	3508      	adds	r5, #8
 800af04:	2d0c      	cmp	r5, #12
 800af06:	bf38      	it	cc
 800af08:	250c      	movcc	r5, #12
 800af0a:	4629      	mov	r1, r5
 800af0c:	4638      	mov	r0, r7
 800af0e:	f7ff ffa5 	bl	800ae5c <sbrk_aligned>
 800af12:	3001      	adds	r0, #1
 800af14:	d02b      	beq.n	800af6e <_malloc_r+0xd2>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	442b      	add	r3, r5
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	e00e      	b.n	800af3c <_malloc_r+0xa0>
 800af1e:	6822      	ldr	r2, [r4, #0]
 800af20:	1b52      	subs	r2, r2, r5
 800af22:	d41e      	bmi.n	800af62 <_malloc_r+0xc6>
 800af24:	2a0b      	cmp	r2, #11
 800af26:	d916      	bls.n	800af56 <_malloc_r+0xba>
 800af28:	1961      	adds	r1, r4, r5
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	6025      	str	r5, [r4, #0]
 800af2e:	bf18      	it	ne
 800af30:	6059      	strne	r1, [r3, #4]
 800af32:	6863      	ldr	r3, [r4, #4]
 800af34:	bf08      	it	eq
 800af36:	6031      	streq	r1, [r6, #0]
 800af38:	5162      	str	r2, [r4, r5]
 800af3a:	604b      	str	r3, [r1, #4]
 800af3c:	4638      	mov	r0, r7
 800af3e:	f104 060b 	add.w	r6, r4, #11
 800af42:	f000 f91b 	bl	800b17c <__malloc_unlock>
 800af46:	f026 0607 	bic.w	r6, r6, #7
 800af4a:	1d23      	adds	r3, r4, #4
 800af4c:	1af2      	subs	r2, r6, r3
 800af4e:	d0b6      	beq.n	800aebe <_malloc_r+0x22>
 800af50:	1b9b      	subs	r3, r3, r6
 800af52:	50a3      	str	r3, [r4, r2]
 800af54:	e7b3      	b.n	800aebe <_malloc_r+0x22>
 800af56:	6862      	ldr	r2, [r4, #4]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	bf0c      	ite	eq
 800af5c:	6032      	streq	r2, [r6, #0]
 800af5e:	605a      	strne	r2, [r3, #4]
 800af60:	e7ec      	b.n	800af3c <_malloc_r+0xa0>
 800af62:	4623      	mov	r3, r4
 800af64:	6864      	ldr	r4, [r4, #4]
 800af66:	e7b2      	b.n	800aece <_malloc_r+0x32>
 800af68:	4634      	mov	r4, r6
 800af6a:	6876      	ldr	r6, [r6, #4]
 800af6c:	e7b9      	b.n	800aee2 <_malloc_r+0x46>
 800af6e:	230c      	movs	r3, #12
 800af70:	603b      	str	r3, [r7, #0]
 800af72:	4638      	mov	r0, r7
 800af74:	f000 f902 	bl	800b17c <__malloc_unlock>
 800af78:	e7a1      	b.n	800aebe <_malloc_r+0x22>
 800af7a:	6025      	str	r5, [r4, #0]
 800af7c:	e7de      	b.n	800af3c <_malloc_r+0xa0>
 800af7e:	bf00      	nop
 800af80:	20004574 	.word	0x20004574

0800af84 <_sbrk_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	; (800afa0 <_sbrk_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f6 fea6 	bl	8001ce0 <_sbrk>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_sbrk_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_sbrk_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	2000457c 	.word	0x2000457c

0800afa4 <siprintf>:
 800afa4:	b40e      	push	{r1, r2, r3}
 800afa6:	b500      	push	{lr}
 800afa8:	b09c      	sub	sp, #112	; 0x70
 800afaa:	ab1d      	add	r3, sp, #116	; 0x74
 800afac:	9002      	str	r0, [sp, #8]
 800afae:	9006      	str	r0, [sp, #24]
 800afb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afb4:	4809      	ldr	r0, [pc, #36]	; (800afdc <siprintf+0x38>)
 800afb6:	9107      	str	r1, [sp, #28]
 800afb8:	9104      	str	r1, [sp, #16]
 800afba:	4909      	ldr	r1, [pc, #36]	; (800afe0 <siprintf+0x3c>)
 800afbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc0:	9105      	str	r1, [sp, #20]
 800afc2:	6800      	ldr	r0, [r0, #0]
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	a902      	add	r1, sp, #8
 800afc8:	f000 f93a 	bl	800b240 <_svfiprintf_r>
 800afcc:	9b02      	ldr	r3, [sp, #8]
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	b01c      	add	sp, #112	; 0x70
 800afd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd8:	b003      	add	sp, #12
 800afda:	4770      	bx	lr
 800afdc:	20000028 	.word	0x20000028
 800afe0:	ffff0208 	.word	0xffff0208

0800afe4 <_strtol_l.constprop.0>:
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afea:	d001      	beq.n	800aff0 <_strtol_l.constprop.0+0xc>
 800afec:	2b24      	cmp	r3, #36	; 0x24
 800afee:	d906      	bls.n	800affe <_strtol_l.constprop.0+0x1a>
 800aff0:	f7ff fea6 	bl	800ad40 <__errno>
 800aff4:	2316      	movs	r3, #22
 800aff6:	6003      	str	r3, [r0, #0]
 800aff8:	2000      	movs	r0, #0
 800affa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b0e4 <_strtol_l.constprop.0+0x100>
 800b002:	460d      	mov	r5, r1
 800b004:	462e      	mov	r6, r5
 800b006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b00a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b00e:	f017 0708 	ands.w	r7, r7, #8
 800b012:	d1f7      	bne.n	800b004 <_strtol_l.constprop.0+0x20>
 800b014:	2c2d      	cmp	r4, #45	; 0x2d
 800b016:	d132      	bne.n	800b07e <_strtol_l.constprop.0+0x9a>
 800b018:	782c      	ldrb	r4, [r5, #0]
 800b01a:	2701      	movs	r7, #1
 800b01c:	1cb5      	adds	r5, r6, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d05b      	beq.n	800b0da <_strtol_l.constprop.0+0xf6>
 800b022:	2b10      	cmp	r3, #16
 800b024:	d109      	bne.n	800b03a <_strtol_l.constprop.0+0x56>
 800b026:	2c30      	cmp	r4, #48	; 0x30
 800b028:	d107      	bne.n	800b03a <_strtol_l.constprop.0+0x56>
 800b02a:	782c      	ldrb	r4, [r5, #0]
 800b02c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b030:	2c58      	cmp	r4, #88	; 0x58
 800b032:	d14d      	bne.n	800b0d0 <_strtol_l.constprop.0+0xec>
 800b034:	786c      	ldrb	r4, [r5, #1]
 800b036:	2310      	movs	r3, #16
 800b038:	3502      	adds	r5, #2
 800b03a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b03e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b042:	f04f 0c00 	mov.w	ip, #0
 800b046:	fbb8 f9f3 	udiv	r9, r8, r3
 800b04a:	4666      	mov	r6, ip
 800b04c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b050:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b054:	f1be 0f09 	cmp.w	lr, #9
 800b058:	d816      	bhi.n	800b088 <_strtol_l.constprop.0+0xa4>
 800b05a:	4674      	mov	r4, lr
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	dd24      	ble.n	800b0aa <_strtol_l.constprop.0+0xc6>
 800b060:	f1bc 0f00 	cmp.w	ip, #0
 800b064:	db1e      	blt.n	800b0a4 <_strtol_l.constprop.0+0xc0>
 800b066:	45b1      	cmp	r9, r6
 800b068:	d31c      	bcc.n	800b0a4 <_strtol_l.constprop.0+0xc0>
 800b06a:	d101      	bne.n	800b070 <_strtol_l.constprop.0+0x8c>
 800b06c:	45a2      	cmp	sl, r4
 800b06e:	db19      	blt.n	800b0a4 <_strtol_l.constprop.0+0xc0>
 800b070:	fb06 4603 	mla	r6, r6, r3, r4
 800b074:	f04f 0c01 	mov.w	ip, #1
 800b078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b07c:	e7e8      	b.n	800b050 <_strtol_l.constprop.0+0x6c>
 800b07e:	2c2b      	cmp	r4, #43	; 0x2b
 800b080:	bf04      	itt	eq
 800b082:	782c      	ldrbeq	r4, [r5, #0]
 800b084:	1cb5      	addeq	r5, r6, #2
 800b086:	e7ca      	b.n	800b01e <_strtol_l.constprop.0+0x3a>
 800b088:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b08c:	f1be 0f19 	cmp.w	lr, #25
 800b090:	d801      	bhi.n	800b096 <_strtol_l.constprop.0+0xb2>
 800b092:	3c37      	subs	r4, #55	; 0x37
 800b094:	e7e2      	b.n	800b05c <_strtol_l.constprop.0+0x78>
 800b096:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b09a:	f1be 0f19 	cmp.w	lr, #25
 800b09e:	d804      	bhi.n	800b0aa <_strtol_l.constprop.0+0xc6>
 800b0a0:	3c57      	subs	r4, #87	; 0x57
 800b0a2:	e7db      	b.n	800b05c <_strtol_l.constprop.0+0x78>
 800b0a4:	f04f 3cff 	mov.w	ip, #4294967295
 800b0a8:	e7e6      	b.n	800b078 <_strtol_l.constprop.0+0x94>
 800b0aa:	f1bc 0f00 	cmp.w	ip, #0
 800b0ae:	da05      	bge.n	800b0bc <_strtol_l.constprop.0+0xd8>
 800b0b0:	2322      	movs	r3, #34	; 0x22
 800b0b2:	6003      	str	r3, [r0, #0]
 800b0b4:	4646      	mov	r6, r8
 800b0b6:	b942      	cbnz	r2, 800b0ca <_strtol_l.constprop.0+0xe6>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	e79e      	b.n	800affa <_strtol_l.constprop.0+0x16>
 800b0bc:	b107      	cbz	r7, 800b0c0 <_strtol_l.constprop.0+0xdc>
 800b0be:	4276      	negs	r6, r6
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	d0f9      	beq.n	800b0b8 <_strtol_l.constprop.0+0xd4>
 800b0c4:	f1bc 0f00 	cmp.w	ip, #0
 800b0c8:	d000      	beq.n	800b0cc <_strtol_l.constprop.0+0xe8>
 800b0ca:	1e69      	subs	r1, r5, #1
 800b0cc:	6011      	str	r1, [r2, #0]
 800b0ce:	e7f3      	b.n	800b0b8 <_strtol_l.constprop.0+0xd4>
 800b0d0:	2430      	movs	r4, #48	; 0x30
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1b1      	bne.n	800b03a <_strtol_l.constprop.0+0x56>
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	e7af      	b.n	800b03a <_strtol_l.constprop.0+0x56>
 800b0da:	2c30      	cmp	r4, #48	; 0x30
 800b0dc:	d0a5      	beq.n	800b02a <_strtol_l.constprop.0+0x46>
 800b0de:	230a      	movs	r3, #10
 800b0e0:	e7ab      	b.n	800b03a <_strtol_l.constprop.0+0x56>
 800b0e2:	bf00      	nop
 800b0e4:	0800c23d 	.word	0x0800c23d

0800b0e8 <strtol>:
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	4802      	ldr	r0, [pc, #8]	; (800b0f8 <strtol+0x10>)
 800b0f0:	6800      	ldr	r0, [r0, #0]
 800b0f2:	f7ff bf77 	b.w	800afe4 <_strtol_l.constprop.0>
 800b0f6:	bf00      	nop
 800b0f8:	20000028 	.word	0x20000028

0800b0fc <_vsniprintf_r>:
 800b0fc:	b530      	push	{r4, r5, lr}
 800b0fe:	4614      	mov	r4, r2
 800b100:	2c00      	cmp	r4, #0
 800b102:	b09b      	sub	sp, #108	; 0x6c
 800b104:	4605      	mov	r5, r0
 800b106:	461a      	mov	r2, r3
 800b108:	da05      	bge.n	800b116 <_vsniprintf_r+0x1a>
 800b10a:	238b      	movs	r3, #139	; 0x8b
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	b01b      	add	sp, #108	; 0x6c
 800b114:	bd30      	pop	{r4, r5, pc}
 800b116:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b11a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b11e:	bf14      	ite	ne
 800b120:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b124:	4623      	moveq	r3, r4
 800b126:	9302      	str	r3, [sp, #8]
 800b128:	9305      	str	r3, [sp, #20]
 800b12a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b12e:	9100      	str	r1, [sp, #0]
 800b130:	9104      	str	r1, [sp, #16]
 800b132:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b136:	4669      	mov	r1, sp
 800b138:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b13a:	f000 f881 	bl	800b240 <_svfiprintf_r>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	bfbc      	itt	lt
 800b142:	238b      	movlt	r3, #139	; 0x8b
 800b144:	602b      	strlt	r3, [r5, #0]
 800b146:	2c00      	cmp	r4, #0
 800b148:	d0e3      	beq.n	800b112 <_vsniprintf_r+0x16>
 800b14a:	9b00      	ldr	r3, [sp, #0]
 800b14c:	2200      	movs	r2, #0
 800b14e:	701a      	strb	r2, [r3, #0]
 800b150:	e7df      	b.n	800b112 <_vsniprintf_r+0x16>
	...

0800b154 <vsniprintf>:
 800b154:	b507      	push	{r0, r1, r2, lr}
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	4613      	mov	r3, r2
 800b15a:	460a      	mov	r2, r1
 800b15c:	4601      	mov	r1, r0
 800b15e:	4803      	ldr	r0, [pc, #12]	; (800b16c <vsniprintf+0x18>)
 800b160:	6800      	ldr	r0, [r0, #0]
 800b162:	f7ff ffcb 	bl	800b0fc <_vsniprintf_r>
 800b166:	b003      	add	sp, #12
 800b168:	f85d fb04 	ldr.w	pc, [sp], #4
 800b16c:	20000028 	.word	0x20000028

0800b170 <__malloc_lock>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__malloc_lock+0x8>)
 800b172:	f000 baf9 	b.w	800b768 <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	20004580 	.word	0x20004580

0800b17c <__malloc_unlock>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__malloc_unlock+0x8>)
 800b17e:	f000 baf4 	b.w	800b76a <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	20004580 	.word	0x20004580

0800b188 <__ssputs_r>:
 800b188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b18c:	688e      	ldr	r6, [r1, #8]
 800b18e:	429e      	cmp	r6, r3
 800b190:	4682      	mov	sl, r0
 800b192:	460c      	mov	r4, r1
 800b194:	4690      	mov	r8, r2
 800b196:	461f      	mov	r7, r3
 800b198:	d838      	bhi.n	800b20c <__ssputs_r+0x84>
 800b19a:	898a      	ldrh	r2, [r1, #12]
 800b19c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1a0:	d032      	beq.n	800b208 <__ssputs_r+0x80>
 800b1a2:	6825      	ldr	r5, [r4, #0]
 800b1a4:	6909      	ldr	r1, [r1, #16]
 800b1a6:	eba5 0901 	sub.w	r9, r5, r1
 800b1aa:	6965      	ldr	r5, [r4, #20]
 800b1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	444b      	add	r3, r9
 800b1b8:	106d      	asrs	r5, r5, #1
 800b1ba:	429d      	cmp	r5, r3
 800b1bc:	bf38      	it	cc
 800b1be:	461d      	movcc	r5, r3
 800b1c0:	0553      	lsls	r3, r2, #21
 800b1c2:	d531      	bpl.n	800b228 <__ssputs_r+0xa0>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	f7ff fe69 	bl	800ae9c <_malloc_r>
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	b950      	cbnz	r0, 800b1e4 <__ssputs_r+0x5c>
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	f8ca 3000 	str.w	r3, [sl]
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1da:	81a3      	strh	r3, [r4, #12]
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	6921      	ldr	r1, [r4, #16]
 800b1e6:	464a      	mov	r2, r9
 800b1e8:	f000 fac0 	bl	800b76c <memcpy>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f6:	81a3      	strh	r3, [r4, #12]
 800b1f8:	6126      	str	r6, [r4, #16]
 800b1fa:	6165      	str	r5, [r4, #20]
 800b1fc:	444e      	add	r6, r9
 800b1fe:	eba5 0509 	sub.w	r5, r5, r9
 800b202:	6026      	str	r6, [r4, #0]
 800b204:	60a5      	str	r5, [r4, #8]
 800b206:	463e      	mov	r6, r7
 800b208:	42be      	cmp	r6, r7
 800b20a:	d900      	bls.n	800b20e <__ssputs_r+0x86>
 800b20c:	463e      	mov	r6, r7
 800b20e:	6820      	ldr	r0, [r4, #0]
 800b210:	4632      	mov	r2, r6
 800b212:	4641      	mov	r1, r8
 800b214:	f000 fab8 	bl	800b788 <memmove>
 800b218:	68a3      	ldr	r3, [r4, #8]
 800b21a:	1b9b      	subs	r3, r3, r6
 800b21c:	60a3      	str	r3, [r4, #8]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	4433      	add	r3, r6
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	2000      	movs	r0, #0
 800b226:	e7db      	b.n	800b1e0 <__ssputs_r+0x58>
 800b228:	462a      	mov	r2, r5
 800b22a:	f000 fac7 	bl	800b7bc <_realloc_r>
 800b22e:	4606      	mov	r6, r0
 800b230:	2800      	cmp	r0, #0
 800b232:	d1e1      	bne.n	800b1f8 <__ssputs_r+0x70>
 800b234:	6921      	ldr	r1, [r4, #16]
 800b236:	4650      	mov	r0, sl
 800b238:	f7ff fdc4 	bl	800adc4 <_free_r>
 800b23c:	e7c7      	b.n	800b1ce <__ssputs_r+0x46>
	...

0800b240 <_svfiprintf_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	4698      	mov	r8, r3
 800b246:	898b      	ldrh	r3, [r1, #12]
 800b248:	061b      	lsls	r3, r3, #24
 800b24a:	b09d      	sub	sp, #116	; 0x74
 800b24c:	4607      	mov	r7, r0
 800b24e:	460d      	mov	r5, r1
 800b250:	4614      	mov	r4, r2
 800b252:	d50e      	bpl.n	800b272 <_svfiprintf_r+0x32>
 800b254:	690b      	ldr	r3, [r1, #16]
 800b256:	b963      	cbnz	r3, 800b272 <_svfiprintf_r+0x32>
 800b258:	2140      	movs	r1, #64	; 0x40
 800b25a:	f7ff fe1f 	bl	800ae9c <_malloc_r>
 800b25e:	6028      	str	r0, [r5, #0]
 800b260:	6128      	str	r0, [r5, #16]
 800b262:	b920      	cbnz	r0, 800b26e <_svfiprintf_r+0x2e>
 800b264:	230c      	movs	r3, #12
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	e0d1      	b.n	800b412 <_svfiprintf_r+0x1d2>
 800b26e:	2340      	movs	r3, #64	; 0x40
 800b270:	616b      	str	r3, [r5, #20]
 800b272:	2300      	movs	r3, #0
 800b274:	9309      	str	r3, [sp, #36]	; 0x24
 800b276:	2320      	movs	r3, #32
 800b278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b280:	2330      	movs	r3, #48	; 0x30
 800b282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b42c <_svfiprintf_r+0x1ec>
 800b286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b28a:	f04f 0901 	mov.w	r9, #1
 800b28e:	4623      	mov	r3, r4
 800b290:	469a      	mov	sl, r3
 800b292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b296:	b10a      	cbz	r2, 800b29c <_svfiprintf_r+0x5c>
 800b298:	2a25      	cmp	r2, #37	; 0x25
 800b29a:	d1f9      	bne.n	800b290 <_svfiprintf_r+0x50>
 800b29c:	ebba 0b04 	subs.w	fp, sl, r4
 800b2a0:	d00b      	beq.n	800b2ba <_svfiprintf_r+0x7a>
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f7ff ff6d 	bl	800b188 <__ssputs_r>
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f000 80aa 	beq.w	800b408 <_svfiprintf_r+0x1c8>
 800b2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b6:	445a      	add	r2, fp
 800b2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 80a2 	beq.w	800b408 <_svfiprintf_r+0x1c8>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ce:	f10a 0a01 	add.w	sl, sl, #1
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2da:	931a      	str	r3, [sp, #104]	; 0x68
 800b2dc:	4654      	mov	r4, sl
 800b2de:	2205      	movs	r2, #5
 800b2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e4:	4851      	ldr	r0, [pc, #324]	; (800b42c <_svfiprintf_r+0x1ec>)
 800b2e6:	f7f4 ff7b 	bl	80001e0 <memchr>
 800b2ea:	9a04      	ldr	r2, [sp, #16]
 800b2ec:	b9d8      	cbnz	r0, 800b326 <_svfiprintf_r+0xe6>
 800b2ee:	06d0      	lsls	r0, r2, #27
 800b2f0:	bf44      	itt	mi
 800b2f2:	2320      	movmi	r3, #32
 800b2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f8:	0711      	lsls	r1, r2, #28
 800b2fa:	bf44      	itt	mi
 800b2fc:	232b      	movmi	r3, #43	; 0x2b
 800b2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b302:	f89a 3000 	ldrb.w	r3, [sl]
 800b306:	2b2a      	cmp	r3, #42	; 0x2a
 800b308:	d015      	beq.n	800b336 <_svfiprintf_r+0xf6>
 800b30a:	9a07      	ldr	r2, [sp, #28]
 800b30c:	4654      	mov	r4, sl
 800b30e:	2000      	movs	r0, #0
 800b310:	f04f 0c0a 	mov.w	ip, #10
 800b314:	4621      	mov	r1, r4
 800b316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b31a:	3b30      	subs	r3, #48	; 0x30
 800b31c:	2b09      	cmp	r3, #9
 800b31e:	d94e      	bls.n	800b3be <_svfiprintf_r+0x17e>
 800b320:	b1b0      	cbz	r0, 800b350 <_svfiprintf_r+0x110>
 800b322:	9207      	str	r2, [sp, #28]
 800b324:	e014      	b.n	800b350 <_svfiprintf_r+0x110>
 800b326:	eba0 0308 	sub.w	r3, r0, r8
 800b32a:	fa09 f303 	lsl.w	r3, r9, r3
 800b32e:	4313      	orrs	r3, r2
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	46a2      	mov	sl, r4
 800b334:	e7d2      	b.n	800b2dc <_svfiprintf_r+0x9c>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	1d19      	adds	r1, r3, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	9103      	str	r1, [sp, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfbb      	ittet	lt
 800b342:	425b      	neglt	r3, r3
 800b344:	f042 0202 	orrlt.w	r2, r2, #2
 800b348:	9307      	strge	r3, [sp, #28]
 800b34a:	9307      	strlt	r3, [sp, #28]
 800b34c:	bfb8      	it	lt
 800b34e:	9204      	strlt	r2, [sp, #16]
 800b350:	7823      	ldrb	r3, [r4, #0]
 800b352:	2b2e      	cmp	r3, #46	; 0x2e
 800b354:	d10c      	bne.n	800b370 <_svfiprintf_r+0x130>
 800b356:	7863      	ldrb	r3, [r4, #1]
 800b358:	2b2a      	cmp	r3, #42	; 0x2a
 800b35a:	d135      	bne.n	800b3c8 <_svfiprintf_r+0x188>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	1d1a      	adds	r2, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	9203      	str	r2, [sp, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfb8      	it	lt
 800b368:	f04f 33ff 	movlt.w	r3, #4294967295
 800b36c:	3402      	adds	r4, #2
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b43c <_svfiprintf_r+0x1fc>
 800b374:	7821      	ldrb	r1, [r4, #0]
 800b376:	2203      	movs	r2, #3
 800b378:	4650      	mov	r0, sl
 800b37a:	f7f4 ff31 	bl	80001e0 <memchr>
 800b37e:	b140      	cbz	r0, 800b392 <_svfiprintf_r+0x152>
 800b380:	2340      	movs	r3, #64	; 0x40
 800b382:	eba0 000a 	sub.w	r0, r0, sl
 800b386:	fa03 f000 	lsl.w	r0, r3, r0
 800b38a:	9b04      	ldr	r3, [sp, #16]
 800b38c:	4303      	orrs	r3, r0
 800b38e:	3401      	adds	r4, #1
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b396:	4826      	ldr	r0, [pc, #152]	; (800b430 <_svfiprintf_r+0x1f0>)
 800b398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b39c:	2206      	movs	r2, #6
 800b39e:	f7f4 ff1f 	bl	80001e0 <memchr>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d038      	beq.n	800b418 <_svfiprintf_r+0x1d8>
 800b3a6:	4b23      	ldr	r3, [pc, #140]	; (800b434 <_svfiprintf_r+0x1f4>)
 800b3a8:	bb1b      	cbnz	r3, 800b3f2 <_svfiprintf_r+0x1b2>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	3307      	adds	r3, #7
 800b3ae:	f023 0307 	bic.w	r3, r3, #7
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b8:	4433      	add	r3, r6
 800b3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b3bc:	e767      	b.n	800b28e <_svfiprintf_r+0x4e>
 800b3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	e7a5      	b.n	800b314 <_svfiprintf_r+0xd4>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	3401      	adds	r4, #1
 800b3cc:	9305      	str	r3, [sp, #20]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	f04f 0c0a 	mov.w	ip, #10
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3da:	3a30      	subs	r2, #48	; 0x30
 800b3dc:	2a09      	cmp	r2, #9
 800b3de:	d903      	bls.n	800b3e8 <_svfiprintf_r+0x1a8>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0c5      	beq.n	800b370 <_svfiprintf_r+0x130>
 800b3e4:	9105      	str	r1, [sp, #20]
 800b3e6:	e7c3      	b.n	800b370 <_svfiprintf_r+0x130>
 800b3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e7f0      	b.n	800b3d4 <_svfiprintf_r+0x194>
 800b3f2:	ab03      	add	r3, sp, #12
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	462a      	mov	r2, r5
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <_svfiprintf_r+0x1f8>)
 800b3fa:	a904      	add	r1, sp, #16
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f3af 8000 	nop.w
 800b402:	1c42      	adds	r2, r0, #1
 800b404:	4606      	mov	r6, r0
 800b406:	d1d6      	bne.n	800b3b6 <_svfiprintf_r+0x176>
 800b408:	89ab      	ldrh	r3, [r5, #12]
 800b40a:	065b      	lsls	r3, r3, #25
 800b40c:	f53f af2c 	bmi.w	800b268 <_svfiprintf_r+0x28>
 800b410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b412:	b01d      	add	sp, #116	; 0x74
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	ab03      	add	r3, sp, #12
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	462a      	mov	r2, r5
 800b41e:	4b06      	ldr	r3, [pc, #24]	; (800b438 <_svfiprintf_r+0x1f8>)
 800b420:	a904      	add	r1, sp, #16
 800b422:	4638      	mov	r0, r7
 800b424:	f000 f87a 	bl	800b51c <_printf_i>
 800b428:	e7eb      	b.n	800b402 <_svfiprintf_r+0x1c2>
 800b42a:	bf00      	nop
 800b42c:	0800c33d 	.word	0x0800c33d
 800b430:	0800c347 	.word	0x0800c347
 800b434:	00000000 	.word	0x00000000
 800b438:	0800b189 	.word	0x0800b189
 800b43c:	0800c343 	.word	0x0800c343

0800b440 <_printf_common>:
 800b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	4616      	mov	r6, r2
 800b446:	4699      	mov	r9, r3
 800b448:	688a      	ldr	r2, [r1, #8]
 800b44a:	690b      	ldr	r3, [r1, #16]
 800b44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b450:	4293      	cmp	r3, r2
 800b452:	bfb8      	it	lt
 800b454:	4613      	movlt	r3, r2
 800b456:	6033      	str	r3, [r6, #0]
 800b458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b45c:	4607      	mov	r7, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	b10a      	cbz	r2, 800b466 <_printf_common+0x26>
 800b462:	3301      	adds	r3, #1
 800b464:	6033      	str	r3, [r6, #0]
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	0699      	lsls	r1, r3, #26
 800b46a:	bf42      	ittt	mi
 800b46c:	6833      	ldrmi	r3, [r6, #0]
 800b46e:	3302      	addmi	r3, #2
 800b470:	6033      	strmi	r3, [r6, #0]
 800b472:	6825      	ldr	r5, [r4, #0]
 800b474:	f015 0506 	ands.w	r5, r5, #6
 800b478:	d106      	bne.n	800b488 <_printf_common+0x48>
 800b47a:	f104 0a19 	add.w	sl, r4, #25
 800b47e:	68e3      	ldr	r3, [r4, #12]
 800b480:	6832      	ldr	r2, [r6, #0]
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	42ab      	cmp	r3, r5
 800b486:	dc26      	bgt.n	800b4d6 <_printf_common+0x96>
 800b488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b48c:	1e13      	subs	r3, r2, #0
 800b48e:	6822      	ldr	r2, [r4, #0]
 800b490:	bf18      	it	ne
 800b492:	2301      	movne	r3, #1
 800b494:	0692      	lsls	r2, r2, #26
 800b496:	d42b      	bmi.n	800b4f0 <_printf_common+0xb0>
 800b498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b49c:	4649      	mov	r1, r9
 800b49e:	4638      	mov	r0, r7
 800b4a0:	47c0      	blx	r8
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d01e      	beq.n	800b4e4 <_printf_common+0xa4>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	68e5      	ldr	r5, [r4, #12]
 800b4aa:	6832      	ldr	r2, [r6, #0]
 800b4ac:	f003 0306 	and.w	r3, r3, #6
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	bf08      	it	eq
 800b4b4:	1aad      	subeq	r5, r5, r2
 800b4b6:	68a3      	ldr	r3, [r4, #8]
 800b4b8:	6922      	ldr	r2, [r4, #16]
 800b4ba:	bf0c      	ite	eq
 800b4bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c0:	2500      	movne	r5, #0
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	bfc4      	itt	gt
 800b4c6:	1a9b      	subgt	r3, r3, r2
 800b4c8:	18ed      	addgt	r5, r5, r3
 800b4ca:	2600      	movs	r6, #0
 800b4cc:	341a      	adds	r4, #26
 800b4ce:	42b5      	cmp	r5, r6
 800b4d0:	d11a      	bne.n	800b508 <_printf_common+0xc8>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e008      	b.n	800b4e8 <_printf_common+0xa8>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4652      	mov	r2, sl
 800b4da:	4649      	mov	r1, r9
 800b4dc:	4638      	mov	r0, r7
 800b4de:	47c0      	blx	r8
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d103      	bne.n	800b4ec <_printf_common+0xac>
 800b4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	e7c6      	b.n	800b47e <_printf_common+0x3e>
 800b4f0:	18e1      	adds	r1, r4, r3
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	2030      	movs	r0, #48	; 0x30
 800b4f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4fa:	4422      	add	r2, r4
 800b4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b504:	3302      	adds	r3, #2
 800b506:	e7c7      	b.n	800b498 <_printf_common+0x58>
 800b508:	2301      	movs	r3, #1
 800b50a:	4622      	mov	r2, r4
 800b50c:	4649      	mov	r1, r9
 800b50e:	4638      	mov	r0, r7
 800b510:	47c0      	blx	r8
 800b512:	3001      	adds	r0, #1
 800b514:	d0e6      	beq.n	800b4e4 <_printf_common+0xa4>
 800b516:	3601      	adds	r6, #1
 800b518:	e7d9      	b.n	800b4ce <_printf_common+0x8e>
	...

0800b51c <_printf_i>:
 800b51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b520:	7e0f      	ldrb	r7, [r1, #24]
 800b522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b524:	2f78      	cmp	r7, #120	; 0x78
 800b526:	4691      	mov	r9, r2
 800b528:	4680      	mov	r8, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	469a      	mov	sl, r3
 800b52e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b532:	d807      	bhi.n	800b544 <_printf_i+0x28>
 800b534:	2f62      	cmp	r7, #98	; 0x62
 800b536:	d80a      	bhi.n	800b54e <_printf_i+0x32>
 800b538:	2f00      	cmp	r7, #0
 800b53a:	f000 80d8 	beq.w	800b6ee <_printf_i+0x1d2>
 800b53e:	2f58      	cmp	r7, #88	; 0x58
 800b540:	f000 80a3 	beq.w	800b68a <_printf_i+0x16e>
 800b544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b54c:	e03a      	b.n	800b5c4 <_printf_i+0xa8>
 800b54e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b552:	2b15      	cmp	r3, #21
 800b554:	d8f6      	bhi.n	800b544 <_printf_i+0x28>
 800b556:	a101      	add	r1, pc, #4	; (adr r1, 800b55c <_printf_i+0x40>)
 800b558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b55c:	0800b5b5 	.word	0x0800b5b5
 800b560:	0800b5c9 	.word	0x0800b5c9
 800b564:	0800b545 	.word	0x0800b545
 800b568:	0800b545 	.word	0x0800b545
 800b56c:	0800b545 	.word	0x0800b545
 800b570:	0800b545 	.word	0x0800b545
 800b574:	0800b5c9 	.word	0x0800b5c9
 800b578:	0800b545 	.word	0x0800b545
 800b57c:	0800b545 	.word	0x0800b545
 800b580:	0800b545 	.word	0x0800b545
 800b584:	0800b545 	.word	0x0800b545
 800b588:	0800b6d5 	.word	0x0800b6d5
 800b58c:	0800b5f9 	.word	0x0800b5f9
 800b590:	0800b6b7 	.word	0x0800b6b7
 800b594:	0800b545 	.word	0x0800b545
 800b598:	0800b545 	.word	0x0800b545
 800b59c:	0800b6f7 	.word	0x0800b6f7
 800b5a0:	0800b545 	.word	0x0800b545
 800b5a4:	0800b5f9 	.word	0x0800b5f9
 800b5a8:	0800b545 	.word	0x0800b545
 800b5ac:	0800b545 	.word	0x0800b545
 800b5b0:	0800b6bf 	.word	0x0800b6bf
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	1d1a      	adds	r2, r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	602a      	str	r2, [r5, #0]
 800b5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e0a3      	b.n	800b710 <_printf_i+0x1f4>
 800b5c8:	6820      	ldr	r0, [r4, #0]
 800b5ca:	6829      	ldr	r1, [r5, #0]
 800b5cc:	0606      	lsls	r6, r0, #24
 800b5ce:	f101 0304 	add.w	r3, r1, #4
 800b5d2:	d50a      	bpl.n	800b5ea <_printf_i+0xce>
 800b5d4:	680e      	ldr	r6, [r1, #0]
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	2e00      	cmp	r6, #0
 800b5da:	da03      	bge.n	800b5e4 <_printf_i+0xc8>
 800b5dc:	232d      	movs	r3, #45	; 0x2d
 800b5de:	4276      	negs	r6, r6
 800b5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e4:	485e      	ldr	r0, [pc, #376]	; (800b760 <_printf_i+0x244>)
 800b5e6:	230a      	movs	r3, #10
 800b5e8:	e019      	b.n	800b61e <_printf_i+0x102>
 800b5ea:	680e      	ldr	r6, [r1, #0]
 800b5ec:	602b      	str	r3, [r5, #0]
 800b5ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5f2:	bf18      	it	ne
 800b5f4:	b236      	sxthne	r6, r6
 800b5f6:	e7ef      	b.n	800b5d8 <_printf_i+0xbc>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	1d19      	adds	r1, r3, #4
 800b5fe:	6029      	str	r1, [r5, #0]
 800b600:	0601      	lsls	r1, r0, #24
 800b602:	d501      	bpl.n	800b608 <_printf_i+0xec>
 800b604:	681e      	ldr	r6, [r3, #0]
 800b606:	e002      	b.n	800b60e <_printf_i+0xf2>
 800b608:	0646      	lsls	r6, r0, #25
 800b60a:	d5fb      	bpl.n	800b604 <_printf_i+0xe8>
 800b60c:	881e      	ldrh	r6, [r3, #0]
 800b60e:	4854      	ldr	r0, [pc, #336]	; (800b760 <_printf_i+0x244>)
 800b610:	2f6f      	cmp	r7, #111	; 0x6f
 800b612:	bf0c      	ite	eq
 800b614:	2308      	moveq	r3, #8
 800b616:	230a      	movne	r3, #10
 800b618:	2100      	movs	r1, #0
 800b61a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b61e:	6865      	ldr	r5, [r4, #4]
 800b620:	60a5      	str	r5, [r4, #8]
 800b622:	2d00      	cmp	r5, #0
 800b624:	bfa2      	ittt	ge
 800b626:	6821      	ldrge	r1, [r4, #0]
 800b628:	f021 0104 	bicge.w	r1, r1, #4
 800b62c:	6021      	strge	r1, [r4, #0]
 800b62e:	b90e      	cbnz	r6, 800b634 <_printf_i+0x118>
 800b630:	2d00      	cmp	r5, #0
 800b632:	d04d      	beq.n	800b6d0 <_printf_i+0x1b4>
 800b634:	4615      	mov	r5, r2
 800b636:	fbb6 f1f3 	udiv	r1, r6, r3
 800b63a:	fb03 6711 	mls	r7, r3, r1, r6
 800b63e:	5dc7      	ldrb	r7, [r0, r7]
 800b640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b644:	4637      	mov	r7, r6
 800b646:	42bb      	cmp	r3, r7
 800b648:	460e      	mov	r6, r1
 800b64a:	d9f4      	bls.n	800b636 <_printf_i+0x11a>
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	d10b      	bne.n	800b668 <_printf_i+0x14c>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	07de      	lsls	r6, r3, #31
 800b654:	d508      	bpl.n	800b668 <_printf_i+0x14c>
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	6861      	ldr	r1, [r4, #4]
 800b65a:	4299      	cmp	r1, r3
 800b65c:	bfde      	ittt	le
 800b65e:	2330      	movle	r3, #48	; 0x30
 800b660:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b664:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b668:	1b52      	subs	r2, r2, r5
 800b66a:	6122      	str	r2, [r4, #16]
 800b66c:	f8cd a000 	str.w	sl, [sp]
 800b670:	464b      	mov	r3, r9
 800b672:	aa03      	add	r2, sp, #12
 800b674:	4621      	mov	r1, r4
 800b676:	4640      	mov	r0, r8
 800b678:	f7ff fee2 	bl	800b440 <_printf_common>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d14c      	bne.n	800b71a <_printf_i+0x1fe>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
 800b684:	b004      	add	sp, #16
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	4835      	ldr	r0, [pc, #212]	; (800b760 <_printf_i+0x244>)
 800b68c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b690:	6829      	ldr	r1, [r5, #0]
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	f851 6b04 	ldr.w	r6, [r1], #4
 800b698:	6029      	str	r1, [r5, #0]
 800b69a:	061d      	lsls	r5, r3, #24
 800b69c:	d514      	bpl.n	800b6c8 <_printf_i+0x1ac>
 800b69e:	07df      	lsls	r7, r3, #31
 800b6a0:	bf44      	itt	mi
 800b6a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b6a6:	6023      	strmi	r3, [r4, #0]
 800b6a8:	b91e      	cbnz	r6, 800b6b2 <_printf_i+0x196>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	f023 0320 	bic.w	r3, r3, #32
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	2310      	movs	r3, #16
 800b6b4:	e7b0      	b.n	800b618 <_printf_i+0xfc>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	f043 0320 	orr.w	r3, r3, #32
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	2378      	movs	r3, #120	; 0x78
 800b6c0:	4828      	ldr	r0, [pc, #160]	; (800b764 <_printf_i+0x248>)
 800b6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6c6:	e7e3      	b.n	800b690 <_printf_i+0x174>
 800b6c8:	0659      	lsls	r1, r3, #25
 800b6ca:	bf48      	it	mi
 800b6cc:	b2b6      	uxthmi	r6, r6
 800b6ce:	e7e6      	b.n	800b69e <_printf_i+0x182>
 800b6d0:	4615      	mov	r5, r2
 800b6d2:	e7bb      	b.n	800b64c <_printf_i+0x130>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	6826      	ldr	r6, [r4, #0]
 800b6d8:	6961      	ldr	r1, [r4, #20]
 800b6da:	1d18      	adds	r0, r3, #4
 800b6dc:	6028      	str	r0, [r5, #0]
 800b6de:	0635      	lsls	r5, r6, #24
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	d501      	bpl.n	800b6e8 <_printf_i+0x1cc>
 800b6e4:	6019      	str	r1, [r3, #0]
 800b6e6:	e002      	b.n	800b6ee <_printf_i+0x1d2>
 800b6e8:	0670      	lsls	r0, r6, #25
 800b6ea:	d5fb      	bpl.n	800b6e4 <_printf_i+0x1c8>
 800b6ec:	8019      	strh	r1, [r3, #0]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6123      	str	r3, [r4, #16]
 800b6f2:	4615      	mov	r5, r2
 800b6f4:	e7ba      	b.n	800b66c <_printf_i+0x150>
 800b6f6:	682b      	ldr	r3, [r5, #0]
 800b6f8:	1d1a      	adds	r2, r3, #4
 800b6fa:	602a      	str	r2, [r5, #0]
 800b6fc:	681d      	ldr	r5, [r3, #0]
 800b6fe:	6862      	ldr	r2, [r4, #4]
 800b700:	2100      	movs	r1, #0
 800b702:	4628      	mov	r0, r5
 800b704:	f7f4 fd6c 	bl	80001e0 <memchr>
 800b708:	b108      	cbz	r0, 800b70e <_printf_i+0x1f2>
 800b70a:	1b40      	subs	r0, r0, r5
 800b70c:	6060      	str	r0, [r4, #4]
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	2300      	movs	r3, #0
 800b714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b718:	e7a8      	b.n	800b66c <_printf_i+0x150>
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	462a      	mov	r2, r5
 800b71e:	4649      	mov	r1, r9
 800b720:	4640      	mov	r0, r8
 800b722:	47d0      	blx	sl
 800b724:	3001      	adds	r0, #1
 800b726:	d0ab      	beq.n	800b680 <_printf_i+0x164>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	079b      	lsls	r3, r3, #30
 800b72c:	d413      	bmi.n	800b756 <_printf_i+0x23a>
 800b72e:	68e0      	ldr	r0, [r4, #12]
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	4298      	cmp	r0, r3
 800b734:	bfb8      	it	lt
 800b736:	4618      	movlt	r0, r3
 800b738:	e7a4      	b.n	800b684 <_printf_i+0x168>
 800b73a:	2301      	movs	r3, #1
 800b73c:	4632      	mov	r2, r6
 800b73e:	4649      	mov	r1, r9
 800b740:	4640      	mov	r0, r8
 800b742:	47d0      	blx	sl
 800b744:	3001      	adds	r0, #1
 800b746:	d09b      	beq.n	800b680 <_printf_i+0x164>
 800b748:	3501      	adds	r5, #1
 800b74a:	68e3      	ldr	r3, [r4, #12]
 800b74c:	9903      	ldr	r1, [sp, #12]
 800b74e:	1a5b      	subs	r3, r3, r1
 800b750:	42ab      	cmp	r3, r5
 800b752:	dcf2      	bgt.n	800b73a <_printf_i+0x21e>
 800b754:	e7eb      	b.n	800b72e <_printf_i+0x212>
 800b756:	2500      	movs	r5, #0
 800b758:	f104 0619 	add.w	r6, r4, #25
 800b75c:	e7f5      	b.n	800b74a <_printf_i+0x22e>
 800b75e:	bf00      	nop
 800b760:	0800c34e 	.word	0x0800c34e
 800b764:	0800c35f 	.word	0x0800c35f

0800b768 <__retarget_lock_acquire_recursive>:
 800b768:	4770      	bx	lr

0800b76a <__retarget_lock_release_recursive>:
 800b76a:	4770      	bx	lr

0800b76c <memcpy>:
 800b76c:	440a      	add	r2, r1
 800b76e:	4291      	cmp	r1, r2
 800b770:	f100 33ff 	add.w	r3, r0, #4294967295
 800b774:	d100      	bne.n	800b778 <memcpy+0xc>
 800b776:	4770      	bx	lr
 800b778:	b510      	push	{r4, lr}
 800b77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b782:	4291      	cmp	r1, r2
 800b784:	d1f9      	bne.n	800b77a <memcpy+0xe>
 800b786:	bd10      	pop	{r4, pc}

0800b788 <memmove>:
 800b788:	4288      	cmp	r0, r1
 800b78a:	b510      	push	{r4, lr}
 800b78c:	eb01 0402 	add.w	r4, r1, r2
 800b790:	d902      	bls.n	800b798 <memmove+0x10>
 800b792:	4284      	cmp	r4, r0
 800b794:	4623      	mov	r3, r4
 800b796:	d807      	bhi.n	800b7a8 <memmove+0x20>
 800b798:	1e43      	subs	r3, r0, #1
 800b79a:	42a1      	cmp	r1, r4
 800b79c:	d008      	beq.n	800b7b0 <memmove+0x28>
 800b79e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7a6:	e7f8      	b.n	800b79a <memmove+0x12>
 800b7a8:	4402      	add	r2, r0
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	428a      	cmp	r2, r1
 800b7ae:	d100      	bne.n	800b7b2 <memmove+0x2a>
 800b7b0:	bd10      	pop	{r4, pc}
 800b7b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ba:	e7f7      	b.n	800b7ac <memmove+0x24>

0800b7bc <_realloc_r>:
 800b7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	4614      	mov	r4, r2
 800b7c4:	460e      	mov	r6, r1
 800b7c6:	b921      	cbnz	r1, 800b7d2 <_realloc_r+0x16>
 800b7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	f7ff bb65 	b.w	800ae9c <_malloc_r>
 800b7d2:	b92a      	cbnz	r2, 800b7e0 <_realloc_r+0x24>
 800b7d4:	f7ff faf6 	bl	800adc4 <_free_r>
 800b7d8:	4625      	mov	r5, r4
 800b7da:	4628      	mov	r0, r5
 800b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e0:	f000 f81b 	bl	800b81a <_malloc_usable_size_r>
 800b7e4:	4284      	cmp	r4, r0
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	d802      	bhi.n	800b7f0 <_realloc_r+0x34>
 800b7ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7ee:	d812      	bhi.n	800b816 <_realloc_r+0x5a>
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f7ff fb52 	bl	800ae9c <_malloc_r>
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0ed      	beq.n	800b7da <_realloc_r+0x1e>
 800b7fe:	42bc      	cmp	r4, r7
 800b800:	4622      	mov	r2, r4
 800b802:	4631      	mov	r1, r6
 800b804:	bf28      	it	cs
 800b806:	463a      	movcs	r2, r7
 800b808:	f7ff ffb0 	bl	800b76c <memcpy>
 800b80c:	4631      	mov	r1, r6
 800b80e:	4640      	mov	r0, r8
 800b810:	f7ff fad8 	bl	800adc4 <_free_r>
 800b814:	e7e1      	b.n	800b7da <_realloc_r+0x1e>
 800b816:	4635      	mov	r5, r6
 800b818:	e7df      	b.n	800b7da <_realloc_r+0x1e>

0800b81a <_malloc_usable_size_r>:
 800b81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b81e:	1f18      	subs	r0, r3, #4
 800b820:	2b00      	cmp	r3, #0
 800b822:	bfbc      	itt	lt
 800b824:	580b      	ldrlt	r3, [r1, r0]
 800b826:	18c0      	addlt	r0, r0, r3
 800b828:	4770      	bx	lr
	...

0800b82c <_init>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr

0800b838 <_fini>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr

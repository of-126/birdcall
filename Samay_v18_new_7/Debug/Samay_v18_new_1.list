
Samay_v18_new_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f34c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ec  0800f4dc  0800f4dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105c8  080105c8  00012088  2**0
                  CONTENTS
  4 .ARM          00000008  080105c8  080105c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105d0  080105d0  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105d0  080105d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105d4  080105d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080105d8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012088  2**0
                  CONTENTS
 10 .bss          00005778  20000088  20000088  00012088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005800  20005800  00012088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019896  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e11  00000000  00000000  0002b94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0002f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001074  00000000  00000000  00030c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a06  00000000  00000000  00031d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e50b  00000000  00000000  0005770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c58  00000000  00000000  00075c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014686d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065f0  00000000  00000000  001468b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0014cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4c4 	.word	0x0800f4c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f4c4 	.word	0x0800f4c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Send_Uart+0x28>)
 800058a:	f008 fb2a 	bl	8008be2 <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000374 	.word	0x20000374

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	f5ad 7d45 	sub.w	sp, sp, #788	@ 0x314
 80005a2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f003 f8b6 	bl	8003714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 fa36 	bl	8000a18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ac:	f000 fa9e 	bl	8000aec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fc0c 	bl	8000dcc <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 fbe2 	bl	8000d7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 fb8c 	bl	8000cd4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 fbb4 	bl	8000d28 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005c0:	f00a f86c 	bl	800a69c <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005c4:	f000 fb66 	bl	8000c94 <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80005c8:	f000 fb08 	bl	8000bdc <MX_I2S2_Init>
  MX_I2S3_Init();
 80005cc:	f000 fb34 	bl	8000c38 <MX_I2S3_Init>
  MX_I2C2_Init();
 80005d0:	f000 fad6 	bl	8000b80 <MX_I2C2_Init>


  // for new_eeprom.c new_rtc.c new_uart.c
  if (I2C1_ClockConfig() != HAL_OK) {
 80005d4:	f000 fcb8 	bl	8000f48 <I2C1_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x46>
          Error_Handler(); // Handle clock config failure
 80005de:	f001 fbe1 	bl	8001da4 <Error_Handler>
      }
  MX_I2C1_Init();
 80005e2:	f000 fa9f 	bl	8000b24 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f003 f905 	bl	80037f8 <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 80005ee:	f001 f8fd 	bl	80017ec <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 80005f2:	f001 f8d1 	bl	8001798 <CODEC_RST>

  configure_codec();
 80005f6:	f001 f85d 	bl	80016b4 <configure_codec>


  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 80005fa:	4b9e      	ldr	r3, [pc, #632]	@ (8000874 <main+0x2d8>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	4b9d      	ldr	r3, [pc, #628]	@ (8000878 <main+0x2dc>)
 8000604:	4413      	add	r3, r2
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	489c      	ldr	r0, [pc, #624]	@ (800087c <main+0x2e0>)
 800060c:	f008 fb7b 	bl	8008d06 <HAL_UART_Receive_IT>

  ret=eeprom_init();
 8000610:	f001 fbce 	bl	8001db0 <eeprom_init>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b99      	ldr	r3, [pc, #612]	@ (8000880 <main+0x2e4>)
 800061a:	701a      	strb	r2, [r3, #0]
  if(ret==HAL_OK)
 800061c:	4b98      	ldr	r3, [pc, #608]	@ (8000880 <main+0x2e4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10a      	bne.n	800063a <main+0x9e>
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom ok\n\r", 11, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	220b      	movs	r2, #11
 800062a:	4996      	ldr	r1, [pc, #600]	@ (8000884 <main+0x2e8>)
 800062c:	4893      	ldr	r0, [pc, #588]	@ (800087c <main+0x2e0>)
 800062e:	f008 fad8 	bl	8008be2 <HAL_UART_Transmit>
  	HAL_Delay(100);
 8000632:	2064      	movs	r0, #100	@ 0x64
 8000634:	f003 f8e0 	bl	80037f8 <HAL_Delay>
 8000638:	e009      	b.n	800064e <main+0xb2>
  }
  else
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom notok\n\r", 14, HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	220e      	movs	r2, #14
 8000640:	4991      	ldr	r1, [pc, #580]	@ (8000888 <main+0x2ec>)
 8000642:	488e      	ldr	r0, [pc, #568]	@ (800087c <main+0x2e0>)
 8000644:	f008 facd 	bl	8008be2 <HAL_UART_Transmit>
  	HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	@ 0x64
 800064a:	f003 f8d5 	bl	80037f8 <HAL_Delay>
  }

  rtc_init(&hi2c1);
 800064e:	488f      	ldr	r0, [pc, #572]	@ (800088c <main+0x2f0>)
 8000650:	f001 fd36 	bl	80020c0 <rtc_init>

  	rtc_timedate_t timedate = {1, 1, 0, 1, 1, 01, 0xFF};
 8000654:	4a8e      	ldr	r2, [pc, #568]	@ (8000890 <main+0x2f4>)
 8000656:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800065a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065e:	6018      	str	r0, [r3, #0]
 8000660:	3304      	adds	r3, #4
 8000662:	8019      	strh	r1, [r3, #0]
 8000664:	3302      	adds	r3, #2
 8000666:	0c0a      	lsrs	r2, r1, #16
 8000668:	701a      	strb	r2, [r3, #0]
      ret = rtc_settime(&timedate);
 800066a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800066e:	4618      	mov	r0, r3
 8000670:	f001 feb6 	bl	80023e0 <rtc_settime>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b81      	ldr	r3, [pc, #516]	@ (8000880 <main+0x2e4>)
 800067a:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f003 f8bb 	bl	80037f8 <HAL_Delay>
      if (ret == HAL_OK) {
 8000682:	4b7f      	ldr	r3, [pc, #508]	@ (8000880 <main+0x2e4>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <main+0xfe>
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2211      	movs	r2, #17
 8000690:	4980      	ldr	r1, [pc, #512]	@ (8000894 <main+0x2f8>)
 8000692:	487a      	ldr	r0, [pc, #488]	@ (800087c <main+0x2e0>)
 8000694:	f008 faa5 	bl	8008be2 <HAL_UART_Transmit>
 8000698:	e006      	b.n	80006a8 <main+0x10c>
      } else {
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	2214      	movs	r2, #20
 80006a0:	497d      	ldr	r1, [pc, #500]	@ (8000898 <main+0x2fc>)
 80006a2:	4876      	ldr	r0, [pc, #472]	@ (800087c <main+0x2e0>)
 80006a4:	f008 fa9d 	bl	8008be2 <HAL_UART_Transmit>
      }

      char config_buffer[RX_buffersize];
          //eeprom_read_and_print_string(&huart3, 0x0000, (uint8_t*)config_buffer, pagesize);
              if (eeprom_read_config(config_buffer, RX_buffersize) == HAL_OK) {
 80006a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fc6d 	bl	8001f90 <eeprom_read_config>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d121      	bne.n	8000700 <main+0x164>
          	//if(eeprom_read(0x0000, (uint8_t*)config_buffer, 256)==HAL_OK)

                  HAL_UART_Transmit(&huart3, (uint8_t*)"Restoring: ", 11, HAL_MAX_DELAY);
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	220b      	movs	r2, #11
 80006c2:	4976      	ldr	r1, [pc, #472]	@ (800089c <main+0x300>)
 80006c4:	486d      	ldr	r0, [pc, #436]	@ (800087c <main+0x2e0>)
 80006c6:	f008 fa8c 	bl	8008be2 <HAL_UART_Transmit>
                  HAL_UART_Transmit(&huart3, (uint8_t*)config_buffer, strlen(config_buffer), HAL_MAX_DELAY);
 80006ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd7e 	bl	80001d0 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	4866      	ldr	r0, [pc, #408]	@ (800087c <main+0x2e0>)
 80006e2:	f008 fa7e 	bl	8008be2 <HAL_UART_Transmit>
                  HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	2202      	movs	r2, #2
 80006ec:	496c      	ldr	r1, [pc, #432]	@ (80008a0 <main+0x304>)
 80006ee:	4863      	ldr	r0, [pc, #396]	@ (800087c <main+0x2e0>)
 80006f0:	f008 fa77 	bl	8008be2 <HAL_UART_Transmit>
                  parse_and_print(config_buffer);
 80006f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f8d9 	bl	80028b0 <parse_and_print>
 80006fe:	e006      	b.n	800070e <main+0x172>
              } else {
                  HAL_UART_Transmit(&huart3, (uint8_t*)"No config\n\r", 11, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	220b      	movs	r2, #11
 8000706:	4967      	ldr	r1, [pc, #412]	@ (80008a4 <main+0x308>)
 8000708:	485c      	ldr	r0, [pc, #368]	@ (800087c <main+0x2e0>)
 800070a:	f008 fa6a 	bl	8008be2 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(datarecived)
 800070e:	4b66      	ldr	r3, [pc, #408]	@ (80008a8 <main+0x30c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 80fb 	beq.w	8000910 <main+0x374>
	  {
		  uint8_t eeprom_data[RX_buffersize];
		  senddata(rxbuffer, strlen(rxbuffer)); // Send received data
 800071a:	4857      	ldr	r0, [pc, #348]	@ (8000878 <main+0x2dc>)
 800071c:	f7ff fd58 	bl	80001d0 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	4854      	ldr	r0, [pc, #336]	@ (8000878 <main+0x2dc>)
 8000728:	f002 f84c 	bl	80027c4 <senddata>
		  ret=eeprom_write(0x0000, (uint8_t*)&rxbuffer, strlen(rxbuffer)+1);
 800072c:	4852      	ldr	r0, [pc, #328]	@ (8000878 <main+0x2dc>)
 800072e:	f7ff fd4f 	bl	80001d0 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	3301      	adds	r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	494e      	ldr	r1, [pc, #312]	@ (8000878 <main+0x2dc>)
 800073e:	2000      	movs	r0, #0
 8000740:	f001 fb4a 	bl	8001dd8 <eeprom_write>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b4d      	ldr	r3, [pc, #308]	@ (8000880 <main+0x2e4>)
 800074a:	701a      	strb	r2, [r3, #0]
		  if(ret==HAL_OK)
 800074c:	4b4c      	ldr	r3, [pc, #304]	@ (8000880 <main+0x2e4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d13b      	bne.n	80007cc <main+0x230>
		  {
			  HAL_UART_Transmit(&huart3, (uint8_t*)"write ok\n\r", 10, HAL_MAX_DELAY);
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	220a      	movs	r2, #10
 800075a:	4954      	ldr	r1, [pc, #336]	@ (80008ac <main+0x310>)
 800075c:	4847      	ldr	r0, [pc, #284]	@ (800087c <main+0x2e0>)
 800075e:	f008 fa40 	bl	8008be2 <HAL_UART_Transmit>
			  HAL_Delay(100);
 8000762:	2064      	movs	r0, #100	@ 0x64
 8000764:	f003 f848 	bl	80037f8 <HAL_Delay>

			  memset(eeprom_data, 0, pagesize);  // Clear the buffer
 8000768:	463b      	mov	r3, r7
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f00d fa9a 	bl	800dca8 <memset>

			  if (eeprom_read(0x0000, eeprom_data, pagesize) != NULL)
 8000774:	463b      	mov	r3, r7
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	4619      	mov	r1, r3
 800077a:	2000      	movs	r0, #0
 800077c:	f001 fb56 	bl	8001e2c <eeprom_read>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d01a      	beq.n	80007bc <main+0x220>
			  {
				  HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read OK: ", 16, HAL_MAX_DELAY);
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2210      	movs	r2, #16
 800078c:	4948      	ldr	r1, [pc, #288]	@ (80008b0 <main+0x314>)
 800078e:	483b      	ldr	r0, [pc, #236]	@ (800087c <main+0x2e0>)
 8000790:	f008 fa27 	bl	8008be2 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, eeprom_data, strlen((char*)eeprom_data), HAL_MAX_DELAY);
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd1a 	bl	80001d0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4639      	mov	r1, r7
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4835      	ldr	r0, [pc, #212]	@ (800087c <main+0x2e0>)
 80007a8:	f008 fa1b 	bl	8008be2 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	2202      	movs	r2, #2
 80007b2:	493b      	ldr	r1, [pc, #236]	@ (80008a0 <main+0x304>)
 80007b4:	4831      	ldr	r0, [pc, #196]	@ (800087c <main+0x2e0>)
 80007b6:	f008 fa14 	bl	8008be2 <HAL_UART_Transmit>
 80007ba:	e011      	b.n	80007e0 <main+0x244>
			  }
			  else
			  {
				  HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed\n\r", 20, HAL_MAX_DELAY);
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2214      	movs	r2, #20
 80007c2:	493c      	ldr	r1, [pc, #240]	@ (80008b4 <main+0x318>)
 80007c4:	482d      	ldr	r0, [pc, #180]	@ (800087c <main+0x2e0>)
 80007c6:	f008 fa0c 	bl	8008be2 <HAL_UART_Transmit>
 80007ca:	e009      	b.n	80007e0 <main+0x244>
			  }

		  }
		  else
		  {
			  HAL_UART_Transmit(&huart3, (uint8_t*)"write notok\n\r", 13, HAL_MAX_DELAY);
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	220d      	movs	r2, #13
 80007d2:	4939      	ldr	r1, [pc, #228]	@ (80008b8 <main+0x31c>)
 80007d4:	4829      	ldr	r0, [pc, #164]	@ (800087c <main+0x2e0>)
 80007d6:	f008 fa04 	bl	8008be2 <HAL_UART_Transmit>
			  HAL_Delay(100);
 80007da:	2064      	movs	r0, #100	@ 0x64
 80007dc:	f003 f80c 	bl	80037f8 <HAL_Delay>
		  }

		  char rxCopy[RX_buffersize];
		  strcpy(rxCopy, (char*)eeprom_data);
 80007e0:	463a      	mov	r2, r7
 80007e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00d fb56 	bl	800de9a <strcpy>


		  ret=rtc_gettime(&timedate);
 80007ee:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fe57 	bl	80024a6 <rtc_gettime>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <main+0x2e4>)
 80007fe:	701a      	strb	r2, [r3, #0]
		  if(ret==HAL_OK)
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <main+0x2e4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d15f      	bne.n	80008c8 <main+0x32c>
		  {
			  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8000808:	f897 3300 	ldrb.w	r3, [r7, #768]	@ 0x300
 800080c:	461a      	mov	r2, r3
 800080e:	f897 3301 	ldrb.w	r3, [r7, #769]	@ 0x301
 8000812:	4619      	mov	r1, r3
 8000814:	f897 3302 	ldrb.w	r3, [r7, #770]	@ 0x302
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	460b      	mov	r3, r1
 800081c:	4927      	ldr	r1, [pc, #156]	@ (80008bc <main+0x320>)
 800081e:	4828      	ldr	r0, [pc, #160]	@ (80008c0 <main+0x324>)
 8000820:	f00d f97a 	bl	800db18 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000824:	4826      	ldr	r0, [pc, #152]	@ (80008c0 <main+0x324>)
 8000826:	f7ff fcd3 	bl	80001d0 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	4923      	ldr	r1, [pc, #140]	@ (80008c0 <main+0x324>)
 8000834:	4811      	ldr	r0, [pc, #68]	@ (800087c <main+0x2e0>)
 8000836:	f008 f9d4 	bl	8008be2 <HAL_UART_Transmit>
			  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 800083a:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 800083e:	461a      	mov	r2, r3
 8000840:	f897 3304 	ldrb.w	r3, [r7, #772]	@ 0x304
 8000844:	4619      	mov	r1, r3
 8000846:	f897 3305 	ldrb.w	r3, [r7, #773]	@ 0x305
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	460b      	mov	r3, r1
 800084e:	491d      	ldr	r1, [pc, #116]	@ (80008c4 <main+0x328>)
 8000850:	481b      	ldr	r0, [pc, #108]	@ (80008c0 <main+0x324>)
 8000852:	f00d f961 	bl	800db18 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000856:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <main+0x324>)
 8000858:	f7ff fcba 	bl	80001d0 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	4916      	ldr	r1, [pc, #88]	@ (80008c0 <main+0x324>)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <main+0x2e0>)
 8000868:	f008 f9bb 	bl	8008be2 <HAL_UART_Transmit>
			  HAL_Delay(100);
 800086c:	2064      	movs	r0, #100	@ 0x64
 800086e:	f002 ffc3 	bl	80037f8 <HAL_Delay>
 8000872:	e033      	b.n	80008dc <main+0x340>
 8000874:	2000562c 	.word	0x2000562c
 8000878:	2000552c 	.word	0x2000552c
 800087c:	20000374 	.word	0x20000374
 8000880:	200000b0 	.word	0x200000b0
 8000884:	0800f5d8 	.word	0x0800f5d8
 8000888:	0800f5e4 	.word	0x0800f5e4
 800088c:	20000108 	.word	0x20000108
 8000890:	0800f720 	.word	0x0800f720
 8000894:	0800f5f4 	.word	0x0800f5f4
 8000898:	0800f608 	.word	0x0800f608
 800089c:	0800f620 	.word	0x0800f620
 80008a0:	0800f62c 	.word	0x0800f62c
 80008a4:	0800f630 	.word	0x0800f630
 80008a8:	2000562d 	.word	0x2000562d
 80008ac:	0800f63c 	.word	0x0800f63c
 80008b0:	0800f648 	.word	0x0800f648
 80008b4:	0800f65c 	.word	0x0800f65c
 80008b8:	0800f674 	.word	0x0800f674
 80008bc:	0800f684 	.word	0x0800f684
 80008c0:	20005638 	.word	0x20005638
 80008c4:	0800f6a4 	.word	0x0800f6a4
		  }
		  else
		  {
			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	2214      	movs	r2, #20
 80008ce:	4945      	ldr	r1, [pc, #276]	@ (80009e4 <main+0x448>)
 80008d0:	4845      	ldr	r0, [pc, #276]	@ (80009e8 <main+0x44c>)
 80008d2:	f008 f986 	bl	8008be2 <HAL_UART_Transmit>
			  HAL_Delay(100);
 80008d6:	2064      	movs	r0, #100	@ 0x64
 80008d8:	f002 ff8e 	bl	80037f8 <HAL_Delay>
		  }

		  parse_and_print((char*)rxbuffer);
 80008dc:	4843      	ldr	r0, [pc, #268]	@ (80009ec <main+0x450>)
 80008de:	f001 ffe7 	bl	80028b0 <parse_and_print>


		  datarecived = 0;
 80008e2:	4b43      	ldr	r3, [pc, #268]	@ (80009f0 <main+0x454>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
		  rxindex = 0;
 80008e8:	4b42      	ldr	r3, [pc, #264]	@ (80009f4 <main+0x458>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
		  memset(rxbuffer, 0, RX_buffersize); // Clear buffer
 80008ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008f2:	2100      	movs	r1, #0
 80008f4:	483d      	ldr	r0, [pc, #244]	@ (80009ec <main+0x450>)
 80008f6:	f00d f9d7 	bl	800dca8 <memset>
		  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxbuffer[rxindex], 1);
 80008fa:	4b3e      	ldr	r3, [pc, #248]	@ (80009f4 <main+0x458>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	4b3a      	ldr	r3, [pc, #232]	@ (80009ec <main+0x450>)
 8000904:	4413      	add	r3, r2
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	4837      	ldr	r0, [pc, #220]	@ (80009e8 <main+0x44c>)
 800090c:	f008 f9fb 	bl	8008d06 <HAL_UART_Receive_IT>



	  }

	  if (alarm_triggered_flag) {
 8000910:	4b39      	ldr	r3, [pc, #228]	@ (80009f8 <main+0x45c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d05a      	beq.n	80009d0 <main+0x434>
	              handle_recording();
 800091a:	f000 fb49 	bl	8000fb0 <handle_recording>

	              // Manage alarm queue (optional)
	              if (current_idx < alarm_count - 1) {
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <main+0x460>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <main+0x464>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	429a      	cmp	r2, r3
 800092c:	da4c      	bge.n	80009c8 <main+0x42c>
	                  current_idx++;
 800092e:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <main+0x460>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <main+0x460>)
 8000938:	701a      	strb	r2, [r3, #0]
	                  if (rtc_setalarm(&alarm_queue[current_idx]) == HAL_OK) {
 800093a:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <main+0x460>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	4613      	mov	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	1a9b      	subs	r3, r3, r2
 8000946:	4a2f      	ldr	r2, [pc, #188]	@ (8000a04 <main+0x468>)
 8000948:	4413      	add	r3, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fe20 	bl	8002590 <rtc_setalarm>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d131      	bne.n	80009ba <main+0x41e>
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <main+0x460>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <main+0x468>)
 800095e:	460b      	mov	r3, r1
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 8000968:	4618      	mov	r0, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 800096a:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <main+0x460>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4a24      	ldr	r2, [pc, #144]	@ (8000a04 <main+0x468>)
 8000972:	460b      	mov	r3, r1
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	1a5b      	subs	r3, r3, r1
 8000978:	4413      	add	r3, r2
 800097a:	3301      	adds	r3, #1
 800097c:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 800097e:	461c      	mov	r4, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <main+0x460>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <main+0x468>)
 8000988:	460b      	mov	r3, r1
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	1a5b      	subs	r3, r3, r1
 800098e:	4413      	add	r3, r2
 8000990:	3302      	adds	r3, #2
 8000992:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	4623      	mov	r3, r4
 8000998:	4602      	mov	r2, r0
 800099a:	491b      	ldr	r1, [pc, #108]	@ (8000a08 <main+0x46c>)
 800099c:	481b      	ldr	r0, [pc, #108]	@ (8000a0c <main+0x470>)
 800099e:	f00d f8bb 	bl	800db18 <siprintf>
	                      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80009a2:	481a      	ldr	r0, [pc, #104]	@ (8000a0c <main+0x470>)
 80009a4:	f7ff fc14 	bl	80001d0 <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	4916      	ldr	r1, [pc, #88]	@ (8000a0c <main+0x470>)
 80009b2:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <main+0x44c>)
 80009b4:	f008 f915 	bl	8008be2 <HAL_UART_Transmit>
 80009b8:	e006      	b.n	80009c8 <main+0x42c>
	                  } else {
	                      HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to set next alarm\n\r", 26, HAL_MAX_DELAY);
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	221a      	movs	r2, #26
 80009c0:	4913      	ldr	r1, [pc, #76]	@ (8000a10 <main+0x474>)
 80009c2:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <main+0x44c>)
 80009c4:	f008 f90d 	bl	8008be2 <HAL_UART_Transmit>
	                  }
	              }

	              alarm_triggered_flag = 0; // Clear the flag after handling
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <main+0x45c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e69e      	b.n	800070e <main+0x172>
	          } else if (is_recording) {
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <main+0x478>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f43f ae99 	beq.w	800070e <main+0x172>
	              // Continue checking save_frequency even if no new alarm
	              handle_recording();
 80009dc:	f000 fae8 	bl	8000fb0 <handle_recording>
	  if(datarecived)
 80009e0:	e695      	b.n	800070e <main+0x172>
 80009e2:	bf00      	nop
 80009e4:	0800f6c8 	.word	0x0800f6c8
 80009e8:	20000374 	.word	0x20000374
 80009ec:	2000552c 	.word	0x2000552c
 80009f0:	2000562d 	.word	0x2000562d
 80009f4:	2000562c 	.word	0x2000562c
 80009f8:	20005460 	.word	0x20005460
 80009fc:	2000552b 	.word	0x2000552b
 8000a00:	2000552a 	.word	0x2000552a
 8000a04:	200054c8 	.word	0x200054c8
 8000a08:	0800f6e0 	.word	0x0800f6e0
 8000a0c:	20005638 	.word	0x20005638
 8000a10:	0800f704 	.word	0x0800f704
 8000a14:	20005461 	.word	0x20005461

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	@ 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	@ 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d f93e 	bl	800dca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a27      	ldr	r2, [pc, #156]	@ (8000ae4 <SystemClock_Config+0xcc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <SystemClock_Config+0xcc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <SystemClock_Config+0xd0>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <SystemClock_Config+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 8000a8c:	23a5      	movs	r3, #165	@ 0xa5
 8000a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f006 faf3 	bl	8007088 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa8:	f001 f97c 	bl	8001da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2105      	movs	r1, #5
 8000aca:	4618      	mov	r0, r3
 8000acc:	f006 fd54 	bl	8007578 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ad6:	f001 f965 	bl	8001da4 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	@ 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000afe:	2301      	movs	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000b02:	2332      	movs	r3, #50	@ 0x32
 8000b04:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f006 ff53 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000b18:	f001 f944 	bl	8001da4 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f003 fd4f 	bl	8004604 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f001 f91a 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000108 	.word	0x20000108
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000b86:	4a13      	ldr	r2, [pc, #76]	@ (8000bd4 <MX_I2C2_Init+0x54>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000b8c:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <MX_I2C2_Init+0x58>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_I2C2_Init+0x50>)
 8000bbe:	f003 fd21 	bl	8004604 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f001 f8ec 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000b4 	.word	0x200000b4
 8000bd4:	40005800 	.word	0x40005800
 8000bd8:	000186a0 	.word	0x000186a0

08000bdc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <MX_I2S2_Init+0x58>)
 8000be4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000c02:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000c06:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_I2S2_Init+0x54>)
 8000c1c:	f005 fa54 	bl	80060c8 <HAL_I2S_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c26:	f001 f8bd 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000015c 	.word	0x2000015c
 8000c34:	40003800 	.word	0x40003800

08000c38 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <MX_I2S3_Init+0x58>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c48:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c5e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000c62:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_I2S3_Init+0x54>)
 8000c78:	f005 fa26 	bl	80060c8 <HAL_I2S_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c82:	f001 f88f 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001a4 	.word	0x200001a4
 8000c90:	40003c00 	.word	0x40003c00

08000c94 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <MX_SDIO_SD_Init+0x3c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <MX_SDIO_SD_Init+0x38>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200002ac 	.word	0x200002ac
 8000cd0:	40012c00 	.word	0x40012c00

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <MX_USART2_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f007 ff1c 	bl	8008b48 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f001 f845 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000330 	.word	0x20000330
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <MX_USART3_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_USART3_UART_Init+0x4c>)
 8000d60:	f007 fef2 	bl	8008b48 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f001 f81b 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000374 	.word	0x20000374
 8000d78:	40004800 	.word	0x40004800

08000d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <MX_DMA_Init+0x4c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <MX_DMA_Init+0x4c>)
 8000d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <MX_DMA_Init+0x4c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	200b      	movs	r0, #11
 8000da4:	f002 fe27 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000da8:	200b      	movs	r0, #11
 8000daa:	f002 fe40 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200e      	movs	r0, #14
 8000db4:	f002 fe1f 	bl	80039f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000db8:	200e      	movs	r0, #14
 8000dba:	f002 fe38 	bl	8003a2e <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b54      	ldr	r3, [pc, #336]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a53      	ldr	r2, [pc, #332]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b51      	ldr	r3, [pc, #324]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a4c      	ldr	r2, [pc, #304]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b46      	ldr	r3, [pc, #280]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a45      	ldr	r2, [pc, #276]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b43      	ldr	r3, [pc, #268]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b3c      	ldr	r3, [pc, #240]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a37      	ldr	r2, [pc, #220]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a30      	ldr	r2, [pc, #192]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <MX_GPIO_Init+0x16c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2132      	movs	r1, #50	@ 0x32
 8000e8e:	482b      	ldr	r0, [pc, #172]	@ (8000f3c <MX_GPIO_Init+0x170>)
 8000e90:	f003 fb86 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000e94:	2200      	movs	r2, #0
 8000e96:	f24b 0178 	movw	r1, #45176	@ 0xb078
 8000e9a:	4829      	ldr	r0, [pc, #164]	@ (8000f40 <MX_GPIO_Init+0x174>)
 8000e9c:	f003 fb80 	bl	80045a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000ea6:	4827      	ldr	r0, [pc, #156]	@ (8000f44 <MX_GPIO_Init+0x178>)
 8000ea8:	f003 fb7a 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8000eac:	2332      	movs	r3, #50	@ 0x32
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481e      	ldr	r0, [pc, #120]	@ (8000f3c <MX_GPIO_Init+0x170>)
 8000ec4:	f003 f9d0 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000ec8:	f24b 0378 	movw	r3, #45176	@ 0xb078
 8000ecc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <MX_GPIO_Init+0x174>)
 8000ee2:	f003 f9c1 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000ee6:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_GPIO_Init+0x178>)
 8000f00:	f003 f9b2 	bl	8004268 <HAL_GPIO_Init>



  /*Configure GPIO pin : PD0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]

  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f08:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f0c:	623b      	str	r3, [r7, #32]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <MX_GPIO_Init+0x174>)
 8000f1a:	f003 f9a5 	bl	8004268 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2006      	movs	r0, #6
 8000f24:	f002 fd67 	bl	80039f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f002 fd80 	bl	8003a2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	@ 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	40020000 	.word	0x40020000

08000f48 <I2C1_ClockConfig>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef I2C1_ClockConfig(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
    // Enable the clock for I2C1 (APB1 peripheral)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <I2C1_ClockConfig+0x58>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <I2C1_ClockConfig+0x58>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <I2C1_ClockConfig+0x58>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

    // Optional: Verify clock is enabled by checking the RCC register
    if (__HAL_RCC_I2C1_IS_CLK_ENABLED()) {
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <I2C1_ClockConfig+0x58>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d008      	beq.n	8000f88 <I2C1_ClockConfig+0x40>
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enabled\n\r", 20, HAL_MAX_DELAY);
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	2214      	movs	r2, #20
 8000f7c:	4909      	ldr	r1, [pc, #36]	@ (8000fa4 <I2C1_ClockConfig+0x5c>)
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <I2C1_ClockConfig+0x60>)
 8000f80:	f007 fe2f 	bl	8008be2 <HAL_UART_Transmit>
        return HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e007      	b.n	8000f98 <I2C1_ClockConfig+0x50>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enable failed\n\r", 26, HAL_MAX_DELAY);
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	221a      	movs	r2, #26
 8000f8e:	4907      	ldr	r1, [pc, #28]	@ (8000fac <I2C1_ClockConfig+0x64>)
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <I2C1_ClockConfig+0x60>)
 8000f92:	f007 fe26 	bl	8008be2 <HAL_UART_Transmit>
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
    }
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	0800f728 	.word	0x0800f728
 8000fa8:	20000374 	.word	0x20000374
 8000fac:	0800f740 	.word	0x0800f740

08000fb0 <handle_recording>:
        alarm_triggered_recording_control();
    }
}*/

void handle_recording(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    if (!is_recording) {
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <handle_recording+0x90>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d119      	bne.n	8000ff2 <handle_recording+0x42>
        if (Start_Recording() == 0) {
 8000fbe:	f000 f871 	bl	80010a4 <Start_Recording>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10d      	bne.n	8000fe4 <handle_recording+0x34>
            is_recording = 1;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <handle_recording+0x90>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
            save_frequency = 0; // Reset save_frequency to start fresh
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <handle_recording+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)"Recording started due to alarm\n\r", 32, HAL_MAX_DELAY);
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2220      	movs	r2, #32
 8000fda:	491b      	ldr	r1, [pc, #108]	@ (8001048 <handle_recording+0x98>)
 8000fdc:	481b      	ldr	r0, [pc, #108]	@ (800104c <handle_recording+0x9c>)
 8000fde:	f007 fe00 	bl	8008be2 <HAL_UART_Transmit>
 8000fe2:	e006      	b.n	8000ff2 <handle_recording+0x42>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to start recording\n\r", 27, HAL_MAX_DELAY);
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	221b      	movs	r2, #27
 8000fea:	4919      	ldr	r1, [pc, #100]	@ (8001050 <handle_recording+0xa0>)
 8000fec:	4817      	ldr	r0, [pc, #92]	@ (800104c <handle_recording+0x9c>)
 8000fee:	f007 fdf8 	bl	8008be2 <HAL_UART_Transmit>
        }
    }

    // Debug save_frequency
        sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <handle_recording+0x94>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4916      	ldr	r1, [pc, #88]	@ (8001054 <handle_recording+0xa4>)
 8000ffa:	4817      	ldr	r0, [pc, #92]	@ (8001058 <handle_recording+0xa8>)
 8000ffc:	f00c fd8c 	bl	800db18 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001000:	4815      	ldr	r0, [pc, #84]	@ (8001058 <handle_recording+0xa8>)
 8001002:	f7ff f8e5 	bl	80001d0 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	4912      	ldr	r1, [pc, #72]	@ (8001058 <handle_recording+0xa8>)
 8001010:	480e      	ldr	r0, [pc, #56]	@ (800104c <handle_recording+0x9c>)
 8001012:	f007 fde6 	bl	8008be2 <HAL_UART_Transmit>


    // Check save_frequency condition
    if (is_recording && save_frequency >= 1880) {
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <handle_recording+0x90>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <handle_recording+0x8a>
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <handle_recording+0x94>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f5b3 6feb 	cmp.w	r3, #1880	@ 0x758
 8001028:	db07      	blt.n	800103a <handle_recording+0x8a>
        stop_recording();
 800102a:	f000 fa1f 	bl	800146c <stop_recording>
        is_recording = 0;
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <handle_recording+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit(&huart3, (uint8_t*)"Recording stopped (save_frequency >= 1880)\n\r", 44, HAL_MAX_DELAY);
        HAL_Delay(100); // Safe in main loop context
 8001034:	2064      	movs	r0, #100	@ 0x64
 8001036:	f002 fbdf 	bl	80037f8 <HAL_Delay>
    }
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20005461 	.word	0x20005461
 8001044:	20005458 	.word	0x20005458
 8001048:	0800f75c 	.word	0x0800f75c
 800104c:	20000374 	.word	0x20000374
 8001050:	0800f780 	.word	0x0800f780
 8001054:	0800f79c 	.word	0x0800f79c
 8001058:	20005638 	.word	0x20005638

0800105c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d110      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x32>
        if (rtc_check_alarm_flag() == 1) {
 800106c:	f001 fb4c 	bl	8002708 <rtc_check_alarm_flag>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d10b      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x32>
            alarm_triggered_flag = 1; // Raise flag for main loop
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
            rtc_clearalarm();         // Clear the alarm flag
 800107c:	f001 fb24 	bl	80026c8 <rtc_clearalarm>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm interrupt triggered!\n\r", 28, HAL_MAX_DELAY);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	221c      	movs	r2, #28
 8001086:	4905      	ldr	r1, [pc, #20]	@ (800109c <HAL_GPIO_EXTI_Callback+0x40>)
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_GPIO_EXTI_Callback+0x44>)
 800108a:	f007 fdaa 	bl	8008be2 <HAL_UART_Transmit>
        }
    }
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20005460 	.word	0x20005460
 800109c:	0800f7b4 	.word	0x0800f7b4
 80010a0:	20000374 	.word	0x20000374

080010a4 <Start_Recording>:

	    }

}*/
int Start_Recording(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
    /********************************************************************************************************** SD card ***/
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // OE SD 1 and 2
 80010aa:	2201      	movs	r2, #1
 80010ac:	2108      	movs	r1, #8
 80010ae:	48aa      	ldr	r0, [pc, #680]	@ (8001358 <Start_Recording+0x2b4>)
 80010b0:	f003 fa76 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2110      	movs	r1, #16
 80010b8:	48a7      	ldr	r0, [pc, #668]	@ (8001358 <Start_Recording+0x2b4>)
 80010ba:	f003 fa71 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // OE SD 3 and 4
 80010be:	2201      	movs	r2, #1
 80010c0:	2120      	movs	r1, #32
 80010c2:	48a5      	ldr	r0, [pc, #660]	@ (8001358 <Start_Recording+0x2b4>)
 80010c4:	f003 fa6c 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2140      	movs	r1, #64	@ 0x40
 80010cc:	48a2      	ldr	r0, [pc, #648]	@ (8001358 <Start_Recording+0x2b4>)
 80010ce:	f003 fa67 	bl	80045a0 <HAL_GPIO_WritePin>

    /********************************************************************************************************** SD 1 ***/
    message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 80010d2:	49a2      	ldr	r1, [pc, #648]	@ (800135c <Start_Recording+0x2b8>)
 80010d4:	48a2      	ldr	r0, [pc, #648]	@ (8001360 <Start_Recording+0x2bc>)
 80010d6:	f000 fe43 	bl	8001d60 <message>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // OE Pin pulled low SD 1 and 2
 80010da:	2200      	movs	r2, #0
 80010dc:	2108      	movs	r1, #8
 80010de:	489e      	ldr	r0, [pc, #632]	@ (8001358 <Start_Recording+0x2b4>)
 80010e0:	f003 fa5e 	bl	80045a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // SEL Pin pulled low SD 1
 80010e4:	2200      	movs	r2, #0
 80010e6:	2110      	movs	r1, #16
 80010e8:	489b      	ldr	r0, [pc, #620]	@ (8001358 <Start_Recording+0x2b4>)
 80010ea:	f003 fa59 	bl	80045a0 <HAL_GPIO_WritePin>

    message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 80010ee:	499d      	ldr	r1, [pc, #628]	@ (8001364 <Start_Recording+0x2c0>)
 80010f0:	489b      	ldr	r0, [pc, #620]	@ (8001360 <Start_Recording+0x2bc>)
 80010f2:	f000 fe35 	bl	8001d60 <message>

    fresult = f_mount(&fs_local, "/", 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	499b      	ldr	r1, [pc, #620]	@ (8001368 <Start_Recording+0x2c4>)
 80010fa:	489c      	ldr	r0, [pc, #624]	@ (800136c <Start_Recording+0x2c8>)
 80010fc:	f00b faa0 	bl	800c640 <f_mount>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b9a      	ldr	r3, [pc, #616]	@ (8001370 <Start_Recording+0x2cc>)
 8001106:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8001108:	4b99      	ldr	r3, [pc, #612]	@ (8001370 <Start_Recording+0x2cc>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <Start_Recording+0x78>
        message("ERROR!!! in mounting SD CARD...\r\n");
 8001110:	4898      	ldr	r0, [pc, #608]	@ (8001374 <Start_Recording+0x2d0>)
 8001112:	f000 fe25 	bl	8001d60 <message>
        return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e192      	b.n	8001442 <Start_Recording+0x39e>
    }

    History_update();
 800111c:	f000 fbfe 	bl	800191c <History_update>

    sprintf(File_name_1, "file_%d_1.wav", number);
 8001120:	4b95      	ldr	r3, [pc, #596]	@ (8001378 <Start_Recording+0x2d4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4995      	ldr	r1, [pc, #596]	@ (800137c <Start_Recording+0x2d8>)
 8001128:	4895      	ldr	r0, [pc, #596]	@ (8001380 <Start_Recording+0x2dc>)
 800112a:	f00c fcf5 	bl	800db18 <siprintf>
    sprintf(File_name_2, "file_%d_2.wav", number);
 800112e:	4b92      	ldr	r3, [pc, #584]	@ (8001378 <Start_Recording+0x2d4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4993      	ldr	r1, [pc, #588]	@ (8001384 <Start_Recording+0x2e0>)
 8001136:	4894      	ldr	r0, [pc, #592]	@ (8001388 <Start_Recording+0x2e4>)
 8001138:	f00c fcee 	bl	800db18 <siprintf>

    fresult = f_stat(File_name_1, &fno_local);
 800113c:	4993      	ldr	r1, [pc, #588]	@ (800138c <Start_Recording+0x2e8>)
 800113e:	4890      	ldr	r0, [pc, #576]	@ (8001380 <Start_Recording+0x2dc>)
 8001140:	f00c fa4b 	bl	800d5da <f_stat>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b89      	ldr	r3, [pc, #548]	@ (8001370 <Start_Recording+0x2cc>)
 800114a:	701a      	strb	r2, [r3, #0]
    fresult = f_stat(File_name_2, &fno_local);
 800114c:	498f      	ldr	r1, [pc, #572]	@ (800138c <Start_Recording+0x2e8>)
 800114e:	488e      	ldr	r0, [pc, #568]	@ (8001388 <Start_Recording+0x2e4>)
 8001150:	f00c fa43 	bl	800d5da <f_stat>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b85      	ldr	r3, [pc, #532]	@ (8001370 <Start_Recording+0x2cc>)
 800115a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 800115c:	4b84      	ldr	r3, [pc, #528]	@ (8001370 <Start_Recording+0x2cc>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <Start_Recording+0xce>
        message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n", "FILE1.txt");
 8001164:	498a      	ldr	r1, [pc, #552]	@ (8001390 <Start_Recording+0x2ec>)
 8001166:	488b      	ldr	r0, [pc, #556]	@ (8001394 <Start_Recording+0x2f0>)
 8001168:	f000 fdfa 	bl	8001d60 <message>
        return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e167      	b.n	8001442 <Start_Recording+0x39e>
    } else {
        fresult = f_open(&file_1, File_name_1, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001172:	220b      	movs	r2, #11
 8001174:	4982      	ldr	r1, [pc, #520]	@ (8001380 <Start_Recording+0x2dc>)
 8001176:	4888      	ldr	r0, [pc, #544]	@ (8001398 <Start_Recording+0x2f4>)
 8001178:	f00b faa8 	bl	800c6cc <f_open>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b7b      	ldr	r3, [pc, #492]	@ (8001370 <Start_Recording+0x2cc>)
 8001182:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 8001184:	4b7a      	ldr	r3, [pc, #488]	@ (8001370 <Start_Recording+0x2cc>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d009      	beq.n	80011a0 <Start_Recording+0xfc>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 800118c:	4b78      	ldr	r3, [pc, #480]	@ (8001370 <Start_Recording+0x2cc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4a7b      	ldr	r2, [pc, #492]	@ (8001380 <Start_Recording+0x2dc>)
 8001192:	4619      	mov	r1, r3
 8001194:	4881      	ldr	r0, [pc, #516]	@ (800139c <Start_Recording+0x2f8>)
 8001196:	f000 fde3 	bl	8001d60 <message>
            return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e150      	b.n	8001442 <Start_Recording+0x39e>
        }
        fresult = f_open(&file_2, File_name_2, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80011a0:	220b      	movs	r2, #11
 80011a2:	4979      	ldr	r1, [pc, #484]	@ (8001388 <Start_Recording+0x2e4>)
 80011a4:	487e      	ldr	r0, [pc, #504]	@ (80013a0 <Start_Recording+0x2fc>)
 80011a6:	f00b fa91 	bl	800c6cc <f_open>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b70      	ldr	r3, [pc, #448]	@ (8001370 <Start_Recording+0x2cc>)
 80011b0:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 80011b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001370 <Start_Recording+0x2cc>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <Start_Recording+0x12a>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_2);
 80011ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001370 <Start_Recording+0x2cc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4a72      	ldr	r2, [pc, #456]	@ (8001388 <Start_Recording+0x2e4>)
 80011c0:	4619      	mov	r1, r3
 80011c2:	4876      	ldr	r0, [pc, #472]	@ (800139c <Start_Recording+0x2f8>)
 80011c4:	f000 fdcc 	bl	8001d60 <message>
            return -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	e139      	b.n	8001442 <Start_Recording+0x39e>
        }
        fresult = f_close(&file_1);
 80011ce:	4872      	ldr	r0, [pc, #456]	@ (8001398 <Start_Recording+0x2f4>)
 80011d0:	f00b ffb5 	bl	800d13e <f_close>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b65      	ldr	r3, [pc, #404]	@ (8001370 <Start_Recording+0x2cc>)
 80011da:	701a      	strb	r2, [r3, #0]
        fresult = f_close(&file_2);
 80011dc:	4870      	ldr	r0, [pc, #448]	@ (80013a0 <Start_Recording+0x2fc>)
 80011de:	f00b ffae 	bl	800d13e <f_close>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b62      	ldr	r3, [pc, #392]	@ (8001370 <Start_Recording+0x2cc>)
 80011e8:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult, File_name_1);
 80011ea:	4b61      	ldr	r3, [pc, #388]	@ (8001370 <Start_Recording+0x2cc>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <Start_Recording+0x15c>
 80011f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001370 <Start_Recording+0x2cc>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4a62      	ldr	r2, [pc, #392]	@ (8001380 <Start_Recording+0x2dc>)
 80011f8:	4619      	mov	r1, r3
 80011fa:	486a      	ldr	r0, [pc, #424]	@ (80013a4 <Start_Recording+0x300>)
 80011fc:	f000 fdb0 	bl	8001d60 <message>
    }

    f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 8001200:	2232      	movs	r2, #50	@ 0x32
 8001202:	495f      	ldr	r1, [pc, #380]	@ (8001380 <Start_Recording+0x2dc>)
 8001204:	4864      	ldr	r0, [pc, #400]	@ (8001398 <Start_Recording+0x2f4>)
 8001206:	f00b fa61 	bl	800c6cc <f_open>
    f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 800120a:	2232      	movs	r2, #50	@ 0x32
 800120c:	495e      	ldr	r1, [pc, #376]	@ (8001388 <Start_Recording+0x2e4>)
 800120e:	4864      	ldr	r0, [pc, #400]	@ (80013a0 <Start_Recording+0x2fc>)
 8001210:	f00b fa5c 	bl	800c6cc <f_open>

    read_and_print_registers();
 8001214:	f000 fb0e 	bl	8001834 <read_and_print_registers>

    WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8001218:	4963      	ldr	r1, [pc, #396]	@ (80013a8 <Start_Recording+0x304>)
 800121a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800121e:	f000 fc3d 	bl	8001a9c <WavProcess_EncInit>
    f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <Start_Recording+0x308>)
 8001224:	222c      	movs	r2, #44	@ 0x2c
 8001226:	4960      	ldr	r1, [pc, #384]	@ (80013a8 <Start_Recording+0x304>)
 8001228:	485b      	ldr	r0, [pc, #364]	@ (8001398 <Start_Recording+0x2f4>)
 800122a:	f00b fd76 	bl	800cd1a <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 800122e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ac <Start_Recording+0x308>)
 8001230:	222c      	movs	r2, #44	@ 0x2c
 8001232:	495d      	ldr	r1, [pc, #372]	@ (80013a8 <Start_Recording+0x304>)
 8001234:	485a      	ldr	r0, [pc, #360]	@ (80013a0 <Start_Recording+0x2fc>)
 8001236:	f00b fd70 	bl	800cd1a <f_write>

    memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 800123a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800123e:	2100      	movs	r1, #0
 8001240:	485b      	ldr	r0, [pc, #364]	@ (80013b0 <Start_Recording+0x30c>)
 8001242:	f00c fd31 	bl	800dca8 <memset>
    memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 8001246:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800124a:	2100      	movs	r1, #0
 800124c:	4859      	ldr	r0, [pc, #356]	@ (80013b4 <Start_Recording+0x310>)
 800124e:	f00c fd2b 	bl	800dca8 <memset>

    message("Message: %s\r\n", "________________ Recording Started _____________\r\n");
 8001252:	4959      	ldr	r1, [pc, #356]	@ (80013b8 <Start_Recording+0x314>)
 8001254:	4842      	ldr	r0, [pc, #264]	@ (8001360 <Start_Recording+0x2bc>)
 8001256:	f000 fd83 	bl	8001d60 <message>

    // Stop any ongoing DMA
    HAL_I2S_DMAStop(&hi2s2);
 800125a:	4858      	ldr	r0, [pc, #352]	@ (80013bc <Start_Recording+0x318>)
 800125c:	f005 f930 	bl	80064c0 <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001260:	4857      	ldr	r0, [pc, #348]	@ (80013c0 <Start_Recording+0x31c>)
 8001262:	f005 f92d 	bl	80064c0 <HAL_I2S_DMAStop>

    // Check I2S state before starting
    HAL_I2S_StateTypeDef i2s2_state = HAL_I2S_GetState(&hi2s2);
 8001266:	4855      	ldr	r0, [pc, #340]	@ (80013bc <Start_Recording+0x318>)
 8001268:	f005 fb24 	bl	80068b4 <HAL_I2S_GetState>
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
    HAL_I2S_StateTypeDef i2s3_state = HAL_I2S_GetState(&hi2s3);
 8001270:	4853      	ldr	r0, [pc, #332]	@ (80013c0 <Start_Recording+0x31c>)
 8001272:	f005 fb1f 	bl	80068b4 <HAL_I2S_GetState>
 8001276:	4603      	mov	r3, r0
 8001278:	71bb      	strb	r3, [r7, #6]
    sprintf(uart_buffer, "I2S2 State before start: %d\n\r", i2s2_state);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	461a      	mov	r2, r3
 800127e:	4951      	ldr	r1, [pc, #324]	@ (80013c4 <Start_Recording+0x320>)
 8001280:	4851      	ldr	r0, [pc, #324]	@ (80013c8 <Start_Recording+0x324>)
 8001282:	f00c fc49 	bl	800db18 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001286:	4850      	ldr	r0, [pc, #320]	@ (80013c8 <Start_Recording+0x324>)
 8001288:	f7fe ffa2 	bl	80001d0 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	494c      	ldr	r1, [pc, #304]	@ (80013c8 <Start_Recording+0x324>)
 8001296:	484d      	ldr	r0, [pc, #308]	@ (80013cc <Start_Recording+0x328>)
 8001298:	f007 fca3 	bl	8008be2 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State before start: %d\n\r", i2s3_state);
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	461a      	mov	r2, r3
 80012a0:	494b      	ldr	r1, [pc, #300]	@ (80013d0 <Start_Recording+0x32c>)
 80012a2:	4849      	ldr	r0, [pc, #292]	@ (80013c8 <Start_Recording+0x324>)
 80012a4:	f00c fc38 	bl	800db18 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80012a8:	4847      	ldr	r0, [pc, #284]	@ (80013c8 <Start_Recording+0x324>)
 80012aa:	f7fe ff91 	bl	80001d0 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	4944      	ldr	r1, [pc, #272]	@ (80013c8 <Start_Recording+0x324>)
 80012b8:	4844      	ldr	r0, [pc, #272]	@ (80013cc <Start_Recording+0x328>)
 80012ba:	f007 fc92 	bl	8008be2 <HAL_UART_Transmit>

    // Start I2S DMA
    if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80012be:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012c2:	493b      	ldr	r1, [pc, #236]	@ (80013b0 <Start_Recording+0x30c>)
 80012c4:	483d      	ldr	r0, [pc, #244]	@ (80013bc <Start_Recording+0x318>)
 80012c6:	f005 f83f 	bl	8006348 <HAL_I2S_Receive_DMA>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01c      	beq.n	800130a <Start_Recording+0x266>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S2 !!!!__!!__\r\n");
 80012d0:	4940      	ldr	r1, [pc, #256]	@ (80013d4 <Start_Recording+0x330>)
 80012d2:	4823      	ldr	r0, [pc, #140]	@ (8001360 <Start_Recording+0x2bc>)
 80012d4:	f000 fd44 	bl	8001d60 <message>
        sprintf(uart_buffer, "I2S2 Error: %d\n\r", HAL_I2S_GetError(&hi2s2));
 80012d8:	4838      	ldr	r0, [pc, #224]	@ (80013bc <Start_Recording+0x318>)
 80012da:	f005 faf9 	bl	80068d0 <HAL_I2S_GetError>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	493d      	ldr	r1, [pc, #244]	@ (80013d8 <Start_Recording+0x334>)
 80012e4:	4838      	ldr	r0, [pc, #224]	@ (80013c8 <Start_Recording+0x324>)
 80012e6:	f00c fc17 	bl	800db18 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80012ea:	4837      	ldr	r0, [pc, #220]	@ (80013c8 <Start_Recording+0x324>)
 80012ec:	f7fe ff70 	bl	80001d0 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	4933      	ldr	r1, [pc, #204]	@ (80013c8 <Start_Recording+0x324>)
 80012fa:	4834      	ldr	r0, [pc, #208]	@ (80013cc <Start_Recording+0x328>)
 80012fc:	f007 fc71 	bl	8008be2 <HAL_UART_Transmit>
        Error_Handler();
 8001300:	f000 fd50 	bl	8001da4 <Error_Handler>
        return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	e09b      	b.n	8001442 <Start_Recording+0x39e>
    }
    if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 800130a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800130e:	4929      	ldr	r1, [pc, #164]	@ (80013b4 <Start_Recording+0x310>)
 8001310:	482b      	ldr	r0, [pc, #172]	@ (80013c0 <Start_Recording+0x31c>)
 8001312:	f005 f819 	bl	8006348 <HAL_I2S_Receive_DMA>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d063      	beq.n	80013e4 <Start_Recording+0x340>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S3 !!!!__!!__\r\n");
 800131c:	492f      	ldr	r1, [pc, #188]	@ (80013dc <Start_Recording+0x338>)
 800131e:	4810      	ldr	r0, [pc, #64]	@ (8001360 <Start_Recording+0x2bc>)
 8001320:	f000 fd1e 	bl	8001d60 <message>
        sprintf(uart_buffer, "I2S3 Error: %d\n\r", HAL_I2S_GetError(&hi2s3));
 8001324:	4826      	ldr	r0, [pc, #152]	@ (80013c0 <Start_Recording+0x31c>)
 8001326:	f005 fad3 	bl	80068d0 <HAL_I2S_GetError>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	492c      	ldr	r1, [pc, #176]	@ (80013e0 <Start_Recording+0x33c>)
 8001330:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <Start_Recording+0x324>)
 8001332:	f00c fbf1 	bl	800db18 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001336:	4824      	ldr	r0, [pc, #144]	@ (80013c8 <Start_Recording+0x324>)
 8001338:	f7fe ff4a 	bl	80001d0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	4920      	ldr	r1, [pc, #128]	@ (80013c8 <Start_Recording+0x324>)
 8001346:	4821      	ldr	r0, [pc, #132]	@ (80013cc <Start_Recording+0x328>)
 8001348:	f007 fc4b 	bl	8008be2 <HAL_UART_Transmit>
        Error_Handler();
 800134c:	f000 fd2a 	bl	8001da4 <Error_Handler>
        return -1;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	e075      	b.n	8001442 <Start_Recording+0x39e>
 8001356:	bf00      	nop
 8001358:	40020c00 	.word	0x40020c00
 800135c:	0800f7d4 	.word	0x0800f7d4
 8001360:	0800f80c 	.word	0x0800f80c
 8001364:	0800f81c 	.word	0x0800f81c
 8001368:	0800f870 	.word	0x0800f870
 800136c:	20000420 	.word	0x20000420
 8001370:	200000a4 	.word	0x200000a4
 8001374:	0800f874 	.word	0x0800f874
 8001378:	2000041c 	.word	0x2000041c
 800137c:	0800f898 	.word	0x0800f898
 8001380:	200034d8 	.word	0x200034d8
 8001384:	0800f8a8 	.word	0x0800f8a8
 8001388:	200034f8 	.word	0x200034f8
 800138c:	200034b8 	.word	0x200034b8
 8001390:	0800f8b8 	.word	0x0800f8b8
 8001394:	0800f8c4 	.word	0x0800f8c4
 8001398:	20001454 	.word	0x20001454
 800139c:	0800f8fc 	.word	0x0800f8fc
 80013a0:	20002484 	.word	0x20002484
 80013a4:	0800f924 	.word	0x0800f924
 80013a8:	2000549c 	.word	0x2000549c
 80013ac:	20005498 	.word	0x20005498
 80013b0:	200044b8 	.word	0x200044b8
 80013b4:	20003518 	.word	0x20003518
 80013b8:	0800f948 	.word	0x0800f948
 80013bc:	2000015c 	.word	0x2000015c
 80013c0:	200001a4 	.word	0x200001a4
 80013c4:	0800f97c 	.word	0x0800f97c
 80013c8:	20005638 	.word	0x20005638
 80013cc:	20000374 	.word	0x20000374
 80013d0:	0800f99c 	.word	0x0800f99c
 80013d4:	0800f9bc 	.word	0x0800f9bc
 80013d8:	0800f9f8 	.word	0x0800f9f8
 80013dc:	0800fa0c 	.word	0x0800fa0c
 80013e0:	0800fa48 	.word	0x0800fa48
    }

    // Confirm DMA started
    sprintf(uart_buffer, "I2S2 State after start: %d\n\r", HAL_I2S_GetState(&hi2s2));
 80013e4:	4819      	ldr	r0, [pc, #100]	@ (800144c <Start_Recording+0x3a8>)
 80013e6:	f005 fa65 	bl	80068b4 <HAL_I2S_GetState>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4918      	ldr	r1, [pc, #96]	@ (8001450 <Start_Recording+0x3ac>)
 80013f0:	4818      	ldr	r0, [pc, #96]	@ (8001454 <Start_Recording+0x3b0>)
 80013f2:	f00c fb91 	bl	800db18 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013f6:	4817      	ldr	r0, [pc, #92]	@ (8001454 <Start_Recording+0x3b0>)
 80013f8:	f7fe feea 	bl	80001d0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	4913      	ldr	r1, [pc, #76]	@ (8001454 <Start_Recording+0x3b0>)
 8001406:	4814      	ldr	r0, [pc, #80]	@ (8001458 <Start_Recording+0x3b4>)
 8001408:	f007 fbeb 	bl	8008be2 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after start: %d\n\r", HAL_I2S_GetState(&hi2s3));
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <Start_Recording+0x3b8>)
 800140e:	f005 fa51 	bl	80068b4 <HAL_I2S_GetState>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4912      	ldr	r1, [pc, #72]	@ (8001460 <Start_Recording+0x3bc>)
 8001418:	480e      	ldr	r0, [pc, #56]	@ (8001454 <Start_Recording+0x3b0>)
 800141a:	f00c fb7d 	bl	800db18 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800141e:	480d      	ldr	r0, [pc, #52]	@ (8001454 <Start_Recording+0x3b0>)
 8001420:	f7fe fed6 	bl	80001d0 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	4909      	ldr	r1, [pc, #36]	@ (8001454 <Start_Recording+0x3b0>)
 800142e:	480a      	ldr	r0, [pc, #40]	@ (8001458 <Start_Recording+0x3b4>)
 8001430:	f007 fbd7 	bl	8008be2 <HAL_UART_Transmit>

    stop_saving = 0;  // Reset stop_saving for callbacks
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <Start_Recording+0x3c0>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
    BufferCtl.fptr = 0;  // Reset file pointer
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <Start_Recording+0x3c4>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]

    return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000015c 	.word	0x2000015c
 8001450:	0800fa5c 	.word	0x0800fa5c
 8001454:	20005638 	.word	0x20005638
 8001458:	20000374 	.word	0x20000374
 800145c:	200001a4 	.word	0x200001a4
 8001460:	0800fa7c 	.word	0x0800fa7c
 8001464:	2000545c 	.word	0x2000545c
 8001468:	20005490 	.word	0x20005490

0800146c <stop_recording>:
int stop_recording(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    HAL_I2S_DMAStop(&hi2s2);
 8001470:	4837      	ldr	r0, [pc, #220]	@ (8001550 <stop_recording+0xe4>)
 8001472:	f005 f825 	bl	80064c0 <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001476:	4837      	ldr	r0, [pc, #220]	@ (8001554 <stop_recording+0xe8>)
 8001478:	f005 f822 	bl	80064c0 <HAL_I2S_DMAStop>

    // Debug I2S state after stopping
    sprintf(uart_buffer, "I2S2 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s2));
 800147c:	4834      	ldr	r0, [pc, #208]	@ (8001550 <stop_recording+0xe4>)
 800147e:	f005 fa19 	bl	80068b4 <HAL_I2S_GetState>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	4934      	ldr	r1, [pc, #208]	@ (8001558 <stop_recording+0xec>)
 8001488:	4834      	ldr	r0, [pc, #208]	@ (800155c <stop_recording+0xf0>)
 800148a:	f00c fb45 	bl	800db18 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800148e:	4833      	ldr	r0, [pc, #204]	@ (800155c <stop_recording+0xf0>)
 8001490:	f7fe fe9e 	bl	80001d0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	492f      	ldr	r1, [pc, #188]	@ (800155c <stop_recording+0xf0>)
 800149e:	4830      	ldr	r0, [pc, #192]	@ (8001560 <stop_recording+0xf4>)
 80014a0:	f007 fb9f 	bl	8008be2 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s3));
 80014a4:	482b      	ldr	r0, [pc, #172]	@ (8001554 <stop_recording+0xe8>)
 80014a6:	f005 fa05 	bl	80068b4 <HAL_I2S_GetState>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	492d      	ldr	r1, [pc, #180]	@ (8001564 <stop_recording+0xf8>)
 80014b0:	482a      	ldr	r0, [pc, #168]	@ (800155c <stop_recording+0xf0>)
 80014b2:	f00c fb31 	bl	800db18 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80014b6:	4829      	ldr	r0, [pc, #164]	@ (800155c <stop_recording+0xf0>)
 80014b8:	f7fe fe8a 	bl	80001d0 <strlen>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	4925      	ldr	r1, [pc, #148]	@ (800155c <stop_recording+0xf0>)
 80014c6:	4826      	ldr	r0, [pc, #152]	@ (8001560 <stop_recording+0xf4>)
 80014c8:	f007 fb8b 	bl	8008be2 <HAL_UART_Transmit>

    read_and_print_registers();
 80014cc:	f000 f9b2 	bl	8001834 <read_and_print_registers>

    // Update WAV headers
    f_lseek(&file_1, 0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4825      	ldr	r0, [pc, #148]	@ (8001568 <stop_recording+0xfc>)
 80014d4:	f00b fe5d 	bl	800d192 <f_lseek>
    f_lseek(&file_2, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	4824      	ldr	r0, [pc, #144]	@ (800156c <stop_recording+0x100>)
 80014dc:	f00b fe59 	bl	800d192 <f_lseek>
    WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 80014e0:	4923      	ldr	r1, [pc, #140]	@ (8001570 <stop_recording+0x104>)
 80014e2:	4824      	ldr	r0, [pc, #144]	@ (8001574 <stop_recording+0x108>)
 80014e4:	f000 fbf2 	bl	8001ccc <WavProcess_HeaderUpdate>
    f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <stop_recording+0x10c>)
 80014ea:	222c      	movs	r2, #44	@ 0x2c
 80014ec:	4921      	ldr	r1, [pc, #132]	@ (8001574 <stop_recording+0x108>)
 80014ee:	481e      	ldr	r0, [pc, #120]	@ (8001568 <stop_recording+0xfc>)
 80014f0:	f00b fc13 	bl	800cd1a <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <stop_recording+0x10c>)
 80014f6:	222c      	movs	r2, #44	@ 0x2c
 80014f8:	491e      	ldr	r1, [pc, #120]	@ (8001574 <stop_recording+0x108>)
 80014fa:	481c      	ldr	r0, [pc, #112]	@ (800156c <stop_recording+0x100>)
 80014fc:	f00b fc0d 	bl	800cd1a <f_write>

    f_close(&file_1);
 8001500:	4819      	ldr	r0, [pc, #100]	@ (8001568 <stop_recording+0xfc>)
 8001502:	f00b fe1c 	bl	800d13e <f_close>
    f_close(&file_2);
 8001506:	4819      	ldr	r0, [pc, #100]	@ (800156c <stop_recording+0x100>)
 8001508:	f00b fe19 	bl	800d13e <f_close>

    fresult = f_mount(NULL, "/", 1);
 800150c:	2201      	movs	r2, #1
 800150e:	491b      	ldr	r1, [pc, #108]	@ (800157c <stop_recording+0x110>)
 8001510:	2000      	movs	r0, #0
 8001512:	f00b f895 	bl	800c640 <f_mount>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <stop_recording+0x114>)
 800151c:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <stop_recording+0x114>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <stop_recording+0xc6>
        message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 8001526:	4817      	ldr	r0, [pc, #92]	@ (8001584 <stop_recording+0x118>)
 8001528:	f000 fc1a 	bl	8001d60 <message>
        return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	e00c      	b.n	800154c <stop_recording+0xe0>
    }

    message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 8001532:	4815      	ldr	r0, [pc, #84]	@ (8001588 <stop_recording+0x11c>)
 8001534:	f000 fc14 	bl	8001d60 <message>

    stop_saving = 1;  // Moved after file operations
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <stop_recording+0x120>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
    save_frequency = 0;  // Reset here is fine, but handle_recording resets it too
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <stop_recording+0x124>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

    HAL_Delay(200);  // Reduced delay, adjust if needed
 8001544:	20c8      	movs	r0, #200	@ 0xc8
 8001546:	f002 f957 	bl	80037f8 <HAL_Delay>

    return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000015c 	.word	0x2000015c
 8001554:	200001a4 	.word	0x200001a4
 8001558:	0800fa9c 	.word	0x0800fa9c
 800155c:	20005638 	.word	0x20005638
 8001560:	20000374 	.word	0x20000374
 8001564:	0800fab8 	.word	0x0800fab8
 8001568:	20001454 	.word	0x20001454
 800156c:	20002484 	.word	0x20002484
 8001570:	20005464 	.word	0x20005464
 8001574:	2000549c 	.word	0x2000549c
 8001578:	20005498 	.word	0x20005498
 800157c:	0800f870 	.word	0x0800f870
 8001580:	200000a4 	.word	0x200000a4
 8001584:	0800fad4 	.word	0x0800fad4
 8001588:	0800faf8 	.word	0x0800faf8
 800158c:	2000545c 	.word	0x2000545c
 8001590:	20005458 	.word	0x20005458

08001594 <HAL_I2S_RxCpltCallback>:
// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_I2S_RxCpltCallback+0x74>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d12d      	bne.n	8001600 <HAL_I2S_RxCpltCallback+0x6c>
	    if (hi2s->Instance == SPI2) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a18      	ldr	r2, [pc, #96]	@ (800160c <HAL_I2S_RxCpltCallback+0x78>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10b      	bne.n	80015c6 <HAL_I2S_RxCpltCallback+0x32>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_I2S_RxCpltCallback+0x7c>)
 80015b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80015b4:	4917      	ldr	r1, [pc, #92]	@ (8001614 <HAL_I2S_RxCpltCallback+0x80>)
 80015b6:	4818      	ldr	r0, [pc, #96]	@ (8001618 <HAL_I2S_RxCpltCallback+0x84>)
 80015b8:	f00b fbaf 	bl	800cd1a <f_write>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2S_RxCpltCallback+0x32>
				Error_Handler();  // File write failed
 80015c2:	f000 fbef 	bl	8001da4 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a14      	ldr	r2, [pc, #80]	@ (800161c <HAL_I2S_RxCpltCallback+0x88>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d10b      	bne.n	80015e8 <HAL_I2S_RxCpltCallback+0x54>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <HAL_I2S_RxCpltCallback+0x8c>)
 80015d2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80015d6:	4913      	ldr	r1, [pc, #76]	@ (8001624 <HAL_I2S_RxCpltCallback+0x90>)
 80015d8:	4813      	ldr	r0, [pc, #76]	@ (8001628 <HAL_I2S_RxCpltCallback+0x94>)
 80015da:	f00b fb9e 	bl	800cd1a <f_write>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2S_RxCpltCallback+0x54>
				Error_Handler();  // File write failed
 80015e4:	f000 fbde 	bl	8001da4 <Error_Handler>
			}
		}
	    save_frequency ++;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_I2S_RxCpltCallback+0x98>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <HAL_I2S_RxCpltCallback+0x98>)
 80015f0:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_I2S_RxCpltCallback+0x9c>)
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_I2S_RxCpltCallback+0x7c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <HAL_I2S_RxCpltCallback+0x9c>)
 80015fe:	6053      	str	r3, [r2, #4]
	                sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
	                HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
	            }*/

	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000545c 	.word	0x2000545c
 800160c:	40003800 	.word	0x40003800
 8001610:	200034d0 	.word	0x200034d0
 8001614:	20004c88 	.word	0x20004c88
 8001618:	20001454 	.word	0x20001454
 800161c:	40003c00 	.word	0x40003c00
 8001620:	200034d4 	.word	0x200034d4
 8001624:	20003ce8 	.word	0x20003ce8
 8001628:	20002484 	.word	0x20002484
 800162c:	20005458 	.word	0x20005458
 8001630:	20005490 	.word	0x20005490

08001634 <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d121      	bne.n	8001688 <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <HAL_I2S_RxHalfCpltCallback+0x60>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10b      	bne.n	8001666 <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8001650:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001654:	4911      	ldr	r1, [pc, #68]	@ (800169c <HAL_I2S_RxHalfCpltCallback+0x68>)
 8001656:	4812      	ldr	r0, [pc, #72]	@ (80016a0 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8001658:	f00b fb5f 	bl	800cd1a <f_write>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 8001662:	f000 fb9f 	bl	8001da4 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <HAL_I2S_RxHalfCpltCallback+0x70>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d10b      	bne.n	8001688 <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8001670:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8001672:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <HAL_I2S_RxHalfCpltCallback+0x78>)
 8001678:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 800167a:	f00b fb4e 	bl	800cd1a <f_write>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 8001684:	f000 fb8e 	bl	8001da4 <Error_Handler>
	    	}
	    }
	}

}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000545c 	.word	0x2000545c
 8001694:	40003800 	.word	0x40003800
 8001698:	200034d0 	.word	0x200034d0
 800169c:	200044b8 	.word	0x200044b8
 80016a0:	20001454 	.word	0x20001454
 80016a4:	40003c00 	.word	0x40003c00
 80016a8:	200034d4 	.word	0x200034d4
 80016ac:	20003518 	.word	0x20003518
 80016b0:	20002484 	.word	0x20002484

080016b4 <configure_codec>:

void configure_codec() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	2205      	movs	r2, #5
 80016c0:	21e2      	movs	r1, #226	@ 0xe2
 80016c2:	482e      	ldr	r0, [pc, #184]	@ (800177c <configure_codec+0xc8>)
 80016c4:	f003 ff26 	bl	8005514 <HAL_I2C_IsDeviceReady>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 80016ce:	492c      	ldr	r1, [pc, #176]	@ (8001780 <configure_codec+0xcc>)
 80016d0:	482c      	ldr	r0, [pc, #176]	@ (8001784 <configure_codec+0xd0>)
 80016d2:	f000 fb45 	bl	8001d60 <message>
    }
    HAL_Delay(500);
 80016d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016da:	f002 f88d 	bl	80037f8 <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	e023      	b.n	800172c <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 80016e4:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <configure_codec+0xd4>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	785b      	ldrb	r3, [r3, #1]
 80016ee:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 80016f0:	4a25      	ldr	r2, [pc, #148]	@ (8001788 <configure_codec+0xd4>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016f8:	461a      	mov	r2, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	1cfb      	adds	r3, r7, #3
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	21e2      	movs	r1, #226	@ 0xe2
 800170c:	481b      	ldr	r0, [pc, #108]	@ (800177c <configure_codec+0xc8>)
 800170e:	f003 fbe1 	bl	8004ed4 <HAL_I2C_Mem_Write>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 8001718:	491c      	ldr	r1, [pc, #112]	@ (800178c <configure_codec+0xd8>)
 800171a:	481a      	ldr	r0, [pc, #104]	@ (8001784 <configure_codec+0xd0>)
 800171c:	f000 fb20 	bl	8001d60 <message>
        }
        HAL_Delay(100);
 8001720:	2064      	movs	r0, #100	@ 0x64
 8001722:	f002 f869 	bl	80037f8 <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3301      	adds	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b0e      	cmp	r3, #14
 8001730:	d9d8      	bls.n	80016e4 <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	2301      	movs	r3, #1
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2206      	movs	r2, #6
 8001744:	21e2      	movs	r1, #226	@ 0xe2
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <configure_codec+0xc8>)
 8001748:	f003 fcbe 	bl	80050c8 <HAL_I2C_Mem_Read>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10b      	bne.n	800176a <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001758:	480d      	ldr	r0, [pc, #52]	@ (8001790 <configure_codec+0xdc>)
 800175a:	f002 ff21 	bl	80045a0 <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 8001762:	200a      	movs	r0, #10
 8001764:	f002 f848 	bl	80037f8 <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 8001768:	e003      	b.n	8001772 <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 800176a:	490a      	ldr	r1, [pc, #40]	@ (8001794 <configure_codec+0xe0>)
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <configure_codec+0xd0>)
 800176e:	f000 faf7 	bl	8001d60 <message>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000b4 	.word	0x200000b4
 8001780:	0800fb2c 	.word	0x0800fb2c
 8001784:	0800f80c 	.word	0x0800f80c
 8001788:	20000000 	.word	0x20000000
 800178c:	0800fb58 	.word	0x0800fb58
 8001790:	40020c00 	.word	0x40020c00
 8001794:	0800fb84 	.word	0x0800fb84

08001798 <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 800179c:	4910      	ldr	r1, [pc, #64]	@ (80017e0 <CODEC_RST+0x48>)
 800179e:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <CODEC_RST+0x4c>)
 80017a0:	f000 fade 	bl	8001d60 <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 80017a4:	2201      	movs	r2, #1
 80017a6:	2102      	movs	r1, #2
 80017a8:	480f      	ldr	r0, [pc, #60]	@ (80017e8 <CODEC_RST+0x50>)
 80017aa:	f002 fef9 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80017ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017b2:	f002 f821 	bl	80037f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2102      	movs	r1, #2
 80017ba:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <CODEC_RST+0x50>)
 80017bc:	f002 fef0 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80017c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c4:	f002 f818 	bl	80037f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2102      	movs	r1, #2
 80017cc:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <CODEC_RST+0x50>)
 80017ce:	f002 fee7 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 80017d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d6:	f002 f80f 	bl	80037f8 <HAL_Delay>

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800fc98 	.word	0x0800fc98
 80017e4:	0800f80c 	.word	0x0800f80c
 80017e8:	40021000 	.word	0x40021000

080017ec <TS472IQT_EN>:

void TS472IQT_EN(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <TS472IQT_EN+0x40>)
 80017f8:	f002 fed2 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001802:	480b      	ldr	r0, [pc, #44]	@ (8001830 <TS472IQT_EN+0x44>)
 8001804:	f002 fecc 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800180e:	4808      	ldr	r0, [pc, #32]	@ (8001830 <TS472IQT_EN+0x44>)
 8001810:	f002 fec6 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <TS472IQT_EN+0x44>)
 800181c:	f002 fec0 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001820:	2064      	movs	r0, #100	@ 0x64
 8001822:	f001 ffe9 	bl	80037f8 <HAL_Delay>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40020000 	.word	0x40020000

08001834 <read_and_print_registers>:


// Function to read and print register values
void read_and_print_registers() {
 8001834:	b5b0      	push	{r4, r5, r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af04      	add	r7, sp, #16
    uint8_t i2c_rbf; // Buffer to store the read byte
    HAL_StatusTypeDef ret;

    message("Reg\tName\t\tRead Value\tReset Value\r\n");
 800183a:	4832      	ldr	r0, [pc, #200]	@ (8001904 <read_and_print_registers+0xd0>)
 800183c:	f000 fa90 	bl	8001d60 <message>
    message("----------------------------------------------------------\r\n");
 8001840:	4831      	ldr	r0, [pc, #196]	@ (8001908 <read_and_print_registers+0xd4>)
 8001842:	f000 fa8d 	bl	8001d60 <message>

    for (uint8_t i = 0; i < NUM_REGISTERS; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e051      	b.n	80018f0 <read_and_print_registers+0xbc>
        uint8_t reg = registers[i].address;
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	492f      	ldr	r1, [pc, #188]	@ (800190c <read_and_print_registers+0xd8>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	71bb      	strb	r3, [r7, #6]
        ret = HAL_I2C_Mem_Read(&hi2c2, I2C_DEVICE_ADDR, reg, 1, &i2c_rbf, 1, 1000);
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	21e2      	movs	r1, #226	@ 0xe2
 8001874:	4826      	ldr	r0, [pc, #152]	@ (8001910 <read_and_print_registers+0xdc>)
 8001876:	f003 fc27 	bl	80050c8 <HAL_I2C_Mem_Read>
 800187a:	4603      	mov	r3, r0
 800187c:	717b      	strb	r3, [r7, #5]

        if (ret == HAL_OK) {
 800187e:	797b      	ldrb	r3, [r7, #5]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11b      	bne.n	80018bc <read_and_print_registers+0x88>
        	message("0x%02X\t%-15s\t0x%02X\t\t0x%02X\r\n", reg, registers[i].name, i2c_rbf, registers[i].reset_value);
 8001884:	79b9      	ldrb	r1, [r7, #6]
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	4820      	ldr	r0, [pc, #128]	@ (800190c <read_and_print_registers+0xd8>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4403      	add	r3, r0
 8001894:	3304      	adds	r3, #4
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	793b      	ldrb	r3, [r7, #4]
 800189a:	461d      	mov	r5, r3
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	4c1b      	ldr	r4, [pc, #108]	@ (800190c <read_and_print_registers+0xd8>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4423      	add	r3, r4
 80018aa:	3308      	adds	r3, #8
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	462b      	mov	r3, r5
 80018b2:	4602      	mov	r2, r0
 80018b4:	4817      	ldr	r0, [pc, #92]	@ (8001914 <read_and_print_registers+0xe0>)
 80018b6:	f000 fa53 	bl	8001d60 <message>
 80018ba:	e016      	b.n	80018ea <read_and_print_registers+0xb6>
        } else {
        	message("0x%02X\t%-15s\tError\t\t0x%02X\r\n", reg, registers[i].name, registers[i].reset_value);
 80018bc:	79b9      	ldrb	r1, [r7, #6]
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	4812      	ldr	r0, [pc, #72]	@ (800190c <read_and_print_registers+0xd8>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	3304      	adds	r3, #4
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4c0e      	ldr	r4, [pc, #56]	@ (800190c <read_and_print_registers+0xd8>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4423      	add	r3, r4
 80018de:	3308      	adds	r3, #8
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4602      	mov	r2, r0
 80018e4:	480c      	ldr	r0, [pc, #48]	@ (8001918 <read_and_print_registers+0xe4>)
 80018e6:	f000 fa3b 	bl	8001d60 <message>
    for (uint8_t i = 0; i < NUM_REGISTERS; i++) {
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	3301      	adds	r3, #1
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b0e      	cmp	r3, #14
 80018f4:	d9aa      	bls.n	800184c <read_and_print_registers+0x18>
        }
    }

    message("----------------------------------------------------------\r\n");
 80018f6:	4804      	ldr	r0, [pc, #16]	@ (8001908 <read_and_print_registers+0xd4>)
 80018f8:	f000 fa32 	bl	8001d60 <message>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	0800fcb8 	.word	0x0800fcb8
 8001908:	0800fcdc 	.word	0x0800fcdc
 800190c:	08010264 	.word	0x08010264
 8001910:	200000b4 	.word	0x200000b4
 8001914:	0800fd1c 	.word	0x0800fd1c
 8001918:	0800fd3c 	.word	0x0800fd3c

0800191c <History_update>:

void History_update(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 8001920:	494d      	ldr	r1, [pc, #308]	@ (8001a58 <History_update+0x13c>)
 8001922:	484e      	ldr	r0, [pc, #312]	@ (8001a5c <History_update+0x140>)
 8001924:	f00b fe59 	bl	800d5da <f_stat>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <History_update+0x144>)
 800192e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 8001930:	4b4b      	ldr	r3, [pc, #300]	@ (8001a60 <History_update+0x144>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 8001938:	484a      	ldr	r0, [pc, #296]	@ (8001a64 <History_update+0x148>)
 800193a:	f000 fa11 	bl	8001d60 <message>
 800193e:	e01a      	b.n	8001976 <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 8001940:	4849      	ldr	r0, [pc, #292]	@ (8001a68 <History_update+0x14c>)
 8001942:	f000 fa0d 	bl	8001d60 <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001946:	220a      	movs	r2, #10
 8001948:	4944      	ldr	r1, [pc, #272]	@ (8001a5c <History_update+0x140>)
 800194a:	4848      	ldr	r0, [pc, #288]	@ (8001a6c <History_update+0x150>)
 800194c:	f00a febe 	bl	800c6cc <f_open>
		sprintf(buffer, "%d", number);
 8001950:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <History_update+0x154>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4947      	ldr	r1, [pc, #284]	@ (8001a74 <History_update+0x158>)
 8001958:	4847      	ldr	r0, [pc, #284]	@ (8001a78 <History_update+0x15c>)
 800195a:	f00c f8dd 	bl	800db18 <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 800195e:	4846      	ldr	r0, [pc, #280]	@ (8001a78 <History_update+0x15c>)
 8001960:	f7fe fc36 	bl	80001d0 <strlen>
 8001964:	4602      	mov	r2, r0
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <History_update+0x160>)
 8001968:	4943      	ldr	r1, [pc, #268]	@ (8001a78 <History_update+0x15c>)
 800196a:	4840      	ldr	r0, [pc, #256]	@ (8001a6c <History_update+0x150>)
 800196c:	f00b f9d5 	bl	800cd1a <f_write>
		f_close(&file_1);
 8001970:	483e      	ldr	r0, [pc, #248]	@ (8001a6c <History_update+0x150>)
 8001972:	f00b fbe4 	bl	800d13e <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 8001976:	2201      	movs	r2, #1
 8001978:	4938      	ldr	r1, [pc, #224]	@ (8001a5c <History_update+0x140>)
 800197a:	483c      	ldr	r0, [pc, #240]	@ (8001a6c <History_update+0x150>)
 800197c:	f00a fea6 	bl	800c6cc <f_open>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b3e      	ldr	r3, [pc, #248]	@ (8001a80 <History_update+0x164>)
 8001986:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 8001988:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <History_update+0x164>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d15e      	bne.n	8001a4e <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 8001990:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <History_update+0x168>)
 8001992:	2263      	movs	r2, #99	@ 0x63
 8001994:	4938      	ldr	r1, [pc, #224]	@ (8001a78 <History_update+0x15c>)
 8001996:	4835      	ldr	r0, [pc, #212]	@ (8001a6c <History_update+0x150>)
 8001998:	f00b f860 	bl	800ca5c <f_read>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <History_update+0x164>)
 80019a2:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 80019a4:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <History_update+0x164>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11a      	bne.n	80019e2 <History_update+0xc6>
 80019ac:	4b35      	ldr	r3, [pc, #212]	@ (8001a84 <History_update+0x168>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d016      	beq.n	80019e2 <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <History_update+0x168>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001a78 <History_update+0x15c>)
 80019ba:	2100      	movs	r1, #0
 80019bc:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 80019be:	482e      	ldr	r0, [pc, #184]	@ (8001a78 <History_update+0x15c>)
 80019c0:	f00b fe9f 	bl	800d702 <atoi>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a70 <History_update+0x154>)
 80019c8:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 80019ca:	4b29      	ldr	r3, [pc, #164]	@ (8001a70 <History_update+0x154>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a27      	ldr	r2, [pc, #156]	@ (8001a70 <History_update+0x154>)
 80019d2:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 80019d4:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <History_update+0x154>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	482b      	ldr	r0, [pc, #172]	@ (8001a88 <History_update+0x16c>)
 80019dc:	f000 f9c0 	bl	8001d60 <message>
 80019e0:	e002      	b.n	80019e8 <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 80019e2:	482a      	ldr	r0, [pc, #168]	@ (8001a8c <History_update+0x170>)
 80019e4:	f000 f9bc 	bl	8001d60 <message>
		}
		f_close(&file_1); // Close the file
 80019e8:	4820      	ldr	r0, [pc, #128]	@ (8001a6c <History_update+0x150>)
 80019ea:	f00b fba8 	bl	800d13e <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80019ee:	220a      	movs	r2, #10
 80019f0:	491a      	ldr	r1, [pc, #104]	@ (8001a5c <History_update+0x140>)
 80019f2:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <History_update+0x150>)
 80019f4:	f00a fe6a 	bl	800c6cc <f_open>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <History_update+0x164>)
 80019fe:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <History_update+0x164>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11e      	bne.n	8001a46 <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <History_update+0x154>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4919      	ldr	r1, [pc, #100]	@ (8001a74 <History_update+0x158>)
 8001a10:	4819      	ldr	r0, [pc, #100]	@ (8001a78 <History_update+0x15c>)
 8001a12:	f00c f881 	bl	800db18 <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 8001a16:	4818      	ldr	r0, [pc, #96]	@ (8001a78 <History_update+0x15c>)
 8001a18:	f7fe fbda 	bl	80001d0 <strlen>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <History_update+0x160>)
 8001a20:	4915      	ldr	r1, [pc, #84]	@ (8001a78 <History_update+0x15c>)
 8001a22:	4812      	ldr	r0, [pc, #72]	@ (8001a6c <History_update+0x150>)
 8001a24:	f00b f979 	bl	800cd1a <f_write>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <History_update+0x164>)
 8001a2e:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <History_update+0x164>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 8001a38:	4815      	ldr	r0, [pc, #84]	@ (8001a90 <History_update+0x174>)
 8001a3a:	f000 f991 	bl	8001d60 <message>
			}
			f_close(&file_1); // Close the file
 8001a3e:	480b      	ldr	r0, [pc, #44]	@ (8001a6c <History_update+0x150>)
 8001a40:	f00b fb7d 	bl	800d13e <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 8001a44:	e006      	b.n	8001a54 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 8001a46:	4813      	ldr	r0, [pc, #76]	@ (8001a94 <History_update+0x178>)
 8001a48:	f000 f98a 	bl	8001d60 <message>
}
 8001a4c:	e002      	b.n	8001a54 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 8001a4e:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <History_update+0x17c>)
 8001a50:	f000 f986 	bl	8001d60 <message>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200034b8 	.word	0x200034b8
 8001a5c:	0800fd5c 	.word	0x0800fd5c
 8001a60:	200000a4 	.word	0x200000a4
 8001a64:	0800fd68 	.word	0x0800fd68
 8001a68:	0800fd8c 	.word	0x0800fd8c
 8001a6c:	20001454 	.word	0x20001454
 8001a70:	2000041c 	.word	0x2000041c
 8001a74:	0800fda8 	.word	0x0800fda8
 8001a78:	200003b8 	.word	0x200003b8
 8001a7c:	200000ac 	.word	0x200000ac
 8001a80:	200034b4 	.word	0x200034b4
 8001a84:	200000a8 	.word	0x200000a8
 8001a88:	0800fdac 	.word	0x0800fdac
 8001a8c:	0800fdc4 	.word	0x0800fdc4
 8001a90:	0800fde0 	.word	0x0800fde0
 8001a94:	0800fdfc 	.word	0x0800fdfc
 8001a98:	0800fe28 	.word	0x0800fe28

08001a9c <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001aae:	2202      	movs	r2, #2
 8001ab0:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8001ab2:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001aba:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <WavProcess_EncInit+0x7c>)
 8001abc:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ac0:	222c      	movs	r2, #44	@ 0x2c
 8001ac2:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 8001ac8:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001aca:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001acc:	08d2      	lsrs	r2, r2, #3
 8001ace:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ad6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ade:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ae2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001ae6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	fb12 f303 	smulbb	r3, r2, r3
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001af4:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 8001af6:	4907      	ldr	r1, [pc, #28]	@ (8001b14 <WavProcess_EncInit+0x78>)
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f000 f80f 	bl	8001b1c <WavProcess_HeaderInit>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <WavProcess_EncInit+0x6c>
  {
    return 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <WavProcess_EncInit+0x6e>
  }
  return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20005464 	.word	0x20005464
 8001b18:	001d4c00 	.word	0x001d4c00

08001b1c <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2252      	movs	r2, #82	@ 0x52
 8001b2a:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	2249      	movs	r2, #73	@ 0x49
 8001b32:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3302      	adds	r3, #2
 8001b38:	2246      	movs	r2, #70	@ 0x46
 8001b3a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	2246      	movs	r2, #70	@ 0x46
 8001b42:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3305      	adds	r3, #5
 8001b50:	224c      	movs	r2, #76	@ 0x4c
 8001b52:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3306      	adds	r3, #6
 8001b58:	221d      	movs	r2, #29
 8001b5a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3307      	adds	r3, #7
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	2257      	movs	r2, #87	@ 0x57
 8001b6a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3309      	adds	r3, #9
 8001b70:	2241      	movs	r2, #65	@ 0x41
 8001b72:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	330a      	adds	r3, #10
 8001b78:	2256      	movs	r2, #86	@ 0x56
 8001b7a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	330b      	adds	r3, #11
 8001b80:	2245      	movs	r2, #69	@ 0x45
 8001b82:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	330c      	adds	r3, #12
 8001b88:	2266      	movs	r2, #102	@ 0x66
 8001b8a:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	330d      	adds	r3, #13
 8001b90:	226d      	movs	r2, #109	@ 0x6d
 8001b92:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	330e      	adds	r3, #14
 8001b98:	2274      	movs	r2, #116	@ 0x74
 8001b9a:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	330f      	adds	r3, #15
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	2210      	movs	r2, #16
 8001baa:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3311      	adds	r3, #17
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3312      	adds	r3, #18
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3313      	adds	r3, #19
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3314      	adds	r3, #20
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3315      	adds	r3, #21
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	8ada      	ldrh	r2, [r3, #22]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3316      	adds	r3, #22
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3317      	adds	r3, #23
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3318      	adds	r3, #24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	0a1a      	lsrs	r2, r3, #8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3319      	adds	r3, #25
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	0c1a      	lsrs	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	331a      	adds	r3, #26
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	0e1a      	lsrs	r2, r3, #24
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	331b      	adds	r3, #27
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	331c      	adds	r3, #28
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	0a1a      	lsrs	r2, r3, #8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	331d      	adds	r3, #29
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	0c1a      	lsrs	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	331e      	adds	r3, #30
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	0e1a      	lsrs	r2, r3, #24
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	331f      	adds	r3, #31
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	8c1a      	ldrh	r2, [r3, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3321      	adds	r3, #33	@ 0x21
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3322      	adds	r3, #34	@ 0x22
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3323      	adds	r3, #35	@ 0x23
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3324      	adds	r3, #36	@ 0x24
 8001c80:	2264      	movs	r2, #100	@ 0x64
 8001c82:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3325      	adds	r3, #37	@ 0x25
 8001c88:	2261      	movs	r2, #97	@ 0x61
 8001c8a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3326      	adds	r3, #38	@ 0x26
 8001c90:	2274      	movs	r2, #116	@ 0x74
 8001c92:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3327      	adds	r3, #39	@ 0x27
 8001c98:	2261      	movs	r2, #97	@ 0x61
 8001c9a:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3328      	adds	r3, #40	@ 0x28
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3329      	adds	r3, #41	@ 0x29
 8001ca8:	224c      	movs	r2, #76	@ 0x4c
 8001caa:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	332a      	adds	r3, #42	@ 0x2a
 8001cb0:	221d      	movs	r2, #29
 8001cb2:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	332b      	adds	r3, #43	@ 0x2b
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	0a1a      	lsrs	r2, r3, #8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3305      	adds	r3, #5
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0c1a      	lsrs	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0e1a      	lsrs	r2, r3, #24
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3307      	adds	r3, #7
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	3b2c      	subs	r3, #44	@ 0x2c
 8001d12:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d14:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3328      	adds	r3, #40	@ 0x28
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	0a1a      	lsrs	r2, r3, #8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3329      	adds	r3, #41	@ 0x29
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1a      	lsrs	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	332a      	adds	r3, #42	@ 0x2a
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <WavProcess_HeaderUpdate+0x90>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0e1a      	lsrs	r2, r3, #24
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	332b      	adds	r3, #43	@ 0x2b
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20005490 	.word	0x20005490

08001d60 <message>:

void message(const char *format, ...) {
 8001d60:	b40f      	push	{r0, r1, r2, r3}
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 8001d68:	2064      	movs	r0, #100	@ 0x64
 8001d6a:	f00b fccf 	bl	800d70c <malloc>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <message+0x36>
        va_list args;
        va_start(args, format);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	2164      	movs	r1, #100	@ 0x64
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f00b ff81 	bl	800dc8c <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fbf0 	bl	8000570 <Send_Uart>
        free(buf);      // Free the allocated memory
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f00b fcc3 	bl	800d71c <free>
    }
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da0:	b004      	add	sp, #16
 8001da2:	4770      	bx	lr

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <Error_Handler+0x8>

08001db0 <eeprom_init>:

#include "new_eeprom.h"


HAL_StatusTypeDef eeprom_init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, EEPROMWIRTE, 10, HAL_MAX_DELAY)!=HAL_OK)
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	220a      	movs	r2, #10
 8001dba:	21a0      	movs	r1, #160	@ 0xa0
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <eeprom_init+0x24>)
 8001dbe:	f003 fba9 	bl	8005514 <HAL_I2C_IsDeviceReady>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <eeprom_init+0x1c>
	{
		return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <eeprom_init+0x1e>
	}
	else
	{
		return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
	}
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000108 	.word	0x20000108

08001dd8 <eeprom_write>:
	}
}


HAL_StatusTypeDef eeprom_write(uint16_t addr,uint8_t* data,uint8_t len)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af04      	add	r7, sp, #16
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	80fb      	strh	r3, [r7, #6]
 8001de4:	4613      	mov	r3, r2
 8001de6:	717b      	strb	r3, [r7, #5]
	if(len > 128)
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	2b80      	cmp	r3, #128	@ 0x80
 8001dec:	d901      	bls.n	8001df2 <eeprom_write+0x1a>
	{
		return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e016      	b.n	8001e20 <eeprom_write+0x48>
	}
	else
	{
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, addr, 2, data, len, HAL_MAX_DELAY)!=HAL_OK)
 8001df2:	797b      	ldrb	r3, [r7, #5]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	88fa      	ldrh	r2, [r7, #6]
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	9102      	str	r1, [sp, #8]
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2302      	movs	r3, #2
 8001e06:	21a0      	movs	r1, #160	@ 0xa0
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <eeprom_write+0x50>)
 8001e0a:	f003 f863 	bl	8004ed4 <HAL_I2C_Mem_Write>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <eeprom_write+0x40>
		{
		return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e003      	b.n	8001e20 <eeprom_write+0x48>
		}
		HAL_Delay(10);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f001 fced 	bl	80037f8 <HAL_Delay>
		return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
	}
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000108 	.word	0x20000108

08001e2c <eeprom_read>:
    if (HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr, 2, buffer, len, HAL_MAX_DELAY) != HAL_OK) {
        return NULL;  // Read failed
    }
    return buffer;  // Return pointer to the provided buffer
}*/
uint8_t* eeprom_read(uint16_t addr, uint8_t* buffer, uint16_t len) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	@ 0x38
 8001e30:	af04      	add	r7, sp, #16
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	80fb      	strh	r3, [r7, #6]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	80bb      	strh	r3, [r7, #4]
    // Removed initial check to debug I2C read
    uint16_t offset = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001e40:	e043      	b.n	8001eca <eeprom_read+0x9e>
        uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001e42:	88ba      	ldrh	r2, [r7, #4]
 8001e44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b80      	cmp	r3, #128	@ 0x80
 8001e4a:	bfa8      	it	ge
 8001e4c:	2380      	movge	r3, #128	@ 0x80
 8001e4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr + offset, 2, buffer + offset, chunk_size, HAL_MAX_DELAY);
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e54:	4413      	add	r3, r2
 8001e56:	b299      	uxth	r1, r3
 8001e58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e66:	9201      	str	r2, [sp, #4]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	21a1      	movs	r1, #161	@ 0xa1
 8001e70:	481e      	ldr	r0, [pc, #120]	@ (8001eec <eeprom_read+0xc0>)
 8001e72:	f003 f929 	bl	80050c8 <HAL_I2C_Mem_Read>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status != HAL_OK) {
 8001e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01e      	beq.n	8001ec2 <eeprom_read+0x96>
            HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read fail at offset ", 27, HAL_MAX_DELAY);
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	221b      	movs	r2, #27
 8001e8a:	4919      	ldr	r1, [pc, #100]	@ (8001ef0 <eeprom_read+0xc4>)
 8001e8c:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <eeprom_read+0xc8>)
 8001e8e:	f006 fea8 	bl	8008be2 <HAL_UART_Transmit>
            char msg[20];
            sprintf(msg, "%d, status: %d\n\r", offset, status);
 8001e92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e98:	f107 000c 	add.w	r0, r7, #12
 8001e9c:	4916      	ldr	r1, [pc, #88]	@ (8001ef8 <eeprom_read+0xcc>)
 8001e9e:	f00b fe3b 	bl	800db18 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe f992 	bl	80001d0 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f107 010c 	add.w	r1, r7, #12
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <eeprom_read+0xc8>)
 8001eba:	f006 fe92 	bl	8008be2 <HAL_UART_Transmit>
            return NULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e00f      	b.n	8001ee2 <eeprom_read+0xb6>
        }
        offset += chunk_size;
 8001ec2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ec4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ec6:	4413      	add	r3, r2
 8001ec8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001eca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ecc:	88bb      	ldrh	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d3b7      	bcc.n	8001e42 <eeprom_read+0x16>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read complete\n\r", 22, HAL_MAX_DELAY);
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	2216      	movs	r2, #22
 8001ed8:	4908      	ldr	r1, [pc, #32]	@ (8001efc <eeprom_read+0xd0>)
 8001eda:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <eeprom_read+0xc8>)
 8001edc:	f006 fe81 	bl	8008be2 <HAL_UART_Transmit>
    return buffer;
 8001ee0:	683b      	ldr	r3, [r7, #0]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3728      	adds	r7, #40	@ 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000108 	.word	0x20000108
 8001ef0:	0800fe48 	.word	0x0800fe48
 8001ef4:	20000374 	.word	0x20000374
 8001ef8:	0800fe64 	.word	0x0800fe64
 8001efc:	0800fe78 	.word	0x0800fe78

08001f00 <eeprom_store_config>:
    HAL_UART_Transmit(huart, (uint8_t*)"String read from EEPROM: ", 25, HAL_MAX_DELAY);
    HAL_UART_Transmit(huart, buffer, len, HAL_MAX_DELAY);
    HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef eeprom_store_config(const char* config) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(config) + 1;
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7fe f961 	bl	80001d0 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	81bb      	strh	r3, [r7, #12]
    if (len > EEPROMSIZE)
    	{
    	HAL_UART_Transmit(&huart3, (uint8_t*)"Config too long\n\r", 17, HAL_MAX_DELAY);
    	return HAL_ERROR;
    	}
    	uint16_t offset = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	81fb      	strh	r3, [r7, #14]
        while (offset < len) {
 8001f1a:	e029      	b.n	8001f70 <eeprom_store_config+0x70>
            uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001f1c:	89ba      	ldrh	r2, [r7, #12]
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b80      	cmp	r3, #128	@ 0x80
 8001f24:	bfa8      	it	ge
 8001f26:	2380      	movge	r3, #128	@ 0x80
 8001f28:	817b      	strh	r3, [r7, #10]
            if (HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, ALARM_CONFIG_ADDR + offset, 2, (uint8_t*)(config + offset), chunk_size, HAL_MAX_DELAY) != HAL_OK) {
 8001f2a:	89fb      	ldrh	r3, [r7, #14]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	89f9      	ldrh	r1, [r7, #14]
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	897a      	ldrh	r2, [r7, #10]
 8001f3a:	9201      	str	r2, [sp, #4]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2302      	movs	r3, #2
 8001f40:	460a      	mov	r2, r1
 8001f42:	21a0      	movs	r1, #160	@ 0xa0
 8001f44:	480f      	ldr	r0, [pc, #60]	@ (8001f84 <eeprom_store_config+0x84>)
 8001f46:	f002 ffc5 	bl	8004ed4 <HAL_I2C_Mem_Write>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <eeprom_store_config+0x62>
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM write fail\n\r", 19, HAL_MAX_DELAY);
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	2213      	movs	r2, #19
 8001f56:	490c      	ldr	r1, [pc, #48]	@ (8001f88 <eeprom_store_config+0x88>)
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <eeprom_store_config+0x8c>)
 8001f5a:	f006 fe42 	bl	8008be2 <HAL_UART_Transmit>
                return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00b      	b.n	8001f7a <eeprom_store_config+0x7a>
            }
            HAL_Delay(10);  // EEPROM write cycle delay
 8001f62:	200a      	movs	r0, #10
 8001f64:	f001 fc48 	bl	80037f8 <HAL_Delay>
            offset += chunk_size;
 8001f68:	89fa      	ldrh	r2, [r7, #14]
 8001f6a:	897b      	ldrh	r3, [r7, #10]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	81fb      	strh	r3, [r7, #14]
        while (offset < len) {
 8001f70:	89fa      	ldrh	r2, [r7, #14]
 8001f72:	89bb      	ldrh	r3, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3d1      	bcc.n	8001f1c <eeprom_store_config+0x1c>
        }
        return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000108 	.word	0x20000108
 8001f88:	0800fee4 	.word	0x0800fee4
 8001f8c:	20000374 	.word	0x20000374

08001f90 <eeprom_read_config>:
        buffer[max_len - 1] = '\0';
        return HAL_OK;
    }
    return HAL_ERROR;
}*/
HAL_StatusTypeDef eeprom_read_config(char* buffer, uint16_t max_len) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
    const uint16_t read_size = 256;  // Read 2 pages
 8001f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa0:	81fb      	strh	r3, [r7, #14]
    if (max_len < read_size) {
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d208      	bcs.n	8001fbc <eeprom_read_config+0x2c>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Buffer too small for 2 pages\n\r", 30, HAL_MAX_DELAY);
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	221e      	movs	r2, #30
 8001fb0:	491f      	ldr	r1, [pc, #124]	@ (8002030 <eeprom_read_config+0xa0>)
 8001fb2:	4820      	ldr	r0, [pc, #128]	@ (8002034 <eeprom_read_config+0xa4>)
 8001fb4:	f006 fe15 	bl	8008be2 <HAL_UART_Transmit>
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e034      	b.n	8002026 <eeprom_read_config+0x96>
    }
    if (eeprom_read(ALARM_CONFIG_ADDR, (uint8_t*)buffer, read_size) != NULL) {
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff32 	bl	8001e2c <eeprom_read>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d023      	beq.n	8002016 <eeprom_read_config+0x86>
        buffer[read_size - 1] = '\0';
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
        if (strlen(buffer) > 0 && buffer[0] != 0xFF && buffer[0] != 0x00) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <eeprom_read_config+0x74>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2bff      	cmp	r3, #255	@ 0xff
 8001fe8:	d00c      	beq.n	8002004 <eeprom_read_config+0x74>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <eeprom_read_config+0x74>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Config read success (256 bytes)\n\r", 33, HAL_MAX_DELAY);
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	2221      	movs	r2, #33	@ 0x21
 8001ff8:	490f      	ldr	r1, [pc, #60]	@ (8002038 <eeprom_read_config+0xa8>)
 8001ffa:	480e      	ldr	r0, [pc, #56]	@ (8002034 <eeprom_read_config+0xa4>)
 8001ffc:	f006 fdf1 	bl	8008be2 <HAL_UART_Transmit>
            return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e010      	b.n	8002026 <eeprom_read_config+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Config empty or invalid\n\r", 25, HAL_MAX_DELAY);
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	2219      	movs	r2, #25
 800200a:	490c      	ldr	r1, [pc, #48]	@ (800203c <eeprom_read_config+0xac>)
 800200c:	4809      	ldr	r0, [pc, #36]	@ (8002034 <eeprom_read_config+0xa4>)
 800200e:	f006 fde8 	bl	8008be2 <HAL_UART_Transmit>
            return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e007      	b.n	8002026 <eeprom_read_config+0x96>
        }
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read config fail\n\r", 25, HAL_MAX_DELAY);
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	2219      	movs	r2, #25
 800201c:	4908      	ldr	r1, [pc, #32]	@ (8002040 <eeprom_read_config+0xb0>)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <eeprom_read_config+0xa4>)
 8002020:	f006 fddf 	bl	8008be2 <HAL_UART_Transmit>
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800fef8 	.word	0x0800fef8
 8002034:	20000374 	.word	0x20000374
 8002038:	0800ff18 	.word	0x0800ff18
 800203c:	0800ff3c 	.word	0x0800ff3c
 8002040:	0800ff58 	.word	0x0800ff58

08002044 <decimal_to_bcd>:
rtc_timedate_t alarm_queue[MAX_ALARMS] = {0}; // Global alarm queue
uint8_t alarm_count = 0;                      // Global alarm count
uint8_t current_idx = 0;                      // Global current index


uint8_t decimal_to_bcd(uint8_t decimal) {
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <decimal_to_bcd+0x44>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	b258      	sxtb	r0, r3
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <decimal_to_bcd+0x44>)
 8002062:	fba3 1302 	umull	r1, r3, r3, r2
 8002066:	08d9      	lsrs	r1, r3, #3
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	b25b      	sxtb	r3, r3
 8002076:	4303      	orrs	r3, r0
 8002078:	b25b      	sxtb	r3, r3
 800207a:	b2db      	uxtb	r3, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	cccccccd 	.word	0xcccccccd

0800208c <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd) {
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b2db      	uxtb	r3, r3
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <rtc_init>:
void rtc_init(I2C_HandleTypeDef *hi2c)
{// 1 check if rtc is ready
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	6078      	str	r0, [r7, #4]
	ret=HAL_I2C_IsDeviceReady(&hi2c1, slavwrite, 10, HAL_MAX_DELAY);
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
 80020cc:	220a      	movs	r2, #10
 80020ce:	21a2      	movs	r1, #162	@ 0xa2
 80020d0:	4881      	ldr	r0, [pc, #516]	@ (80022d8 <rtc_init+0x218>)
 80020d2:	f003 fa1f 	bl	8005514 <HAL_I2C_IsDeviceReady>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b80      	ldr	r3, [pc, #512]	@ (80022dc <rtc_init+0x21c>)
 80020dc:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80020de:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <rtc_init+0x21c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <rtc_init+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ec:	487c      	ldr	r0, [pc, #496]	@ (80022e0 <rtc_init+0x220>)
 80020ee:	f002 fa57 	bl	80045a0 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80020f2:	2064      	movs	r0, #100	@ 0x64
 80020f4:	f001 fb80 	bl	80037f8 <HAL_Delay>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC ok\n\r", 8, HAL_MAX_DELAY);
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	2208      	movs	r2, #8
 80020fe:	4979      	ldr	r1, [pc, #484]	@ (80022e4 <rtc_init+0x224>)
 8002100:	4879      	ldr	r0, [pc, #484]	@ (80022e8 <rtc_init+0x228>)
 8002102:	f006 fd6e 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002106:	2064      	movs	r0, #100	@ 0x64
 8002108:	f001 fb76 	bl	80037f8 <HAL_Delay>
 800210c:	e009      	b.n	8002122 <rtc_init+0x62>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC notok\n\r", 11, HAL_MAX_DELAY);
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	220b      	movs	r2, #11
 8002114:	4975      	ldr	r1, [pc, #468]	@ (80022ec <rtc_init+0x22c>)
 8002116:	4874      	ldr	r0, [pc, #464]	@ (80022e8 <rtc_init+0x228>)
 8002118:	f006 fd63 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800211c:	2064      	movs	r0, #100	@ 0x64
 800211e:	f001 fb6b 	bl	80037f8 <HAL_Delay>
	  }
	  //2 perform otp refresh Performing an OTP refresh ensures that the device operates with the correct calibration data after power-on or reset.
	  uint8_t data[2];
	  data[0]=CLKOUT_ctl;
 8002122:	230f      	movs	r3, #15
 8002124:	733b      	strb	r3, [r7, #12]
	  data[1]=0x01;//set it to 1 to initiate the refresh process
 8002126:	2301      	movs	r3, #1
 8002128:	737b      	strb	r3, [r7, #13]

	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2302      	movs	r3, #2
 8002136:	21a2      	movs	r1, #162	@ 0xa2
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f002 fba7 	bl	800488c <HAL_I2C_Master_Transmit>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <rtc_init+0x21c>)
 8002144:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002146:	4b65      	ldr	r3, [pc, #404]	@ (80022dc <rtc_init+0x21c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <rtc_init+0xa4>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh ok\n\r", 20, HAL_MAX_DELAY);
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	2214      	movs	r2, #20
 8002154:	4966      	ldr	r1, [pc, #408]	@ (80022f0 <rtc_init+0x230>)
 8002156:	4864      	ldr	r0, [pc, #400]	@ (80022e8 <rtc_init+0x228>)
 8002158:	f006 fd43 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800215c:	2064      	movs	r0, #100	@ 0x64
 800215e:	f001 fb4b 	bl	80037f8 <HAL_Delay>
 8002162:	e009      	b.n	8002178 <rtc_init+0xb8>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh notok\n\r", 23, HAL_MAX_DELAY);
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	2217      	movs	r2, #23
 800216a:	4962      	ldr	r1, [pc, #392]	@ (80022f4 <rtc_init+0x234>)
 800216c:	485e      	ldr	r0, [pc, #376]	@ (80022e8 <rtc_init+0x228>)
 800216e:	f006 fd38 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002172:	2064      	movs	r0, #100	@ 0x64
 8002174:	f001 fb40 	bl	80037f8 <HAL_Delay>
	  }

	  //3 Configure Control_1 Register (0x00) for basic settings
	  data[0]=Control_1;
 8002178:	2300      	movs	r3, #0
 800217a:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002180:	f107 020c 	add.w	r2, r7, #12
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2302      	movs	r3, #2
 800218c:	21a2      	movs	r1, #162	@ 0xa2
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f002 fb7c 	bl	800488c <HAL_I2C_Master_Transmit>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	4b50      	ldr	r3, [pc, #320]	@ (80022dc <rtc_init+0x21c>)
 800219a:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800219c:	4b4f      	ldr	r3, [pc, #316]	@ (80022dc <rtc_init+0x21c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <rtc_init+0xfa>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 ok\n\r", 14, HAL_MAX_DELAY);
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	220e      	movs	r2, #14
 80021aa:	4953      	ldr	r1, [pc, #332]	@ (80022f8 <rtc_init+0x238>)
 80021ac:	484e      	ldr	r0, [pc, #312]	@ (80022e8 <rtc_init+0x228>)
 80021ae:	f006 fd18 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021b2:	2064      	movs	r0, #100	@ 0x64
 80021b4:	f001 fb20 	bl	80037f8 <HAL_Delay>
 80021b8:	e009      	b.n	80021ce <rtc_init+0x10e>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 notok\n\r", 17, HAL_MAX_DELAY);
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	2211      	movs	r2, #17
 80021c0:	494e      	ldr	r1, [pc, #312]	@ (80022fc <rtc_init+0x23c>)
 80021c2:	4849      	ldr	r0, [pc, #292]	@ (80022e8 <rtc_init+0x228>)
 80021c4:	f006 fd0d 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021c8:	2064      	movs	r0, #100	@ 0x64
 80021ca:	f001 fb15 	bl	80037f8 <HAL_Delay>
	  }

	  //4 Configure Control_2 Register (0x01) for alarm
	  data[0]=Control_2;
 80021ce:	2301      	movs	r3, #1
 80021d0:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 80021d2:	2300      	movs	r3, #0
 80021d4:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80021d6:	f107 020c 	add.w	r2, r7, #12
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2302      	movs	r3, #2
 80021e2:	21a2      	movs	r1, #162	@ 0xa2
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f002 fb51 	bl	800488c <HAL_I2C_Master_Transmit>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <rtc_init+0x21c>)
 80021f0:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80021f2:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <rtc_init+0x21c>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <rtc_init+0x150>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 ok\n\r", 14, HAL_MAX_DELAY);
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	220e      	movs	r2, #14
 8002200:	493f      	ldr	r1, [pc, #252]	@ (8002300 <rtc_init+0x240>)
 8002202:	4839      	ldr	r0, [pc, #228]	@ (80022e8 <rtc_init+0x228>)
 8002204:	f006 fced 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002208:	2064      	movs	r0, #100	@ 0x64
 800220a:	f001 faf5 	bl	80037f8 <HAL_Delay>
 800220e:	e009      	b.n	8002224 <rtc_init+0x164>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 notok\n\r", 17, HAL_MAX_DELAY);
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	2211      	movs	r2, #17
 8002216:	493b      	ldr	r1, [pc, #236]	@ (8002304 <rtc_init+0x244>)
 8002218:	4833      	ldr	r0, [pc, #204]	@ (80022e8 <rtc_init+0x228>)
 800221a:	f006 fce2 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800221e:	2064      	movs	r0, #100	@ 0x64
 8002220:	f001 faea 	bl	80037f8 <HAL_Delay>
	  }

	  //5 Configure Control_3 Register (0x02) for battery
	  data[0]=Control_3;
 8002224:	2302      	movs	r3, #2
 8002226:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 8002228:	2300      	movs	r3, #0
 800222a:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 800222c:	f107 020c 	add.w	r2, r7, #12
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2302      	movs	r3, #2
 8002238:	21a2      	movs	r1, #162	@ 0xa2
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f002 fb26 	bl	800488c <HAL_I2C_Master_Transmit>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <rtc_init+0x21c>)
 8002246:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002248:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <rtc_init+0x21c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <rtc_init+0x1a6>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 ok\n\r", 14, HAL_MAX_DELAY);
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	220e      	movs	r2, #14
 8002256:	492c      	ldr	r1, [pc, #176]	@ (8002308 <rtc_init+0x248>)
 8002258:	4823      	ldr	r0, [pc, #140]	@ (80022e8 <rtc_init+0x228>)
 800225a:	f006 fcc2 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800225e:	2064      	movs	r0, #100	@ 0x64
 8002260:	f001 faca 	bl	80037f8 <HAL_Delay>
 8002264:	e009      	b.n	800227a <rtc_init+0x1ba>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 notok\n\r", 17, HAL_MAX_DELAY);
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	2211      	movs	r2, #17
 800226c:	4927      	ldr	r1, [pc, #156]	@ (800230c <rtc_init+0x24c>)
 800226e:	481e      	ldr	r0, [pc, #120]	@ (80022e8 <rtc_init+0x228>)
 8002270:	f006 fcb7 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002274:	2064      	movs	r0, #100	@ 0x64
 8002276:	f001 fabf 	bl	80037f8 <HAL_Delay>
	  }

	  //6 Set the CLKOUT frequency, if needed
	  data[0]=CLKOUT_ctl;
 800227a:	230f      	movs	r3, #15
 800227c:	733b      	strb	r3, [r7, #12]
	  data[1]=0x07;
 800227e:	2307      	movs	r3, #7
 8002280:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2302      	movs	r3, #2
 800228e:	21a2      	movs	r1, #162	@ 0xa2
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f002 fafb 	bl	800488c <HAL_I2C_Master_Transmit>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <rtc_init+0x21c>)
 800229c:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <rtc_init+0x21c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <rtc_init+0x1fc>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout ok\n\r", 11, HAL_MAX_DELAY);
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	220b      	movs	r2, #11
 80022ac:	4918      	ldr	r1, [pc, #96]	@ (8002310 <rtc_init+0x250>)
 80022ae:	480e      	ldr	r0, [pc, #56]	@ (80022e8 <rtc_init+0x228>)
 80022b0:	f006 fc97 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80022b4:	2064      	movs	r0, #100	@ 0x64
 80022b6:	f001 fa9f 	bl	80037f8 <HAL_Delay>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
		  HAL_Delay(100);
	  }

}
 80022ba:	e009      	b.n	80022d0 <rtc_init+0x210>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	220e      	movs	r2, #14
 80022c2:	4914      	ldr	r1, [pc, #80]	@ (8002314 <rtc_init+0x254>)
 80022c4:	4808      	ldr	r0, [pc, #32]	@ (80022e8 <rtc_init+0x228>)
 80022c6:	f006 fc8c 	bl	8008be2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80022ca:	2064      	movs	r0, #100	@ 0x64
 80022cc:	f001 fa94 	bl	80037f8 <HAL_Delay>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000108 	.word	0x20000108
 80022dc:	200000b0 	.word	0x200000b0
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	0800ff74 	.word	0x0800ff74
 80022e8:	20000374 	.word	0x20000374
 80022ec:	0800ff80 	.word	0x0800ff80
 80022f0:	0800ff8c 	.word	0x0800ff8c
 80022f4:	0800ffa4 	.word	0x0800ffa4
 80022f8:	0800ffbc 	.word	0x0800ffbc
 80022fc:	0800ffcc 	.word	0x0800ffcc
 8002300:	0800ffe0 	.word	0x0800ffe0
 8002304:	0800fff0 	.word	0x0800fff0
 8002308:	08010004 	.word	0x08010004
 800230c:	08010014 	.word	0x08010014
 8002310:	08010028 	.word	0x08010028
 8002314:	08010034 	.word	0x08010034

08002318 <rtc_wirte>:

HAL_StatusTypeDef rtc_wirte(uint8_t reg_addr,uint8_t value)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=reg_addr;
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	737b      	strb	r3, [r7, #13]

	ret=HAL_I2C_Master_Transmit(&hi2c1, slavwrite, data, sizeof(data), HAL_MAX_DELAY);
 8002330:	f107 020c 	add.w	r2, r7, #12
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2302      	movs	r3, #2
 800233c:	21a2      	movs	r1, #162	@ 0xa2
 800233e:	480c      	ldr	r0, [pc, #48]	@ (8002370 <rtc_wirte+0x58>)
 8002340:	f002 faa4 	bl	800488c <HAL_I2C_Master_Transmit>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <rtc_wirte+0x5c>)
 800234a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return HAL_ERROR;
	}*/
	if (ret != HAL_OK) {
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <rtc_wirte+0x5c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <rtc_wirte+0x4e>
	        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C write fail\n\r", 16, HAL_MAX_DELAY);
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	2210      	movs	r2, #16
 800235a:	4907      	ldr	r1, [pc, #28]	@ (8002378 <rtc_wirte+0x60>)
 800235c:	4807      	ldr	r0, [pc, #28]	@ (800237c <rtc_wirte+0x64>)
 800235e:	f006 fc40 	bl	8008be2 <HAL_UART_Transmit>
	        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <rtc_wirte+0x50>
	    }
	    return HAL_OK;
 8002366:	2300      	movs	r3, #0

}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000108 	.word	0x20000108
 8002374:	200000b0 	.word	0x200000b0
 8002378:	08010044 	.word	0x08010044
 800237c:	20000374 	.word	0x20000374

08002380 <rtc_read>:

uint8_t rtc_read(uint8_t reg_addr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret1;
	    uint8_t value = 0xFF; // Default value in case of error
 800238a:	23ff      	movs	r3, #255	@ 0xff
 800238c:	73bb      	strb	r3, [r7, #14]

	    // Transmit the register address
	    ret1 = HAL_I2C_Master_Transmit(&hi2c1, slavwrite, &reg_addr, 1, HAL_MAX_DELAY);
 800238e:	1dfa      	adds	r2, r7, #7
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2301      	movs	r3, #1
 8002398:	21a2      	movs	r1, #162	@ 0xa2
 800239a:	4810      	ldr	r0, [pc, #64]	@ (80023dc <rtc_read+0x5c>)
 800239c:	f002 fa76 	bl	800488c <HAL_I2C_Master_Transmit>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <rtc_read+0x2e>
	        return value; // Return default value if transmit fails
 80023aa:	7bbb      	ldrb	r3, [r7, #14]
 80023ac:	e011      	b.n	80023d2 <rtc_read+0x52>
	    }

	    // Receive the register value
	    ret1 = HAL_I2C_Master_Receive(&hi2c1, slaveread, &value, 1, HAL_MAX_DELAY);
 80023ae:	f107 020e 	add.w	r2, r7, #14
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2301      	movs	r3, #1
 80023ba:	21a3      	movs	r1, #163	@ 0xa3
 80023bc:	4807      	ldr	r0, [pc, #28]	@ (80023dc <rtc_read+0x5c>)
 80023be:	f002 fb63 	bl	8004a88 <HAL_I2C_Master_Receive>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <rtc_read+0x50>
	        return 0xFF; // Return default value if receive fails
 80023cc:	23ff      	movs	r3, #255	@ 0xff
 80023ce:	e000      	b.n	80023d2 <rtc_read+0x52>
	    }

	    return value; // Return the register value
 80023d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000108 	.word	0x20000108

080023e0 <rtc_settime>:

HAL_StatusTypeDef rtc_settime(const rtc_timedate_t* timedate)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	if(rtc_wirte(Seconds, decimal_to_bcd(timedate->second))!=HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	789b      	ldrb	r3, [r3, #2]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe29 	bl	8002044 <decimal_to_bcd>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4619      	mov	r1, r3
 80023f6:	2003      	movs	r0, #3
 80023f8:	f7ff ff8e 	bl	8002318 <rtc_wirte>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <rtc_settime+0x26>
	{
		return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e04b      	b.n	800249e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Minutes, decimal_to_bcd(timedate->minute))!=HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fe1a 	bl	8002044 <decimal_to_bcd>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	2004      	movs	r0, #4
 8002416:	f7ff ff7f 	bl	8002318 <rtc_wirte>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <rtc_settime+0x44>
	{
		return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e03c      	b.n	800249e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Hours, decimal_to_bcd(timedate->hour))!=HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe0b 	bl	8002044 <decimal_to_bcd>
 800242e:	4603      	mov	r3, r0
 8002430:	4619      	mov	r1, r3
 8002432:	2005      	movs	r0, #5
 8002434:	f7ff ff70 	bl	8002318 <rtc_wirte>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <rtc_settime+0x62>
	{
		return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e02d      	b.n	800249e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Days, decimal_to_bcd(timedate->day))!=HAL_OK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	78db      	ldrb	r3, [r3, #3]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fdfc 	bl	8002044 <decimal_to_bcd>
 800244c:	4603      	mov	r3, r0
 800244e:	4619      	mov	r1, r3
 8002450:	2006      	movs	r0, #6
 8002452:	f7ff ff61 	bl	8002318 <rtc_wirte>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <rtc_settime+0x80>
	{
		return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01e      	b.n	800249e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Months, decimal_to_bcd(timedate->month))!=HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fded 	bl	8002044 <decimal_to_bcd>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	2008      	movs	r0, #8
 8002470:	f7ff ff52 	bl	8002318 <rtc_wirte>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <rtc_settime+0x9e>
	{
		return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Years, decimal_to_bcd(timedate->year))!=HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	795b      	ldrb	r3, [r3, #5]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fdde 	bl	8002044 <decimal_to_bcd>
 8002488:	4603      	mov	r3, r0
 800248a:	4619      	mov	r1, r3
 800248c:	2009      	movs	r0, #9
 800248e:	f7ff ff43 	bl	8002318 <rtc_wirte>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <rtc_settime+0xbc>
	{
		return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <rtc_settime+0xbe>
	}

	return HAL_OK;
 800249c:	2300      	movs	r3, #0

}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <rtc_gettime>:

HAL_StatusTypeDef rtc_gettime(rtc_timedate_t* timedate)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp=rtc_read(Seconds);//second register
 80024ae:	2003      	movs	r0, #3
 80024b0:	f7ff ff66 	bl	8002380 <rtc_read>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2bff      	cmp	r3, #255	@ 0xff
 80024bc:	d101      	bne.n	80024c2 <rtc_gettime+0x1c>
	{
		return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e062      	b.n	8002588 <rtc_gettime+0xe2>
	}
	timedate->second= bcd_to_decimal(temp);
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fde1 	bl	800208c <bcd_to_decimal>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	709a      	strb	r2, [r3, #2]
	temp=rtc_read(Minutes);//minute register
 80024d2:	2004      	movs	r0, #4
 80024d4:	f7ff ff54 	bl	8002380 <rtc_read>
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d101      	bne.n	80024e6 <rtc_gettime+0x40>
	{
		return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e050      	b.n	8002588 <rtc_gettime+0xe2>
	}
	timedate->minute= bcd_to_decimal(temp);
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fdcf 	bl	800208c <bcd_to_decimal>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	705a      	strb	r2, [r3, #1]
	temp=rtc_read(Hours);//hour register
 80024f6:	2005      	movs	r0, #5
 80024f8:	f7ff ff42 	bl	8002380 <rtc_read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2bff      	cmp	r3, #255	@ 0xff
 8002504:	d101      	bne.n	800250a <rtc_gettime+0x64>
	{
		return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e03e      	b.n	8002588 <rtc_gettime+0xe2>
	}
	timedate->hour= bcd_to_decimal(temp);
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fdbd 	bl	800208c <bcd_to_decimal>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	701a      	strb	r2, [r3, #0]
	temp=rtc_read(Days);//day register
 800251a:	2006      	movs	r0, #6
 800251c:	f7ff ff30 	bl	8002380 <rtc_read>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2bff      	cmp	r3, #255	@ 0xff
 8002528:	d101      	bne.n	800252e <rtc_gettime+0x88>
	{
		return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e02c      	b.n	8002588 <rtc_gettime+0xe2>
	}
	timedate->day= bcd_to_decimal(temp);
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fdab 	bl	800208c <bcd_to_decimal>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	70da      	strb	r2, [r3, #3]
	temp=rtc_read(Months);//second register
 800253e:	2008      	movs	r0, #8
 8002540:	f7ff ff1e 	bl	8002380 <rtc_read>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2bff      	cmp	r3, #255	@ 0xff
 800254c:	d101      	bne.n	8002552 <rtc_gettime+0xac>
	{
		return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e01a      	b.n	8002588 <rtc_gettime+0xe2>
	}
	timedate->month= bcd_to_decimal(temp);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fd99 	bl	800208c <bcd_to_decimal>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	711a      	strb	r2, [r3, #4]
	temp=rtc_read(Years);//second register
 8002562:	2009      	movs	r0, #9
 8002564:	f7ff ff0c 	bl	8002380 <rtc_read>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2bff      	cmp	r3, #255	@ 0xff
 8002570:	d101      	bne.n	8002576 <rtc_gettime+0xd0>
	{
		return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e008      	b.n	8002588 <rtc_gettime+0xe2>
	}
	timedate->year= bcd_to_decimal(temp);
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fd87 	bl	800208c <bcd_to_decimal>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	715a      	strb	r2, [r3, #5]

	return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <rtc_setalarm>:


HAL_StatusTypeDef rtc_setalarm(rtc_timedate_t* timedate)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	//second alarm
	if(rtc_wirte(Second_alarm, (timedate->second==0xFF)?0x80:decimal_to_bcd(timedate->second))!=HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	789b      	ldrb	r3, [r3, #2]
 800259c:	2bff      	cmp	r3, #255	@ 0xff
 800259e:	d006      	beq.n	80025ae <rtc_setalarm+0x1e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fd4d 	bl	8002044 <decimal_to_bcd>
 80025aa:	4603      	mov	r3, r0
 80025ac:	e000      	b.n	80025b0 <rtc_setalarm+0x20>
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	4619      	mov	r1, r3
 80025b2:	200a      	movs	r0, #10
 80025b4:	f7ff feb0 	bl	8002318 <rtc_wirte>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <rtc_setalarm+0x32>
	{
		return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07a      	b.n	80026b8 <rtc_setalarm+0x128>
	}
	//minute alarm
	if(rtc_wirte(Minute_alarm, (timedate->minute==0xFF)?0x80:decimal_to_bcd(timedate->minute))!=HAL_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	2bff      	cmp	r3, #255	@ 0xff
 80025c8:	d006      	beq.n	80025d8 <rtc_setalarm+0x48>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd38 	bl	8002044 <decimal_to_bcd>
 80025d4:	4603      	mov	r3, r0
 80025d6:	e000      	b.n	80025da <rtc_setalarm+0x4a>
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	4619      	mov	r1, r3
 80025dc:	200b      	movs	r0, #11
 80025de:	f7ff fe9b 	bl	8002318 <rtc_wirte>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <rtc_setalarm+0x5c>
	{
		return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e065      	b.n	80026b8 <rtc_setalarm+0x128>
	}
	//hour alarm
	if(rtc_wirte(Hour_alarm, (timedate->hour==0xFF)?0x80:decimal_to_bcd(timedate->hour))!=HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2bff      	cmp	r3, #255	@ 0xff
 80025f2:	d006      	beq.n	8002602 <rtc_setalarm+0x72>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fd23 	bl	8002044 <decimal_to_bcd>
 80025fe:	4603      	mov	r3, r0
 8002600:	e000      	b.n	8002604 <rtc_setalarm+0x74>
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	4619      	mov	r1, r3
 8002606:	200c      	movs	r0, #12
 8002608:	f7ff fe86 	bl	8002318 <rtc_wirte>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <rtc_setalarm+0x86>
	{
		return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e050      	b.n	80026b8 <rtc_setalarm+0x128>
	}
	//day alarm
	if(rtc_wirte(Day_alarm, (timedate->day==0xFF)?0x80:decimal_to_bcd(timedate->day))!=HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	78db      	ldrb	r3, [r3, #3]
 800261a:	2bff      	cmp	r3, #255	@ 0xff
 800261c:	d006      	beq.n	800262c <rtc_setalarm+0x9c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	78db      	ldrb	r3, [r3, #3]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd0e 	bl	8002044 <decimal_to_bcd>
 8002628:	4603      	mov	r3, r0
 800262a:	e000      	b.n	800262e <rtc_setalarm+0x9e>
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	4619      	mov	r1, r3
 8002630:	200d      	movs	r0, #13
 8002632:	f7ff fe71 	bl	8002318 <rtc_wirte>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <rtc_setalarm+0xb0>
	{
		return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e03b      	b.n	80026b8 <rtc_setalarm+0x128>
	}
	//week alarm
	if(rtc_wirte(Weekday_alarm, (timedate->weekday==0xFF)?0x80:decimal_to_bcd(timedate->weekday))!=HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	799b      	ldrb	r3, [r3, #6]
 8002644:	2bff      	cmp	r3, #255	@ 0xff
 8002646:	d006      	beq.n	8002656 <rtc_setalarm+0xc6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	799b      	ldrb	r3, [r3, #6]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fcf9 	bl	8002044 <decimal_to_bcd>
 8002652:	4603      	mov	r3, r0
 8002654:	e000      	b.n	8002658 <rtc_setalarm+0xc8>
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	4619      	mov	r1, r3
 800265a:	200e      	movs	r0, #14
 800265c:	f7ff fe5c 	bl	8002318 <rtc_wirte>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <rtc_setalarm+0xda>
	{
		return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e026      	b.n	80026b8 <rtc_setalarm+0x128>
	}

	uint8_t control2 = rtc_read(Control_2);
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff fe88 	bl	8002380 <rtc_read>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
	    if (control2 == 0xFF) return HAL_ERROR;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2bff      	cmp	r3, #255	@ 0xff
 8002678:	d101      	bne.n	800267e <rtc_setalarm+0xee>
 800267a:	2301      	movs	r3, #1
 800267c:	e01c      	b.n	80026b8 <rtc_setalarm+0x128>
	    control2 &= ~(1 << 7);  // Clear MSF
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002684:	73fb      	strb	r3, [r7, #15]
	    control2 |= (1 << 1);   // Set AIE
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	73fb      	strb	r3, [r7, #15]
	    if (rtc_wirte(Control_2, control2) != HAL_OK) return HAL_ERROR;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	4619      	mov	r1, r3
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff fe40 	bl	8002318 <rtc_wirte>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <rtc_setalarm+0x112>
 800269e:	2301      	movs	r3, #1
 80026a0:	e00a      	b.n	80026b8 <rtc_setalarm+0x128>

	    HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm set complete\n\r", 20, HAL_MAX_DELAY);
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	2214      	movs	r2, #20
 80026a8:	4905      	ldr	r1, [pc, #20]	@ (80026c0 <rtc_setalarm+0x130>)
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <rtc_setalarm+0x134>)
 80026ac:	f006 fa99 	bl	8008be2 <HAL_UART_Transmit>
	    read_and_transmit(Control_2);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f000 f84f 	bl	8002754 <read_and_transmit>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"interrupt notenabled\n\r", 22, HAL_MAX_DELAY);
		HAL_Delay(100);
	}*/
	return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	08010058 	.word	0x08010058
 80026c4:	20000374 	.word	0x20000374

080026c8 <rtc_clearalarm>:

HAL_StatusTypeDef rtc_clearalarm(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
	uint8_t control2;
	//read_and_transmit(0x01);
	control2=rtc_read(Control_2);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff fe56 	bl	8002380 <rtc_read>
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
	//read_and_transmit(0x01);
	if(control2==0xFF)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d101      	bne.n	80026e2 <rtc_clearalarm+0x1a>
	{
		return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <rtc_clearalarm+0x38>
	}
	control2 &=~(1<<4);
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f023 0310 	bic.w	r3, r3, #16
 80026e8:	71fb      	strb	r3, [r7, #7]
	//control2=0x00;
	if(rtc_wirte(Control_2, control2)!=HAL_OK)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff fe12 	bl	8002318 <rtc_wirte>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <rtc_clearalarm+0x36>
	{
		//read_and_transmit(0x01);
		return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <rtc_clearalarm+0x38>
	}

	return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <rtc_check_alarm_flag>:

uint8_t rtc_check_alarm_flag(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
	{
	uint8_t control2 = rtc_read(Control_2); // Read the Control_2 register
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff fe36 	bl	8002380 <rtc_read>
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
	read_and_transmit(Control_2);
 8002718:	2001      	movs	r0, #1
 800271a:	f000 f81b 	bl	8002754 <read_and_transmit>
	    if (control2 == 0xFF) {
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2bff      	cmp	r3, #255	@ 0xff
 8002722:	d108      	bne.n	8002736 <rtc_check_alarm_flag+0x2e>
	    	HAL_UART_Transmit(&huart3, (uint8_t*)"Flag read error\n\r", 17, HAL_MAX_DELAY);
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	2211      	movs	r2, #17
 800272a:	4908      	ldr	r1, [pc, #32]	@ (800274c <rtc_check_alarm_flag+0x44>)
 800272c:	4808      	ldr	r0, [pc, #32]	@ (8002750 <rtc_check_alarm_flag+0x48>)
 800272e:	f006 fa58 	bl	8008be2 <HAL_UART_Transmit>
	        return 0xFF; // Error occurred while reading
 8002732:	23ff      	movs	r3, #255	@ 0xff
 8002734:	e005      	b.n	8002742 <rtc_check_alarm_flag+0x3a>
	    }

	    return (control2 & (1 << 4)) ? 1 : 0; // Return 1 if AF is set, otherwise 0
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	111b      	asrs	r3, r3, #4
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
	}
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	08010070 	.word	0x08010070
 8002750:	20000374 	.word	0x20000374

08002754 <read_and_transmit>:
    rtc_wirte(Control_2, control2);
    //read_and_transmit(Control_2);
    return HAL_OK;
}

void read_and_transmit(uint8_t reg_addr) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b090      	sub	sp, #64	@ 0x40
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
    char uart_buffer[50];
    uint8_t reg_value = rtc_read(reg_addr);
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe0d 	bl	8002380 <rtc_read>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Check if the read was successful
    if (reg_value == 0xFF) {
 800276c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002770:	2bff      	cmp	r3, #255	@ 0xff
 8002772:	d107      	bne.n	8002784 <read_and_transmit+0x30>
        // Error handling: Send an error message over UART
        sprintf(uart_buffer, "Error reading register 0x%02X\r\n", reg_addr);
 8002774:	79fa      	ldrb	r2, [r7, #7]
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	490f      	ldr	r1, [pc, #60]	@ (80027b8 <read_and_transmit+0x64>)
 800277c:	4618      	mov	r0, r3
 800277e:	f00b f9cb 	bl	800db18 <siprintf>
 8002782:	e007      	b.n	8002794 <read_and_transmit+0x40>
    } else {
        // Send the read value over UART
        sprintf(uart_buffer, "Register 0x%02X: 0x%02X\r\n", reg_addr, reg_value);
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800278a:	f107 000c 	add.w	r0, r7, #12
 800278e:	490b      	ldr	r1, [pc, #44]	@ (80027bc <read_and_transmit+0x68>)
 8002790:	f00b f9c2 	bl	800db18 <siprintf>
    }

    // Transmit the message via UART3
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fd19 	bl	80001d0 <strlen>
 800279e:	4603      	mov	r3, r0
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	f107 010c 	add.w	r1, r7, #12
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	4805      	ldr	r0, [pc, #20]	@ (80027c0 <read_and_transmit+0x6c>)
 80027ac:	f006 fa19 	bl	8008be2 <HAL_UART_Transmit>
}
 80027b0:	bf00      	nop
 80027b2:	3740      	adds	r7, #64	@ 0x40
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	08010084 	.word	0x08010084
 80027bc:	080100a4 	.word	0x080100a4
 80027c0:	20000374 	.word	0x20000374

080027c4 <senddata>:

char uart_buffer[50]; // Definition of uart_buffer
int id1 = 0;          // Definition of id1

void senddata(char* str,uint8_t size)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r",2, HAL_MAX_DELAY);
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	2202      	movs	r2, #2
 80027d6:	4909      	ldr	r1, [pc, #36]	@ (80027fc <senddata+0x38>)
 80027d8:	4809      	ldr	r0, [pc, #36]	@ (8002800 <senddata+0x3c>)
 80027da:	f006 fa02 	bl	8008be2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str,size, HAL_MAX_DELAY);
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4805      	ldr	r0, [pc, #20]	@ (8002800 <senddata+0x3c>)
 80027ea:	f006 f9fa 	bl	8008be2 <HAL_UART_Transmit>
	HAL_Delay(100);
 80027ee:	2064      	movs	r0, #100	@ 0x64
 80027f0:	f001 f802 	bl	80037f8 <HAL_Delay>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	080100c0 	.word	0x080100c0
 8002800:	20000374 	.word	0x20000374

08002804 <HAL_UART_RxCpltCallback>:
	return rxdata1;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a21      	ldr	r2, [pc, #132]	@ (8002898 <HAL_UART_RxCpltCallback+0x94>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d13d      	bne.n	8002892 <HAL_UART_RxCpltCallback+0x8e>
	{
		if(rxindex<RX_buffersize-1)
 8002816:	4b21      	ldr	r3, [pc, #132]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2bff      	cmp	r3, #255	@ 0xff
 800281e:	d00c      	beq.n	800283a <HAL_UART_RxCpltCallback+0x36>
		{
			rxindex++;
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 800282c:	701a      	strb	r2, [r3, #0]
		{
			rxbuffer[RX_buffersize-1]='\0';
			datarecived=1;
			return;
		}
		if(rxindex>=strlen(EOP_string)&&strncmp(&rxbuffer[rxindex-strlen(EOP_string)],EOP_string,strlen(EOP_string))==0)
 800282e:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d921      	bls.n	800287c <HAL_UART_RxCpltCallback+0x78>
 8002838:	e007      	b.n	800284a <HAL_UART_RxCpltCallback+0x46>
			rxbuffer[RX_buffersize-1]='\0';
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_UART_RxCpltCallback+0x9c>)
 800283c:	2200      	movs	r2, #0
 800283e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
			datarecived=1;
 8002842:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <HAL_UART_RxCpltCallback+0xa0>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
			return;
 8002848:	e023      	b.n	8002892 <HAL_UART_RxCpltCallback+0x8e>
		if(rxindex>=strlen(EOP_string)&&strncmp(&rxbuffer[rxindex-strlen(EOP_string)],EOP_string,strlen(EOP_string))==0)
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3b03      	subs	r3, #3
 8002852:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <HAL_UART_RxCpltCallback+0x9c>)
 8002854:	4413      	add	r3, r2
 8002856:	2203      	movs	r2, #3
 8002858:	4913      	ldr	r1, [pc, #76]	@ (80028a8 <HAL_UART_RxCpltCallback+0xa4>)
 800285a:	4618      	mov	r0, r3
 800285c:	f00b fa2c 	bl	800dcb8 <strncmp>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <HAL_UART_RxCpltCallback+0x78>
		{
			rxbuffer[RX_buffersize-1]='\0';
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_UART_RxCpltCallback+0x9c>)
 8002868:	2200      	movs	r2, #0
 800286a:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
			datarecived=1;
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_UART_RxCpltCallback+0xa0>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
			rxindex=0;
 8002874:	4b09      	ldr	r3, [pc, #36]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]

			return;
 800287a:	e00a      	b.n	8002892 <HAL_UART_RxCpltCallback+0x8e>
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 800287c:	4b07      	ldr	r3, [pc, #28]	@ (800289c <HAL_UART_RxCpltCallback+0x98>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_UART_RxCpltCallback+0x9c>)
 8002886:	4413      	add	r3, r2
 8002888:	2201      	movs	r2, #1
 800288a:	4619      	mov	r1, r3
 800288c:	4807      	ldr	r0, [pc, #28]	@ (80028ac <HAL_UART_RxCpltCallback+0xa8>)
 800288e:	f006 fa3a 	bl	8008d06 <HAL_UART_Receive_IT>
	}

}
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40004800 	.word	0x40004800
 800289c:	2000562c 	.word	0x2000562c
 80028a0:	2000552c 	.word	0x2000552c
 80028a4:	2000562d 	.word	0x2000562d
 80028a8:	080100c4 	.word	0x080100c4
 80028ac:	20000374 	.word	0x20000374

080028b0 <parse_and_print>:
}*/




void parse_and_print(char *buffer) {
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b0df      	sub	sp, #380	@ 0x17c
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028be:	6018      	str	r0, [r3, #0]
    char temp[RX_buffersize]; // Temporary buffer to hold a copy of input string
    strcpy(temp, buffer); // Copy to avoid modifying original string
 80028c0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028c8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	4610      	mov	r0, r2
 80028d0:	f00b fae3 	bl	800de9a <strcpy>


    char *token = strtok(temp, "|");
 80028d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80028d8:	49bf      	ldr	r1, [pc, #764]	@ (8002bd8 <parse_and_print+0x328>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f00b f9fe 	bl	800dcdc <strtok>
 80028e0:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    //static uint8_t alarm_count = 0;
    //static uint8_t current_idx = 0;


    // Extract and print ID
    if (token) {
 80028e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d024      	beq.n	8002936 <parse_and_print+0x86>
    	int id;
    	sscanf(token,"%d",&id);
 80028ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028f0:	461a      	mov	r2, r3
 80028f2:	49ba      	ldr	r1, [pc, #744]	@ (8002bdc <parse_and_print+0x32c>)
 80028f4:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 80028f8:	f00b f92e 	bl	800db58 <siscanf>
        sprintf(msg, "id: %d\r\n", id);
 80028fc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002900:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800290a:	49b5      	ldr	r1, [pc, #724]	@ (8002be0 <parse_and_print+0x330>)
 800290c:	4618      	mov	r0, r3
 800290e:	f00b f903 	bl	800db18 <siprintf>
        UART_Print(msg);
 8002912:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002916:	4618      	mov	r0, r3
 8002918:	f000 faa4 	bl	8002e64 <UART_Print>
        token = strtok(NULL, "|");
 800291c:	49ae      	ldr	r1, [pc, #696]	@ (8002bd8 <parse_and_print+0x328>)
 800291e:	2000      	movs	r0, #0
 8002920:	f00b f9dc 	bl	800dcdc <strtok>
 8002924:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
        id1=id;
 8002928:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800292c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4aac      	ldr	r2, [pc, #688]	@ (8002be4 <parse_and_print+0x334>)
 8002934:	6013      	str	r3, [r2, #0]
    }

    // Extract and print Name
    if (token) {
 8002936:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <parse_and_print+0xb4>
        sprintf(msg, "name: %s\r\n", token);
 800293e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002942:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002946:	49a8      	ldr	r1, [pc, #672]	@ (8002be8 <parse_and_print+0x338>)
 8002948:	4618      	mov	r0, r3
 800294a:	f00b f8e5 	bl	800db18 <siprintf>
        UART_Print(msg);
 800294e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fa86 	bl	8002e64 <UART_Print>
        token = strtok(NULL, "|");
 8002958:	499f      	ldr	r1, [pc, #636]	@ (8002bd8 <parse_and_print+0x328>)
 800295a:	2000      	movs	r0, #0
 800295c:	f00b f9be 	bl	800dcdc <strtok>
 8002960:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }

    // Extract and print Location
    if (token) {
 8002964:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d012      	beq.n	8002992 <parse_and_print+0xe2>
        sprintf(msg, "loc: %s\r\n", token);
 800296c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002970:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002974:	499d      	ldr	r1, [pc, #628]	@ (8002bec <parse_and_print+0x33c>)
 8002976:	4618      	mov	r0, r3
 8002978:	f00b f8ce 	bl	800db18 <siprintf>
        UART_Print(msg);
 800297c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fa6f 	bl	8002e64 <UART_Print>
        token = strtok(NULL, "|");
 8002986:	4994      	ldr	r1, [pc, #592]	@ (8002bd8 <parse_and_print+0x328>)
 8002988:	2000      	movs	r0, #0
 800298a:	f00b f9a7 	bl	800dcdc <strtok>
 800298e:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }
    if(id1==1)
 8002992:	4b94      	ldr	r3, [pc, #592]	@ (8002be4 <parse_and_print+0x334>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 80ef 	bne.w	8002b7a <parse_and_print+0x2ca>
    {
    // Extract and print Time (hh:mm:ss)
    if (token) {
 800299c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d060      	beq.n	8002a66 <parse_and_print+0x1b6>
        UART_Print("time-\r\n");
 80029a4:	4892      	ldr	r0, [pc, #584]	@ (8002bf0 <parse_and_print+0x340>)
 80029a6:	f000 fa5d 	bl	8002e64 <UART_Print>
        int hh, mm, ss;
        if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 80029aa:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80029ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80029b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	460b      	mov	r3, r1
 80029ba:	498e      	ldr	r1, [pc, #568]	@ (8002bf4 <parse_and_print+0x344>)
 80029bc:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 80029c0:	f00b f8ca 	bl	800db58 <siscanf>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d147      	bne.n	8002a5a <parse_and_print+0x1aa>
            sprintf(msg, "hour: %d\r\n", hh);
 80029ca:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029ce:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029d8:	4987      	ldr	r1, [pc, #540]	@ (8002bf8 <parse_and_print+0x348>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f00b f89c 	bl	800db18 <siprintf>
            UART_Print(msg);
 80029e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fa3d 	bl	8002e64 <UART_Print>
            sprintf(msg, "min: %d\r\n", mm);
 80029ea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029f8:	4980      	ldr	r1, [pc, #512]	@ (8002bfc <parse_and_print+0x34c>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00b f88c 	bl	800db18 <siprintf>
            UART_Print(msg);
 8002a00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fa2d 	bl	8002e64 <UART_Print>
            sprintf(msg, "sec: %d\r\n", ss);
 8002a0a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a0e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a18:	4979      	ldr	r1, [pc, #484]	@ (8002c00 <parse_and_print+0x350>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00b f87c 	bl	800db18 <siprintf>
            UART_Print(msg);
 8002a20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fa1d 	bl	8002e64 <UART_Print>
            timedate.hour=hh;
 8002a2a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a2e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b73      	ldr	r3, [pc, #460]	@ (8002c04 <parse_and_print+0x354>)
 8002a38:	701a      	strb	r2, [r3, #0]
            timedate.minute=mm;
 8002a3a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a3e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b6f      	ldr	r3, [pc, #444]	@ (8002c04 <parse_and_print+0x354>)
 8002a48:	705a      	strb	r2, [r3, #1]
            timedate.second=ss;
 8002a4a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a4e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b6b      	ldr	r3, [pc, #428]	@ (8002c04 <parse_and_print+0x354>)
 8002a58:	709a      	strb	r2, [r3, #2]
        }
        token = strtok(NULL, "|");
 8002a5a:	495f      	ldr	r1, [pc, #380]	@ (8002bd8 <parse_and_print+0x328>)
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f00b f93d 	bl	800dcdc <strtok>
 8002a62:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }

    // Extract and print Date (mm/dd/yyyy)
    if (token) {
 8002a66:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d064      	beq.n	8002b38 <parse_and_print+0x288>
        UART_Print("date-\r\n");
 8002a6e:	4866      	ldr	r0, [pc, #408]	@ (8002c08 <parse_and_print+0x358>)
 8002a70:	f000 f9f8 	bl	8002e64 <UART_Print>
        int month, day, year;
        if (sscanf(token, "%d/%d/%d", &month, &day, &year) == 3) {
 8002a74:	f107 0120 	add.w	r1, r7, #32
 8002a78:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	460b      	mov	r3, r1
 8002a84:	4961      	ldr	r1, [pc, #388]	@ (8002c0c <parse_and_print+0x35c>)
 8002a86:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002a8a:	f00b f865 	bl	800db58 <siscanf>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d148      	bne.n	8002b26 <parse_and_print+0x276>
            sprintf(msg, "month: %d\r\n", month);
 8002a94:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a98:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aa2:	495b      	ldr	r1, [pc, #364]	@ (8002c10 <parse_and_print+0x360>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00b f837 	bl	800db18 <siprintf>
            UART_Print(msg);
 8002aaa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f9d8 	bl	8002e64 <UART_Print>
            sprintf(msg, "day: %d\r\n", day);
 8002ab4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ab8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ac2:	4954      	ldr	r1, [pc, #336]	@ (8002c14 <parse_and_print+0x364>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00b f827 	bl	800db18 <siprintf>
            UART_Print(msg);
 8002aca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f9c8 	bl	8002e64 <UART_Print>
            sprintf(msg, "year: %d\r\n", year);
 8002ad4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ad8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ae2:	494d      	ldr	r1, [pc, #308]	@ (8002c18 <parse_and_print+0x368>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00b f817 	bl	800db18 <siprintf>
            UART_Print(msg);
 8002aea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f9b8 	bl	8002e64 <UART_Print>
            timedate.month=month;
 8002af4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002af8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b40      	ldr	r3, [pc, #256]	@ (8002c04 <parse_and_print+0x354>)
 8002b02:	711a      	strb	r2, [r3, #4]
            timedate.day=day;
 8002b04:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b08:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b3c      	ldr	r3, [pc, #240]	@ (8002c04 <parse_and_print+0x354>)
 8002b12:	70da      	strb	r2, [r3, #3]
            timedate.year=year;
 8002b14:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b18:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b38      	ldr	r3, [pc, #224]	@ (8002c04 <parse_and_print+0x354>)
 8002b22:	715a      	strb	r2, [r3, #5]
 8002b24:	e002      	b.n	8002b2c <parse_and_print+0x27c>
        } else {
            UART_Print("Error: Invalid Date Format\r\n");
 8002b26:	483d      	ldr	r0, [pc, #244]	@ (8002c1c <parse_and_print+0x36c>)
 8002b28:	f000 f99c 	bl	8002e64 <UART_Print>
        }
        token = strtok(NULL, "|");
 8002b2c:	492a      	ldr	r1, [pc, #168]	@ (8002bd8 <parse_and_print+0x328>)
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f00b f8d4 	bl	800dcdc <strtok>
 8002b34:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }
    ret=rtc_settime(&timedate);
 8002b38:	4832      	ldr	r0, [pc, #200]	@ (8002c04 <parse_and_print+0x354>)
 8002b3a:	f7ff fc51 	bl	80023e0 <rtc_settime>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b37      	ldr	r3, [pc, #220]	@ (8002c20 <parse_and_print+0x370>)
 8002b44:	701a      	strb	r2, [r3, #0]
    	if(ret==HAL_OK)
 8002b46:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <parse_and_print+0x370>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <parse_and_print+0x2b4>
    	{
    		HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	2211      	movs	r2, #17
 8002b54:	4933      	ldr	r1, [pc, #204]	@ (8002c24 <parse_and_print+0x374>)
 8002b56:	4834      	ldr	r0, [pc, #208]	@ (8002c28 <parse_and_print+0x378>)
 8002b58:	f006 f843 	bl	8008be2 <HAL_UART_Transmit>
    		HAL_Delay(100);
 8002b5c:	2064      	movs	r0, #100	@ 0x64
 8002b5e:	f000 fe4b 	bl	80037f8 <HAL_Delay>
 8002b62:	e162      	b.n	8002e2a <parse_and_print+0x57a>
    	}
    	else
    	{
    		HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	2214      	movs	r2, #20
 8002b6a:	4930      	ldr	r1, [pc, #192]	@ (8002c2c <parse_and_print+0x37c>)
 8002b6c:	482e      	ldr	r0, [pc, #184]	@ (8002c28 <parse_and_print+0x378>)
 8002b6e:	f006 f838 	bl	8008be2 <HAL_UART_Transmit>
    		HAL_Delay(100);
 8002b72:	2064      	movs	r0, #100	@ 0x64
 8002b74:	f000 fe40 	bl	80037f8 <HAL_Delay>
 8002b78:	e157      	b.n	8002e2a <parse_and_print+0x57a>
    	          {
    	        	  HAL_UART_Transmit(&huart3, (uint8_t*)"alarm notset\n\r", 14, HAL_MAX_DELAY);
    	        	  HAL_Delay(100);
    	          }
    }*/
    else if (id1 == 2) {
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <parse_and_print+0x334>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	f040 8153 	bne.w	8002e2a <parse_and_print+0x57a>
            if (token) {
 8002b84:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 814e 	beq.w	8002e2a <parse_and_print+0x57a>

            	int num_alarms;
            	sscanf(token, "%d", &num_alarms);
 8002b8e:	f107 0318 	add.w	r3, r7, #24
 8002b92:	461a      	mov	r2, r3
 8002b94:	4911      	ldr	r1, [pc, #68]	@ (8002bdc <parse_and_print+0x32c>)
 8002b96:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002b9a:	f00a ffdd 	bl	800db58 <siscanf>
            	token = strtok(NULL, "|");
 8002b9e:	490e      	ldr	r1, [pc, #56]	@ (8002bd8 <parse_and_print+0x328>)
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f00b f89b 	bl	800dcdc <strtok>
 8002ba6:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c


            	if (num_alarms > MAX_ALARMS) {
 8002baa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b0e      	cmp	r3, #14
 8002bb6:	dd07      	ble.n	8002bc8 <parse_and_print+0x318>
            		HAL_UART_Transmit(&huart3, (uint8_t*)"Too many!\n\r", 11, HAL_MAX_DELAY);
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	220b      	movs	r2, #11
 8002bbe:	491c      	ldr	r1, [pc, #112]	@ (8002c30 <parse_and_print+0x380>)
 8002bc0:	4819      	ldr	r0, [pc, #100]	@ (8002c28 <parse_and_print+0x378>)
 8002bc2:	f006 f80e 	bl	8008be2 <HAL_UART_Transmit>
 8002bc6:	e130      	b.n	8002e2a <parse_and_print+0x57a>
            		return;
            	        }
            	alarm_count = 0;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <parse_and_print+0x384>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
            	current_idx = 0;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <parse_and_print+0x388>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
            	while (token && alarm_count < num_alarms)
 8002bd4:	e0d9      	b.n	8002d8a <parse_and_print+0x4da>
 8002bd6:	bf00      	nop
 8002bd8:	080100c8 	.word	0x080100c8
 8002bdc:	080100cc 	.word	0x080100cc
 8002be0:	080100d0 	.word	0x080100d0
 8002be4:	2000566c 	.word	0x2000566c
 8002be8:	080100dc 	.word	0x080100dc
 8002bec:	080100e8 	.word	0x080100e8
 8002bf0:	080100f4 	.word	0x080100f4
 8002bf4:	080100fc 	.word	0x080100fc
 8002bf8:	08010108 	.word	0x08010108
 8002bfc:	08010114 	.word	0x08010114
 8002c00:	08010120 	.word	0x08010120
 8002c04:	20005630 	.word	0x20005630
 8002c08:	0801012c 	.word	0x0801012c
 8002c0c:	08010134 	.word	0x08010134
 8002c10:	08010140 	.word	0x08010140
 8002c14:	0801014c 	.word	0x0801014c
 8002c18:	08010158 	.word	0x08010158
 8002c1c:	08010164 	.word	0x08010164
 8002c20:	200000b0 	.word	0x200000b0
 8002c24:	08010184 	.word	0x08010184
 8002c28:	20000374 	.word	0x20000374
 8002c2c:	08010198 	.word	0x08010198
 8002c30:	080101b0 	.word	0x080101b0
 8002c34:	2000552a 	.word	0x2000552a
 8002c38:	2000552b 	.word	0x2000552b
            	{


                UART_Print("time-\r\n");
 8002c3c:	487d      	ldr	r0, [pc, #500]	@ (8002e34 <parse_and_print+0x584>)
 8002c3e:	f000 f911 	bl	8002e64 <UART_Print>
                int hh, mm, ss;
                if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 8002c42:	f107 0110 	add.w	r1, r7, #16
 8002c46:	f107 0214 	add.w	r2, r7, #20
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	460b      	mov	r3, r1
 8002c52:	4979      	ldr	r1, [pc, #484]	@ (8002e38 <parse_and_print+0x588>)
 8002c54:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002c58:	f00a ff7e 	bl	800db58 <siscanf>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	f040 808d 	bne.w	8002d7e <parse_and_print+0x4ce>
                    timedate.day = 0xFF;    // Disable day
                    timedate.weekday = 0xFF; // Disable weekday
                    timedate.month = 0xFF;  // Optional: Disable month
                    timedate.year = 0xFF;   // Optional: Disable year*/

                	sprintf(msg, "Alarm %d: %02d:%02d:%02d\r\n", alarm_count + 1, hh, mm, ss);
 8002c64:	4b75      	ldr	r3, [pc, #468]	@ (8002e3c <parse_and_print+0x58c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	1c59      	adds	r1, r3, #1
 8002c6a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c6e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002c72:	681c      	ldr	r4, [r3, #0]
 8002c74:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c78:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8002c82:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002c8c:	9201      	str	r2, [sp, #4]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4623      	mov	r3, r4
 8002c92:	460a      	mov	r2, r1
 8002c94:	496a      	ldr	r1, [pc, #424]	@ (8002e40 <parse_and_print+0x590>)
 8002c96:	f00a ff3f 	bl	800db18 <siprintf>
                	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fa96 	bl	80001d0 <strlen>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb0:	4864      	ldr	r0, [pc, #400]	@ (8002e44 <parse_and_print+0x594>)
 8002cb2:	f005 ff96 	bl	8008be2 <HAL_UART_Transmit>
                	alarm_queue[alarm_count].hour = hh;
 8002cb6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cba:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e3c <parse_and_print+0x58c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	b2d0      	uxtb	r0, r2
 8002cc8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e48 <parse_and_print+0x598>)
 8002cca:	460b      	mov	r3, r1
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	1a5b      	subs	r3, r3, r1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].minute = mm;
 8002cd6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cda:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b56      	ldr	r3, [pc, #344]	@ (8002e3c <parse_and_print+0x58c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	b2d0      	uxtb	r0, r2
 8002ce8:	4a57      	ldr	r2, [pc, #348]	@ (8002e48 <parse_and_print+0x598>)
 8002cea:	460b      	mov	r3, r1
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].second = ss;
 8002cf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cfc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b4e      	ldr	r3, [pc, #312]	@ (8002e3c <parse_and_print+0x58c>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	b2d0      	uxtb	r0, r2
 8002d0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e48 <parse_and_print+0x598>)
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a5b      	subs	r3, r3, r1
 8002d12:	4413      	add	r3, r2
 8002d14:	3302      	adds	r3, #2
 8002d16:	4602      	mov	r2, r0
 8002d18:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].day = 0xFF;
 8002d1a:	4b48      	ldr	r3, [pc, #288]	@ (8002e3c <parse_and_print+0x58c>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4a49      	ldr	r2, [pc, #292]	@ (8002e48 <parse_and_print+0x598>)
 8002d22:	460b      	mov	r3, r1
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	1a5b      	subs	r3, r3, r1
 8002d28:	4413      	add	r3, r2
 8002d2a:	3303      	adds	r3, #3
 8002d2c:	22ff      	movs	r2, #255	@ 0xff
 8002d2e:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].weekday = 0xFF;
 8002d30:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <parse_and_print+0x58c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	4a44      	ldr	r2, [pc, #272]	@ (8002e48 <parse_and_print+0x598>)
 8002d38:	460b      	mov	r3, r1
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a5b      	subs	r3, r3, r1
 8002d3e:	4413      	add	r3, r2
 8002d40:	3306      	adds	r3, #6
 8002d42:	22ff      	movs	r2, #255	@ 0xff
 8002d44:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].month = 0xFF;
 8002d46:	4b3d      	ldr	r3, [pc, #244]	@ (8002e3c <parse_and_print+0x58c>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e48 <parse_and_print+0x598>)
 8002d4e:	460b      	mov	r3, r1
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	1a5b      	subs	r3, r3, r1
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	22ff      	movs	r2, #255	@ 0xff
 8002d5a:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].year = 0xFF;
 8002d5c:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <parse_and_print+0x58c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	4a39      	ldr	r2, [pc, #228]	@ (8002e48 <parse_and_print+0x598>)
 8002d64:	460b      	mov	r3, r1
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a5b      	subs	r3, r3, r1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3305      	adds	r3, #5
 8002d6e:	22ff      	movs	r2, #255	@ 0xff
 8002d70:	701a      	strb	r2, [r3, #0]
                	alarm_count++;
 8002d72:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <parse_and_print+0x58c>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <parse_and_print+0x58c>)
 8002d7c:	701a      	strb	r2, [r3, #0]

                }
                token = strtok(NULL, "|");
 8002d7e:	4933      	ldr	r1, [pc, #204]	@ (8002e4c <parse_and_print+0x59c>)
 8002d80:	2000      	movs	r0, #0
 8002d82:	f00a ffab 	bl	800dcdc <strtok>
 8002d86:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
            	while (token && alarm_count < num_alarms)
 8002d8a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <parse_and_print+0x4f8>
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <parse_and_print+0x58c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d9c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f6ff af4a 	blt.w	8002c3c <parse_and_print+0x38c>
            }

            	eeprom_store_config(buffer);
 8002da8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002dac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	f7ff f8a5 	bl	8001f00 <eeprom_store_config>
            	HAL_UART_Transmit(&huart3, (uint8_t*)"Alarms set\n\r", 12, HAL_MAX_DELAY);
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	220c      	movs	r2, #12
 8002dbc:	4924      	ldr	r1, [pc, #144]	@ (8002e50 <parse_and_print+0x5a0>)
 8002dbe:	4821      	ldr	r0, [pc, #132]	@ (8002e44 <parse_and_print+0x594>)
 8002dc0:	f005 ff0f 	bl	8008be2 <HAL_UART_Transmit>

            	if (alarm_count > 0) {
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <parse_and_print+0x58c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02e      	beq.n	8002e2a <parse_and_print+0x57a>
            	            ret = rtc_setalarm(&alarm_queue[0]);
 8002dcc:	481e      	ldr	r0, [pc, #120]	@ (8002e48 <parse_and_print+0x598>)
 8002dce:	f7ff fbdf 	bl	8002590 <rtc_setalarm>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e54 <parse_and_print+0x5a4>)
 8002dd8:	701a      	strb	r2, [r3, #0]
            	            if (ret == HAL_OK) {
 8002dda:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <parse_and_print+0x5a4>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d123      	bne.n	8002e2a <parse_and_print+0x57a>
            	                HAL_UART_Transmit(&huart3, (uint8_t*)"First alarm set\n\r", 17, HAL_MAX_DELAY);
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	2211      	movs	r2, #17
 8002de8:	491b      	ldr	r1, [pc, #108]	@ (8002e58 <parse_and_print+0x5a8>)
 8002dea:	4816      	ldr	r0, [pc, #88]	@ (8002e44 <parse_and_print+0x594>)
 8002dec:	f005 fef9 	bl	8008be2 <HAL_UART_Transmit>
            	                if (alarm_count > 1) {
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <parse_and_print+0x58c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d918      	bls.n	8002e2a <parse_and_print+0x57a>
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002df8:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <parse_and_print+0x598>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002dfc:	461a      	mov	r2, r3
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <parse_and_print+0x598>)
 8002e00:	785b      	ldrb	r3, [r3, #1]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002e02:	4619      	mov	r1, r3
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <parse_and_print+0x598>)
 8002e06:	789b      	ldrb	r3, [r3, #2]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4913      	ldr	r1, [pc, #76]	@ (8002e5c <parse_and_print+0x5ac>)
 8002e0e:	4814      	ldr	r0, [pc, #80]	@ (8002e60 <parse_and_print+0x5b0>)
 8002e10:	f00a fe82 	bl	800db18 <siprintf>
            	                    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002e14:	4812      	ldr	r0, [pc, #72]	@ (8002e60 <parse_and_print+0x5b0>)
 8002e16:	f7fd f9db 	bl	80001d0 <strlen>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	490f      	ldr	r1, [pc, #60]	@ (8002e60 <parse_and_print+0x5b0>)
 8002e24:	4807      	ldr	r0, [pc, #28]	@ (8002e44 <parse_and_print+0x594>)
 8002e26:	f005 fedc 	bl	8008be2 <HAL_UART_Transmit>
                }
    }



}
 8002e2a:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	080100f4 	.word	0x080100f4
 8002e38:	080100fc 	.word	0x080100fc
 8002e3c:	2000552a 	.word	0x2000552a
 8002e40:	080101bc 	.word	0x080101bc
 8002e44:	20000374 	.word	0x20000374
 8002e48:	200054c8 	.word	0x200054c8
 8002e4c:	080100c8 	.word	0x080100c8
 8002e50:	080101d8 	.word	0x080101d8
 8002e54:	200000b0 	.word	0x200000b0
 8002e58:	080101e8 	.word	0x080101e8
 8002e5c:	080101fc 	.word	0x080101fc
 8002e60:	20005638 	.word	0x20005638

08002e64 <UART_Print>:


void UART_Print(const char *str) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fd f9af 	bl	80001d0 <strlen>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4803      	ldr	r0, [pc, #12]	@ (8002e8c <UART_Print+0x28>)
 8002e7e:	f005 feb0 	bl	8008be2 <HAL_UART_Transmit>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000374 	.word	0x20000374

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_MspInit+0x4c>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <HAL_MspInit+0x4c>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	@ 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]

    if(hi2c->Instance==I2C1) // Add I2C1 configuration
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a32      	ldr	r2, [pc, #200]	@ (8002fc8 <HAL_I2C_MspInit+0xe8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12c      	bne.n	8002f5c <HAL_I2C_MspInit+0x7c>
    {
      /* USER CODE BEGIN I2C1_MspInit 0 */
      /* USER CODE END I2C1_MspInit 0 */

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	4b31      	ldr	r3, [pc, #196]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b2e      	ldr	r3, [pc, #184]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
      /**I2C1 GPIO Configuration
      PB6     ------> I2C1_SCL
      PB7     ------> I2C1_SDA
      */
      GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002f1e:	23c0      	movs	r3, #192	@ 0xc0
 8002f20:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8002f22:	2312      	movs	r3, #18
 8002f24:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;     // External pull-ups required
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // AF4 for I2C1
 8002f2e:	2304      	movs	r3, #4
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	4619      	mov	r1, r3
 8002f38:	4825      	ldr	r0, [pc, #148]	@ (8002fd0 <HAL_I2C_MspInit+0xf0>)
 8002f3a:	f001 f995 	bl	8004268 <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_I2C1_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f5a:	e031      	b.n	8002fc0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd4 <HAL_I2C_MspInit+0xf4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d12c      	bne.n	8002fc0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	4b18      	ldr	r3, [pc, #96]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	4a17      	ldr	r2, [pc, #92]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f76:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f88:	2312      	movs	r3, #18
 8002f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f94:	2304      	movs	r3, #4
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480c      	ldr	r0, [pc, #48]	@ (8002fd0 <HAL_I2C_MspInit+0xf0>)
 8002fa0:	f001 f962 	bl	8004268 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	4a07      	ldr	r2, [pc, #28]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002fae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_I2C_MspInit+0xec>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3730      	adds	r7, #48	@ 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40005400 	.word	0x40005400
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40005800 	.word	0x40005800

08002fd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	@ 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a91      	ldr	r2, [pc, #580]	@ (800323c <HAL_I2S_MspInit+0x264>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	f040 808c 	bne.w	8003114 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	4b8f      	ldr	r3, [pc, #572]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	4a8e      	ldr	r2, [pc, #568]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800300a:	6413      	str	r3, [r2, #64]	@ 0x40
 800300c:	4b8c      	ldr	r3, [pc, #560]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	4b88      	ldr	r3, [pc, #544]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	4a87      	ldr	r2, [pc, #540]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	6313      	str	r3, [r2, #48]	@ 0x30
 8003028:	4b85      	ldr	r3, [pc, #532]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	4b81      	ldr	r3, [pc, #516]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	4a80      	ldr	r2, [pc, #512]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	6313      	str	r3, [r2, #48]	@ 0x30
 8003044:	4b7e      	ldr	r3, [pc, #504]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003050:	2308      	movs	r3, #8
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003060:	2305      	movs	r3, #5
 8003062:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003068:	4619      	mov	r1, r3
 800306a:	4876      	ldr	r0, [pc, #472]	@ (8003244 <HAL_I2S_MspInit+0x26c>)
 800306c:	f001 f8fc 	bl	8004268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003070:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003082:	2305      	movs	r3, #5
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800308a:	4619      	mov	r1, r3
 800308c:	486e      	ldr	r0, [pc, #440]	@ (8003248 <HAL_I2S_MspInit+0x270>)
 800308e:	f001 f8eb 	bl	8004268 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003092:	4b6e      	ldr	r3, [pc, #440]	@ (800324c <HAL_I2S_MspInit+0x274>)
 8003094:	4a6e      	ldr	r2, [pc, #440]	@ (8003250 <HAL_I2S_MspInit+0x278>)
 8003096:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003098:	4b6c      	ldr	r3, [pc, #432]	@ (800324c <HAL_I2S_MspInit+0x274>)
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309e:	4b6b      	ldr	r3, [pc, #428]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a4:	4b69      	ldr	r3, [pc, #420]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030aa:	4b68      	ldr	r3, [pc, #416]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030b2:	4b66      	ldr	r3, [pc, #408]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ba:	4b64      	ldr	r3, [pc, #400]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80030c0:	4b62      	ldr	r3, [pc, #392]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030c8:	4b60      	ldr	r3, [pc, #384]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030ce:	4b5f      	ldr	r3, [pc, #380]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030d0:	2204      	movs	r2, #4
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80030d4:	4b5d      	ldr	r3, [pc, #372]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030d6:	2203      	movs	r2, #3
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80030da:	4b5c      	ldr	r3, [pc, #368]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030dc:	2200      	movs	r2, #0
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80030e0:	4b5a      	ldr	r3, [pc, #360]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80030e6:	4859      	ldr	r0, [pc, #356]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030e8:	f000 fcbc 	bl	8003a64 <HAL_DMA_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 80030f2:	f7fe fe57 	bl	8001da4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a54      	ldr	r2, [pc, #336]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030fc:	4a53      	ldr	r2, [pc, #332]	@ (800324c <HAL_I2S_MspInit+0x274>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	2024      	movs	r0, #36	@ 0x24
 8003108:	f000 fc75 	bl	80039f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800310c:	2024      	movs	r0, #36	@ 0x24
 800310e:	f000 fc8e 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003112:	e08f      	b.n	8003234 <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a4e      	ldr	r2, [pc, #312]	@ (8003254 <HAL_I2S_MspInit+0x27c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	f040 808a 	bne.w	8003234 <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	4a45      	ldr	r2, [pc, #276]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800312a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800312e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003130:	4b43      	ldr	r3, [pc, #268]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	4a3e      	ldr	r2, [pc, #248]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6313      	str	r3, [r2, #48]	@ 0x30
 800314c:	4b3c      	ldr	r3, [pc, #240]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	4a37      	ldr	r2, [pc, #220]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6313      	str	r3, [r2, #48]	@ 0x30
 8003168:	4b35      	ldr	r3, [pc, #212]	@ (8003240 <HAL_I2S_MspInit+0x268>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003174:	2310      	movs	r3, #16
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003184:	2306      	movs	r3, #6
 8003186:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318c:	4619      	mov	r1, r3
 800318e:	4832      	ldr	r0, [pc, #200]	@ (8003258 <HAL_I2S_MspInit+0x280>)
 8003190:	f001 f86a 	bl	8004268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003194:	2328      	movs	r3, #40	@ 0x28
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031a4:	2306      	movs	r3, #6
 80031a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ac:	4619      	mov	r1, r3
 80031ae:	4826      	ldr	r0, [pc, #152]	@ (8003248 <HAL_I2S_MspInit+0x270>)
 80031b0:	f001 f85a 	bl	8004268 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80031b4:	4b29      	ldr	r3, [pc, #164]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003260 <HAL_I2S_MspInit+0x288>)
 80031b8:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80031ba:	4b28      	ldr	r3, [pc, #160]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c0:	4b26      	ldr	r3, [pc, #152]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c6:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031cc:	4b23      	ldr	r3, [pc, #140]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d2:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031da:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031e8:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031f2:	2204      	movs	r2, #4
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031f8:	2203      	movs	r2, #3
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031fc:	4b17      	ldr	r3, [pc, #92]	@ (800325c <HAL_I2S_MspInit+0x284>)
 80031fe:	2200      	movs	r2, #0
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003202:	4b16      	ldr	r3, [pc, #88]	@ (800325c <HAL_I2S_MspInit+0x284>)
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003208:	4814      	ldr	r0, [pc, #80]	@ (800325c <HAL_I2S_MspInit+0x284>)
 800320a:	f000 fc2b 	bl	8003a64 <HAL_DMA_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2S_MspInit+0x240>
      Error_Handler();
 8003214:	f7fe fdc6 	bl	8001da4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a10      	ldr	r2, [pc, #64]	@ (800325c <HAL_I2S_MspInit+0x284>)
 800321c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800321e:	4a0f      	ldr	r2, [pc, #60]	@ (800325c <HAL_I2S_MspInit+0x284>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	2033      	movs	r0, #51	@ 0x33
 800322a:	f000 fbe4 	bl	80039f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800322e:	2033      	movs	r0, #51	@ 0x33
 8003230:	f000 fbfd 	bl	8003a2e <HAL_NVIC_EnableIRQ>
}
 8003234:	bf00      	nop
 8003236:	3738      	adds	r7, #56	@ 0x38
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40003800 	.word	0x40003800
 8003240:	40023800 	.word	0x40023800
 8003244:	40020800 	.word	0x40020800
 8003248:	40020400 	.word	0x40020400
 800324c:	200001ec 	.word	0x200001ec
 8003250:	40026058 	.word	0x40026058
 8003254:	40003c00 	.word	0x40003c00
 8003258:	40020000 	.word	0x40020000
 800325c:	2000024c 	.word	0x2000024c
 8003260:	40026010 	.word	0x40026010

08003264 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	@ 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a28      	ldr	r2, [pc, #160]	@ (8003324 <HAL_SD_MspInit+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d14a      	bne.n	800331c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 8003290:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003294:	6453      	str	r3, [r2, #68]	@ 0x44
 8003296:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b20      	ldr	r3, [pc, #128]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a18      	ldr	r2, [pc, #96]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b16      	ldr	r3, [pc, #88]	@ (8003328 <HAL_SD_MspInit+0xc4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80032da:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80032de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032ec:	230c      	movs	r3, #12
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4619      	mov	r1, r3
 80032f6:	480d      	ldr	r0, [pc, #52]	@ (800332c <HAL_SD_MspInit+0xc8>)
 80032f8:	f000 ffb6 	bl	8004268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032fc:	2304      	movs	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003308:	2303      	movs	r3, #3
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800330c:	230c      	movs	r3, #12
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4619      	mov	r1, r3
 8003316:	4806      	ldr	r0, [pc, #24]	@ (8003330 <HAL_SD_MspInit+0xcc>)
 8003318:	f000 ffa6 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	@ 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40023800 	.word	0x40023800
 800332c:	40020800 	.word	0x40020800
 8003330:	40020c00 	.word	0x40020c00

08003334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	@ 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a36      	ldr	r2, [pc, #216]	@ (800342c <HAL_UART_MspInit+0xf8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12c      	bne.n	80033b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	4b35      	ldr	r3, [pc, #212]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a34      	ldr	r2, [pc, #208]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 8003360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	4b2e      	ldr	r3, [pc, #184]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	4a2d      	ldr	r2, [pc, #180]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	@ 0x30
 8003382:	4b2b      	ldr	r3, [pc, #172]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800338e:	230c      	movs	r3, #12
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800339e:	2307      	movs	r3, #7
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	4822      	ldr	r0, [pc, #136]	@ (8003434 <HAL_UART_MspInit+0x100>)
 80033aa:	f000 ff5d 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033ae:	e039      	b.n	8003424 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a20      	ldr	r2, [pc, #128]	@ (8003438 <HAL_UART_MspInit+0x104>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d134      	bne.n	8003424 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	4b1c      	ldr	r3, [pc, #112]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	4a14      	ldr	r2, [pc, #80]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e6:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <HAL_UART_MspInit+0xfc>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003404:	2307      	movs	r3, #7
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	480b      	ldr	r0, [pc, #44]	@ (800343c <HAL_UART_MspInit+0x108>)
 8003410:	f000 ff2a 	bl	8004268 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003414:	2200      	movs	r2, #0
 8003416:	2100      	movs	r1, #0
 8003418:	2027      	movs	r0, #39	@ 0x27
 800341a:	f000 faec 	bl	80039f6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 800341e:	2027      	movs	r0, #39	@ 0x27
 8003420:	f000 fb05 	bl	8003a2e <HAL_NVIC_EnableIRQ>
}
 8003424:	bf00      	nop
 8003426:	3730      	adds	r7, #48	@ 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40004400 	.word	0x40004400
 8003430:	40023800 	.word	0x40023800
 8003434:	40020000 	.word	0x40020000
 8003438:	40004800 	.word	0x40004800
 800343c:	40020c00 	.word	0x40020c00

08003440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <NMI_Handler+0x4>

08003448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <HardFault_Handler+0x4>

08003450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <MemManage_Handler+0x4>

08003458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <BusFault_Handler+0x4>

08003460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <UsageFault_Handler+0x4>

08003468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003496:	f000 f98f 	bl	80037b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}

0800349e <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void EXTI0_IRQHandler(void)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f001 f896 	bl	80045d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}

080034ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80034b0:	4802      	ldr	r0, [pc, #8]	@ (80034bc <DMA1_Stream0_IRQHandler+0x10>)
 80034b2:	f000 fc6f 	bl	8003d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000024c 	.word	0x2000024c

080034c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80034c4:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <DMA1_Stream3_IRQHandler+0x10>)
 80034c6:	f000 fc65 	bl	8003d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200001ec 	.word	0x200001ec

080034d4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80034d8:	4802      	ldr	r0, [pc, #8]	@ (80034e4 <SPI2_IRQHandler+0x10>)
 80034da:	f003 f9cb 	bl	8006874 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	2000015c 	.word	0x2000015c

080034e8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80034ec:	4802      	ldr	r0, [pc, #8]	@ (80034f8 <SPI3_IRQHandler+0x10>)
 80034ee:	f003 f9c1 	bl	8006874 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001a4 	.word	0x200001a4

080034fc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003500:	4802      	ldr	r0, [pc, #8]	@ (800350c <USART3_IRQHandler+0x10>)
 8003502:	f005 fc31 	bl	8008d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000374 	.word	0x20000374

08003510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return 1;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_kill>:

int _kill(int pid, int sig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800352a:	f00a fc89 	bl	800de40 <__errno>
 800352e:	4603      	mov	r3, r0
 8003530:	2216      	movs	r2, #22
 8003532:	601a      	str	r2, [r3, #0]
  return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_exit>:

void _exit (int status)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003548:	f04f 31ff 	mov.w	r1, #4294967295
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ffe7 	bl	8003520 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <_exit+0x12>

08003556 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e00a      	b.n	800357e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003568:	f3af 8000 	nop.w
 800356c:	4601      	mov	r1, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	60ba      	str	r2, [r7, #8]
 8003574:	b2ca      	uxtb	r2, r1
 8003576:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	dbf0      	blt.n	8003568 <_read+0x12>
  }

  return len;
 8003586:	687b      	ldr	r3, [r7, #4]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e009      	b.n	80035b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	60ba      	str	r2, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbf1      	blt.n	80035a2 <_write+0x12>
  }
  return len;
 80035be:	687b      	ldr	r3, [r7, #4]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_close>:

int _close(int file)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035f0:	605a      	str	r2, [r3, #4]
  return 0;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_isatty>:

int _isatty(int file)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003608:	2301      	movs	r3, #1
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <_sbrk+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <_sbrk+0x60>)
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <_sbrk+0x64>)
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <_sbrk+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003660:	f00a fbee 	bl	800de40 <__errno>
 8003664:	4603      	mov	r3, r0
 8003666:	220c      	movs	r2, #12
 8003668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e009      	b.n	8003684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <_sbrk+0x64>)
 8003680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20020000 	.word	0x20020000
 8003690:	00000400 	.word	0x00000400
 8003694:	20005670 	.word	0x20005670
 8003698:	20005800 	.word	0x20005800

0800369c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <SystemInit+0x20>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <SystemInit+0x20>)
 80036a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036c4:	480d      	ldr	r0, [pc, #52]	@ (80036fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036c6:	490e      	ldr	r1, [pc, #56]	@ (8003700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a0b      	ldr	r2, [pc, #44]	@ (8003708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036dc:	4c0b      	ldr	r4, [pc, #44]	@ (800370c <LoopFillZerobss+0x26>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036ea:	f7ff ffd7 	bl	800369c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ee:	f00a fbad 	bl	800de4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f2:	f7fc ff53 	bl	800059c <main>
  bx  lr    
 80036f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003700:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003704:	080105d8 	.word	0x080105d8
  ldr r2, =_sbss
 8003708:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800370c:	20005800 	.word	0x20005800

08003710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003710:	e7fe      	b.n	8003710 <ADC_IRQHandler>
	...

08003714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <HAL_Init+0x40>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <HAL_Init+0x40>)
 800371e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <HAL_Init+0x40>)
 800372a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003730:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_Init+0x40>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a07      	ldr	r2, [pc, #28]	@ (8003754 <HAL_Init+0x40>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800373a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373c:	2003      	movs	r0, #3
 800373e:	f000 f94f 	bl	80039e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003742:	200f      	movs	r0, #15
 8003744:	f000 f808 	bl	8003758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003748:	f7ff fba2 	bl	8002e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023c00 	.word	0x40023c00

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_InitTick+0x54>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <HAL_InitTick+0x58>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800376e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f967 	bl	8003a4a <HAL_SYSTICK_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00e      	b.n	80037a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0f      	cmp	r3, #15
 800378a:	d80a      	bhi.n	80037a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800378c:	2200      	movs	r2, #0
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f000 f92f 	bl	80039f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003798:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <HAL_InitTick+0x5c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000020 	.word	0x20000020
 80037b0:	20000028 	.word	0x20000028
 80037b4:	20000024 	.word	0x20000024

080037b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_IncTick+0x20>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_IncTick+0x24>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <HAL_IncTick+0x24>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000028 	.word	0x20000028
 80037dc:	20005674 	.word	0x20005674

080037e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return uwTick;
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <HAL_GetTick+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20005674 	.word	0x20005674

080037f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff ffee 	bl	80037e0 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d005      	beq.n	800381e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <HAL_Delay+0x44>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800381e:	bf00      	nop
 8003820:	f7ff ffde 	bl	80037e0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d8f7      	bhi.n	8003820 <HAL_Delay+0x28>
  {
  }
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000028 	.word	0x20000028

08003840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003850:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800386c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	60d3      	str	r3, [r2, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <__NVIC_GetPriorityGrouping+0x18>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db0b      	blt.n	80038ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	4907      	ldr	r1, [pc, #28]	@ (80038dc <__NVIC_EnableIRQ+0x38>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2001      	movs	r0, #1
 80038c6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000e100 	.word	0xe000e100

080038e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	db0a      	blt.n	800390a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	490c      	ldr	r1, [pc, #48]	@ (800392c <__NVIC_SetPriority+0x4c>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	440b      	add	r3, r1
 8003904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003908:	e00a      	b.n	8003920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4908      	ldr	r1, [pc, #32]	@ (8003930 <__NVIC_SetPriority+0x50>)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3b04      	subs	r3, #4
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	440b      	add	r3, r1
 800391e:	761a      	strb	r2, [r3, #24]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000e100 	.word	0xe000e100
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	@ 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f1c3 0307 	rsb	r3, r3, #7
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf28      	it	cs
 8003952:	2304      	movcs	r3, #4
 8003954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3304      	adds	r3, #4
 800395a:	2b06      	cmp	r3, #6
 800395c:	d902      	bls.n	8003964 <NVIC_EncodePriority+0x30>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3b03      	subs	r3, #3
 8003962:	e000      	b.n	8003966 <NVIC_EncodePriority+0x32>
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	401a      	ands	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800397c:	f04f 31ff 	mov.w	r1, #4294967295
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43d9      	mvns	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	4313      	orrs	r3, r2
         );
}
 800398e:	4618      	mov	r0, r3
 8003990:	3724      	adds	r7, #36	@ 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ac:	d301      	bcc.n	80039b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00f      	b.n	80039d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b2:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <SysTick_Config+0x40>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ba:	210f      	movs	r1, #15
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	f7ff ff8e 	bl	80038e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <SysTick_Config+0x40>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ca:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <SysTick_Config+0x40>)
 80039cc:	2207      	movs	r2, #7
 80039ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	e000e010 	.word	0xe000e010

080039e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff29 	bl	8003840 <__NVIC_SetPriorityGrouping>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a08:	f7ff ff3e 	bl	8003888 <__NVIC_GetPriorityGrouping>
 8003a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f7ff ff8e 	bl	8003934 <NVIC_EncodePriority>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff5d 	bl	80038e0 <__NVIC_SetPriority>
}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff31 	bl	80038a4 <__NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ffa2 	bl	800399c <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff feb6 	bl	80037e0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e099      	b.n	8003bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa0:	e00f      	b.n	8003ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aa2:	f7ff fe9d 	bl	80037e0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d908      	bls.n	8003ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e078      	b.n	8003bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e8      	bne.n	8003aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <HAL_DMA_Init+0x158>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0307 	bic.w	r3, r3, #7
 8003b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d117      	bne.n	8003b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb01 	bl	8004170 <DMA_CheckFifoParam>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b82:	2301      	movs	r3, #1
 8003b84:	e016      	b.n	8003bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fab8 	bl	8004104 <DMA_CalcBaseAndBitshift>
 8003b94:	4603      	mov	r3, r0
 8003b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	223f      	movs	r2, #63	@ 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	f010803f 	.word	0xf010803f

08003bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_DMA_Start_IT+0x26>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e040      	b.n	8003c68 <HAL_DMA_Start_IT+0xa8>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d12f      	bne.n	8003c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa4a 	bl	80040a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	223f      	movs	r2, #63	@ 0x3f
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0216 	orr.w	r2, r2, #22
 8003c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0208 	orr.w	r2, r2, #8
 8003c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e005      	b.n	8003c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c7e:	f7ff fdaf 	bl	80037e0 <HAL_GetTick>
 8003c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d008      	beq.n	8003ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e052      	b.n	8003d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0216 	bic.w	r2, r2, #22
 8003cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <HAL_DMA_Abort+0x62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0208 	bic.w	r2, r2, #8
 8003ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf2:	e013      	b.n	8003d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cf4:	f7ff fd74 	bl	80037e0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d90c      	bls.n	8003d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e015      	b.n	8003d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e4      	bne.n	8003cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	223f      	movs	r2, #63	@ 0x3f
 8003d30:	409a      	lsls	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d004      	beq.n	8003d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2280      	movs	r2, #128	@ 0x80
 8003d68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e00c      	b.n	8003d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2205      	movs	r2, #5
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003da0:	4b8e      	ldr	r3, [pc, #568]	@ (8003fdc <HAL_DMA_IRQHandler+0x248>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a8e      	ldr	r2, [pc, #568]	@ (8003fe0 <HAL_DMA_IRQHandler+0x24c>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01a      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0204 	bic.w	r2, r2, #4
 8003de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	2208      	movs	r2, #8
 8003dee:	409a      	lsls	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	2201      	movs	r2, #1
 8003e24:	409a      	lsls	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d012      	beq.n	8003e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	2204      	movs	r2, #4
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	2210      	movs	r2, #16
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d043      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03c      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	2210      	movs	r2, #16
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d018      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d024      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
 8003ec2:	e01f      	b.n	8003f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
 8003ed4:	e016      	b.n	8003f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0208 	bic.w	r2, r2, #8
 8003ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	2220      	movs	r2, #32
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 808f 	beq.w	8004034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8087 	beq.w	8004034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d136      	bne.n	8003fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0216 	bic.w	r2, r2, #22
 8003f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x1da>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0208 	bic.w	r2, r2, #8
 8003f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	223f      	movs	r2, #63	@ 0x3f
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d07e      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
        }
        return;
 8003faa:	e079      	b.n	80040a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e02c      	b.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
 8003fda:	bf00      	nop
 8003fdc:	20000020 	.word	0x20000020
 8003fe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d023      	beq.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e01e      	b.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0210 	bic.w	r2, r2, #16
 8004012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	2b00      	cmp	r3, #0
 800403a:	d032      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2205      	movs	r2, #5
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3301      	adds	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	429a      	cmp	r2, r3
 800406a:	d307      	bcc.n	800407c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f2      	bne.n	8004060 <HAL_DMA_IRQHandler+0x2cc>
 800407a:	e000      	b.n	800407e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800407c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
 800409e:	e000      	b.n	80040a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040a0:	bf00      	nop
    }
  }
}
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b40      	cmp	r3, #64	@ 0x40
 80040d4:	d108      	bne.n	80040e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040e6:	e007      	b.n	80040f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	3b10      	subs	r3, #16
 8004114:	4a14      	ldr	r2, [pc, #80]	@ (8004168 <DMA_CalcBaseAndBitshift+0x64>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800411e:	4a13      	ldr	r2, [pc, #76]	@ (800416c <DMA_CalcBaseAndBitshift+0x68>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d909      	bls.n	8004146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	659a      	str	r2, [r3, #88]	@ 0x58
 8004144:	e007      	b.n	8004156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	aaaaaaab 	.word	0xaaaaaaab
 800416c:	08010330 	.word	0x08010330

08004170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11f      	bne.n	80041ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d856      	bhi.n	800423e <DMA_CheckFifoParam+0xce>
 8004190:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <DMA_CheckFifoParam+0x28>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041bb 	.word	0x080041bb
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	0800423f 	.word	0x0800423f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d046      	beq.n	8004242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b8:	e043      	b.n	8004242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041c2:	d140      	bne.n	8004246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c8:	e03d      	b.n	8004246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d2:	d121      	bne.n	8004218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d837      	bhi.n	800424a <DMA_CheckFifoParam+0xda>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <DMA_CheckFifoParam+0x70>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	080041f7 	.word	0x080041f7
 80041e8:	080041f1 	.word	0x080041f1
 80041ec:	08004209 	.word	0x08004209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e030      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d025      	beq.n	800424e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004206:	e022      	b.n	800424e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004210:	d11f      	bne.n	8004252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004216:	e01c      	b.n	8004252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d903      	bls.n	8004226 <DMA_CheckFifoParam+0xb6>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d003      	beq.n	800422c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004224:	e018      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      break;
 800422a:	e015      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e00b      	b.n	8004256 <DMA_CheckFifoParam+0xe6>
      break;
 800423e:	bf00      	nop
 8004240:	e00a      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
 8004244:	e008      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004246:	bf00      	nop
 8004248:	e006      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;   
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
    }
  } 
  
  return status; 
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	@ 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e16b      	b.n	800455c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 815a 	bne.w	8004556 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80b4 	beq.w	8004556 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b60      	ldr	r3, [pc, #384]	@ (8004574 <HAL_GPIO_Init+0x30c>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004574 <HAL_GPIO_Init+0x30c>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004574 <HAL_GPIO_Init+0x30c>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a5b      	ldr	r2, [pc, #364]	@ (8004578 <HAL_GPIO_Init+0x310>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a52      	ldr	r2, [pc, #328]	@ (800457c <HAL_GPIO_Init+0x314>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02b      	beq.n	800448e <HAL_GPIO_Init+0x226>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a51      	ldr	r2, [pc, #324]	@ (8004580 <HAL_GPIO_Init+0x318>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d025      	beq.n	800448a <HAL_GPIO_Init+0x222>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a50      	ldr	r2, [pc, #320]	@ (8004584 <HAL_GPIO_Init+0x31c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01f      	beq.n	8004486 <HAL_GPIO_Init+0x21e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4f      	ldr	r2, [pc, #316]	@ (8004588 <HAL_GPIO_Init+0x320>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d019      	beq.n	8004482 <HAL_GPIO_Init+0x21a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4e      	ldr	r2, [pc, #312]	@ (800458c <HAL_GPIO_Init+0x324>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_GPIO_Init+0x216>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4d      	ldr	r2, [pc, #308]	@ (8004590 <HAL_GPIO_Init+0x328>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00d      	beq.n	800447a <HAL_GPIO_Init+0x212>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4c      	ldr	r2, [pc, #304]	@ (8004594 <HAL_GPIO_Init+0x32c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <HAL_GPIO_Init+0x20e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4b      	ldr	r2, [pc, #300]	@ (8004598 <HAL_GPIO_Init+0x330>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_GPIO_Init+0x20a>
 800446e:	2307      	movs	r3, #7
 8004470:	e00e      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004472:	2308      	movs	r3, #8
 8004474:	e00c      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004476:	2306      	movs	r3, #6
 8004478:	e00a      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800447a:	2305      	movs	r3, #5
 800447c:	e008      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800447e:	2304      	movs	r3, #4
 8004480:	e006      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004482:	2303      	movs	r3, #3
 8004484:	e004      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004486:	2302      	movs	r3, #2
 8004488:	e002      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800448e:	2300      	movs	r3, #0
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	f002 0203 	and.w	r2, r2, #3
 8004496:	0092      	lsls	r2, r2, #2
 8004498:	4093      	lsls	r3, r2
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044a0:	4935      	ldr	r1, [pc, #212]	@ (8004578 <HAL_GPIO_Init+0x310>)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3302      	adds	r3, #2
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ae:	4b3b      	ldr	r3, [pc, #236]	@ (800459c <HAL_GPIO_Init+0x334>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044d2:	4a32      	ldr	r2, [pc, #200]	@ (800459c <HAL_GPIO_Init+0x334>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d8:	4b30      	ldr	r3, [pc, #192]	@ (800459c <HAL_GPIO_Init+0x334>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044fc:	4a27      	ldr	r2, [pc, #156]	@ (800459c <HAL_GPIO_Init+0x334>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004502:	4b26      	ldr	r3, [pc, #152]	@ (800459c <HAL_GPIO_Init+0x334>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004526:	4a1d      	ldr	r2, [pc, #116]	@ (800459c <HAL_GPIO_Init+0x334>)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800452c:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <HAL_GPIO_Init+0x334>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004550:	4a12      	ldr	r2, [pc, #72]	@ (800459c <HAL_GPIO_Init+0x334>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	f67f ae90 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3724      	adds	r7, #36	@ 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	40013800 	.word	0x40013800
 800457c:	40020000 	.word	0x40020000
 8004580:	40020400 	.word	0x40020400
 8004584:	40020800 	.word	0x40020800
 8004588:	40020c00 	.word	0x40020c00
 800458c:	40021000 	.word	0x40021000
 8004590:	40021400 	.word	0x40021400
 8004594:	40021800 	.word	0x40021800
 8004598:	40021c00 	.word	0x40021c00
 800459c:	40013c00 	.word	0x40013c00

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045bc:	e003      	b.n	80045c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045be:	887b      	ldrh	r3, [r7, #2]
 80045c0:	041a      	lsls	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	619a      	str	r2, [r3, #24]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ea:	4a05      	ldr	r2, [pc, #20]	@ (8004600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fd32 	bl	800105c <HAL_GPIO_EXTI_Callback>
  }
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40013c00 	.word	0x40013c00

08004604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e12b      	b.n	800486e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe fc58 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	@ 0x24
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004668:	f003 f97e 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 800466c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4a81      	ldr	r2, [pc, #516]	@ (8004878 <HAL_I2C_Init+0x274>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d807      	bhi.n	8004688 <HAL_I2C_Init+0x84>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a80      	ldr	r2, [pc, #512]	@ (800487c <HAL_I2C_Init+0x278>)
 800467c:	4293      	cmp	r3, r2
 800467e:	bf94      	ite	ls
 8004680:	2301      	movls	r3, #1
 8004682:	2300      	movhi	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e006      	b.n	8004696 <HAL_I2C_Init+0x92>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a7d      	ldr	r2, [pc, #500]	@ (8004880 <HAL_I2C_Init+0x27c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	bf94      	ite	ls
 8004690:	2301      	movls	r3, #1
 8004692:	2300      	movhi	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0e7      	b.n	800486e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a78      	ldr	r2, [pc, #480]	@ (8004884 <HAL_I2C_Init+0x280>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	0c9b      	lsrs	r3, r3, #18
 80046a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004878 <HAL_I2C_Init+0x274>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d802      	bhi.n	80046d8 <HAL_I2C_Init+0xd4>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3301      	adds	r3, #1
 80046d6:	e009      	b.n	80046ec <HAL_I2C_Init+0xe8>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	4a69      	ldr	r2, [pc, #420]	@ (8004888 <HAL_I2C_Init+0x284>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	3301      	adds	r3, #1
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	495c      	ldr	r1, [pc, #368]	@ (8004878 <HAL_I2C_Init+0x274>)
 8004708:	428b      	cmp	r3, r1
 800470a:	d819      	bhi.n	8004740 <HAL_I2C_Init+0x13c>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1e59      	subs	r1, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	fbb1 f3f3 	udiv	r3, r1, r3
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004720:	400b      	ands	r3, r1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_I2C_Init+0x138>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1e59      	subs	r1, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	fbb1 f3f3 	udiv	r3, r1, r3
 8004734:	3301      	adds	r3, #1
 8004736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473a:	e051      	b.n	80047e0 <HAL_I2C_Init+0x1dc>
 800473c:	2304      	movs	r3, #4
 800473e:	e04f      	b.n	80047e0 <HAL_I2C_Init+0x1dc>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d111      	bne.n	800476c <HAL_I2C_Init+0x168>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e58      	subs	r0, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e012      	b.n	8004792 <HAL_I2C_Init+0x18e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Init+0x196>
 8004796:	2301      	movs	r3, #1
 8004798:	e022      	b.n	80047e0 <HAL_I2C_Init+0x1dc>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10e      	bne.n	80047c0 <HAL_I2C_Init+0x1bc>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1e58      	subs	r0, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6859      	ldr	r1, [r3, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	440b      	add	r3, r1
 80047b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047be:	e00f      	b.n	80047e0 <HAL_I2C_Init+0x1dc>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1e58      	subs	r0, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	0099      	lsls	r1, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	6809      	ldr	r1, [r1, #0]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800480e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6911      	ldr	r1, [r2, #16]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68d2      	ldr	r2, [r2, #12]
 800481a:	4311      	orrs	r1, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	430b      	orrs	r3, r1
 8004822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	000186a0 	.word	0x000186a0
 800487c:	001e847f 	.word	0x001e847f
 8004880:	003d08ff 	.word	0x003d08ff
 8004884:	431bde83 	.word	0x431bde83
 8004888:	10624dd3 	.word	0x10624dd3

0800488c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	461a      	mov	r2, r3
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
 800489c:	4613      	mov	r3, r2
 800489e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048a0:	f7fe ff9e 	bl	80037e0 <HAL_GetTick>
 80048a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	f040 80e0 	bne.w	8004a74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2319      	movs	r3, #25
 80048ba:	2201      	movs	r2, #1
 80048bc:	4970      	ldr	r1, [pc, #448]	@ (8004a80 <HAL_I2C_Master_Transmit+0x1f4>)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f001 fa24 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
 80048cc:	e0d3      	b.n	8004a76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_I2C_Master_Transmit+0x50>
 80048d8:	2302      	movs	r3, #2
 80048da:	e0cc      	b.n	8004a76 <HAL_I2C_Master_Transmit+0x1ea>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d007      	beq.n	8004902 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004910:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2221      	movs	r2, #33	@ 0x21
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2210      	movs	r2, #16
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	893a      	ldrh	r2, [r7, #8]
 8004932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a50      	ldr	r2, [pc, #320]	@ (8004a84 <HAL_I2C_Master_Transmit+0x1f8>)
 8004942:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004944:	8979      	ldrh	r1, [r7, #10]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 ff10 	bl	8005770 <I2C_MasterRequestWrite>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e08d      	b.n	8004a76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004970:	e066      	b.n	8004a40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	6a39      	ldr	r1, [r7, #32]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f001 fa9e 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	2b04      	cmp	r3, #4
 8004988:	d107      	bne.n	800499a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004998:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06b      	b.n	8004a76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d11b      	bne.n	8004a14 <HAL_I2C_Master_Transmit+0x188>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d017      	beq.n	8004a14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	6a39      	ldr	r1, [r7, #32]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f001 fa8e 	bl	8005f3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d107      	bne.n	8004a3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e01a      	b.n	8004a76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d194      	bne.n	8004972 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00100002 	.word	0x00100002
 8004a84:	ffff0000 	.word	0xffff0000

08004a88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08c      	sub	sp, #48	@ 0x30
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	460b      	mov	r3, r1
 8004a96:	817b      	strh	r3, [r7, #10]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a9c:	f7fe fea0 	bl	80037e0 <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	f040 820b 	bne.w	8004ec6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2319      	movs	r3, #25
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	497c      	ldr	r1, [pc, #496]	@ (8004cac <HAL_I2C_Master_Receive+0x224>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f001 f926 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e1fe      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2C_Master_Receive+0x50>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e1f7      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d007      	beq.n	8004afe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2222      	movs	r2, #34	@ 0x22
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	893a      	ldrh	r2, [r7, #8]
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a5c      	ldr	r2, [pc, #368]	@ (8004cb0 <HAL_I2C_Master_Receive+0x228>)
 8004b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fe94 	bl	8005874 <I2C_MasterRequestRead>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e1b8      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d113      	bne.n	8004b86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	623b      	str	r3, [r7, #32]
 8004b72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e18c      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d11b      	bne.n	8004bc6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e16c      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d11b      	bne.n	8004c06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	e14c      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c2c:	e138      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	f200 80f1 	bhi.w	8004e1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d123      	bne.n	8004c88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f001 f9b9 	bl	8005fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e139      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c86:	e10b      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d14e      	bne.n	8004d2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	2200      	movs	r2, #0
 8004c98:	4906      	ldr	r1, [pc, #24]	@ (8004cb4 <HAL_I2C_Master_Receive+0x22c>)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 f836 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e10e      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
 8004caa:	bf00      	nop
 8004cac:	00100002 	.word	0x00100002
 8004cb0:	ffff0000 	.word	0xffff0000
 8004cb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d2c:	e0b8      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	2200      	movs	r2, #0
 8004d36:	4966      	ldr	r1, [pc, #408]	@ (8004ed0 <HAL_I2C_Master_Receive+0x448>)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 ffe7 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0bf      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	494f      	ldr	r1, [pc, #316]	@ (8004ed0 <HAL_I2C_Master_Receive+0x448>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 ffb9 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e091      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e18:	e042      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f001 f8cc 	bl	8005fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e04c      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d118      	bne.n	8004ea0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f47f aec2 	bne.w	8004c2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ec6:	2302      	movs	r3, #2
  }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3728      	adds	r7, #40	@ 0x28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	00010004 	.word	0x00010004

08004ed4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	4608      	mov	r0, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	817b      	strh	r3, [r7, #10]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	813b      	strh	r3, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eee:	f7fe fc77 	bl	80037e0 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	f040 80d9 	bne.w	80050b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2319      	movs	r3, #25
 8004f08:	2201      	movs	r2, #1
 8004f0a:	496d      	ldr	r1, [pc, #436]	@ (80050c0 <HAL_I2C_Mem_Write+0x1ec>)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fefd 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e0cc      	b.n	80050b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_I2C_Mem_Write+0x56>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0c5      	b.n	80050b6 <HAL_I2C_Mem_Write+0x1e2>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d007      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2221      	movs	r2, #33	@ 0x21
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2240      	movs	r2, #64	@ 0x40
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a3a      	ldr	r2, [r7, #32]
 8004f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80050c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004f90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f92:	88f8      	ldrh	r0, [r7, #6]
 8004f94:	893a      	ldrh	r2, [r7, #8]
 8004f96:	8979      	ldrh	r1, [r7, #10]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fd34 	bl	8005a10 <I2C_RequestMemoryWrite>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d052      	beq.n	8005054 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e081      	b.n	80050b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 ff7e 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d107      	bne.n	8004fda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06b      	b.n	80050b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	781a      	ldrb	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d11b      	bne.n	8005054 <HAL_I2C_Mem_Write+0x180>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1aa      	bne.n	8004fb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 ff6a 	bl	8005f3a <I2C_WaitOnBTFFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	2b04      	cmp	r3, #4
 8005072:	d107      	bne.n	8005084 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005082:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e016      	b.n	80050b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e000      	b.n	80050b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	00100002 	.word	0x00100002
 80050c4:	ffff0000 	.word	0xffff0000

080050c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	@ 0x30
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	817b      	strh	r3, [r7, #10]
 80050da:	460b      	mov	r3, r1
 80050dc:	813b      	strh	r3, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050e2:	f7fe fb7d 	bl	80037e0 <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	f040 8208 	bne.w	8005506 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2319      	movs	r3, #25
 80050fc:	2201      	movs	r2, #1
 80050fe:	497b      	ldr	r1, [pc, #492]	@ (80052ec <HAL_I2C_Mem_Read+0x224>)
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fe03 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
 800510e:	e1fb      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_I2C_Mem_Read+0x56>
 800511a:	2302      	movs	r3, #2
 800511c:	e1f4      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b01      	cmp	r3, #1
 8005132:	d007      	beq.n	8005144 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2222      	movs	r2, #34	@ 0x22
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2240      	movs	r2, #64	@ 0x40
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a5b      	ldr	r2, [pc, #364]	@ (80052f0 <HAL_I2C_Mem_Read+0x228>)
 8005184:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005186:	88f8      	ldrh	r0, [r7, #6]
 8005188:	893a      	ldrh	r2, [r7, #8]
 800518a:	8979      	ldrh	r1, [r7, #10]
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	4603      	mov	r3, r0
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fcd0 	bl	8005b3c <I2C_RequestMemoryRead>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1b0      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d113      	bne.n	80051d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	623b      	str	r3, [r7, #32]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e184      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11b      	bne.n	8005216 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e164      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521a:	2b02      	cmp	r3, #2
 800521c:	d11b      	bne.n	8005256 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800523c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	e144      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800526c:	e138      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	2b03      	cmp	r3, #3
 8005274:	f200 80f1 	bhi.w	800545a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	2b01      	cmp	r3, #1
 800527e:	d123      	bne.n	80052c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005282:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 fe99 	bl	8005fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e139      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052c6:	e10b      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d14e      	bne.n	800536e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2200      	movs	r2, #0
 80052d8:	4906      	ldr	r1, [pc, #24]	@ (80052f4 <HAL_I2C_Mem_Read+0x22c>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fd16 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e10e      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
 80052ea:	bf00      	nop
 80052ec:	00100002 	.word	0x00100002
 80052f0:	ffff0000 	.word	0xffff0000
 80052f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800536c:	e0b8      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	2200      	movs	r2, #0
 8005376:	4966      	ldr	r1, [pc, #408]	@ (8005510 <HAL_I2C_Mem_Read+0x448>)
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fcc7 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0bf      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	2200      	movs	r2, #0
 80053d2:	494f      	ldr	r1, [pc, #316]	@ (8005510 <HAL_I2C_Mem_Read+0x448>)
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fc99 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e091      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005458:	e042      	b.n	80054e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fdac 	bl	8005fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e04c      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d118      	bne.n	80054e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f47f aec2 	bne.w	800526e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3728      	adds	r7, #40	@ 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	00010004 	.word	0x00010004

08005514 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	@ 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	460b      	mov	r3, r1
 8005522:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005524:	f7fe f95c 	bl	80037e0 <HAL_GetTick>
 8005528:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b20      	cmp	r3, #32
 8005538:	f040 8111 	bne.w	800575e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2319      	movs	r3, #25
 8005542:	2201      	movs	r2, #1
 8005544:	4988      	ldr	r1, [pc, #544]	@ (8005768 <HAL_I2C_IsDeviceReady+0x254>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fbe0 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005552:	2302      	movs	r3, #2
 8005554:	e104      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_I2C_IsDeviceReady+0x50>
 8005560:	2302      	movs	r3, #2
 8005562:	e0fd      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b01      	cmp	r3, #1
 8005578:	d007      	beq.n	800558a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005598:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2224      	movs	r2, #36	@ 0x24
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a70      	ldr	r2, [pc, #448]	@ (800576c <HAL_I2C_IsDeviceReady+0x258>)
 80055ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fb9e 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e4:	d103      	bne.n	80055ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0b6      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055f2:	897b      	ldrh	r3, [r7, #10]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005600:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005602:	f7fe f8ed 	bl	80037e0 <HAL_GetTick>
 8005606:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b02      	cmp	r3, #2
 8005614:	bf0c      	ite	eq
 8005616:	2301      	moveq	r3, #1
 8005618:	2300      	movne	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005636:	e025      	b.n	8005684 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fe f8d2 	bl	80037e0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <HAL_I2C_IsDeviceReady+0x13a>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	22a0      	movs	r2, #160	@ 0xa0
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b02      	cmp	r3, #2
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2ba0      	cmp	r3, #160	@ 0xa0
 800568e:	d005      	beq.n	800569c <HAL_I2C_IsDeviceReady+0x188>
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <HAL_I2C_IsDeviceReady+0x188>
 8005696:	7dbb      	ldrb	r3, [r7, #22]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0cd      	beq.n	8005638 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d129      	bne.n	8005706 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	2319      	movs	r3, #25
 80056de:	2201      	movs	r2, #1
 80056e0:	4921      	ldr	r1, [pc, #132]	@ (8005768 <HAL_I2C_IsDeviceReady+0x254>)
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fb12 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e036      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e02c      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005714:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800571e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2319      	movs	r3, #25
 8005726:	2201      	movs	r2, #1
 8005728:	490f      	ldr	r1, [pc, #60]	@ (8005768 <HAL_I2C_IsDeviceReady+0x254>)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 faee 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e012      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3301      	adds	r3, #1
 800573e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	f4ff af32 	bcc.w	80055ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800575e:	2302      	movs	r3, #2
  }
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	00100002 	.word	0x00100002
 800576c:	ffff0000 	.word	0xffff0000

08005770 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	460b      	mov	r3, r1
 800577e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d006      	beq.n	800579a <I2C_MasterRequestWrite+0x2a>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d003      	beq.n	800579a <I2C_MasterRequestWrite+0x2a>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005798:	d108      	bne.n	80057ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e00b      	b.n	80057c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	2b12      	cmp	r3, #18
 80057b2:	d107      	bne.n	80057c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fa9b 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00d      	beq.n	80057f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ea:	d103      	bne.n	80057f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e035      	b.n	8005864 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005800:	d108      	bne.n	8005814 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005802:	897b      	ldrh	r3, [r7, #10]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005810:	611a      	str	r2, [r3, #16]
 8005812:	e01b      	b.n	800584c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005814:	897b      	ldrh	r3, [r7, #10]
 8005816:	11db      	asrs	r3, r3, #7
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 0306 	and.w	r3, r3, #6
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f063 030f 	orn	r3, r3, #15
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	490e      	ldr	r1, [pc, #56]	@ (800586c <I2C_MasterRequestWrite+0xfc>)
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fac1 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e010      	b.n	8005864 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4907      	ldr	r1, [pc, #28]	@ (8005870 <I2C_MasterRequestWrite+0x100>)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fab1 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	00010008 	.word	0x00010008
 8005870:	00010002 	.word	0x00010002

08005874 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	460b      	mov	r3, r1
 8005882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005898:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d006      	beq.n	80058ae <I2C_MasterRequestRead+0x3a>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d003      	beq.n	80058ae <I2C_MasterRequestRead+0x3a>
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058ac:	d108      	bne.n	80058c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e00b      	b.n	80058d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	2b11      	cmp	r3, #17
 80058c6:	d107      	bne.n	80058d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fa11 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058fe:	d103      	bne.n	8005908 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e079      	b.n	8005a00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005914:	d108      	bne.n	8005928 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005916:	897b      	ldrh	r3, [r7, #10]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	611a      	str	r2, [r3, #16]
 8005926:	e05f      	b.n	80059e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005928:	897b      	ldrh	r3, [r7, #10]
 800592a:	11db      	asrs	r3, r3, #7
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0306 	and.w	r3, r3, #6
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f063 030f 	orn	r3, r3, #15
 8005938:	b2da      	uxtb	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4930      	ldr	r1, [pc, #192]	@ (8005a08 <I2C_MasterRequestRead+0x194>)
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fa37 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e054      	b.n	8005a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005956:	897b      	ldrh	r3, [r7, #10]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4929      	ldr	r1, [pc, #164]	@ (8005a0c <I2C_MasterRequestRead+0x198>)
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa27 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e044      	b.n	8005a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800599a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f9af 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c2:	d103      	bne.n	80059cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e017      	b.n	8005a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	11db      	asrs	r3, r3, #7
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f003 0306 	and.w	r3, r3, #6
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f063 030e 	orn	r3, r3, #14
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4907      	ldr	r1, [pc, #28]	@ (8005a0c <I2C_MasterRequestRead+0x198>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f9e3 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	00010008 	.word	0x00010008
 8005a0c:	00010002 	.word	0x00010002

08005a10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	817b      	strh	r3, [r7, #10]
 8005a22:	460b      	mov	r3, r1
 8005a24:	813b      	strh	r3, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f960 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00d      	beq.n	8005a6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a60:	d103      	bne.n	8005a6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e05f      	b.n	8005b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a6e:	897b      	ldrh	r3, [r7, #10]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	492d      	ldr	r1, [pc, #180]	@ (8005b38 <I2C_RequestMemoryWrite+0x128>)
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f998 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e04c      	b.n	8005b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aac:	6a39      	ldr	r1, [r7, #32]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fa02 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d107      	bne.n	8005ad2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e02b      	b.n	8005b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d105      	bne.n	8005ae8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	611a      	str	r2, [r3, #16]
 8005ae6:	e021      	b.n	8005b2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ae8:	893b      	ldrh	r3, [r7, #8]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af8:	6a39      	ldr	r1, [r7, #32]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f9dc 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d107      	bne.n	8005b1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e005      	b.n	8005b2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b22:	893b      	ldrh	r3, [r7, #8]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	00010002 	.word	0x00010002

08005b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	4608      	mov	r0, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	817b      	strh	r3, [r7, #10]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	813b      	strh	r3, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f8c2 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9c:	d103      	bne.n	8005ba6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e0aa      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005baa:	897b      	ldrh	r3, [r7, #10]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	4952      	ldr	r1, [pc, #328]	@ (8005d08 <I2C_RequestMemoryRead+0x1cc>)
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f8fa 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e097      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be8:	6a39      	ldr	r1, [r7, #32]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f964 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d107      	bne.n	8005c0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e076      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d105      	bne.n	8005c24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c18:	893b      	ldrh	r3, [r7, #8]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	e021      	b.n	8005c68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c24:	893b      	ldrh	r3, [r7, #8]
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c34:	6a39      	ldr	r1, [r7, #32]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f93e 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d107      	bne.n	8005c5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e050      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5e:	893b      	ldrh	r3, [r7, #8]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6a:	6a39      	ldr	r1, [r7, #32]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f923 	bl	8005eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00d      	beq.n	8005c94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d107      	bne.n	8005c90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e035      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f82b 	bl	8005d0c <I2C_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cca:	d103      	bne.n	8005cd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e013      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cd8:	897b      	ldrh	r3, [r7, #10]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	6a3a      	ldr	r2, [r7, #32]
 8005cec:	4906      	ldr	r1, [pc, #24]	@ (8005d08 <I2C_RequestMemoryRead+0x1cc>)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f863 	bl	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	00010002 	.word	0x00010002

08005d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d1c:	e025      	b.n	8005d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d021      	beq.n	8005d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d26:	f7fd fd5b 	bl	80037e0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d116      	bne.n	8005d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f043 0220 	orr.w	r2, r3, #32
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e023      	b.n	8005db2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10d      	bne.n	8005d90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	43da      	mvns	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bf0c      	ite	eq
 8005d86:	2301      	moveq	r3, #1
 8005d88:	2300      	movne	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	e00c      	b.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	43da      	mvns	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf0c      	ite	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	2300      	movne	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d0b6      	beq.n	8005d1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dc8:	e051      	b.n	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd8:	d123      	bne.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005df2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e046      	b.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d021      	beq.n	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fd fcd9 	bl	80037e0 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d116      	bne.n	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e020      	b.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d10c      	bne.n	8005e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	43da      	mvns	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bf14      	ite	ne
 8005e8a:	2301      	movne	r3, #1
 8005e8c:	2300      	moveq	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	e00b      	b.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d18d      	bne.n	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ec4:	e02d      	b.n	8005f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f8ce 	bl	8006068 <I2C_IsAcknowledgeFailed>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e02d      	b.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d021      	beq.n	8005f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fd fc7f 	bl	80037e0 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e007      	b.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2c:	2b80      	cmp	r3, #128	@ 0x80
 8005f2e:	d1ca      	bne.n	8005ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f46:	e02d      	b.n	8005fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f88d 	bl	8006068 <I2C_IsAcknowledgeFailed>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e02d      	b.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d021      	beq.n	8005fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f60:	f7fd fc3e 	bl	80037e0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d302      	bcc.n	8005f76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d116      	bne.n	8005fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e007      	b.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d1ca      	bne.n	8005f48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fc8:	e042      	b.n	8006050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d119      	bne.n	800600c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0210 	mvn.w	r2, #16
 8005fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e029      	b.n	8006060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600c:	f7fd fbe8 	bl	80037e0 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	429a      	cmp	r2, r3
 800601a:	d302      	bcc.n	8006022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d116      	bne.n	8006050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e007      	b.n	8006060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d1b5      	bne.n	8005fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607e:	d11b      	bne.n	80060b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	f043 0204 	orr.w	r2, r3, #4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e128      	b.n	800632c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a90      	ldr	r2, [pc, #576]	@ (8006334 <HAL_I2S_Init+0x26c>)
 80060f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fc ff6f 	bl	8002fd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006110:	f023 030f 	bic.w	r3, r3, #15
 8006114:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2202      	movs	r2, #2
 800611c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d060      	beq.n	80061e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800612e:	2310      	movs	r3, #16
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	e001      	b.n	8006138 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006134:	2320      	movs	r3, #32
 8006136:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b20      	cmp	r3, #32
 800613e:	d802      	bhi.n	8006146 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006146:	2001      	movs	r0, #1
 8006148:	f001 fd18 	bl	8007b7c <HAL_RCCEx_GetPeriphCLKFreq>
 800614c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006156:	d125      	bne.n	80061a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	fbb2 f2f3 	udiv	r2, r2, r3
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	3305      	adds	r3, #5
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	e01f      	b.n	80061c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	fbb2 f2f3 	udiv	r2, r2, r3
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	461a      	mov	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	3305      	adds	r3, #5
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e00e      	b.n	80061c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	461a      	mov	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	3305      	adds	r3, #5
 80061c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4a5c      	ldr	r2, [pc, #368]	@ (8006338 <HAL_I2S_Init+0x270>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	08db      	lsrs	r3, r3, #3
 80061cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e003      	b.n	80061f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80061e8:	2302      	movs	r3, #2
 80061ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d902      	bls.n	80061fc <HAL_I2S_Init+0x134>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2bff      	cmp	r3, #255	@ 0xff
 80061fa:	d907      	bls.n	800620c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006200:	f043 0210 	orr.w	r2, r3, #16
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e08f      	b.n	800632c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	ea42 0103 	orr.w	r1, r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	430a      	orrs	r2, r1
 800621e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800622a:	f023 030f 	bic.w	r3, r3, #15
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6851      	ldr	r1, [r2, #4]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6892      	ldr	r2, [r2, #8]
 8006236:	4311      	orrs	r1, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68d2      	ldr	r2, [r2, #12]
 800623c:	4311      	orrs	r1, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6992      	ldr	r2, [r2, #24]
 8006242:	430a      	orrs	r2, r1
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800624e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d161      	bne.n	800631c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a38      	ldr	r2, [pc, #224]	@ (800633c <HAL_I2S_Init+0x274>)
 800625c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a37      	ldr	r2, [pc, #220]	@ (8006340 <HAL_I2S_Init+0x278>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d101      	bne.n	800626c <HAL_I2S_Init+0x1a4>
 8006268:	4b36      	ldr	r3, [pc, #216]	@ (8006344 <HAL_I2S_Init+0x27c>)
 800626a:	e001      	b.n	8006270 <HAL_I2S_Init+0x1a8>
 800626c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	4932      	ldr	r1, [pc, #200]	@ (8006340 <HAL_I2S_Init+0x278>)
 8006278:	428a      	cmp	r2, r1
 800627a:	d101      	bne.n	8006280 <HAL_I2S_Init+0x1b8>
 800627c:	4a31      	ldr	r2, [pc, #196]	@ (8006344 <HAL_I2S_Init+0x27c>)
 800627e:	e001      	b.n	8006284 <HAL_I2S_Init+0x1bc>
 8006280:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006284:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006288:	f023 030f 	bic.w	r3, r3, #15
 800628c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2b      	ldr	r2, [pc, #172]	@ (8006340 <HAL_I2S_Init+0x278>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d101      	bne.n	800629c <HAL_I2S_Init+0x1d4>
 8006298:	4b2a      	ldr	r3, [pc, #168]	@ (8006344 <HAL_I2S_Init+0x27c>)
 800629a:	e001      	b.n	80062a0 <HAL_I2S_Init+0x1d8>
 800629c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062a0:	2202      	movs	r2, #2
 80062a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a25      	ldr	r2, [pc, #148]	@ (8006340 <HAL_I2S_Init+0x278>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_I2S_Init+0x1ea>
 80062ae:	4b25      	ldr	r3, [pc, #148]	@ (8006344 <HAL_I2S_Init+0x27c>)
 80062b0:	e001      	b.n	80062b6 <HAL_I2S_Init+0x1ee>
 80062b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c2:	d003      	beq.n	80062cc <HAL_I2S_Init+0x204>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80062cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e001      	b.n	80062d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006304:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0d      	ldr	r2, [pc, #52]	@ (8006340 <HAL_I2S_Init+0x278>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_I2S_Init+0x24c>
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <HAL_I2S_Init+0x27c>)
 8006312:	e001      	b.n	8006318 <HAL_I2S_Init+0x250>
 8006314:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006318:	897a      	ldrh	r2, [r7, #10]
 800631a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	08006a4d 	.word	0x08006a4d
 8006338:	cccccccd 	.word	0xcccccccd
 800633c:	08006bd5 	.word	0x08006bd5
 8006340:	40003800 	.word	0x40003800
 8006344:	40003400 	.word	0x40003400

08006348 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_I2S_Receive_DMA+0x1a>
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e0a1      	b.n	80064aa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_I2S_Receive_DMA+0x2e>
 8006372:	2302      	movs	r3, #2
 8006374:	e099      	b.n	80064aa <HAL_I2S_Receive_DMA+0x162>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d005      	beq.n	8006396 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8006392:	2302      	movs	r3, #2
 8006394:	e089      	b.n	80064aa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2204      	movs	r2, #4
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d002      	beq.n	80063c2 <HAL_I2S_Receive_DMA+0x7a>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d10a      	bne.n	80063d8 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	865a      	strh	r2, [r3, #50]	@ 0x32
 80063d6:	e005      	b.n	80063e4 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e8:	4a32      	ldr	r2, [pc, #200]	@ (80064b4 <HAL_I2S_Receive_DMA+0x16c>)
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f0:	4a31      	ldr	r2, [pc, #196]	@ (80064b8 <HAL_I2S_Receive_DMA+0x170>)
 80063f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	4a30      	ldr	r2, [pc, #192]	@ (80064bc <HAL_I2S_Receive_DMA+0x174>)
 80063fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800640a:	d10a      	bne.n	8006422 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	4619      	mov	r1, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006438:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800643a:	f7fd fbc1 	bl	8003bc0 <HAL_DMA_Start_IT>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00f      	beq.n	8006464 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006448:	f043 0208 	orr.w	r2, r3, #8
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e022      	b.n	80064aa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006480:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d107      	bne.n	80064a0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	0800692b 	.word	0x0800692b
 80064b8:	080068e9 	.word	0x080068e9
 80064bc:	08006947 	.word	0x08006947

080064c0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d4:	d004      	beq.n	80064e0 <HAL_I2S_DMAStop+0x20>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 80d1 	bne.w	8006682 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00f      	beq.n	8006508 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd fbbf 	bl	8003c70 <HAL_DMA_Abort>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fc:	f043 0208 	orr.w	r2, r3, #8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006508:	2364      	movs	r3, #100	@ 0x64
 800650a:	2201      	movs	r2, #1
 800650c:	2102      	movs	r1, #2
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb26 	bl	8006b60 <I2S_WaitFlagStateUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651e:	f043 0201 	orr.w	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006532:	2364      	movs	r3, #100	@ 0x64
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	@ 0x80
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fb11 	bl	8006b60 <I2S_WaitFlagStateUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800656a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0202 	bic.w	r2, r2, #2
 8006588:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b05      	cmp	r3, #5
 8006594:	f040 8165 	bne.w	8006862 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fd fb63 	bl	8003c70 <HAL_DMA_Abort>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b4:	f043 0208 	orr.w	r2, r3, #8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a8a      	ldr	r2, [pc, #552]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_I2S_DMAStop+0x10e>
 80065ca:	4b8a      	ldr	r3, [pc, #552]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80065cc:	e001      	b.n	80065d2 <HAL_I2S_DMAStop+0x112>
 80065ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4985      	ldr	r1, [pc, #532]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 80065da:	428b      	cmp	r3, r1
 80065dc:	d101      	bne.n	80065e2 <HAL_I2S_DMAStop+0x122>
 80065de:	4b85      	ldr	r3, [pc, #532]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80065e0:	e001      	b.n	80065e6 <HAL_I2S_DMAStop+0x126>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ea:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a7e      	ldr	r2, [pc, #504]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_I2S_DMAStop+0x13e>
 80065fa:	4b7e      	ldr	r3, [pc, #504]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80065fc:	e001      	b.n	8006602 <HAL_I2S_DMAStop+0x142>
 80065fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a79      	ldr	r2, [pc, #484]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <HAL_I2S_DMAStop+0x154>
 8006610:	4b78      	ldr	r3, [pc, #480]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 8006612:	e001      	b.n	8006618 <HAL_I2S_DMAStop+0x158>
 8006614:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a73      	ldr	r2, [pc, #460]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <HAL_I2S_DMAStop+0x16c>
 8006628:	4b72      	ldr	r3, [pc, #456]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 800662a:	e001      	b.n	8006630 <HAL_I2S_DMAStop+0x170>
 800662c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	496e      	ldr	r1, [pc, #440]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 8006638:	428b      	cmp	r3, r1
 800663a:	d101      	bne.n	8006640 <HAL_I2S_DMAStop+0x180>
 800663c:	4b6d      	ldr	r3, [pc, #436]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 800663e:	e001      	b.n	8006644 <HAL_I2S_DMAStop+0x184>
 8006640:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10c      	bne.n	800666c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006656:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800666a:	e0fa      	b.n	8006862 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5f      	ldr	r2, [pc, #380]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d101      	bne.n	800667a <HAL_I2S_DMAStop+0x1ba>
 8006676:	4b5f      	ldr	r3, [pc, #380]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 8006678:	e001      	b.n	800667e <HAL_I2S_DMAStop+0x1be>
 800667a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800667e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006680:	e0ef      	b.n	8006862 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800668a:	d005      	beq.n	8006698 <HAL_I2S_DMAStop+0x1d8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006694:	f040 80e5 	bne.w	8006862 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00f      	beq.n	80066c0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fd fae3 	bl	8003c70 <HAL_DMA_Abort>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b4:	f043 0208 	orr.w	r2, r3, #8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	f040 809a 	bne.w	8006802 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00f      	beq.n	80066f6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fac8 	bl	8003c70 <HAL_DMA_Abort>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ea:	f043 0208 	orr.w	r2, r3, #8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80066f6:	f7fd f873 	bl	80037e0 <HAL_GetTick>
 80066fa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80066fc:	e012      	b.n	8006724 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80066fe:	f7fd f86f 	bl	80037e0 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b64      	cmp	r3, #100	@ 0x64
 800670a:	d90b      	bls.n	8006724 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006710:	f043 0201 	orr.w	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a31      	ldr	r2, [pc, #196]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d101      	bne.n	8006732 <HAL_I2S_DMAStop+0x272>
 800672e:	4b31      	ldr	r3, [pc, #196]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 8006730:	e001      	b.n	8006736 <HAL_I2S_DMAStop+0x276>
 8006732:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b02      	cmp	r3, #2
 800673e:	d1de      	bne.n	80066fe <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006740:	e012      	b.n	8006768 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006742:	f7fd f84d 	bl	80037e0 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b64      	cmp	r3, #100	@ 0x64
 800674e:	d90b      	bls.n	8006768 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006754:	f043 0201 	orr.w	r2, r3, #1
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a20      	ldr	r2, [pc, #128]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_I2S_DMAStop+0x2b6>
 8006772:	4b20      	ldr	r3, [pc, #128]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 8006774:	e001      	b.n	800677a <HAL_I2S_DMAStop+0x2ba>
 8006776:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006780:	2b80      	cmp	r3, #128	@ 0x80
 8006782:	d0de      	beq.n	8006742 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a19      	ldr	r2, [pc, #100]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d101      	bne.n	8006792 <HAL_I2S_DMAStop+0x2d2>
 800678e:	4b19      	ldr	r3, [pc, #100]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 8006790:	e001      	b.n	8006796 <HAL_I2S_DMAStop+0x2d6>
 8006792:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4914      	ldr	r1, [pc, #80]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 800679e:	428b      	cmp	r3, r1
 80067a0:	d101      	bne.n	80067a6 <HAL_I2S_DMAStop+0x2e6>
 80067a2:	4b14      	ldr	r3, [pc, #80]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80067a4:	e001      	b.n	80067aa <HAL_I2S_DMAStop+0x2ea>
 80067a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ae:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a0d      	ldr	r2, [pc, #52]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d101      	bne.n	80067c2 <HAL_I2S_DMAStop+0x302>
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80067c0:	e001      	b.n	80067c6 <HAL_I2S_DMAStop+0x306>
 80067c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a07      	ldr	r2, [pc, #28]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <HAL_I2S_DMAStop+0x31a>
 80067d6:	4b07      	ldr	r3, [pc, #28]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80067d8:	e001      	b.n	80067de <HAL_I2S_DMAStop+0x31e>
 80067da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4902      	ldr	r1, [pc, #8]	@ (80067f0 <HAL_I2S_DMAStop+0x330>)
 80067e6:	428b      	cmp	r3, r1
 80067e8:	d106      	bne.n	80067f8 <HAL_I2S_DMAStop+0x338>
 80067ea:	4b02      	ldr	r3, [pc, #8]	@ (80067f4 <HAL_I2S_DMAStop+0x334>)
 80067ec:	e006      	b.n	80067fc <HAL_I2S_DMAStop+0x33c>
 80067ee:	bf00      	nop
 80067f0:	40003800 	.word	0x40003800
 80067f4:	40003400 	.word	0x40003400
 80067f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067fc:	f022 0202 	bic.w	r2, r2, #2
 8006800:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006810:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006840:	d10c      	bne.n	800685c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e002      	b.n	8006862 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800686a:	7ffb      	ldrb	r3, [r7, #31]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c2:	b2db      	uxtb	r3, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_I2S_GetError>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval I2S Error Code
  */
uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  return hi2s->ErrorCode;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10e      	bne.n	800691c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7fa fe39 	bl	8001594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006936:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7fa fe7b 	bl	8001634 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0203 	bic.w	r2, r2, #3
 8006962:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697c:	f043 0208 	orr.w	r2, r3, #8
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff ff8b 	bl	80068a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10e      	bne.n	80069e6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff53 	bl	800688c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	b292      	uxth	r2, r2
 8006a02:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	1c9a      	adds	r2, r3, #2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10e      	bne.n	8006a44 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fa fda8 	bl	8001594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d13a      	bne.n	8006ade <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d109      	bne.n	8006a86 <I2S_IRQHandler+0x3a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7c:	2b40      	cmp	r3, #64	@ 0x40
 8006a7e:	d102      	bne.n	8006a86 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ffb4 	bl	80069ee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8c:	2b40      	cmp	r3, #64	@ 0x40
 8006a8e:	d126      	bne.n	8006ade <I2S_IRQHandler+0x92>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d11f      	bne.n	8006ade <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006aac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad0:	f043 0202 	orr.w	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff fee1 	bl	80068a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d136      	bne.n	8006b58 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d109      	bne.n	8006b08 <I2S_IRQHandler+0xbc>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afe:	2b80      	cmp	r3, #128	@ 0x80
 8006b00:	d102      	bne.n	8006b08 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff45 	bl	8006992 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d122      	bne.n	8006b58 <I2S_IRQHandler+0x10c>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d11b      	bne.n	8006b58 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b2e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4a:	f043 0204 	orr.w	r2, r3, #4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fea4 	bl	80068a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b70:	f7fc fe36 	bl	80037e0 <HAL_GetTick>
 8006b74:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006b76:	e018      	b.n	8006baa <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d014      	beq.n	8006baa <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006b80:	f7fc fe2e 	bl	80037e0 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d902      	bls.n	8006b96 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e00f      	b.n	8006bca <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d1d7      	bne.n	8006b78 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a92      	ldr	r2, [pc, #584]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d101      	bne.n	8006bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006bee:	4b92      	ldr	r3, [pc, #584]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bf0:	e001      	b.n	8006bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006bf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a8b      	ldr	r2, [pc, #556]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c0c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c0e:	e001      	b.n	8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c20:	d004      	beq.n	8006c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 8099 	bne.w	8006d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d107      	bne.n	8006c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f925 	bl	8006e90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9c8 	bl	8006ff0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c66:	2b40      	cmp	r3, #64	@ 0x40
 8006c68:	d13a      	bne.n	8006ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d035      	beq.n	8006ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a6e      	ldr	r2, [pc, #440]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c80:	e001      	b.n	8006c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006c82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4969      	ldr	r1, [pc, #420]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	d101      	bne.n	8006c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006c92:	4b69      	ldr	r3, [pc, #420]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c94:	e001      	b.n	8006c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006c96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	f043 0202 	orr.w	r2, r3, #2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fde0 	bl	80068a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	f040 80c3 	bne.w	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80bd 	beq.w	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a49      	ldr	r2, [pc, #292]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d12:	4b49      	ldr	r3, [pc, #292]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d14:	e001      	b.n	8006d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4944      	ldr	r1, [pc, #272]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d22:	428b      	cmp	r3, r1
 8006d24:	d101      	bne.n	8006d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d26:	4b44      	ldr	r3, [pc, #272]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d28:	e001      	b.n	8006d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d34:	2300      	movs	r3, #0
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	f043 0204 	orr.w	r2, r3, #4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fda2 	bl	80068a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d5c:	e089      	b.n	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d107      	bne.n	8006d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8be 	bl	8006ef4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d107      	bne.n	8006d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8fd 	bl	8006f8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b40      	cmp	r3, #64	@ 0x40
 8006d9a:	d12f      	bne.n	8006dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02a      	beq.n	8006dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006db4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1e      	ldr	r2, [pc, #120]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d101      	bne.n	8006dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dc2:	e001      	b.n	8006dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4919      	ldr	r1, [pc, #100]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006dd4:	4b18      	ldr	r3, [pc, #96]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dd6:	e001      	b.n	8006ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ddc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006de0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	f043 0202 	orr.w	r2, r3, #2
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fd52 	bl	80068a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d136      	bne.n	8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d031      	beq.n	8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a07      	ldr	r2, [pc, #28]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e1c:	e001      	b.n	8006e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4902      	ldr	r1, [pc, #8]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e2a:	428b      	cmp	r3, r1
 8006e2c:	d106      	bne.n	8006e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e2e:	4b02      	ldr	r3, [pc, #8]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e30:	e006      	b.n	8006e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e32:	bf00      	nop
 8006e34:	40003800 	.word	0x40003800
 8006e38:	40003400 	.word	0x40003400
 8006e3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e44:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f043 0204 	orr.w	r2, r3, #4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fd18 	bl	80068a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e70:	e000      	b.n	8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e72:	bf00      	nop
}
 8006e74:	bf00      	nop
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	1c99      	adds	r1, r3, #2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6251      	str	r1, [r2, #36]	@ 0x24
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d113      	bne.n	8006eea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff ffc9 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	1c99      	adds	r1, r3, #2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f06:	8819      	ldrh	r1, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <I2SEx_TxISR_I2SExt+0x90>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d101      	bne.n	8006f16 <I2SEx_TxISR_I2SExt+0x22>
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <I2SEx_TxISR_I2SExt+0x94>)
 8006f14:	e001      	b.n	8006f1a <I2SEx_TxISR_I2SExt+0x26>
 8006f16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d121      	bne.n	8006f7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a12      	ldr	r2, [pc, #72]	@ (8006f84 <I2SEx_TxISR_I2SExt+0x90>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <I2SEx_TxISR_I2SExt+0x50>
 8006f40:	4b11      	ldr	r3, [pc, #68]	@ (8006f88 <I2SEx_TxISR_I2SExt+0x94>)
 8006f42:	e001      	b.n	8006f48 <I2SEx_TxISR_I2SExt+0x54>
 8006f44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	490d      	ldr	r1, [pc, #52]	@ (8006f84 <I2SEx_TxISR_I2SExt+0x90>)
 8006f50:	428b      	cmp	r3, r1
 8006f52:	d101      	bne.n	8006f58 <I2SEx_TxISR_I2SExt+0x64>
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <I2SEx_TxISR_I2SExt+0x94>)
 8006f56:	e001      	b.n	8006f5c <I2SEx_TxISR_I2SExt+0x68>
 8006f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff81 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40003800 	.word	0x40003800
 8006f88:	40003400 	.word	0x40003400

08006f8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68d8      	ldr	r0, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	1c99      	adds	r1, r3, #2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006fa4:	b282      	uxth	r2, r0
 8006fa6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d113      	bne.n	8006fe8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006fce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ff4a 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a20      	ldr	r2, [pc, #128]	@ (8007080 <I2SEx_RxISR_I2SExt+0x90>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <I2SEx_RxISR_I2SExt+0x16>
 8007002:	4b20      	ldr	r3, [pc, #128]	@ (8007084 <I2SEx_RxISR_I2SExt+0x94>)
 8007004:	e001      	b.n	800700a <I2SEx_RxISR_I2SExt+0x1a>
 8007006:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800700a:	68d8      	ldr	r0, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	1c99      	adds	r1, r3, #2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007016:	b282      	uxth	r2, r0
 8007018:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d121      	bne.n	8007076 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a12      	ldr	r2, [pc, #72]	@ (8007080 <I2SEx_RxISR_I2SExt+0x90>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <I2SEx_RxISR_I2SExt+0x50>
 800703c:	4b11      	ldr	r3, [pc, #68]	@ (8007084 <I2SEx_RxISR_I2SExt+0x94>)
 800703e:	e001      	b.n	8007044 <I2SEx_RxISR_I2SExt+0x54>
 8007040:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	490d      	ldr	r1, [pc, #52]	@ (8007080 <I2SEx_RxISR_I2SExt+0x90>)
 800704c:	428b      	cmp	r3, r1
 800704e:	d101      	bne.n	8007054 <I2SEx_RxISR_I2SExt+0x64>
 8007050:	4b0c      	ldr	r3, [pc, #48]	@ (8007084 <I2SEx_RxISR_I2SExt+0x94>)
 8007052:	e001      	b.n	8007058 <I2SEx_RxISR_I2SExt+0x68>
 8007054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007058:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800705c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff ff03 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40003800 	.word	0x40003800
 8007084:	40003400 	.word	0x40003400

08007088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e267      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d075      	beq.n	8007192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070a6:	4b88      	ldr	r3, [pc, #544]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00c      	beq.n	80070cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070b2:	4b85      	ldr	r3, [pc, #532]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d112      	bne.n	80070e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070be:	4b82      	ldr	r3, [pc, #520]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ca:	d10b      	bne.n	80070e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070cc:	4b7e      	ldr	r3, [pc, #504]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d05b      	beq.n	8007190 <HAL_RCC_OscConfig+0x108>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d157      	bne.n	8007190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e242      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ec:	d106      	bne.n	80070fc <HAL_RCC_OscConfig+0x74>
 80070ee:	4b76      	ldr	r3, [pc, #472]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a75      	ldr	r2, [pc, #468]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e01d      	b.n	8007138 <HAL_RCC_OscConfig+0xb0>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007104:	d10c      	bne.n	8007120 <HAL_RCC_OscConfig+0x98>
 8007106:	4b70      	ldr	r3, [pc, #448]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a6f      	ldr	r2, [pc, #444]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800710c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	4b6d      	ldr	r3, [pc, #436]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6c      	ldr	r2, [pc, #432]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e00b      	b.n	8007138 <HAL_RCC_OscConfig+0xb0>
 8007120:	4b69      	ldr	r3, [pc, #420]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a68      	ldr	r2, [pc, #416]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	4b66      	ldr	r3, [pc, #408]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a65      	ldr	r2, [pc, #404]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007140:	f7fc fb4e 	bl	80037e0 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007148:	f7fc fb4a 	bl	80037e0 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b64      	cmp	r3, #100	@ 0x64
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e207      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	4b5b      	ldr	r3, [pc, #364]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f0      	beq.n	8007148 <HAL_RCC_OscConfig+0xc0>
 8007166:	e014      	b.n	8007192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fc fb3a 	bl	80037e0 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007170:	f7fc fb36 	bl	80037e0 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	@ 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e1f3      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007182:	4b51      	ldr	r3, [pc, #324]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0xe8>
 800718e:	e000      	b.n	8007192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d063      	beq.n	8007266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800719e:	4b4a      	ldr	r3, [pc, #296]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071aa:	4b47      	ldr	r3, [pc, #284]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d11c      	bne.n	80071f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071b6:	4b44      	ldr	r3, [pc, #272]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d116      	bne.n	80071f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c2:	4b41      	ldr	r3, [pc, #260]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_RCC_OscConfig+0x152>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d001      	beq.n	80071da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e1c7      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071da:	4b3b      	ldr	r3, [pc, #236]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4937      	ldr	r1, [pc, #220]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ee:	e03a      	b.n	8007266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071f8:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <HAL_RCC_OscConfig+0x244>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fe:	f7fc faef 	bl	80037e0 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007206:	f7fc faeb 	bl	80037e0 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e1a8      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007218:	4b2b      	ldr	r3, [pc, #172]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4925      	ldr	r1, [pc, #148]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]
 8007238:	e015      	b.n	8007266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800723a:	4b24      	ldr	r3, [pc, #144]	@ (80072cc <HAL_RCC_OscConfig+0x244>)
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fc face 	bl	80037e0 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007248:	f7fc faca 	bl	80037e0 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e187      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725a:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d036      	beq.n	80072e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800727a:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <HAL_RCC_OscConfig+0x248>)
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007280:	f7fc faae 	bl	80037e0 <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007288:	f7fc faaa 	bl	80037e0 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e167      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800729a:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0f0      	beq.n	8007288 <HAL_RCC_OscConfig+0x200>
 80072a6:	e01b      	b.n	80072e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072a8:	4b09      	ldr	r3, [pc, #36]	@ (80072d0 <HAL_RCC_OscConfig+0x248>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ae:	f7fc fa97 	bl	80037e0 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b4:	e00e      	b.n	80072d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072b6:	f7fc fa93 	bl	80037e0 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d907      	bls.n	80072d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e150      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
 80072c8:	40023800 	.word	0x40023800
 80072cc:	42470000 	.word	0x42470000
 80072d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d4:	4b88      	ldr	r3, [pc, #544]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80072d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1ea      	bne.n	80072b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8097 	beq.w	800741c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072f2:	4b81      	ldr	r3, [pc, #516]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	4b7d      	ldr	r3, [pc, #500]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	4a7c      	ldr	r2, [pc, #496]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800730c:	6413      	str	r3, [r2, #64]	@ 0x40
 800730e:	4b7a      	ldr	r3, [pc, #488]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800731e:	4b77      	ldr	r3, [pc, #476]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d118      	bne.n	800735c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800732a:	4b74      	ldr	r3, [pc, #464]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a73      	ldr	r2, [pc, #460]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007336:	f7fc fa53 	bl	80037e0 <HAL_GetTick>
 800733a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800733c:	e008      	b.n	8007350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800733e:	f7fc fa4f 	bl	80037e0 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e10c      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007350:	4b6a      	ldr	r3, [pc, #424]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0f0      	beq.n	800733e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d106      	bne.n	8007372 <HAL_RCC_OscConfig+0x2ea>
 8007364:	4b64      	ldr	r3, [pc, #400]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007368:	4a63      	ldr	r2, [pc, #396]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007370:	e01c      	b.n	80073ac <HAL_RCC_OscConfig+0x324>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b05      	cmp	r3, #5
 8007378:	d10c      	bne.n	8007394 <HAL_RCC_OscConfig+0x30c>
 800737a:	4b5f      	ldr	r3, [pc, #380]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737e:	4a5e      	ldr	r2, [pc, #376]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	6713      	str	r3, [r2, #112]	@ 0x70
 8007386:	4b5c      	ldr	r3, [pc, #368]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	4a5b      	ldr	r2, [pc, #364]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6713      	str	r3, [r2, #112]	@ 0x70
 8007392:	e00b      	b.n	80073ac <HAL_RCC_OscConfig+0x324>
 8007394:	4b58      	ldr	r3, [pc, #352]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007398:	4a57      	ldr	r2, [pc, #348]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a0:	4b55      	ldr	r3, [pc, #340]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a4:	4a54      	ldr	r2, [pc, #336]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80073a6:	f023 0304 	bic.w	r3, r3, #4
 80073aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d015      	beq.n	80073e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b4:	f7fc fa14 	bl	80037e0 <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ba:	e00a      	b.n	80073d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073bc:	f7fc fa10 	bl	80037e0 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e0cb      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d2:	4b49      	ldr	r3, [pc, #292]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0ee      	beq.n	80073bc <HAL_RCC_OscConfig+0x334>
 80073de:	e014      	b.n	800740a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073e0:	f7fc f9fe 	bl	80037e0 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e6:	e00a      	b.n	80073fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073e8:	f7fc f9fa 	bl	80037e0 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e0b5      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073fe:	4b3e      	ldr	r3, [pc, #248]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1ee      	bne.n	80073e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d105      	bne.n	800741c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007410:	4b39      	ldr	r3, [pc, #228]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	4a38      	ldr	r2, [pc, #224]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800741a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80a1 	beq.w	8007568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007426:	4b34      	ldr	r3, [pc, #208]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 030c 	and.w	r3, r3, #12
 800742e:	2b08      	cmp	r3, #8
 8007430:	d05c      	beq.n	80074ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d141      	bne.n	80074be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743a:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <HAL_RCC_OscConfig+0x478>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007440:	f7fc f9ce 	bl	80037e0 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007448:	f7fc f9ca 	bl	80037e0 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e087      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745a:	4b27      	ldr	r3, [pc, #156]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69da      	ldr	r2, [r3, #28]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	019b      	lsls	r3, r3, #6
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	3b01      	subs	r3, #1
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	061b      	lsls	r3, r3, #24
 800748a:	491b      	ldr	r1, [pc, #108]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800748c:	4313      	orrs	r3, r2
 800748e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007490:	4b1b      	ldr	r3, [pc, #108]	@ (8007500 <HAL_RCC_OscConfig+0x478>)
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007496:	f7fc f9a3 	bl	80037e0 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800749e:	f7fc f99f 	bl	80037e0 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e05c      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b0:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0f0      	beq.n	800749e <HAL_RCC_OscConfig+0x416>
 80074bc:	e054      	b.n	8007568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074be:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <HAL_RCC_OscConfig+0x478>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c4:	f7fc f98c 	bl	80037e0 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074cc:	f7fc f988 	bl	80037e0 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e045      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x444>
 80074ea:	e03d      	b.n	8007568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d107      	bne.n	8007504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e038      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
 80074f8:	40023800 	.word	0x40023800
 80074fc:	40007000 	.word	0x40007000
 8007500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007504:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <HAL_RCC_OscConfig+0x4ec>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d028      	beq.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800751c:	429a      	cmp	r2, r3
 800751e:	d121      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d11a      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007534:	4013      	ands	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800753a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800753c:	4293      	cmp	r3, r2
 800753e:	d111      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	3b01      	subs	r3, #1
 800754e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d107      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800

08007578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0cc      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800758c:	4b68      	ldr	r3, [pc, #416]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d90c      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759a:	4b65      	ldr	r3, [pc, #404]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a2:	4b63      	ldr	r3, [pc, #396]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e0b8      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d020      	beq.n	8007602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075cc:	4b59      	ldr	r3, [pc, #356]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4a58      	ldr	r2, [pc, #352]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075e4:	4b53      	ldr	r3, [pc, #332]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4a52      	ldr	r2, [pc, #328]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f0:	4b50      	ldr	r3, [pc, #320]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	494d      	ldr	r1, [pc, #308]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d044      	beq.n	8007698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d107      	bne.n	8007626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	4b47      	ldr	r3, [pc, #284]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d119      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e07f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d003      	beq.n	8007636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007632:	2b03      	cmp	r3, #3
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007636:	4b3f      	ldr	r3, [pc, #252]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e06f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007646:	4b3b      	ldr	r3, [pc, #236]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e067      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007656:	4b37      	ldr	r3, [pc, #220]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4934      	ldr	r1, [pc, #208]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007668:	f7fc f8ba 	bl	80037e0 <HAL_GetTick>
 800766c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766e:	e00a      	b.n	8007686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007670:	f7fc f8b6 	bl	80037e0 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e04f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	4b2b      	ldr	r3, [pc, #172]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 020c 	and.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	429a      	cmp	r2, r3
 8007696:	d1eb      	bne.n	8007670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007698:	4b25      	ldr	r3, [pc, #148]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d20c      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a6:	4b22      	ldr	r3, [pc, #136]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ae:	4b20      	ldr	r3, [pc, #128]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e032      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076cc:	4b19      	ldr	r3, [pc, #100]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4916      	ldr	r1, [pc, #88]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ea:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	490e      	ldr	r1, [pc, #56]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076fe:	f000 f821 	bl	8007744 <HAL_RCC_GetSysClockFreq>
 8007702:	4602      	mov	r2, r0
 8007704:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	091b      	lsrs	r3, r3, #4
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	490a      	ldr	r1, [pc, #40]	@ (8007738 <HAL_RCC_ClockConfig+0x1c0>)
 8007710:	5ccb      	ldrb	r3, [r1, r3]
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	4a09      	ldr	r2, [pc, #36]	@ (800773c <HAL_RCC_ClockConfig+0x1c4>)
 8007718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800771a:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7fc f81a 	bl	8003758 <HAL_InitTick>

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023c00 	.word	0x40023c00
 8007734:	40023800 	.word	0x40023800
 8007738:	08010318 	.word	0x08010318
 800773c:	20000020 	.word	0x20000020
 8007740:	20000024 	.word	0x20000024

08007744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007748:	b094      	sub	sp, #80	@ 0x50
 800774a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007750:	2300      	movs	r3, #0
 8007752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007754:	2300      	movs	r3, #0
 8007756:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800775c:	4b79      	ldr	r3, [pc, #484]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 030c 	and.w	r3, r3, #12
 8007764:	2b08      	cmp	r3, #8
 8007766:	d00d      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x40>
 8007768:	2b08      	cmp	r3, #8
 800776a:	f200 80e1 	bhi.w	8007930 <HAL_RCC_GetSysClockFreq+0x1ec>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x34>
 8007772:	2b04      	cmp	r3, #4
 8007774:	d003      	beq.n	800777e <HAL_RCC_GetSysClockFreq+0x3a>
 8007776:	e0db      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007778:	4b73      	ldr	r3, [pc, #460]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x204>)
 800777a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800777c:	e0db      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800777e:	4b73      	ldr	r3, [pc, #460]	@ (800794c <HAL_RCC_GetSysClockFreq+0x208>)
 8007780:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007782:	e0d8      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007784:	4b6f      	ldr	r3, [pc, #444]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800778e:	4b6d      	ldr	r3, [pc, #436]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d063      	beq.n	8007862 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779a:	4b6a      	ldr	r3, [pc, #424]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	2200      	movs	r2, #0
 80077a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077b6:	4622      	mov	r2, r4
 80077b8:	462b      	mov	r3, r5
 80077ba:	f04f 0000 	mov.w	r0, #0
 80077be:	f04f 0100 	mov.w	r1, #0
 80077c2:	0159      	lsls	r1, r3, #5
 80077c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c8:	0150      	lsls	r0, r2, #5
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4621      	mov	r1, r4
 80077d0:	1a51      	subs	r1, r2, r1
 80077d2:	6139      	str	r1, [r7, #16]
 80077d4:	4629      	mov	r1, r5
 80077d6:	eb63 0301 	sbc.w	r3, r3, r1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077e8:	4659      	mov	r1, fp
 80077ea:	018b      	lsls	r3, r1, #6
 80077ec:	4651      	mov	r1, sl
 80077ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077f2:	4651      	mov	r1, sl
 80077f4:	018a      	lsls	r2, r1, #6
 80077f6:	4651      	mov	r1, sl
 80077f8:	ebb2 0801 	subs.w	r8, r2, r1
 80077fc:	4659      	mov	r1, fp
 80077fe:	eb63 0901 	sbc.w	r9, r3, r1
 8007802:	f04f 0200 	mov.w	r2, #0
 8007806:	f04f 0300 	mov.w	r3, #0
 800780a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800780e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007816:	4690      	mov	r8, r2
 8007818:	4699      	mov	r9, r3
 800781a:	4623      	mov	r3, r4
 800781c:	eb18 0303 	adds.w	r3, r8, r3
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	462b      	mov	r3, r5
 8007824:	eb49 0303 	adc.w	r3, r9, r3
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007836:	4629      	mov	r1, r5
 8007838:	024b      	lsls	r3, r1, #9
 800783a:	4621      	mov	r1, r4
 800783c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007840:	4621      	mov	r1, r4
 8007842:	024a      	lsls	r2, r1, #9
 8007844:	4610      	mov	r0, r2
 8007846:	4619      	mov	r1, r3
 8007848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800784a:	2200      	movs	r2, #0
 800784c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800784e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007854:	f7f8 fd14 	bl	8000280 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4613      	mov	r3, r2
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	e058      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007862:	4b38      	ldr	r3, [pc, #224]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	099b      	lsrs	r3, r3, #6
 8007868:	2200      	movs	r2, #0
 800786a:	4618      	mov	r0, r3
 800786c:	4611      	mov	r1, r2
 800786e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007872:	623b      	str	r3, [r7, #32]
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
 8007878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	f04f 0000 	mov.w	r0, #0
 8007884:	f04f 0100 	mov.w	r1, #0
 8007888:	0159      	lsls	r1, r3, #5
 800788a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800788e:	0150      	lsls	r0, r2, #5
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4641      	mov	r1, r8
 8007896:	ebb2 0a01 	subs.w	sl, r2, r1
 800789a:	4649      	mov	r1, r9
 800789c:	eb63 0b01 	sbc.w	fp, r3, r1
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078b4:	ebb2 040a 	subs.w	r4, r2, sl
 80078b8:	eb63 050b 	sbc.w	r5, r3, fp
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	00eb      	lsls	r3, r5, #3
 80078c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ca:	00e2      	lsls	r2, r4, #3
 80078cc:	4614      	mov	r4, r2
 80078ce:	461d      	mov	r5, r3
 80078d0:	4643      	mov	r3, r8
 80078d2:	18e3      	adds	r3, r4, r3
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	464b      	mov	r3, r9
 80078d8:	eb45 0303 	adc.w	r3, r5, r3
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ea:	4629      	mov	r1, r5
 80078ec:	028b      	lsls	r3, r1, #10
 80078ee:	4621      	mov	r1, r4
 80078f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078f4:	4621      	mov	r1, r4
 80078f6:	028a      	lsls	r2, r1, #10
 80078f8:	4610      	mov	r0, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078fe:	2200      	movs	r2, #0
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	61fa      	str	r2, [r7, #28]
 8007904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007908:	f7f8 fcba 	bl	8000280 <__aeabi_uldivmod>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4613      	mov	r3, r2
 8007912:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007914:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	3301      	adds	r3, #1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800792e:	e002      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x204>)
 8007932:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007938:	4618      	mov	r0, r3
 800793a:	3750      	adds	r7, #80	@ 0x50
 800793c:	46bd      	mov	sp, r7
 800793e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800
 8007948:	00f42400 	.word	0x00f42400
 800794c:	007a1200 	.word	0x007a1200

08007950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <HAL_RCC_GetHCLKFreq+0x14>)
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000020 	.word	0x20000020

08007968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800796c:	f7ff fff0 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007970:	4602      	mov	r2, r0
 8007972:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0a9b      	lsrs	r3, r3, #10
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	4903      	ldr	r1, [pc, #12]	@ (800798c <HAL_RCC_GetPCLK1Freq+0x24>)
 800797e:	5ccb      	ldrb	r3, [r1, r3]
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40023800 	.word	0x40023800
 800798c:	08010328 	.word	0x08010328

08007990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007994:	f7ff ffdc 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b05      	ldr	r3, [pc, #20]	@ (80079b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0b5b      	lsrs	r3, r3, #13
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4903      	ldr	r1, [pc, #12]	@ (80079b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40023800 	.word	0x40023800
 80079b4:	08010328 	.word	0x08010328

080079b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d105      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d035      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079e0:	4b62      	ldr	r3, [pc, #392]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079e6:	f7fb fefb 	bl	80037e0 <HAL_GetTick>
 80079ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079ec:	e008      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079ee:	f7fb fef7 	bl	80037e0 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e0b0      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a00:	4b5b      	ldr	r3, [pc, #364]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f0      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	019a      	lsls	r2, r3, #6
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	071b      	lsls	r3, r3, #28
 8007a18:	4955      	ldr	r1, [pc, #340]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a20:	4b52      	ldr	r3, [pc, #328]	@ (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a26:	f7fb fedb 	bl	80037e0 <HAL_GetTick>
 8007a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a2c:	e008      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a2e:	f7fb fed7 	bl	80037e0 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e090      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a40:	4b4b      	ldr	r3, [pc, #300]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8083 	beq.w	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	4b44      	ldr	r3, [pc, #272]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	4a43      	ldr	r2, [pc, #268]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a6a:	4b41      	ldr	r3, [pc, #260]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a76:	4b3f      	ldr	r3, [pc, #252]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a82:	f7fb fead 	bl	80037e0 <HAL_GetTick>
 8007a86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a88:	e008      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a8a:	f7fb fea9 	bl	80037e0 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e062      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a9c:	4b35      	ldr	r3, [pc, #212]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f0      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007aa8:	4b31      	ldr	r3, [pc, #196]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ab0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d02f      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d028      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ace:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ad0:	4b29      	ldr	r3, [pc, #164]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ad6:	4b28      	ldr	r3, [pc, #160]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007adc:	4a24      	ldr	r2, [pc, #144]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ae2:	4b23      	ldr	r3, [pc, #140]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d114      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007aee:	f7fb fe77 	bl	80037e0 <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af4:	e00a      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af6:	f7fb fe73 	bl	80037e0 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e02a      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0c:	4b18      	ldr	r3, [pc, #96]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ee      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b24:	d10d      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b26:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b3a:	490d      	ldr	r1, [pc, #52]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	608b      	str	r3, [r1, #8]
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b42:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	4a0a      	ldr	r2, [pc, #40]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b48:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b4c:	6093      	str	r3, [r2, #8]
 8007b4e:	4b08      	ldr	r3, [pc, #32]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b5a:	4905      	ldr	r1, [pc, #20]	@ (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	42470068 	.word	0x42470068
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40007000 	.word	0x40007000
 8007b78:	42470e40 	.word	0x42470e40

08007b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d13e      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d12f      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bb2:	617b      	str	r3, [r7, #20]
          break;
 8007bb4:	e02f      	b.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bc2:	d108      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bc4:	4b18      	ldr	r3, [pc, #96]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bcc:	4a18      	ldr	r2, [pc, #96]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	e007      	b.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bd6:	4b14      	ldr	r3, [pc, #80]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bde:	4a15      	ldr	r2, [pc, #84]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007be6:	4b10      	ldr	r3, [pc, #64]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bec:	099b      	lsrs	r3, r3, #6
 8007bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	fb02 f303 	mul.w	r3, r2, r3
 8007bf8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c00:	0f1b      	lsrs	r3, r3, #28
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0c:	617b      	str	r3, [r7, #20]
          break;
 8007c0e:	e002      	b.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]
          break;
 8007c14:	bf00      	nop
        }
      }
      break;
 8007c16:	bf00      	nop
    }
  }
  return frequency;
 8007c18:	697b      	ldr	r3, [r7, #20]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	00bb8000 	.word	0x00bb8000
 8007c30:	007a1200 	.word	0x007a1200
 8007c34:	00f42400 	.word	0x00f42400

08007c38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e022      	b.n	8007c90 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7fb fb01 	bl	8003264 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2203      	movs	r2, #3
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f814 	bl	8007c98 <HAL_SD_InitCard>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e00a      	b.n	8007c90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b08e      	sub	sp, #56	@ 0x38
 8007c9c:	af04      	add	r7, sp, #16
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007cb4:	2376      	movs	r3, #118	@ 0x76
 8007cb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681d      	ldr	r5, [r3, #0]
 8007cbc:	466c      	mov	r4, sp
 8007cbe:	f107 0314 	add.w	r3, r7, #20
 8007cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f001 ffb1 	bl	8009c38 <SDIO_Init>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04f      	b.n	8007d88 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007ce8:	4b29      	ldr	r3, [pc, #164]	@ (8007d90 <HAL_SD_InitCard+0xf8>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 ffe9 	bl	8009cca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007cf8:	4b25      	ldr	r3, [pc, #148]	@ (8007d90 <HAL_SD_InitCard+0xf8>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007cfe:	2002      	movs	r0, #2
 8007d00:	f7fb fd7a 	bl	80037f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fe69 	bl	80089dc <SD_PowerON>
 8007d0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	431a      	orrs	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e02e      	b.n	8007d88 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fd88 	bl	8008840 <SD_InitCard>
 8007d30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e01b      	b.n	8007d88 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 f848 	bl	8009dee <SDMMC_CmdBlockLength>
 8007d5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00f      	beq.n	8007d86 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d94 <HAL_SD_InitCard+0xfc>)
 8007d6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3728      	adds	r7, #40	@ 0x28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d90:	422580a0 	.word	0x422580a0
 8007d94:	004005ff 	.word	0x004005ff

08007d98 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b092      	sub	sp, #72	@ 0x48
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007da6:	f7fb fd1b 	bl	80037e0 <HAL_GetTick>
 8007daa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d107      	bne.n	8007dca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e1bd      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	f040 81b0 	bne.w	8008138 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007dde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	441a      	add	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d907      	bls.n	8007dfc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e1a4      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d002      	beq.n	8007e1a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	025b      	lsls	r3, r3, #9
 8007e18:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	025b      	lsls	r3, r3, #9
 8007e24:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e26:	2390      	movs	r3, #144	@ 0x90
 8007e28:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007e32:	2301      	movs	r3, #1
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f107 0214 	add.w	r2, r7, #20
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 ffa8 	bl	8009d96 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d90a      	bls.n	8007e62 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f002 f80c 	bl	8009e76 <SDMMC_CmdReadMultiBlock>
 8007e5e:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e60:	e009      	b.n	8007e76 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 ffdf 	bl	8009e32 <SDMMC_CmdReadSingleBlock>
 8007e74:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d012      	beq.n	8007ea2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a7a      	ldr	r2, [pc, #488]	@ (800806c <HAL_SD_ReadBlocks+0x2d4>)
 8007e82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e151      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007ea6:	e061      	b.n	8007f6c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d03c      	beq.n	8007f30 <HAL_SD_ReadBlocks+0x198>
 8007eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d039      	beq.n	8007f30 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ec0:	e033      	b.n	8007f2a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 fee1 	bl	8009c8e <SDIO_ReadFIFO>
 8007ecc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed8:	3301      	adds	r3, #1
 8007eda:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	0a1b      	lsrs	r3, r3, #8
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eee:	3301      	adds	r3, #1
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f04:	3301      	adds	r3, #1
 8007f06:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f10:	0e1b      	lsrs	r3, r3, #24
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f16:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f20:	3b01      	subs	r3, #1
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f26:	3301      	adds	r3, #1
 8007f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f2c:	2b07      	cmp	r3, #7
 8007f2e:	d9c8      	bls.n	8007ec2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007f30:	f7fb fc56 	bl	80037e0 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d902      	bls.n	8007f46 <HAL_SD_ReadBlocks+0x1ae>
 8007f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d112      	bne.n	8007f6c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a48      	ldr	r2, [pc, #288]	@ (800806c <HAL_SD_ReadBlocks+0x2d4>)
 8007f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e0ec      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f72:	f240 332a 	movw	r3, #810	@ 0x32a
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d095      	beq.n	8007ea8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d022      	beq.n	8007fd0 <HAL_SD_ReadBlocks+0x238>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d91f      	bls.n	8007fd0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d01b      	beq.n	8007fd0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 ffd1 	bl	8009f44 <SDMMC_CmdStopTransfer>
 8007fa2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d012      	beq.n	8007fd0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a2f      	ldr	r2, [pc, #188]	@ (800806c <HAL_SD_ReadBlocks+0x2d4>)
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0ba      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d012      	beq.n	8008004 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a22      	ldr	r2, [pc, #136]	@ (800806c <HAL_SD_ReadBlocks+0x2d4>)
 8007fe4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fea:	f043 0208 	orr.w	r2, r3, #8
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0a0      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d012      	beq.n	8008038 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a15      	ldr	r2, [pc, #84]	@ (800806c <HAL_SD_ReadBlocks+0x2d4>)
 8008018:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e086      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d063      	beq.n	800810e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a08      	ldr	r2, [pc, #32]	@ (800806c <HAL_SD_ReadBlocks+0x2d4>)
 800804c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e06c      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
 800806c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fe0a 	bl	8009c8e <SDIO_ReadFIFO>
 800807a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	b2da      	uxtb	r2, r3
 8008080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008082:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008086:	3301      	adds	r3, #1
 8008088:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800808a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808c:	3b01      	subs	r3, #1
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b2da      	uxtb	r2, r3
 8008096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008098:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800809a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809c:	3301      	adds	r3, #1
 800809e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a2:	3b01      	subs	r3, #1
 80080a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80080a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b2:	3301      	adds	r3, #1
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b8:	3b01      	subs	r3, #1
 80080ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c8:	3301      	adds	r3, #1
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ce:	3b01      	subs	r3, #1
 80080d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80080d2:	f7fb fb85 	bl	80037e0 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080de:	429a      	cmp	r2, r3
 80080e0:	d902      	bls.n	80080e8 <HAL_SD_ReadBlocks+0x350>
 80080e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d112      	bne.n	800810e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a18      	ldr	r2, [pc, #96]	@ (8008150 <HAL_SD_ReadBlocks+0x3b8>)
 80080ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e01b      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_SD_ReadBlocks+0x38a>
 800811c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1a6      	bne.n	8008070 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f240 523a 	movw	r2, #1338	@ 0x53a
 800812a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	e006      	b.n	8008146 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
  }
}
 8008146:	4618      	mov	r0, r3
 8008148:	3748      	adds	r7, #72	@ 0x48
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	004005ff 	.word	0x004005ff

08008154 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b092      	sub	sp, #72	@ 0x48
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008162:	f7fb fb3d 	bl	80037e0 <HAL_GetTick>
 8008166:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d107      	bne.n	8008186 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e166      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	f040 8159 	bne.w	8008446 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800819a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	441a      	add	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d907      	bls.n	80081b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e14d      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2203      	movs	r2, #3
 80081bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2200      	movs	r2, #0
 80081c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d002      	beq.n	80081d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80081d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d2:	025b      	lsls	r3, r3, #9
 80081d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081d6:	f04f 33ff 	mov.w	r3, #4294967295
 80081da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	025b      	lsls	r3, r3, #9
 80081e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80081e2:	2390      	movs	r3, #144	@ 0x90
 80081e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80081e6:	2300      	movs	r3, #0
 80081e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f107 0218 	add.w	r2, r7, #24
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fdca 	bl	8009d96 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d90a      	bls.n	800821e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008214:	4618      	mov	r0, r3
 8008216:	f001 fe72 	bl	8009efe <SDMMC_CmdWriteMultiBlock>
 800821a:	6478      	str	r0, [r7, #68]	@ 0x44
 800821c:	e009      	b.n	8008232 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2210      	movs	r2, #16
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800822a:	4618      	mov	r0, r3
 800822c:	f001 fe45 	bl	8009eba <SDMMC_CmdWriteSingleBlock>
 8008230:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008234:	2b00      	cmp	r3, #0
 8008236:	d012      	beq.n	800825e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a87      	ldr	r2, [pc, #540]	@ (800845c <HAL_SD_WriteBlocks+0x308>)
 800823e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008246:	431a      	orrs	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e0fa      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008262:	e065      	b.n	8008330 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800826a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d040      	beq.n	80082f4 <HAL_SD_WriteBlocks+0x1a0>
 8008272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008274:	2b00      	cmp	r3, #0
 8008276:	d03d      	beq.n	80082f4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008278:	2300      	movs	r3, #0
 800827a:	643b      	str	r3, [r7, #64]	@ 0x40
 800827c:	e037      	b.n	80082ee <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800827e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	3301      	adds	r3, #1
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828c:	3b01      	subs	r3, #1
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	021a      	lsls	r2, r3, #8
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	3301      	adds	r3, #1
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a4:	3b01      	subs	r3, #1
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	041a      	lsls	r2, r3, #16
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b6:	3301      	adds	r3, #1
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082bc:	3b01      	subs	r3, #1
 80082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80082c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	061a      	lsls	r2, r3, #24
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	3301      	adds	r3, #1
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082d4:	3b01      	subs	r3, #1
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f107 0214 	add.w	r2, r7, #20
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fce0 	bl	8009ca8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80082e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082ea:	3301      	adds	r3, #1
 80082ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082f0:	2b07      	cmp	r3, #7
 80082f2:	d9c4      	bls.n	800827e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80082f4:	f7fb fa74 	bl	80037e0 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008300:	429a      	cmp	r2, r3
 8008302:	d902      	bls.n	800830a <HAL_SD_WriteBlocks+0x1b6>
 8008304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008306:	2b00      	cmp	r3, #0
 8008308:	d112      	bne.n	8008330 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a53      	ldr	r2, [pc, #332]	@ (800845c <HAL_SD_WriteBlocks+0x308>)
 8008310:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008318:	431a      	orrs	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e091      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008336:	f240 331a 	movw	r3, #794	@ 0x31a
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d091      	beq.n	8008264 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834a:	2b00      	cmp	r3, #0
 800834c:	d022      	beq.n	8008394 <HAL_SD_WriteBlocks+0x240>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d91f      	bls.n	8008394 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008358:	2b03      	cmp	r3, #3
 800835a:	d01b      	beq.n	8008394 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f001 fdef 	bl	8009f44 <SDMMC_CmdStopTransfer>
 8008366:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800836a:	2b00      	cmp	r3, #0
 800836c:	d012      	beq.n	8008394 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a3a      	ldr	r2, [pc, #232]	@ (800845c <HAL_SD_WriteBlocks+0x308>)
 8008374:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800837a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800837c:	431a      	orrs	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e05f      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d012      	beq.n	80083c8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2d      	ldr	r2, [pc, #180]	@ (800845c <HAL_SD_WriteBlocks+0x308>)
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ae:	f043 0208 	orr.w	r2, r3, #8
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e045      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d012      	beq.n	80083fc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a20      	ldr	r2, [pc, #128]	@ (800845c <HAL_SD_WriteBlocks+0x308>)
 80083dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e2:	f043 0202 	orr.w	r2, r3, #2
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e02b      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008402:	f003 0310 	and.w	r3, r3, #16
 8008406:	2b00      	cmp	r3, #0
 8008408:	d012      	beq.n	8008430 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a13      	ldr	r2, [pc, #76]	@ (800845c <HAL_SD_WriteBlocks+0x308>)
 8008410:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	f043 0210 	orr.w	r2, r3, #16
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e011      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008438:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	e006      	b.n	8008454 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
  }
}
 8008454:	4618      	mov	r0, r3
 8008456:	3748      	adds	r7, #72	@ 0x48
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	004005ff 	.word	0x004005ff

08008460 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800846e:	0f9b      	lsrs	r3, r3, #30
 8008470:	b2da      	uxtb	r2, r3
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800847a:	0e9b      	lsrs	r3, r3, #26
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	b2da      	uxtb	r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800848c:	0e1b      	lsrs	r3, r3, #24
 800848e:	b2db      	uxtb	r3, r3
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	b2da      	uxtb	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800849e:	0c1b      	lsrs	r3, r3, #16
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084aa:	0a1b      	lsrs	r3, r3, #8
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084c0:	0d1b      	lsrs	r3, r3, #20
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084de:	0bdb      	lsrs	r3, r3, #15
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084f0:	0b9b      	lsrs	r3, r3, #14
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008502:	0b5b      	lsrs	r3, r3, #13
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008514:	0b1b      	lsrs	r3, r3, #12
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	b2da      	uxtb	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852c:	2b00      	cmp	r3, #0
 800852e:	d163      	bne.n	80085f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008534:	009a      	lsls	r2, r3, #2
 8008536:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800853a:	4013      	ands	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008540:	0f92      	lsrs	r2, r2, #30
 8008542:	431a      	orrs	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854c:	0edb      	lsrs	r3, r3, #27
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	b2da      	uxtb	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855e:	0e1b      	lsrs	r3, r3, #24
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	b2da      	uxtb	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008570:	0d5b      	lsrs	r3, r3, #21
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	b2da      	uxtb	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008582:	0c9b      	lsrs	r3, r3, #18
 8008584:	b2db      	uxtb	r3, r3
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	b2da      	uxtb	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008594:	0bdb      	lsrs	r3, r3, #15
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	b2da      	uxtb	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	7e1b      	ldrb	r3, [r3, #24]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	3302      	adds	r3, #2
 80085b8:	2201      	movs	r2, #1
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80085c2:	fb03 f202 	mul.w	r2, r3, r2
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	7a1b      	ldrb	r3, [r3, #8]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80085e4:	0a52      	lsrs	r2, r2, #9
 80085e6:	fb03 f202 	mul.w	r2, r3, r2
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80085f6:	e031      	b.n	800865c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d11d      	bne.n	800863c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008604:	041b      	lsls	r3, r3, #16
 8008606:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	431a      	orrs	r2, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	3301      	adds	r3, #1
 800861c:	029a      	lsls	r2, r3, #10
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008630:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	661a      	str	r2, [r3, #96]	@ 0x60
 800863a:	e00f      	b.n	800865c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a58      	ldr	r2, [pc, #352]	@ (80087a4 <HAL_SD_GetCardCSD+0x344>)
 8008642:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008648:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e09d      	b.n	8008798 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008660:	0b9b      	lsrs	r3, r3, #14
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	b2da      	uxtb	r2, r3
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008672:	09db      	lsrs	r3, r3, #7
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800867a:	b2da      	uxtb	r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868a:	b2da      	uxtb	r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008694:	0fdb      	lsrs	r3, r3, #31
 8008696:	b2da      	uxtb	r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a0:	0f5b      	lsrs	r3, r3, #29
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b2:	0e9b      	lsrs	r3, r3, #26
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c4:	0d9b      	lsrs	r3, r3, #22
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	0d5b      	lsrs	r3, r3, #21
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008706:	0bdb      	lsrs	r3, r3, #15
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871a:	0b9b      	lsrs	r3, r3, #14
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	b2da      	uxtb	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	0b5b      	lsrs	r3, r3, #13
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	0b1b      	lsrs	r3, r3, #12
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008756:	0a9b      	lsrs	r3, r3, #10
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	b2da      	uxtb	r2, r3
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008786:	b2da      	uxtb	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	004005ff 	.word	0x004005ff

080087a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f970 	bl	8008af8 <SD_SendStatus>
 8008818:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d005      	beq.n	800882c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	431a      	orrs	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	0a5b      	lsrs	r3, r3, #9
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008836:	693b      	ldr	r3, [r7, #16]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008840:	b5b0      	push	{r4, r5, r7, lr}
 8008842:	b094      	sub	sp, #80	@ 0x50
 8008844:	af04      	add	r7, sp, #16
 8008846:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008848:	2301      	movs	r3, #1
 800884a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fa48 	bl	8009ce6 <SDIO_GetPowerState>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800885c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008860:	e0b8      	b.n	80089d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008866:	2b03      	cmp	r3, #3
 8008868:	d02f      	beq.n	80088ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fc2f 	bl	800a0d2 <SDMMC_CmdSendCID>
 8008874:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <SD_InitCard+0x40>
    {
      return errorstate;
 800887c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887e:	e0a9      	b.n	80089d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2100      	movs	r1, #0
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fa72 	bl	8009d70 <SDIO_GetResponse>
 800888c:	4602      	mov	r2, r0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2104      	movs	r1, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fa69 	bl	8009d70 <SDIO_GetResponse>
 800889e:	4602      	mov	r2, r0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2108      	movs	r1, #8
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fa60 	bl	8009d70 <SDIO_GetResponse>
 80088b0:	4602      	mov	r2, r0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	210c      	movs	r1, #12
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fa57 	bl	8009d70 <SDIO_GetResponse>
 80088c2:	4602      	mov	r2, r0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d00d      	beq.n	80088ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f107 020e 	add.w	r2, r7, #14
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 fc35 	bl	800a14c <SDMMC_CmdSetRelAdd>
 80088e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <SD_InitCard+0xae>
    {
      return errorstate;
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	e072      	b.n	80089d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d036      	beq.n	8008964 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80088f6:	89fb      	ldrh	r3, [r7, #14]
 80088f8:	461a      	mov	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f001 fbff 	bl	800a10e <SDMMC_CmdSendCSD>
 8008910:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	e05b      	b.n	80089d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fa24 	bl	8009d70 <SDIO_GetResponse>
 8008928:	4602      	mov	r2, r0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2104      	movs	r1, #4
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fa1b 	bl	8009d70 <SDIO_GetResponse>
 800893a:	4602      	mov	r2, r0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2108      	movs	r1, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fa12 	bl	8009d70 <SDIO_GetResponse>
 800894c:	4602      	mov	r2, r0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	210c      	movs	r1, #12
 8008958:	4618      	mov	r0, r3
 800895a:	f001 fa09 	bl	8009d70 <SDIO_GetResponse>
 800895e:	4602      	mov	r2, r0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2104      	movs	r1, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f001 fa00 	bl	8009d70 <SDIO_GetResponse>
 8008970:	4603      	mov	r3, r0
 8008972:	0d1a      	lsrs	r2, r3, #20
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008978:	f107 0310 	add.w	r3, r7, #16
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fd6e 	bl	8008460 <HAL_SD_GetCardCSD>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800898a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800898e:	e021      	b.n	80089d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	2200      	movs	r2, #0
 800899c:	461c      	mov	r4, r3
 800899e:	4615      	mov	r5, r2
 80089a0:	4622      	mov	r2, r4
 80089a2:	462b      	mov	r3, r5
 80089a4:	4608      	mov	r0, r1
 80089a6:	f001 faef 	bl	8009f88 <SDMMC_CmdSelDesel>
 80089aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80089b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b4:	e00e      	b.n	80089d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	466c      	mov	r4, sp
 80089be:	f103 0210 	add.w	r2, r3, #16
 80089c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80089c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089c8:	3304      	adds	r3, #4
 80089ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089cc:	4628      	mov	r0, r5
 80089ce:	f001 f933 	bl	8009c38 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3740      	adds	r7, #64	@ 0x40
 80089d8:	46bd      	mov	sp, r7
 80089da:	bdb0      	pop	{r4, r5, r7, pc}

080089dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	2300      	movs	r3, #0
 80089ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 faea 	bl	8009fce <SDMMC_CmdGoIdleState>
 80089fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	e072      	b.n	8008aec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fafd 	bl	800a00a <SDMMC_CmdOperCond>
 8008a10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00d      	beq.n	8008a34 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 fad3 	bl	8009fce <SDMMC_CmdGoIdleState>
 8008a28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	e05b      	b.n	8008aec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d137      	bne.n	8008ab2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 fafd 	bl	800a048 <SDMMC_CmdAppCommand>
 8008a4e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d02d      	beq.n	8008ab2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a5a:	e047      	b.n	8008aec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 faf0 	bl	800a048 <SDMMC_CmdAppCommand>
 8008a68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	e03b      	b.n	8008aec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	491e      	ldr	r1, [pc, #120]	@ (8008af4 <SD_PowerON+0x118>)
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 fb06 	bl	800a08c <SDMMC_CmdAppOperCommand>
 8008a80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a8c:	e02e      	b.n	8008aec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2100      	movs	r1, #0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 f96b 	bl	8009d70 <SDIO_GetResponse>
 8008a9a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	0fdb      	lsrs	r3, r3, #31
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <SD_PowerON+0xcc>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e000      	b.n	8008aaa <SD_PowerON+0xce>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]

    count++;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d802      	bhi.n	8008ac2 <SD_PowerON+0xe6>
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0cc      	beq.n	8008a5c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d902      	bls.n	8008ad2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ad0:	e00c      	b.n	8008aec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	645a      	str	r2, [r3, #68]	@ 0x44
 8008ae2:	e002      	b.n	8008aea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	c1100000 	.word	0xc1100000

08008af8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b0c:	e018      	b.n	8008b40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b16:	041b      	lsls	r3, r3, #16
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f001 fb37 	bl	800a18e <SDMMC_CmdSendStatus>
 8008b20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	e009      	b.n	8008b40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 f91c 	bl	8009d70 <SDIO_GetResponse>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e03f      	b.n	8008bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fa fbe0 	bl	8003334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2224      	movs	r2, #36	@ 0x24
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fddf 	bl	8009750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	695a      	ldr	r2, [r3, #20]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b08a      	sub	sp, #40	@ 0x28
 8008be6:	af02      	add	r7, sp, #8
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d17c      	bne.n	8008cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_UART_Transmit+0x2c>
 8008c08:	88fb      	ldrh	r3, [r7, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e075      	b.n	8008cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d101      	bne.n	8008c20 <HAL_UART_Transmit+0x3e>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e06e      	b.n	8008cfe <HAL_UART_Transmit+0x11c>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2221      	movs	r2, #33	@ 0x21
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c36:	f7fa fdd3 	bl	80037e0 <HAL_GetTick>
 8008c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	88fa      	ldrh	r2, [r7, #6]
 8008c40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	88fa      	ldrh	r2, [r7, #6]
 8008c46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c50:	d108      	bne.n	8008c64 <HAL_UART_Transmit+0x82>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d104      	bne.n	8008c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	e003      	b.n	8008c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008c74:	e02a      	b.n	8008ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2180      	movs	r1, #128	@ 0x80
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fb1f 	bl	80092c4 <UART_WaitOnFlagUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e036      	b.n	8008cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10b      	bne.n	8008cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	3302      	adds	r3, #2
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	e007      	b.n	8008cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1cf      	bne.n	8008c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2140      	movs	r1, #64	@ 0x40
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 faef 	bl	80092c4 <UART_WaitOnFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e006      	b.n	8008cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e000      	b.n	8008cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008cfc:	2302      	movs	r3, #2
  }
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3720      	adds	r7, #32
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	4613      	mov	r3, r2
 8008d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d11d      	bne.n	8008d5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <HAL_UART_Receive_IT+0x26>
 8008d26:	88fb      	ldrh	r3, [r7, #6]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e016      	b.n	8008d5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_UART_Receive_IT+0x38>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e00f      	b.n	8008d5e <HAL_UART_Receive_IT+0x58>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fb24 	bl	80093a0 <UART_Start_Receive_IT>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	e000      	b.n	8008d5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d5c:	2302      	movs	r3, #2
  }
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b0ba      	sub	sp, #232	@ 0xe8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9e:	f003 030f 	and.w	r3, r3, #15
 8008da2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <HAL_UART_IRQHandler+0x66>
 8008dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fc07 	bl	80095da <UART_Receive_IT>
      return;
 8008dcc:	e256      	b.n	800927c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 80de 	beq.w	8008f94 <HAL_UART_IRQHandler+0x22c>
 8008dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80d1 	beq.w	8008f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00b      	beq.n	8008e16 <HAL_UART_IRQHandler+0xae>
 8008dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	f043 0201 	orr.w	r2, r3, #1
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <HAL_UART_IRQHandler+0xd2>
 8008e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d005      	beq.n	8008e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e32:	f043 0202 	orr.w	r2, r3, #2
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <HAL_UART_IRQHandler+0xf6>
 8008e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	f043 0204 	orr.w	r2, r3, #4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d011      	beq.n	8008e8e <HAL_UART_IRQHandler+0x126>
 8008e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e86:	f043 0208 	orr.w	r2, r3, #8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 81ed 	beq.w	8009272 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d008      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x14e>
 8008ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fb92 	bl	80095da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	2300      	movne	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d103      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x17a>
 8008eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d04f      	beq.n	8008f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa9a 	bl	800941c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef2:	2b40      	cmp	r3, #64	@ 0x40
 8008ef4:	d141      	bne.n	8008f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3314      	adds	r3, #20
 8008efc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3314      	adds	r3, #20
 8008f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1d9      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d013      	beq.n	8008f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8009144 <HAL_UART_IRQHandler+0x3dc>)
 8008f50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fa fefa 	bl	8003d50 <HAL_DMA_Abort_IT>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d016      	beq.n	8008f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	e00e      	b.n	8008f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f990 	bl	8009298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	e00a      	b.n	8008f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f98c 	bl	8009298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f80:	e006      	b.n	8008f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f988 	bl	8009298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008f8e:	e170      	b.n	8009272 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f90:	bf00      	nop
    return;
 8008f92:	e16e      	b.n	8009272 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	f040 814a 	bne.w	8009232 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8143 	beq.w	8009232 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 813c 	beq.w	8009232 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60bb      	str	r3, [r7, #8]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	60bb      	str	r3, [r7, #8]
 8008fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fda:	2b40      	cmp	r3, #64	@ 0x40
 8008fdc:	f040 80b4 	bne.w	8009148 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8140 	beq.w	8009276 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ffe:	429a      	cmp	r2, r3
 8009000:	f080 8139 	bcs.w	8009276 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800900a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009016:	f000 8088 	beq.w	800912a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	330c      	adds	r3, #12
 8009020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009030:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	330c      	adds	r3, #12
 8009042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009046:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800904a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009052:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800905e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1d9      	bne.n	800901a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3314      	adds	r3, #20
 800906c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3314      	adds	r3, #20
 8009086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800908a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800908e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009092:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800909c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e1      	bne.n	8009066 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3314      	adds	r3, #20
 80090a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3314      	adds	r3, #20
 80090c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e3      	bne.n	80090a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	330c      	adds	r3, #12
 80090ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090f2:	e853 3f00 	ldrex	r3, [r3]
 80090f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090fa:	f023 0310 	bic.w	r3, r3, #16
 80090fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	330c      	adds	r3, #12
 8009108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800910c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800910e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009112:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800911a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e3      	bne.n	80090e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009124:	4618      	mov	r0, r3
 8009126:	f7fa fda3 	bl	8003c70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009132:	b29b      	uxth	r3, r3
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	b29b      	uxth	r3, r3
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8b6 	bl	80092ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009140:	e099      	b.n	8009276 <HAL_UART_IRQHandler+0x50e>
 8009142:	bf00      	nop
 8009144:	080094e3 	.word	0x080094e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009150:	b29b      	uxth	r3, r3
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800915c:	b29b      	uxth	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 808b 	beq.w	800927a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 8086 	beq.w	800927a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	330c      	adds	r3, #12
 8009174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800917e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	330c      	adds	r3, #12
 800918e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009192:	647a      	str	r2, [r7, #68]	@ 0x44
 8009194:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e3      	bne.n	800916e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3314      	adds	r3, #20
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	623b      	str	r3, [r7, #32]
   return(result);
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	f023 0301 	bic.w	r3, r3, #1
 80091bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3314      	adds	r3, #20
 80091c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80091cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e3      	bne.n	80091a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	330c      	adds	r3, #12
 80091f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	330c      	adds	r3, #12
 800920c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009210:	61fa      	str	r2, [r7, #28]
 8009212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	69fa      	ldr	r2, [r7, #28]
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	617b      	str	r3, [r7, #20]
   return(result);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e3      	bne.n	80091ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f83e 	bl	80092ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009230:	e023      	b.n	800927a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <HAL_UART_IRQHandler+0x4ea>
 800923e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f95d 	bl	800950a <UART_Transmit_IT>
    return;
 8009250:	e014      	b.n	800927c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00e      	beq.n	800927c <HAL_UART_IRQHandler+0x514>
 800925e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	d008      	beq.n	800927c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f99d 	bl	80095aa <UART_EndTransmit_IT>
    return;
 8009270:	e004      	b.n	800927c <HAL_UART_IRQHandler+0x514>
    return;
 8009272:	bf00      	nop
 8009274:	e002      	b.n	800927c <HAL_UART_IRQHandler+0x514>
      return;
 8009276:	bf00      	nop
 8009278:	e000      	b.n	800927c <HAL_UART_IRQHandler+0x514>
      return;
 800927a:	bf00      	nop
  }
}
 800927c:	37e8      	adds	r7, #232	@ 0xe8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop

08009284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b090      	sub	sp, #64	@ 0x40
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d4:	e050      	b.n	8009378 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d04c      	beq.n	8009378 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d007      	beq.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092e4:	f7fa fa7c 	bl	80037e0 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d241      	bcs.n	8009378 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	330c      	adds	r3, #12
 80092fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009306:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800930a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	330c      	adds	r3, #12
 8009312:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009314:	637a      	str	r2, [r7, #52]	@ 0x34
 8009316:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800931a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e5      	bne.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3314      	adds	r3, #20
 800932e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	613b      	str	r3, [r7, #16]
   return(result);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3314      	adds	r3, #20
 8009346:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009348:	623a      	str	r2, [r7, #32]
 800934a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	69f9      	ldr	r1, [r7, #28]
 800934e:	6a3a      	ldr	r2, [r7, #32]
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	61bb      	str	r3, [r7, #24]
   return(result);
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e5      	bne.n	8009328 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e00f      	b.n	8009398 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	4013      	ands	r3, r2
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	429a      	cmp	r2, r3
 8009386:	bf0c      	ite	eq
 8009388:	2301      	moveq	r3, #1
 800938a:	2300      	movne	r3, #0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	461a      	mov	r2, r3
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	429a      	cmp	r2, r3
 8009394:	d09f      	beq.n	80092d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3740      	adds	r7, #64	@ 0x40
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	88fa      	ldrh	r2, [r7, #6]
 80093b8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	88fa      	ldrh	r2, [r7, #6]
 80093be:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2222      	movs	r2, #34	@ 0x22
 80093ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68da      	ldr	r2, [r3, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	695a      	ldr	r2, [r3, #20]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0201 	orr.w	r2, r2, #1
 80093fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0220 	orr.w	r2, r2, #32
 800940c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800941c:	b480      	push	{r7}
 800941e:	b095      	sub	sp, #84	@ 0x54
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	330c      	adds	r3, #12
 800942a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800942e:	e853 3f00 	ldrex	r3, [r3]
 8009432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800943a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009444:	643a      	str	r2, [r7, #64]	@ 0x40
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800944a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e5      	bne.n	8009424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3314      	adds	r3, #20
 800945e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	61fb      	str	r3, [r7, #28]
   return(result);
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	f023 0301 	bic.w	r3, r3, #1
 800946e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3314      	adds	r3, #20
 8009476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009478:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800947a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800947e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e5      	bne.n	8009458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009490:	2b01      	cmp	r3, #1
 8009492:	d119      	bne.n	80094c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	330c      	adds	r3, #12
 800949a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f023 0310 	bic.w	r3, r3, #16
 80094aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094b4:	61ba      	str	r2, [r7, #24]
 80094b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6979      	ldr	r1, [r7, #20]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	613b      	str	r3, [r7, #16]
   return(result);
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e5      	bne.n	8009494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094d6:	bf00      	nop
 80094d8:	3754      	adds	r7, #84	@ 0x54
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7ff fecb 	bl	8009298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b21      	cmp	r3, #33	@ 0x21
 800951c:	d13e      	bne.n	800959c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009526:	d114      	bne.n	8009552 <UART_Transmit_IT+0x48>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d110      	bne.n	8009552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	1c9a      	adds	r2, r3, #2
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	621a      	str	r2, [r3, #32]
 8009550:	e008      	b.n	8009564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	1c59      	adds	r1, r3, #1
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6211      	str	r1, [r2, #32]
 800955c:	781a      	ldrb	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009568:	b29b      	uxth	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	b29b      	uxth	r3, r3
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4619      	mov	r1, r3
 8009572:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10f      	bne.n	8009598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	e000      	b.n	800959e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800959c:	2302      	movs	r3, #2
  }
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fe5a 	bl	8009284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b08c      	sub	sp, #48	@ 0x30
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b22      	cmp	r3, #34	@ 0x22
 80095ec:	f040 80ab 	bne.w	8009746 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f8:	d117      	bne.n	800962a <UART_Receive_IT+0x50>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d113      	bne.n	800962a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b29b      	uxth	r3, r3
 8009614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009618:	b29a      	uxth	r2, r3
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009622:	1c9a      	adds	r2, r3, #2
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	629a      	str	r2, [r3, #40]	@ 0x28
 8009628:	e026      	b.n	8009678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800963c:	d007      	beq.n	800964e <UART_Receive_IT+0x74>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <UART_Receive_IT+0x82>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	b2da      	uxtb	r2, r3
 8009656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	e008      	b.n	800966e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009668:	b2da      	uxtb	r2, r3
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29b      	uxth	r3, r3
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4619      	mov	r1, r3
 8009686:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009688:	2b00      	cmp	r3, #0
 800968a:	d15a      	bne.n	8009742 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0220 	bic.w	r2, r2, #32
 800969a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695a      	ldr	r2, [r3, #20]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0201 	bic.w	r2, r2, #1
 80096ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d135      	bne.n	8009738 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	330c      	adds	r3, #12
 80096d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	613b      	str	r3, [r7, #16]
   return(result);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f023 0310 	bic.w	r3, r3, #16
 80096e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	330c      	adds	r3, #12
 80096f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f2:	623a      	str	r2, [r7, #32]
 80096f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	69f9      	ldr	r1, [r7, #28]
 80096f8:	6a3a      	ldr	r2, [r7, #32]
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e5      	bne.n	80096d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b10      	cmp	r3, #16
 8009712:	d10a      	bne.n	800972a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff fdbb 	bl	80092ac <HAL_UARTEx_RxEventCallback>
 8009736:	e002      	b.n	800973e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7f9 f863 	bl	8002804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	e002      	b.n	8009748 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	e000      	b.n	8009748 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009746:	2302      	movs	r3, #2
  }
}
 8009748:	4618      	mov	r0, r3
 800974a:	3730      	adds	r7, #48	@ 0x30
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009754:	b0c0      	sub	sp, #256	@ 0x100
 8009756:	af00      	add	r7, sp, #0
 8009758:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800975c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976c:	68d9      	ldr	r1, [r3, #12]
 800976e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	ea40 0301 	orr.w	r3, r0, r1
 8009778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800977a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	431a      	orrs	r2, r3
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	431a      	orrs	r2, r3
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	4313      	orrs	r3, r2
 8009798:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800979c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80097a8:	f021 010c 	bic.w	r1, r1, #12
 80097ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097b6:	430b      	orrs	r3, r1
 80097b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ca:	6999      	ldr	r1, [r3, #24]
 80097cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	ea40 0301 	orr.w	r3, r0, r1
 80097d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b8f      	ldr	r3, [pc, #572]	@ (8009a1c <UART_SetConfig+0x2cc>)
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d005      	beq.n	80097f0 <UART_SetConfig+0xa0>
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	4b8d      	ldr	r3, [pc, #564]	@ (8009a20 <UART_SetConfig+0x2d0>)
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d104      	bne.n	80097fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097f0:	f7fe f8ce 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 80097f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80097f8:	e003      	b.n	8009802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097fa:	f7fe f8b5 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 80097fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800980c:	f040 810c 	bne.w	8009a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009814:	2200      	movs	r2, #0
 8009816:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800981a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800981e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009822:	4622      	mov	r2, r4
 8009824:	462b      	mov	r3, r5
 8009826:	1891      	adds	r1, r2, r2
 8009828:	65b9      	str	r1, [r7, #88]	@ 0x58
 800982a:	415b      	adcs	r3, r3
 800982c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800982e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009832:	4621      	mov	r1, r4
 8009834:	eb12 0801 	adds.w	r8, r2, r1
 8009838:	4629      	mov	r1, r5
 800983a:	eb43 0901 	adc.w	r9, r3, r1
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800984a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800984e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009852:	4690      	mov	r8, r2
 8009854:	4699      	mov	r9, r3
 8009856:	4623      	mov	r3, r4
 8009858:	eb18 0303 	adds.w	r3, r8, r3
 800985c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009860:	462b      	mov	r3, r5
 8009862:	eb49 0303 	adc.w	r3, r9, r3
 8009866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800986a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009876:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800987a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800987e:	460b      	mov	r3, r1
 8009880:	18db      	adds	r3, r3, r3
 8009882:	653b      	str	r3, [r7, #80]	@ 0x50
 8009884:	4613      	mov	r3, r2
 8009886:	eb42 0303 	adc.w	r3, r2, r3
 800988a:	657b      	str	r3, [r7, #84]	@ 0x54
 800988c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009894:	f7f6 fcf4 	bl	8000280 <__aeabi_uldivmod>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4b61      	ldr	r3, [pc, #388]	@ (8009a24 <UART_SetConfig+0x2d4>)
 800989e:	fba3 2302 	umull	r2, r3, r3, r2
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	011c      	lsls	r4, r3, #4
 80098a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80098b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80098b8:	4642      	mov	r2, r8
 80098ba:	464b      	mov	r3, r9
 80098bc:	1891      	adds	r1, r2, r2
 80098be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098c0:	415b      	adcs	r3, r3
 80098c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098c8:	4641      	mov	r1, r8
 80098ca:	eb12 0a01 	adds.w	sl, r2, r1
 80098ce:	4649      	mov	r1, r9
 80098d0:	eb43 0b01 	adc.w	fp, r3, r1
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098e8:	4692      	mov	sl, r2
 80098ea:	469b      	mov	fp, r3
 80098ec:	4643      	mov	r3, r8
 80098ee:	eb1a 0303 	adds.w	r3, sl, r3
 80098f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098f6:	464b      	mov	r3, r9
 80098f8:	eb4b 0303 	adc.w	r3, fp, r3
 80098fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800990c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009914:	460b      	mov	r3, r1
 8009916:	18db      	adds	r3, r3, r3
 8009918:	643b      	str	r3, [r7, #64]	@ 0x40
 800991a:	4613      	mov	r3, r2
 800991c:	eb42 0303 	adc.w	r3, r2, r3
 8009920:	647b      	str	r3, [r7, #68]	@ 0x44
 8009922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800992a:	f7f6 fca9 	bl	8000280 <__aeabi_uldivmod>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4611      	mov	r1, r2
 8009934:	4b3b      	ldr	r3, [pc, #236]	@ (8009a24 <UART_SetConfig+0x2d4>)
 8009936:	fba3 2301 	umull	r2, r3, r3, r1
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	2264      	movs	r2, #100	@ 0x64
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	1acb      	subs	r3, r1, r3
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800994a:	4b36      	ldr	r3, [pc, #216]	@ (8009a24 <UART_SetConfig+0x2d4>)
 800994c:	fba3 2302 	umull	r2, r3, r3, r2
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009958:	441c      	add	r4, r3
 800995a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800995e:	2200      	movs	r2, #0
 8009960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009964:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800996c:	4642      	mov	r2, r8
 800996e:	464b      	mov	r3, r9
 8009970:	1891      	adds	r1, r2, r2
 8009972:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009974:	415b      	adcs	r3, r3
 8009976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800997c:	4641      	mov	r1, r8
 800997e:	1851      	adds	r1, r2, r1
 8009980:	6339      	str	r1, [r7, #48]	@ 0x30
 8009982:	4649      	mov	r1, r9
 8009984:	414b      	adcs	r3, r1
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009994:	4659      	mov	r1, fp
 8009996:	00cb      	lsls	r3, r1, #3
 8009998:	4651      	mov	r1, sl
 800999a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800999e:	4651      	mov	r1, sl
 80099a0:	00ca      	lsls	r2, r1, #3
 80099a2:	4610      	mov	r0, r2
 80099a4:	4619      	mov	r1, r3
 80099a6:	4603      	mov	r3, r0
 80099a8:	4642      	mov	r2, r8
 80099aa:	189b      	adds	r3, r3, r2
 80099ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099b0:	464b      	mov	r3, r9
 80099b2:	460a      	mov	r2, r1
 80099b4:	eb42 0303 	adc.w	r3, r2, r3
 80099b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80099cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099d0:	460b      	mov	r3, r1
 80099d2:	18db      	adds	r3, r3, r3
 80099d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099d6:	4613      	mov	r3, r2
 80099d8:	eb42 0303 	adc.w	r3, r2, r3
 80099dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099e6:	f7f6 fc4b 	bl	8000280 <__aeabi_uldivmod>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <UART_SetConfig+0x2d4>)
 80099f0:	fba3 1302 	umull	r1, r3, r3, r2
 80099f4:	095b      	lsrs	r3, r3, #5
 80099f6:	2164      	movs	r1, #100	@ 0x64
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	3332      	adds	r3, #50	@ 0x32
 8009a02:	4a08      	ldr	r2, [pc, #32]	@ (8009a24 <UART_SetConfig+0x2d4>)
 8009a04:	fba2 2303 	umull	r2, r3, r2, r3
 8009a08:	095b      	lsrs	r3, r3, #5
 8009a0a:	f003 0207 	and.w	r2, r3, #7
 8009a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4422      	add	r2, r4
 8009a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a18:	e106      	b.n	8009c28 <UART_SetConfig+0x4d8>
 8009a1a:	bf00      	nop
 8009a1c:	40011000 	.word	0x40011000
 8009a20:	40011400 	.word	0x40011400
 8009a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	464b      	mov	r3, r9
 8009a3e:	1891      	adds	r1, r2, r2
 8009a40:	6239      	str	r1, [r7, #32]
 8009a42:	415b      	adcs	r3, r3
 8009a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	1854      	adds	r4, r2, r1
 8009a4e:	4649      	mov	r1, r9
 8009a50:	eb43 0501 	adc.w	r5, r3, r1
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	00eb      	lsls	r3, r5, #3
 8009a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a62:	00e2      	lsls	r2, r4, #3
 8009a64:	4614      	mov	r4, r2
 8009a66:	461d      	mov	r5, r3
 8009a68:	4643      	mov	r3, r8
 8009a6a:	18e3      	adds	r3, r4, r3
 8009a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a70:	464b      	mov	r3, r9
 8009a72:	eb45 0303 	adc.w	r3, r5, r3
 8009a76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a8a:	f04f 0200 	mov.w	r2, #0
 8009a8e:	f04f 0300 	mov.w	r3, #0
 8009a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a96:	4629      	mov	r1, r5
 8009a98:	008b      	lsls	r3, r1, #2
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	008a      	lsls	r2, r1, #2
 8009aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009aa8:	f7f6 fbea 	bl	8000280 <__aeabi_uldivmod>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4b60      	ldr	r3, [pc, #384]	@ (8009c34 <UART_SetConfig+0x4e4>)
 8009ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	011c      	lsls	r4, r3, #4
 8009aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ac4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009acc:	4642      	mov	r2, r8
 8009ace:	464b      	mov	r3, r9
 8009ad0:	1891      	adds	r1, r2, r2
 8009ad2:	61b9      	str	r1, [r7, #24]
 8009ad4:	415b      	adcs	r3, r3
 8009ad6:	61fb      	str	r3, [r7, #28]
 8009ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009adc:	4641      	mov	r1, r8
 8009ade:	1851      	adds	r1, r2, r1
 8009ae0:	6139      	str	r1, [r7, #16]
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	414b      	adcs	r3, r1
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	f04f 0300 	mov.w	r3, #0
 8009af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009af4:	4659      	mov	r1, fp
 8009af6:	00cb      	lsls	r3, r1, #3
 8009af8:	4651      	mov	r1, sl
 8009afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009afe:	4651      	mov	r1, sl
 8009b00:	00ca      	lsls	r2, r1, #3
 8009b02:	4610      	mov	r0, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	4603      	mov	r3, r0
 8009b08:	4642      	mov	r2, r8
 8009b0a:	189b      	adds	r3, r3, r2
 8009b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b10:	464b      	mov	r3, r9
 8009b12:	460a      	mov	r2, r1
 8009b14:	eb42 0303 	adc.w	r3, r2, r3
 8009b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b28:	f04f 0200 	mov.w	r2, #0
 8009b2c:	f04f 0300 	mov.w	r3, #0
 8009b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b34:	4649      	mov	r1, r9
 8009b36:	008b      	lsls	r3, r1, #2
 8009b38:	4641      	mov	r1, r8
 8009b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b3e:	4641      	mov	r1, r8
 8009b40:	008a      	lsls	r2, r1, #2
 8009b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b46:	f7f6 fb9b 	bl	8000280 <__aeabi_uldivmod>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4b38      	ldr	r3, [pc, #224]	@ (8009c34 <UART_SetConfig+0x4e4>)
 8009b52:	fba3 2301 	umull	r2, r3, r3, r1
 8009b56:	095b      	lsrs	r3, r3, #5
 8009b58:	2264      	movs	r2, #100	@ 0x64
 8009b5a:	fb02 f303 	mul.w	r3, r2, r3
 8009b5e:	1acb      	subs	r3, r1, r3
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	3332      	adds	r3, #50	@ 0x32
 8009b64:	4a33      	ldr	r2, [pc, #204]	@ (8009c34 <UART_SetConfig+0x4e4>)
 8009b66:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6a:	095b      	lsrs	r3, r3, #5
 8009b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b70:	441c      	add	r4, r3
 8009b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b76:	2200      	movs	r2, #0
 8009b78:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b80:	4642      	mov	r2, r8
 8009b82:	464b      	mov	r3, r9
 8009b84:	1891      	adds	r1, r2, r2
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	415b      	adcs	r3, r3
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b90:	4641      	mov	r1, r8
 8009b92:	1851      	adds	r1, r2, r1
 8009b94:	6039      	str	r1, [r7, #0]
 8009b96:	4649      	mov	r1, r9
 8009b98:	414b      	adcs	r3, r1
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	f04f 0300 	mov.w	r3, #0
 8009ba4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ba8:	4659      	mov	r1, fp
 8009baa:	00cb      	lsls	r3, r1, #3
 8009bac:	4651      	mov	r1, sl
 8009bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bb2:	4651      	mov	r1, sl
 8009bb4:	00ca      	lsls	r2, r1, #3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4603      	mov	r3, r0
 8009bbc:	4642      	mov	r2, r8
 8009bbe:	189b      	adds	r3, r3, r2
 8009bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	460a      	mov	r2, r1
 8009bc6:	eb42 0303 	adc.w	r3, r2, r3
 8009bca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8009bd8:	f04f 0200 	mov.w	r2, #0
 8009bdc:	f04f 0300 	mov.w	r3, #0
 8009be0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009be4:	4649      	mov	r1, r9
 8009be6:	008b      	lsls	r3, r1, #2
 8009be8:	4641      	mov	r1, r8
 8009bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bee:	4641      	mov	r1, r8
 8009bf0:	008a      	lsls	r2, r1, #2
 8009bf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009bf6:	f7f6 fb43 	bl	8000280 <__aeabi_uldivmod>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <UART_SetConfig+0x4e4>)
 8009c00:	fba3 1302 	umull	r1, r3, r3, r2
 8009c04:	095b      	lsrs	r3, r3, #5
 8009c06:	2164      	movs	r1, #100	@ 0x64
 8009c08:	fb01 f303 	mul.w	r3, r1, r3
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	3332      	adds	r3, #50	@ 0x32
 8009c12:	4a08      	ldr	r2, [pc, #32]	@ (8009c34 <UART_SetConfig+0x4e4>)
 8009c14:	fba2 2303 	umull	r2, r3, r2, r3
 8009c18:	095b      	lsrs	r3, r3, #5
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4422      	add	r2, r4
 8009c26:	609a      	str	r2, [r3, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c34:	51eb851f 	.word	0x51eb851f

08009c38 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c38:	b084      	sub	sp, #16
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	f107 001c 	add.w	r0, r7, #28
 8009c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009c56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009c5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009c5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009c62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009c72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	b004      	add	sp, #16
 8009c8c:	4770      	bx	lr

08009c8e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0303 	and.w	r3, r3, #3
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d20:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d26:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009d3c:	f023 030f 	bic.w	r3, r3, #15
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	431a      	orrs	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	b2db      	uxtb	r3, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3314      	adds	r3, #20
 8009d7e:	461a      	mov	r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	4413      	add	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
}  
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dbc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009dc2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009dc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0

}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b088      	sub	sp, #32
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e00:	2340      	movs	r3, #64	@ 0x40
 8009e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff ff74 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e1e:	2110      	movs	r1, #16
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f9d7 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009e26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e28:	69fb      	ldr	r3, [r7, #28]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3720      	adds	r7, #32
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b088      	sub	sp, #32
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e40:	2311      	movs	r3, #17
 8009e42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e44:	2340      	movs	r3, #64	@ 0x40
 8009e46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e52:	f107 0308 	add.w	r3, r7, #8
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff ff52 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e62:	2111      	movs	r1, #17
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f9b5 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b088      	sub	sp, #32
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e84:	2312      	movs	r3, #18
 8009e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e88:	2340      	movs	r3, #64	@ 0x40
 8009e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e96:	f107 0308 	add.w	r3, r7, #8
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff ff30 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ea6:	2112      	movs	r1, #18
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f993 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b088      	sub	sp, #32
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ec8:	2318      	movs	r3, #24
 8009eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ecc:	2340      	movs	r3, #64	@ 0x40
 8009ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff ff0e 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eea:	2118      	movs	r1, #24
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f971 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b088      	sub	sp, #32
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f0c:	2319      	movs	r3, #25
 8009f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f10:	2340      	movs	r3, #64	@ 0x40
 8009f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f1e:	f107 0308 	add.w	r3, r7, #8
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff feec 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f2e:	2119      	movs	r1, #25
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f94f 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f38:	69fb      	ldr	r3, [r7, #28]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f50:	230c      	movs	r3, #12
 8009f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f54:	2340      	movs	r3, #64	@ 0x40
 8009f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff feca 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009f6e:	4a05      	ldr	r2, [pc, #20]	@ (8009f84 <SDMMC_CmdStopTransfer+0x40>)
 8009f70:	210c      	movs	r1, #12
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f92e 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f7a:	69fb      	ldr	r3, [r7, #28]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3720      	adds	r7, #32
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	05f5e100 	.word	0x05f5e100

08009f88 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08a      	sub	sp, #40	@ 0x28
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f98:	2307      	movs	r3, #7
 8009f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f9c:	2340      	movs	r3, #64	@ 0x40
 8009f9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009faa:	f107 0310 	add.w	r3, r7, #16
 8009fae:	4619      	mov	r1, r3
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fea6 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fba:	2107      	movs	r1, #7
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 f909 	bl	800a1d4 <SDMMC_GetCmdResp1>
 8009fc2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3728      	adds	r7, #40	@ 0x28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b088      	sub	sp, #32
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fec:	f107 0308 	add.w	r3, r7, #8
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff fe85 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fb23 	bl	800a644 <SDMMC_GetCmdError>
 8009ffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a000:	69fb      	ldr	r3, [r7, #28]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b088      	sub	sp, #32
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a012:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a018:	2308      	movs	r3, #8
 800a01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a01c:	2340      	movs	r3, #64	@ 0x40
 800a01e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a020:	2300      	movs	r3, #0
 800a022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a028:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a02a:	f107 0308 	add.w	r3, r7, #8
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff fe66 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fab6 	bl	800a5a8 <SDMMC_GetCmdResp7>
 800a03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a03e:	69fb      	ldr	r3, [r7, #28]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a056:	2337      	movs	r3, #55	@ 0x37
 800a058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a05a:	2340      	movs	r3, #64	@ 0x40
 800a05c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a05e:	2300      	movs	r3, #0
 800a060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a066:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a068:	f107 0308 	add.w	r3, r7, #8
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff fe47 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a074:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a078:	2137      	movs	r1, #55	@ 0x37
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f8aa 	bl	800a1d4 <SDMMC_GetCmdResp1>
 800a080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a082:	69fb      	ldr	r3, [r7, #28]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3720      	adds	r7, #32
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a09c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0a2:	2329      	movs	r3, #41	@ 0x29
 800a0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0a6:	2340      	movs	r3, #64	@ 0x40
 800a0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fe21 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f9bd 	bl	800a440 <SDMMC_GetCmdResp3>
 800a0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a0e2:	23c0      	movs	r3, #192	@ 0xc0
 800a0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0f0:	f107 0308 	add.w	r3, r7, #8
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff fe03 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f957 	bl	800a3b0 <SDMMC_GetCmdResp2>
 800a102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a104:	69fb      	ldr	r3, [r7, #28]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a11c:	2309      	movs	r3, #9
 800a11e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a120:	23c0      	movs	r3, #192	@ 0xc0
 800a122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a12c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a12e:	f107 0308 	add.w	r3, r7, #8
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fde4 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f938 	bl	800a3b0 <SDMMC_GetCmdResp2>
 800a140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a142:	69fb      	ldr	r3, [r7, #28]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3720      	adds	r7, #32
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a15a:	2303      	movs	r3, #3
 800a15c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a15e:	2340      	movs	r3, #64	@ 0x40
 800a160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a162:	2300      	movs	r3, #0
 800a164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a16a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a16c:	f107 0308 	add.w	r3, r7, #8
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff fdc5 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	2103      	movs	r1, #3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f99d 	bl	800a4bc <SDMMC_GetCmdResp6>
 800a182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a184:	69fb      	ldr	r3, [r7, #28]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b088      	sub	sp, #32
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a19c:	230d      	movs	r3, #13
 800a19e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1a0:	2340      	movs	r3, #64	@ 0x40
 800a1a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1ae:	f107 0308 	add.w	r3, r7, #8
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff fda4 	bl	8009d02 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a1ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1be:	210d      	movs	r1, #13
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f807 	bl	800a1d4 <SDMMC_GetCmdResp1>
 800a1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3720      	adds	r7, #32
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a1e2:	4b70      	ldr	r3, [pc, #448]	@ (800a3a4 <SDMMC_GetCmdResp1+0x1d0>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a70      	ldr	r2, [pc, #448]	@ (800a3a8 <SDMMC_GetCmdResp1+0x1d4>)
 800a1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ec:	0a5a      	lsrs	r2, r3, #9
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	fb02 f303 	mul.w	r3, r2, r3
 800a1f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	1e5a      	subs	r2, r3, #1
 800a1fa:	61fa      	str	r2, [r7, #28]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a200:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a204:	e0c9      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a20a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0ef      	beq.n	800a1f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1ea      	bne.n	800a1f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d004      	beq.n	800a236 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2204      	movs	r2, #4
 800a230:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a232:	2304      	movs	r3, #4
 800a234:	e0b1      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d004      	beq.n	800a24c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a248:	2301      	movs	r3, #1
 800a24a:	e0a6      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	22c5      	movs	r2, #197	@ 0xc5
 800a250:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff fd7f 	bl	8009d56 <SDIO_GetCommandResponse>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	4293      	cmp	r3, r2
 800a260:	d001      	beq.n	800a266 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a262:	2301      	movs	r3, #1
 800a264:	e099      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a266:	2100      	movs	r1, #0
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fd81 	bl	8009d70 <SDIO_GetResponse>
 800a26e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	4b4e      	ldr	r3, [pc, #312]	@ (800a3ac <SDMMC_GetCmdResp1+0x1d8>)
 800a274:	4013      	ands	r3, r2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	e08d      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	da02      	bge.n	800a28a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a288:	e087      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a294:	2340      	movs	r3, #64	@ 0x40
 800a296:	e080      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2a2:	2380      	movs	r3, #128	@ 0x80
 800a2a4:	e079      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2b4:	e071      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2c4:	e069      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a2d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2d4:	e061      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2e4:	e059      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2f4:	e051      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a304:	e049      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a310:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a314:	e041      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a324:	e039      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a334:	e031      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a340:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a344:	e029      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a350:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a354:	e021      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a360:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a364:	e019      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a370:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a374:	e011      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a380:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a384:	e009      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a390:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a394:	e001      	b.n	800a39a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a396:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3720      	adds	r7, #32
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000020 	.word	0x20000020
 800a3a8:	10624dd3 	.word	0x10624dd3
 800a3ac:	fdffe008 	.word	0xfdffe008

0800a3b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3b8:	4b1f      	ldr	r3, [pc, #124]	@ (800a438 <SDMMC_GetCmdResp2+0x88>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a43c <SDMMC_GetCmdResp2+0x8c>)
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	0a5b      	lsrs	r3, r3, #9
 800a3c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3c8:	fb02 f303 	mul.w	r3, r2, r3
 800a3cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1e5a      	subs	r2, r3, #1
 800a3d2:	60fa      	str	r2, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3dc:	e026      	b.n	800a42c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0ef      	beq.n	800a3ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1ea      	bne.n	800a3ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2204      	movs	r2, #4
 800a408:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a40a:	2304      	movs	r3, #4
 800a40c:	e00e      	b.n	800a42c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d004      	beq.n	800a424 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a420:	2301      	movs	r3, #1
 800a422:	e003      	b.n	800a42c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	22c5      	movs	r2, #197	@ 0xc5
 800a428:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	20000020 	.word	0x20000020
 800a43c:	10624dd3 	.word	0x10624dd3

0800a440 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a448:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b4 <SDMMC_GetCmdResp3+0x74>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a1a      	ldr	r2, [pc, #104]	@ (800a4b8 <SDMMC_GetCmdResp3+0x78>)
 800a44e:	fba2 2303 	umull	r2, r3, r2, r3
 800a452:	0a5b      	lsrs	r3, r3, #9
 800a454:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a458:	fb02 f303 	mul.w	r3, r2, r3
 800a45c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1e5a      	subs	r2, r3, #1
 800a462:	60fa      	str	r2, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d102      	bne.n	800a46e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a468:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a46c:	e01b      	b.n	800a4a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a472:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0ef      	beq.n	800a45e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1ea      	bne.n	800a45e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d004      	beq.n	800a49e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2204      	movs	r2, #4
 800a498:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a49a:	2304      	movs	r3, #4
 800a49c:	e003      	b.n	800a4a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	22c5      	movs	r2, #197	@ 0xc5
 800a4a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000020 	.word	0x20000020
 800a4b8:	10624dd3 	.word	0x10624dd3

0800a4bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4ca:	4b35      	ldr	r3, [pc, #212]	@ (800a5a0 <SDMMC_GetCmdResp6+0xe4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a35      	ldr	r2, [pc, #212]	@ (800a5a4 <SDMMC_GetCmdResp6+0xe8>)
 800a4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d4:	0a5b      	lsrs	r3, r3, #9
 800a4d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	1e5a      	subs	r2, r3, #1
 800a4e4:	61fa      	str	r2, [r7, #28]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4ee:	e052      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0ef      	beq.n	800a4e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1ea      	bne.n	800a4e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2204      	movs	r2, #4
 800a51a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a51c:	2304      	movs	r3, #4
 800a51e:	e03a      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d004      	beq.n	800a536 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2201      	movs	r2, #1
 800a530:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a532:	2301      	movs	r3, #1
 800a534:	e02f      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fc0d 	bl	8009d56 <SDIO_GetCommandResponse>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	7afb      	ldrb	r3, [r7, #11]
 800a542:	4293      	cmp	r3, r2
 800a544:	d001      	beq.n	800a54a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a546:	2301      	movs	r3, #1
 800a548:	e025      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	22c5      	movs	r2, #197	@ 0xc5
 800a54e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a550:	2100      	movs	r1, #0
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff fc0c 	bl	8009d70 <SDIO_GetResponse>
 800a558:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	0c1b      	lsrs	r3, r3, #16
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a56e:	2300      	movs	r3, #0
 800a570:	e011      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a57c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a580:	e009      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a58c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a590:	e001      	b.n	800a596 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a596:	4618      	mov	r0, r3
 800a598:	3720      	adds	r7, #32
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000020 	.word	0x20000020
 800a5a4:	10624dd3 	.word	0x10624dd3

0800a5a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5b0:	4b22      	ldr	r3, [pc, #136]	@ (800a63c <SDMMC_GetCmdResp7+0x94>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a22      	ldr	r2, [pc, #136]	@ (800a640 <SDMMC_GetCmdResp7+0x98>)
 800a5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ba:	0a5b      	lsrs	r3, r3, #9
 800a5bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	1e5a      	subs	r2, r3, #1
 800a5ca:	60fa      	str	r2, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5d4:	e02c      	b.n	800a630 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0ef      	beq.n	800a5c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1ea      	bne.n	800a5c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2204      	movs	r2, #4
 800a600:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a602:	2304      	movs	r3, #4
 800a604:	e014      	b.n	800a630 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a618:	2301      	movs	r3, #1
 800a61a:	e009      	b.n	800a630 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2240      	movs	r2, #64	@ 0x40
 800a62c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
  
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	20000020 	.word	0x20000020
 800a640:	10624dd3 	.word	0x10624dd3

0800a644 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a64c:	4b11      	ldr	r3, [pc, #68]	@ (800a694 <SDMMC_GetCmdError+0x50>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a11      	ldr	r2, [pc, #68]	@ (800a698 <SDMMC_GetCmdError+0x54>)
 800a652:	fba2 2303 	umull	r2, r3, r2, r3
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1e5a      	subs	r2, r3, #1
 800a666:	60fa      	str	r2, [r7, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a66c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a670:	e009      	b.n	800a686 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0f1      	beq.n	800a662 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	22c5      	movs	r2, #197	@ 0xc5
 800a682:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	20000020 	.word	0x20000020
 800a698:	10624dd3 	.word	0x10624dd3

0800a69c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a6a0:	4904      	ldr	r1, [pc, #16]	@ (800a6b4 <MX_FATFS_Init+0x18>)
 800a6a2:	4805      	ldr	r0, [pc, #20]	@ (800a6b8 <MX_FATFS_Init+0x1c>)
 800a6a4:	f003 f81e 	bl	800d6e4 <FATFS_LinkDriver>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4b03      	ldr	r3, [pc, #12]	@ (800a6bc <MX_FATFS_Init+0x20>)
 800a6ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a6b0:	bf00      	nop
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	2000567c 	.word	0x2000567c
 800a6b8:	08010338 	.word	0x08010338
 800a6bc:	20005678 	.word	0x20005678

0800a6c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a6c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a6da:	f000 f86b 	bl	800a7b4 <BSP_SD_IsDetected>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d001      	beq.n	800a6e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e005      	b.n	800a6f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a6e8:	4804      	ldr	r0, [pc, #16]	@ (800a6fc <BSP_SD_Init+0x2c>)
 800a6ea:	f7fd faa5 	bl	8007c38 <HAL_SD_Init>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	200002ac 	.word	0x200002ac

0800a700 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af02      	add	r7, sp, #8
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	68f9      	ldr	r1, [r7, #12]
 800a71c:	4806      	ldr	r0, [pc, #24]	@ (800a738 <BSP_SD_ReadBlocks+0x38>)
 800a71e:	f7fd fb3b 	bl	8007d98 <HAL_SD_ReadBlocks>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200002ac 	.word	0x200002ac

0800a73c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af02      	add	r7, sp, #8
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	4806      	ldr	r0, [pc, #24]	@ (800a774 <BSP_SD_WriteBlocks+0x38>)
 800a75a:	f7fd fcfb 	bl	8008154 <HAL_SD_WriteBlocks>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200002ac 	.word	0x200002ac

0800a778 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a77c:	4805      	ldr	r0, [pc, #20]	@ (800a794 <BSP_SD_GetCardState+0x1c>)
 800a77e:	f7fe f83f 	bl	8008800 <HAL_SD_GetCardState>
 800a782:	4603      	mov	r3, r0
 800a784:	2b04      	cmp	r3, #4
 800a786:	bf14      	ite	ne
 800a788:	2301      	movne	r3, #1
 800a78a:	2300      	moveq	r3, #0
 800a78c:	b2db      	uxtb	r3, r3
}
 800a78e:	4618      	mov	r0, r3
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	200002ac 	.word	0x200002ac

0800a798 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	4803      	ldr	r0, [pc, #12]	@ (800a7b0 <BSP_SD_GetCardInfo+0x18>)
 800a7a4:	f7fe f800 	bl	80087a8 <HAL_SD_GetCardInfo>
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	200002ac 	.word	0x200002ac

0800a7b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	b2db      	uxtb	r3, r3
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a7da:	4b0b      	ldr	r3, [pc, #44]	@ (800a808 <SD_CheckStatus+0x38>)
 800a7dc:	2201      	movs	r2, #1
 800a7de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a7e0:	f7ff ffca 	bl	800a778 <BSP_SD_GetCardState>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d107      	bne.n	800a7fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a7ea:	4b07      	ldr	r3, [pc, #28]	@ (800a808 <SD_CheckStatus+0x38>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	4b04      	ldr	r3, [pc, #16]	@ (800a808 <SD_CheckStatus+0x38>)
 800a7f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	@ (800a808 <SD_CheckStatus+0x38>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	b2db      	uxtb	r3, r3
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000029 	.word	0x20000029

0800a80c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a816:	4b0b      	ldr	r3, [pc, #44]	@ (800a844 <SD_initialize+0x38>)
 800a818:	2201      	movs	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a81c:	f7ff ff58 	bl	800a6d0 <BSP_SD_Init>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d107      	bne.n	800a836 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff ffd1 	bl	800a7d0 <SD_CheckStatus>
 800a82e:	4603      	mov	r3, r0
 800a830:	461a      	mov	r2, r3
 800a832:	4b04      	ldr	r3, [pc, #16]	@ (800a844 <SD_initialize+0x38>)
 800a834:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a836:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <SD_initialize+0x38>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b2db      	uxtb	r3, r3
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000029 	.word	0x20000029

0800a848 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff ffbb 	bl	800a7d0 <SD_CheckStatus>
 800a85a:	4603      	mov	r3, r0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	68b8      	ldr	r0, [r7, #8]
 800a882:	f7ff ff3d 	bl	800a700 <BSP_SD_ReadBlocks>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d107      	bne.n	800a89c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a88c:	bf00      	nop
 800a88e:	f7ff ff73 	bl	800a778 <BSP_SD_GetCardState>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1fa      	bne.n	800a88e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b086      	sub	sp, #24
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	6879      	ldr	r1, [r7, #4]
 800a8c2:	68b8      	ldr	r0, [r7, #8]
 800a8c4:	f7ff ff3a 	bl	800a73c <BSP_SD_WriteBlocks>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d107      	bne.n	800a8de <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a8ce:	bf00      	nop
 800a8d0:	f7ff ff52 	bl	800a778 <BSP_SD_GetCardState>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1fa      	bne.n	800a8d0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08c      	sub	sp, #48	@ 0x30
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	603a      	str	r2, [r7, #0]
 800a8f2:	71fb      	strb	r3, [r7, #7]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a8fe:	4b25      	ldr	r3, [pc, #148]	@ (800a994 <SD_ioctl+0xac>)
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <SD_ioctl+0x28>
 800a90c:	2303      	movs	r3, #3
 800a90e:	e03c      	b.n	800a98a <SD_ioctl+0xa2>

  switch (cmd)
 800a910:	79bb      	ldrb	r3, [r7, #6]
 800a912:	2b03      	cmp	r3, #3
 800a914:	d834      	bhi.n	800a980 <SD_ioctl+0x98>
 800a916:	a201      	add	r2, pc, #4	@ (adr r2, 800a91c <SD_ioctl+0x34>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a92d 	.word	0x0800a92d
 800a920:	0800a935 	.word	0x0800a935
 800a924:	0800a94d 	.word	0x0800a94d
 800a928:	0800a967 	.word	0x0800a967
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a932:	e028      	b.n	800a986 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a934:	f107 030c 	add.w	r3, r7, #12
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff ff2d 	bl	800a798 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a93e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a94a:	e01c      	b.n	800a986 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a94c:	f107 030c 	add.w	r3, r7, #12
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff ff21 	bl	800a798 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a958:	b29a      	uxth	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a964:	e00f      	b.n	800a986 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a966:	f107 030c 	add.w	r3, r7, #12
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff ff14 	bl	800a798 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	0a5a      	lsrs	r2, r3, #9
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a97e:	e002      	b.n	800a986 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a980:	2304      	movs	r3, #4
 800a982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a986:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3730      	adds	r7, #48	@ 0x30
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000029 	.word	0x20000029

0800a998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	4a08      	ldr	r2, [pc, #32]	@ (800a9c8 <disk_status+0x30>)
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	79fa      	ldrb	r2, [r7, #7]
 800a9b0:	4905      	ldr	r1, [pc, #20]	@ (800a9c8 <disk_status+0x30>)
 800a9b2:	440a      	add	r2, r1
 800a9b4:	7a12      	ldrb	r2, [r2, #8]
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4798      	blx	r3
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	200056a8 	.word	0x200056a8

0800a9cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a9da:	79fb      	ldrb	r3, [r7, #7]
 800a9dc:	4a0d      	ldr	r2, [pc, #52]	@ (800aa14 <disk_initialize+0x48>)
 800a9de:	5cd3      	ldrb	r3, [r2, r3]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d111      	bne.n	800aa08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	4a0b      	ldr	r2, [pc, #44]	@ (800aa14 <disk_initialize+0x48>)
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	4a09      	ldr	r2, [pc, #36]	@ (800aa14 <disk_initialize+0x48>)
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	79fa      	ldrb	r2, [r7, #7]
 800a9fa:	4906      	ldr	r1, [pc, #24]	@ (800aa14 <disk_initialize+0x48>)
 800a9fc:	440a      	add	r2, r1
 800a9fe:	7a12      	ldrb	r2, [r2, #8]
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	200056a8 	.word	0x200056a8

0800aa18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa18:	b590      	push	{r4, r7, lr}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60b9      	str	r1, [r7, #8]
 800aa20:	607a      	str	r2, [r7, #4]
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa54 <disk_read+0x3c>)
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	689c      	ldr	r4, [r3, #8]
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	4a07      	ldr	r2, [pc, #28]	@ (800aa54 <disk_read+0x3c>)
 800aa38:	4413      	add	r3, r2
 800aa3a:	7a18      	ldrb	r0, [r3, #8]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	47a0      	blx	r4
 800aa44:	4603      	mov	r3, r0
 800aa46:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd90      	pop	{r4, r7, pc}
 800aa52:	bf00      	nop
 800aa54:	200056a8 	.word	0x200056a8

0800aa58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa58:	b590      	push	{r4, r7, lr}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa94 <disk_write+0x3c>)
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	68dc      	ldr	r4, [r3, #12]
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	4a07      	ldr	r2, [pc, #28]	@ (800aa94 <disk_write+0x3c>)
 800aa78:	4413      	add	r3, r2
 800aa7a:	7a18      	ldrb	r0, [r3, #8]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	47a0      	blx	r4
 800aa84:	4603      	mov	r3, r0
 800aa86:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd90      	pop	{r4, r7, pc}
 800aa92:	bf00      	nop
 800aa94:	200056a8 	.word	0x200056a8

0800aa98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	603a      	str	r2, [r7, #0]
 800aaa2:	71fb      	strb	r3, [r7, #7]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	4a09      	ldr	r2, [pc, #36]	@ (800aad0 <disk_ioctl+0x38>)
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	79fa      	ldrb	r2, [r7, #7]
 800aab6:	4906      	ldr	r1, [pc, #24]	@ (800aad0 <disk_ioctl+0x38>)
 800aab8:	440a      	add	r2, r1
 800aaba:	7a10      	ldrb	r0, [r2, #8]
 800aabc:	79b9      	ldrb	r1, [r7, #6]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	4798      	blx	r3
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]
  return res;
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	200056a8 	.word	0x200056a8

0800aad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3301      	adds	r3, #1
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aae4:	89fb      	ldrh	r3, [r7, #14]
 800aae6:	021b      	lsls	r3, r3, #8
 800aae8:	b21a      	sxth	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b21b      	sxth	r3, r3
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	b21b      	sxth	r3, r3
 800aaf4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aaf6:	89fb      	ldrh	r3, [r7, #14]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3303      	adds	r3, #3
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	3202      	adds	r2, #2
 800ab1c:	7812      	ldrb	r2, [r2, #0]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	3201      	adds	r2, #1
 800ab2a:	7812      	ldrb	r2, [r2, #0]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7812      	ldrb	r2, [r2, #0]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	887a      	ldrh	r2, [r7, #2]
 800ab5e:	b2d2      	uxtb	r2, r2
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	887b      	ldrh	r3, [r7, #2]
 800ab64:	0a1b      	lsrs	r3, r3, #8
 800ab66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	887a      	ldrh	r2, [r7, #2]
 800ab70:	b2d2      	uxtb	r2, r2
 800ab72:	701a      	strb	r2, [r3, #0]
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	b2d2      	uxtb	r2, r2
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	0a1b      	lsrs	r3, r3, #8
 800ab9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	607a      	str	r2, [r7, #4]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	0a1b      	lsrs	r3, r3, #8
 800abbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	701a      	strb	r2, [r3, #0]
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00d      	beq.n	800ac0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	1c53      	adds	r3, r2, #1
 800abf6:	613b      	str	r3, [r7, #16]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	1c59      	adds	r1, r3, #1
 800abfc:	6179      	str	r1, [r7, #20]
 800abfe:	7812      	ldrb	r2, [r2, #0]
 800ac00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	607b      	str	r3, [r7, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1f1      	bne.n	800abf2 <mem_cpy+0x1a>
	}
}
 800ac0e:	bf00      	nop
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac1a:	b480      	push	{r7}
 800ac1c:	b087      	sub	sp, #28
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	617a      	str	r2, [r7, #20]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	607b      	str	r3, [r7, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1f3      	bne.n	800ac2a <mem_set+0x10>
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	371c      	adds	r7, #28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac50:	b480      	push	{r7}
 800ac52:	b089      	sub	sp, #36	@ 0x24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	61fa      	str	r2, [r7, #28]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	4619      	mov	r1, r3
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	61ba      	str	r2, [r7, #24]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	1acb      	subs	r3, r1, r3
 800ac7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	607b      	str	r3, [r7, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <mem_cmp+0x40>
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0eb      	beq.n	800ac68 <mem_cmp+0x18>

	return r;
 800ac90:	697b      	ldr	r3, [r7, #20]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3724      	adds	r7, #36	@ 0x24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aca8:	e002      	b.n	800acb0 <chk_chr+0x12>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3301      	adds	r3, #1
 800acae:	607b      	str	r3, [r7, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d005      	beq.n	800acc4 <chk_chr+0x26>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d1f2      	bne.n	800acaa <chk_chr+0xc>
	return *str;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	781b      	ldrb	r3, [r3, #0]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acde:	2300      	movs	r3, #0
 800ace0:	60bb      	str	r3, [r7, #8]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e029      	b.n	800ad3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ace8:	4a27      	ldr	r2, [pc, #156]	@ (800ad88 <chk_lock+0xb4>)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	011b      	lsls	r3, r3, #4
 800acee:	4413      	add	r3, r2
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01d      	beq.n	800ad32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acf6:	4a24      	ldr	r2, [pc, #144]	@ (800ad88 <chk_lock+0xb4>)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	4413      	add	r3, r2
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d116      	bne.n	800ad36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad08:	4a1f      	ldr	r2, [pc, #124]	@ (800ad88 <chk_lock+0xb4>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	011b      	lsls	r3, r3, #4
 800ad0e:	4413      	add	r3, r2
 800ad10:	3304      	adds	r3, #4
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d10c      	bne.n	800ad36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad1c:	4a1a      	ldr	r2, [pc, #104]	@ (800ad88 <chk_lock+0xb4>)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	011b      	lsls	r3, r3, #4
 800ad22:	4413      	add	r3, r2
 800ad24:	3308      	adds	r3, #8
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d102      	bne.n	800ad36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad30:	e007      	b.n	800ad42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ad32:	2301      	movs	r3, #1
 800ad34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d9d2      	bls.n	800ace8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d109      	bne.n	800ad5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d102      	bne.n	800ad54 <chk_lock+0x80>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d101      	bne.n	800ad58 <chk_lock+0x84>
 800ad54:	2300      	movs	r3, #0
 800ad56:	e010      	b.n	800ad7a <chk_lock+0xa6>
 800ad58:	2312      	movs	r3, #18
 800ad5a:	e00e      	b.n	800ad7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d108      	bne.n	800ad74 <chk_lock+0xa0>
 800ad62:	4a09      	ldr	r2, [pc, #36]	@ (800ad88 <chk_lock+0xb4>)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	011b      	lsls	r3, r3, #4
 800ad68:	4413      	add	r3, r2
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad72:	d101      	bne.n	800ad78 <chk_lock+0xa4>
 800ad74:	2310      	movs	r3, #16
 800ad76:	e000      	b.n	800ad7a <chk_lock+0xa6>
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	20005688 	.word	0x20005688

0800ad8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad92:	2300      	movs	r3, #0
 800ad94:	607b      	str	r3, [r7, #4]
 800ad96:	e002      	b.n	800ad9e <enq_lock+0x12>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d806      	bhi.n	800adb2 <enq_lock+0x26>
 800ada4:	4a09      	ldr	r2, [pc, #36]	@ (800adcc <enq_lock+0x40>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	4413      	add	r3, r2
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f2      	bne.n	800ad98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	bf14      	ite	ne
 800adb8:	2301      	movne	r3, #1
 800adba:	2300      	moveq	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	20005688 	.word	0x20005688

0800add0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e01f      	b.n	800ae20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ade0:	4a41      	ldr	r2, [pc, #260]	@ (800aee8 <inc_lock+0x118>)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	011b      	lsls	r3, r3, #4
 800ade6:	4413      	add	r3, r2
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d113      	bne.n	800ae1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800adf2:	4a3d      	ldr	r2, [pc, #244]	@ (800aee8 <inc_lock+0x118>)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	4413      	add	r3, r2
 800adfa:	3304      	adds	r3, #4
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d109      	bne.n	800ae1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae06:	4a38      	ldr	r2, [pc, #224]	@ (800aee8 <inc_lock+0x118>)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3308      	adds	r3, #8
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d006      	beq.n	800ae28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d9dc      	bls.n	800ade0 <inc_lock+0x10>
 800ae26:	e000      	b.n	800ae2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d132      	bne.n	800ae96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e002      	b.n	800ae3c <inc_lock+0x6c>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d806      	bhi.n	800ae50 <inc_lock+0x80>
 800ae42:	4a29      	ldr	r2, [pc, #164]	@ (800aee8 <inc_lock+0x118>)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1f2      	bne.n	800ae36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d101      	bne.n	800ae5a <inc_lock+0x8a>
 800ae56:	2300      	movs	r3, #0
 800ae58:	e040      	b.n	800aedc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	4922      	ldr	r1, [pc, #136]	@ (800aee8 <inc_lock+0x118>)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	440b      	add	r3, r1
 800ae66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	491e      	ldr	r1, [pc, #120]	@ (800aee8 <inc_lock+0x118>)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	440b      	add	r3, r1
 800ae74:	3304      	adds	r3, #4
 800ae76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	695a      	ldr	r2, [r3, #20]
 800ae7c:	491a      	ldr	r1, [pc, #104]	@ (800aee8 <inc_lock+0x118>)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	011b      	lsls	r3, r3, #4
 800ae82:	440b      	add	r3, r1
 800ae84:	3308      	adds	r3, #8
 800ae86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae88:	4a17      	ldr	r2, [pc, #92]	@ (800aee8 <inc_lock+0x118>)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	4413      	add	r3, r2
 800ae90:	330c      	adds	r3, #12
 800ae92:	2200      	movs	r2, #0
 800ae94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d009      	beq.n	800aeb0 <inc_lock+0xe0>
 800ae9c:	4a12      	ldr	r2, [pc, #72]	@ (800aee8 <inc_lock+0x118>)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	011b      	lsls	r3, r3, #4
 800aea2:	4413      	add	r3, r2
 800aea4:	330c      	adds	r3, #12
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <inc_lock+0xe0>
 800aeac:	2300      	movs	r3, #0
 800aeae:	e015      	b.n	800aedc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d108      	bne.n	800aec8 <inc_lock+0xf8>
 800aeb6:	4a0c      	ldr	r2, [pc, #48]	@ (800aee8 <inc_lock+0x118>)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	4413      	add	r3, r2
 800aebe:	330c      	adds	r3, #12
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	3301      	adds	r3, #1
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	e001      	b.n	800aecc <inc_lock+0xfc>
 800aec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aecc:	4906      	ldr	r1, [pc, #24]	@ (800aee8 <inc_lock+0x118>)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	011b      	lsls	r3, r3, #4
 800aed2:	440b      	add	r3, r1
 800aed4:	330c      	adds	r3, #12
 800aed6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3301      	adds	r3, #1
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	20005688 	.word	0x20005688

0800aeec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d825      	bhi.n	800af4c <dec_lock+0x60>
		n = Files[i].ctr;
 800af00:	4a17      	ldr	r2, [pc, #92]	@ (800af60 <dec_lock+0x74>)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	4413      	add	r3, r2
 800af08:	330c      	adds	r3, #12
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af0e:	89fb      	ldrh	r3, [r7, #14]
 800af10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af14:	d101      	bne.n	800af1a <dec_lock+0x2e>
 800af16:	2300      	movs	r3, #0
 800af18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af1a:	89fb      	ldrh	r3, [r7, #14]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <dec_lock+0x3a>
 800af20:	89fb      	ldrh	r3, [r7, #14]
 800af22:	3b01      	subs	r3, #1
 800af24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af26:	4a0e      	ldr	r2, [pc, #56]	@ (800af60 <dec_lock+0x74>)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	4413      	add	r3, r2
 800af2e:	330c      	adds	r3, #12
 800af30:	89fa      	ldrh	r2, [r7, #14]
 800af32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800af34:	89fb      	ldrh	r3, [r7, #14]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d105      	bne.n	800af46 <dec_lock+0x5a>
 800af3a:	4a09      	ldr	r2, [pc, #36]	@ (800af60 <dec_lock+0x74>)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	4413      	add	r3, r2
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	737b      	strb	r3, [r7, #13]
 800af4a:	e001      	b.n	800af50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800af4c:	2302      	movs	r3, #2
 800af4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800af50:	7b7b      	ldrb	r3, [r7, #13]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20005688 	.word	0x20005688

0800af64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af6c:	2300      	movs	r3, #0
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	e010      	b.n	800af94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af72:	4a0d      	ldr	r2, [pc, #52]	@ (800afa8 <clear_lock+0x44>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	4413      	add	r3, r2
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d105      	bne.n	800af8e <clear_lock+0x2a>
 800af82:	4a09      	ldr	r2, [pc, #36]	@ (800afa8 <clear_lock+0x44>)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	011b      	lsls	r3, r3, #4
 800af88:	4413      	add	r3, r2
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3301      	adds	r3, #1
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d9eb      	bls.n	800af72 <clear_lock+0xe>
	}
}
 800af9a:	bf00      	nop
 800af9c:	bf00      	nop
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	20005688 	.word	0x20005688

0800afac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	78db      	ldrb	r3, [r3, #3]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d034      	beq.n	800b02a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7858      	ldrb	r0, [r3, #1]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800afd0:	2301      	movs	r3, #1
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	f7ff fd40 	bl	800aa58 <disk_write>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800afde:	2301      	movs	r3, #1
 800afe0:	73fb      	strb	r3, [r7, #15]
 800afe2:	e022      	b.n	800b02a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	1ad2      	subs	r2, r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d217      	bcs.n	800b02a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	789b      	ldrb	r3, [r3, #2]
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	e010      	b.n	800b024 <sync_window+0x78>
					wsect += fs->fsize;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4413      	add	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7858      	ldrb	r0, [r3, #1]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b016:	2301      	movs	r3, #1
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	f7ff fd1d 	bl	800aa58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	3b01      	subs	r3, #1
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d8eb      	bhi.n	800b002 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d01b      	beq.n	800b084 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ffad 	bl	800afac <sync_window>
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d113      	bne.n	800b084 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7858      	ldrb	r0, [r3, #1]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b066:	2301      	movs	r3, #1
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	f7ff fcd5 	bl	800aa18 <disk_read>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d004      	beq.n	800b07e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b074:	f04f 33ff 	mov.w	r3, #4294967295
 800b078:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7ff ff87 	bl	800afac <sync_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d159      	bne.n	800b15c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d149      	bne.n	800b144 <sync_fs+0xb4>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	791b      	ldrb	r3, [r3, #4]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d145      	bne.n	800b144 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	899b      	ldrh	r3, [r3, #12]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	f7ff fda8 	bl	800ac1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3334      	adds	r3, #52	@ 0x34
 800b0ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b0d2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fd37 	bl	800ab4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3334      	adds	r3, #52	@ 0x34
 800b0e0:	4921      	ldr	r1, [pc, #132]	@ (800b168 <sync_fs+0xd8>)
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fd4c 	bl	800ab80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3334      	adds	r3, #52	@ 0x34
 800b0ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b0f0:	491e      	ldr	r1, [pc, #120]	@ (800b16c <sync_fs+0xdc>)
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff fd44 	bl	800ab80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3334      	adds	r3, #52	@ 0x34
 800b0fc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f7ff fd3a 	bl	800ab80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3334      	adds	r3, #52	@ 0x34
 800b110:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	4619      	mov	r1, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	f7ff fd30 	bl	800ab80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	7858      	ldrb	r0, [r3, #1]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b138:	2301      	movs	r3, #1
 800b13a:	f7ff fc8d 	bl	800aa58 <disk_write>
			fs->fsi_flag = 0;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff fca3 	bl	800aa98 <disk_ioctl>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <sync_fs+0xcc>
 800b158:	2301      	movs	r3, #1
 800b15a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	41615252 	.word	0x41615252
 800b16c:	61417272 	.word	0x61417272

0800b170 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	3b02      	subs	r3, #2
 800b17e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	3b02      	subs	r3, #2
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d301      	bcc.n	800b190 <clust2sect+0x20>
 800b18c:	2300      	movs	r3, #0
 800b18e:	e008      	b.n	800b1a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	895b      	ldrh	r3, [r3, #10]
 800b194:	461a      	mov	r2, r3
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	fb03 f202 	mul.w	r2, r3, r2
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a0:	4413      	add	r3, r2
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b086      	sub	sp, #24
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d904      	bls.n	800b1ce <get_fat+0x20>
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d302      	bcc.n	800b1d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e0ba      	b.n	800b34a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	f000 8082 	beq.w	800b2e8 <get_fat+0x13a>
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	f300 80a6 	bgt.w	800b336 <get_fat+0x188>
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d002      	beq.n	800b1f4 <get_fat+0x46>
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d055      	beq.n	800b29e <get_fat+0xf0>
 800b1f2:	e0a0      	b.n	800b336 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	085b      	lsrs	r3, r3, #1
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	899b      	ldrh	r3, [r3, #12]
 800b20a:	4619      	mov	r1, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b212:	4413      	add	r3, r2
 800b214:	4619      	mov	r1, r3
 800b216:	6938      	ldr	r0, [r7, #16]
 800b218:	f7ff ff0c 	bl	800b034 <move_window>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f040 808c 	bne.w	800b33c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	60fa      	str	r2, [r7, #12]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	8992      	ldrh	r2, [r2, #12]
 800b22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b232:	fb01 f202 	mul.w	r2, r1, r2
 800b236:	1a9b      	subs	r3, r3, r2
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	4413      	add	r3, r2
 800b23c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b240:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	899b      	ldrh	r3, [r3, #12]
 800b24a:	4619      	mov	r1, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b252:	4413      	add	r3, r2
 800b254:	4619      	mov	r1, r3
 800b256:	6938      	ldr	r0, [r7, #16]
 800b258:	f7ff feec 	bl	800b034 <move_window>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d16e      	bne.n	800b340 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	899b      	ldrh	r3, [r3, #12]
 800b266:	461a      	mov	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b26e:	fb01 f202 	mul.w	r2, r1, r2
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4413      	add	r3, r2
 800b278:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	4313      	orrs	r3, r2
 800b282:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <get_fat+0xe6>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	091b      	lsrs	r3, r3, #4
 800b292:	e002      	b.n	800b29a <get_fat+0xec>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b29a:	617b      	str	r3, [r7, #20]
			break;
 800b29c:	e055      	b.n	800b34a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	899b      	ldrh	r3, [r3, #12]
 800b2a6:	085b      	lsrs	r3, r3, #1
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2b2:	4413      	add	r3, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f7ff febc 	bl	800b034 <move_window>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d140      	bne.n	800b344 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	8992      	ldrh	r2, [r2, #12]
 800b2d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2d4:	fb00 f202 	mul.w	r2, r0, r2
 800b2d8:	1a9b      	subs	r3, r3, r2
 800b2da:	440b      	add	r3, r1
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff fbf9 	bl	800aad4 <ld_word>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	617b      	str	r3, [r7, #20]
			break;
 800b2e6:	e030      	b.n	800b34a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	899b      	ldrh	r3, [r3, #12]
 800b2f0:	089b      	lsrs	r3, r3, #2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2fc:	4413      	add	r3, r2
 800b2fe:	4619      	mov	r1, r3
 800b300:	6938      	ldr	r0, [r7, #16]
 800b302:	f7ff fe97 	bl	800b034 <move_window>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d11d      	bne.n	800b348 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	8992      	ldrh	r2, [r2, #12]
 800b31a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b31e:	fb00 f202 	mul.w	r2, r0, r2
 800b322:	1a9b      	subs	r3, r3, r2
 800b324:	440b      	add	r3, r1
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fbec 	bl	800ab04 <ld_dword>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b332:	617b      	str	r3, [r7, #20]
			break;
 800b334:	e009      	b.n	800b34a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b336:	2301      	movs	r3, #1
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	e006      	b.n	800b34a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b33c:	bf00      	nop
 800b33e:	e004      	b.n	800b34a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b340:	bf00      	nop
 800b342:	e002      	b.n	800b34a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b344:	bf00      	nop
 800b346:	e000      	b.n	800b34a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b348:	bf00      	nop
		}
	}

	return val;
 800b34a:	697b      	ldr	r3, [r7, #20]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b089      	sub	sp, #36	@ 0x24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b360:	2302      	movs	r3, #2
 800b362:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2b01      	cmp	r3, #1
 800b368:	f240 8109 	bls.w	800b57e <put_fat+0x22a>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	429a      	cmp	r2, r3
 800b374:	f080 8103 	bcs.w	800b57e <put_fat+0x22a>
		switch (fs->fs_type) {
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	f000 80b6 	beq.w	800b4ee <put_fat+0x19a>
 800b382:	2b03      	cmp	r3, #3
 800b384:	f300 80fb 	bgt.w	800b57e <put_fat+0x22a>
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d003      	beq.n	800b394 <put_fat+0x40>
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	f000 8083 	beq.w	800b498 <put_fat+0x144>
 800b392:	e0f4      	b.n	800b57e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	61bb      	str	r3, [r7, #24]
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	085b      	lsrs	r3, r3, #1
 800b39c:	69ba      	ldr	r2, [r7, #24]
 800b39e:	4413      	add	r3, r2
 800b3a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	899b      	ldrh	r3, [r3, #12]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3b2:	4413      	add	r3, r2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fe3c 	bl	800b034 <move_window>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3c0:	7ffb      	ldrb	r3, [r7, #31]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 80d4 	bne.w	800b570 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	61ba      	str	r2, [r7, #24]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	8992      	ldrh	r2, [r2, #12]
 800b3d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3dc:	fb00 f202 	mul.w	r2, r0, r2
 800b3e0:	1a9b      	subs	r3, r3, r2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00d      	beq.n	800b40c <put_fat+0xb8>
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	b25b      	sxtb	r3, r3
 800b3f6:	f003 030f 	and.w	r3, r3, #15
 800b3fa:	b25a      	sxtb	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	011b      	lsls	r3, r3, #4
 800b402:	b25b      	sxtb	r3, r3
 800b404:	4313      	orrs	r3, r2
 800b406:	b25b      	sxtb	r3, r3
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	e001      	b.n	800b410 <put_fat+0xbc>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2201      	movs	r2, #1
 800b418:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	899b      	ldrh	r3, [r3, #12]
 800b422:	4619      	mov	r1, r3
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	fbb3 f3f1 	udiv	r3, r3, r1
 800b42a:	4413      	add	r3, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff fe00 	bl	800b034 <move_window>
 800b434:	4603      	mov	r3, r0
 800b436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b438:	7ffb      	ldrb	r3, [r7, #31]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 809a 	bne.w	800b574 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	899b      	ldrh	r3, [r3, #12]
 800b44a:	461a      	mov	r2, r3
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b452:	fb00 f202 	mul.w	r2, r0, r2
 800b456:	1a9b      	subs	r3, r3, r2
 800b458:	440b      	add	r3, r1
 800b45a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <put_fat+0x11a>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	091b      	lsrs	r3, r3, #4
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	e00e      	b.n	800b48c <put_fat+0x138>
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	b25b      	sxtb	r3, r3
 800b474:	f023 030f 	bic.w	r3, r3, #15
 800b478:	b25a      	sxtb	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	0a1b      	lsrs	r3, r3, #8
 800b47e:	b25b      	sxtb	r3, r3
 800b480:	f003 030f 	and.w	r3, r3, #15
 800b484:	b25b      	sxtb	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b25b      	sxtb	r3, r3
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
			break;
 800b496:	e072      	b.n	800b57e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	899b      	ldrh	r3, [r3, #12]
 800b4a0:	085b      	lsrs	r3, r3, #1
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4ac:	4413      	add	r3, r2
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7ff fdbf 	bl	800b034 <move_window>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ba:	7ffb      	ldrb	r3, [r7, #31]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d15b      	bne.n	800b578 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	8992      	ldrh	r2, [r2, #12]
 800b4ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4d2:	fb00 f202 	mul.w	r2, r0, r2
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	440b      	add	r3, r1
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	b292      	uxth	r2, r2
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff fb32 	bl	800ab4a <st_word>
			fs->wflag = 1;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	70da      	strb	r2, [r3, #3]
			break;
 800b4ec:	e047      	b.n	800b57e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	899b      	ldrh	r3, [r3, #12]
 800b4f6:	089b      	lsrs	r3, r3, #2
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800b502:	4413      	add	r3, r2
 800b504:	4619      	mov	r1, r3
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fd94 	bl	800b034 <move_window>
 800b50c:	4603      	mov	r3, r0
 800b50e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b510:	7ffb      	ldrb	r3, [r7, #31]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d132      	bne.n	800b57c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	8992      	ldrh	r2, [r2, #12]
 800b52a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b52e:	fb00 f202 	mul.w	r2, r0, r2
 800b532:	1a9b      	subs	r3, r3, r2
 800b534:	440b      	add	r3, r1
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fae4 	bl	800ab04 <ld_dword>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b542:	4323      	orrs	r3, r4
 800b544:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	8992      	ldrh	r2, [r2, #12]
 800b554:	fbb3 f0f2 	udiv	r0, r3, r2
 800b558:	fb00 f202 	mul.w	r2, r0, r2
 800b55c:	1a9b      	subs	r3, r3, r2
 800b55e:	440b      	add	r3, r1
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff fb0c 	bl	800ab80 <st_dword>
			fs->wflag = 1;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2201      	movs	r2, #1
 800b56c:	70da      	strb	r2, [r3, #3]
			break;
 800b56e:	e006      	b.n	800b57e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b570:	bf00      	nop
 800b572:	e004      	b.n	800b57e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b574:	bf00      	nop
 800b576:	e002      	b.n	800b57e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <put_fat+0x22a>
			if (res != FR_OK) break;
 800b57c:	bf00      	nop
		}
	}
	return res;
 800b57e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3724      	adds	r7, #36	@ 0x24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd90      	pop	{r4, r7, pc}

0800b588 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d904      	bls.n	800b5ae <remove_chain+0x26>
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d301      	bcc.n	800b5b2 <remove_chain+0x2a>
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	e04b      	b.n	800b64a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00c      	beq.n	800b5d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	69b8      	ldr	r0, [r7, #24]
 800b5c0:	f7ff fec8 	bl	800b354 <put_fat>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b5c8:	7ffb      	ldrb	r3, [r7, #31]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <remove_chain+0x4a>
 800b5ce:	7ffb      	ldrb	r3, [r7, #31]
 800b5d0:	e03b      	b.n	800b64a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff fdea 	bl	800b1ae <get_fat>
 800b5da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d031      	beq.n	800b646 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <remove_chain+0x64>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e02e      	b.n	800b64a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d101      	bne.n	800b5f8 <remove_chain+0x70>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e028      	b.n	800b64a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	69b8      	ldr	r0, [r7, #24]
 800b5fe:	f7ff fea9 	bl	800b354 <put_fat>
 800b602:	4603      	mov	r3, r0
 800b604:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b606:	7ffb      	ldrb	r3, [r7, #31]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <remove_chain+0x88>
 800b60c:	7ffb      	ldrb	r3, [r7, #31]
 800b60e:	e01c      	b.n	800b64a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	695a      	ldr	r2, [r3, #20]
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	3b02      	subs	r3, #2
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d20b      	bcs.n	800b636 <remove_chain+0xae>
			fs->free_clst++;
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	791b      	ldrb	r3, [r3, #4]
 800b62c:	f043 0301 	orr.w	r3, r3, #1
 800b630:	b2da      	uxtb	r2, r3
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	429a      	cmp	r2, r3
 800b642:	d3c6      	bcc.n	800b5d2 <remove_chain+0x4a>
 800b644:	e000      	b.n	800b648 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b646:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3720      	adds	r7, #32
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b088      	sub	sp, #32
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10d      	bne.n	800b684 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d004      	beq.n	800b67e <create_chain+0x2c>
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d31b      	bcc.n	800b6b6 <create_chain+0x64>
 800b67e:	2301      	movs	r3, #1
 800b680:	61bb      	str	r3, [r7, #24]
 800b682:	e018      	b.n	800b6b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fd91 	bl	800b1ae <get_fat>
 800b68c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d801      	bhi.n	800b698 <create_chain+0x46>
 800b694:	2301      	movs	r3, #1
 800b696:	e070      	b.n	800b77a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69e:	d101      	bne.n	800b6a4 <create_chain+0x52>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	e06a      	b.n	800b77a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d201      	bcs.n	800b6b2 <create_chain+0x60>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	e063      	b.n	800b77a <create_chain+0x128>
		scl = clst;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	69fa      	ldr	r2, [r7, #28]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d307      	bcc.n	800b6da <create_chain+0x88>
				ncl = 2;
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d901      	bls.n	800b6da <create_chain+0x88>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e04f      	b.n	800b77a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6da:	69f9      	ldr	r1, [r7, #28]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff fd66 	bl	800b1ae <get_fat>
 800b6e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00e      	beq.n	800b708 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d003      	beq.n	800b6f8 <create_chain+0xa6>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f6:	d101      	bne.n	800b6fc <create_chain+0xaa>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	e03e      	b.n	800b77a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6fc:	69fa      	ldr	r2, [r7, #28]
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	429a      	cmp	r2, r3
 800b702:	d1da      	bne.n	800b6ba <create_chain+0x68>
 800b704:	2300      	movs	r3, #0
 800b706:	e038      	b.n	800b77a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b708:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b70a:	f04f 32ff 	mov.w	r2, #4294967295
 800b70e:	69f9      	ldr	r1, [r7, #28]
 800b710:	6938      	ldr	r0, [r7, #16]
 800b712:	f7ff fe1f 	bl	800b354 <put_fat>
 800b716:	4603      	mov	r3, r0
 800b718:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <create_chain+0xe2>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d006      	beq.n	800b734 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b726:	69fa      	ldr	r2, [r7, #28]
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6938      	ldr	r0, [r7, #16]
 800b72c:	f7ff fe12 	bl	800b354 <put_fat>
 800b730:	4603      	mov	r3, r0
 800b732:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d116      	bne.n	800b768 <create_chain+0x116>
		fs->last_clst = ncl;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	69fa      	ldr	r2, [r7, #28]
 800b73e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	695a      	ldr	r2, [r3, #20]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	3b02      	subs	r3, #2
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d804      	bhi.n	800b758 <create_chain+0x106>
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	1e5a      	subs	r2, r3, #1
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	791b      	ldrb	r3, [r3, #4]
 800b75c:	f043 0301 	orr.w	r3, r3, #1
 800b760:	b2da      	uxtb	r2, r3
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	711a      	strb	r2, [r3, #4]
 800b766:	e007      	b.n	800b778 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b768:	7dfb      	ldrb	r3, [r7, #23]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d102      	bne.n	800b774 <create_chain+0x122>
 800b76e:	f04f 33ff 	mov.w	r3, #4294967295
 800b772:	e000      	b.n	800b776 <create_chain+0x124>
 800b774:	2301      	movs	r3, #1
 800b776:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b778:	69fb      	ldr	r3, [r7, #28]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3720      	adds	r7, #32
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b782:	b480      	push	{r7}
 800b784:	b087      	sub	sp, #28
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b796:	3304      	adds	r3, #4
 800b798:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	8952      	ldrh	r2, [r2, #10]
 800b7aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	1d1a      	adds	r2, r3, #4
 800b7b4:	613a      	str	r2, [r7, #16]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <clmt_clust+0x42>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e010      	b.n	800b7e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d307      	bcc.n	800b7dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7da:	e7e9      	b.n	800b7b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b7dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	4413      	add	r3, r2
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	371c      	adds	r7, #28
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b086      	sub	sp, #24
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b808:	d204      	bcs.n	800b814 <dir_sdi+0x22>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	f003 031f 	and.w	r3, r3, #31
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b814:	2302      	movs	r3, #2
 800b816:	e071      	b.n	800b8fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <dir_sdi+0x46>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d902      	bls.n	800b838 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b836:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10c      	bne.n	800b858 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	095b      	lsrs	r3, r3, #5
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	8912      	ldrh	r2, [r2, #8]
 800b846:	4293      	cmp	r3, r2
 800b848:	d301      	bcc.n	800b84e <dir_sdi+0x5c>
 800b84a:	2302      	movs	r3, #2
 800b84c:	e056      	b.n	800b8fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	61da      	str	r2, [r3, #28]
 800b856:	e02d      	b.n	800b8b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	895b      	ldrh	r3, [r3, #10]
 800b85c:	461a      	mov	r2, r3
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	899b      	ldrh	r3, [r3, #12]
 800b862:	fb02 f303 	mul.w	r3, r2, r3
 800b866:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b868:	e019      	b.n	800b89e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6979      	ldr	r1, [r7, #20]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff fc9d 	bl	800b1ae <get_fat>
 800b874:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d101      	bne.n	800b882 <dir_sdi+0x90>
 800b87e:	2301      	movs	r3, #1
 800b880:	e03c      	b.n	800b8fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d904      	bls.n	800b892 <dir_sdi+0xa0>
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d301      	bcc.n	800b896 <dir_sdi+0xa4>
 800b892:	2302      	movs	r3, #2
 800b894:	e032      	b.n	800b8fc <dir_sdi+0x10a>
			ofs -= csz;
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d2e1      	bcs.n	800b86a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b8a6:	6979      	ldr	r1, [r7, #20]
 800b8a8:	6938      	ldr	r0, [r7, #16]
 800b8aa:	f7ff fc61 	bl	800b170 <clust2sect>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <dir_sdi+0xd4>
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	e01a      	b.n	800b8fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	69da      	ldr	r2, [r3, #28]
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	899b      	ldrh	r3, [r3, #12]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8d6:	441a      	add	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	899b      	ldrh	r3, [r3, #12]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8ee:	fb00 f202 	mul.w	r2, r0, r2
 800b8f2:	1a9b      	subs	r3, r3, r2
 800b8f4:	18ca      	adds	r2, r1, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	3320      	adds	r3, #32
 800b91a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	69db      	ldr	r3, [r3, #28]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <dir_next+0x28>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b92a:	d301      	bcc.n	800b930 <dir_next+0x2c>
 800b92c:	2304      	movs	r3, #4
 800b92e:	e0bb      	b.n	800baa8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	899b      	ldrh	r3, [r3, #12]
 800b934:	461a      	mov	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	fbb3 f1f2 	udiv	r1, r3, r2
 800b93c:	fb01 f202 	mul.w	r2, r1, r2
 800b940:	1a9b      	subs	r3, r3, r2
 800b942:	2b00      	cmp	r3, #0
 800b944:	f040 809d 	bne.w	800ba82 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	095b      	lsrs	r3, r3, #5
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	8912      	ldrh	r2, [r2, #8]
 800b962:	4293      	cmp	r3, r2
 800b964:	f0c0 808d 	bcc.w	800ba82 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	61da      	str	r2, [r3, #28]
 800b96e:	2304      	movs	r3, #4
 800b970:	e09a      	b.n	800baa8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	899b      	ldrh	r3, [r3, #12]
 800b976:	461a      	mov	r2, r3
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	8952      	ldrh	r2, [r2, #10]
 800b982:	3a01      	subs	r2, #1
 800b984:	4013      	ands	r3, r2
 800b986:	2b00      	cmp	r3, #0
 800b988:	d17b      	bne.n	800ba82 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	4619      	mov	r1, r3
 800b992:	4610      	mov	r0, r2
 800b994:	f7ff fc0b 	bl	800b1ae <get_fat>
 800b998:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d801      	bhi.n	800b9a4 <dir_next+0xa0>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e081      	b.n	800baa8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9aa:	d101      	bne.n	800b9b0 <dir_next+0xac>
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e07b      	b.n	800baa8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d359      	bcc.n	800ba6e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	61da      	str	r2, [r3, #28]
 800b9c6:	2304      	movs	r3, #4
 800b9c8:	e06e      	b.n	800baa8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	f7ff fe3d 	bl	800b652 <create_chain>
 800b9d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d101      	bne.n	800b9e4 <dir_next+0xe0>
 800b9e0:	2307      	movs	r3, #7
 800b9e2:	e061      	b.n	800baa8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d101      	bne.n	800b9ee <dir_next+0xea>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e05c      	b.n	800baa8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f4:	d101      	bne.n	800b9fa <dir_next+0xf6>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e056      	b.n	800baa8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fad6 	bl	800afac <sync_window>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <dir_next+0x106>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e04e      	b.n	800baa8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	899b      	ldrh	r3, [r3, #12]
 800ba14:	461a      	mov	r2, r3
 800ba16:	2100      	movs	r1, #0
 800ba18:	f7ff f8ff 	bl	800ac1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	6979      	ldr	r1, [r7, #20]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fba4 	bl	800b170 <clust2sect>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba2e:	e012      	b.n	800ba56 <dir_next+0x152>
						fs->wflag = 1;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f7ff fab8 	bl	800afac <sync_window>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <dir_next+0x142>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e030      	b.n	800baa8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	895b      	ldrh	r3, [r3, #10]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d3e6      	bcc.n	800ba30 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba74:	6979      	ldr	r1, [r7, #20]
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff fb7a 	bl	800b170 <clust2sect>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	899b      	ldrh	r3, [r3, #12]
 800ba92:	461a      	mov	r2, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba9a:	fb00 f202 	mul.w	r2, r0, r2
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	18ca      	adds	r2, r1, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bac0:	2100      	movs	r1, #0
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fe95 	bl	800b7f2 <dir_sdi>
 800bac8:	4603      	mov	r3, r0
 800baca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d12b      	bne.n	800bb2a <dir_alloc+0x7a>
		n = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	4619      	mov	r1, r3
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7ff faa9 	bl	800b034 <move_window>
 800bae2:	4603      	mov	r3, r0
 800bae4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d11d      	bne.n	800bb28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a1b      	ldr	r3, [r3, #32]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2be5      	cmp	r3, #229	@ 0xe5
 800baf4:	d004      	beq.n	800bb00 <dir_alloc+0x50>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d107      	bne.n	800bb10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	3301      	adds	r3, #1
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d102      	bne.n	800bb14 <dir_alloc+0x64>
 800bb0e:	e00c      	b.n	800bb2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb10:	2300      	movs	r3, #0
 800bb12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb14:	2101      	movs	r1, #1
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff fef4 	bl	800b904 <dir_next>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0d7      	beq.n	800bad6 <dir_alloc+0x26>
 800bb26:	e000      	b.n	800bb2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d101      	bne.n	800bb34 <dir_alloc+0x84>
 800bb30:	2307      	movs	r3, #7
 800bb32:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	331a      	adds	r3, #26
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe ffc1 	bl	800aad4 <ld_word>
 800bb52:	4603      	mov	r3, r0
 800bb54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d109      	bne.n	800bb72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	3314      	adds	r3, #20
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe ffb6 	bl	800aad4 <ld_word>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	041b      	lsls	r3, r3, #16
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb72:	68fb      	ldr	r3, [r7, #12]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	331a      	adds	r3, #26
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	b292      	uxth	r2, r2
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe ffd9 	bl	800ab4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d109      	bne.n	800bbb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f103 0214 	add.w	r2, r3, #20
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	0c1b      	lsrs	r3, r3, #16
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	4619      	mov	r1, r3
 800bbae:	4610      	mov	r0, r2
 800bbb0:	f7fe ffcb 	bl	800ab4a <st_word>
	}
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bbca:	2100      	movs	r1, #0
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff fe10 	bl	800b7f2 <dir_sdi>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <dir_find+0x24>
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	e03e      	b.n	800bc5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	69db      	ldr	r3, [r3, #28]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6938      	ldr	r0, [r7, #16]
 800bbe8:	f7ff fa24 	bl	800b034 <move_window>
 800bbec:	4603      	mov	r3, r0
 800bbee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d12f      	bne.n	800bc56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d102      	bne.n	800bc0a <dir_find+0x4e>
 800bc04:	2304      	movs	r3, #4
 800bc06:	75fb      	strb	r3, [r7, #23]
 800bc08:	e028      	b.n	800bc5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	330b      	adds	r3, #11
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	330b      	adds	r3, #11
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	f003 0308 	and.w	r3, r3, #8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <dir_find+0x86>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a18      	ldr	r0, [r3, #32]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3324      	adds	r3, #36	@ 0x24
 800bc34:	220b      	movs	r2, #11
 800bc36:	4619      	mov	r1, r3
 800bc38:	f7ff f80a 	bl	800ac50 <mem_cmp>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bc42:	2100      	movs	r1, #0
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fe5d 	bl	800b904 <dir_next>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0c5      	beq.n	800bbe0 <dir_find+0x24>
 800bc54:	e002      	b.n	800bc5c <dir_find+0xa0>
		if (res != FR_OK) break;
 800bc56:	bf00      	nop
 800bc58:	e000      	b.n	800bc5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc5a:	bf00      	nop

	return res;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bc74:	2101      	movs	r1, #1
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff ff1a 	bl	800bab0 <dir_alloc>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d11c      	bne.n	800bcc0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	68b8      	ldr	r0, [r7, #8]
 800bc8e:	f7ff f9d1 	bl	800b034 <move_window>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d111      	bne.n	800bcc0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	2220      	movs	r2, #32
 800bca2:	2100      	movs	r1, #0
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe ffb8 	bl	800ac1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a18      	ldr	r0, [r3, #32]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3324      	adds	r3, #36	@ 0x24
 800bcb2:	220b      	movs	r2, #11
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f7fe ff8f 	bl	800abd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b086      	sub	sp, #24
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d04f      	beq.n	800bd82 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	613b      	str	r3, [r7, #16]
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bcea:	e022      	b.n	800bd32 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a1a      	ldr	r2, [r3, #32]
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	1c59      	adds	r1, r3, #1
 800bcf4:	6179      	str	r1, [r7, #20]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	2b20      	cmp	r3, #32
 800bd00:	d016      	beq.n	800bd30 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	d101      	bne.n	800bd0c <get_fileinfo+0x42>
 800bd08:	23e5      	movs	r3, #229	@ 0xe5
 800bd0a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b09      	cmp	r3, #9
 800bd10:	d106      	bne.n	800bd20 <get_fileinfo+0x56>
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	613a      	str	r2, [r7, #16]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	222e      	movs	r2, #46	@ 0x2e
 800bd1e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	613a      	str	r2, [r7, #16]
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	4413      	add	r3, r2
 800bd2a:	7bfa      	ldrb	r2, [r7, #15]
 800bd2c:	725a      	strb	r2, [r3, #9]
 800bd2e:	e000      	b.n	800bd32 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd30:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2b0a      	cmp	r3, #10
 800bd36:	d9d9      	bls.n	800bcec <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	3309      	adds	r3, #9
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	7ada      	ldrb	r2, [r3, #11]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	331c      	adds	r3, #28
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe fed5 	bl	800ab04 <ld_dword>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	3316      	adds	r3, #22
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fe fecc 	bl	800ab04 <ld_dword>
 800bd6c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	80da      	strh	r2, [r3, #6]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	0c1b      	lsrs	r3, r3, #16
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	809a      	strh	r2, [r3, #4]
 800bd80:	e000      	b.n	800bd84 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd82:	bf00      	nop
}
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3324      	adds	r3, #36	@ 0x24
 800bda0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bda2:	220b      	movs	r2, #11
 800bda4:	2120      	movs	r1, #32
 800bda6:	68b8      	ldr	r0, [r7, #8]
 800bda8:	f7fe ff37 	bl	800ac1a <mem_set>
	si = i = 0; ni = 8;
 800bdac:	2300      	movs	r3, #0
 800bdae:	613b      	str	r3, [r7, #16]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	61fb      	str	r3, [r7, #28]
 800bdb4:	2308      	movs	r3, #8
 800bdb6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	61fa      	str	r2, [r7, #28]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bdc6:	7efb      	ldrb	r3, [r7, #27]
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d94e      	bls.n	800be6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bdcc:	7efb      	ldrb	r3, [r7, #27]
 800bdce:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdd0:	d006      	beq.n	800bde0 <create_name+0x54>
 800bdd2:	7efb      	ldrb	r3, [r7, #27]
 800bdd4:	2b5c      	cmp	r3, #92	@ 0x5c
 800bdd6:	d110      	bne.n	800bdfa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdd8:	e002      	b.n	800bde0 <create_name+0x54>
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	3301      	adds	r3, #1
 800bdde:	61fb      	str	r3, [r7, #28]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	4413      	add	r3, r2
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdea:	d0f6      	beq.n	800bdda <create_name+0x4e>
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b5c      	cmp	r3, #92	@ 0x5c
 800bdf6:	d0f0      	beq.n	800bdda <create_name+0x4e>
			break;
 800bdf8:	e038      	b.n	800be6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdfa:	7efb      	ldrb	r3, [r7, #27]
 800bdfc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdfe:	d003      	beq.n	800be08 <create_name+0x7c>
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	429a      	cmp	r2, r3
 800be06:	d30c      	bcc.n	800be22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2b0b      	cmp	r3, #11
 800be0c:	d002      	beq.n	800be14 <create_name+0x88>
 800be0e:	7efb      	ldrb	r3, [r7, #27]
 800be10:	2b2e      	cmp	r3, #46	@ 0x2e
 800be12:	d001      	beq.n	800be18 <create_name+0x8c>
 800be14:	2306      	movs	r3, #6
 800be16:	e044      	b.n	800bea2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800be18:	2308      	movs	r3, #8
 800be1a:	613b      	str	r3, [r7, #16]
 800be1c:	230b      	movs	r3, #11
 800be1e:	617b      	str	r3, [r7, #20]
			continue;
 800be20:	e022      	b.n	800be68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800be22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be26:	2b00      	cmp	r3, #0
 800be28:	da04      	bge.n	800be34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be2a:	7efb      	ldrb	r3, [r7, #27]
 800be2c:	3b80      	subs	r3, #128	@ 0x80
 800be2e:	4a1f      	ldr	r2, [pc, #124]	@ (800beac <create_name+0x120>)
 800be30:	5cd3      	ldrb	r3, [r2, r3]
 800be32:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be34:	7efb      	ldrb	r3, [r7, #27]
 800be36:	4619      	mov	r1, r3
 800be38:	481d      	ldr	r0, [pc, #116]	@ (800beb0 <create_name+0x124>)
 800be3a:	f7fe ff30 	bl	800ac9e <chk_chr>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <create_name+0xbc>
 800be44:	2306      	movs	r3, #6
 800be46:	e02c      	b.n	800bea2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be48:	7efb      	ldrb	r3, [r7, #27]
 800be4a:	2b60      	cmp	r3, #96	@ 0x60
 800be4c:	d905      	bls.n	800be5a <create_name+0xce>
 800be4e:	7efb      	ldrb	r3, [r7, #27]
 800be50:	2b7a      	cmp	r3, #122	@ 0x7a
 800be52:	d802      	bhi.n	800be5a <create_name+0xce>
 800be54:	7efb      	ldrb	r3, [r7, #27]
 800be56:	3b20      	subs	r3, #32
 800be58:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	613a      	str	r2, [r7, #16]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	4413      	add	r3, r2
 800be64:	7efa      	ldrb	r2, [r7, #27]
 800be66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be68:	e7a6      	b.n	800bdb8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	441a      	add	r2, r3
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <create_name+0xf4>
 800be7c:	2306      	movs	r3, #6
 800be7e:	e010      	b.n	800bea2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2be5      	cmp	r3, #229	@ 0xe5
 800be86:	d102      	bne.n	800be8e <create_name+0x102>
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2205      	movs	r2, #5
 800be8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be8e:	7efb      	ldrb	r3, [r7, #27]
 800be90:	2b20      	cmp	r3, #32
 800be92:	d801      	bhi.n	800be98 <create_name+0x10c>
 800be94:	2204      	movs	r2, #4
 800be96:	e000      	b.n	800be9a <create_name+0x10e>
 800be98:	2200      	movs	r2, #0
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	330b      	adds	r3, #11
 800be9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bea0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3720      	adds	r7, #32
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	0801034c 	.word	0x0801034c
 800beb0:	08010214 	.word	0x08010214

0800beb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bec8:	e002      	b.n	800bed0 <follow_path+0x1c>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bed6:	d0f8      	beq.n	800beca <follow_path+0x16>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b5c      	cmp	r3, #92	@ 0x5c
 800bede:	d0f4      	beq.n	800beca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	2200      	movs	r2, #0
 800bee4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b1f      	cmp	r3, #31
 800beec:	d80a      	bhi.n	800bf04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2280      	movs	r2, #128	@ 0x80
 800bef2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bef6:	2100      	movs	r1, #0
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff fc7a 	bl	800b7f2 <dir_sdi>
 800befe:	4603      	mov	r3, r0
 800bf00:	75fb      	strb	r3, [r7, #23]
 800bf02:	e048      	b.n	800bf96 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf04:	463b      	mov	r3, r7
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff ff3f 	bl	800bd8c <create_name>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d139      	bne.n	800bf8c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7ff fe4f 	bl	800bbbc <dir_find>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bf28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00a      	beq.n	800bf46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	d12c      	bne.n	800bf90 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf36:	7afb      	ldrb	r3, [r7, #11]
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d127      	bne.n	800bf90 <follow_path+0xdc>
 800bf40:	2305      	movs	r3, #5
 800bf42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf44:	e024      	b.n	800bf90 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf46:	7afb      	ldrb	r3, [r7, #11]
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d121      	bne.n	800bf94 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	799b      	ldrb	r3, [r3, #6]
 800bf54:	f003 0310 	and.w	r3, r3, #16
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf5c:	2305      	movs	r3, #5
 800bf5e:	75fb      	strb	r3, [r7, #23]
 800bf60:	e019      	b.n	800bf96 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	8992      	ldrh	r2, [r2, #12]
 800bf70:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf74:	fb00 f202 	mul.w	r2, r0, r2
 800bf78:	1a9b      	subs	r3, r3, r2
 800bf7a:	440b      	add	r3, r1
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff fddd 	bl	800bb3e <ld_clust>
 800bf84:	4602      	mov	r2, r0
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf8a:	e7bb      	b.n	800bf04 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf8c:	bf00      	nop
 800bf8e:	e002      	b.n	800bf96 <follow_path+0xe2>
				break;
 800bf90:	bf00      	nop
 800bf92:	e000      	b.n	800bf96 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf94:	bf00      	nop
			}
		}
	}

	return res;
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b087      	sub	sp, #28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d031      	beq.n	800c01a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	e002      	b.n	800bfc4 <get_ldnumber+0x24>
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d903      	bls.n	800bfd4 <get_ldnumber+0x34>
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2b3a      	cmp	r3, #58	@ 0x3a
 800bfd2:	d1f4      	bne.n	800bfbe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b3a      	cmp	r3, #58	@ 0x3a
 800bfda:	d11c      	bne.n	800c016 <get_ldnumber+0x76>
			tp = *path;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	60fa      	str	r2, [r7, #12]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	3b30      	subs	r3, #48	@ 0x30
 800bfec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b09      	cmp	r3, #9
 800bff2:	d80e      	bhi.n	800c012 <get_ldnumber+0x72>
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d10a      	bne.n	800c012 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d107      	bne.n	800c012 <get_ldnumber+0x72>
					vol = (int)i;
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	3301      	adds	r3, #1
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	e002      	b.n	800c01c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c016:	2300      	movs	r3, #0
 800c018:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c01a:	693b      	ldr	r3, [r7, #16]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	371c      	adds	r7, #28
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	70da      	strb	r2, [r3, #3]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f04f 32ff 	mov.w	r2, #4294967295
 800c03e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7fe fff6 	bl	800b034 <move_window>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <check_fs+0x2a>
 800c04e:	2304      	movs	r3, #4
 800c050:	e038      	b.n	800c0c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3334      	adds	r3, #52	@ 0x34
 800c056:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe fd3a 	bl	800aad4 <ld_word>
 800c060:	4603      	mov	r3, r0
 800c062:	461a      	mov	r2, r3
 800c064:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c068:	429a      	cmp	r2, r3
 800c06a:	d001      	beq.n	800c070 <check_fs+0x48>
 800c06c:	2303      	movs	r3, #3
 800c06e:	e029      	b.n	800c0c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c076:	2be9      	cmp	r3, #233	@ 0xe9
 800c078:	d009      	beq.n	800c08e <check_fs+0x66>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c080:	2beb      	cmp	r3, #235	@ 0xeb
 800c082:	d11e      	bne.n	800c0c2 <check_fs+0x9a>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c08a:	2b90      	cmp	r3, #144	@ 0x90
 800c08c:	d119      	bne.n	800c0c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3334      	adds	r3, #52	@ 0x34
 800c092:	3336      	adds	r3, #54	@ 0x36
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe fd35 	bl	800ab04 <ld_dword>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c0cc <check_fs+0xa4>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d101      	bne.n	800c0aa <check_fs+0x82>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	e00c      	b.n	800c0c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3334      	adds	r3, #52	@ 0x34
 800c0ae:	3352      	adds	r3, #82	@ 0x52
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fe fd27 	bl	800ab04 <ld_dword>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	4a05      	ldr	r2, [pc, #20]	@ (800c0d0 <check_fs+0xa8>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d101      	bne.n	800c0c2 <check_fs+0x9a>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e000      	b.n	800c0c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c0c2:	2302      	movs	r3, #2
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	00544146 	.word	0x00544146
 800c0d0:	33544146 	.word	0x33544146

0800c0d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b096      	sub	sp, #88	@ 0x58
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f7ff ff59 	bl	800bfa0 <get_ldnumber>
 800c0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	da01      	bge.n	800c0fa <find_volume+0x26>
 800c0f6:	230b      	movs	r3, #11
 800c0f8:	e262      	b.n	800c5c0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0fa:	4a9f      	ldr	r2, [pc, #636]	@ (800c378 <find_volume+0x2a4>)
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c102:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <find_volume+0x3a>
 800c10a:	230c      	movs	r3, #12
 800c10c:	e258      	b.n	800c5c0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c112:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	f023 0301 	bic.w	r3, r3, #1
 800c11a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d01a      	beq.n	800c15a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c126:	785b      	ldrb	r3, [r3, #1]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fc35 	bl	800a998 <disk_status>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c134:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10c      	bne.n	800c15a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c140:	79fb      	ldrb	r3, [r7, #7]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <find_volume+0x82>
 800c146:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c152:	230a      	movs	r3, #10
 800c154:	e234      	b.n	800c5c0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c156:	2300      	movs	r3, #0
 800c158:	e232      	b.n	800c5c0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15c:	2200      	movs	r2, #0
 800c15e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c162:	b2da      	uxtb	r2, r3
 800c164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c166:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fc2d 	bl	800a9cc <disk_initialize>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c178:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c184:	2303      	movs	r3, #3
 800c186:	e21b      	b.n	800c5c0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d007      	beq.n	800c19e <find_volume+0xca>
 800c18e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c192:	f003 0304 	and.w	r3, r3, #4
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c19a:	230a      	movs	r3, #10
 800c19c:	e210      	b.n	800c5c0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	7858      	ldrb	r0, [r3, #1]
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a4:	330c      	adds	r3, #12
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	2102      	movs	r1, #2
 800c1aa:	f7fe fc75 	bl	800aa98 <disk_ioctl>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <find_volume+0xe4>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e203      	b.n	800c5c0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ba:	899b      	ldrh	r3, [r3, #12]
 800c1bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1c0:	d80d      	bhi.n	800c1de <find_volume+0x10a>
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	899b      	ldrh	r3, [r3, #12]
 800c1c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1ca:	d308      	bcc.n	800c1de <find_volume+0x10a>
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	899b      	ldrh	r3, [r3, #12]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d4:	899b      	ldrh	r3, [r3, #12]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <find_volume+0x10e>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e1ee      	b.n	800c5c0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c1e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1ea:	f7ff ff1d 	bl	800c028 <check_fs>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d149      	bne.n	800c290 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800c200:	e01e      	b.n	800c240 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c204:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c20a:	011b      	lsls	r3, r3, #4
 800c20c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c210:	4413      	add	r3, r2
 800c212:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c216:	3304      	adds	r3, #4
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d006      	beq.n	800c22c <find_volume+0x158>
 800c21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c220:	3308      	adds	r3, #8
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe fc6e 	bl	800ab04 <ld_dword>
 800c228:	4602      	mov	r2, r0
 800c22a:	e000      	b.n	800c22e <find_volume+0x15a>
 800c22c:	2200      	movs	r2, #0
 800c22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	3358      	adds	r3, #88	@ 0x58
 800c234:	443b      	add	r3, r7
 800c236:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c23c:	3301      	adds	r3, #1
 800c23e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c242:	2b03      	cmp	r3, #3
 800c244:	d9dd      	bls.n	800c202 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c246:	2300      	movs	r3, #0
 800c248:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c24a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <find_volume+0x182>
 800c250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c252:	3b01      	subs	r3, #1
 800c254:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	3358      	adds	r3, #88	@ 0x58
 800c25c:	443b      	add	r3, r7
 800c25e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c262:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c266:	2b00      	cmp	r3, #0
 800c268:	d005      	beq.n	800c276 <find_volume+0x1a2>
 800c26a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c26c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c26e:	f7ff fedb 	bl	800c028 <check_fs>
 800c272:	4603      	mov	r3, r0
 800c274:	e000      	b.n	800c278 <find_volume+0x1a4>
 800c276:	2303      	movs	r3, #3
 800c278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c27c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c280:	2b01      	cmp	r3, #1
 800c282:	d905      	bls.n	800c290 <find_volume+0x1bc>
 800c284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c286:	3301      	adds	r3, #1
 800c288:	643b      	str	r3, [r7, #64]	@ 0x40
 800c28a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d9e2      	bls.n	800c256 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c290:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c294:	2b04      	cmp	r3, #4
 800c296:	d101      	bne.n	800c29c <find_volume+0x1c8>
 800c298:	2301      	movs	r3, #1
 800c29a:	e191      	b.n	800c5c0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c29c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d901      	bls.n	800c2a8 <find_volume+0x1d4>
 800c2a4:	230d      	movs	r3, #13
 800c2a6:	e18b      	b.n	800c5c0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	3334      	adds	r3, #52	@ 0x34
 800c2ac:	330b      	adds	r3, #11
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe fc10 	bl	800aad4 <ld_word>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ba:	899b      	ldrh	r3, [r3, #12]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d001      	beq.n	800c2c4 <find_volume+0x1f0>
 800c2c0:	230d      	movs	r3, #13
 800c2c2:	e17d      	b.n	800c5c0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c6:	3334      	adds	r3, #52	@ 0x34
 800c2c8:	3316      	adds	r3, #22
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fc02 	bl	800aad4 <ld_word>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c2d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d106      	bne.n	800c2e8 <find_volume+0x214>
 800c2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2dc:	3334      	adds	r3, #52	@ 0x34
 800c2de:	3324      	adds	r3, #36	@ 0x24
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe fc0f 	bl	800ab04 <ld_dword>
 800c2e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fa:	789b      	ldrb	r3, [r3, #2]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d005      	beq.n	800c30c <find_volume+0x238>
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	789b      	ldrb	r3, [r3, #2]
 800c304:	2b02      	cmp	r3, #2
 800c306:	d001      	beq.n	800c30c <find_volume+0x238>
 800c308:	230d      	movs	r3, #13
 800c30a:	e159      	b.n	800c5c0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	789b      	ldrb	r3, [r3, #2]
 800c310:	461a      	mov	r2, r3
 800c312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c314:	fb02 f303 	mul.w	r3, r2, r3
 800c318:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c320:	461a      	mov	r2, r3
 800c322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c324:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c328:	895b      	ldrh	r3, [r3, #10]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d008      	beq.n	800c340 <find_volume+0x26c>
 800c32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c330:	895b      	ldrh	r3, [r3, #10]
 800c332:	461a      	mov	r2, r3
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	895b      	ldrh	r3, [r3, #10]
 800c338:	3b01      	subs	r3, #1
 800c33a:	4013      	ands	r3, r2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <find_volume+0x270>
 800c340:	230d      	movs	r3, #13
 800c342:	e13d      	b.n	800c5c0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	3334      	adds	r3, #52	@ 0x34
 800c348:	3311      	adds	r3, #17
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe fbc2 	bl	800aad4 <ld_word>
 800c350:	4603      	mov	r3, r0
 800c352:	461a      	mov	r2, r3
 800c354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c356:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35a:	891b      	ldrh	r3, [r3, #8]
 800c35c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c35e:	8992      	ldrh	r2, [r2, #12]
 800c360:	0952      	lsrs	r2, r2, #5
 800c362:	b292      	uxth	r2, r2
 800c364:	fbb3 f1f2 	udiv	r1, r3, r2
 800c368:	fb01 f202 	mul.w	r2, r1, r2
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	b29b      	uxth	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <find_volume+0x2a8>
 800c374:	230d      	movs	r3, #13
 800c376:	e123      	b.n	800c5c0 <find_volume+0x4ec>
 800c378:	20005680 	.word	0x20005680

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37e:	3334      	adds	r3, #52	@ 0x34
 800c380:	3313      	adds	r3, #19
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe fba6 	bl	800aad4 <ld_word>
 800c388:	4603      	mov	r3, r0
 800c38a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c38c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <find_volume+0x2cc>
 800c392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c394:	3334      	adds	r3, #52	@ 0x34
 800c396:	3320      	adds	r3, #32
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe fbb3 	bl	800ab04 <ld_dword>
 800c39e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a2:	3334      	adds	r3, #52	@ 0x34
 800c3a4:	330e      	adds	r3, #14
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe fb94 	bl	800aad4 <ld_word>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c3b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <find_volume+0x2e6>
 800c3b6:	230d      	movs	r3, #13
 800c3b8:	e102      	b.n	800c5c0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c3ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c3bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3be:	4413      	add	r3, r2
 800c3c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3c2:	8911      	ldrh	r1, [r2, #8]
 800c3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3c6:	8992      	ldrh	r2, [r2, #12]
 800c3c8:	0952      	lsrs	r2, r2, #5
 800c3ca:	b292      	uxth	r2, r2
 800c3cc:	fbb1 f2f2 	udiv	r2, r1, r2
 800c3d0:	b292      	uxth	r2, r2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c3d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d201      	bcs.n	800c3e2 <find_volume+0x30e>
 800c3de:	230d      	movs	r3, #13
 800c3e0:	e0ee      	b.n	800c5c0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c3e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3ea:	8952      	ldrh	r2, [r2, #10]
 800c3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <find_volume+0x328>
 800c3f8:	230d      	movs	r3, #13
 800c3fa:	e0e1      	b.n	800c5c0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c404:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c408:	4293      	cmp	r3, r2
 800c40a:	d802      	bhi.n	800c412 <find_volume+0x33e>
 800c40c:	2302      	movs	r3, #2
 800c40e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c418:	4293      	cmp	r3, r2
 800c41a:	d802      	bhi.n	800c422 <find_volume+0x34e>
 800c41c:	2301      	movs	r3, #1
 800c41e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c424:	1c9a      	adds	r2, r3, #2
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c42e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c430:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c434:	441a      	add	r2, r3
 800c436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c438:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c43a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	441a      	add	r2, r3
 800c440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c442:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c444:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c448:	2b03      	cmp	r3, #3
 800c44a:	d11e      	bne.n	800c48a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44e:	3334      	adds	r3, #52	@ 0x34
 800c450:	332a      	adds	r3, #42	@ 0x2a
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fb3e 	bl	800aad4 <ld_word>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <find_volume+0x38e>
 800c45e:	230d      	movs	r3, #13
 800c460:	e0ae      	b.n	800c5c0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	891b      	ldrh	r3, [r3, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <find_volume+0x39a>
 800c46a:	230d      	movs	r3, #13
 800c46c:	e0a8      	b.n	800c5c0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c470:	3334      	adds	r3, #52	@ 0x34
 800c472:	332c      	adds	r3, #44	@ 0x2c
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fb45 	bl	800ab04 <ld_dword>
 800c47a:	4602      	mov	r2, r0
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	647b      	str	r3, [r7, #68]	@ 0x44
 800c488:	e01f      	b.n	800c4ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48c:	891b      	ldrh	r3, [r3, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <find_volume+0x3c2>
 800c492:	230d      	movs	r3, #13
 800c494:	e094      	b.n	800c5c0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c49a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c49c:	441a      	add	r2, r3
 800c49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c4a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d103      	bne.n	800c4b2 <find_volume+0x3de>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	e00a      	b.n	800c4c8 <find_volume+0x3f4>
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b4:	699a      	ldr	r2, [r3, #24]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4413      	add	r3, r2
 800c4bc:	085a      	lsrs	r2, r3, #1
 800c4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c4c8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4cc:	69da      	ldr	r2, [r3, #28]
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d0:	899b      	ldrh	r3, [r3, #12]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4d6:	440b      	add	r3, r1
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c4dc:	8989      	ldrh	r1, [r1, #12]
 800c4de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d201      	bcs.n	800c4ea <find_volume+0x416>
 800c4e6:	230d      	movs	r3, #13
 800c4e8:	e06a      	b.n	800c5c0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f0:	615a      	str	r2, [r3, #20]
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f4:	695a      	ldr	r2, [r3, #20]
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fc:	2280      	movs	r2, #128	@ 0x80
 800c4fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c500:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c504:	2b03      	cmp	r3, #3
 800c506:	d149      	bne.n	800c59c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50a:	3334      	adds	r3, #52	@ 0x34
 800c50c:	3330      	adds	r3, #48	@ 0x30
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fe fae0 	bl	800aad4 <ld_word>
 800c514:	4603      	mov	r3, r0
 800c516:	2b01      	cmp	r3, #1
 800c518:	d140      	bne.n	800c59c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c51a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c51c:	3301      	adds	r3, #1
 800c51e:	4619      	mov	r1, r3
 800c520:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c522:	f7fe fd87 	bl	800b034 <move_window>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d137      	bne.n	800c59c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52e:	2200      	movs	r2, #0
 800c530:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c534:	3334      	adds	r3, #52	@ 0x34
 800c536:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fe faca 	bl	800aad4 <ld_word>
 800c540:	4603      	mov	r3, r0
 800c542:	461a      	mov	r2, r3
 800c544:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c548:	429a      	cmp	r2, r3
 800c54a:	d127      	bne.n	800c59c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	3334      	adds	r3, #52	@ 0x34
 800c550:	4618      	mov	r0, r3
 800c552:	f7fe fad7 	bl	800ab04 <ld_dword>
 800c556:	4603      	mov	r3, r0
 800c558:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c8 <find_volume+0x4f4>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d11e      	bne.n	800c59c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c560:	3334      	adds	r3, #52	@ 0x34
 800c562:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe facc 	bl	800ab04 <ld_dword>
 800c56c:	4603      	mov	r3, r0
 800c56e:	4a17      	ldr	r2, [pc, #92]	@ (800c5cc <find_volume+0x4f8>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d113      	bne.n	800c59c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	3334      	adds	r3, #52	@ 0x34
 800c578:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fe fac1 	bl	800ab04 <ld_dword>
 800c582:	4602      	mov	r2, r0
 800c584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c586:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58a:	3334      	adds	r3, #52	@ 0x34
 800c58c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe fab7 	bl	800ab04 <ld_dword>
 800c596:	4602      	mov	r2, r0
 800c598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c5a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d0 <find_volume+0x4fc>)
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	4b08      	ldr	r3, [pc, #32]	@ (800c5d0 <find_volume+0x4fc>)
 800c5ae:	801a      	strh	r2, [r3, #0]
 800c5b0:	4b07      	ldr	r3, [pc, #28]	@ (800c5d0 <find_volume+0x4fc>)
 800c5b2:	881a      	ldrh	r2, [r3, #0]
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c5b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c5ba:	f7fe fcd3 	bl	800af64 <clear_lock>
#endif
	return FR_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3758      	adds	r7, #88	@ 0x58
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	41615252 	.word	0x41615252
 800c5cc:	61417272 	.word	0x61417272
 800c5d0:	20005684 	.word	0x20005684

0800c5d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c5de:	2309      	movs	r3, #9
 800c5e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01c      	beq.n	800c622 <validate+0x4e>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d018      	beq.n	800c622 <validate+0x4e>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d013      	beq.n	800c622 <validate+0x4e>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	889a      	ldrh	r2, [r3, #4]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	429a      	cmp	r2, r3
 800c606:	d10c      	bne.n	800c622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe f9c2 	bl	800a998 <disk_status>
 800c614:	4603      	mov	r3, r0
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <validate+0x4e>
			res = FR_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <validate+0x5a>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	e000      	b.n	800c630 <validate+0x5c>
 800c62e:	2300      	movs	r3, #0
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	6013      	str	r3, [r2, #0]
	return res;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4613      	mov	r3, r2
 800c64c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c652:	f107 0310 	add.w	r3, r7, #16
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fca2 	bl	800bfa0 <get_ldnumber>
 800c65c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	2b00      	cmp	r3, #0
 800c662:	da01      	bge.n	800c668 <f_mount+0x28>
 800c664:	230b      	movs	r3, #11
 800c666:	e02b      	b.n	800c6c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c668:	4a17      	ldr	r2, [pc, #92]	@ (800c6c8 <f_mount+0x88>)
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d005      	beq.n	800c684 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c678:	69b8      	ldr	r0, [r7, #24]
 800c67a:	f7fe fc73 	bl	800af64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2200      	movs	r2, #0
 800c682:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	490d      	ldr	r1, [pc, #52]	@ (800c6c8 <f_mount+0x88>)
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <f_mount+0x66>
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d001      	beq.n	800c6aa <f_mount+0x6a>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e00a      	b.n	800c6c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c6aa:	f107 010c 	add.w	r1, r7, #12
 800c6ae:	f107 0308 	add.w	r3, r7, #8
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff fd0d 	bl	800c0d4 <find_volume>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20005680 	.word	0x20005680

0800c6cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b098      	sub	sp, #96	@ 0x60
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d101      	bne.n	800c6e4 <f_open+0x18>
 800c6e0:	2309      	movs	r3, #9
 800c6e2:	e1b7      	b.n	800ca54 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c6ec:	79fa      	ldrb	r2, [r7, #7]
 800c6ee:	f107 0110 	add.w	r1, r7, #16
 800c6f2:	f107 0308 	add.w	r3, r7, #8
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff fcec 	bl	800c0d4 <find_volume>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 819b 	bne.w	800ca42 <f_open+0x376>
		dj.obj.fs = fs;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	f107 0314 	add.w	r3, r7, #20
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fbcb 	bl	800beb4 <follow_path>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c724:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d118      	bne.n	800c75e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c72c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c730:	b25b      	sxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	da03      	bge.n	800c73e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c736:	2306      	movs	r3, #6
 800c738:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c73c:	e00f      	b.n	800c75e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c73e:	79fb      	ldrb	r3, [r7, #7]
 800c740:	2b01      	cmp	r3, #1
 800c742:	bf8c      	ite	hi
 800c744:	2301      	movhi	r3, #1
 800c746:	2300      	movls	r3, #0
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	461a      	mov	r2, r3
 800c74c:	f107 0314 	add.w	r3, r7, #20
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f7fe fabe 	bl	800acd4 <chk_lock>
 800c758:	4603      	mov	r3, r0
 800c75a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	f003 031c 	and.w	r3, r3, #28
 800c764:	2b00      	cmp	r3, #0
 800c766:	d07f      	beq.n	800c868 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d017      	beq.n	800c7a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c770:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c774:	2b04      	cmp	r3, #4
 800c776:	d10e      	bne.n	800c796 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c778:	f7fe fb08 	bl	800ad8c <enq_lock>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d006      	beq.n	800c790 <f_open+0xc4>
 800c782:	f107 0314 	add.w	r3, r7, #20
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff fa6d 	bl	800bc66 <dir_register>
 800c78c:	4603      	mov	r3, r0
 800c78e:	e000      	b.n	800c792 <f_open+0xc6>
 800c790:	2312      	movs	r3, #18
 800c792:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	f043 0308 	orr.w	r3, r3, #8
 800c79c:	71fb      	strb	r3, [r7, #7]
 800c79e:	e010      	b.n	800c7c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c7a0:	7ebb      	ldrb	r3, [r7, #26]
 800c7a2:	f003 0311 	and.w	r3, r3, #17
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <f_open+0xe6>
					res = FR_DENIED;
 800c7aa:	2307      	movs	r3, #7
 800c7ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c7b0:	e007      	b.n	800c7c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <f_open+0xf6>
 800c7bc:	2308      	movs	r3, #8
 800c7be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c7c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d168      	bne.n	800c89c <f_open+0x1d0>
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	f003 0308 	and.w	r3, r3, #8
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d063      	beq.n	800c89c <f_open+0x1d0>
				dw = GET_FATTIME();
 800c7d4:	f7fd ff74 	bl	800a6c0 <get_fattime>
 800c7d8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7dc:	330e      	adds	r3, #14
 800c7de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe f9cd 	bl	800ab80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e8:	3316      	adds	r3, #22
 800c7ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe f9c7 	bl	800ab80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f4:	330b      	adds	r3, #11
 800c7f6:	2220      	movs	r2, #32
 800c7f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7fe:	4611      	mov	r1, r2
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff f99c 	bl	800bb3e <ld_clust>
 800c806:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c80c:	2200      	movs	r2, #0
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff f9b4 	bl	800bb7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c816:	331c      	adds	r3, #28
 800c818:	2100      	movs	r1, #0
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe f9b0 	bl	800ab80 <st_dword>
					fs->wflag = 1;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	2201      	movs	r2, #1
 800c824:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d037      	beq.n	800c89c <f_open+0x1d0>
						dw = fs->winsect;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c830:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c832:	f107 0314 	add.w	r3, r7, #20
 800c836:	2200      	movs	r2, #0
 800c838:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fea4 	bl	800b588 <remove_chain>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d126      	bne.n	800c89c <f_open+0x1d0>
							res = move_window(fs, dw);
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fbee 	bl	800b034 <move_window>
 800c858:	4603      	mov	r3, r0
 800c85a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c862:	3a01      	subs	r2, #1
 800c864:	611a      	str	r2, [r3, #16]
 800c866:	e019      	b.n	800c89c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c868:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d115      	bne.n	800c89c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c870:	7ebb      	ldrb	r3, [r7, #26]
 800c872:	f003 0310 	and.w	r3, r3, #16
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c87a:	2304      	movs	r3, #4
 800c87c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c880:	e00c      	b.n	800c89c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	f003 0302 	and.w	r3, r3, #2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d007      	beq.n	800c89c <f_open+0x1d0>
 800c88c:	7ebb      	ldrb	r3, [r7, #26]
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <f_open+0x1d0>
						res = FR_DENIED;
 800c896:	2307      	movs	r3, #7
 800c898:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c89c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d126      	bne.n	800c8f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c8a4:	79fb      	ldrb	r3, [r7, #7]
 800c8a6:	f003 0308 	and.w	r3, r3, #8
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c8be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	bf8c      	ite	hi
 800c8ca:	2301      	movhi	r3, #1
 800c8cc:	2300      	movls	r3, #0
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	f107 0314 	add.w	r3, r7, #20
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fe fa79 	bl	800add0 <inc_lock>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d102      	bne.n	800c8f2 <f_open+0x226>
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f040 80a3 	bne.w	800ca42 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff f91b 	bl	800bb3e <ld_clust>
 800c908:	4602      	mov	r2, r0
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c910:	331c      	adds	r3, #28
 800c912:	4618      	mov	r0, r3
 800c914:	f7fe f8f6 	bl	800ab04 <ld_dword>
 800c918:	4602      	mov	r2, r0
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	88da      	ldrh	r2, [r3, #6]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	79fa      	ldrb	r2, [r7, #7]
 800c936:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3330      	adds	r3, #48	@ 0x30
 800c94e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c952:	2100      	movs	r1, #0
 800c954:	4618      	mov	r0, r3
 800c956:	f7fe f960 	bl	800ac1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c95a:	79fb      	ldrb	r3, [r7, #7]
 800c95c:	f003 0320 	and.w	r3, r3, #32
 800c960:	2b00      	cmp	r3, #0
 800c962:	d06e      	beq.n	800ca42 <f_open+0x376>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d06a      	beq.n	800ca42 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	895b      	ldrh	r3, [r3, #10]
 800c978:	461a      	mov	r2, r3
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	899b      	ldrh	r3, [r3, #12]
 800c97e:	fb02 f303 	mul.w	r3, r2, r3
 800c982:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c990:	e016      	b.n	800c9c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fc09 	bl	800b1ae <get_fat>
 800c99c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c99e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d802      	bhi.n	800c9aa <f_open+0x2de>
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c9aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d102      	bne.n	800c9b8 <f_open+0x2ec>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <f_open+0x304>
 800c9c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d8e0      	bhi.n	800c992 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c9d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d131      	bne.n	800ca42 <f_open+0x376>
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	899b      	ldrh	r3, [r3, #12]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9ea:	fb01 f202 	mul.w	r2, r1, r2
 800c9ee:	1a9b      	subs	r3, r3, r2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d026      	beq.n	800ca42 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe fbb9 	bl	800b170 <clust2sect>
 800c9fe:	6478      	str	r0, [r7, #68]	@ 0x44
 800ca00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d103      	bne.n	800ca0e <f_open+0x342>
						res = FR_INT_ERR;
 800ca06:	2302      	movs	r3, #2
 800ca08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca0c:	e019      	b.n	800ca42 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	899b      	ldrh	r3, [r3, #12]
 800ca12:	461a      	mov	r2, r3
 800ca14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca16:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca1c:	441a      	add	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	7858      	ldrb	r0, [r3, #1]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6a1a      	ldr	r2, [r3, #32]
 800ca30:	2301      	movs	r3, #1
 800ca32:	f7fd fff1 	bl	800aa18 <disk_read>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <f_open+0x376>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ca42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d002      	beq.n	800ca50 <f_open+0x384>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3760      	adds	r7, #96	@ 0x60
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b08e      	sub	sp, #56	@ 0x38
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f107 0214 	add.w	r2, r7, #20
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7ff fda9 	bl	800c5d4 <validate>
 800ca82:	4603      	mov	r3, r0
 800ca84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d107      	bne.n	800caa0 <f_read+0x44>
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	7d5b      	ldrb	r3, [r3, #21]
 800ca94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ca98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <f_read+0x4a>
 800caa0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caa4:	e135      	b.n	800cd12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	7d1b      	ldrb	r3, [r3, #20]
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <f_read+0x5a>
 800cab2:	2307      	movs	r3, #7
 800cab4:	e12d      	b.n	800cd12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	68da      	ldr	r2, [r3, #12]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	6a3b      	ldr	r3, [r7, #32]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	f240 811e 	bls.w	800cd08 <f_read+0x2ac>
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cad0:	e11a      	b.n	800cd08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	8992      	ldrh	r2, [r2, #12]
 800cada:	fbb3 f1f2 	udiv	r1, r3, r2
 800cade:	fb01 f202 	mul.w	r2, r1, r2
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f040 80d5 	bne.w	800cc94 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	8992      	ldrh	r2, [r2, #12]
 800caf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	8952      	ldrh	r2, [r2, #10]
 800cafa:	3a01      	subs	r2, #1
 800cafc:	4013      	ands	r3, r2
 800cafe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d12f      	bne.n	800cb66 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d103      	bne.n	800cb16 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb14:	e013      	b.n	800cb3e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d007      	beq.n	800cb2e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	4619      	mov	r1, r3
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f7fe fe2c 	bl	800b782 <clmt_clust>
 800cb2a:	6338      	str	r0, [r7, #48]	@ 0x30
 800cb2c:	e007      	b.n	800cb3e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	69db      	ldr	r3, [r3, #28]
 800cb34:	4619      	mov	r1, r3
 800cb36:	4610      	mov	r0, r2
 800cb38:	f7fe fb39 	bl	800b1ae <get_fat>
 800cb3c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d804      	bhi.n	800cb4e <f_read+0xf2>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2202      	movs	r2, #2
 800cb48:	755a      	strb	r2, [r3, #21]
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e0e1      	b.n	800cd12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb54:	d104      	bne.n	800cb60 <f_read+0x104>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	755a      	strb	r2, [r3, #21]
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e0d8      	b.n	800cd12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	69db      	ldr	r3, [r3, #28]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	4610      	mov	r0, r2
 800cb70:	f7fe fafe 	bl	800b170 <clust2sect>
 800cb74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d104      	bne.n	800cb86 <f_read+0x12a>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2202      	movs	r2, #2
 800cb80:	755a      	strb	r2, [r3, #21]
 800cb82:	2302      	movs	r3, #2
 800cb84:	e0c5      	b.n	800cd12 <f_read+0x2b6>
			sect += csect;
 800cb86:	69ba      	ldr	r2, [r7, #24]
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	899b      	ldrh	r3, [r3, #12]
 800cb92:	461a      	mov	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb9a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d041      	beq.n	800cc26 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cba2:	69fa      	ldr	r2, [r7, #28]
 800cba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba6:	4413      	add	r3, r2
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	8952      	ldrh	r2, [r2, #10]
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d905      	bls.n	800cbbc <f_read+0x160>
					cc = fs->csize - csect;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	895b      	ldrh	r3, [r3, #10]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	7858      	ldrb	r0, [r3, #1]
 800cbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc2:	69ba      	ldr	r2, [r7, #24]
 800cbc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cbc6:	f7fd ff27 	bl	800aa18 <disk_read>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d004      	beq.n	800cbda <f_read+0x17e>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	755a      	strb	r2, [r3, #21]
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e09b      	b.n	800cd12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	7d1b      	ldrb	r3, [r3, #20]
 800cbde:	b25b      	sxtb	r3, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	da18      	bge.n	800cc16 <f_read+0x1ba>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6a1a      	ldr	r2, [r3, #32]
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d911      	bls.n	800cc16 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6a1a      	ldr	r2, [r3, #32]
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	8992      	ldrh	r2, [r2, #12]
 800cbfe:	fb02 f303 	mul.w	r3, r2, r3
 800cc02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc04:	18d0      	adds	r0, r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	899b      	ldrh	r3, [r3, #12]
 800cc10:	461a      	mov	r2, r3
 800cc12:	f7fd ffe1 	bl	800abd8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	899b      	ldrh	r3, [r3, #12]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1e:	fb02 f303 	mul.w	r3, r2, r3
 800cc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cc24:	e05c      	b.n	800cce0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	69ba      	ldr	r2, [r7, #24]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d02e      	beq.n	800cc8e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	7d1b      	ldrb	r3, [r3, #20]
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da18      	bge.n	800cc6c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	7858      	ldrb	r0, [r3, #1]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6a1a      	ldr	r2, [r3, #32]
 800cc48:	2301      	movs	r3, #1
 800cc4a:	f7fd ff05 	bl	800aa58 <disk_write>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d004      	beq.n	800cc5e <f_read+0x202>
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2201      	movs	r2, #1
 800cc58:	755a      	strb	r2, [r3, #21]
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e059      	b.n	800cd12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	7d1b      	ldrb	r3, [r3, #20]
 800cc62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	7858      	ldrb	r0, [r3, #1]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc76:	2301      	movs	r3, #1
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	f7fd fecd 	bl	800aa18 <disk_read>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <f_read+0x232>
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2201      	movs	r2, #1
 800cc88:	755a      	strb	r2, [r3, #21]
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e041      	b.n	800cd12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	69ba      	ldr	r2, [r7, #24]
 800cc92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	899b      	ldrh	r3, [r3, #12]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	8992      	ldrh	r2, [r2, #12]
 800cca2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cca6:	fb01 f202 	mul.w	r2, r1, r2
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	1ac3      	subs	r3, r0, r3
 800ccae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ccb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d901      	bls.n	800ccbc <f_read+0x260>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	697a      	ldr	r2, [r7, #20]
 800ccc8:	8992      	ldrh	r2, [r2, #12]
 800ccca:	fbb3 f0f2 	udiv	r0, r3, r2
 800ccce:	fb00 f202 	mul.w	r2, r0, r2
 800ccd2:	1a9b      	subs	r3, r3, r2
 800ccd4:	440b      	add	r3, r1
 800ccd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ccdc:	f7fd ff7c 	bl	800abd8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce4:	4413      	add	r3, r2
 800cce6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	699a      	ldr	r2, [r3, #24]
 800ccec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccee:	441a      	add	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	619a      	str	r2, [r3, #24]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfa:	441a      	add	r2, r3
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f47f aee1 	bne.w	800cad2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3738      	adds	r7, #56	@ 0x38
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b08c      	sub	sp, #48	@ 0x30
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	60b9      	str	r1, [r7, #8]
 800cd24:	607a      	str	r2, [r7, #4]
 800cd26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f107 0210 	add.w	r2, r7, #16
 800cd38:	4611      	mov	r1, r2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fc4a 	bl	800c5d4 <validate>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d107      	bne.n	800cd5e <f_write+0x44>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	7d5b      	ldrb	r3, [r3, #21]
 800cd52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cd56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <f_write+0x4a>
 800cd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd62:	e16a      	b.n	800d03a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	7d1b      	ldrb	r3, [r3, #20]
 800cd68:	f003 0302 	and.w	r3, r3, #2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <f_write+0x5a>
 800cd70:	2307      	movs	r3, #7
 800cd72:	e162      	b.n	800d03a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	699a      	ldr	r2, [r3, #24]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	441a      	add	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	f080 814c 	bcs.w	800d01e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	43db      	mvns	r3, r3
 800cd8c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cd8e:	e146      	b.n	800d01e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	693a      	ldr	r2, [r7, #16]
 800cd96:	8992      	ldrh	r2, [r2, #12]
 800cd98:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd9c:	fb01 f202 	mul.w	r2, r1, r2
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f040 80f1 	bne.w	800cf8a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	8992      	ldrh	r2, [r2, #12]
 800cdb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	8952      	ldrh	r2, [r2, #10]
 800cdb8:	3a01      	subs	r2, #1
 800cdba:	4013      	ands	r3, r2
 800cdbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d143      	bne.n	800ce4c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10c      	bne.n	800cde6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11a      	bne.n	800ce0e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2100      	movs	r1, #0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fc38 	bl	800b652 <create_chain>
 800cde2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cde4:	e013      	b.n	800ce0e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d007      	beq.n	800cdfe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7fe fcc4 	bl	800b782 <clmt_clust>
 800cdfa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cdfc:	e007      	b.n	800ce0e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	69db      	ldr	r3, [r3, #28]
 800ce04:	4619      	mov	r1, r3
 800ce06:	4610      	mov	r0, r2
 800ce08:	f7fe fc23 	bl	800b652 <create_chain>
 800ce0c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 8109 	beq.w	800d028 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d104      	bne.n	800ce26 <f_write+0x10c>
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2202      	movs	r2, #2
 800ce20:	755a      	strb	r2, [r3, #21]
 800ce22:	2302      	movs	r3, #2
 800ce24:	e109      	b.n	800d03a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d104      	bne.n	800ce38 <f_write+0x11e>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2201      	movs	r2, #1
 800ce32:	755a      	strb	r2, [r3, #21]
 800ce34:	2301      	movs	r3, #1
 800ce36:	e100      	b.n	800d03a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d102      	bne.n	800ce4c <f_write+0x132>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	7d1b      	ldrb	r3, [r3, #20]
 800ce50:	b25b      	sxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	da18      	bge.n	800ce88 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	7858      	ldrb	r0, [r3, #1]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6a1a      	ldr	r2, [r3, #32]
 800ce64:	2301      	movs	r3, #1
 800ce66:	f7fd fdf7 	bl	800aa58 <disk_write>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <f_write+0x160>
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2201      	movs	r2, #1
 800ce74:	755a      	strb	r2, [r3, #21]
 800ce76:	2301      	movs	r3, #1
 800ce78:	e0df      	b.n	800d03a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	7d1b      	ldrb	r3, [r3, #20]
 800ce7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	69db      	ldr	r3, [r3, #28]
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4610      	mov	r0, r2
 800ce92:	f7fe f96d 	bl	800b170 <clust2sect>
 800ce96:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d104      	bne.n	800cea8 <f_write+0x18e>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2202      	movs	r2, #2
 800cea2:	755a      	strb	r2, [r3, #21]
 800cea4:	2302      	movs	r3, #2
 800cea6:	e0c8      	b.n	800d03a <f_write+0x320>
			sect += csect;
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	4413      	add	r3, r2
 800ceae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	899b      	ldrh	r3, [r3, #12]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cebc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d043      	beq.n	800cf4c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	4413      	add	r3, r2
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	8952      	ldrh	r2, [r2, #10]
 800cece:	4293      	cmp	r3, r2
 800ced0:	d905      	bls.n	800cede <f_write+0x1c4>
					cc = fs->csize - csect;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	895b      	ldrh	r3, [r3, #10]
 800ced6:	461a      	mov	r2, r3
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	7858      	ldrb	r0, [r3, #1]
 800cee2:	6a3b      	ldr	r3, [r7, #32]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	69f9      	ldr	r1, [r7, #28]
 800cee8:	f7fd fdb6 	bl	800aa58 <disk_write>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d004      	beq.n	800cefc <f_write+0x1e2>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2201      	movs	r2, #1
 800cef6:	755a      	strb	r2, [r3, #21]
 800cef8:	2301      	movs	r3, #1
 800cefa:	e09e      	b.n	800d03a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1a      	ldr	r2, [r3, #32]
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	6a3a      	ldr	r2, [r7, #32]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d918      	bls.n	800cf3c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6a1a      	ldr	r2, [r3, #32]
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	8992      	ldrh	r2, [r2, #12]
 800cf1c:	fb02 f303 	mul.w	r3, r2, r3
 800cf20:	69fa      	ldr	r2, [r7, #28]
 800cf22:	18d1      	adds	r1, r2, r3
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	899b      	ldrh	r3, [r3, #12]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	f7fd fe55 	bl	800abd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	7d1b      	ldrb	r3, [r3, #20]
 800cf32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	899b      	ldrh	r3, [r3, #12]
 800cf40:	461a      	mov	r2, r3
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	fb02 f303 	mul.w	r3, r2, r3
 800cf48:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cf4a:	e04b      	b.n	800cfe4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d016      	beq.n	800cf84 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	699a      	ldr	r2, [r3, #24]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d210      	bcs.n	800cf84 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	7858      	ldrb	r0, [r3, #1]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	f7fd fd52 	bl	800aa18 <disk_read>
 800cf74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d004      	beq.n	800cf84 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	755a      	strb	r2, [r3, #21]
 800cf80:	2301      	movs	r3, #1
 800cf82:	e05a      	b.n	800d03a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	899b      	ldrh	r3, [r3, #12]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	8992      	ldrh	r2, [r2, #12]
 800cf98:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf9c:	fb01 f202 	mul.w	r2, r1, r2
 800cfa0:	1a9b      	subs	r3, r3, r2
 800cfa2:	1ac3      	subs	r3, r0, r3
 800cfa4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cfa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d901      	bls.n	800cfb2 <f_write+0x298>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	8992      	ldrh	r2, [r2, #12]
 800cfc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfc4:	fb00 f202 	mul.w	r2, r0, r2
 800cfc8:	1a9b      	subs	r3, r3, r2
 800cfca:	440b      	add	r3, r1
 800cfcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfce:	69f9      	ldr	r1, [r7, #28]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fd fe01 	bl	800abd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	7d1b      	ldrb	r3, [r3, #20]
 800cfda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cfe4:	69fa      	ldr	r2, [r7, #28]
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	4413      	add	r3, r2
 800cfea:	61fb      	str	r3, [r7, #28]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	699a      	ldr	r2, [r3, #24]
 800cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff2:	441a      	add	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	619a      	str	r2, [r3, #24]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	bf38      	it	cc
 800d004:	461a      	movcc	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	60da      	str	r2, [r3, #12]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d010:	441a      	add	r2, r3
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	f47f aeb5 	bne.w	800cd90 <f_write+0x76>
 800d026:	e000      	b.n	800d02a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d028:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	7d1b      	ldrb	r3, [r3, #20]
 800d02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d032:	b2da      	uxtb	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3730      	adds	r7, #48	@ 0x30
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b086      	sub	sp, #24
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f107 0208 	add.w	r2, r7, #8
 800d050:	4611      	mov	r1, r2
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fabe 	bl	800c5d4 <validate>
 800d058:	4603      	mov	r3, r0
 800d05a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d168      	bne.n	800d134 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7d1b      	ldrb	r3, [r3, #20]
 800d066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d062      	beq.n	800d134 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	7d1b      	ldrb	r3, [r3, #20]
 800d072:	b25b      	sxtb	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	da15      	bge.n	800d0a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	7858      	ldrb	r0, [r3, #1]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1a      	ldr	r2, [r3, #32]
 800d086:	2301      	movs	r3, #1
 800d088:	f7fd fce6 	bl	800aa58 <disk_write>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <f_sync+0x54>
 800d092:	2301      	movs	r3, #1
 800d094:	e04f      	b.n	800d136 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7d1b      	ldrb	r3, [r3, #20]
 800d09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0a4:	f7fd fb0c 	bl	800a6c0 <get_fattime>
 800d0a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f7fd ffbe 	bl	800b034 <move_window>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d138      	bne.n	800d134 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	330b      	adds	r3, #11
 800d0cc:	781a      	ldrb	r2, [r3, #0]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	330b      	adds	r3, #11
 800d0d2:	f042 0220 	orr.w	r2, r2, #32
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6818      	ldr	r0, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	68f9      	ldr	r1, [r7, #12]
 800d0e6:	f7fe fd49 	bl	800bb7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f103 021c 	add.w	r2, r3, #28
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7fd fd42 	bl	800ab80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	3316      	adds	r3, #22
 800d100:	6939      	ldr	r1, [r7, #16]
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd fd3c 	bl	800ab80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3312      	adds	r3, #18
 800d10c:	2100      	movs	r1, #0
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fd fd1b 	bl	800ab4a <st_word>
					fs->wflag = 1;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2201      	movs	r2, #1
 800d118:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fd ffb7 	bl	800b090 <sync_fs>
 800d122:	4603      	mov	r3, r0
 800d124:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	7d1b      	ldrb	r3, [r3, #20]
 800d12a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d134:	7dfb      	ldrb	r3, [r7, #23]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b084      	sub	sp, #16
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7ff ff7b 	bl	800d042 <f_sync>
 800d14c:	4603      	mov	r3, r0
 800d14e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d118      	bne.n	800d188 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f107 0208 	add.w	r2, r7, #8
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff fa38 	bl	800c5d4 <validate>
 800d164:	4603      	mov	r3, r0
 800d166:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10c      	bne.n	800d188 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	4618      	mov	r0, r3
 800d174:	f7fd feba 	bl	800aeec <dec_lock>
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d188:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b090      	sub	sp, #64	@ 0x40
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f107 0208 	add.w	r2, r7, #8
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff fa15 	bl	800c5d4 <validate>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d1b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d103      	bne.n	800d1c0 <f_lseek+0x2e>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	7d5b      	ldrb	r3, [r3, #21]
 800d1bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d1c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <f_lseek+0x3c>
 800d1c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d1cc:	e201      	b.n	800d5d2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 80d9 	beq.w	800d38a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1de:	d15a      	bne.n	800d296 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	1d1a      	adds	r2, r3, #4
 800d1ea:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d03a      	beq.n	800d276 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d202:	613b      	str	r3, [r7, #16]
 800d204:	2300      	movs	r3, #0
 800d206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20a:	3302      	adds	r3, #2
 800d20c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d214:	3301      	adds	r3, #1
 800d216:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fd ffc6 	bl	800b1ae <get_fat>
 800d222:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d226:	2b01      	cmp	r3, #1
 800d228:	d804      	bhi.n	800d234 <f_lseek+0xa2>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2202      	movs	r2, #2
 800d22e:	755a      	strb	r2, [r3, #21]
 800d230:	2302      	movs	r3, #2
 800d232:	e1ce      	b.n	800d5d2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d23a:	d104      	bne.n	800d246 <f_lseek+0xb4>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	755a      	strb	r2, [r3, #21]
 800d242:	2301      	movs	r3, #1
 800d244:	e1c5      	b.n	800d5d2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3301      	adds	r3, #1
 800d24a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d0de      	beq.n	800d20e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	429a      	cmp	r2, r3
 800d256:	d809      	bhi.n	800d26c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25a:	1d1a      	adds	r2, r3, #4
 800d25c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d25e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d264:	1d1a      	adds	r2, r3, #4
 800d266:	627a      	str	r2, [r7, #36]	@ 0x24
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d272:	429a      	cmp	r2, r3
 800d274:	d3c4      	bcc.n	800d200 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d27c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d27e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	429a      	cmp	r2, r3
 800d284:	d803      	bhi.n	800d28e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	e19f      	b.n	800d5ce <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d28e:	2311      	movs	r3, #17
 800d290:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d294:	e19b      	b.n	800d5ce <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d902      	bls.n	800d2a6 <f_lseek+0x114>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 818d 	beq.w	800d5ce <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7fe fa61 	bl	800b782 <clmt_clust>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	69db      	ldr	r3, [r3, #28]
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	f7fd ff4e 	bl	800b170 <clust2sect>
 800d2d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d104      	bne.n	800d2e6 <f_lseek+0x154>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	755a      	strb	r2, [r3, #21]
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	e175      	b.n	800d5d2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	8992      	ldrh	r2, [r2, #12]
 800d2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	8952      	ldrh	r2, [r2, #10]
 800d2f6:	3a01      	subs	r2, #1
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	69ba      	ldr	r2, [r7, #24]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	8992      	ldrh	r2, [r2, #12]
 800d308:	fbb3 f1f2 	udiv	r1, r3, r2
 800d30c:	fb01 f202 	mul.w	r2, r1, r2
 800d310:	1a9b      	subs	r3, r3, r2
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 815b 	beq.w	800d5ce <f_lseek+0x43c>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a1b      	ldr	r3, [r3, #32]
 800d31c:	69ba      	ldr	r2, [r7, #24]
 800d31e:	429a      	cmp	r2, r3
 800d320:	f000 8155 	beq.w	800d5ce <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	b25b      	sxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da18      	bge.n	800d360 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	7858      	ldrb	r0, [r3, #1]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a1a      	ldr	r2, [r3, #32]
 800d33c:	2301      	movs	r3, #1
 800d33e:	f7fd fb8b 	bl	800aa58 <disk_write>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d004      	beq.n	800d352 <f_lseek+0x1c0>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	755a      	strb	r2, [r3, #21]
 800d34e:	2301      	movs	r3, #1
 800d350:	e13f      	b.n	800d5d2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	7d1b      	ldrb	r3, [r3, #20]
 800d356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	7858      	ldrb	r0, [r3, #1]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d36a:	2301      	movs	r3, #1
 800d36c:	69ba      	ldr	r2, [r7, #24]
 800d36e:	f7fd fb53 	bl	800aa18 <disk_read>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d004      	beq.n	800d382 <f_lseek+0x1f0>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	755a      	strb	r2, [r3, #21]
 800d37e:	2301      	movs	r3, #1
 800d380:	e127      	b.n	800d5d2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	621a      	str	r2, [r3, #32]
 800d388:	e121      	b.n	800d5ce <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	429a      	cmp	r2, r3
 800d392:	d908      	bls.n	800d3a6 <f_lseek+0x214>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7d1b      	ldrb	r3, [r3, #20]
 800d398:	f003 0302 	and.w	r3, r3, #2
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d102      	bne.n	800d3a6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3b4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 80b5 	beq.w	800d528 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	895b      	ldrh	r3, [r3, #10]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	899b      	ldrh	r3, [r3, #12]
 800d3c8:	fb02 f303 	mul.w	r3, r2, r3
 800d3cc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d01b      	beq.n	800d40c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	1e5a      	subs	r2, r3, #1
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	1e59      	subs	r1, r3, #1
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d30f      	bcc.n	800d40c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	1e5a      	subs	r2, r3, #1
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	425b      	negs	r3, r3
 800d3f4:	401a      	ands	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	69db      	ldr	r3, [r3, #28]
 800d408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d40a:	e022      	b.n	800d452 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d414:	2b00      	cmp	r3, #0
 800d416:	d119      	bne.n	800d44c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2100      	movs	r1, #0
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fe f918 	bl	800b652 <create_chain>
 800d422:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d426:	2b01      	cmp	r3, #1
 800d428:	d104      	bne.n	800d434 <f_lseek+0x2a2>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2202      	movs	r2, #2
 800d42e:	755a      	strb	r2, [r3, #21]
 800d430:	2302      	movs	r3, #2
 800d432:	e0ce      	b.n	800d5d2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43a:	d104      	bne.n	800d446 <f_lseek+0x2b4>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2201      	movs	r2, #1
 800d440:	755a      	strb	r2, [r3, #21]
 800d442:	2301      	movs	r3, #1
 800d444:	e0c5      	b.n	800d5d2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d44a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d450:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d454:	2b00      	cmp	r3, #0
 800d456:	d067      	beq.n	800d528 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d458:	e03a      	b.n	800d4d0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	603b      	str	r3, [r7, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	699a      	ldr	r2, [r3, #24]
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	441a      	add	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7d1b      	ldrb	r3, [r3, #20]
 800d472:	f003 0302 	and.w	r3, r3, #2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00b      	beq.n	800d492 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe f8e7 	bl	800b652 <create_chain>
 800d484:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d108      	bne.n	800d49e <f_lseek+0x30c>
							ofs = 0; break;
 800d48c:	2300      	movs	r3, #0
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	e022      	b.n	800d4d8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d496:	4618      	mov	r0, r3
 800d498:	f7fd fe89 	bl	800b1ae <get_fat>
 800d49c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a4:	d104      	bne.n	800d4b0 <f_lseek+0x31e>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	755a      	strb	r2, [r3, #21]
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e090      	b.n	800d5d2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d904      	bls.n	800d4c0 <f_lseek+0x32e>
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d304      	bcc.n	800d4ca <f_lseek+0x338>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	755a      	strb	r2, [r3, #21]
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e083      	b.n	800d5d2 <f_lseek+0x440>
					fp->clust = clst;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4ce:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d8c0      	bhi.n	800d45a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	699a      	ldr	r2, [r3, #24]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	441a      	add	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	899b      	ldrh	r3, [r3, #12]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4f0:	fb01 f202 	mul.w	r2, r1, r2
 800d4f4:	1a9b      	subs	r3, r3, r2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d016      	beq.n	800d528 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fd fe36 	bl	800b170 <clust2sect>
 800d504:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d104      	bne.n	800d516 <f_lseek+0x384>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2202      	movs	r2, #2
 800d510:	755a      	strb	r2, [r3, #21]
 800d512:	2302      	movs	r3, #2
 800d514:	e05d      	b.n	800d5d2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	899b      	ldrh	r3, [r3, #12]
 800d51a:	461a      	mov	r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d524:	4413      	add	r3, r2
 800d526:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	699a      	ldr	r2, [r3, #24]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	429a      	cmp	r2, r3
 800d532:	d90a      	bls.n	800d54a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	699a      	ldr	r2, [r3, #24]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7d1b      	ldrb	r3, [r3, #20]
 800d540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d544:	b2da      	uxtb	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	8992      	ldrh	r2, [r2, #12]
 800d552:	fbb3 f1f2 	udiv	r1, r3, r2
 800d556:	fb01 f202 	mul.w	r2, r1, r2
 800d55a:	1a9b      	subs	r3, r3, r2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d036      	beq.n	800d5ce <f_lseek+0x43c>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a1b      	ldr	r3, [r3, #32]
 800d564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d566:	429a      	cmp	r2, r3
 800d568:	d031      	beq.n	800d5ce <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	7d1b      	ldrb	r3, [r3, #20]
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	da18      	bge.n	800d5a6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	7858      	ldrb	r0, [r3, #1]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a1a      	ldr	r2, [r3, #32]
 800d582:	2301      	movs	r3, #1
 800d584:	f7fd fa68 	bl	800aa58 <disk_write>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d004      	beq.n	800d598 <f_lseek+0x406>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	755a      	strb	r2, [r3, #21]
 800d594:	2301      	movs	r3, #1
 800d596:	e01c      	b.n	800d5d2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	7858      	ldrb	r0, [r3, #1]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5b4:	f7fd fa30 	bl	800aa18 <disk_read>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d004      	beq.n	800d5c8 <f_lseek+0x436>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	755a      	strb	r2, [r3, #21]
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e004      	b.n	800d5d2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5cc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d5ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3740      	adds	r7, #64	@ 0x40
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b090      	sub	sp, #64	@ 0x40
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d5e4:	f107 010c 	add.w	r1, r7, #12
 800d5e8:	1d3b      	adds	r3, r7, #4
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fd71 	bl	800c0d4 <find_volume>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800d5f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d11f      	bne.n	800d640 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	f107 030c 	add.w	r3, r7, #12
 800d606:	4611      	mov	r1, r2
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fe fc53 	bl	800beb4 <follow_path>
 800d60e:	4603      	mov	r3, r0
 800d610:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d614:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d111      	bne.n	800d640 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d61c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d620:	b25b      	sxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	da03      	bge.n	800d62e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d626:	2306      	movs	r3, #6
 800d628:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d62c:	e008      	b.n	800d640 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <f_stat+0x66>
 800d634:	f107 030c 	add.w	r3, r7, #12
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fb45 	bl	800bcca <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d640:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d644:	4618      	mov	r0, r3
 800d646:	3740      	adds	r7, #64	@ 0x40
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b087      	sub	sp, #28
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	4613      	mov	r3, r2
 800d658:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d65a:	2301      	movs	r3, #1
 800d65c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d662:	4b1f      	ldr	r3, [pc, #124]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d664:	7a5b      	ldrb	r3, [r3, #9]
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d131      	bne.n	800d6d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d66c:	4b1c      	ldr	r3, [pc, #112]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d66e:	7a5b      	ldrb	r3, [r3, #9]
 800d670:	b2db      	uxtb	r3, r3
 800d672:	461a      	mov	r2, r3
 800d674:	4b1a      	ldr	r3, [pc, #104]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d676:	2100      	movs	r1, #0
 800d678:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d67a:	4b19      	ldr	r3, [pc, #100]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d67c:	7a5b      	ldrb	r3, [r3, #9]
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	4a17      	ldr	r2, [pc, #92]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d68a:	4b15      	ldr	r3, [pc, #84]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d68c:	7a5b      	ldrb	r3, [r3, #9]
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	461a      	mov	r2, r3
 800d692:	4b13      	ldr	r3, [pc, #76]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d694:	4413      	add	r3, r2
 800d696:	79fa      	ldrb	r2, [r7, #7]
 800d698:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d69a:	4b11      	ldr	r3, [pc, #68]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d69c:	7a5b      	ldrb	r3, [r3, #9]
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	1c5a      	adds	r2, r3, #1
 800d6a2:	b2d1      	uxtb	r1, r2
 800d6a4:	4a0e      	ldr	r2, [pc, #56]	@ (800d6e0 <FATFS_LinkDriverEx+0x94>)
 800d6a6:	7251      	strb	r1, [r2, #9]
 800d6a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6aa:	7dbb      	ldrb	r3, [r7, #22]
 800d6ac:	3330      	adds	r3, #48	@ 0x30
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	223a      	movs	r2, #58	@ 0x3a
 800d6ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	3302      	adds	r3, #2
 800d6c0:	222f      	movs	r2, #47	@ 0x2f
 800d6c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	3303      	adds	r3, #3
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	371c      	adds	r7, #28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	200056a8 	.word	0x200056a8

0800d6e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7ff ffaa 	bl	800d64c <FATFS_LinkDriverEx>
 800d6f8:	4603      	mov	r3, r0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <atoi>:
 800d702:	220a      	movs	r2, #10
 800d704:	2100      	movs	r1, #0
 800d706:	f000 b93b 	b.w	800d980 <strtol>
	...

0800d70c <malloc>:
 800d70c:	4b02      	ldr	r3, [pc, #8]	@ (800d718 <malloc+0xc>)
 800d70e:	4601      	mov	r1, r0
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f000 b82d 	b.w	800d770 <_malloc_r>
 800d716:	bf00      	nop
 800d718:	20000038 	.word	0x20000038

0800d71c <free>:
 800d71c:	4b02      	ldr	r3, [pc, #8]	@ (800d728 <free+0xc>)
 800d71e:	4601      	mov	r1, r0
 800d720:	6818      	ldr	r0, [r3, #0]
 800d722:	f000 bbe1 	b.w	800dee8 <_free_r>
 800d726:	bf00      	nop
 800d728:	20000038 	.word	0x20000038

0800d72c <sbrk_aligned>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0f      	ldr	r6, [pc, #60]	@ (800d76c <sbrk_aligned+0x40>)
 800d730:	460c      	mov	r4, r1
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	4605      	mov	r5, r0
 800d736:	b911      	cbnz	r1, 800d73e <sbrk_aligned+0x12>
 800d738:	f000 fb60 	bl	800ddfc <_sbrk_r>
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 fb5b 	bl	800ddfc <_sbrk_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d103      	bne.n	800d752 <sbrk_aligned+0x26>
 800d74a:	f04f 34ff 	mov.w	r4, #4294967295
 800d74e:	4620      	mov	r0, r4
 800d750:	bd70      	pop	{r4, r5, r6, pc}
 800d752:	1cc4      	adds	r4, r0, #3
 800d754:	f024 0403 	bic.w	r4, r4, #3
 800d758:	42a0      	cmp	r0, r4
 800d75a:	d0f8      	beq.n	800d74e <sbrk_aligned+0x22>
 800d75c:	1a21      	subs	r1, r4, r0
 800d75e:	4628      	mov	r0, r5
 800d760:	f000 fb4c 	bl	800ddfc <_sbrk_r>
 800d764:	3001      	adds	r0, #1
 800d766:	d1f2      	bne.n	800d74e <sbrk_aligned+0x22>
 800d768:	e7ef      	b.n	800d74a <sbrk_aligned+0x1e>
 800d76a:	bf00      	nop
 800d76c:	200056b4 	.word	0x200056b4

0800d770 <_malloc_r>:
 800d770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d774:	1ccd      	adds	r5, r1, #3
 800d776:	f025 0503 	bic.w	r5, r5, #3
 800d77a:	3508      	adds	r5, #8
 800d77c:	2d0c      	cmp	r5, #12
 800d77e:	bf38      	it	cc
 800d780:	250c      	movcc	r5, #12
 800d782:	2d00      	cmp	r5, #0
 800d784:	4606      	mov	r6, r0
 800d786:	db01      	blt.n	800d78c <_malloc_r+0x1c>
 800d788:	42a9      	cmp	r1, r5
 800d78a:	d904      	bls.n	800d796 <_malloc_r+0x26>
 800d78c:	230c      	movs	r3, #12
 800d78e:	6033      	str	r3, [r6, #0]
 800d790:	2000      	movs	r0, #0
 800d792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d86c <_malloc_r+0xfc>
 800d79a:	f000 f869 	bl	800d870 <__malloc_lock>
 800d79e:	f8d8 3000 	ldr.w	r3, [r8]
 800d7a2:	461c      	mov	r4, r3
 800d7a4:	bb44      	cbnz	r4, 800d7f8 <_malloc_r+0x88>
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f7ff ffbf 	bl	800d72c <sbrk_aligned>
 800d7ae:	1c43      	adds	r3, r0, #1
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	d158      	bne.n	800d866 <_malloc_r+0xf6>
 800d7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d7b8:	4627      	mov	r7, r4
 800d7ba:	2f00      	cmp	r7, #0
 800d7bc:	d143      	bne.n	800d846 <_malloc_r+0xd6>
 800d7be:	2c00      	cmp	r4, #0
 800d7c0:	d04b      	beq.n	800d85a <_malloc_r+0xea>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	4639      	mov	r1, r7
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	eb04 0903 	add.w	r9, r4, r3
 800d7cc:	f000 fb16 	bl	800ddfc <_sbrk_r>
 800d7d0:	4581      	cmp	r9, r0
 800d7d2:	d142      	bne.n	800d85a <_malloc_r+0xea>
 800d7d4:	6821      	ldr	r1, [r4, #0]
 800d7d6:	1a6d      	subs	r5, r5, r1
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff ffa6 	bl	800d72c <sbrk_aligned>
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d03a      	beq.n	800d85a <_malloc_r+0xea>
 800d7e4:	6823      	ldr	r3, [r4, #0]
 800d7e6:	442b      	add	r3, r5
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ee:	685a      	ldr	r2, [r3, #4]
 800d7f0:	bb62      	cbnz	r2, 800d84c <_malloc_r+0xdc>
 800d7f2:	f8c8 7000 	str.w	r7, [r8]
 800d7f6:	e00f      	b.n	800d818 <_malloc_r+0xa8>
 800d7f8:	6822      	ldr	r2, [r4, #0]
 800d7fa:	1b52      	subs	r2, r2, r5
 800d7fc:	d420      	bmi.n	800d840 <_malloc_r+0xd0>
 800d7fe:	2a0b      	cmp	r2, #11
 800d800:	d917      	bls.n	800d832 <_malloc_r+0xc2>
 800d802:	1961      	adds	r1, r4, r5
 800d804:	42a3      	cmp	r3, r4
 800d806:	6025      	str	r5, [r4, #0]
 800d808:	bf18      	it	ne
 800d80a:	6059      	strne	r1, [r3, #4]
 800d80c:	6863      	ldr	r3, [r4, #4]
 800d80e:	bf08      	it	eq
 800d810:	f8c8 1000 	streq.w	r1, [r8]
 800d814:	5162      	str	r2, [r4, r5]
 800d816:	604b      	str	r3, [r1, #4]
 800d818:	4630      	mov	r0, r6
 800d81a:	f000 f82f 	bl	800d87c <__malloc_unlock>
 800d81e:	f104 000b 	add.w	r0, r4, #11
 800d822:	1d23      	adds	r3, r4, #4
 800d824:	f020 0007 	bic.w	r0, r0, #7
 800d828:	1ac2      	subs	r2, r0, r3
 800d82a:	bf1c      	itt	ne
 800d82c:	1a1b      	subne	r3, r3, r0
 800d82e:	50a3      	strne	r3, [r4, r2]
 800d830:	e7af      	b.n	800d792 <_malloc_r+0x22>
 800d832:	6862      	ldr	r2, [r4, #4]
 800d834:	42a3      	cmp	r3, r4
 800d836:	bf0c      	ite	eq
 800d838:	f8c8 2000 	streq.w	r2, [r8]
 800d83c:	605a      	strne	r2, [r3, #4]
 800d83e:	e7eb      	b.n	800d818 <_malloc_r+0xa8>
 800d840:	4623      	mov	r3, r4
 800d842:	6864      	ldr	r4, [r4, #4]
 800d844:	e7ae      	b.n	800d7a4 <_malloc_r+0x34>
 800d846:	463c      	mov	r4, r7
 800d848:	687f      	ldr	r7, [r7, #4]
 800d84a:	e7b6      	b.n	800d7ba <_malloc_r+0x4a>
 800d84c:	461a      	mov	r2, r3
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	42a3      	cmp	r3, r4
 800d852:	d1fb      	bne.n	800d84c <_malloc_r+0xdc>
 800d854:	2300      	movs	r3, #0
 800d856:	6053      	str	r3, [r2, #4]
 800d858:	e7de      	b.n	800d818 <_malloc_r+0xa8>
 800d85a:	230c      	movs	r3, #12
 800d85c:	6033      	str	r3, [r6, #0]
 800d85e:	4630      	mov	r0, r6
 800d860:	f000 f80c 	bl	800d87c <__malloc_unlock>
 800d864:	e794      	b.n	800d790 <_malloc_r+0x20>
 800d866:	6005      	str	r5, [r0, #0]
 800d868:	e7d6      	b.n	800d818 <_malloc_r+0xa8>
 800d86a:	bf00      	nop
 800d86c:	200056b8 	.word	0x200056b8

0800d870 <__malloc_lock>:
 800d870:	4801      	ldr	r0, [pc, #4]	@ (800d878 <__malloc_lock+0x8>)
 800d872:	f000 bb10 	b.w	800de96 <__retarget_lock_acquire_recursive>
 800d876:	bf00      	nop
 800d878:	200057fc 	.word	0x200057fc

0800d87c <__malloc_unlock>:
 800d87c:	4801      	ldr	r0, [pc, #4]	@ (800d884 <__malloc_unlock+0x8>)
 800d87e:	f000 bb0b 	b.w	800de98 <__retarget_lock_release_recursive>
 800d882:	bf00      	nop
 800d884:	200057fc 	.word	0x200057fc

0800d888 <_strtol_l.constprop.0>:
 800d888:	2b24      	cmp	r3, #36	@ 0x24
 800d88a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d88e:	4686      	mov	lr, r0
 800d890:	4690      	mov	r8, r2
 800d892:	d801      	bhi.n	800d898 <_strtol_l.constprop.0+0x10>
 800d894:	2b01      	cmp	r3, #1
 800d896:	d106      	bne.n	800d8a6 <_strtol_l.constprop.0+0x1e>
 800d898:	f000 fad2 	bl	800de40 <__errno>
 800d89c:	2316      	movs	r3, #22
 800d89e:	6003      	str	r3, [r0, #0]
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a6:	4834      	ldr	r0, [pc, #208]	@ (800d978 <_strtol_l.constprop.0+0xf0>)
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8b0:	5d06      	ldrb	r6, [r0, r4]
 800d8b2:	f016 0608 	ands.w	r6, r6, #8
 800d8b6:	d1f8      	bne.n	800d8aa <_strtol_l.constprop.0+0x22>
 800d8b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8ba:	d12d      	bne.n	800d918 <_strtol_l.constprop.0+0x90>
 800d8bc:	782c      	ldrb	r4, [r5, #0]
 800d8be:	2601      	movs	r6, #1
 800d8c0:	1c95      	adds	r5, r2, #2
 800d8c2:	f033 0210 	bics.w	r2, r3, #16
 800d8c6:	d109      	bne.n	800d8dc <_strtol_l.constprop.0+0x54>
 800d8c8:	2c30      	cmp	r4, #48	@ 0x30
 800d8ca:	d12a      	bne.n	800d922 <_strtol_l.constprop.0+0x9a>
 800d8cc:	782a      	ldrb	r2, [r5, #0]
 800d8ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8d2:	2a58      	cmp	r2, #88	@ 0x58
 800d8d4:	d125      	bne.n	800d922 <_strtol_l.constprop.0+0x9a>
 800d8d6:	786c      	ldrb	r4, [r5, #1]
 800d8d8:	2310      	movs	r3, #16
 800d8da:	3502      	adds	r5, #2
 800d8dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	fbbc f9f3 	udiv	r9, ip, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8f4:	2f09      	cmp	r7, #9
 800d8f6:	d81b      	bhi.n	800d930 <_strtol_l.constprop.0+0xa8>
 800d8f8:	463c      	mov	r4, r7
 800d8fa:	42a3      	cmp	r3, r4
 800d8fc:	dd27      	ble.n	800d94e <_strtol_l.constprop.0+0xc6>
 800d8fe:	1c57      	adds	r7, r2, #1
 800d900:	d007      	beq.n	800d912 <_strtol_l.constprop.0+0x8a>
 800d902:	4581      	cmp	r9, r0
 800d904:	d320      	bcc.n	800d948 <_strtol_l.constprop.0+0xc0>
 800d906:	d101      	bne.n	800d90c <_strtol_l.constprop.0+0x84>
 800d908:	45a2      	cmp	sl, r4
 800d90a:	db1d      	blt.n	800d948 <_strtol_l.constprop.0+0xc0>
 800d90c:	fb00 4003 	mla	r0, r0, r3, r4
 800d910:	2201      	movs	r2, #1
 800d912:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d916:	e7eb      	b.n	800d8f0 <_strtol_l.constprop.0+0x68>
 800d918:	2c2b      	cmp	r4, #43	@ 0x2b
 800d91a:	bf04      	itt	eq
 800d91c:	782c      	ldrbeq	r4, [r5, #0]
 800d91e:	1c95      	addeq	r5, r2, #2
 800d920:	e7cf      	b.n	800d8c2 <_strtol_l.constprop.0+0x3a>
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1da      	bne.n	800d8dc <_strtol_l.constprop.0+0x54>
 800d926:	2c30      	cmp	r4, #48	@ 0x30
 800d928:	bf0c      	ite	eq
 800d92a:	2308      	moveq	r3, #8
 800d92c:	230a      	movne	r3, #10
 800d92e:	e7d5      	b.n	800d8dc <_strtol_l.constprop.0+0x54>
 800d930:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d934:	2f19      	cmp	r7, #25
 800d936:	d801      	bhi.n	800d93c <_strtol_l.constprop.0+0xb4>
 800d938:	3c37      	subs	r4, #55	@ 0x37
 800d93a:	e7de      	b.n	800d8fa <_strtol_l.constprop.0+0x72>
 800d93c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d940:	2f19      	cmp	r7, #25
 800d942:	d804      	bhi.n	800d94e <_strtol_l.constprop.0+0xc6>
 800d944:	3c57      	subs	r4, #87	@ 0x57
 800d946:	e7d8      	b.n	800d8fa <_strtol_l.constprop.0+0x72>
 800d948:	f04f 32ff 	mov.w	r2, #4294967295
 800d94c:	e7e1      	b.n	800d912 <_strtol_l.constprop.0+0x8a>
 800d94e:	1c53      	adds	r3, r2, #1
 800d950:	d108      	bne.n	800d964 <_strtol_l.constprop.0+0xdc>
 800d952:	2322      	movs	r3, #34	@ 0x22
 800d954:	f8ce 3000 	str.w	r3, [lr]
 800d958:	4660      	mov	r0, ip
 800d95a:	f1b8 0f00 	cmp.w	r8, #0
 800d95e:	d0a0      	beq.n	800d8a2 <_strtol_l.constprop.0+0x1a>
 800d960:	1e69      	subs	r1, r5, #1
 800d962:	e006      	b.n	800d972 <_strtol_l.constprop.0+0xea>
 800d964:	b106      	cbz	r6, 800d968 <_strtol_l.constprop.0+0xe0>
 800d966:	4240      	negs	r0, r0
 800d968:	f1b8 0f00 	cmp.w	r8, #0
 800d96c:	d099      	beq.n	800d8a2 <_strtol_l.constprop.0+0x1a>
 800d96e:	2a00      	cmp	r2, #0
 800d970:	d1f6      	bne.n	800d960 <_strtol_l.constprop.0+0xd8>
 800d972:	f8c8 1000 	str.w	r1, [r8]
 800d976:	e794      	b.n	800d8a2 <_strtol_l.constprop.0+0x1a>
 800d978:	080103cd 	.word	0x080103cd

0800d97c <_strtol_r>:
 800d97c:	f7ff bf84 	b.w	800d888 <_strtol_l.constprop.0>

0800d980 <strtol>:
 800d980:	4613      	mov	r3, r2
 800d982:	460a      	mov	r2, r1
 800d984:	4601      	mov	r1, r0
 800d986:	4802      	ldr	r0, [pc, #8]	@ (800d990 <strtol+0x10>)
 800d988:	6800      	ldr	r0, [r0, #0]
 800d98a:	f7ff bf7d 	b.w	800d888 <_strtol_l.constprop.0>
 800d98e:	bf00      	nop
 800d990:	20000038 	.word	0x20000038

0800d994 <std>:
 800d994:	2300      	movs	r3, #0
 800d996:	b510      	push	{r4, lr}
 800d998:	4604      	mov	r4, r0
 800d99a:	e9c0 3300 	strd	r3, r3, [r0]
 800d99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9a2:	6083      	str	r3, [r0, #8]
 800d9a4:	8181      	strh	r1, [r0, #12]
 800d9a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9a8:	81c2      	strh	r2, [r0, #14]
 800d9aa:	6183      	str	r3, [r0, #24]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	2208      	movs	r2, #8
 800d9b0:	305c      	adds	r0, #92	@ 0x5c
 800d9b2:	f000 f979 	bl	800dca8 <memset>
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ec <std+0x58>)
 800d9b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f0 <std+0x5c>)
 800d9bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9be:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f4 <std+0x60>)
 800d9c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f8 <std+0x64>)
 800d9c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9fc <std+0x68>)
 800d9c8:	6224      	str	r4, [r4, #32]
 800d9ca:	429c      	cmp	r4, r3
 800d9cc:	d006      	beq.n	800d9dc <std+0x48>
 800d9ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9d2:	4294      	cmp	r4, r2
 800d9d4:	d002      	beq.n	800d9dc <std+0x48>
 800d9d6:	33d0      	adds	r3, #208	@ 0xd0
 800d9d8:	429c      	cmp	r4, r3
 800d9da:	d105      	bne.n	800d9e8 <std+0x54>
 800d9dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9e4:	f000 ba56 	b.w	800de94 <__retarget_lock_init_recursive>
 800d9e8:	bd10      	pop	{r4, pc}
 800d9ea:	bf00      	nop
 800d9ec:	0800dbad 	.word	0x0800dbad
 800d9f0:	0800dbd3 	.word	0x0800dbd3
 800d9f4:	0800dc0b 	.word	0x0800dc0b
 800d9f8:	0800dc2f 	.word	0x0800dc2f
 800d9fc:	200056bc 	.word	0x200056bc

0800da00 <stdio_exit_handler>:
 800da00:	4a02      	ldr	r2, [pc, #8]	@ (800da0c <stdio_exit_handler+0xc>)
 800da02:	4903      	ldr	r1, [pc, #12]	@ (800da10 <stdio_exit_handler+0x10>)
 800da04:	4803      	ldr	r0, [pc, #12]	@ (800da14 <stdio_exit_handler+0x14>)
 800da06:	f000 b869 	b.w	800dadc <_fwalk_sglue>
 800da0a:	bf00      	nop
 800da0c:	2000002c 	.word	0x2000002c
 800da10:	0800ec85 	.word	0x0800ec85
 800da14:	2000003c 	.word	0x2000003c

0800da18 <cleanup_stdio>:
 800da18:	6841      	ldr	r1, [r0, #4]
 800da1a:	4b0c      	ldr	r3, [pc, #48]	@ (800da4c <cleanup_stdio+0x34>)
 800da1c:	4299      	cmp	r1, r3
 800da1e:	b510      	push	{r4, lr}
 800da20:	4604      	mov	r4, r0
 800da22:	d001      	beq.n	800da28 <cleanup_stdio+0x10>
 800da24:	f001 f92e 	bl	800ec84 <_fflush_r>
 800da28:	68a1      	ldr	r1, [r4, #8]
 800da2a:	4b09      	ldr	r3, [pc, #36]	@ (800da50 <cleanup_stdio+0x38>)
 800da2c:	4299      	cmp	r1, r3
 800da2e:	d002      	beq.n	800da36 <cleanup_stdio+0x1e>
 800da30:	4620      	mov	r0, r4
 800da32:	f001 f927 	bl	800ec84 <_fflush_r>
 800da36:	68e1      	ldr	r1, [r4, #12]
 800da38:	4b06      	ldr	r3, [pc, #24]	@ (800da54 <cleanup_stdio+0x3c>)
 800da3a:	4299      	cmp	r1, r3
 800da3c:	d004      	beq.n	800da48 <cleanup_stdio+0x30>
 800da3e:	4620      	mov	r0, r4
 800da40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da44:	f001 b91e 	b.w	800ec84 <_fflush_r>
 800da48:	bd10      	pop	{r4, pc}
 800da4a:	bf00      	nop
 800da4c:	200056bc 	.word	0x200056bc
 800da50:	20005724 	.word	0x20005724
 800da54:	2000578c 	.word	0x2000578c

0800da58 <global_stdio_init.part.0>:
 800da58:	b510      	push	{r4, lr}
 800da5a:	4b0b      	ldr	r3, [pc, #44]	@ (800da88 <global_stdio_init.part.0+0x30>)
 800da5c:	4c0b      	ldr	r4, [pc, #44]	@ (800da8c <global_stdio_init.part.0+0x34>)
 800da5e:	4a0c      	ldr	r2, [pc, #48]	@ (800da90 <global_stdio_init.part.0+0x38>)
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	4620      	mov	r0, r4
 800da64:	2200      	movs	r2, #0
 800da66:	2104      	movs	r1, #4
 800da68:	f7ff ff94 	bl	800d994 <std>
 800da6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da70:	2201      	movs	r2, #1
 800da72:	2109      	movs	r1, #9
 800da74:	f7ff ff8e 	bl	800d994 <std>
 800da78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da7c:	2202      	movs	r2, #2
 800da7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da82:	2112      	movs	r1, #18
 800da84:	f7ff bf86 	b.w	800d994 <std>
 800da88:	200057f4 	.word	0x200057f4
 800da8c:	200056bc 	.word	0x200056bc
 800da90:	0800da01 	.word	0x0800da01

0800da94 <__sfp_lock_acquire>:
 800da94:	4801      	ldr	r0, [pc, #4]	@ (800da9c <__sfp_lock_acquire+0x8>)
 800da96:	f000 b9fe 	b.w	800de96 <__retarget_lock_acquire_recursive>
 800da9a:	bf00      	nop
 800da9c:	200057fd 	.word	0x200057fd

0800daa0 <__sfp_lock_release>:
 800daa0:	4801      	ldr	r0, [pc, #4]	@ (800daa8 <__sfp_lock_release+0x8>)
 800daa2:	f000 b9f9 	b.w	800de98 <__retarget_lock_release_recursive>
 800daa6:	bf00      	nop
 800daa8:	200057fd 	.word	0x200057fd

0800daac <__sinit>:
 800daac:	b510      	push	{r4, lr}
 800daae:	4604      	mov	r4, r0
 800dab0:	f7ff fff0 	bl	800da94 <__sfp_lock_acquire>
 800dab4:	6a23      	ldr	r3, [r4, #32]
 800dab6:	b11b      	cbz	r3, 800dac0 <__sinit+0x14>
 800dab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dabc:	f7ff bff0 	b.w	800daa0 <__sfp_lock_release>
 800dac0:	4b04      	ldr	r3, [pc, #16]	@ (800dad4 <__sinit+0x28>)
 800dac2:	6223      	str	r3, [r4, #32]
 800dac4:	4b04      	ldr	r3, [pc, #16]	@ (800dad8 <__sinit+0x2c>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1f5      	bne.n	800dab8 <__sinit+0xc>
 800dacc:	f7ff ffc4 	bl	800da58 <global_stdio_init.part.0>
 800dad0:	e7f2      	b.n	800dab8 <__sinit+0xc>
 800dad2:	bf00      	nop
 800dad4:	0800da19 	.word	0x0800da19
 800dad8:	200057f4 	.word	0x200057f4

0800dadc <_fwalk_sglue>:
 800dadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae0:	4607      	mov	r7, r0
 800dae2:	4688      	mov	r8, r1
 800dae4:	4614      	mov	r4, r2
 800dae6:	2600      	movs	r6, #0
 800dae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800daec:	f1b9 0901 	subs.w	r9, r9, #1
 800daf0:	d505      	bpl.n	800dafe <_fwalk_sglue+0x22>
 800daf2:	6824      	ldr	r4, [r4, #0]
 800daf4:	2c00      	cmp	r4, #0
 800daf6:	d1f7      	bne.n	800dae8 <_fwalk_sglue+0xc>
 800daf8:	4630      	mov	r0, r6
 800dafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dafe:	89ab      	ldrh	r3, [r5, #12]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d907      	bls.n	800db14 <_fwalk_sglue+0x38>
 800db04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db08:	3301      	adds	r3, #1
 800db0a:	d003      	beq.n	800db14 <_fwalk_sglue+0x38>
 800db0c:	4629      	mov	r1, r5
 800db0e:	4638      	mov	r0, r7
 800db10:	47c0      	blx	r8
 800db12:	4306      	orrs	r6, r0
 800db14:	3568      	adds	r5, #104	@ 0x68
 800db16:	e7e9      	b.n	800daec <_fwalk_sglue+0x10>

0800db18 <siprintf>:
 800db18:	b40e      	push	{r1, r2, r3}
 800db1a:	b500      	push	{lr}
 800db1c:	b09c      	sub	sp, #112	@ 0x70
 800db1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800db20:	9002      	str	r0, [sp, #8]
 800db22:	9006      	str	r0, [sp, #24]
 800db24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db28:	4809      	ldr	r0, [pc, #36]	@ (800db50 <siprintf+0x38>)
 800db2a:	9107      	str	r1, [sp, #28]
 800db2c:	9104      	str	r1, [sp, #16]
 800db2e:	4909      	ldr	r1, [pc, #36]	@ (800db54 <siprintf+0x3c>)
 800db30:	f853 2b04 	ldr.w	r2, [r3], #4
 800db34:	9105      	str	r1, [sp, #20]
 800db36:	6800      	ldr	r0, [r0, #0]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	a902      	add	r1, sp, #8
 800db3c:	f000 fa7a 	bl	800e034 <_svfiprintf_r>
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	2200      	movs	r2, #0
 800db44:	701a      	strb	r2, [r3, #0]
 800db46:	b01c      	add	sp, #112	@ 0x70
 800db48:	f85d eb04 	ldr.w	lr, [sp], #4
 800db4c:	b003      	add	sp, #12
 800db4e:	4770      	bx	lr
 800db50:	20000038 	.word	0x20000038
 800db54:	ffff0208 	.word	0xffff0208

0800db58 <siscanf>:
 800db58:	b40e      	push	{r1, r2, r3}
 800db5a:	b530      	push	{r4, r5, lr}
 800db5c:	b09c      	sub	sp, #112	@ 0x70
 800db5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800db60:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800db64:	f854 5b04 	ldr.w	r5, [r4], #4
 800db68:	f8ad 2014 	strh.w	r2, [sp, #20]
 800db6c:	9002      	str	r0, [sp, #8]
 800db6e:	9006      	str	r0, [sp, #24]
 800db70:	f7f2 fb2e 	bl	80001d0 <strlen>
 800db74:	4b0b      	ldr	r3, [pc, #44]	@ (800dba4 <siscanf+0x4c>)
 800db76:	9003      	str	r0, [sp, #12]
 800db78:	9007      	str	r0, [sp, #28]
 800db7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db7c:	480a      	ldr	r0, [pc, #40]	@ (800dba8 <siscanf+0x50>)
 800db7e:	9401      	str	r4, [sp, #4]
 800db80:	2300      	movs	r3, #0
 800db82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db84:	9314      	str	r3, [sp, #80]	@ 0x50
 800db86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db8e:	462a      	mov	r2, r5
 800db90:	4623      	mov	r3, r4
 800db92:	a902      	add	r1, sp, #8
 800db94:	6800      	ldr	r0, [r0, #0]
 800db96:	f000 fba1 	bl	800e2dc <__ssvfiscanf_r>
 800db9a:	b01c      	add	sp, #112	@ 0x70
 800db9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dba0:	b003      	add	sp, #12
 800dba2:	4770      	bx	lr
 800dba4:	0800dbcf 	.word	0x0800dbcf
 800dba8:	20000038 	.word	0x20000038

0800dbac <__sread>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	460c      	mov	r4, r1
 800dbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb4:	f000 f910 	bl	800ddd8 <_read_r>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	bfab      	itete	ge
 800dbbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800dbc0:	181b      	addge	r3, r3, r0
 800dbc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dbc6:	bfac      	ite	ge
 800dbc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dbca:	81a3      	strhlt	r3, [r4, #12]
 800dbcc:	bd10      	pop	{r4, pc}

0800dbce <__seofread>:
 800dbce:	2000      	movs	r0, #0
 800dbd0:	4770      	bx	lr

0800dbd2 <__swrite>:
 800dbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd6:	461f      	mov	r7, r3
 800dbd8:	898b      	ldrh	r3, [r1, #12]
 800dbda:	05db      	lsls	r3, r3, #23
 800dbdc:	4605      	mov	r5, r0
 800dbde:	460c      	mov	r4, r1
 800dbe0:	4616      	mov	r6, r2
 800dbe2:	d505      	bpl.n	800dbf0 <__swrite+0x1e>
 800dbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe8:	2302      	movs	r3, #2
 800dbea:	2200      	movs	r2, #0
 800dbec:	f000 f8e2 	bl	800ddb4 <_lseek_r>
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	4632      	mov	r2, r6
 800dbfe:	463b      	mov	r3, r7
 800dc00:	4628      	mov	r0, r5
 800dc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc06:	f000 b909 	b.w	800de1c <_write_r>

0800dc0a <__sseek>:
 800dc0a:	b510      	push	{r4, lr}
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc12:	f000 f8cf 	bl	800ddb4 <_lseek_r>
 800dc16:	1c43      	adds	r3, r0, #1
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	bf15      	itete	ne
 800dc1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc26:	81a3      	strheq	r3, [r4, #12]
 800dc28:	bf18      	it	ne
 800dc2a:	81a3      	strhne	r3, [r4, #12]
 800dc2c:	bd10      	pop	{r4, pc}

0800dc2e <__sclose>:
 800dc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc32:	f000 b8af 	b.w	800dd94 <_close_r>

0800dc36 <_vsniprintf_r>:
 800dc36:	b530      	push	{r4, r5, lr}
 800dc38:	4614      	mov	r4, r2
 800dc3a:	2c00      	cmp	r4, #0
 800dc3c:	b09b      	sub	sp, #108	@ 0x6c
 800dc3e:	4605      	mov	r5, r0
 800dc40:	461a      	mov	r2, r3
 800dc42:	da05      	bge.n	800dc50 <_vsniprintf_r+0x1a>
 800dc44:	238b      	movs	r3, #139	@ 0x8b
 800dc46:	6003      	str	r3, [r0, #0]
 800dc48:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4c:	b01b      	add	sp, #108	@ 0x6c
 800dc4e:	bd30      	pop	{r4, r5, pc}
 800dc50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc54:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dc58:	bf14      	ite	ne
 800dc5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc5e:	4623      	moveq	r3, r4
 800dc60:	9302      	str	r3, [sp, #8]
 800dc62:	9305      	str	r3, [sp, #20]
 800dc64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc68:	9100      	str	r1, [sp, #0]
 800dc6a:	9104      	str	r1, [sp, #16]
 800dc6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dc70:	4669      	mov	r1, sp
 800dc72:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dc74:	f000 f9de 	bl	800e034 <_svfiprintf_r>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	bfbc      	itt	lt
 800dc7c:	238b      	movlt	r3, #139	@ 0x8b
 800dc7e:	602b      	strlt	r3, [r5, #0]
 800dc80:	2c00      	cmp	r4, #0
 800dc82:	d0e3      	beq.n	800dc4c <_vsniprintf_r+0x16>
 800dc84:	9b00      	ldr	r3, [sp, #0]
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e7df      	b.n	800dc4c <_vsniprintf_r+0x16>

0800dc8c <vsniprintf>:
 800dc8c:	b507      	push	{r0, r1, r2, lr}
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	4613      	mov	r3, r2
 800dc92:	460a      	mov	r2, r1
 800dc94:	4601      	mov	r1, r0
 800dc96:	4803      	ldr	r0, [pc, #12]	@ (800dca4 <vsniprintf+0x18>)
 800dc98:	6800      	ldr	r0, [r0, #0]
 800dc9a:	f7ff ffcc 	bl	800dc36 <_vsniprintf_r>
 800dc9e:	b003      	add	sp, #12
 800dca0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dca4:	20000038 	.word	0x20000038

0800dca8 <memset>:
 800dca8:	4402      	add	r2, r0
 800dcaa:	4603      	mov	r3, r0
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d100      	bne.n	800dcb2 <memset+0xa>
 800dcb0:	4770      	bx	lr
 800dcb2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcb6:	e7f9      	b.n	800dcac <memset+0x4>

0800dcb8 <strncmp>:
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	b16a      	cbz	r2, 800dcd8 <strncmp+0x20>
 800dcbc:	3901      	subs	r1, #1
 800dcbe:	1884      	adds	r4, r0, r2
 800dcc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d103      	bne.n	800dcd4 <strncmp+0x1c>
 800dccc:	42a0      	cmp	r0, r4
 800dcce:	d001      	beq.n	800dcd4 <strncmp+0x1c>
 800dcd0:	2a00      	cmp	r2, #0
 800dcd2:	d1f5      	bne.n	800dcc0 <strncmp+0x8>
 800dcd4:	1ad0      	subs	r0, r2, r3
 800dcd6:	bd10      	pop	{r4, pc}
 800dcd8:	4610      	mov	r0, r2
 800dcda:	e7fc      	b.n	800dcd6 <strncmp+0x1e>

0800dcdc <strtok>:
 800dcdc:	4b16      	ldr	r3, [pc, #88]	@ (800dd38 <strtok+0x5c>)
 800dcde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce2:	681f      	ldr	r7, [r3, #0]
 800dce4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dce6:	4605      	mov	r5, r0
 800dce8:	460e      	mov	r6, r1
 800dcea:	b9ec      	cbnz	r4, 800dd28 <strtok+0x4c>
 800dcec:	2050      	movs	r0, #80	@ 0x50
 800dcee:	f7ff fd0d 	bl	800d70c <malloc>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	6478      	str	r0, [r7, #68]	@ 0x44
 800dcf6:	b920      	cbnz	r0, 800dd02 <strtok+0x26>
 800dcf8:	4b10      	ldr	r3, [pc, #64]	@ (800dd3c <strtok+0x60>)
 800dcfa:	4811      	ldr	r0, [pc, #68]	@ (800dd40 <strtok+0x64>)
 800dcfc:	215b      	movs	r1, #91	@ 0x5b
 800dcfe:	f000 f8d5 	bl	800deac <__assert_func>
 800dd02:	e9c0 4400 	strd	r4, r4, [r0]
 800dd06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dd0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dd0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dd12:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dd16:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dd1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dd1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dd22:	6184      	str	r4, [r0, #24]
 800dd24:	7704      	strb	r4, [r0, #28]
 800dd26:	6244      	str	r4, [r0, #36]	@ 0x24
 800dd28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd34:	f000 b806 	b.w	800dd44 <__strtok_r>
 800dd38:	20000038 	.word	0x20000038
 800dd3c:	080104cd 	.word	0x080104cd
 800dd40:	080104e4 	.word	0x080104e4

0800dd44 <__strtok_r>:
 800dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd46:	4604      	mov	r4, r0
 800dd48:	b908      	cbnz	r0, 800dd4e <__strtok_r+0xa>
 800dd4a:	6814      	ldr	r4, [r2, #0]
 800dd4c:	b144      	cbz	r4, 800dd60 <__strtok_r+0x1c>
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dd54:	460f      	mov	r7, r1
 800dd56:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dd5a:	b91e      	cbnz	r6, 800dd64 <__strtok_r+0x20>
 800dd5c:	b965      	cbnz	r5, 800dd78 <__strtok_r+0x34>
 800dd5e:	6015      	str	r5, [r2, #0]
 800dd60:	2000      	movs	r0, #0
 800dd62:	e005      	b.n	800dd70 <__strtok_r+0x2c>
 800dd64:	42b5      	cmp	r5, r6
 800dd66:	d1f6      	bne.n	800dd56 <__strtok_r+0x12>
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1f0      	bne.n	800dd4e <__strtok_r+0xa>
 800dd6c:	6014      	str	r4, [r2, #0]
 800dd6e:	7003      	strb	r3, [r0, #0]
 800dd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd72:	461c      	mov	r4, r3
 800dd74:	e00c      	b.n	800dd90 <__strtok_r+0x4c>
 800dd76:	b915      	cbnz	r5, 800dd7e <__strtok_r+0x3a>
 800dd78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd7c:	460e      	mov	r6, r1
 800dd7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dd82:	42ab      	cmp	r3, r5
 800dd84:	d1f7      	bne.n	800dd76 <__strtok_r+0x32>
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d0f3      	beq.n	800dd72 <__strtok_r+0x2e>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dd90:	6014      	str	r4, [r2, #0]
 800dd92:	e7ed      	b.n	800dd70 <__strtok_r+0x2c>

0800dd94 <_close_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	4d06      	ldr	r5, [pc, #24]	@ (800ddb0 <_close_r+0x1c>)
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4608      	mov	r0, r1
 800dd9e:	602b      	str	r3, [r5, #0]
 800dda0:	f7f5 fc12 	bl	80035c8 <_close>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_close_r+0x1a>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_close_r+0x1a>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	200057f8 	.word	0x200057f8

0800ddb4 <_lseek_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d07      	ldr	r5, [pc, #28]	@ (800ddd4 <_lseek_r+0x20>)
 800ddb8:	4604      	mov	r4, r0
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	602a      	str	r2, [r5, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f7f5 fc27 	bl	8003616 <_lseek>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_lseek_r+0x1e>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_lseek_r+0x1e>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	200057f8 	.word	0x200057f8

0800ddd8 <_read_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d07      	ldr	r5, [pc, #28]	@ (800ddf8 <_read_r+0x20>)
 800dddc:	4604      	mov	r4, r0
 800ddde:	4608      	mov	r0, r1
 800dde0:	4611      	mov	r1, r2
 800dde2:	2200      	movs	r2, #0
 800dde4:	602a      	str	r2, [r5, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	f7f5 fbb5 	bl	8003556 <_read>
 800ddec:	1c43      	adds	r3, r0, #1
 800ddee:	d102      	bne.n	800ddf6 <_read_r+0x1e>
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	b103      	cbz	r3, 800ddf6 <_read_r+0x1e>
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	bd38      	pop	{r3, r4, r5, pc}
 800ddf8:	200057f8 	.word	0x200057f8

0800ddfc <_sbrk_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	4d06      	ldr	r5, [pc, #24]	@ (800de18 <_sbrk_r+0x1c>)
 800de00:	2300      	movs	r3, #0
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	602b      	str	r3, [r5, #0]
 800de08:	f7f5 fc12 	bl	8003630 <_sbrk>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_sbrk_r+0x1a>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_sbrk_r+0x1a>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	200057f8 	.word	0x200057f8

0800de1c <_write_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4d07      	ldr	r5, [pc, #28]	@ (800de3c <_write_r+0x20>)
 800de20:	4604      	mov	r4, r0
 800de22:	4608      	mov	r0, r1
 800de24:	4611      	mov	r1, r2
 800de26:	2200      	movs	r2, #0
 800de28:	602a      	str	r2, [r5, #0]
 800de2a:	461a      	mov	r2, r3
 800de2c:	f7f5 fbb0 	bl	8003590 <_write>
 800de30:	1c43      	adds	r3, r0, #1
 800de32:	d102      	bne.n	800de3a <_write_r+0x1e>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	b103      	cbz	r3, 800de3a <_write_r+0x1e>
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	bd38      	pop	{r3, r4, r5, pc}
 800de3c:	200057f8 	.word	0x200057f8

0800de40 <__errno>:
 800de40:	4b01      	ldr	r3, [pc, #4]	@ (800de48 <__errno+0x8>)
 800de42:	6818      	ldr	r0, [r3, #0]
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	20000038 	.word	0x20000038

0800de4c <__libc_init_array>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	4d0d      	ldr	r5, [pc, #52]	@ (800de84 <__libc_init_array+0x38>)
 800de50:	4c0d      	ldr	r4, [pc, #52]	@ (800de88 <__libc_init_array+0x3c>)
 800de52:	1b64      	subs	r4, r4, r5
 800de54:	10a4      	asrs	r4, r4, #2
 800de56:	2600      	movs	r6, #0
 800de58:	42a6      	cmp	r6, r4
 800de5a:	d109      	bne.n	800de70 <__libc_init_array+0x24>
 800de5c:	4d0b      	ldr	r5, [pc, #44]	@ (800de8c <__libc_init_array+0x40>)
 800de5e:	4c0c      	ldr	r4, [pc, #48]	@ (800de90 <__libc_init_array+0x44>)
 800de60:	f001 fb30 	bl	800f4c4 <_init>
 800de64:	1b64      	subs	r4, r4, r5
 800de66:	10a4      	asrs	r4, r4, #2
 800de68:	2600      	movs	r6, #0
 800de6a:	42a6      	cmp	r6, r4
 800de6c:	d105      	bne.n	800de7a <__libc_init_array+0x2e>
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
 800de70:	f855 3b04 	ldr.w	r3, [r5], #4
 800de74:	4798      	blx	r3
 800de76:	3601      	adds	r6, #1
 800de78:	e7ee      	b.n	800de58 <__libc_init_array+0xc>
 800de7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de7e:	4798      	blx	r3
 800de80:	3601      	adds	r6, #1
 800de82:	e7f2      	b.n	800de6a <__libc_init_array+0x1e>
 800de84:	080105d0 	.word	0x080105d0
 800de88:	080105d0 	.word	0x080105d0
 800de8c:	080105d0 	.word	0x080105d0
 800de90:	080105d4 	.word	0x080105d4

0800de94 <__retarget_lock_init_recursive>:
 800de94:	4770      	bx	lr

0800de96 <__retarget_lock_acquire_recursive>:
 800de96:	4770      	bx	lr

0800de98 <__retarget_lock_release_recursive>:
 800de98:	4770      	bx	lr

0800de9a <strcpy>:
 800de9a:	4603      	mov	r3, r0
 800de9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dea0:	f803 2b01 	strb.w	r2, [r3], #1
 800dea4:	2a00      	cmp	r2, #0
 800dea6:	d1f9      	bne.n	800de9c <strcpy+0x2>
 800dea8:	4770      	bx	lr
	...

0800deac <__assert_func>:
 800deac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800deae:	4614      	mov	r4, r2
 800deb0:	461a      	mov	r2, r3
 800deb2:	4b09      	ldr	r3, [pc, #36]	@ (800ded8 <__assert_func+0x2c>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4605      	mov	r5, r0
 800deb8:	68d8      	ldr	r0, [r3, #12]
 800deba:	b954      	cbnz	r4, 800ded2 <__assert_func+0x26>
 800debc:	4b07      	ldr	r3, [pc, #28]	@ (800dedc <__assert_func+0x30>)
 800debe:	461c      	mov	r4, r3
 800dec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dec4:	9100      	str	r1, [sp, #0]
 800dec6:	462b      	mov	r3, r5
 800dec8:	4905      	ldr	r1, [pc, #20]	@ (800dee0 <__assert_func+0x34>)
 800deca:	f000 ff03 	bl	800ecd4 <fiprintf>
 800dece:	f000 ffae 	bl	800ee2e <abort>
 800ded2:	4b04      	ldr	r3, [pc, #16]	@ (800dee4 <__assert_func+0x38>)
 800ded4:	e7f4      	b.n	800dec0 <__assert_func+0x14>
 800ded6:	bf00      	nop
 800ded8:	20000038 	.word	0x20000038
 800dedc:	08010579 	.word	0x08010579
 800dee0:	0801054b 	.word	0x0801054b
 800dee4:	0801053e 	.word	0x0801053e

0800dee8 <_free_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	4605      	mov	r5, r0
 800deec:	2900      	cmp	r1, #0
 800deee:	d041      	beq.n	800df74 <_free_r+0x8c>
 800def0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def4:	1f0c      	subs	r4, r1, #4
 800def6:	2b00      	cmp	r3, #0
 800def8:	bfb8      	it	lt
 800defa:	18e4      	addlt	r4, r4, r3
 800defc:	f7ff fcb8 	bl	800d870 <__malloc_lock>
 800df00:	4a1d      	ldr	r2, [pc, #116]	@ (800df78 <_free_r+0x90>)
 800df02:	6813      	ldr	r3, [r2, #0]
 800df04:	b933      	cbnz	r3, 800df14 <_free_r+0x2c>
 800df06:	6063      	str	r3, [r4, #4]
 800df08:	6014      	str	r4, [r2, #0]
 800df0a:	4628      	mov	r0, r5
 800df0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df10:	f7ff bcb4 	b.w	800d87c <__malloc_unlock>
 800df14:	42a3      	cmp	r3, r4
 800df16:	d908      	bls.n	800df2a <_free_r+0x42>
 800df18:	6820      	ldr	r0, [r4, #0]
 800df1a:	1821      	adds	r1, r4, r0
 800df1c:	428b      	cmp	r3, r1
 800df1e:	bf01      	itttt	eq
 800df20:	6819      	ldreq	r1, [r3, #0]
 800df22:	685b      	ldreq	r3, [r3, #4]
 800df24:	1809      	addeq	r1, r1, r0
 800df26:	6021      	streq	r1, [r4, #0]
 800df28:	e7ed      	b.n	800df06 <_free_r+0x1e>
 800df2a:	461a      	mov	r2, r3
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b10b      	cbz	r3, 800df34 <_free_r+0x4c>
 800df30:	42a3      	cmp	r3, r4
 800df32:	d9fa      	bls.n	800df2a <_free_r+0x42>
 800df34:	6811      	ldr	r1, [r2, #0]
 800df36:	1850      	adds	r0, r2, r1
 800df38:	42a0      	cmp	r0, r4
 800df3a:	d10b      	bne.n	800df54 <_free_r+0x6c>
 800df3c:	6820      	ldr	r0, [r4, #0]
 800df3e:	4401      	add	r1, r0
 800df40:	1850      	adds	r0, r2, r1
 800df42:	4283      	cmp	r3, r0
 800df44:	6011      	str	r1, [r2, #0]
 800df46:	d1e0      	bne.n	800df0a <_free_r+0x22>
 800df48:	6818      	ldr	r0, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	6053      	str	r3, [r2, #4]
 800df4e:	4408      	add	r0, r1
 800df50:	6010      	str	r0, [r2, #0]
 800df52:	e7da      	b.n	800df0a <_free_r+0x22>
 800df54:	d902      	bls.n	800df5c <_free_r+0x74>
 800df56:	230c      	movs	r3, #12
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	e7d6      	b.n	800df0a <_free_r+0x22>
 800df5c:	6820      	ldr	r0, [r4, #0]
 800df5e:	1821      	adds	r1, r4, r0
 800df60:	428b      	cmp	r3, r1
 800df62:	bf04      	itt	eq
 800df64:	6819      	ldreq	r1, [r3, #0]
 800df66:	685b      	ldreq	r3, [r3, #4]
 800df68:	6063      	str	r3, [r4, #4]
 800df6a:	bf04      	itt	eq
 800df6c:	1809      	addeq	r1, r1, r0
 800df6e:	6021      	streq	r1, [r4, #0]
 800df70:	6054      	str	r4, [r2, #4]
 800df72:	e7ca      	b.n	800df0a <_free_r+0x22>
 800df74:	bd38      	pop	{r3, r4, r5, pc}
 800df76:	bf00      	nop
 800df78:	200056b8 	.word	0x200056b8

0800df7c <__ssputs_r>:
 800df7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df80:	688e      	ldr	r6, [r1, #8]
 800df82:	461f      	mov	r7, r3
 800df84:	42be      	cmp	r6, r7
 800df86:	680b      	ldr	r3, [r1, #0]
 800df88:	4682      	mov	sl, r0
 800df8a:	460c      	mov	r4, r1
 800df8c:	4690      	mov	r8, r2
 800df8e:	d82d      	bhi.n	800dfec <__ssputs_r+0x70>
 800df90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df98:	d026      	beq.n	800dfe8 <__ssputs_r+0x6c>
 800df9a:	6965      	ldr	r5, [r4, #20]
 800df9c:	6909      	ldr	r1, [r1, #16]
 800df9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfa2:	eba3 0901 	sub.w	r9, r3, r1
 800dfa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfaa:	1c7b      	adds	r3, r7, #1
 800dfac:	444b      	add	r3, r9
 800dfae:	106d      	asrs	r5, r5, #1
 800dfb0:	429d      	cmp	r5, r3
 800dfb2:	bf38      	it	cc
 800dfb4:	461d      	movcc	r5, r3
 800dfb6:	0553      	lsls	r3, r2, #21
 800dfb8:	d527      	bpl.n	800e00a <__ssputs_r+0x8e>
 800dfba:	4629      	mov	r1, r5
 800dfbc:	f7ff fbd8 	bl	800d770 <_malloc_r>
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	b360      	cbz	r0, 800e01e <__ssputs_r+0xa2>
 800dfc4:	6921      	ldr	r1, [r4, #16]
 800dfc6:	464a      	mov	r2, r9
 800dfc8:	f000 ff23 	bl	800ee12 <memcpy>
 800dfcc:	89a3      	ldrh	r3, [r4, #12]
 800dfce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfd6:	81a3      	strh	r3, [r4, #12]
 800dfd8:	6126      	str	r6, [r4, #16]
 800dfda:	6165      	str	r5, [r4, #20]
 800dfdc:	444e      	add	r6, r9
 800dfde:	eba5 0509 	sub.w	r5, r5, r9
 800dfe2:	6026      	str	r6, [r4, #0]
 800dfe4:	60a5      	str	r5, [r4, #8]
 800dfe6:	463e      	mov	r6, r7
 800dfe8:	42be      	cmp	r6, r7
 800dfea:	d900      	bls.n	800dfee <__ssputs_r+0x72>
 800dfec:	463e      	mov	r6, r7
 800dfee:	6820      	ldr	r0, [r4, #0]
 800dff0:	4632      	mov	r2, r6
 800dff2:	4641      	mov	r1, r8
 800dff4:	f000 fef3 	bl	800edde <memmove>
 800dff8:	68a3      	ldr	r3, [r4, #8]
 800dffa:	1b9b      	subs	r3, r3, r6
 800dffc:	60a3      	str	r3, [r4, #8]
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	4433      	add	r3, r6
 800e002:	6023      	str	r3, [r4, #0]
 800e004:	2000      	movs	r0, #0
 800e006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e00a:	462a      	mov	r2, r5
 800e00c:	f000 ff16 	bl	800ee3c <_realloc_r>
 800e010:	4606      	mov	r6, r0
 800e012:	2800      	cmp	r0, #0
 800e014:	d1e0      	bne.n	800dfd8 <__ssputs_r+0x5c>
 800e016:	6921      	ldr	r1, [r4, #16]
 800e018:	4650      	mov	r0, sl
 800e01a:	f7ff ff65 	bl	800dee8 <_free_r>
 800e01e:	230c      	movs	r3, #12
 800e020:	f8ca 3000 	str.w	r3, [sl]
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e02a:	81a3      	strh	r3, [r4, #12]
 800e02c:	f04f 30ff 	mov.w	r0, #4294967295
 800e030:	e7e9      	b.n	800e006 <__ssputs_r+0x8a>
	...

0800e034 <_svfiprintf_r>:
 800e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e038:	4698      	mov	r8, r3
 800e03a:	898b      	ldrh	r3, [r1, #12]
 800e03c:	061b      	lsls	r3, r3, #24
 800e03e:	b09d      	sub	sp, #116	@ 0x74
 800e040:	4607      	mov	r7, r0
 800e042:	460d      	mov	r5, r1
 800e044:	4614      	mov	r4, r2
 800e046:	d510      	bpl.n	800e06a <_svfiprintf_r+0x36>
 800e048:	690b      	ldr	r3, [r1, #16]
 800e04a:	b973      	cbnz	r3, 800e06a <_svfiprintf_r+0x36>
 800e04c:	2140      	movs	r1, #64	@ 0x40
 800e04e:	f7ff fb8f 	bl	800d770 <_malloc_r>
 800e052:	6028      	str	r0, [r5, #0]
 800e054:	6128      	str	r0, [r5, #16]
 800e056:	b930      	cbnz	r0, 800e066 <_svfiprintf_r+0x32>
 800e058:	230c      	movs	r3, #12
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	f04f 30ff 	mov.w	r0, #4294967295
 800e060:	b01d      	add	sp, #116	@ 0x74
 800e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e066:	2340      	movs	r3, #64	@ 0x40
 800e068:	616b      	str	r3, [r5, #20]
 800e06a:	2300      	movs	r3, #0
 800e06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e06e:	2320      	movs	r3, #32
 800e070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e074:	f8cd 800c 	str.w	r8, [sp, #12]
 800e078:	2330      	movs	r3, #48	@ 0x30
 800e07a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e218 <_svfiprintf_r+0x1e4>
 800e07e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e082:	f04f 0901 	mov.w	r9, #1
 800e086:	4623      	mov	r3, r4
 800e088:	469a      	mov	sl, r3
 800e08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e08e:	b10a      	cbz	r2, 800e094 <_svfiprintf_r+0x60>
 800e090:	2a25      	cmp	r2, #37	@ 0x25
 800e092:	d1f9      	bne.n	800e088 <_svfiprintf_r+0x54>
 800e094:	ebba 0b04 	subs.w	fp, sl, r4
 800e098:	d00b      	beq.n	800e0b2 <_svfiprintf_r+0x7e>
 800e09a:	465b      	mov	r3, fp
 800e09c:	4622      	mov	r2, r4
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f7ff ff6b 	bl	800df7c <__ssputs_r>
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	f000 80a7 	beq.w	800e1fa <_svfiprintf_r+0x1c6>
 800e0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ae:	445a      	add	r2, fp
 800e0b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f000 809f 	beq.w	800e1fa <_svfiprintf_r+0x1c6>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0c6:	f10a 0a01 	add.w	sl, sl, #1
 800e0ca:	9304      	str	r3, [sp, #16]
 800e0cc:	9307      	str	r3, [sp, #28]
 800e0ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0d4:	4654      	mov	r4, sl
 800e0d6:	2205      	movs	r2, #5
 800e0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0dc:	484e      	ldr	r0, [pc, #312]	@ (800e218 <_svfiprintf_r+0x1e4>)
 800e0de:	f7f2 f87f 	bl	80001e0 <memchr>
 800e0e2:	9a04      	ldr	r2, [sp, #16]
 800e0e4:	b9d8      	cbnz	r0, 800e11e <_svfiprintf_r+0xea>
 800e0e6:	06d0      	lsls	r0, r2, #27
 800e0e8:	bf44      	itt	mi
 800e0ea:	2320      	movmi	r3, #32
 800e0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0f0:	0711      	lsls	r1, r2, #28
 800e0f2:	bf44      	itt	mi
 800e0f4:	232b      	movmi	r3, #43	@ 0x2b
 800e0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e0fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e100:	d015      	beq.n	800e12e <_svfiprintf_r+0xfa>
 800e102:	9a07      	ldr	r2, [sp, #28]
 800e104:	4654      	mov	r4, sl
 800e106:	2000      	movs	r0, #0
 800e108:	f04f 0c0a 	mov.w	ip, #10
 800e10c:	4621      	mov	r1, r4
 800e10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e112:	3b30      	subs	r3, #48	@ 0x30
 800e114:	2b09      	cmp	r3, #9
 800e116:	d94b      	bls.n	800e1b0 <_svfiprintf_r+0x17c>
 800e118:	b1b0      	cbz	r0, 800e148 <_svfiprintf_r+0x114>
 800e11a:	9207      	str	r2, [sp, #28]
 800e11c:	e014      	b.n	800e148 <_svfiprintf_r+0x114>
 800e11e:	eba0 0308 	sub.w	r3, r0, r8
 800e122:	fa09 f303 	lsl.w	r3, r9, r3
 800e126:	4313      	orrs	r3, r2
 800e128:	9304      	str	r3, [sp, #16]
 800e12a:	46a2      	mov	sl, r4
 800e12c:	e7d2      	b.n	800e0d4 <_svfiprintf_r+0xa0>
 800e12e:	9b03      	ldr	r3, [sp, #12]
 800e130:	1d19      	adds	r1, r3, #4
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	9103      	str	r1, [sp, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	bfbb      	ittet	lt
 800e13a:	425b      	neglt	r3, r3
 800e13c:	f042 0202 	orrlt.w	r2, r2, #2
 800e140:	9307      	strge	r3, [sp, #28]
 800e142:	9307      	strlt	r3, [sp, #28]
 800e144:	bfb8      	it	lt
 800e146:	9204      	strlt	r2, [sp, #16]
 800e148:	7823      	ldrb	r3, [r4, #0]
 800e14a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e14c:	d10a      	bne.n	800e164 <_svfiprintf_r+0x130>
 800e14e:	7863      	ldrb	r3, [r4, #1]
 800e150:	2b2a      	cmp	r3, #42	@ 0x2a
 800e152:	d132      	bne.n	800e1ba <_svfiprintf_r+0x186>
 800e154:	9b03      	ldr	r3, [sp, #12]
 800e156:	1d1a      	adds	r2, r3, #4
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	9203      	str	r2, [sp, #12]
 800e15c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e160:	3402      	adds	r4, #2
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e228 <_svfiprintf_r+0x1f4>
 800e168:	7821      	ldrb	r1, [r4, #0]
 800e16a:	2203      	movs	r2, #3
 800e16c:	4650      	mov	r0, sl
 800e16e:	f7f2 f837 	bl	80001e0 <memchr>
 800e172:	b138      	cbz	r0, 800e184 <_svfiprintf_r+0x150>
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	eba0 000a 	sub.w	r0, r0, sl
 800e17a:	2240      	movs	r2, #64	@ 0x40
 800e17c:	4082      	lsls	r2, r0
 800e17e:	4313      	orrs	r3, r2
 800e180:	3401      	adds	r4, #1
 800e182:	9304      	str	r3, [sp, #16]
 800e184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e188:	4824      	ldr	r0, [pc, #144]	@ (800e21c <_svfiprintf_r+0x1e8>)
 800e18a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e18e:	2206      	movs	r2, #6
 800e190:	f7f2 f826 	bl	80001e0 <memchr>
 800e194:	2800      	cmp	r0, #0
 800e196:	d036      	beq.n	800e206 <_svfiprintf_r+0x1d2>
 800e198:	4b21      	ldr	r3, [pc, #132]	@ (800e220 <_svfiprintf_r+0x1ec>)
 800e19a:	bb1b      	cbnz	r3, 800e1e4 <_svfiprintf_r+0x1b0>
 800e19c:	9b03      	ldr	r3, [sp, #12]
 800e19e:	3307      	adds	r3, #7
 800e1a0:	f023 0307 	bic.w	r3, r3, #7
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	9303      	str	r3, [sp, #12]
 800e1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1aa:	4433      	add	r3, r6
 800e1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ae:	e76a      	b.n	800e086 <_svfiprintf_r+0x52>
 800e1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b4:	460c      	mov	r4, r1
 800e1b6:	2001      	movs	r0, #1
 800e1b8:	e7a8      	b.n	800e10c <_svfiprintf_r+0xd8>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	3401      	adds	r4, #1
 800e1be:	9305      	str	r3, [sp, #20]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	f04f 0c0a 	mov.w	ip, #10
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1cc:	3a30      	subs	r2, #48	@ 0x30
 800e1ce:	2a09      	cmp	r2, #9
 800e1d0:	d903      	bls.n	800e1da <_svfiprintf_r+0x1a6>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d0c6      	beq.n	800e164 <_svfiprintf_r+0x130>
 800e1d6:	9105      	str	r1, [sp, #20]
 800e1d8:	e7c4      	b.n	800e164 <_svfiprintf_r+0x130>
 800e1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1de:	4604      	mov	r4, r0
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e7f0      	b.n	800e1c6 <_svfiprintf_r+0x192>
 800e1e4:	ab03      	add	r3, sp, #12
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	462a      	mov	r2, r5
 800e1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e224 <_svfiprintf_r+0x1f0>)
 800e1ec:	a904      	add	r1, sp, #16
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	f3af 8000 	nop.w
 800e1f4:	1c42      	adds	r2, r0, #1
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	d1d6      	bne.n	800e1a8 <_svfiprintf_r+0x174>
 800e1fa:	89ab      	ldrh	r3, [r5, #12]
 800e1fc:	065b      	lsls	r3, r3, #25
 800e1fe:	f53f af2d 	bmi.w	800e05c <_svfiprintf_r+0x28>
 800e202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e204:	e72c      	b.n	800e060 <_svfiprintf_r+0x2c>
 800e206:	ab03      	add	r3, sp, #12
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	462a      	mov	r2, r5
 800e20c:	4b05      	ldr	r3, [pc, #20]	@ (800e224 <_svfiprintf_r+0x1f0>)
 800e20e:	a904      	add	r1, sp, #16
 800e210:	4638      	mov	r0, r7
 800e212:	f000 fa45 	bl	800e6a0 <_printf_i>
 800e216:	e7ed      	b.n	800e1f4 <_svfiprintf_r+0x1c0>
 800e218:	0801057a 	.word	0x0801057a
 800e21c:	08010584 	.word	0x08010584
 800e220:	00000000 	.word	0x00000000
 800e224:	0800df7d 	.word	0x0800df7d
 800e228:	08010580 	.word	0x08010580

0800e22c <_sungetc_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	1c4b      	adds	r3, r1, #1
 800e230:	4614      	mov	r4, r2
 800e232:	d103      	bne.n	800e23c <_sungetc_r+0x10>
 800e234:	f04f 35ff 	mov.w	r5, #4294967295
 800e238:	4628      	mov	r0, r5
 800e23a:	bd38      	pop	{r3, r4, r5, pc}
 800e23c:	8993      	ldrh	r3, [r2, #12]
 800e23e:	f023 0320 	bic.w	r3, r3, #32
 800e242:	8193      	strh	r3, [r2, #12]
 800e244:	6853      	ldr	r3, [r2, #4]
 800e246:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e248:	b2cd      	uxtb	r5, r1
 800e24a:	b18a      	cbz	r2, 800e270 <_sungetc_r+0x44>
 800e24c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e24e:	429a      	cmp	r2, r3
 800e250:	dd08      	ble.n	800e264 <_sungetc_r+0x38>
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	1e5a      	subs	r2, r3, #1
 800e256:	6022      	str	r2, [r4, #0]
 800e258:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	3301      	adds	r3, #1
 800e260:	6063      	str	r3, [r4, #4]
 800e262:	e7e9      	b.n	800e238 <_sungetc_r+0xc>
 800e264:	4621      	mov	r1, r4
 800e266:	f000 fd80 	bl	800ed6a <__submore>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d0f1      	beq.n	800e252 <_sungetc_r+0x26>
 800e26e:	e7e1      	b.n	800e234 <_sungetc_r+0x8>
 800e270:	6921      	ldr	r1, [r4, #16]
 800e272:	6822      	ldr	r2, [r4, #0]
 800e274:	b141      	cbz	r1, 800e288 <_sungetc_r+0x5c>
 800e276:	4291      	cmp	r1, r2
 800e278:	d206      	bcs.n	800e288 <_sungetc_r+0x5c>
 800e27a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e27e:	42a9      	cmp	r1, r5
 800e280:	d102      	bne.n	800e288 <_sungetc_r+0x5c>
 800e282:	3a01      	subs	r2, #1
 800e284:	6022      	str	r2, [r4, #0]
 800e286:	e7ea      	b.n	800e25e <_sungetc_r+0x32>
 800e288:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e28c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e290:	6363      	str	r3, [r4, #52]	@ 0x34
 800e292:	2303      	movs	r3, #3
 800e294:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e296:	4623      	mov	r3, r4
 800e298:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e7de      	b.n	800e260 <_sungetc_r+0x34>

0800e2a2 <__ssrefill_r>:
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e2a8:	b169      	cbz	r1, 800e2c6 <__ssrefill_r+0x24>
 800e2aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2ae:	4299      	cmp	r1, r3
 800e2b0:	d001      	beq.n	800e2b6 <__ssrefill_r+0x14>
 800e2b2:	f7ff fe19 	bl	800dee8 <_free_r>
 800e2b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2b8:	6063      	str	r3, [r4, #4]
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	6360      	str	r0, [r4, #52]	@ 0x34
 800e2be:	b113      	cbz	r3, 800e2c6 <__ssrefill_r+0x24>
 800e2c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e2c2:	6023      	str	r3, [r4, #0]
 800e2c4:	bd10      	pop	{r4, pc}
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	6063      	str	r3, [r4, #4]
 800e2ce:	89a3      	ldrh	r3, [r4, #12]
 800e2d0:	f043 0320 	orr.w	r3, r3, #32
 800e2d4:	81a3      	strh	r3, [r4, #12]
 800e2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2da:	e7f3      	b.n	800e2c4 <__ssrefill_r+0x22>

0800e2dc <__ssvfiscanf_r>:
 800e2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e2ec:	49a5      	ldr	r1, [pc, #660]	@ (800e584 <__ssvfiscanf_r+0x2a8>)
 800e2ee:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e2f0:	f10d 0804 	add.w	r8, sp, #4
 800e2f4:	49a4      	ldr	r1, [pc, #656]	@ (800e588 <__ssvfiscanf_r+0x2ac>)
 800e2f6:	4fa5      	ldr	r7, [pc, #660]	@ (800e58c <__ssvfiscanf_r+0x2b0>)
 800e2f8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e2fc:	4606      	mov	r6, r0
 800e2fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	7813      	ldrb	r3, [r2, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 8158 	beq.w	800e5ba <__ssvfiscanf_r+0x2de>
 800e30a:	5cf9      	ldrb	r1, [r7, r3]
 800e30c:	f011 0108 	ands.w	r1, r1, #8
 800e310:	f102 0501 	add.w	r5, r2, #1
 800e314:	d019      	beq.n	800e34a <__ssvfiscanf_r+0x6e>
 800e316:	6863      	ldr	r3, [r4, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	dd0f      	ble.n	800e33c <__ssvfiscanf_r+0x60>
 800e31c:	6823      	ldr	r3, [r4, #0]
 800e31e:	781a      	ldrb	r2, [r3, #0]
 800e320:	5cba      	ldrb	r2, [r7, r2]
 800e322:	0712      	lsls	r2, r2, #28
 800e324:	d401      	bmi.n	800e32a <__ssvfiscanf_r+0x4e>
 800e326:	462a      	mov	r2, r5
 800e328:	e7eb      	b.n	800e302 <__ssvfiscanf_r+0x26>
 800e32a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e32c:	3201      	adds	r2, #1
 800e32e:	9245      	str	r2, [sp, #276]	@ 0x114
 800e330:	6862      	ldr	r2, [r4, #4]
 800e332:	3301      	adds	r3, #1
 800e334:	3a01      	subs	r2, #1
 800e336:	6062      	str	r2, [r4, #4]
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	e7ec      	b.n	800e316 <__ssvfiscanf_r+0x3a>
 800e33c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e33e:	4621      	mov	r1, r4
 800e340:	4630      	mov	r0, r6
 800e342:	4798      	blx	r3
 800e344:	2800      	cmp	r0, #0
 800e346:	d0e9      	beq.n	800e31c <__ssvfiscanf_r+0x40>
 800e348:	e7ed      	b.n	800e326 <__ssvfiscanf_r+0x4a>
 800e34a:	2b25      	cmp	r3, #37	@ 0x25
 800e34c:	d012      	beq.n	800e374 <__ssvfiscanf_r+0x98>
 800e34e:	4699      	mov	r9, r3
 800e350:	6863      	ldr	r3, [r4, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	f340 8093 	ble.w	800e47e <__ssvfiscanf_r+0x1a2>
 800e358:	6822      	ldr	r2, [r4, #0]
 800e35a:	7813      	ldrb	r3, [r2, #0]
 800e35c:	454b      	cmp	r3, r9
 800e35e:	f040 812c 	bne.w	800e5ba <__ssvfiscanf_r+0x2de>
 800e362:	6863      	ldr	r3, [r4, #4]
 800e364:	3b01      	subs	r3, #1
 800e366:	6063      	str	r3, [r4, #4]
 800e368:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e36a:	3201      	adds	r2, #1
 800e36c:	3301      	adds	r3, #1
 800e36e:	6022      	str	r2, [r4, #0]
 800e370:	9345      	str	r3, [sp, #276]	@ 0x114
 800e372:	e7d8      	b.n	800e326 <__ssvfiscanf_r+0x4a>
 800e374:	9141      	str	r1, [sp, #260]	@ 0x104
 800e376:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e378:	7853      	ldrb	r3, [r2, #1]
 800e37a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e37c:	bf02      	ittt	eq
 800e37e:	2310      	moveq	r3, #16
 800e380:	1c95      	addeq	r5, r2, #2
 800e382:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e384:	220a      	movs	r2, #10
 800e386:	46a9      	mov	r9, r5
 800e388:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e38c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e390:	2b09      	cmp	r3, #9
 800e392:	d91e      	bls.n	800e3d2 <__ssvfiscanf_r+0xf6>
 800e394:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e590 <__ssvfiscanf_r+0x2b4>
 800e398:	2203      	movs	r2, #3
 800e39a:	4650      	mov	r0, sl
 800e39c:	f7f1 ff20 	bl	80001e0 <memchr>
 800e3a0:	b138      	cbz	r0, 800e3b2 <__ssvfiscanf_r+0xd6>
 800e3a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e3a4:	eba0 000a 	sub.w	r0, r0, sl
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	4083      	lsls	r3, r0
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	9341      	str	r3, [sp, #260]	@ 0x104
 800e3b0:	464d      	mov	r5, r9
 800e3b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e3b6:	2b78      	cmp	r3, #120	@ 0x78
 800e3b8:	d806      	bhi.n	800e3c8 <__ssvfiscanf_r+0xec>
 800e3ba:	2b57      	cmp	r3, #87	@ 0x57
 800e3bc:	d810      	bhi.n	800e3e0 <__ssvfiscanf_r+0x104>
 800e3be:	2b25      	cmp	r3, #37	@ 0x25
 800e3c0:	d0c5      	beq.n	800e34e <__ssvfiscanf_r+0x72>
 800e3c2:	d857      	bhi.n	800e474 <__ssvfiscanf_r+0x198>
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d065      	beq.n	800e494 <__ssvfiscanf_r+0x1b8>
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e3cc:	230a      	movs	r3, #10
 800e3ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800e3d0:	e078      	b.n	800e4c4 <__ssvfiscanf_r+0x1e8>
 800e3d2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e3d4:	fb02 1103 	mla	r1, r2, r3, r1
 800e3d8:	3930      	subs	r1, #48	@ 0x30
 800e3da:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e3dc:	464d      	mov	r5, r9
 800e3de:	e7d2      	b.n	800e386 <__ssvfiscanf_r+0xaa>
 800e3e0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e3e4:	2a20      	cmp	r2, #32
 800e3e6:	d8ef      	bhi.n	800e3c8 <__ssvfiscanf_r+0xec>
 800e3e8:	a101      	add	r1, pc, #4	@ (adr r1, 800e3f0 <__ssvfiscanf_r+0x114>)
 800e3ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e3ee:	bf00      	nop
 800e3f0:	0800e4a3 	.word	0x0800e4a3
 800e3f4:	0800e3c9 	.word	0x0800e3c9
 800e3f8:	0800e3c9 	.word	0x0800e3c9
 800e3fc:	0800e4fd 	.word	0x0800e4fd
 800e400:	0800e3c9 	.word	0x0800e3c9
 800e404:	0800e3c9 	.word	0x0800e3c9
 800e408:	0800e3c9 	.word	0x0800e3c9
 800e40c:	0800e3c9 	.word	0x0800e3c9
 800e410:	0800e3c9 	.word	0x0800e3c9
 800e414:	0800e3c9 	.word	0x0800e3c9
 800e418:	0800e3c9 	.word	0x0800e3c9
 800e41c:	0800e513 	.word	0x0800e513
 800e420:	0800e4f9 	.word	0x0800e4f9
 800e424:	0800e47b 	.word	0x0800e47b
 800e428:	0800e47b 	.word	0x0800e47b
 800e42c:	0800e47b 	.word	0x0800e47b
 800e430:	0800e3c9 	.word	0x0800e3c9
 800e434:	0800e4b5 	.word	0x0800e4b5
 800e438:	0800e3c9 	.word	0x0800e3c9
 800e43c:	0800e3c9 	.word	0x0800e3c9
 800e440:	0800e3c9 	.word	0x0800e3c9
 800e444:	0800e3c9 	.word	0x0800e3c9
 800e448:	0800e523 	.word	0x0800e523
 800e44c:	0800e4bd 	.word	0x0800e4bd
 800e450:	0800e49b 	.word	0x0800e49b
 800e454:	0800e3c9 	.word	0x0800e3c9
 800e458:	0800e3c9 	.word	0x0800e3c9
 800e45c:	0800e51f 	.word	0x0800e51f
 800e460:	0800e3c9 	.word	0x0800e3c9
 800e464:	0800e4f9 	.word	0x0800e4f9
 800e468:	0800e3c9 	.word	0x0800e3c9
 800e46c:	0800e3c9 	.word	0x0800e3c9
 800e470:	0800e4a3 	.word	0x0800e4a3
 800e474:	3b45      	subs	r3, #69	@ 0x45
 800e476:	2b02      	cmp	r3, #2
 800e478:	d8a6      	bhi.n	800e3c8 <__ssvfiscanf_r+0xec>
 800e47a:	2305      	movs	r3, #5
 800e47c:	e021      	b.n	800e4c2 <__ssvfiscanf_r+0x1e6>
 800e47e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e480:	4621      	mov	r1, r4
 800e482:	4630      	mov	r0, r6
 800e484:	4798      	blx	r3
 800e486:	2800      	cmp	r0, #0
 800e488:	f43f af66 	beq.w	800e358 <__ssvfiscanf_r+0x7c>
 800e48c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e48e:	2800      	cmp	r0, #0
 800e490:	f040 808b 	bne.w	800e5aa <__ssvfiscanf_r+0x2ce>
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	e08b      	b.n	800e5b2 <__ssvfiscanf_r+0x2d6>
 800e49a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e49c:	f042 0220 	orr.w	r2, r2, #32
 800e4a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800e4a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e4a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4a8:	9241      	str	r2, [sp, #260]	@ 0x104
 800e4aa:	2210      	movs	r2, #16
 800e4ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800e4ae:	9242      	str	r2, [sp, #264]	@ 0x108
 800e4b0:	d902      	bls.n	800e4b8 <__ssvfiscanf_r+0x1dc>
 800e4b2:	e005      	b.n	800e4c0 <__ssvfiscanf_r+0x1e4>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800e4b8:	2303      	movs	r3, #3
 800e4ba:	e002      	b.n	800e4c2 <__ssvfiscanf_r+0x1e6>
 800e4bc:	2308      	movs	r3, #8
 800e4be:	9342      	str	r3, [sp, #264]	@ 0x108
 800e4c0:	2304      	movs	r3, #4
 800e4c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e4c4:	6863      	ldr	r3, [r4, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	dd39      	ble.n	800e53e <__ssvfiscanf_r+0x262>
 800e4ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e4cc:	0659      	lsls	r1, r3, #25
 800e4ce:	d404      	bmi.n	800e4da <__ssvfiscanf_r+0x1fe>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	781a      	ldrb	r2, [r3, #0]
 800e4d4:	5cba      	ldrb	r2, [r7, r2]
 800e4d6:	0712      	lsls	r2, r2, #28
 800e4d8:	d438      	bmi.n	800e54c <__ssvfiscanf_r+0x270>
 800e4da:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	dc47      	bgt.n	800e570 <__ssvfiscanf_r+0x294>
 800e4e0:	466b      	mov	r3, sp
 800e4e2:	4622      	mov	r2, r4
 800e4e4:	a941      	add	r1, sp, #260	@ 0x104
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f000 f9fa 	bl	800e8e0 <_scanf_chars>
 800e4ec:	2801      	cmp	r0, #1
 800e4ee:	d064      	beq.n	800e5ba <__ssvfiscanf_r+0x2de>
 800e4f0:	2802      	cmp	r0, #2
 800e4f2:	f47f af18 	bne.w	800e326 <__ssvfiscanf_r+0x4a>
 800e4f6:	e7c9      	b.n	800e48c <__ssvfiscanf_r+0x1b0>
 800e4f8:	220a      	movs	r2, #10
 800e4fa:	e7d7      	b.n	800e4ac <__ssvfiscanf_r+0x1d0>
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	4640      	mov	r0, r8
 800e500:	f000 fbfa 	bl	800ecf8 <__sccl>
 800e504:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e50a:	9341      	str	r3, [sp, #260]	@ 0x104
 800e50c:	4605      	mov	r5, r0
 800e50e:	2301      	movs	r3, #1
 800e510:	e7d7      	b.n	800e4c2 <__ssvfiscanf_r+0x1e6>
 800e512:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e518:	9341      	str	r3, [sp, #260]	@ 0x104
 800e51a:	2300      	movs	r3, #0
 800e51c:	e7d1      	b.n	800e4c2 <__ssvfiscanf_r+0x1e6>
 800e51e:	2302      	movs	r3, #2
 800e520:	e7cf      	b.n	800e4c2 <__ssvfiscanf_r+0x1e6>
 800e522:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e524:	06c3      	lsls	r3, r0, #27
 800e526:	f53f aefe 	bmi.w	800e326 <__ssvfiscanf_r+0x4a>
 800e52a:	9b00      	ldr	r3, [sp, #0]
 800e52c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e52e:	1d19      	adds	r1, r3, #4
 800e530:	9100      	str	r1, [sp, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	07c0      	lsls	r0, r0, #31
 800e536:	bf4c      	ite	mi
 800e538:	801a      	strhmi	r2, [r3, #0]
 800e53a:	601a      	strpl	r2, [r3, #0]
 800e53c:	e6f3      	b.n	800e326 <__ssvfiscanf_r+0x4a>
 800e53e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e540:	4621      	mov	r1, r4
 800e542:	4630      	mov	r0, r6
 800e544:	4798      	blx	r3
 800e546:	2800      	cmp	r0, #0
 800e548:	d0bf      	beq.n	800e4ca <__ssvfiscanf_r+0x1ee>
 800e54a:	e79f      	b.n	800e48c <__ssvfiscanf_r+0x1b0>
 800e54c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e54e:	3201      	adds	r2, #1
 800e550:	9245      	str	r2, [sp, #276]	@ 0x114
 800e552:	6862      	ldr	r2, [r4, #4]
 800e554:	3a01      	subs	r2, #1
 800e556:	2a00      	cmp	r2, #0
 800e558:	6062      	str	r2, [r4, #4]
 800e55a:	dd02      	ble.n	800e562 <__ssvfiscanf_r+0x286>
 800e55c:	3301      	adds	r3, #1
 800e55e:	6023      	str	r3, [r4, #0]
 800e560:	e7b6      	b.n	800e4d0 <__ssvfiscanf_r+0x1f4>
 800e562:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e564:	4621      	mov	r1, r4
 800e566:	4630      	mov	r0, r6
 800e568:	4798      	blx	r3
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d0b0      	beq.n	800e4d0 <__ssvfiscanf_r+0x1f4>
 800e56e:	e78d      	b.n	800e48c <__ssvfiscanf_r+0x1b0>
 800e570:	2b04      	cmp	r3, #4
 800e572:	dc0f      	bgt.n	800e594 <__ssvfiscanf_r+0x2b8>
 800e574:	466b      	mov	r3, sp
 800e576:	4622      	mov	r2, r4
 800e578:	a941      	add	r1, sp, #260	@ 0x104
 800e57a:	4630      	mov	r0, r6
 800e57c:	f000 fa0a 	bl	800e994 <_scanf_i>
 800e580:	e7b4      	b.n	800e4ec <__ssvfiscanf_r+0x210>
 800e582:	bf00      	nop
 800e584:	0800e22d 	.word	0x0800e22d
 800e588:	0800e2a3 	.word	0x0800e2a3
 800e58c:	080103cd 	.word	0x080103cd
 800e590:	08010580 	.word	0x08010580
 800e594:	4b0a      	ldr	r3, [pc, #40]	@ (800e5c0 <__ssvfiscanf_r+0x2e4>)
 800e596:	2b00      	cmp	r3, #0
 800e598:	f43f aec5 	beq.w	800e326 <__ssvfiscanf_r+0x4a>
 800e59c:	466b      	mov	r3, sp
 800e59e:	4622      	mov	r2, r4
 800e5a0:	a941      	add	r1, sp, #260	@ 0x104
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f3af 8000 	nop.w
 800e5a8:	e7a0      	b.n	800e4ec <__ssvfiscanf_r+0x210>
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	065b      	lsls	r3, r3, #25
 800e5ae:	f53f af71 	bmi.w	800e494 <__ssvfiscanf_r+0x1b8>
 800e5b2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e5bc:	e7f9      	b.n	800e5b2 <__ssvfiscanf_r+0x2d6>
 800e5be:	bf00      	nop
 800e5c0:	00000000 	.word	0x00000000

0800e5c4 <_printf_common>:
 800e5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c8:	4616      	mov	r6, r2
 800e5ca:	4698      	mov	r8, r3
 800e5cc:	688a      	ldr	r2, [r1, #8]
 800e5ce:	690b      	ldr	r3, [r1, #16]
 800e5d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	bfb8      	it	lt
 800e5d8:	4613      	movlt	r3, r2
 800e5da:	6033      	str	r3, [r6, #0]
 800e5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	b10a      	cbz	r2, 800e5ea <_printf_common+0x26>
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	6033      	str	r3, [r6, #0]
 800e5ea:	6823      	ldr	r3, [r4, #0]
 800e5ec:	0699      	lsls	r1, r3, #26
 800e5ee:	bf42      	ittt	mi
 800e5f0:	6833      	ldrmi	r3, [r6, #0]
 800e5f2:	3302      	addmi	r3, #2
 800e5f4:	6033      	strmi	r3, [r6, #0]
 800e5f6:	6825      	ldr	r5, [r4, #0]
 800e5f8:	f015 0506 	ands.w	r5, r5, #6
 800e5fc:	d106      	bne.n	800e60c <_printf_common+0x48>
 800e5fe:	f104 0a19 	add.w	sl, r4, #25
 800e602:	68e3      	ldr	r3, [r4, #12]
 800e604:	6832      	ldr	r2, [r6, #0]
 800e606:	1a9b      	subs	r3, r3, r2
 800e608:	42ab      	cmp	r3, r5
 800e60a:	dc26      	bgt.n	800e65a <_printf_common+0x96>
 800e60c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e610:	6822      	ldr	r2, [r4, #0]
 800e612:	3b00      	subs	r3, #0
 800e614:	bf18      	it	ne
 800e616:	2301      	movne	r3, #1
 800e618:	0692      	lsls	r2, r2, #26
 800e61a:	d42b      	bmi.n	800e674 <_printf_common+0xb0>
 800e61c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e620:	4641      	mov	r1, r8
 800e622:	4638      	mov	r0, r7
 800e624:	47c8      	blx	r9
 800e626:	3001      	adds	r0, #1
 800e628:	d01e      	beq.n	800e668 <_printf_common+0xa4>
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	6922      	ldr	r2, [r4, #16]
 800e62e:	f003 0306 	and.w	r3, r3, #6
 800e632:	2b04      	cmp	r3, #4
 800e634:	bf02      	ittt	eq
 800e636:	68e5      	ldreq	r5, [r4, #12]
 800e638:	6833      	ldreq	r3, [r6, #0]
 800e63a:	1aed      	subeq	r5, r5, r3
 800e63c:	68a3      	ldr	r3, [r4, #8]
 800e63e:	bf0c      	ite	eq
 800e640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e644:	2500      	movne	r5, #0
 800e646:	4293      	cmp	r3, r2
 800e648:	bfc4      	itt	gt
 800e64a:	1a9b      	subgt	r3, r3, r2
 800e64c:	18ed      	addgt	r5, r5, r3
 800e64e:	2600      	movs	r6, #0
 800e650:	341a      	adds	r4, #26
 800e652:	42b5      	cmp	r5, r6
 800e654:	d11a      	bne.n	800e68c <_printf_common+0xc8>
 800e656:	2000      	movs	r0, #0
 800e658:	e008      	b.n	800e66c <_printf_common+0xa8>
 800e65a:	2301      	movs	r3, #1
 800e65c:	4652      	mov	r2, sl
 800e65e:	4641      	mov	r1, r8
 800e660:	4638      	mov	r0, r7
 800e662:	47c8      	blx	r9
 800e664:	3001      	adds	r0, #1
 800e666:	d103      	bne.n	800e670 <_printf_common+0xac>
 800e668:	f04f 30ff 	mov.w	r0, #4294967295
 800e66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e670:	3501      	adds	r5, #1
 800e672:	e7c6      	b.n	800e602 <_printf_common+0x3e>
 800e674:	18e1      	adds	r1, r4, r3
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	2030      	movs	r0, #48	@ 0x30
 800e67a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e67e:	4422      	add	r2, r4
 800e680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e688:	3302      	adds	r3, #2
 800e68a:	e7c7      	b.n	800e61c <_printf_common+0x58>
 800e68c:	2301      	movs	r3, #1
 800e68e:	4622      	mov	r2, r4
 800e690:	4641      	mov	r1, r8
 800e692:	4638      	mov	r0, r7
 800e694:	47c8      	blx	r9
 800e696:	3001      	adds	r0, #1
 800e698:	d0e6      	beq.n	800e668 <_printf_common+0xa4>
 800e69a:	3601      	adds	r6, #1
 800e69c:	e7d9      	b.n	800e652 <_printf_common+0x8e>
	...

0800e6a0 <_printf_i>:
 800e6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a4:	7e0f      	ldrb	r7, [r1, #24]
 800e6a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6a8:	2f78      	cmp	r7, #120	@ 0x78
 800e6aa:	4691      	mov	r9, r2
 800e6ac:	4680      	mov	r8, r0
 800e6ae:	460c      	mov	r4, r1
 800e6b0:	469a      	mov	sl, r3
 800e6b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6b6:	d807      	bhi.n	800e6c8 <_printf_i+0x28>
 800e6b8:	2f62      	cmp	r7, #98	@ 0x62
 800e6ba:	d80a      	bhi.n	800e6d2 <_printf_i+0x32>
 800e6bc:	2f00      	cmp	r7, #0
 800e6be:	f000 80d2 	beq.w	800e866 <_printf_i+0x1c6>
 800e6c2:	2f58      	cmp	r7, #88	@ 0x58
 800e6c4:	f000 80b9 	beq.w	800e83a <_printf_i+0x19a>
 800e6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6d0:	e03a      	b.n	800e748 <_printf_i+0xa8>
 800e6d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6d6:	2b15      	cmp	r3, #21
 800e6d8:	d8f6      	bhi.n	800e6c8 <_printf_i+0x28>
 800e6da:	a101      	add	r1, pc, #4	@ (adr r1, 800e6e0 <_printf_i+0x40>)
 800e6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6e0:	0800e739 	.word	0x0800e739
 800e6e4:	0800e74d 	.word	0x0800e74d
 800e6e8:	0800e6c9 	.word	0x0800e6c9
 800e6ec:	0800e6c9 	.word	0x0800e6c9
 800e6f0:	0800e6c9 	.word	0x0800e6c9
 800e6f4:	0800e6c9 	.word	0x0800e6c9
 800e6f8:	0800e74d 	.word	0x0800e74d
 800e6fc:	0800e6c9 	.word	0x0800e6c9
 800e700:	0800e6c9 	.word	0x0800e6c9
 800e704:	0800e6c9 	.word	0x0800e6c9
 800e708:	0800e6c9 	.word	0x0800e6c9
 800e70c:	0800e84d 	.word	0x0800e84d
 800e710:	0800e777 	.word	0x0800e777
 800e714:	0800e807 	.word	0x0800e807
 800e718:	0800e6c9 	.word	0x0800e6c9
 800e71c:	0800e6c9 	.word	0x0800e6c9
 800e720:	0800e86f 	.word	0x0800e86f
 800e724:	0800e6c9 	.word	0x0800e6c9
 800e728:	0800e777 	.word	0x0800e777
 800e72c:	0800e6c9 	.word	0x0800e6c9
 800e730:	0800e6c9 	.word	0x0800e6c9
 800e734:	0800e80f 	.word	0x0800e80f
 800e738:	6833      	ldr	r3, [r6, #0]
 800e73a:	1d1a      	adds	r2, r3, #4
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	6032      	str	r2, [r6, #0]
 800e740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e748:	2301      	movs	r3, #1
 800e74a:	e09d      	b.n	800e888 <_printf_i+0x1e8>
 800e74c:	6833      	ldr	r3, [r6, #0]
 800e74e:	6820      	ldr	r0, [r4, #0]
 800e750:	1d19      	adds	r1, r3, #4
 800e752:	6031      	str	r1, [r6, #0]
 800e754:	0606      	lsls	r6, r0, #24
 800e756:	d501      	bpl.n	800e75c <_printf_i+0xbc>
 800e758:	681d      	ldr	r5, [r3, #0]
 800e75a:	e003      	b.n	800e764 <_printf_i+0xc4>
 800e75c:	0645      	lsls	r5, r0, #25
 800e75e:	d5fb      	bpl.n	800e758 <_printf_i+0xb8>
 800e760:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e764:	2d00      	cmp	r5, #0
 800e766:	da03      	bge.n	800e770 <_printf_i+0xd0>
 800e768:	232d      	movs	r3, #45	@ 0x2d
 800e76a:	426d      	negs	r5, r5
 800e76c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e770:	4859      	ldr	r0, [pc, #356]	@ (800e8d8 <_printf_i+0x238>)
 800e772:	230a      	movs	r3, #10
 800e774:	e011      	b.n	800e79a <_printf_i+0xfa>
 800e776:	6821      	ldr	r1, [r4, #0]
 800e778:	6833      	ldr	r3, [r6, #0]
 800e77a:	0608      	lsls	r0, r1, #24
 800e77c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e780:	d402      	bmi.n	800e788 <_printf_i+0xe8>
 800e782:	0649      	lsls	r1, r1, #25
 800e784:	bf48      	it	mi
 800e786:	b2ad      	uxthmi	r5, r5
 800e788:	2f6f      	cmp	r7, #111	@ 0x6f
 800e78a:	4853      	ldr	r0, [pc, #332]	@ (800e8d8 <_printf_i+0x238>)
 800e78c:	6033      	str	r3, [r6, #0]
 800e78e:	bf14      	ite	ne
 800e790:	230a      	movne	r3, #10
 800e792:	2308      	moveq	r3, #8
 800e794:	2100      	movs	r1, #0
 800e796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e79a:	6866      	ldr	r6, [r4, #4]
 800e79c:	60a6      	str	r6, [r4, #8]
 800e79e:	2e00      	cmp	r6, #0
 800e7a0:	bfa2      	ittt	ge
 800e7a2:	6821      	ldrge	r1, [r4, #0]
 800e7a4:	f021 0104 	bicge.w	r1, r1, #4
 800e7a8:	6021      	strge	r1, [r4, #0]
 800e7aa:	b90d      	cbnz	r5, 800e7b0 <_printf_i+0x110>
 800e7ac:	2e00      	cmp	r6, #0
 800e7ae:	d04b      	beq.n	800e848 <_printf_i+0x1a8>
 800e7b0:	4616      	mov	r6, r2
 800e7b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7b6:	fb03 5711 	mls	r7, r3, r1, r5
 800e7ba:	5dc7      	ldrb	r7, [r0, r7]
 800e7bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7c0:	462f      	mov	r7, r5
 800e7c2:	42bb      	cmp	r3, r7
 800e7c4:	460d      	mov	r5, r1
 800e7c6:	d9f4      	bls.n	800e7b2 <_printf_i+0x112>
 800e7c8:	2b08      	cmp	r3, #8
 800e7ca:	d10b      	bne.n	800e7e4 <_printf_i+0x144>
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	07df      	lsls	r7, r3, #31
 800e7d0:	d508      	bpl.n	800e7e4 <_printf_i+0x144>
 800e7d2:	6923      	ldr	r3, [r4, #16]
 800e7d4:	6861      	ldr	r1, [r4, #4]
 800e7d6:	4299      	cmp	r1, r3
 800e7d8:	bfde      	ittt	le
 800e7da:	2330      	movle	r3, #48	@ 0x30
 800e7dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7e4:	1b92      	subs	r2, r2, r6
 800e7e6:	6122      	str	r2, [r4, #16]
 800e7e8:	f8cd a000 	str.w	sl, [sp]
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	aa03      	add	r2, sp, #12
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	f7ff fee6 	bl	800e5c4 <_printf_common>
 800e7f8:	3001      	adds	r0, #1
 800e7fa:	d14a      	bne.n	800e892 <_printf_i+0x1f2>
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	b004      	add	sp, #16
 800e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	f043 0320 	orr.w	r3, r3, #32
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	4833      	ldr	r0, [pc, #204]	@ (800e8dc <_printf_i+0x23c>)
 800e810:	2778      	movs	r7, #120	@ 0x78
 800e812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e816:	6823      	ldr	r3, [r4, #0]
 800e818:	6831      	ldr	r1, [r6, #0]
 800e81a:	061f      	lsls	r7, r3, #24
 800e81c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e820:	d402      	bmi.n	800e828 <_printf_i+0x188>
 800e822:	065f      	lsls	r7, r3, #25
 800e824:	bf48      	it	mi
 800e826:	b2ad      	uxthmi	r5, r5
 800e828:	6031      	str	r1, [r6, #0]
 800e82a:	07d9      	lsls	r1, r3, #31
 800e82c:	bf44      	itt	mi
 800e82e:	f043 0320 	orrmi.w	r3, r3, #32
 800e832:	6023      	strmi	r3, [r4, #0]
 800e834:	b11d      	cbz	r5, 800e83e <_printf_i+0x19e>
 800e836:	2310      	movs	r3, #16
 800e838:	e7ac      	b.n	800e794 <_printf_i+0xf4>
 800e83a:	4827      	ldr	r0, [pc, #156]	@ (800e8d8 <_printf_i+0x238>)
 800e83c:	e7e9      	b.n	800e812 <_printf_i+0x172>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	f023 0320 	bic.w	r3, r3, #32
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	e7f6      	b.n	800e836 <_printf_i+0x196>
 800e848:	4616      	mov	r6, r2
 800e84a:	e7bd      	b.n	800e7c8 <_printf_i+0x128>
 800e84c:	6833      	ldr	r3, [r6, #0]
 800e84e:	6825      	ldr	r5, [r4, #0]
 800e850:	6961      	ldr	r1, [r4, #20]
 800e852:	1d18      	adds	r0, r3, #4
 800e854:	6030      	str	r0, [r6, #0]
 800e856:	062e      	lsls	r6, r5, #24
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	d501      	bpl.n	800e860 <_printf_i+0x1c0>
 800e85c:	6019      	str	r1, [r3, #0]
 800e85e:	e002      	b.n	800e866 <_printf_i+0x1c6>
 800e860:	0668      	lsls	r0, r5, #25
 800e862:	d5fb      	bpl.n	800e85c <_printf_i+0x1bc>
 800e864:	8019      	strh	r1, [r3, #0]
 800e866:	2300      	movs	r3, #0
 800e868:	6123      	str	r3, [r4, #16]
 800e86a:	4616      	mov	r6, r2
 800e86c:	e7bc      	b.n	800e7e8 <_printf_i+0x148>
 800e86e:	6833      	ldr	r3, [r6, #0]
 800e870:	1d1a      	adds	r2, r3, #4
 800e872:	6032      	str	r2, [r6, #0]
 800e874:	681e      	ldr	r6, [r3, #0]
 800e876:	6862      	ldr	r2, [r4, #4]
 800e878:	2100      	movs	r1, #0
 800e87a:	4630      	mov	r0, r6
 800e87c:	f7f1 fcb0 	bl	80001e0 <memchr>
 800e880:	b108      	cbz	r0, 800e886 <_printf_i+0x1e6>
 800e882:	1b80      	subs	r0, r0, r6
 800e884:	6060      	str	r0, [r4, #4]
 800e886:	6863      	ldr	r3, [r4, #4]
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	2300      	movs	r3, #0
 800e88c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e890:	e7aa      	b.n	800e7e8 <_printf_i+0x148>
 800e892:	6923      	ldr	r3, [r4, #16]
 800e894:	4632      	mov	r2, r6
 800e896:	4649      	mov	r1, r9
 800e898:	4640      	mov	r0, r8
 800e89a:	47d0      	blx	sl
 800e89c:	3001      	adds	r0, #1
 800e89e:	d0ad      	beq.n	800e7fc <_printf_i+0x15c>
 800e8a0:	6823      	ldr	r3, [r4, #0]
 800e8a2:	079b      	lsls	r3, r3, #30
 800e8a4:	d413      	bmi.n	800e8ce <_printf_i+0x22e>
 800e8a6:	68e0      	ldr	r0, [r4, #12]
 800e8a8:	9b03      	ldr	r3, [sp, #12]
 800e8aa:	4298      	cmp	r0, r3
 800e8ac:	bfb8      	it	lt
 800e8ae:	4618      	movlt	r0, r3
 800e8b0:	e7a6      	b.n	800e800 <_printf_i+0x160>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	4632      	mov	r2, r6
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	47d0      	blx	sl
 800e8bc:	3001      	adds	r0, #1
 800e8be:	d09d      	beq.n	800e7fc <_printf_i+0x15c>
 800e8c0:	3501      	adds	r5, #1
 800e8c2:	68e3      	ldr	r3, [r4, #12]
 800e8c4:	9903      	ldr	r1, [sp, #12]
 800e8c6:	1a5b      	subs	r3, r3, r1
 800e8c8:	42ab      	cmp	r3, r5
 800e8ca:	dcf2      	bgt.n	800e8b2 <_printf_i+0x212>
 800e8cc:	e7eb      	b.n	800e8a6 <_printf_i+0x206>
 800e8ce:	2500      	movs	r5, #0
 800e8d0:	f104 0619 	add.w	r6, r4, #25
 800e8d4:	e7f5      	b.n	800e8c2 <_printf_i+0x222>
 800e8d6:	bf00      	nop
 800e8d8:	0801058b 	.word	0x0801058b
 800e8dc:	0801059c 	.word	0x0801059c

0800e8e0 <_scanf_chars>:
 800e8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e4:	4615      	mov	r5, r2
 800e8e6:	688a      	ldr	r2, [r1, #8]
 800e8e8:	4680      	mov	r8, r0
 800e8ea:	460c      	mov	r4, r1
 800e8ec:	b932      	cbnz	r2, 800e8fc <_scanf_chars+0x1c>
 800e8ee:	698a      	ldr	r2, [r1, #24]
 800e8f0:	2a00      	cmp	r2, #0
 800e8f2:	bf14      	ite	ne
 800e8f4:	f04f 32ff 	movne.w	r2, #4294967295
 800e8f8:	2201      	moveq	r2, #1
 800e8fa:	608a      	str	r2, [r1, #8]
 800e8fc:	6822      	ldr	r2, [r4, #0]
 800e8fe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e990 <_scanf_chars+0xb0>
 800e902:	06d1      	lsls	r1, r2, #27
 800e904:	bf5f      	itttt	pl
 800e906:	681a      	ldrpl	r2, [r3, #0]
 800e908:	1d11      	addpl	r1, r2, #4
 800e90a:	6019      	strpl	r1, [r3, #0]
 800e90c:	6816      	ldrpl	r6, [r2, #0]
 800e90e:	2700      	movs	r7, #0
 800e910:	69a0      	ldr	r0, [r4, #24]
 800e912:	b188      	cbz	r0, 800e938 <_scanf_chars+0x58>
 800e914:	2801      	cmp	r0, #1
 800e916:	d107      	bne.n	800e928 <_scanf_chars+0x48>
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	781a      	ldrb	r2, [r3, #0]
 800e91c:	6963      	ldr	r3, [r4, #20]
 800e91e:	5c9b      	ldrb	r3, [r3, r2]
 800e920:	b953      	cbnz	r3, 800e938 <_scanf_chars+0x58>
 800e922:	2f00      	cmp	r7, #0
 800e924:	d031      	beq.n	800e98a <_scanf_chars+0xaa>
 800e926:	e022      	b.n	800e96e <_scanf_chars+0x8e>
 800e928:	2802      	cmp	r0, #2
 800e92a:	d120      	bne.n	800e96e <_scanf_chars+0x8e>
 800e92c:	682b      	ldr	r3, [r5, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e934:	071b      	lsls	r3, r3, #28
 800e936:	d41a      	bmi.n	800e96e <_scanf_chars+0x8e>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	06da      	lsls	r2, r3, #27
 800e93c:	bf5e      	ittt	pl
 800e93e:	682b      	ldrpl	r3, [r5, #0]
 800e940:	781b      	ldrbpl	r3, [r3, #0]
 800e942:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e946:	682a      	ldr	r2, [r5, #0]
 800e948:	686b      	ldr	r3, [r5, #4]
 800e94a:	3201      	adds	r2, #1
 800e94c:	602a      	str	r2, [r5, #0]
 800e94e:	68a2      	ldr	r2, [r4, #8]
 800e950:	3b01      	subs	r3, #1
 800e952:	3a01      	subs	r2, #1
 800e954:	606b      	str	r3, [r5, #4]
 800e956:	3701      	adds	r7, #1
 800e958:	60a2      	str	r2, [r4, #8]
 800e95a:	b142      	cbz	r2, 800e96e <_scanf_chars+0x8e>
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dcd7      	bgt.n	800e910 <_scanf_chars+0x30>
 800e960:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e964:	4629      	mov	r1, r5
 800e966:	4640      	mov	r0, r8
 800e968:	4798      	blx	r3
 800e96a:	2800      	cmp	r0, #0
 800e96c:	d0d0      	beq.n	800e910 <_scanf_chars+0x30>
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	f013 0310 	ands.w	r3, r3, #16
 800e974:	d105      	bne.n	800e982 <_scanf_chars+0xa2>
 800e976:	68e2      	ldr	r2, [r4, #12]
 800e978:	3201      	adds	r2, #1
 800e97a:	60e2      	str	r2, [r4, #12]
 800e97c:	69a2      	ldr	r2, [r4, #24]
 800e97e:	b102      	cbz	r2, 800e982 <_scanf_chars+0xa2>
 800e980:	7033      	strb	r3, [r6, #0]
 800e982:	6923      	ldr	r3, [r4, #16]
 800e984:	443b      	add	r3, r7
 800e986:	6123      	str	r3, [r4, #16]
 800e988:	2000      	movs	r0, #0
 800e98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e98e:	bf00      	nop
 800e990:	080103cd 	.word	0x080103cd

0800e994 <_scanf_i>:
 800e994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e998:	4698      	mov	r8, r3
 800e99a:	4b74      	ldr	r3, [pc, #464]	@ (800eb6c <_scanf_i+0x1d8>)
 800e99c:	460c      	mov	r4, r1
 800e99e:	4682      	mov	sl, r0
 800e9a0:	4616      	mov	r6, r2
 800e9a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	ab03      	add	r3, sp, #12
 800e9aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e9ae:	4b70      	ldr	r3, [pc, #448]	@ (800eb70 <_scanf_i+0x1dc>)
 800e9b0:	69a1      	ldr	r1, [r4, #24]
 800e9b2:	4a70      	ldr	r2, [pc, #448]	@ (800eb74 <_scanf_i+0x1e0>)
 800e9b4:	2903      	cmp	r1, #3
 800e9b6:	bf08      	it	eq
 800e9b8:	461a      	moveq	r2, r3
 800e9ba:	68a3      	ldr	r3, [r4, #8]
 800e9bc:	9201      	str	r2, [sp, #4]
 800e9be:	1e5a      	subs	r2, r3, #1
 800e9c0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e9c4:	bf88      	it	hi
 800e9c6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e9ca:	4627      	mov	r7, r4
 800e9cc:	bf82      	ittt	hi
 800e9ce:	eb03 0905 	addhi.w	r9, r3, r5
 800e9d2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e9d6:	60a3      	strhi	r3, [r4, #8]
 800e9d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e9dc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e9e0:	bf98      	it	ls
 800e9e2:	f04f 0900 	movls.w	r9, #0
 800e9e6:	6023      	str	r3, [r4, #0]
 800e9e8:	463d      	mov	r5, r7
 800e9ea:	f04f 0b00 	mov.w	fp, #0
 800e9ee:	6831      	ldr	r1, [r6, #0]
 800e9f0:	ab03      	add	r3, sp, #12
 800e9f2:	7809      	ldrb	r1, [r1, #0]
 800e9f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e9f8:	2202      	movs	r2, #2
 800e9fa:	f7f1 fbf1 	bl	80001e0 <memchr>
 800e9fe:	b328      	cbz	r0, 800ea4c <_scanf_i+0xb8>
 800ea00:	f1bb 0f01 	cmp.w	fp, #1
 800ea04:	d159      	bne.n	800eaba <_scanf_i+0x126>
 800ea06:	6862      	ldr	r2, [r4, #4]
 800ea08:	b92a      	cbnz	r2, 800ea16 <_scanf_i+0x82>
 800ea0a:	6822      	ldr	r2, [r4, #0]
 800ea0c:	2108      	movs	r1, #8
 800ea0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea12:	6061      	str	r1, [r4, #4]
 800ea14:	6022      	str	r2, [r4, #0]
 800ea16:	6822      	ldr	r2, [r4, #0]
 800ea18:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ea1c:	6022      	str	r2, [r4, #0]
 800ea1e:	68a2      	ldr	r2, [r4, #8]
 800ea20:	1e51      	subs	r1, r2, #1
 800ea22:	60a1      	str	r1, [r4, #8]
 800ea24:	b192      	cbz	r2, 800ea4c <_scanf_i+0xb8>
 800ea26:	6832      	ldr	r2, [r6, #0]
 800ea28:	1c51      	adds	r1, r2, #1
 800ea2a:	6031      	str	r1, [r6, #0]
 800ea2c:	7812      	ldrb	r2, [r2, #0]
 800ea2e:	f805 2b01 	strb.w	r2, [r5], #1
 800ea32:	6872      	ldr	r2, [r6, #4]
 800ea34:	3a01      	subs	r2, #1
 800ea36:	2a00      	cmp	r2, #0
 800ea38:	6072      	str	r2, [r6, #4]
 800ea3a:	dc07      	bgt.n	800ea4c <_scanf_i+0xb8>
 800ea3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ea40:	4631      	mov	r1, r6
 800ea42:	4650      	mov	r0, sl
 800ea44:	4790      	blx	r2
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f040 8085 	bne.w	800eb56 <_scanf_i+0x1c2>
 800ea4c:	f10b 0b01 	add.w	fp, fp, #1
 800ea50:	f1bb 0f03 	cmp.w	fp, #3
 800ea54:	d1cb      	bne.n	800e9ee <_scanf_i+0x5a>
 800ea56:	6863      	ldr	r3, [r4, #4]
 800ea58:	b90b      	cbnz	r3, 800ea5e <_scanf_i+0xca>
 800ea5a:	230a      	movs	r3, #10
 800ea5c:	6063      	str	r3, [r4, #4]
 800ea5e:	6863      	ldr	r3, [r4, #4]
 800ea60:	4945      	ldr	r1, [pc, #276]	@ (800eb78 <_scanf_i+0x1e4>)
 800ea62:	6960      	ldr	r0, [r4, #20]
 800ea64:	1ac9      	subs	r1, r1, r3
 800ea66:	f000 f947 	bl	800ecf8 <__sccl>
 800ea6a:	f04f 0b00 	mov.w	fp, #0
 800ea6e:	68a3      	ldr	r3, [r4, #8]
 800ea70:	6822      	ldr	r2, [r4, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d03d      	beq.n	800eaf2 <_scanf_i+0x15e>
 800ea76:	6831      	ldr	r1, [r6, #0]
 800ea78:	6960      	ldr	r0, [r4, #20]
 800ea7a:	f891 c000 	ldrb.w	ip, [r1]
 800ea7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d035      	beq.n	800eaf2 <_scanf_i+0x15e>
 800ea86:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ea8a:	d124      	bne.n	800ead6 <_scanf_i+0x142>
 800ea8c:	0510      	lsls	r0, r2, #20
 800ea8e:	d522      	bpl.n	800ead6 <_scanf_i+0x142>
 800ea90:	f10b 0b01 	add.w	fp, fp, #1
 800ea94:	f1b9 0f00 	cmp.w	r9, #0
 800ea98:	d003      	beq.n	800eaa2 <_scanf_i+0x10e>
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	f109 39ff 	add.w	r9, r9, #4294967295
 800eaa0:	60a3      	str	r3, [r4, #8]
 800eaa2:	6873      	ldr	r3, [r6, #4]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	6073      	str	r3, [r6, #4]
 800eaaa:	dd1b      	ble.n	800eae4 <_scanf_i+0x150>
 800eaac:	6833      	ldr	r3, [r6, #0]
 800eaae:	3301      	adds	r3, #1
 800eab0:	6033      	str	r3, [r6, #0]
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	3b01      	subs	r3, #1
 800eab6:	60a3      	str	r3, [r4, #8]
 800eab8:	e7d9      	b.n	800ea6e <_scanf_i+0xda>
 800eaba:	f1bb 0f02 	cmp.w	fp, #2
 800eabe:	d1ae      	bne.n	800ea1e <_scanf_i+0x8a>
 800eac0:	6822      	ldr	r2, [r4, #0]
 800eac2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800eac6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800eaca:	d1bf      	bne.n	800ea4c <_scanf_i+0xb8>
 800eacc:	2110      	movs	r1, #16
 800eace:	6061      	str	r1, [r4, #4]
 800ead0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ead4:	e7a2      	b.n	800ea1c <_scanf_i+0x88>
 800ead6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eada:	6022      	str	r2, [r4, #0]
 800eadc:	780b      	ldrb	r3, [r1, #0]
 800eade:	f805 3b01 	strb.w	r3, [r5], #1
 800eae2:	e7de      	b.n	800eaa2 <_scanf_i+0x10e>
 800eae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eae8:	4631      	mov	r1, r6
 800eaea:	4650      	mov	r0, sl
 800eaec:	4798      	blx	r3
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d0df      	beq.n	800eab2 <_scanf_i+0x11e>
 800eaf2:	6823      	ldr	r3, [r4, #0]
 800eaf4:	05d9      	lsls	r1, r3, #23
 800eaf6:	d50d      	bpl.n	800eb14 <_scanf_i+0x180>
 800eaf8:	42bd      	cmp	r5, r7
 800eafa:	d909      	bls.n	800eb10 <_scanf_i+0x17c>
 800eafc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb04:	4632      	mov	r2, r6
 800eb06:	4650      	mov	r0, sl
 800eb08:	4798      	blx	r3
 800eb0a:	f105 39ff 	add.w	r9, r5, #4294967295
 800eb0e:	464d      	mov	r5, r9
 800eb10:	42bd      	cmp	r5, r7
 800eb12:	d028      	beq.n	800eb66 <_scanf_i+0x1d2>
 800eb14:	6822      	ldr	r2, [r4, #0]
 800eb16:	f012 0210 	ands.w	r2, r2, #16
 800eb1a:	d113      	bne.n	800eb44 <_scanf_i+0x1b0>
 800eb1c:	702a      	strb	r2, [r5, #0]
 800eb1e:	6863      	ldr	r3, [r4, #4]
 800eb20:	9e01      	ldr	r6, [sp, #4]
 800eb22:	4639      	mov	r1, r7
 800eb24:	4650      	mov	r0, sl
 800eb26:	47b0      	blx	r6
 800eb28:	f8d8 3000 	ldr.w	r3, [r8]
 800eb2c:	6821      	ldr	r1, [r4, #0]
 800eb2e:	1d1a      	adds	r2, r3, #4
 800eb30:	f8c8 2000 	str.w	r2, [r8]
 800eb34:	f011 0f20 	tst.w	r1, #32
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	d00f      	beq.n	800eb5c <_scanf_i+0x1c8>
 800eb3c:	6018      	str	r0, [r3, #0]
 800eb3e:	68e3      	ldr	r3, [r4, #12]
 800eb40:	3301      	adds	r3, #1
 800eb42:	60e3      	str	r3, [r4, #12]
 800eb44:	6923      	ldr	r3, [r4, #16]
 800eb46:	1bed      	subs	r5, r5, r7
 800eb48:	445d      	add	r5, fp
 800eb4a:	442b      	add	r3, r5
 800eb4c:	6123      	str	r3, [r4, #16]
 800eb4e:	2000      	movs	r0, #0
 800eb50:	b007      	add	sp, #28
 800eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb56:	f04f 0b00 	mov.w	fp, #0
 800eb5a:	e7ca      	b.n	800eaf2 <_scanf_i+0x15e>
 800eb5c:	07ca      	lsls	r2, r1, #31
 800eb5e:	bf4c      	ite	mi
 800eb60:	8018      	strhmi	r0, [r3, #0]
 800eb62:	6018      	strpl	r0, [r3, #0]
 800eb64:	e7eb      	b.n	800eb3e <_scanf_i+0x1aa>
 800eb66:	2001      	movs	r0, #1
 800eb68:	e7f2      	b.n	800eb50 <_scanf_i+0x1bc>
 800eb6a:	bf00      	nop
 800eb6c:	08010258 	.word	0x08010258
 800eb70:	0800d97d 	.word	0x0800d97d
 800eb74:	0800ef75 	.word	0x0800ef75
 800eb78:	080105bd 	.word	0x080105bd

0800eb7c <__sflush_r>:
 800eb7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	0716      	lsls	r6, r2, #28
 800eb86:	4605      	mov	r5, r0
 800eb88:	460c      	mov	r4, r1
 800eb8a:	d454      	bmi.n	800ec36 <__sflush_r+0xba>
 800eb8c:	684b      	ldr	r3, [r1, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	dc02      	bgt.n	800eb98 <__sflush_r+0x1c>
 800eb92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	dd48      	ble.n	800ec2a <__sflush_r+0xae>
 800eb98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb9a:	2e00      	cmp	r6, #0
 800eb9c:	d045      	beq.n	800ec2a <__sflush_r+0xae>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eba4:	682f      	ldr	r7, [r5, #0]
 800eba6:	6a21      	ldr	r1, [r4, #32]
 800eba8:	602b      	str	r3, [r5, #0]
 800ebaa:	d030      	beq.n	800ec0e <__sflush_r+0x92>
 800ebac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	0759      	lsls	r1, r3, #29
 800ebb2:	d505      	bpl.n	800ebc0 <__sflush_r+0x44>
 800ebb4:	6863      	ldr	r3, [r4, #4]
 800ebb6:	1ad2      	subs	r2, r2, r3
 800ebb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ebba:	b10b      	cbz	r3, 800ebc0 <__sflush_r+0x44>
 800ebbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebc4:	6a21      	ldr	r1, [r4, #32]
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	47b0      	blx	r6
 800ebca:	1c43      	adds	r3, r0, #1
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	d106      	bne.n	800ebde <__sflush_r+0x62>
 800ebd0:	6829      	ldr	r1, [r5, #0]
 800ebd2:	291d      	cmp	r1, #29
 800ebd4:	d82b      	bhi.n	800ec2e <__sflush_r+0xb2>
 800ebd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ec80 <__sflush_r+0x104>)
 800ebd8:	410a      	asrs	r2, r1
 800ebda:	07d6      	lsls	r6, r2, #31
 800ebdc:	d427      	bmi.n	800ec2e <__sflush_r+0xb2>
 800ebde:	2200      	movs	r2, #0
 800ebe0:	6062      	str	r2, [r4, #4]
 800ebe2:	04d9      	lsls	r1, r3, #19
 800ebe4:	6922      	ldr	r2, [r4, #16]
 800ebe6:	6022      	str	r2, [r4, #0]
 800ebe8:	d504      	bpl.n	800ebf4 <__sflush_r+0x78>
 800ebea:	1c42      	adds	r2, r0, #1
 800ebec:	d101      	bne.n	800ebf2 <__sflush_r+0x76>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	b903      	cbnz	r3, 800ebf4 <__sflush_r+0x78>
 800ebf2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebf6:	602f      	str	r7, [r5, #0]
 800ebf8:	b1b9      	cbz	r1, 800ec2a <__sflush_r+0xae>
 800ebfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebfe:	4299      	cmp	r1, r3
 800ec00:	d002      	beq.n	800ec08 <__sflush_r+0x8c>
 800ec02:	4628      	mov	r0, r5
 800ec04:	f7ff f970 	bl	800dee8 <_free_r>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec0c:	e00d      	b.n	800ec2a <__sflush_r+0xae>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b0      	blx	r6
 800ec14:	4602      	mov	r2, r0
 800ec16:	1c50      	adds	r0, r2, #1
 800ec18:	d1c9      	bne.n	800ebae <__sflush_r+0x32>
 800ec1a:	682b      	ldr	r3, [r5, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0c6      	beq.n	800ebae <__sflush_r+0x32>
 800ec20:	2b1d      	cmp	r3, #29
 800ec22:	d001      	beq.n	800ec28 <__sflush_r+0xac>
 800ec24:	2b16      	cmp	r3, #22
 800ec26:	d11e      	bne.n	800ec66 <__sflush_r+0xea>
 800ec28:	602f      	str	r7, [r5, #0]
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	e022      	b.n	800ec74 <__sflush_r+0xf8>
 800ec2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec32:	b21b      	sxth	r3, r3
 800ec34:	e01b      	b.n	800ec6e <__sflush_r+0xf2>
 800ec36:	690f      	ldr	r7, [r1, #16]
 800ec38:	2f00      	cmp	r7, #0
 800ec3a:	d0f6      	beq.n	800ec2a <__sflush_r+0xae>
 800ec3c:	0793      	lsls	r3, r2, #30
 800ec3e:	680e      	ldr	r6, [r1, #0]
 800ec40:	bf08      	it	eq
 800ec42:	694b      	ldreq	r3, [r1, #20]
 800ec44:	600f      	str	r7, [r1, #0]
 800ec46:	bf18      	it	ne
 800ec48:	2300      	movne	r3, #0
 800ec4a:	eba6 0807 	sub.w	r8, r6, r7
 800ec4e:	608b      	str	r3, [r1, #8]
 800ec50:	f1b8 0f00 	cmp.w	r8, #0
 800ec54:	dde9      	ble.n	800ec2a <__sflush_r+0xae>
 800ec56:	6a21      	ldr	r1, [r4, #32]
 800ec58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec5a:	4643      	mov	r3, r8
 800ec5c:	463a      	mov	r2, r7
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b0      	blx	r6
 800ec62:	2800      	cmp	r0, #0
 800ec64:	dc08      	bgt.n	800ec78 <__sflush_r+0xfc>
 800ec66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	f04f 30ff 	mov.w	r0, #4294967295
 800ec74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec78:	4407      	add	r7, r0
 800ec7a:	eba8 0800 	sub.w	r8, r8, r0
 800ec7e:	e7e7      	b.n	800ec50 <__sflush_r+0xd4>
 800ec80:	dfbffffe 	.word	0xdfbffffe

0800ec84 <_fflush_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	690b      	ldr	r3, [r1, #16]
 800ec88:	4605      	mov	r5, r0
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	b913      	cbnz	r3, 800ec94 <_fflush_r+0x10>
 800ec8e:	2500      	movs	r5, #0
 800ec90:	4628      	mov	r0, r5
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	b118      	cbz	r0, 800ec9e <_fflush_r+0x1a>
 800ec96:	6a03      	ldr	r3, [r0, #32]
 800ec98:	b90b      	cbnz	r3, 800ec9e <_fflush_r+0x1a>
 800ec9a:	f7fe ff07 	bl	800daac <__sinit>
 800ec9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d0f3      	beq.n	800ec8e <_fflush_r+0xa>
 800eca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eca8:	07d0      	lsls	r0, r2, #31
 800ecaa:	d404      	bmi.n	800ecb6 <_fflush_r+0x32>
 800ecac:	0599      	lsls	r1, r3, #22
 800ecae:	d402      	bmi.n	800ecb6 <_fflush_r+0x32>
 800ecb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecb2:	f7ff f8f0 	bl	800de96 <__retarget_lock_acquire_recursive>
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	4621      	mov	r1, r4
 800ecba:	f7ff ff5f 	bl	800eb7c <__sflush_r>
 800ecbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecc0:	07da      	lsls	r2, r3, #31
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	d4e4      	bmi.n	800ec90 <_fflush_r+0xc>
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	059b      	lsls	r3, r3, #22
 800ecca:	d4e1      	bmi.n	800ec90 <_fflush_r+0xc>
 800eccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecce:	f7ff f8e3 	bl	800de98 <__retarget_lock_release_recursive>
 800ecd2:	e7dd      	b.n	800ec90 <_fflush_r+0xc>

0800ecd4 <fiprintf>:
 800ecd4:	b40e      	push	{r1, r2, r3}
 800ecd6:	b503      	push	{r0, r1, lr}
 800ecd8:	4601      	mov	r1, r0
 800ecda:	ab03      	add	r3, sp, #12
 800ecdc:	4805      	ldr	r0, [pc, #20]	@ (800ecf4 <fiprintf+0x20>)
 800ecde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ece2:	6800      	ldr	r0, [r0, #0]
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	f000 f971 	bl	800efcc <_vfiprintf_r>
 800ecea:	b002      	add	sp, #8
 800ecec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf0:	b003      	add	sp, #12
 800ecf2:	4770      	bx	lr
 800ecf4:	20000038 	.word	0x20000038

0800ecf8 <__sccl>:
 800ecf8:	b570      	push	{r4, r5, r6, lr}
 800ecfa:	780b      	ldrb	r3, [r1, #0]
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	2b5e      	cmp	r3, #94	@ 0x5e
 800ed00:	bf0b      	itete	eq
 800ed02:	784b      	ldrbeq	r3, [r1, #1]
 800ed04:	1c4a      	addne	r2, r1, #1
 800ed06:	1c8a      	addeq	r2, r1, #2
 800ed08:	2100      	movne	r1, #0
 800ed0a:	bf08      	it	eq
 800ed0c:	2101      	moveq	r1, #1
 800ed0e:	3801      	subs	r0, #1
 800ed10:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ed14:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ed18:	42a8      	cmp	r0, r5
 800ed1a:	d1fb      	bne.n	800ed14 <__sccl+0x1c>
 800ed1c:	b90b      	cbnz	r3, 800ed22 <__sccl+0x2a>
 800ed1e:	1e50      	subs	r0, r2, #1
 800ed20:	bd70      	pop	{r4, r5, r6, pc}
 800ed22:	f081 0101 	eor.w	r1, r1, #1
 800ed26:	54e1      	strb	r1, [r4, r3]
 800ed28:	4610      	mov	r0, r2
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ed30:	2d2d      	cmp	r5, #45	@ 0x2d
 800ed32:	d005      	beq.n	800ed40 <__sccl+0x48>
 800ed34:	2d5d      	cmp	r5, #93	@ 0x5d
 800ed36:	d016      	beq.n	800ed66 <__sccl+0x6e>
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	d0f1      	beq.n	800ed20 <__sccl+0x28>
 800ed3c:	462b      	mov	r3, r5
 800ed3e:	e7f2      	b.n	800ed26 <__sccl+0x2e>
 800ed40:	7846      	ldrb	r6, [r0, #1]
 800ed42:	2e5d      	cmp	r6, #93	@ 0x5d
 800ed44:	d0fa      	beq.n	800ed3c <__sccl+0x44>
 800ed46:	42b3      	cmp	r3, r6
 800ed48:	dcf8      	bgt.n	800ed3c <__sccl+0x44>
 800ed4a:	3002      	adds	r0, #2
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	3201      	adds	r2, #1
 800ed50:	4296      	cmp	r6, r2
 800ed52:	54a1      	strb	r1, [r4, r2]
 800ed54:	dcfb      	bgt.n	800ed4e <__sccl+0x56>
 800ed56:	1af2      	subs	r2, r6, r3
 800ed58:	3a01      	subs	r2, #1
 800ed5a:	1c5d      	adds	r5, r3, #1
 800ed5c:	42b3      	cmp	r3, r6
 800ed5e:	bfa8      	it	ge
 800ed60:	2200      	movge	r2, #0
 800ed62:	18ab      	adds	r3, r5, r2
 800ed64:	e7e1      	b.n	800ed2a <__sccl+0x32>
 800ed66:	4610      	mov	r0, r2
 800ed68:	e7da      	b.n	800ed20 <__sccl+0x28>

0800ed6a <__submore>:
 800ed6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6e:	460c      	mov	r4, r1
 800ed70:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ed72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed76:	4299      	cmp	r1, r3
 800ed78:	d11d      	bne.n	800edb6 <__submore+0x4c>
 800ed7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ed7e:	f7fe fcf7 	bl	800d770 <_malloc_r>
 800ed82:	b918      	cbnz	r0, 800ed8c <__submore+0x22>
 800ed84:	f04f 30ff 	mov.w	r0, #4294967295
 800ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed90:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ed92:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ed96:	6360      	str	r0, [r4, #52]	@ 0x34
 800ed98:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ed9c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800eda0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800eda4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eda8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800edac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800edb0:	6020      	str	r0, [r4, #0]
 800edb2:	2000      	movs	r0, #0
 800edb4:	e7e8      	b.n	800ed88 <__submore+0x1e>
 800edb6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800edb8:	0077      	lsls	r7, r6, #1
 800edba:	463a      	mov	r2, r7
 800edbc:	f000 f83e 	bl	800ee3c <_realloc_r>
 800edc0:	4605      	mov	r5, r0
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d0de      	beq.n	800ed84 <__submore+0x1a>
 800edc6:	eb00 0806 	add.w	r8, r0, r6
 800edca:	4601      	mov	r1, r0
 800edcc:	4632      	mov	r2, r6
 800edce:	4640      	mov	r0, r8
 800edd0:	f000 f81f 	bl	800ee12 <memcpy>
 800edd4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800edd8:	f8c4 8000 	str.w	r8, [r4]
 800eddc:	e7e9      	b.n	800edb2 <__submore+0x48>

0800edde <memmove>:
 800edde:	4288      	cmp	r0, r1
 800ede0:	b510      	push	{r4, lr}
 800ede2:	eb01 0402 	add.w	r4, r1, r2
 800ede6:	d902      	bls.n	800edee <memmove+0x10>
 800ede8:	4284      	cmp	r4, r0
 800edea:	4623      	mov	r3, r4
 800edec:	d807      	bhi.n	800edfe <memmove+0x20>
 800edee:	1e43      	subs	r3, r0, #1
 800edf0:	42a1      	cmp	r1, r4
 800edf2:	d008      	beq.n	800ee06 <memmove+0x28>
 800edf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edfc:	e7f8      	b.n	800edf0 <memmove+0x12>
 800edfe:	4402      	add	r2, r0
 800ee00:	4601      	mov	r1, r0
 800ee02:	428a      	cmp	r2, r1
 800ee04:	d100      	bne.n	800ee08 <memmove+0x2a>
 800ee06:	bd10      	pop	{r4, pc}
 800ee08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee10:	e7f7      	b.n	800ee02 <memmove+0x24>

0800ee12 <memcpy>:
 800ee12:	440a      	add	r2, r1
 800ee14:	4291      	cmp	r1, r2
 800ee16:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee1a:	d100      	bne.n	800ee1e <memcpy+0xc>
 800ee1c:	4770      	bx	lr
 800ee1e:	b510      	push	{r4, lr}
 800ee20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee28:	4291      	cmp	r1, r2
 800ee2a:	d1f9      	bne.n	800ee20 <memcpy+0xe>
 800ee2c:	bd10      	pop	{r4, pc}

0800ee2e <abort>:
 800ee2e:	b508      	push	{r3, lr}
 800ee30:	2006      	movs	r0, #6
 800ee32:	f000 fa9f 	bl	800f374 <raise>
 800ee36:	2001      	movs	r0, #1
 800ee38:	f7f4 fb82 	bl	8003540 <_exit>

0800ee3c <_realloc_r>:
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee40:	4680      	mov	r8, r0
 800ee42:	4615      	mov	r5, r2
 800ee44:	460c      	mov	r4, r1
 800ee46:	b921      	cbnz	r1, 800ee52 <_realloc_r+0x16>
 800ee48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	f7fe bc8f 	b.w	800d770 <_malloc_r>
 800ee52:	b92a      	cbnz	r2, 800ee60 <_realloc_r+0x24>
 800ee54:	f7ff f848 	bl	800dee8 <_free_r>
 800ee58:	2400      	movs	r4, #0
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee60:	f000 faa4 	bl	800f3ac <_malloc_usable_size_r>
 800ee64:	4285      	cmp	r5, r0
 800ee66:	4606      	mov	r6, r0
 800ee68:	d802      	bhi.n	800ee70 <_realloc_r+0x34>
 800ee6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee6e:	d8f4      	bhi.n	800ee5a <_realloc_r+0x1e>
 800ee70:	4629      	mov	r1, r5
 800ee72:	4640      	mov	r0, r8
 800ee74:	f7fe fc7c 	bl	800d770 <_malloc_r>
 800ee78:	4607      	mov	r7, r0
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d0ec      	beq.n	800ee58 <_realloc_r+0x1c>
 800ee7e:	42b5      	cmp	r5, r6
 800ee80:	462a      	mov	r2, r5
 800ee82:	4621      	mov	r1, r4
 800ee84:	bf28      	it	cs
 800ee86:	4632      	movcs	r2, r6
 800ee88:	f7ff ffc3 	bl	800ee12 <memcpy>
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4640      	mov	r0, r8
 800ee90:	f7ff f82a 	bl	800dee8 <_free_r>
 800ee94:	463c      	mov	r4, r7
 800ee96:	e7e0      	b.n	800ee5a <_realloc_r+0x1e>

0800ee98 <_strtoul_l.constprop.0>:
 800ee98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee9c:	4e34      	ldr	r6, [pc, #208]	@ (800ef70 <_strtoul_l.constprop.0+0xd8>)
 800ee9e:	4686      	mov	lr, r0
 800eea0:	460d      	mov	r5, r1
 800eea2:	4628      	mov	r0, r5
 800eea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eea8:	5d37      	ldrb	r7, [r6, r4]
 800eeaa:	f017 0708 	ands.w	r7, r7, #8
 800eeae:	d1f8      	bne.n	800eea2 <_strtoul_l.constprop.0+0xa>
 800eeb0:	2c2d      	cmp	r4, #45	@ 0x2d
 800eeb2:	d12f      	bne.n	800ef14 <_strtoul_l.constprop.0+0x7c>
 800eeb4:	782c      	ldrb	r4, [r5, #0]
 800eeb6:	2701      	movs	r7, #1
 800eeb8:	1c85      	adds	r5, r0, #2
 800eeba:	f033 0010 	bics.w	r0, r3, #16
 800eebe:	d109      	bne.n	800eed4 <_strtoul_l.constprop.0+0x3c>
 800eec0:	2c30      	cmp	r4, #48	@ 0x30
 800eec2:	d12c      	bne.n	800ef1e <_strtoul_l.constprop.0+0x86>
 800eec4:	7828      	ldrb	r0, [r5, #0]
 800eec6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800eeca:	2858      	cmp	r0, #88	@ 0x58
 800eecc:	d127      	bne.n	800ef1e <_strtoul_l.constprop.0+0x86>
 800eece:	786c      	ldrb	r4, [r5, #1]
 800eed0:	2310      	movs	r3, #16
 800eed2:	3502      	adds	r5, #2
 800eed4:	f04f 38ff 	mov.w	r8, #4294967295
 800eed8:	2600      	movs	r6, #0
 800eeda:	fbb8 f8f3 	udiv	r8, r8, r3
 800eede:	fb03 f908 	mul.w	r9, r3, r8
 800eee2:	ea6f 0909 	mvn.w	r9, r9
 800eee6:	4630      	mov	r0, r6
 800eee8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eeec:	f1bc 0f09 	cmp.w	ip, #9
 800eef0:	d81c      	bhi.n	800ef2c <_strtoul_l.constprop.0+0x94>
 800eef2:	4664      	mov	r4, ip
 800eef4:	42a3      	cmp	r3, r4
 800eef6:	dd2a      	ble.n	800ef4e <_strtoul_l.constprop.0+0xb6>
 800eef8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800eefc:	d007      	beq.n	800ef0e <_strtoul_l.constprop.0+0x76>
 800eefe:	4580      	cmp	r8, r0
 800ef00:	d322      	bcc.n	800ef48 <_strtoul_l.constprop.0+0xb0>
 800ef02:	d101      	bne.n	800ef08 <_strtoul_l.constprop.0+0x70>
 800ef04:	45a1      	cmp	r9, r4
 800ef06:	db1f      	blt.n	800ef48 <_strtoul_l.constprop.0+0xb0>
 800ef08:	fb00 4003 	mla	r0, r0, r3, r4
 800ef0c:	2601      	movs	r6, #1
 800ef0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef12:	e7e9      	b.n	800eee8 <_strtoul_l.constprop.0+0x50>
 800ef14:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef16:	bf04      	itt	eq
 800ef18:	782c      	ldrbeq	r4, [r5, #0]
 800ef1a:	1c85      	addeq	r5, r0, #2
 800ef1c:	e7cd      	b.n	800eeba <_strtoul_l.constprop.0+0x22>
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1d8      	bne.n	800eed4 <_strtoul_l.constprop.0+0x3c>
 800ef22:	2c30      	cmp	r4, #48	@ 0x30
 800ef24:	bf0c      	ite	eq
 800ef26:	2308      	moveq	r3, #8
 800ef28:	230a      	movne	r3, #10
 800ef2a:	e7d3      	b.n	800eed4 <_strtoul_l.constprop.0+0x3c>
 800ef2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ef30:	f1bc 0f19 	cmp.w	ip, #25
 800ef34:	d801      	bhi.n	800ef3a <_strtoul_l.constprop.0+0xa2>
 800ef36:	3c37      	subs	r4, #55	@ 0x37
 800ef38:	e7dc      	b.n	800eef4 <_strtoul_l.constprop.0+0x5c>
 800ef3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ef3e:	f1bc 0f19 	cmp.w	ip, #25
 800ef42:	d804      	bhi.n	800ef4e <_strtoul_l.constprop.0+0xb6>
 800ef44:	3c57      	subs	r4, #87	@ 0x57
 800ef46:	e7d5      	b.n	800eef4 <_strtoul_l.constprop.0+0x5c>
 800ef48:	f04f 36ff 	mov.w	r6, #4294967295
 800ef4c:	e7df      	b.n	800ef0e <_strtoul_l.constprop.0+0x76>
 800ef4e:	1c73      	adds	r3, r6, #1
 800ef50:	d106      	bne.n	800ef60 <_strtoul_l.constprop.0+0xc8>
 800ef52:	2322      	movs	r3, #34	@ 0x22
 800ef54:	f8ce 3000 	str.w	r3, [lr]
 800ef58:	4630      	mov	r0, r6
 800ef5a:	b932      	cbnz	r2, 800ef6a <_strtoul_l.constprop.0+0xd2>
 800ef5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef60:	b107      	cbz	r7, 800ef64 <_strtoul_l.constprop.0+0xcc>
 800ef62:	4240      	negs	r0, r0
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	d0f9      	beq.n	800ef5c <_strtoul_l.constprop.0+0xc4>
 800ef68:	b106      	cbz	r6, 800ef6c <_strtoul_l.constprop.0+0xd4>
 800ef6a:	1e69      	subs	r1, r5, #1
 800ef6c:	6011      	str	r1, [r2, #0]
 800ef6e:	e7f5      	b.n	800ef5c <_strtoul_l.constprop.0+0xc4>
 800ef70:	080103cd 	.word	0x080103cd

0800ef74 <_strtoul_r>:
 800ef74:	f7ff bf90 	b.w	800ee98 <_strtoul_l.constprop.0>

0800ef78 <__sfputc_r>:
 800ef78:	6893      	ldr	r3, [r2, #8]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	b410      	push	{r4}
 800ef80:	6093      	str	r3, [r2, #8]
 800ef82:	da08      	bge.n	800ef96 <__sfputc_r+0x1e>
 800ef84:	6994      	ldr	r4, [r2, #24]
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	db01      	blt.n	800ef8e <__sfputc_r+0x16>
 800ef8a:	290a      	cmp	r1, #10
 800ef8c:	d103      	bne.n	800ef96 <__sfputc_r+0x1e>
 800ef8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef92:	f000 b933 	b.w	800f1fc <__swbuf_r>
 800ef96:	6813      	ldr	r3, [r2, #0]
 800ef98:	1c58      	adds	r0, r3, #1
 800ef9a:	6010      	str	r0, [r2, #0]
 800ef9c:	7019      	strb	r1, [r3, #0]
 800ef9e:	4608      	mov	r0, r1
 800efa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <__sfputs_r>:
 800efa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa8:	4606      	mov	r6, r0
 800efaa:	460f      	mov	r7, r1
 800efac:	4614      	mov	r4, r2
 800efae:	18d5      	adds	r5, r2, r3
 800efb0:	42ac      	cmp	r4, r5
 800efb2:	d101      	bne.n	800efb8 <__sfputs_r+0x12>
 800efb4:	2000      	movs	r0, #0
 800efb6:	e007      	b.n	800efc8 <__sfputs_r+0x22>
 800efb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efbc:	463a      	mov	r2, r7
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7ff ffda 	bl	800ef78 <__sfputc_r>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d1f3      	bne.n	800efb0 <__sfputs_r+0xa>
 800efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efcc <_vfiprintf_r>:
 800efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd0:	460d      	mov	r5, r1
 800efd2:	b09d      	sub	sp, #116	@ 0x74
 800efd4:	4614      	mov	r4, r2
 800efd6:	4698      	mov	r8, r3
 800efd8:	4606      	mov	r6, r0
 800efda:	b118      	cbz	r0, 800efe4 <_vfiprintf_r+0x18>
 800efdc:	6a03      	ldr	r3, [r0, #32]
 800efde:	b90b      	cbnz	r3, 800efe4 <_vfiprintf_r+0x18>
 800efe0:	f7fe fd64 	bl	800daac <__sinit>
 800efe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efe6:	07d9      	lsls	r1, r3, #31
 800efe8:	d405      	bmi.n	800eff6 <_vfiprintf_r+0x2a>
 800efea:	89ab      	ldrh	r3, [r5, #12]
 800efec:	059a      	lsls	r2, r3, #22
 800efee:	d402      	bmi.n	800eff6 <_vfiprintf_r+0x2a>
 800eff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eff2:	f7fe ff50 	bl	800de96 <__retarget_lock_acquire_recursive>
 800eff6:	89ab      	ldrh	r3, [r5, #12]
 800eff8:	071b      	lsls	r3, r3, #28
 800effa:	d501      	bpl.n	800f000 <_vfiprintf_r+0x34>
 800effc:	692b      	ldr	r3, [r5, #16]
 800effe:	b99b      	cbnz	r3, 800f028 <_vfiprintf_r+0x5c>
 800f000:	4629      	mov	r1, r5
 800f002:	4630      	mov	r0, r6
 800f004:	f000 f938 	bl	800f278 <__swsetup_r>
 800f008:	b170      	cbz	r0, 800f028 <_vfiprintf_r+0x5c>
 800f00a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f00c:	07dc      	lsls	r4, r3, #31
 800f00e:	d504      	bpl.n	800f01a <_vfiprintf_r+0x4e>
 800f010:	f04f 30ff 	mov.w	r0, #4294967295
 800f014:	b01d      	add	sp, #116	@ 0x74
 800f016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01a:	89ab      	ldrh	r3, [r5, #12]
 800f01c:	0598      	lsls	r0, r3, #22
 800f01e:	d4f7      	bmi.n	800f010 <_vfiprintf_r+0x44>
 800f020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f022:	f7fe ff39 	bl	800de98 <__retarget_lock_release_recursive>
 800f026:	e7f3      	b.n	800f010 <_vfiprintf_r+0x44>
 800f028:	2300      	movs	r3, #0
 800f02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f02c:	2320      	movs	r3, #32
 800f02e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f032:	f8cd 800c 	str.w	r8, [sp, #12]
 800f036:	2330      	movs	r3, #48	@ 0x30
 800f038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f1e8 <_vfiprintf_r+0x21c>
 800f03c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f040:	f04f 0901 	mov.w	r9, #1
 800f044:	4623      	mov	r3, r4
 800f046:	469a      	mov	sl, r3
 800f048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f04c:	b10a      	cbz	r2, 800f052 <_vfiprintf_r+0x86>
 800f04e:	2a25      	cmp	r2, #37	@ 0x25
 800f050:	d1f9      	bne.n	800f046 <_vfiprintf_r+0x7a>
 800f052:	ebba 0b04 	subs.w	fp, sl, r4
 800f056:	d00b      	beq.n	800f070 <_vfiprintf_r+0xa4>
 800f058:	465b      	mov	r3, fp
 800f05a:	4622      	mov	r2, r4
 800f05c:	4629      	mov	r1, r5
 800f05e:	4630      	mov	r0, r6
 800f060:	f7ff ffa1 	bl	800efa6 <__sfputs_r>
 800f064:	3001      	adds	r0, #1
 800f066:	f000 80a7 	beq.w	800f1b8 <_vfiprintf_r+0x1ec>
 800f06a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f06c:	445a      	add	r2, fp
 800f06e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f070:	f89a 3000 	ldrb.w	r3, [sl]
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 809f 	beq.w	800f1b8 <_vfiprintf_r+0x1ec>
 800f07a:	2300      	movs	r3, #0
 800f07c:	f04f 32ff 	mov.w	r2, #4294967295
 800f080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f084:	f10a 0a01 	add.w	sl, sl, #1
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	9307      	str	r3, [sp, #28]
 800f08c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f090:	931a      	str	r3, [sp, #104]	@ 0x68
 800f092:	4654      	mov	r4, sl
 800f094:	2205      	movs	r2, #5
 800f096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09a:	4853      	ldr	r0, [pc, #332]	@ (800f1e8 <_vfiprintf_r+0x21c>)
 800f09c:	f7f1 f8a0 	bl	80001e0 <memchr>
 800f0a0:	9a04      	ldr	r2, [sp, #16]
 800f0a2:	b9d8      	cbnz	r0, 800f0dc <_vfiprintf_r+0x110>
 800f0a4:	06d1      	lsls	r1, r2, #27
 800f0a6:	bf44      	itt	mi
 800f0a8:	2320      	movmi	r3, #32
 800f0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0ae:	0713      	lsls	r3, r2, #28
 800f0b0:	bf44      	itt	mi
 800f0b2:	232b      	movmi	r3, #43	@ 0x2b
 800f0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0be:	d015      	beq.n	800f0ec <_vfiprintf_r+0x120>
 800f0c0:	9a07      	ldr	r2, [sp, #28]
 800f0c2:	4654      	mov	r4, sl
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	f04f 0c0a 	mov.w	ip, #10
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d0:	3b30      	subs	r3, #48	@ 0x30
 800f0d2:	2b09      	cmp	r3, #9
 800f0d4:	d94b      	bls.n	800f16e <_vfiprintf_r+0x1a2>
 800f0d6:	b1b0      	cbz	r0, 800f106 <_vfiprintf_r+0x13a>
 800f0d8:	9207      	str	r2, [sp, #28]
 800f0da:	e014      	b.n	800f106 <_vfiprintf_r+0x13a>
 800f0dc:	eba0 0308 	sub.w	r3, r0, r8
 800f0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	9304      	str	r3, [sp, #16]
 800f0e8:	46a2      	mov	sl, r4
 800f0ea:	e7d2      	b.n	800f092 <_vfiprintf_r+0xc6>
 800f0ec:	9b03      	ldr	r3, [sp, #12]
 800f0ee:	1d19      	adds	r1, r3, #4
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	9103      	str	r1, [sp, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	bfbb      	ittet	lt
 800f0f8:	425b      	neglt	r3, r3
 800f0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f0fe:	9307      	strge	r3, [sp, #28]
 800f100:	9307      	strlt	r3, [sp, #28]
 800f102:	bfb8      	it	lt
 800f104:	9204      	strlt	r2, [sp, #16]
 800f106:	7823      	ldrb	r3, [r4, #0]
 800f108:	2b2e      	cmp	r3, #46	@ 0x2e
 800f10a:	d10a      	bne.n	800f122 <_vfiprintf_r+0x156>
 800f10c:	7863      	ldrb	r3, [r4, #1]
 800f10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f110:	d132      	bne.n	800f178 <_vfiprintf_r+0x1ac>
 800f112:	9b03      	ldr	r3, [sp, #12]
 800f114:	1d1a      	adds	r2, r3, #4
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	9203      	str	r2, [sp, #12]
 800f11a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f11e:	3402      	adds	r4, #2
 800f120:	9305      	str	r3, [sp, #20]
 800f122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f1f8 <_vfiprintf_r+0x22c>
 800f126:	7821      	ldrb	r1, [r4, #0]
 800f128:	2203      	movs	r2, #3
 800f12a:	4650      	mov	r0, sl
 800f12c:	f7f1 f858 	bl	80001e0 <memchr>
 800f130:	b138      	cbz	r0, 800f142 <_vfiprintf_r+0x176>
 800f132:	9b04      	ldr	r3, [sp, #16]
 800f134:	eba0 000a 	sub.w	r0, r0, sl
 800f138:	2240      	movs	r2, #64	@ 0x40
 800f13a:	4082      	lsls	r2, r0
 800f13c:	4313      	orrs	r3, r2
 800f13e:	3401      	adds	r4, #1
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f146:	4829      	ldr	r0, [pc, #164]	@ (800f1ec <_vfiprintf_r+0x220>)
 800f148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f14c:	2206      	movs	r2, #6
 800f14e:	f7f1 f847 	bl	80001e0 <memchr>
 800f152:	2800      	cmp	r0, #0
 800f154:	d03f      	beq.n	800f1d6 <_vfiprintf_r+0x20a>
 800f156:	4b26      	ldr	r3, [pc, #152]	@ (800f1f0 <_vfiprintf_r+0x224>)
 800f158:	bb1b      	cbnz	r3, 800f1a2 <_vfiprintf_r+0x1d6>
 800f15a:	9b03      	ldr	r3, [sp, #12]
 800f15c:	3307      	adds	r3, #7
 800f15e:	f023 0307 	bic.w	r3, r3, #7
 800f162:	3308      	adds	r3, #8
 800f164:	9303      	str	r3, [sp, #12]
 800f166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f168:	443b      	add	r3, r7
 800f16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f16c:	e76a      	b.n	800f044 <_vfiprintf_r+0x78>
 800f16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f172:	460c      	mov	r4, r1
 800f174:	2001      	movs	r0, #1
 800f176:	e7a8      	b.n	800f0ca <_vfiprintf_r+0xfe>
 800f178:	2300      	movs	r3, #0
 800f17a:	3401      	adds	r4, #1
 800f17c:	9305      	str	r3, [sp, #20]
 800f17e:	4619      	mov	r1, r3
 800f180:	f04f 0c0a 	mov.w	ip, #10
 800f184:	4620      	mov	r0, r4
 800f186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f18a:	3a30      	subs	r2, #48	@ 0x30
 800f18c:	2a09      	cmp	r2, #9
 800f18e:	d903      	bls.n	800f198 <_vfiprintf_r+0x1cc>
 800f190:	2b00      	cmp	r3, #0
 800f192:	d0c6      	beq.n	800f122 <_vfiprintf_r+0x156>
 800f194:	9105      	str	r1, [sp, #20]
 800f196:	e7c4      	b.n	800f122 <_vfiprintf_r+0x156>
 800f198:	fb0c 2101 	mla	r1, ip, r1, r2
 800f19c:	4604      	mov	r4, r0
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e7f0      	b.n	800f184 <_vfiprintf_r+0x1b8>
 800f1a2:	ab03      	add	r3, sp, #12
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	462a      	mov	r2, r5
 800f1a8:	4b12      	ldr	r3, [pc, #72]	@ (800f1f4 <_vfiprintf_r+0x228>)
 800f1aa:	a904      	add	r1, sp, #16
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f3af 8000 	nop.w
 800f1b2:	4607      	mov	r7, r0
 800f1b4:	1c78      	adds	r0, r7, #1
 800f1b6:	d1d6      	bne.n	800f166 <_vfiprintf_r+0x19a>
 800f1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1ba:	07d9      	lsls	r1, r3, #31
 800f1bc:	d405      	bmi.n	800f1ca <_vfiprintf_r+0x1fe>
 800f1be:	89ab      	ldrh	r3, [r5, #12]
 800f1c0:	059a      	lsls	r2, r3, #22
 800f1c2:	d402      	bmi.n	800f1ca <_vfiprintf_r+0x1fe>
 800f1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1c6:	f7fe fe67 	bl	800de98 <__retarget_lock_release_recursive>
 800f1ca:	89ab      	ldrh	r3, [r5, #12]
 800f1cc:	065b      	lsls	r3, r3, #25
 800f1ce:	f53f af1f 	bmi.w	800f010 <_vfiprintf_r+0x44>
 800f1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1d4:	e71e      	b.n	800f014 <_vfiprintf_r+0x48>
 800f1d6:	ab03      	add	r3, sp, #12
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	462a      	mov	r2, r5
 800f1dc:	4b05      	ldr	r3, [pc, #20]	@ (800f1f4 <_vfiprintf_r+0x228>)
 800f1de:	a904      	add	r1, sp, #16
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7ff fa5d 	bl	800e6a0 <_printf_i>
 800f1e6:	e7e4      	b.n	800f1b2 <_vfiprintf_r+0x1e6>
 800f1e8:	0801057a 	.word	0x0801057a
 800f1ec:	08010584 	.word	0x08010584
 800f1f0:	00000000 	.word	0x00000000
 800f1f4:	0800efa7 	.word	0x0800efa7
 800f1f8:	08010580 	.word	0x08010580

0800f1fc <__swbuf_r>:
 800f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fe:	460e      	mov	r6, r1
 800f200:	4614      	mov	r4, r2
 800f202:	4605      	mov	r5, r0
 800f204:	b118      	cbz	r0, 800f20e <__swbuf_r+0x12>
 800f206:	6a03      	ldr	r3, [r0, #32]
 800f208:	b90b      	cbnz	r3, 800f20e <__swbuf_r+0x12>
 800f20a:	f7fe fc4f 	bl	800daac <__sinit>
 800f20e:	69a3      	ldr	r3, [r4, #24]
 800f210:	60a3      	str	r3, [r4, #8]
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	071a      	lsls	r2, r3, #28
 800f216:	d501      	bpl.n	800f21c <__swbuf_r+0x20>
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	b943      	cbnz	r3, 800f22e <__swbuf_r+0x32>
 800f21c:	4621      	mov	r1, r4
 800f21e:	4628      	mov	r0, r5
 800f220:	f000 f82a 	bl	800f278 <__swsetup_r>
 800f224:	b118      	cbz	r0, 800f22e <__swbuf_r+0x32>
 800f226:	f04f 37ff 	mov.w	r7, #4294967295
 800f22a:	4638      	mov	r0, r7
 800f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	6922      	ldr	r2, [r4, #16]
 800f232:	1a98      	subs	r0, r3, r2
 800f234:	6963      	ldr	r3, [r4, #20]
 800f236:	b2f6      	uxtb	r6, r6
 800f238:	4283      	cmp	r3, r0
 800f23a:	4637      	mov	r7, r6
 800f23c:	dc05      	bgt.n	800f24a <__swbuf_r+0x4e>
 800f23e:	4621      	mov	r1, r4
 800f240:	4628      	mov	r0, r5
 800f242:	f7ff fd1f 	bl	800ec84 <_fflush_r>
 800f246:	2800      	cmp	r0, #0
 800f248:	d1ed      	bne.n	800f226 <__swbuf_r+0x2a>
 800f24a:	68a3      	ldr	r3, [r4, #8]
 800f24c:	3b01      	subs	r3, #1
 800f24e:	60a3      	str	r3, [r4, #8]
 800f250:	6823      	ldr	r3, [r4, #0]
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	6022      	str	r2, [r4, #0]
 800f256:	701e      	strb	r6, [r3, #0]
 800f258:	6962      	ldr	r2, [r4, #20]
 800f25a:	1c43      	adds	r3, r0, #1
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d004      	beq.n	800f26a <__swbuf_r+0x6e>
 800f260:	89a3      	ldrh	r3, [r4, #12]
 800f262:	07db      	lsls	r3, r3, #31
 800f264:	d5e1      	bpl.n	800f22a <__swbuf_r+0x2e>
 800f266:	2e0a      	cmp	r6, #10
 800f268:	d1df      	bne.n	800f22a <__swbuf_r+0x2e>
 800f26a:	4621      	mov	r1, r4
 800f26c:	4628      	mov	r0, r5
 800f26e:	f7ff fd09 	bl	800ec84 <_fflush_r>
 800f272:	2800      	cmp	r0, #0
 800f274:	d0d9      	beq.n	800f22a <__swbuf_r+0x2e>
 800f276:	e7d6      	b.n	800f226 <__swbuf_r+0x2a>

0800f278 <__swsetup_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4b29      	ldr	r3, [pc, #164]	@ (800f320 <__swsetup_r+0xa8>)
 800f27c:	4605      	mov	r5, r0
 800f27e:	6818      	ldr	r0, [r3, #0]
 800f280:	460c      	mov	r4, r1
 800f282:	b118      	cbz	r0, 800f28c <__swsetup_r+0x14>
 800f284:	6a03      	ldr	r3, [r0, #32]
 800f286:	b90b      	cbnz	r3, 800f28c <__swsetup_r+0x14>
 800f288:	f7fe fc10 	bl	800daac <__sinit>
 800f28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f290:	0719      	lsls	r1, r3, #28
 800f292:	d422      	bmi.n	800f2da <__swsetup_r+0x62>
 800f294:	06da      	lsls	r2, r3, #27
 800f296:	d407      	bmi.n	800f2a8 <__swsetup_r+0x30>
 800f298:	2209      	movs	r2, #9
 800f29a:	602a      	str	r2, [r5, #0]
 800f29c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2a0:	81a3      	strh	r3, [r4, #12]
 800f2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a6:	e033      	b.n	800f310 <__swsetup_r+0x98>
 800f2a8:	0758      	lsls	r0, r3, #29
 800f2aa:	d512      	bpl.n	800f2d2 <__swsetup_r+0x5a>
 800f2ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ae:	b141      	cbz	r1, 800f2c2 <__swsetup_r+0x4a>
 800f2b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2b4:	4299      	cmp	r1, r3
 800f2b6:	d002      	beq.n	800f2be <__swsetup_r+0x46>
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	f7fe fe15 	bl	800dee8 <_free_r>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2c2:	89a3      	ldrh	r3, [r4, #12]
 800f2c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f2c8:	81a3      	strh	r3, [r4, #12]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	6063      	str	r3, [r4, #4]
 800f2ce:	6923      	ldr	r3, [r4, #16]
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	f043 0308 	orr.w	r3, r3, #8
 800f2d8:	81a3      	strh	r3, [r4, #12]
 800f2da:	6923      	ldr	r3, [r4, #16]
 800f2dc:	b94b      	cbnz	r3, 800f2f2 <__swsetup_r+0x7a>
 800f2de:	89a3      	ldrh	r3, [r4, #12]
 800f2e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f2e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2e8:	d003      	beq.n	800f2f2 <__swsetup_r+0x7a>
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	f000 f88b 	bl	800f408 <__smakebuf_r>
 800f2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2f6:	f013 0201 	ands.w	r2, r3, #1
 800f2fa:	d00a      	beq.n	800f312 <__swsetup_r+0x9a>
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	60a2      	str	r2, [r4, #8]
 800f300:	6962      	ldr	r2, [r4, #20]
 800f302:	4252      	negs	r2, r2
 800f304:	61a2      	str	r2, [r4, #24]
 800f306:	6922      	ldr	r2, [r4, #16]
 800f308:	b942      	cbnz	r2, 800f31c <__swsetup_r+0xa4>
 800f30a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f30e:	d1c5      	bne.n	800f29c <__swsetup_r+0x24>
 800f310:	bd38      	pop	{r3, r4, r5, pc}
 800f312:	0799      	lsls	r1, r3, #30
 800f314:	bf58      	it	pl
 800f316:	6962      	ldrpl	r2, [r4, #20]
 800f318:	60a2      	str	r2, [r4, #8]
 800f31a:	e7f4      	b.n	800f306 <__swsetup_r+0x8e>
 800f31c:	2000      	movs	r0, #0
 800f31e:	e7f7      	b.n	800f310 <__swsetup_r+0x98>
 800f320:	20000038 	.word	0x20000038

0800f324 <_raise_r>:
 800f324:	291f      	cmp	r1, #31
 800f326:	b538      	push	{r3, r4, r5, lr}
 800f328:	4605      	mov	r5, r0
 800f32a:	460c      	mov	r4, r1
 800f32c:	d904      	bls.n	800f338 <_raise_r+0x14>
 800f32e:	2316      	movs	r3, #22
 800f330:	6003      	str	r3, [r0, #0]
 800f332:	f04f 30ff 	mov.w	r0, #4294967295
 800f336:	bd38      	pop	{r3, r4, r5, pc}
 800f338:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f33a:	b112      	cbz	r2, 800f342 <_raise_r+0x1e>
 800f33c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f340:	b94b      	cbnz	r3, 800f356 <_raise_r+0x32>
 800f342:	4628      	mov	r0, r5
 800f344:	f000 f830 	bl	800f3a8 <_getpid_r>
 800f348:	4622      	mov	r2, r4
 800f34a:	4601      	mov	r1, r0
 800f34c:	4628      	mov	r0, r5
 800f34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f352:	f000 b817 	b.w	800f384 <_kill_r>
 800f356:	2b01      	cmp	r3, #1
 800f358:	d00a      	beq.n	800f370 <_raise_r+0x4c>
 800f35a:	1c59      	adds	r1, r3, #1
 800f35c:	d103      	bne.n	800f366 <_raise_r+0x42>
 800f35e:	2316      	movs	r3, #22
 800f360:	6003      	str	r3, [r0, #0]
 800f362:	2001      	movs	r0, #1
 800f364:	e7e7      	b.n	800f336 <_raise_r+0x12>
 800f366:	2100      	movs	r1, #0
 800f368:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f36c:	4620      	mov	r0, r4
 800f36e:	4798      	blx	r3
 800f370:	2000      	movs	r0, #0
 800f372:	e7e0      	b.n	800f336 <_raise_r+0x12>

0800f374 <raise>:
 800f374:	4b02      	ldr	r3, [pc, #8]	@ (800f380 <raise+0xc>)
 800f376:	4601      	mov	r1, r0
 800f378:	6818      	ldr	r0, [r3, #0]
 800f37a:	f7ff bfd3 	b.w	800f324 <_raise_r>
 800f37e:	bf00      	nop
 800f380:	20000038 	.word	0x20000038

0800f384 <_kill_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	4d07      	ldr	r5, [pc, #28]	@ (800f3a4 <_kill_r+0x20>)
 800f388:	2300      	movs	r3, #0
 800f38a:	4604      	mov	r4, r0
 800f38c:	4608      	mov	r0, r1
 800f38e:	4611      	mov	r1, r2
 800f390:	602b      	str	r3, [r5, #0]
 800f392:	f7f4 f8c5 	bl	8003520 <_kill>
 800f396:	1c43      	adds	r3, r0, #1
 800f398:	d102      	bne.n	800f3a0 <_kill_r+0x1c>
 800f39a:	682b      	ldr	r3, [r5, #0]
 800f39c:	b103      	cbz	r3, 800f3a0 <_kill_r+0x1c>
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	bd38      	pop	{r3, r4, r5, pc}
 800f3a2:	bf00      	nop
 800f3a4:	200057f8 	.word	0x200057f8

0800f3a8 <_getpid_r>:
 800f3a8:	f7f4 b8b2 	b.w	8003510 <_getpid>

0800f3ac <_malloc_usable_size_r>:
 800f3ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3b0:	1f18      	subs	r0, r3, #4
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	bfbc      	itt	lt
 800f3b6:	580b      	ldrlt	r3, [r1, r0]
 800f3b8:	18c0      	addlt	r0, r0, r3
 800f3ba:	4770      	bx	lr

0800f3bc <__swhatbuf_r>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	460c      	mov	r4, r1
 800f3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	b096      	sub	sp, #88	@ 0x58
 800f3c8:	4615      	mov	r5, r2
 800f3ca:	461e      	mov	r6, r3
 800f3cc:	da0d      	bge.n	800f3ea <__swhatbuf_r+0x2e>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3d4:	f04f 0100 	mov.w	r1, #0
 800f3d8:	bf14      	ite	ne
 800f3da:	2340      	movne	r3, #64	@ 0x40
 800f3dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	6031      	str	r1, [r6, #0]
 800f3e4:	602b      	str	r3, [r5, #0]
 800f3e6:	b016      	add	sp, #88	@ 0x58
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ea:	466a      	mov	r2, sp
 800f3ec:	f000 f848 	bl	800f480 <_fstat_r>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	dbec      	blt.n	800f3ce <__swhatbuf_r+0x12>
 800f3f4:	9901      	ldr	r1, [sp, #4]
 800f3f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3fe:	4259      	negs	r1, r3
 800f400:	4159      	adcs	r1, r3
 800f402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f406:	e7eb      	b.n	800f3e0 <__swhatbuf_r+0x24>

0800f408 <__smakebuf_r>:
 800f408:	898b      	ldrh	r3, [r1, #12]
 800f40a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f40c:	079d      	lsls	r5, r3, #30
 800f40e:	4606      	mov	r6, r0
 800f410:	460c      	mov	r4, r1
 800f412:	d507      	bpl.n	800f424 <__smakebuf_r+0x1c>
 800f414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f418:	6023      	str	r3, [r4, #0]
 800f41a:	6123      	str	r3, [r4, #16]
 800f41c:	2301      	movs	r3, #1
 800f41e:	6163      	str	r3, [r4, #20]
 800f420:	b003      	add	sp, #12
 800f422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f424:	ab01      	add	r3, sp, #4
 800f426:	466a      	mov	r2, sp
 800f428:	f7ff ffc8 	bl	800f3bc <__swhatbuf_r>
 800f42c:	9f00      	ldr	r7, [sp, #0]
 800f42e:	4605      	mov	r5, r0
 800f430:	4639      	mov	r1, r7
 800f432:	4630      	mov	r0, r6
 800f434:	f7fe f99c 	bl	800d770 <_malloc_r>
 800f438:	b948      	cbnz	r0, 800f44e <__smakebuf_r+0x46>
 800f43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f43e:	059a      	lsls	r2, r3, #22
 800f440:	d4ee      	bmi.n	800f420 <__smakebuf_r+0x18>
 800f442:	f023 0303 	bic.w	r3, r3, #3
 800f446:	f043 0302 	orr.w	r3, r3, #2
 800f44a:	81a3      	strh	r3, [r4, #12]
 800f44c:	e7e2      	b.n	800f414 <__smakebuf_r+0xc>
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	6020      	str	r0, [r4, #0]
 800f452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f456:	81a3      	strh	r3, [r4, #12]
 800f458:	9b01      	ldr	r3, [sp, #4]
 800f45a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f45e:	b15b      	cbz	r3, 800f478 <__smakebuf_r+0x70>
 800f460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f464:	4630      	mov	r0, r6
 800f466:	f000 f81d 	bl	800f4a4 <_isatty_r>
 800f46a:	b128      	cbz	r0, 800f478 <__smakebuf_r+0x70>
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	f023 0303 	bic.w	r3, r3, #3
 800f472:	f043 0301 	orr.w	r3, r3, #1
 800f476:	81a3      	strh	r3, [r4, #12]
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	431d      	orrs	r5, r3
 800f47c:	81a5      	strh	r5, [r4, #12]
 800f47e:	e7cf      	b.n	800f420 <__smakebuf_r+0x18>

0800f480 <_fstat_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d07      	ldr	r5, [pc, #28]	@ (800f4a0 <_fstat_r+0x20>)
 800f484:	2300      	movs	r3, #0
 800f486:	4604      	mov	r4, r0
 800f488:	4608      	mov	r0, r1
 800f48a:	4611      	mov	r1, r2
 800f48c:	602b      	str	r3, [r5, #0]
 800f48e:	f7f4 f8a7 	bl	80035e0 <_fstat>
 800f492:	1c43      	adds	r3, r0, #1
 800f494:	d102      	bne.n	800f49c <_fstat_r+0x1c>
 800f496:	682b      	ldr	r3, [r5, #0]
 800f498:	b103      	cbz	r3, 800f49c <_fstat_r+0x1c>
 800f49a:	6023      	str	r3, [r4, #0]
 800f49c:	bd38      	pop	{r3, r4, r5, pc}
 800f49e:	bf00      	nop
 800f4a0:	200057f8 	.word	0x200057f8

0800f4a4 <_isatty_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	4d06      	ldr	r5, [pc, #24]	@ (800f4c0 <_isatty_r+0x1c>)
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	4608      	mov	r0, r1
 800f4ae:	602b      	str	r3, [r5, #0]
 800f4b0:	f7f4 f8a6 	bl	8003600 <_isatty>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	d102      	bne.n	800f4be <_isatty_r+0x1a>
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	b103      	cbz	r3, 800f4be <_isatty_r+0x1a>
 800f4bc:	6023      	str	r3, [r4, #0]
 800f4be:	bd38      	pop	{r3, r4, r5, pc}
 800f4c0:	200057f8 	.word	0x200057f8

0800f4c4 <_init>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	bf00      	nop
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr

0800f4d0 <_fini>:
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	bf00      	nop
 800f4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4d6:	bc08      	pop	{r3}
 800f4d8:	469e      	mov	lr, r3
 800f4da:	4770      	bx	lr

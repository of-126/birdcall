
Samay_v18_new_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001054  0800f550  0800f550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a4  080105a4  00012088  2**0
                  CONTENTS
  4 .ARM          00000008  080105a4  080105a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105ac  080105ac  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105ac  080105ac  000115ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105b0  080105b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080105b4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012088  2**0
                  CONTENTS
 10 .bss          00005778  20000088  20000088  00012088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005800  20005800  00012088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001994a  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e11  00000000  00000000  0002ba02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0002f818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001088  00000000  00000000  00030d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a0c  00000000  00000000  00031de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e60d  00000000  00000000  000577f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cbd  00000000  00000000  00075e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146abe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006654  00000000  00000000  00146b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0014d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f538 	.word	0x0800f538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f538 	.word	0x0800f538

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Send_Uart+0x28>)
 800058a:	f008 fb64 	bl	8008c56 <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000374 	.word	0x20000374

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80005a2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f003 f8d8 	bl	8003758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 faa6 	bl	8000af8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ac:	f000 fb0e 	bl	8000bcc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fc7c 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 fc52 	bl	8000e5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 fbfc 	bl	8000db4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 fc24 	bl	8000e08 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005c0:	f00a f8a6 	bl	800a710 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005c4:	f000 fbd6 	bl	8000d74 <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80005c8:	f000 fb78 	bl	8000cbc <MX_I2S2_Init>
  MX_I2S3_Init();
 80005cc:	f000 fba4 	bl	8000d18 <MX_I2S3_Init>
  MX_I2C2_Init();
 80005d0:	f000 fb46 	bl	8000c60 <MX_I2C2_Init>


  // for new_eeprom.c new_rtc.c new_uart.c
  if (I2C1_ClockConfig() != HAL_OK) {
 80005d4:	f000 fd3c 	bl	8001050 <I2C1_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x46>
          Error_Handler(); // Handle clock config failure
 80005de:	f001 fbc9 	bl	8001d74 <Error_Handler>
      }
  MX_I2C1_Init();
 80005e2:	f000 fb0f 	bl	8000c04 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f003 f927 	bl	800383c <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 80005ee:	f001 f959 	bl	80018a4 <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 80005f2:	f001 f92d 	bl	8001850 <CODEC_RST>

  configure_codec();
 80005f6:	f001 f8b9 	bl	800176c <configure_codec>


  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 80005fa:	4b93      	ldr	r3, [pc, #588]	@ (8000848 <main+0x2ac>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	4b92      	ldr	r3, [pc, #584]	@ (800084c <main+0x2b0>)
 8000604:	4413      	add	r3, r2
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	4891      	ldr	r0, [pc, #580]	@ (8000850 <main+0x2b4>)
 800060c:	f008 fbb5 	bl	8008d7a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 8000610:	4b8d      	ldr	r3, [pc, #564]	@ (8000848 <main+0x2ac>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	4b8c      	ldr	r3, [pc, #560]	@ (800084c <main+0x2b0>)
 800061a:	4413      	add	r3, r2
 800061c:	2201      	movs	r2, #1
 800061e:	4619      	mov	r1, r3
 8000620:	488c      	ldr	r0, [pc, #560]	@ (8000854 <main+0x2b8>)
 8000622:	f008 fbaa 	bl	8008d7a <HAL_UART_Receive_IT>

  ret=eeprom_init();
 8000626:	f001 fbab 	bl	8001d80 <eeprom_init>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b8a      	ldr	r3, [pc, #552]	@ (8000858 <main+0x2bc>)
 8000630:	701a      	strb	r2, [r3, #0]
  if(ret==HAL_OK)
 8000632:	4b89      	ldr	r3, [pc, #548]	@ (8000858 <main+0x2bc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10a      	bne.n	8000650 <main+0xb4>
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom ok\n\r", 11, HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	220b      	movs	r2, #11
 8000640:	4986      	ldr	r1, [pc, #536]	@ (800085c <main+0x2c0>)
 8000642:	4883      	ldr	r0, [pc, #524]	@ (8000850 <main+0x2b4>)
 8000644:	f008 fb07 	bl	8008c56 <HAL_UART_Transmit>
  	HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	@ 0x64
 800064a:	f003 f8f7 	bl	800383c <HAL_Delay>
 800064e:	e009      	b.n	8000664 <main+0xc8>
  }
  else
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom notok\n\r", 14, HAL_MAX_DELAY);
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	220e      	movs	r2, #14
 8000656:	4982      	ldr	r1, [pc, #520]	@ (8000860 <main+0x2c4>)
 8000658:	487d      	ldr	r0, [pc, #500]	@ (8000850 <main+0x2b4>)
 800065a:	f008 fafc 	bl	8008c56 <HAL_UART_Transmit>
  	HAL_Delay(100);
 800065e:	2064      	movs	r0, #100	@ 0x64
 8000660:	f003 f8ec 	bl	800383c <HAL_Delay>
  }

  rtc_init(&hi2c1);
 8000664:	487f      	ldr	r0, [pc, #508]	@ (8000864 <main+0x2c8>)
 8000666:	f001 fd13 	bl	8002090 <rtc_init>

  	rtc_timedate_t timedate = {1, 1, 0, 1, 1, 01, 0xFF};
 800066a:	4a7f      	ldr	r2, [pc, #508]	@ (8000868 <main+0x2cc>)
 800066c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	6018      	str	r0, [r3, #0]
 8000676:	3304      	adds	r3, #4
 8000678:	8019      	strh	r1, [r3, #0]
 800067a:	3302      	adds	r3, #2
 800067c:	0c0a      	lsrs	r2, r1, #16
 800067e:	701a      	strb	r2, [r3, #0]
      ret = rtc_settime(&timedate);
 8000680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fe93 	bl	80023b0 <rtc_settime>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b72      	ldr	r3, [pc, #456]	@ (8000858 <main+0x2bc>)
 8000690:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 8000692:	2064      	movs	r0, #100	@ 0x64
 8000694:	f003 f8d2 	bl	800383c <HAL_Delay>
      if (ret == HAL_OK) {
 8000698:	4b6f      	ldr	r3, [pc, #444]	@ (8000858 <main+0x2bc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d107      	bne.n	80006b0 <main+0x114>
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	2211      	movs	r2, #17
 80006a6:	4971      	ldr	r1, [pc, #452]	@ (800086c <main+0x2d0>)
 80006a8:	4869      	ldr	r0, [pc, #420]	@ (8000850 <main+0x2b4>)
 80006aa:	f008 fad4 	bl	8008c56 <HAL_UART_Transmit>
 80006ae:	e006      	b.n	80006be <main+0x122>
      } else {
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	2214      	movs	r2, #20
 80006b6:	496e      	ldr	r1, [pc, #440]	@ (8000870 <main+0x2d4>)
 80006b8:	4865      	ldr	r0, [pc, #404]	@ (8000850 <main+0x2b4>)
 80006ba:	f008 facc 	bl	8008c56 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(mode)
 80006be:	4b6d      	ldr	r3, [pc, #436]	@ (8000874 <main+0x2d8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <main+0x134>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	f000 80ef 	beq.w	80008ac <main+0x310>
 80006ce:	e1dc      	b.n	8000a8a <main+0x4ee>

	  case 0:

		  // Check if this is the first entry into Mode 0
		  static uint8_t first_entry = 1;
		  if(first_entry)
 80006d0:	4b69      	ldr	r3, [pc, #420]	@ (8000878 <main+0x2dc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d035      	beq.n	8000744 <main+0x1a8>
		  {
			  char config_buffer[RX_buffersize];
			            //eeprom_read_and_print_string(&huart3, 0x0000, (uint8_t*)config_buffer, pagesize);
			  if (eeprom_read_config(config_buffer, RX_buffersize) == HAL_OK) {
 80006d8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80006dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fc3d 	bl	8001f60 <eeprom_read_config>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d121      	bne.n	8000730 <main+0x194>
			            	//if(eeprom_read(0x0000, (uint8_t*)config_buffer, 256)==HAL_OK)

				  HAL_UART_Transmit(&huart3, (uint8_t*)"Restoring: ", 11, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	220b      	movs	r2, #11
 80006f2:	4962      	ldr	r1, [pc, #392]	@ (800087c <main+0x2e0>)
 80006f4:	4856      	ldr	r0, [pc, #344]	@ (8000850 <main+0x2b4>)
 80006f6:	f008 faae 	bl	8008c56 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t*)config_buffer, strlen(config_buffer), HAL_MAX_DELAY);
 80006fa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd66 	bl	80001d0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	484f      	ldr	r0, [pc, #316]	@ (8000850 <main+0x2b4>)
 8000712:	f008 faa0 	bl	8008c56 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2202      	movs	r2, #2
 800071c:	4958      	ldr	r1, [pc, #352]	@ (8000880 <main+0x2e4>)
 800071e:	484c      	ldr	r0, [pc, #304]	@ (8000850 <main+0x2b4>)
 8000720:	f008 fa99 	bl	8008c56 <HAL_UART_Transmit>
				  parse_and_print(config_buffer);
 8000724:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f8c9 	bl	80028c0 <parse_and_print>
 800072e:	e006      	b.n	800073e <main+0x1a2>
			  } else {
				  HAL_UART_Transmit(&huart3, (uint8_t*)"No config\n\r", 11, HAL_MAX_DELAY);
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	220b      	movs	r2, #11
 8000736:	4953      	ldr	r1, [pc, #332]	@ (8000884 <main+0x2e8>)
 8000738:	4845      	ldr	r0, [pc, #276]	@ (8000850 <main+0x2b4>)
 800073a:	f008 fa8c 	bl	8008c56 <HAL_UART_Transmit>
			  }
			  first_entry = 0; // Only run this once when entering Mode 0
 800073e:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <main+0x2dc>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]



	  }*/

	  if (alarm_triggered_flag) {
 8000744:	4b50      	ldr	r3, [pc, #320]	@ (8000888 <main+0x2ec>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d05a      	beq.n	8000804 <main+0x268>
	              handle_recording();
 800074e:	f000 fcb3 	bl	80010b8 <handle_recording>

	              // Manage alarm queue (optional)
	              if (current_idx < alarm_count - 1) {
 8000752:	4b4e      	ldr	r3, [pc, #312]	@ (800088c <main+0x2f0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <main+0x2f4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	3b01      	subs	r3, #1
 800075e:	429a      	cmp	r2, r3
 8000760:	da4c      	bge.n	80007fc <main+0x260>
	                  current_idx++;
 8000762:	4b4a      	ldr	r3, [pc, #296]	@ (800088c <main+0x2f0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b48      	ldr	r3, [pc, #288]	@ (800088c <main+0x2f0>)
 800076c:	701a      	strb	r2, [r3, #0]
	                  if (rtc_setalarm(&alarm_queue[current_idx]) == HAL_OK) {
 800076e:	4b47      	ldr	r3, [pc, #284]	@ (800088c <main+0x2f0>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4613      	mov	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	4a46      	ldr	r2, [pc, #280]	@ (8000894 <main+0x2f8>)
 800077c:	4413      	add	r3, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 feee 	bl	8002560 <rtc_setalarm>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d131      	bne.n	80007ee <main+0x252>
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 800078a:	4b40      	ldr	r3, [pc, #256]	@ (800088c <main+0x2f0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4619      	mov	r1, r3
 8000790:	4a40      	ldr	r2, [pc, #256]	@ (8000894 <main+0x2f8>)
 8000792:	460b      	mov	r3, r1
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	1a5b      	subs	r3, r3, r1
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 800079c:	4618      	mov	r0, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 800079e:	4b3b      	ldr	r3, [pc, #236]	@ (800088c <main+0x2f0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4a3b      	ldr	r2, [pc, #236]	@ (8000894 <main+0x2f8>)
 80007a6:	460b      	mov	r3, r1
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a5b      	subs	r3, r3, r1
 80007ac:	4413      	add	r3, r2
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 80007b2:	461c      	mov	r4, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 80007b4:	4b35      	ldr	r3, [pc, #212]	@ (800088c <main+0x2f0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4a36      	ldr	r2, [pc, #216]	@ (8000894 <main+0x2f8>)
 80007bc:	460b      	mov	r3, r1
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	1a5b      	subs	r3, r3, r1
 80007c2:	4413      	add	r3, r2
 80007c4:	3302      	adds	r3, #2
 80007c6:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4623      	mov	r3, r4
 80007cc:	4602      	mov	r2, r0
 80007ce:	4932      	ldr	r1, [pc, #200]	@ (8000898 <main+0x2fc>)
 80007d0:	4832      	ldr	r0, [pc, #200]	@ (800089c <main+0x300>)
 80007d2:	f00d f9db 	bl	800db8c <siprintf>
	                      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80007d6:	4831      	ldr	r0, [pc, #196]	@ (800089c <main+0x300>)
 80007d8:	f7ff fcfa 	bl	80001d0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	492d      	ldr	r1, [pc, #180]	@ (800089c <main+0x300>)
 80007e6:	481a      	ldr	r0, [pc, #104]	@ (8000850 <main+0x2b4>)
 80007e8:	f008 fa35 	bl	8008c56 <HAL_UART_Transmit>
 80007ec:	e006      	b.n	80007fc <main+0x260>
	                  } else {
	                      HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to set next alarm\n\r", 26, HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	221a      	movs	r2, #26
 80007f4:	492a      	ldr	r1, [pc, #168]	@ (80008a0 <main+0x304>)
 80007f6:	4816      	ldr	r0, [pc, #88]	@ (8000850 <main+0x2b4>)
 80007f8:	f008 fa2d 	bl	8008c56 <HAL_UART_Transmit>
	                  }
	              }

	              alarm_triggered_flag = 0; // Clear the flag after handling
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <main+0x2ec>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e006      	b.n	8000812 <main+0x276>
	          } else if (is_recording) {
 8000804:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <main+0x308>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <main+0x276>
	              // Continue checking save_frequency even if no new alarm
	              handle_recording();
 800080e:	f000 fc53 	bl	80010b8 <handle_recording>
	          }


	  ret = rtc_gettime(&timedate);
 8000812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fe2d 	bl	8002476 <rtc_gettime>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <main+0x2bc>)
 8000822:	701a      	strb	r2, [r3, #0]
	  if (ret == HAL_OK) {
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <main+0x2bc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <main+0x2a2>
		  sprintf(uart_buffer, "current time = %02d:%02d:%02d\n\r", timedate.hour, timedate.minute, timedate.second);
		  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
#endif
	  }
	  else {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time not ok\n\r", 21, HAL_MAX_DELAY);
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	2215      	movs	r2, #21
 8000832:	491d      	ldr	r1, [pc, #116]	@ (80008a8 <main+0x30c>)
 8000834:	4806      	ldr	r0, [pc, #24]	@ (8000850 <main+0x2b4>)
 8000836:	f008 fa0e 	bl	8008c56 <HAL_UART_Transmit>
		  return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e132      	b.n	8000aa4 <main+0x508>
	  }
	  HAL_Delay(1000);
 800083e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000842:	f002 fffb 	bl	800383c <HAL_Delay>
	  break;
 8000846:	e12c      	b.n	8000aa2 <main+0x506>
 8000848:	2000562c 	.word	0x2000562c
 800084c:	2000552c 	.word	0x2000552c
 8000850:	20000374 	.word	0x20000374
 8000854:	20000330 	.word	0x20000330
 8000858:	200000b0 	.word	0x200000b0
 800085c:	0800f64c 	.word	0x0800f64c
 8000860:	0800f658 	.word	0x0800f658
 8000864:	20000108 	.word	0x20000108
 8000868:	0800f7d8 	.word	0x0800f7d8
 800086c:	0800f668 	.word	0x0800f668
 8000870:	0800f67c 	.word	0x0800f67c
 8000874:	20005462 	.word	0x20005462
 8000878:	2000001e 	.word	0x2000001e
 800087c:	0800f694 	.word	0x0800f694
 8000880:	0800f6a0 	.word	0x0800f6a0
 8000884:	0800f6a4 	.word	0x0800f6a4
 8000888:	20005460 	.word	0x20005460
 800088c:	2000552b 	.word	0x2000552b
 8000890:	2000552a 	.word	0x2000552a
 8000894:	200054c8 	.word	0x200054c8
 8000898:	0800f6b0 	.word	0x0800f6b0
 800089c:	20005638 	.word	0x20005638
 80008a0:	0800f6d4 	.word	0x0800f6d4
 80008a4:	20005461 	.word	0x20005461
 80008a8:	0800f6f0 	.word	0x0800f6f0

	  case 1:
		  if(datarecived)
 80008ac:	4b80      	ldr	r3, [pc, #512]	@ (8000ab0 <main+0x514>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 80f4 	beq.w	8000aa0 <main+0x504>
		  	  {
		  		  uint8_t eeprom_data[RX_buffersize];
		  		  senddata(rxbuffer, strlen(rxbuffer)); // Send received data
 80008b8:	487e      	ldr	r0, [pc, #504]	@ (8000ab4 <main+0x518>)
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	487b      	ldr	r0, [pc, #492]	@ (8000ab4 <main+0x518>)
 80008c6:	f001 ff65 	bl	8002794 <senddata>

		  		  ret=eeprom_write(0x0000, (uint8_t*)&rxbuffer, strlen(rxbuffer)+1);
 80008ca:	487a      	ldr	r0, [pc, #488]	@ (8000ab4 <main+0x518>)
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	4976      	ldr	r1, [pc, #472]	@ (8000ab4 <main+0x518>)
 80008dc:	2000      	movs	r0, #0
 80008de:	f001 fa63 	bl	8001da8 <eeprom_write>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b74      	ldr	r3, [pc, #464]	@ (8000ab8 <main+0x51c>)
 80008e8:	701a      	strb	r2, [r3, #0]
		  		  if(ret==HAL_OK)
 80008ea:	4b73      	ldr	r3, [pc, #460]	@ (8000ab8 <main+0x51c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d13b      	bne.n	800096a <main+0x3ce>
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"write ok\n\r", 10, HAL_MAX_DELAY);
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	220a      	movs	r2, #10
 80008f8:	4970      	ldr	r1, [pc, #448]	@ (8000abc <main+0x520>)
 80008fa:	4871      	ldr	r0, [pc, #452]	@ (8000ac0 <main+0x524>)
 80008fc:	f008 f9ab 	bl	8008c56 <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000900:	2064      	movs	r0, #100	@ 0x64
 8000902:	f002 ff9b 	bl	800383c <HAL_Delay>

		  			  memset(eeprom_data, 0, pagesize);  // Clear the buffer
 8000906:	463b      	mov	r3, r7
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00d fa05 	bl	800dd1c <memset>

		  			  if (eeprom_read(0x0000, eeprom_data, pagesize) != NULL)
 8000912:	463b      	mov	r3, r7
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	4619      	mov	r1, r3
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa6f 	bl	8001dfc <eeprom_read>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01a      	beq.n	800095a <main+0x3be>
		  			  {
		  				  HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read OK: ", 16, HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	2210      	movs	r2, #16
 800092a:	4966      	ldr	r1, [pc, #408]	@ (8000ac4 <main+0x528>)
 800092c:	4864      	ldr	r0, [pc, #400]	@ (8000ac0 <main+0x524>)
 800092e:	f008 f992 	bl	8008c56 <HAL_UART_Transmit>
		  				  HAL_UART_Transmit(&huart3, eeprom_data, strlen((char*)eeprom_data), HAL_MAX_DELAY);
 8000932:	463b      	mov	r3, r7
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fc4b 	bl	80001d0 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	4639      	mov	r1, r7
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	485e      	ldr	r0, [pc, #376]	@ (8000ac0 <main+0x524>)
 8000946:	f008 f986 	bl	8008c56 <HAL_UART_Transmit>
		  				  HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2202      	movs	r2, #2
 8000950:	495d      	ldr	r1, [pc, #372]	@ (8000ac8 <main+0x52c>)
 8000952:	485b      	ldr	r0, [pc, #364]	@ (8000ac0 <main+0x524>)
 8000954:	f008 f97f 	bl	8008c56 <HAL_UART_Transmit>
 8000958:	e011      	b.n	800097e <main+0x3e2>
		  			  }
		  			  else
		  			  {
		  				  HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed\n\r", 20, HAL_MAX_DELAY);
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	2214      	movs	r2, #20
 8000960:	495a      	ldr	r1, [pc, #360]	@ (8000acc <main+0x530>)
 8000962:	4857      	ldr	r0, [pc, #348]	@ (8000ac0 <main+0x524>)
 8000964:	f008 f977 	bl	8008c56 <HAL_UART_Transmit>
 8000968:	e009      	b.n	800097e <main+0x3e2>
		  			  }

		  		  }
		  		  else
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"write notok\n\r", 13, HAL_MAX_DELAY);
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	220d      	movs	r2, #13
 8000970:	4957      	ldr	r1, [pc, #348]	@ (8000ad0 <main+0x534>)
 8000972:	4853      	ldr	r0, [pc, #332]	@ (8000ac0 <main+0x524>)
 8000974:	f008 f96f 	bl	8008c56 <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	@ 0x64
 800097a:	f002 ff5f 	bl	800383c <HAL_Delay>
		  		  }

		  		  char rxCopy[RX_buffersize];
		  		  strcpy(rxCopy, (char*)eeprom_data);
 800097e:	463a      	mov	r2, r7
 8000980:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f00d fac1 	bl	800df0e <strcpy>


		  		  ret=rtc_gettime(&timedate);
 800098c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fd70 	bl	8002476 <rtc_gettime>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <main+0x51c>)
 800099c:	701a      	strb	r2, [r3, #0]
		  		  if(ret==HAL_OK)
 800099e:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <main+0x51c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d135      	bne.n	8000a12 <main+0x476>
		  		  {
		  			  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 80009a6:	f897 3200 	ldrb.w	r3, [r7, #512]	@ 0x200
 80009aa:	461a      	mov	r2, r3
 80009ac:	f897 3201 	ldrb.w	r3, [r7, #513]	@ 0x201
 80009b0:	4619      	mov	r1, r3
 80009b2:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	460b      	mov	r3, r1
 80009ba:	4946      	ldr	r1, [pc, #280]	@ (8000ad4 <main+0x538>)
 80009bc:	4846      	ldr	r0, [pc, #280]	@ (8000ad8 <main+0x53c>)
 80009be:	f00d f8e5 	bl	800db8c <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80009c2:	4845      	ldr	r0, [pc, #276]	@ (8000ad8 <main+0x53c>)
 80009c4:	f7ff fc04 	bl	80001d0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
 80009d0:	4941      	ldr	r1, [pc, #260]	@ (8000ad8 <main+0x53c>)
 80009d2:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <main+0x524>)
 80009d4:	f008 f93f 	bl	8008c56 <HAL_UART_Transmit>
		  			  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 80009d8:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 80009dc:	461a      	mov	r2, r3
 80009de:	f897 3204 	ldrb.w	r3, [r7, #516]	@ 0x204
 80009e2:	4619      	mov	r1, r3
 80009e4:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	460b      	mov	r3, r1
 80009ec:	493b      	ldr	r1, [pc, #236]	@ (8000adc <main+0x540>)
 80009ee:	483a      	ldr	r0, [pc, #232]	@ (8000ad8 <main+0x53c>)
 80009f0:	f00d f8cc 	bl	800db8c <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80009f4:	4838      	ldr	r0, [pc, #224]	@ (8000ad8 <main+0x53c>)
 80009f6:	f7ff fbeb 	bl	80001d0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	4935      	ldr	r1, [pc, #212]	@ (8000ad8 <main+0x53c>)
 8000a04:	482e      	ldr	r0, [pc, #184]	@ (8000ac0 <main+0x524>)
 8000a06:	f008 f926 	bl	8008c56 <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000a0a:	2064      	movs	r0, #100	@ 0x64
 8000a0c:	f002 ff16 	bl	800383c <HAL_Delay>
 8000a10:	e009      	b.n	8000a26 <main+0x48a>
		  		  }
		  		  else
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	2214      	movs	r2, #20
 8000a18:	4931      	ldr	r1, [pc, #196]	@ (8000ae0 <main+0x544>)
 8000a1a:	4829      	ldr	r0, [pc, #164]	@ (8000ac0 <main+0x524>)
 8000a1c:	f008 f91b 	bl	8008c56 <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000a20:	2064      	movs	r0, #100	@ 0x64
 8000a22:	f002 ff0b 	bl	800383c <HAL_Delay>
		  		  }

		  		  parse_and_print((char*)rxCopy);
 8000a26:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 ff48 	bl	80028c0 <parse_and_print>
		  		  mode = 0; // Switch to Debug Mode after writing config
 8000a30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <main+0x548>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, (uint8_t*)"Switching to Debug Mode\n\r", 25, HAL_MAX_DELAY);
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	2219      	movs	r2, #25
 8000a3c:	492a      	ldr	r1, [pc, #168]	@ (8000ae8 <main+0x54c>)
 8000a3e:	4820      	ldr	r0, [pc, #128]	@ (8000ac0 <main+0x524>)
 8000a40:	f008 f909 	bl	8008c56 <HAL_UART_Transmit>


		  		  datarecived = 0;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <main+0x514>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
		  		  rxindex = 0;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	@ (8000aec <main+0x550>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		  		  memset(rxbuffer, 0, RX_buffersize); // Clear buffer
 8000a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a54:	2100      	movs	r1, #0
 8000a56:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <main+0x518>)
 8000a58:	f00d f960 	bl	800dd1c <memset>
		  		  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxbuffer[rxindex], 1);
 8000a5c:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <main+0x550>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <main+0x518>)
 8000a66:	4413      	add	r3, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <main+0x524>)
 8000a6e:	f008 f984 	bl	8008d7a <HAL_UART_Receive_IT>
		  		  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <main+0x550>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <main+0x518>)
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4619      	mov	r1, r3
 8000a82:	481b      	ldr	r0, [pc, #108]	@ (8000af0 <main+0x554>)
 8000a84:	f008 f979 	bl	8008d7a <HAL_UART_Receive_IT>
		  	  }
		  break;
 8000a88:	e00a      	b.n	8000aa0 <main+0x504>

	  default:
	          HAL_UART_Transmit(&huart3, (uint8_t*)"Invalid mode\n\r", 14, HAL_MAX_DELAY);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	220e      	movs	r2, #14
 8000a90:	4918      	ldr	r1, [pc, #96]	@ (8000af4 <main+0x558>)
 8000a92:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <main+0x524>)
 8000a94:	f008 f8df 	bl	8008c56 <HAL_UART_Transmit>
	          mode = 1; // Reset to config mode if something goes wrong
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <main+0x548>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	          break;
 8000a9e:	e000      	b.n	8000aa2 <main+0x506>
		  break;
 8000aa0:	bf00      	nop
	  switch(mode)
 8000aa2:	e60c      	b.n	80006be <main+0x122>
		HAL_Delay(5000);
		break;
  }*/
  /* USER CODE END 3 */
}
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000562d 	.word	0x2000562d
 8000ab4:	2000552c 	.word	0x2000552c
 8000ab8:	200000b0 	.word	0x200000b0
 8000abc:	0800f708 	.word	0x0800f708
 8000ac0:	20000374 	.word	0x20000374
 8000ac4:	0800f714 	.word	0x0800f714
 8000ac8:	0800f6a0 	.word	0x0800f6a0
 8000acc:	0800f728 	.word	0x0800f728
 8000ad0:	0800f740 	.word	0x0800f740
 8000ad4:	0800f750 	.word	0x0800f750
 8000ad8:	20005638 	.word	0x20005638
 8000adc:	0800f770 	.word	0x0800f770
 8000ae0:	0800f794 	.word	0x0800f794
 8000ae4:	20005462 	.word	0x20005462
 8000ae8:	0800f7ac 	.word	0x0800f7ac
 8000aec:	2000562c 	.word	0x2000562c
 8000af0:	20000330 	.word	0x20000330
 8000af4:	0800f7c8 	.word	0x0800f7c8

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	@ 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00d f908 	bl	800dd1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a27      	ldr	r2, [pc, #156]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 8000b6c:	23a5      	movs	r3, #165	@ 0xa5
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f006 fabd 	bl	80070fc <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f001 f8f4 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2105      	movs	r1, #5
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fd1e 	bl	80075ec <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bb6:	f001 f8dd 	bl	8001d74 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	@ 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bde:	2301      	movs	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000be2:	2332      	movs	r3, #50	@ 0x32
 8000be4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f006 ff1d 	bl	8007a2c <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000bf8:	f001 f8bc 	bl	8001d74 <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c0a:	4a13      	ldr	r2, [pc, #76]	@ (8000c58 <MX_I2C1_Init+0x54>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c10:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <MX_I2C1_Init+0x58>)
 8000c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c42:	f003 fd19 	bl	8004678 <HAL_I2C_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f001 f892 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000108 	.word	0x20000108
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	000186a0 	.word	0x000186a0

08000c60 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <MX_I2C2_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <MX_I2C2_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c9e:	f003 fceb 	bl	8004678 <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f001 f864 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	40005800 	.word	0x40005800
 8000cb8:	000186a0 	.word	0x000186a0

08000cbc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <MX_I2S2_Init+0x58>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ccc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000ce2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cfc:	f005 fa1e 	bl	800613c <HAL_I2S_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000d06:	f001 f835 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000015c 	.word	0x2000015c
 8000d14:	40003800 	.word	0x40003800

08000d18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <MX_I2S3_Init+0x58>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d3e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000d42:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d58:	f005 f9f0 	bl	800613c <HAL_I2S_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d62:	f001 f807 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001a4 	.word	0x200001a4
 8000d70:	40003c00 	.word	0x40003c00

08000d74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <MX_SDIO_SD_Init+0x3c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	200002ac 	.word	0x200002ac
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <MX_USART2_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dec:	f007 fee6 	bl	8008bbc <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 ffbd 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000330 	.word	0x20000330
 8000e04:	40004400 	.word	0x40004400

08000e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MX_USART3_UART_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e40:	f007 febc 	bl	8008bbc <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f000 ff93 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000374 	.word	0x20000374
 8000e58:	40004800 	.word	0x40004800

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	200b      	movs	r0, #11
 8000e84:	f002 fdd9 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e88:	200b      	movs	r0, #11
 8000e8a:	f002 fdf2 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200e      	movs	r0, #14
 8000e94:	f002 fdd1 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e98:	200e      	movs	r0, #14
 8000e9a:	f002 fdea 	bl	8003a72 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a5d      	ldr	r2, [pc, #372]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	4b57      	ldr	r3, [pc, #348]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a56      	ldr	r2, [pc, #344]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b54      	ldr	r3, [pc, #336]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b50      	ldr	r3, [pc, #320]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a4f      	ldr	r2, [pc, #316]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b46      	ldr	r3, [pc, #280]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b42      	ldr	r3, [pc, #264]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a41      	ldr	r2, [pc, #260]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b3f      	ldr	r3, [pc, #252]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a3a      	ldr	r2, [pc, #232]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2132      	movs	r1, #50	@ 0x32
 8000f6e:	4835      	ldr	r0, [pc, #212]	@ (8001044 <MX_GPIO_Init+0x198>)
 8000f70:	f003 fb50 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000f74:	2200      	movs	r2, #0
 8000f76:	f24b 0178 	movw	r1, #45176	@ 0xb078
 8000f7a:	4833      	ldr	r0, [pc, #204]	@ (8001048 <MX_GPIO_Init+0x19c>)
 8000f7c:	f003 fb4a 	bl	8004614 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000f86:	4831      	ldr	r0, [pc, #196]	@ (800104c <MX_GPIO_Init+0x1a0>)
 8000f88:	f003 fb44 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4828      	ldr	r0, [pc, #160]	@ (8001044 <MX_GPIO_Init+0x198>)
 8000fa2:	f003 f983 	bl	80042ac <HAL_GPIO_Init>


  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8000fa6:	2332      	movs	r3, #50	@ 0x32
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4821      	ldr	r0, [pc, #132]	@ (8001044 <MX_GPIO_Init+0x198>)
 8000fbe:	f003 f975 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000fc2:	f24b 0378 	movw	r3, #45176	@ 0xb078
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	@ (8001048 <MX_GPIO_Init+0x19c>)
 8000fdc:	f003 f966 	bl	80042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fe0:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_GPIO_Init+0x1a0>)
 8000ffa:	f003 f957 	bl	80042ac <HAL_GPIO_Init>



  /*Configure GPIO pin : PD0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]

  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001002:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001006:	623b      	str	r3, [r7, #32]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_GPIO_Init+0x19c>)
 8001014:	f003 f94a 	bl	80042ac <HAL_GPIO_Init>


  /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2006      	movs	r0, #6
 800101e:	f002 fd0c 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001022:	2006      	movs	r0, #6
 8001024:	f002 fd25 	bl	8003a72 <HAL_NVIC_EnableIRQ>


    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2008      	movs	r0, #8
 800102e:	f002 fd04 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001032:	2008      	movs	r0, #8
 8001034:	f002 fd1d 	bl	8003a72 <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	@ 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40021000 	.word	0x40021000
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40020000 	.word	0x40020000

08001050 <I2C1_ClockConfig>:
			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
		  }
		  HAL_Delay(1000);
}

HAL_StatusTypeDef I2C1_ClockConfig(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
    // Enable the clock for I2C1 (APB1 peripheral)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

    // Optional: Verify clock is enabled by checking the RCC register
    if (__HAL_RCC_I2C1_IS_CLK_ENABLED()) {
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d008      	beq.n	8001090 <I2C1_ClockConfig+0x40>
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enabled\n\r", 20, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	2214      	movs	r2, #20
 8001084:	4909      	ldr	r1, [pc, #36]	@ (80010ac <I2C1_ClockConfig+0x5c>)
 8001086:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <I2C1_ClockConfig+0x60>)
 8001088:	f007 fde5 	bl	8008c56 <HAL_UART_Transmit>
        return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e007      	b.n	80010a0 <I2C1_ClockConfig+0x50>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enable failed\n\r", 26, HAL_MAX_DELAY);
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	221a      	movs	r2, #26
 8001096:	4907      	ldr	r1, [pc, #28]	@ (80010b4 <I2C1_ClockConfig+0x64>)
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <I2C1_ClockConfig+0x60>)
 800109a:	f007 fddc 	bl	8008c56 <HAL_UART_Transmit>
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
    }
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	0800f7e0 	.word	0x0800f7e0
 80010b0:	20000374 	.word	0x20000374
 80010b4:	0800f7f8 	.word	0x0800f7f8

080010b8 <handle_recording>:
        alarm_triggered_recording_control();
    }
}*/

void handle_recording(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    if (!is_recording) {
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <handle_recording+0x6c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d119      	bne.n	80010fa <handle_recording+0x42>
        if (Start_Recording() == 0) {
 80010c6:	f000 f883 	bl	80011d0 <Start_Recording>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10d      	bne.n	80010ec <handle_recording+0x34>
            is_recording = 1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <handle_recording+0x6c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
            save_frequency = 0; // Reset save_frequency to start fresh
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <handle_recording+0x70>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)"Recording started due to alarm\n\r", 32, HAL_MAX_DELAY);
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2220      	movs	r2, #32
 80010e2:	4912      	ldr	r1, [pc, #72]	@ (800112c <handle_recording+0x74>)
 80010e4:	4812      	ldr	r0, [pc, #72]	@ (8001130 <handle_recording+0x78>)
 80010e6:	f007 fdb6 	bl	8008c56 <HAL_UART_Transmit>
 80010ea:	e006      	b.n	80010fa <handle_recording+0x42>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to start recording\n\r", 27, HAL_MAX_DELAY);
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	221b      	movs	r2, #27
 80010f2:	4910      	ldr	r1, [pc, #64]	@ (8001134 <handle_recording+0x7c>)
 80010f4:	480e      	ldr	r0, [pc, #56]	@ (8001130 <handle_recording+0x78>)
 80010f6:	f007 fdae 	bl	8008c56 <HAL_UART_Transmit>
        //sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
        //HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);


    // Check save_frequency condition
    if (is_recording && save_frequency >= 1880) {
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <handle_recording+0x6c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00c      	beq.n	800111e <handle_recording+0x66>
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <handle_recording+0x70>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f5b3 6feb 	cmp.w	r3, #1880	@ 0x758
 800110c:	db07      	blt.n	800111e <handle_recording+0x66>
        stop_recording();
 800110e:	f000 fa0b 	bl	8001528 <stop_recording>
        is_recording = 0;
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <handle_recording+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit(&huart3, (uint8_t*)"Recording stopped (save_frequency >= 1880)\n\r", 44, HAL_MAX_DELAY);
        HAL_Delay(100); // Safe in main loop context
 8001118:	2064      	movs	r0, #100	@ 0x64
 800111a:	f002 fb8f 	bl	800383c <HAL_Delay>
    }
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20005461 	.word	0x20005461
 8001128:	20005458 	.word	0x20005458
 800112c:	0800f814 	.word	0x0800f814
 8001130:	20000374 	.word	0x20000374
 8001134:	0800f838 	.word	0x0800f838

08001138 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d111      	bne.n	800116c <HAL_GPIO_EXTI_Callback+0x34>
        if (rtc_check_alarm_flag() == 1) {
 8001148:	f001 fac6 	bl	80026d8 <rtc_check_alarm_flag>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d12b      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
            alarm_triggered_flag = 1; // Raise flag for main loop
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
            rtc_clearalarm();         // Clear the alarm flag
 8001158:	f001 fa9e 	bl	8002698 <rtc_clearalarm>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm interrupt triggered!\n\r", 28, HAL_MAX_DELAY);
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	221c      	movs	r2, #28
 8001162:	4915      	ldr	r1, [pc, #84]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001164:	4815      	ldr	r0, [pc, #84]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001166:	f007 fd76 	bl	8008c56 <HAL_UART_Transmit>
                mode = 0; // Ground (low)
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
            }
        }

}
 800116a:	e01e      	b.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
    else if (GPIO_Pin == GPIO_PIN_2) { // EXTI2 for PE2
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d11b      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
            if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET) {
 8001172:	2104      	movs	r1, #4
 8001174:	4812      	ldr	r0, [pc, #72]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001176:	f003 fa35 	bl	80045e4 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10a      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x5e>
                mode = 1; // VCC (high)
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 1\n\r", 28, HAL_MAX_DELAY);
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	221c      	movs	r2, #28
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800118e:	480b      	ldr	r0, [pc, #44]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001190:	f007 fd61 	bl	8008c56 <HAL_UART_Transmit>
}
 8001194:	e009      	b.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
                mode = 0; // Ground (low)
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	221c      	movs	r2, #28
 80011a2:	490a      	ldr	r1, [pc, #40]	@ (80011cc <HAL_GPIO_EXTI_Callback+0x94>)
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 80011a6:	f007 fd56 	bl	8008c56 <HAL_UART_Transmit>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20005460 	.word	0x20005460
 80011b8:	0800f854 	.word	0x0800f854
 80011bc:	20000374 	.word	0x20000374
 80011c0:	40021000 	.word	0x40021000
 80011c4:	20005462 	.word	0x20005462
 80011c8:	0800f874 	.word	0x0800f874
 80011cc:	0800f88c 	.word	0x0800f88c

080011d0 <Start_Recording>:

	    }

}*/
int Start_Recording(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    /********************************************************************************************************** SD card ***/
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // OE SD 1 and 2
 80011d6:	2201      	movs	r2, #1
 80011d8:	2108      	movs	r1, #8
 80011da:	48ae      	ldr	r0, [pc, #696]	@ (8001494 <Start_Recording+0x2c4>)
 80011dc:	f003 fa1a 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	48ab      	ldr	r0, [pc, #684]	@ (8001494 <Start_Recording+0x2c4>)
 80011e6:	f003 fa15 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // OE SD 3 and 4
 80011ea:	2201      	movs	r2, #1
 80011ec:	2120      	movs	r1, #32
 80011ee:	48a9      	ldr	r0, [pc, #676]	@ (8001494 <Start_Recording+0x2c4>)
 80011f0:	f003 fa10 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2140      	movs	r1, #64	@ 0x40
 80011f8:	48a6      	ldr	r0, [pc, #664]	@ (8001494 <Start_Recording+0x2c4>)
 80011fa:	f003 fa0b 	bl	8004614 <HAL_GPIO_WritePin>

    /********************************************************************************************************** SD 1 ***/
    message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 80011fe:	49a6      	ldr	r1, [pc, #664]	@ (8001498 <Start_Recording+0x2c8>)
 8001200:	48a6      	ldr	r0, [pc, #664]	@ (800149c <Start_Recording+0x2cc>)
 8001202:	f000 fd95 	bl	8001d30 <message>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // OE Pin pulled low SD 1 and 2
 8001206:	2200      	movs	r2, #0
 8001208:	2108      	movs	r1, #8
 800120a:	48a2      	ldr	r0, [pc, #648]	@ (8001494 <Start_Recording+0x2c4>)
 800120c:	f003 fa02 	bl	8004614 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // SEL Pin pulled low SD 1
 8001210:	2200      	movs	r2, #0
 8001212:	2110      	movs	r1, #16
 8001214:	489f      	ldr	r0, [pc, #636]	@ (8001494 <Start_Recording+0x2c4>)
 8001216:	f003 f9fd 	bl	8004614 <HAL_GPIO_WritePin>

    message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 800121a:	49a1      	ldr	r1, [pc, #644]	@ (80014a0 <Start_Recording+0x2d0>)
 800121c:	489f      	ldr	r0, [pc, #636]	@ (800149c <Start_Recording+0x2cc>)
 800121e:	f000 fd87 	bl	8001d30 <message>

    fresult = f_mount(&fs_local, "/", 1);
 8001222:	2201      	movs	r2, #1
 8001224:	499f      	ldr	r1, [pc, #636]	@ (80014a4 <Start_Recording+0x2d4>)
 8001226:	48a0      	ldr	r0, [pc, #640]	@ (80014a8 <Start_Recording+0x2d8>)
 8001228:	f00b fa44 	bl	800c6b4 <f_mount>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b9e      	ldr	r3, [pc, #632]	@ (80014ac <Start_Recording+0x2dc>)
 8001232:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8001234:	4b9d      	ldr	r3, [pc, #628]	@ (80014ac <Start_Recording+0x2dc>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <Start_Recording+0x78>
        message("ERROR!!! in mounting SD CARD...\r\n");
 800123c:	489c      	ldr	r0, [pc, #624]	@ (80014b0 <Start_Recording+0x2e0>)
 800123e:	f000 fd77 	bl	8001d30 <message>
        return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e121      	b.n	800148c <Start_Recording+0x2bc>
    }

    History_update();
 8001248:	f000 fb50 	bl	80018ec <History_update>


    sprintf(File_name_1, "file_%d_1.wav", number);
 800124c:	4b99      	ldr	r3, [pc, #612]	@ (80014b4 <Start_Recording+0x2e4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4999      	ldr	r1, [pc, #612]	@ (80014b8 <Start_Recording+0x2e8>)
 8001254:	4899      	ldr	r0, [pc, #612]	@ (80014bc <Start_Recording+0x2ec>)
 8001256:	f00c fc99 	bl	800db8c <siprintf>
    sprintf(File_name_2, "file_%d_2.wav", number);
 800125a:	4b96      	ldr	r3, [pc, #600]	@ (80014b4 <Start_Recording+0x2e4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4997      	ldr	r1, [pc, #604]	@ (80014c0 <Start_Recording+0x2f0>)
 8001262:	4898      	ldr	r0, [pc, #608]	@ (80014c4 <Start_Recording+0x2f4>)
 8001264:	f00c fc92 	bl	800db8c <siprintf>

    fresult = f_stat(File_name_1, &fno_local);
 8001268:	4997      	ldr	r1, [pc, #604]	@ (80014c8 <Start_Recording+0x2f8>)
 800126a:	4894      	ldr	r0, [pc, #592]	@ (80014bc <Start_Recording+0x2ec>)
 800126c:	f00c f9ef 	bl	800d64e <f_stat>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b8d      	ldr	r3, [pc, #564]	@ (80014ac <Start_Recording+0x2dc>)
 8001276:	701a      	strb	r2, [r3, #0]
    fresult = f_stat(File_name_2, &fno_local);
 8001278:	4993      	ldr	r1, [pc, #588]	@ (80014c8 <Start_Recording+0x2f8>)
 800127a:	4892      	ldr	r0, [pc, #584]	@ (80014c4 <Start_Recording+0x2f4>)
 800127c:	f00c f9e7 	bl	800d64e <f_stat>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b89      	ldr	r3, [pc, #548]	@ (80014ac <Start_Recording+0x2dc>)
 8001286:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 8001288:	4b88      	ldr	r3, [pc, #544]	@ (80014ac <Start_Recording+0x2dc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d106      	bne.n	800129e <Start_Recording+0xce>
        message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n", "FILE1.txt");
 8001290:	498e      	ldr	r1, [pc, #568]	@ (80014cc <Start_Recording+0x2fc>)
 8001292:	488f      	ldr	r0, [pc, #572]	@ (80014d0 <Start_Recording+0x300>)
 8001294:	f000 fd4c 	bl	8001d30 <message>
        return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	e0f6      	b.n	800148c <Start_Recording+0x2bc>
    } else {
        fresult = f_open(&file_1, File_name_1, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 800129e:	220b      	movs	r2, #11
 80012a0:	4986      	ldr	r1, [pc, #536]	@ (80014bc <Start_Recording+0x2ec>)
 80012a2:	488c      	ldr	r0, [pc, #560]	@ (80014d4 <Start_Recording+0x304>)
 80012a4:	f00b fa4c 	bl	800c740 <f_open>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b7f      	ldr	r3, [pc, #508]	@ (80014ac <Start_Recording+0x2dc>)
 80012ae:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 80012b0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ac <Start_Recording+0x2dc>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <Start_Recording+0xfc>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 80012b8:	4b7c      	ldr	r3, [pc, #496]	@ (80014ac <Start_Recording+0x2dc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	@ (80014bc <Start_Recording+0x2ec>)
 80012be:	4619      	mov	r1, r3
 80012c0:	4885      	ldr	r0, [pc, #532]	@ (80014d8 <Start_Recording+0x308>)
 80012c2:	f000 fd35 	bl	8001d30 <message>
            return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e0df      	b.n	800148c <Start_Recording+0x2bc>
        }
        fresult = f_open(&file_2, File_name_2, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80012cc:	220b      	movs	r2, #11
 80012ce:	497d      	ldr	r1, [pc, #500]	@ (80014c4 <Start_Recording+0x2f4>)
 80012d0:	4882      	ldr	r0, [pc, #520]	@ (80014dc <Start_Recording+0x30c>)
 80012d2:	f00b fa35 	bl	800c740 <f_open>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <Start_Recording+0x2dc>)
 80012dc:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 80012de:	4b73      	ldr	r3, [pc, #460]	@ (80014ac <Start_Recording+0x2dc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <Start_Recording+0x12a>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_2);
 80012e6:	4b71      	ldr	r3, [pc, #452]	@ (80014ac <Start_Recording+0x2dc>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4a76      	ldr	r2, [pc, #472]	@ (80014c4 <Start_Recording+0x2f4>)
 80012ec:	4619      	mov	r1, r3
 80012ee:	487a      	ldr	r0, [pc, #488]	@ (80014d8 <Start_Recording+0x308>)
 80012f0:	f000 fd1e 	bl	8001d30 <message>
            return -1;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	e0c8      	b.n	800148c <Start_Recording+0x2bc>
        }
        fresult = f_close(&file_1);
 80012fa:	4876      	ldr	r0, [pc, #472]	@ (80014d4 <Start_Recording+0x304>)
 80012fc:	f00b ff59 	bl	800d1b2 <f_close>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <Start_Recording+0x2dc>)
 8001306:	701a      	strb	r2, [r3, #0]
        fresult = f_close(&file_2);
 8001308:	4874      	ldr	r0, [pc, #464]	@ (80014dc <Start_Recording+0x30c>)
 800130a:	f00b ff52 	bl	800d1b2 <f_close>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <Start_Recording+0x2dc>)
 8001314:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult, File_name_1);
 8001316:	4b65      	ldr	r3, [pc, #404]	@ (80014ac <Start_Recording+0x2dc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <Start_Recording+0x15c>
 800131e:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <Start_Recording+0x2dc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4a66      	ldr	r2, [pc, #408]	@ (80014bc <Start_Recording+0x2ec>)
 8001324:	4619      	mov	r1, r3
 8001326:	486e      	ldr	r0, [pc, #440]	@ (80014e0 <Start_Recording+0x310>)
 8001328:	f000 fd02 	bl	8001d30 <message>
    }

    f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 800132c:	2232      	movs	r2, #50	@ 0x32
 800132e:	4963      	ldr	r1, [pc, #396]	@ (80014bc <Start_Recording+0x2ec>)
 8001330:	4868      	ldr	r0, [pc, #416]	@ (80014d4 <Start_Recording+0x304>)
 8001332:	f00b fa05 	bl	800c740 <f_open>
    f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 8001336:	2232      	movs	r2, #50	@ 0x32
 8001338:	4962      	ldr	r1, [pc, #392]	@ (80014c4 <Start_Recording+0x2f4>)
 800133a:	4868      	ldr	r0, [pc, #416]	@ (80014dc <Start_Recording+0x30c>)
 800133c:	f00b fa00 	bl	800c740 <f_open>

    //read_and_print_registers();

    WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8001340:	4968      	ldr	r1, [pc, #416]	@ (80014e4 <Start_Recording+0x314>)
 8001342:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8001346:	f000 fb91 	bl	8001a6c <WavProcess_EncInit>
    f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <Start_Recording+0x318>)
 800134c:	222c      	movs	r2, #44	@ 0x2c
 800134e:	4965      	ldr	r1, [pc, #404]	@ (80014e4 <Start_Recording+0x314>)
 8001350:	4860      	ldr	r0, [pc, #384]	@ (80014d4 <Start_Recording+0x304>)
 8001352:	f00b fd1c 	bl	800cd8e <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 8001356:	4b64      	ldr	r3, [pc, #400]	@ (80014e8 <Start_Recording+0x318>)
 8001358:	222c      	movs	r2, #44	@ 0x2c
 800135a:	4962      	ldr	r1, [pc, #392]	@ (80014e4 <Start_Recording+0x314>)
 800135c:	485f      	ldr	r0, [pc, #380]	@ (80014dc <Start_Recording+0x30c>)
 800135e:	f00b fd16 	bl	800cd8e <f_write>

    memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 8001362:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001366:	2100      	movs	r1, #0
 8001368:	4860      	ldr	r0, [pc, #384]	@ (80014ec <Start_Recording+0x31c>)
 800136a:	f00c fcd7 	bl	800dd1c <memset>
    memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 800136e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001372:	2100      	movs	r1, #0
 8001374:	485e      	ldr	r0, [pc, #376]	@ (80014f0 <Start_Recording+0x320>)
 8001376:	f00c fcd1 	bl	800dd1c <memset>

    message("Message: %s\r\n", "________________ Recording Started _____________\r\n");
 800137a:	495e      	ldr	r1, [pc, #376]	@ (80014f4 <Start_Recording+0x324>)
 800137c:	4847      	ldr	r0, [pc, #284]	@ (800149c <Start_Recording+0x2cc>)
 800137e:	f000 fcd7 	bl	8001d30 <message>

    // Stop any ongoing DMA
    HAL_I2S_DMAStop(&hi2s2);
 8001382:	485d      	ldr	r0, [pc, #372]	@ (80014f8 <Start_Recording+0x328>)
 8001384:	f005 f8d6 	bl	8006534 <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001388:	485c      	ldr	r0, [pc, #368]	@ (80014fc <Start_Recording+0x32c>)
 800138a:	f005 f8d3 	bl	8006534 <HAL_I2S_DMAStop>

    // Check I2S state before starting
    HAL_I2S_StateTypeDef i2s2_state = HAL_I2S_GetState(&hi2s2);
 800138e:	485a      	ldr	r0, [pc, #360]	@ (80014f8 <Start_Recording+0x328>)
 8001390:	f005 faca 	bl	8006928 <HAL_I2S_GetState>
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
    HAL_I2S_StateTypeDef i2s3_state = HAL_I2S_GetState(&hi2s3);
 8001398:	4858      	ldr	r0, [pc, #352]	@ (80014fc <Start_Recording+0x32c>)
 800139a:	f005 fac5 	bl	8006928 <HAL_I2S_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	71bb      	strb	r3, [r7, #6]
    sprintf(uart_buffer, "I2S2 State before start: %d\n\r", i2s2_state);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4956      	ldr	r1, [pc, #344]	@ (8001500 <Start_Recording+0x330>)
 80013a8:	4856      	ldr	r0, [pc, #344]	@ (8001504 <Start_Recording+0x334>)
 80013aa:	f00c fbef 	bl	800db8c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013ae:	4855      	ldr	r0, [pc, #340]	@ (8001504 <Start_Recording+0x334>)
 80013b0:	f7fe ff0e 	bl	80001d0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	4951      	ldr	r1, [pc, #324]	@ (8001504 <Start_Recording+0x334>)
 80013be:	4852      	ldr	r0, [pc, #328]	@ (8001508 <Start_Recording+0x338>)
 80013c0:	f007 fc49 	bl	8008c56 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State before start: %d\n\r", i2s3_state);
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4950      	ldr	r1, [pc, #320]	@ (800150c <Start_Recording+0x33c>)
 80013ca:	484e      	ldr	r0, [pc, #312]	@ (8001504 <Start_Recording+0x334>)
 80013cc:	f00c fbde 	bl	800db8c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013d0:	484c      	ldr	r0, [pc, #304]	@ (8001504 <Start_Recording+0x334>)
 80013d2:	f7fe fefd 	bl	80001d0 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	4949      	ldr	r1, [pc, #292]	@ (8001504 <Start_Recording+0x334>)
 80013e0:	4849      	ldr	r0, [pc, #292]	@ (8001508 <Start_Recording+0x338>)
 80013e2:	f007 fc38 	bl	8008c56 <HAL_UART_Transmit>

    // Start I2S DMA
    if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80013e6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013ea:	4940      	ldr	r1, [pc, #256]	@ (80014ec <Start_Recording+0x31c>)
 80013ec:	4842      	ldr	r0, [pc, #264]	@ (80014f8 <Start_Recording+0x328>)
 80013ee:	f004 ffe5 	bl	80063bc <HAL_I2S_Receive_DMA>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01c      	beq.n	8001432 <Start_Recording+0x262>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S2 !!!!__!!__\r\n");
 80013f8:	4945      	ldr	r1, [pc, #276]	@ (8001510 <Start_Recording+0x340>)
 80013fa:	4828      	ldr	r0, [pc, #160]	@ (800149c <Start_Recording+0x2cc>)
 80013fc:	f000 fc98 	bl	8001d30 <message>
        sprintf(uart_buffer, "I2S2 Error: %d\n\r", HAL_I2S_GetError(&hi2s2));
 8001400:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <Start_Recording+0x328>)
 8001402:	f005 fa9f 	bl	8006944 <HAL_I2S_GetError>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4942      	ldr	r1, [pc, #264]	@ (8001514 <Start_Recording+0x344>)
 800140c:	483d      	ldr	r0, [pc, #244]	@ (8001504 <Start_Recording+0x334>)
 800140e:	f00c fbbd 	bl	800db8c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001412:	483c      	ldr	r0, [pc, #240]	@ (8001504 <Start_Recording+0x334>)
 8001414:	f7fe fedc 	bl	80001d0 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	b29a      	uxth	r2, r3
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	4938      	ldr	r1, [pc, #224]	@ (8001504 <Start_Recording+0x334>)
 8001422:	4839      	ldr	r0, [pc, #228]	@ (8001508 <Start_Recording+0x338>)
 8001424:	f007 fc17 	bl	8008c56 <HAL_UART_Transmit>
        Error_Handler();
 8001428:	f000 fca4 	bl	8001d74 <Error_Handler>
        return -1;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	e02c      	b.n	800148c <Start_Recording+0x2bc>
    }
    if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8001432:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001436:	492e      	ldr	r1, [pc, #184]	@ (80014f0 <Start_Recording+0x320>)
 8001438:	4830      	ldr	r0, [pc, #192]	@ (80014fc <Start_Recording+0x32c>)
 800143a:	f004 ffbf 	bl	80063bc <HAL_I2S_Receive_DMA>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01c      	beq.n	800147e <Start_Recording+0x2ae>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S3 !!!!__!!__\r\n");
 8001444:	4934      	ldr	r1, [pc, #208]	@ (8001518 <Start_Recording+0x348>)
 8001446:	4815      	ldr	r0, [pc, #84]	@ (800149c <Start_Recording+0x2cc>)
 8001448:	f000 fc72 	bl	8001d30 <message>
        sprintf(uart_buffer, "I2S3 Error: %d\n\r", HAL_I2S_GetError(&hi2s3));
 800144c:	482b      	ldr	r0, [pc, #172]	@ (80014fc <Start_Recording+0x32c>)
 800144e:	f005 fa79 	bl	8006944 <HAL_I2S_GetError>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4931      	ldr	r1, [pc, #196]	@ (800151c <Start_Recording+0x34c>)
 8001458:	482a      	ldr	r0, [pc, #168]	@ (8001504 <Start_Recording+0x334>)
 800145a:	f00c fb97 	bl	800db8c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800145e:	4829      	ldr	r0, [pc, #164]	@ (8001504 <Start_Recording+0x334>)
 8001460:	f7fe feb6 	bl	80001d0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	4925      	ldr	r1, [pc, #148]	@ (8001504 <Start_Recording+0x334>)
 800146e:	4826      	ldr	r0, [pc, #152]	@ (8001508 <Start_Recording+0x338>)
 8001470:	f007 fbf1 	bl	8008c56 <HAL_UART_Transmit>
        Error_Handler();
 8001474:	f000 fc7e 	bl	8001d74 <Error_Handler>
        return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	e006      	b.n	800148c <Start_Recording+0x2bc>
    sprintf(uart_buffer, "I2S2 State after start: %d\n\r", HAL_I2S_GetState(&hi2s2));
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
    sprintf(uart_buffer, "I2S3 State after start: %d\n\r", HAL_I2S_GetState(&hi2s3));
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);\
    */
    stop_saving = 0;  // Reset stop_saving for callbacks
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <Start_Recording+0x350>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    BufferCtl.fptr = 0;  // Reset file pointer
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <Start_Recording+0x354>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]

    return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40020c00 	.word	0x40020c00
 8001498:	0800f8a4 	.word	0x0800f8a4
 800149c:	0800f8dc 	.word	0x0800f8dc
 80014a0:	0800f8ec 	.word	0x0800f8ec
 80014a4:	0800f940 	.word	0x0800f940
 80014a8:	20000420 	.word	0x20000420
 80014ac:	200000a4 	.word	0x200000a4
 80014b0:	0800f944 	.word	0x0800f944
 80014b4:	2000041c 	.word	0x2000041c
 80014b8:	0800f968 	.word	0x0800f968
 80014bc:	200034d8 	.word	0x200034d8
 80014c0:	0800f978 	.word	0x0800f978
 80014c4:	200034f8 	.word	0x200034f8
 80014c8:	200034b8 	.word	0x200034b8
 80014cc:	0800f988 	.word	0x0800f988
 80014d0:	0800f994 	.word	0x0800f994
 80014d4:	20001454 	.word	0x20001454
 80014d8:	0800f9cc 	.word	0x0800f9cc
 80014dc:	20002484 	.word	0x20002484
 80014e0:	0800f9f4 	.word	0x0800f9f4
 80014e4:	2000549c 	.word	0x2000549c
 80014e8:	20005498 	.word	0x20005498
 80014ec:	200044b8 	.word	0x200044b8
 80014f0:	20003518 	.word	0x20003518
 80014f4:	0800fa18 	.word	0x0800fa18
 80014f8:	2000015c 	.word	0x2000015c
 80014fc:	200001a4 	.word	0x200001a4
 8001500:	0800fa4c 	.word	0x0800fa4c
 8001504:	20005638 	.word	0x20005638
 8001508:	20000374 	.word	0x20000374
 800150c:	0800fa6c 	.word	0x0800fa6c
 8001510:	0800fa8c 	.word	0x0800fa8c
 8001514:	0800fac8 	.word	0x0800fac8
 8001518:	0800fadc 	.word	0x0800fadc
 800151c:	0800fb18 	.word	0x0800fb18
 8001520:	2000545c 	.word	0x2000545c
 8001524:	20005490 	.word	0x20005490

08001528 <stop_recording>:
int stop_recording(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    HAL_I2S_DMAStop(&hi2s2);
 800152c:	4836      	ldr	r0, [pc, #216]	@ (8001608 <stop_recording+0xe0>)
 800152e:	f005 f801 	bl	8006534 <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001532:	4836      	ldr	r0, [pc, #216]	@ (800160c <stop_recording+0xe4>)
 8001534:	f004 fffe 	bl	8006534 <HAL_I2S_DMAStop>

    // Debug I2S state after stopping
    sprintf(uart_buffer, "I2S2 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s2));
 8001538:	4833      	ldr	r0, [pc, #204]	@ (8001608 <stop_recording+0xe0>)
 800153a:	f005 f9f5 	bl	8006928 <HAL_I2S_GetState>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4933      	ldr	r1, [pc, #204]	@ (8001610 <stop_recording+0xe8>)
 8001544:	4833      	ldr	r0, [pc, #204]	@ (8001614 <stop_recording+0xec>)
 8001546:	f00c fb21 	bl	800db8c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800154a:	4832      	ldr	r0, [pc, #200]	@ (8001614 <stop_recording+0xec>)
 800154c:	f7fe fe40 	bl	80001d0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	492e      	ldr	r1, [pc, #184]	@ (8001614 <stop_recording+0xec>)
 800155a:	482f      	ldr	r0, [pc, #188]	@ (8001618 <stop_recording+0xf0>)
 800155c:	f007 fb7b 	bl	8008c56 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s3));
 8001560:	482a      	ldr	r0, [pc, #168]	@ (800160c <stop_recording+0xe4>)
 8001562:	f005 f9e1 	bl	8006928 <HAL_I2S_GetState>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	492c      	ldr	r1, [pc, #176]	@ (800161c <stop_recording+0xf4>)
 800156c:	4829      	ldr	r0, [pc, #164]	@ (8001614 <stop_recording+0xec>)
 800156e:	f00c fb0d 	bl	800db8c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001572:	4828      	ldr	r0, [pc, #160]	@ (8001614 <stop_recording+0xec>)
 8001574:	f7fe fe2c 	bl	80001d0 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	4924      	ldr	r1, [pc, #144]	@ (8001614 <stop_recording+0xec>)
 8001582:	4825      	ldr	r0, [pc, #148]	@ (8001618 <stop_recording+0xf0>)
 8001584:	f007 fb67 	bl	8008c56 <HAL_UART_Transmit>

    //read_and_print_registers();

    // Update WAV headers
    f_lseek(&file_1, 0);
 8001588:	2100      	movs	r1, #0
 800158a:	4825      	ldr	r0, [pc, #148]	@ (8001620 <stop_recording+0xf8>)
 800158c:	f00b fe3b 	bl	800d206 <f_lseek>
    f_lseek(&file_2, 0);
 8001590:	2100      	movs	r1, #0
 8001592:	4824      	ldr	r0, [pc, #144]	@ (8001624 <stop_recording+0xfc>)
 8001594:	f00b fe37 	bl	800d206 <f_lseek>
    WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8001598:	4923      	ldr	r1, [pc, #140]	@ (8001628 <stop_recording+0x100>)
 800159a:	4824      	ldr	r0, [pc, #144]	@ (800162c <stop_recording+0x104>)
 800159c:	f000 fb7e 	bl	8001c9c <WavProcess_HeaderUpdate>
    f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <stop_recording+0x108>)
 80015a2:	222c      	movs	r2, #44	@ 0x2c
 80015a4:	4921      	ldr	r1, [pc, #132]	@ (800162c <stop_recording+0x104>)
 80015a6:	481e      	ldr	r0, [pc, #120]	@ (8001620 <stop_recording+0xf8>)
 80015a8:	f00b fbf1 	bl	800cd8e <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <stop_recording+0x108>)
 80015ae:	222c      	movs	r2, #44	@ 0x2c
 80015b0:	491e      	ldr	r1, [pc, #120]	@ (800162c <stop_recording+0x104>)
 80015b2:	481c      	ldr	r0, [pc, #112]	@ (8001624 <stop_recording+0xfc>)
 80015b4:	f00b fbeb 	bl	800cd8e <f_write>

    f_close(&file_1);
 80015b8:	4819      	ldr	r0, [pc, #100]	@ (8001620 <stop_recording+0xf8>)
 80015ba:	f00b fdfa 	bl	800d1b2 <f_close>
    f_close(&file_2);
 80015be:	4819      	ldr	r0, [pc, #100]	@ (8001624 <stop_recording+0xfc>)
 80015c0:	f00b fdf7 	bl	800d1b2 <f_close>

    fresult = f_mount(NULL, "/", 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	491b      	ldr	r1, [pc, #108]	@ (8001634 <stop_recording+0x10c>)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f00b f873 	bl	800c6b4 <f_mount>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <stop_recording+0x110>)
 80015d4:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <stop_recording+0x110>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <stop_recording+0xc2>
        message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 80015de:	4817      	ldr	r0, [pc, #92]	@ (800163c <stop_recording+0x114>)
 80015e0:	f000 fba6 	bl	8001d30 <message>
        return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	e00c      	b.n	8001604 <stop_recording+0xdc>
    }

    message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 80015ea:	4815      	ldr	r0, [pc, #84]	@ (8001640 <stop_recording+0x118>)
 80015ec:	f000 fba0 	bl	8001d30 <message>

    stop_saving = 1;  // Moved after file operations
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <stop_recording+0x11c>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    save_frequency = 0;  // Reset here is fine, but handle_recording resets it too
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <stop_recording+0x120>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

    HAL_Delay(200);  // Reduced delay, adjust if needed
 80015fc:	20c8      	movs	r0, #200	@ 0xc8
 80015fe:	f002 f91d 	bl	800383c <HAL_Delay>

    return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000015c 	.word	0x2000015c
 800160c:	200001a4 	.word	0x200001a4
 8001610:	0800fb2c 	.word	0x0800fb2c
 8001614:	20005638 	.word	0x20005638
 8001618:	20000374 	.word	0x20000374
 800161c:	0800fb48 	.word	0x0800fb48
 8001620:	20001454 	.word	0x20001454
 8001624:	20002484 	.word	0x20002484
 8001628:	20005464 	.word	0x20005464
 800162c:	2000549c 	.word	0x2000549c
 8001630:	20005498 	.word	0x20005498
 8001634:	0800f940 	.word	0x0800f940
 8001638:	200000a4 	.word	0x200000a4
 800163c:	0800fb64 	.word	0x0800fb64
 8001640:	0800fb88 	.word	0x0800fb88
 8001644:	2000545c 	.word	0x2000545c
 8001648:	20005458 	.word	0x20005458

0800164c <HAL_I2S_RxCpltCallback>:
// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <HAL_I2S_RxCpltCallback+0x74>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d12d      	bne.n	80016b8 <HAL_I2S_RxCpltCallback+0x6c>
	    if (hi2s->Instance == SPI2) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_I2S_RxCpltCallback+0x78>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10b      	bne.n	800167e <HAL_I2S_RxCpltCallback+0x32>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_I2S_RxCpltCallback+0x7c>)
 8001668:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800166c:	4917      	ldr	r1, [pc, #92]	@ (80016cc <HAL_I2S_RxCpltCallback+0x80>)
 800166e:	4818      	ldr	r0, [pc, #96]	@ (80016d0 <HAL_I2S_RxCpltCallback+0x84>)
 8001670:	f00b fb8d 	bl	800cd8e <f_write>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2S_RxCpltCallback+0x32>
				Error_Handler();  // File write failed
 800167a:	f000 fb7b 	bl	8001d74 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_I2S_RxCpltCallback+0x88>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10b      	bne.n	80016a0 <HAL_I2S_RxCpltCallback+0x54>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <HAL_I2S_RxCpltCallback+0x8c>)
 800168a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800168e:	4913      	ldr	r1, [pc, #76]	@ (80016dc <HAL_I2S_RxCpltCallback+0x90>)
 8001690:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <HAL_I2S_RxCpltCallback+0x94>)
 8001692:	f00b fb7c 	bl	800cd8e <f_write>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2S_RxCpltCallback+0x54>
				Error_Handler();  // File write failed
 800169c:	f000 fb6a 	bl	8001d74 <Error_Handler>
			}
		}
	    save_frequency ++;
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_I2S_RxCpltCallback+0x98>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_I2S_RxCpltCallback+0x98>)
 80016a8:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_I2S_RxCpltCallback+0x9c>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_I2S_RxCpltCallback+0x7c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <HAL_I2S_RxCpltCallback+0x9c>)
 80016b6:	6053      	str	r3, [r2, #4]
	                sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
	                HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
	            }*/

	}
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000545c 	.word	0x2000545c
 80016c4:	40003800 	.word	0x40003800
 80016c8:	200034d0 	.word	0x200034d0
 80016cc:	20004c88 	.word	0x20004c88
 80016d0:	20001454 	.word	0x20001454
 80016d4:	40003c00 	.word	0x40003c00
 80016d8:	200034d4 	.word	0x200034d4
 80016dc:	20003ce8 	.word	0x20003ce8
 80016e0:	20002484 	.word	0x20002484
 80016e4:	20005458 	.word	0x20005458
 80016e8:	20005490 	.word	0x20005490

080016ec <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d121      	bne.n	8001740 <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HAL_I2S_RxHalfCpltCallback+0x60>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8001708:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800170c:	4911      	ldr	r1, [pc, #68]	@ (8001754 <HAL_I2S_RxHalfCpltCallback+0x68>)
 800170e:	4812      	ldr	r0, [pc, #72]	@ (8001758 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8001710:	f00b fb3d 	bl	800cd8e <f_write>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 800171a:	f000 fb2b 	bl	8001d74 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_I2S_RxHalfCpltCallback+0x70>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10b      	bne.n	8001740 <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_I2S_RxHalfCpltCallback+0x74>)
 800172a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800172e:	490d      	ldr	r1, [pc, #52]	@ (8001764 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8001730:	480d      	ldr	r0, [pc, #52]	@ (8001768 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8001732:	f00b fb2c 	bl	800cd8e <f_write>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 800173c:	f000 fb1a 	bl	8001d74 <Error_Handler>
	    	}
	    }
	}

}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000545c 	.word	0x2000545c
 800174c:	40003800 	.word	0x40003800
 8001750:	200034d0 	.word	0x200034d0
 8001754:	200044b8 	.word	0x200044b8
 8001758:	20001454 	.word	0x20001454
 800175c:	40003c00 	.word	0x40003c00
 8001760:	200034d4 	.word	0x200034d4
 8001764:	20003518 	.word	0x20003518
 8001768:	20002484 	.word	0x20002484

0800176c <configure_codec>:

void configure_codec() {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	2205      	movs	r2, #5
 8001778:	21e2      	movs	r1, #226	@ 0xe2
 800177a:	482e      	ldr	r0, [pc, #184]	@ (8001834 <configure_codec+0xc8>)
 800177c:	f003 ff04 	bl	8005588 <HAL_I2C_IsDeviceReady>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 8001786:	492c      	ldr	r1, [pc, #176]	@ (8001838 <configure_codec+0xcc>)
 8001788:	482c      	ldr	r0, [pc, #176]	@ (800183c <configure_codec+0xd0>)
 800178a:	f000 fad1 	bl	8001d30 <message>
    }
    HAL_Delay(500);
 800178e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001792:	f002 f853 	bl	800383c <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e023      	b.n	80017e4 <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 800179c:	4a28      	ldr	r2, [pc, #160]	@ (8001840 <configure_codec+0xd4>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 80017a8:	4a25      	ldr	r2, [pc, #148]	@ (8001840 <configure_codec+0xd4>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	1cfb      	adds	r3, r7, #3
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	21e2      	movs	r1, #226	@ 0xe2
 80017c4:	481b      	ldr	r0, [pc, #108]	@ (8001834 <configure_codec+0xc8>)
 80017c6:	f003 fbbf 	bl	8004f48 <HAL_I2C_Mem_Write>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 80017d0:	491c      	ldr	r1, [pc, #112]	@ (8001844 <configure_codec+0xd8>)
 80017d2:	481a      	ldr	r0, [pc, #104]	@ (800183c <configure_codec+0xd0>)
 80017d4:	f000 faac 	bl	8001d30 <message>
        }
        HAL_Delay(100);
 80017d8:	2064      	movs	r0, #100	@ 0x64
 80017da:	f002 f82f 	bl	800383c <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b0e      	cmp	r3, #14
 80017e8:	d9d8      	bls.n	800179c <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2301      	movs	r3, #1
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	1cbb      	adds	r3, r7, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	2206      	movs	r2, #6
 80017fc:	21e2      	movs	r1, #226	@ 0xe2
 80017fe:	480d      	ldr	r0, [pc, #52]	@ (8001834 <configure_codec+0xc8>)
 8001800:	f003 fc9c 	bl	800513c <HAL_I2C_Mem_Read>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <configure_codec+0xdc>)
 8001812:	f002 feff 	bl	8004614 <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 800181a:	200a      	movs	r0, #10
 800181c:	f002 f80e 	bl	800383c <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 8001820:	e003      	b.n	800182a <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 8001822:	490a      	ldr	r1, [pc, #40]	@ (800184c <configure_codec+0xe0>)
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <configure_codec+0xd0>)
 8001826:	f000 fa83 	bl	8001d30 <message>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000b4 	.word	0x200000b4
 8001838:	0800fbbc 	.word	0x0800fbbc
 800183c:	0800f8dc 	.word	0x0800f8dc
 8001840:	20000000 	.word	0x20000000
 8001844:	0800fbe8 	.word	0x0800fbe8
 8001848:	40020c00 	.word	0x40020c00
 800184c:	0800fc14 	.word	0x0800fc14

08001850 <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 8001854:	4910      	ldr	r1, [pc, #64]	@ (8001898 <CODEC_RST+0x48>)
 8001856:	4811      	ldr	r0, [pc, #68]	@ (800189c <CODEC_RST+0x4c>)
 8001858:	f000 fa6a 	bl	8001d30 <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 800185c:	2201      	movs	r2, #1
 800185e:	2102      	movs	r1, #2
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <CODEC_RST+0x50>)
 8001862:	f002 fed7 	bl	8004614 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186a:	f001 ffe7 	bl	800383c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <CODEC_RST+0x50>)
 8001874:	f002 fece 	bl	8004614 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800187c:	f001 ffde 	bl	800383c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2102      	movs	r1, #2
 8001884:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <CODEC_RST+0x50>)
 8001886:	f002 fec5 	bl	8004614 <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 800188a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188e:	f001 ffd5 	bl	800383c <HAL_Delay>

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	0800fd28 	.word	0x0800fd28
 800189c:	0800f8dc 	.word	0x0800f8dc
 80018a0:	40021000 	.word	0x40021000

080018a4 <TS472IQT_EN>:

void TS472IQT_EN(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ae:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <TS472IQT_EN+0x40>)
 80018b0:	f002 feb0 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <TS472IQT_EN+0x44>)
 80018bc:	f002 feaa 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c6:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <TS472IQT_EN+0x44>)
 80018c8:	f002 fea4 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <TS472IQT_EN+0x44>)
 80018d4:	f002 fe9e 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	@ 0x64
 80018da:	f001 ffaf 	bl	800383c <HAL_Delay>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40020000 	.word	0x40020000

080018ec <History_update>:

    message("----------------------------------------------------------\r\n");
}

void History_update(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 80018f0:	494d      	ldr	r1, [pc, #308]	@ (8001a28 <History_update+0x13c>)
 80018f2:	484e      	ldr	r0, [pc, #312]	@ (8001a2c <History_update+0x140>)
 80018f4:	f00b feab 	bl	800d64e <f_stat>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <History_update+0x144>)
 80018fe:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 8001900:	4b4b      	ldr	r3, [pc, #300]	@ (8001a30 <History_update+0x144>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 8001908:	484a      	ldr	r0, [pc, #296]	@ (8001a34 <History_update+0x148>)
 800190a:	f000 fa11 	bl	8001d30 <message>
 800190e:	e01a      	b.n	8001946 <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 8001910:	4849      	ldr	r0, [pc, #292]	@ (8001a38 <History_update+0x14c>)
 8001912:	f000 fa0d 	bl	8001d30 <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001916:	220a      	movs	r2, #10
 8001918:	4944      	ldr	r1, [pc, #272]	@ (8001a2c <History_update+0x140>)
 800191a:	4848      	ldr	r0, [pc, #288]	@ (8001a3c <History_update+0x150>)
 800191c:	f00a ff10 	bl	800c740 <f_open>
		sprintf(buffer, "%d", number);
 8001920:	4b47      	ldr	r3, [pc, #284]	@ (8001a40 <History_update+0x154>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4947      	ldr	r1, [pc, #284]	@ (8001a44 <History_update+0x158>)
 8001928:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <History_update+0x15c>)
 800192a:	f00c f92f 	bl	800db8c <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 800192e:	4846      	ldr	r0, [pc, #280]	@ (8001a48 <History_update+0x15c>)
 8001930:	f7fe fc4e 	bl	80001d0 <strlen>
 8001934:	4602      	mov	r2, r0
 8001936:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <History_update+0x160>)
 8001938:	4943      	ldr	r1, [pc, #268]	@ (8001a48 <History_update+0x15c>)
 800193a:	4840      	ldr	r0, [pc, #256]	@ (8001a3c <History_update+0x150>)
 800193c:	f00b fa27 	bl	800cd8e <f_write>
		f_close(&file_1);
 8001940:	483e      	ldr	r0, [pc, #248]	@ (8001a3c <History_update+0x150>)
 8001942:	f00b fc36 	bl	800d1b2 <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 8001946:	2201      	movs	r2, #1
 8001948:	4938      	ldr	r1, [pc, #224]	@ (8001a2c <History_update+0x140>)
 800194a:	483c      	ldr	r0, [pc, #240]	@ (8001a3c <History_update+0x150>)
 800194c:	f00a fef8 	bl	800c740 <f_open>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <History_update+0x164>)
 8001956:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 8001958:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <History_update+0x164>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d15e      	bne.n	8001a1e <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 8001960:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <History_update+0x168>)
 8001962:	2263      	movs	r2, #99	@ 0x63
 8001964:	4938      	ldr	r1, [pc, #224]	@ (8001a48 <History_update+0x15c>)
 8001966:	4835      	ldr	r0, [pc, #212]	@ (8001a3c <History_update+0x150>)
 8001968:	f00b f8b2 	bl	800cad0 <f_read>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <History_update+0x164>)
 8001972:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <History_update+0x164>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11a      	bne.n	80019b2 <History_update+0xc6>
 800197c:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <History_update+0x168>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d016      	beq.n	80019b2 <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 8001984:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <History_update+0x168>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <History_update+0x15c>)
 800198a:	2100      	movs	r1, #0
 800198c:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 800198e:	482e      	ldr	r0, [pc, #184]	@ (8001a48 <History_update+0x15c>)
 8001990:	f00b fef1 	bl	800d776 <atoi>
 8001994:	4603      	mov	r3, r0
 8001996:	4a2a      	ldr	r2, [pc, #168]	@ (8001a40 <History_update+0x154>)
 8001998:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 800199a:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <History_update+0x154>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a27      	ldr	r2, [pc, #156]	@ (8001a40 <History_update+0x154>)
 80019a2:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 80019a4:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <History_update+0x154>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	482b      	ldr	r0, [pc, #172]	@ (8001a58 <History_update+0x16c>)
 80019ac:	f000 f9c0 	bl	8001d30 <message>
 80019b0:	e002      	b.n	80019b8 <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 80019b2:	482a      	ldr	r0, [pc, #168]	@ (8001a5c <History_update+0x170>)
 80019b4:	f000 f9bc 	bl	8001d30 <message>
		}
		f_close(&file_1); // Close the file
 80019b8:	4820      	ldr	r0, [pc, #128]	@ (8001a3c <History_update+0x150>)
 80019ba:	f00b fbfa 	bl	800d1b2 <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80019be:	220a      	movs	r2, #10
 80019c0:	491a      	ldr	r1, [pc, #104]	@ (8001a2c <History_update+0x140>)
 80019c2:	481e      	ldr	r0, [pc, #120]	@ (8001a3c <History_update+0x150>)
 80019c4:	f00a febc 	bl	800c740 <f_open>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <History_update+0x164>)
 80019ce:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <History_update+0x164>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11e      	bne.n	8001a16 <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <History_update+0x154>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4919      	ldr	r1, [pc, #100]	@ (8001a44 <History_update+0x158>)
 80019e0:	4819      	ldr	r0, [pc, #100]	@ (8001a48 <History_update+0x15c>)
 80019e2:	f00c f8d3 	bl	800db8c <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <History_update+0x15c>)
 80019e8:	f7fe fbf2 	bl	80001d0 <strlen>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <History_update+0x160>)
 80019f0:	4915      	ldr	r1, [pc, #84]	@ (8001a48 <History_update+0x15c>)
 80019f2:	4812      	ldr	r0, [pc, #72]	@ (8001a3c <History_update+0x150>)
 80019f4:	f00b f9cb 	bl	800cd8e <f_write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <History_update+0x164>)
 80019fe:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <History_update+0x164>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 8001a08:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <History_update+0x174>)
 8001a0a:	f000 f991 	bl	8001d30 <message>
			}
			f_close(&file_1); // Close the file
 8001a0e:	480b      	ldr	r0, [pc, #44]	@ (8001a3c <History_update+0x150>)
 8001a10:	f00b fbcf 	bl	800d1b2 <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 8001a14:	e006      	b.n	8001a24 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 8001a16:	4813      	ldr	r0, [pc, #76]	@ (8001a64 <History_update+0x178>)
 8001a18:	f000 f98a 	bl	8001d30 <message>
}
 8001a1c:	e002      	b.n	8001a24 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 8001a1e:	4812      	ldr	r0, [pc, #72]	@ (8001a68 <History_update+0x17c>)
 8001a20:	f000 f986 	bl	8001d30 <message>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200034b8 	.word	0x200034b8
 8001a2c:	0800fdec 	.word	0x0800fdec
 8001a30:	200000a4 	.word	0x200000a4
 8001a34:	0800fdf8 	.word	0x0800fdf8
 8001a38:	0800fe1c 	.word	0x0800fe1c
 8001a3c:	20001454 	.word	0x20001454
 8001a40:	2000041c 	.word	0x2000041c
 8001a44:	0800fe38 	.word	0x0800fe38
 8001a48:	200003b8 	.word	0x200003b8
 8001a4c:	200000ac 	.word	0x200000ac
 8001a50:	200034b4 	.word	0x200034b4
 8001a54:	200000a8 	.word	0x200000a8
 8001a58:	0800fe3c 	.word	0x0800fe3c
 8001a5c:	0800fe54 	.word	0x0800fe54
 8001a60:	0800fe70 	.word	0x0800fe70
 8001a64:	0800fe8c 	.word	0x0800fe8c
 8001a68:	0800feb8 	.word	0x0800feb8

08001a6c <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8001a82:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a84:	2210      	movs	r2, #16
 8001a86:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <WavProcess_EncInit+0x7c>)
 8001a8c:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a90:	222c      	movs	r2, #44	@ 0x2c
 8001a92:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a96:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 8001a98:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a9a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001a9c:	08d2      	lsrs	r2, r2, #3
 8001a9e:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001aa6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001aae:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ab2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ab6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	fb12 f303 	smulbb	r3, r2, r3
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ac4:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 8001ac6:	4907      	ldr	r1, [pc, #28]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f000 f80f 	bl	8001aec <WavProcess_HeaderInit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <WavProcess_EncInit+0x6c>
  {
    return 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <WavProcess_EncInit+0x6e>
  }
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20005464 	.word	0x20005464
 8001ae8:	001d4c00 	.word	0x001d4c00

08001aec <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2252      	movs	r2, #82	@ 0x52
 8001afa:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	2249      	movs	r2, #73	@ 0x49
 8001b02:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	2246      	movs	r2, #70	@ 0x46
 8001b0a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	2246      	movs	r2, #70	@ 0x46
 8001b12:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3305      	adds	r3, #5
 8001b20:	224c      	movs	r2, #76	@ 0x4c
 8001b22:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3306      	adds	r3, #6
 8001b28:	221d      	movs	r2, #29
 8001b2a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3307      	adds	r3, #7
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3308      	adds	r3, #8
 8001b38:	2257      	movs	r2, #87	@ 0x57
 8001b3a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3309      	adds	r3, #9
 8001b40:	2241      	movs	r2, #65	@ 0x41
 8001b42:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330a      	adds	r3, #10
 8001b48:	2256      	movs	r2, #86	@ 0x56
 8001b4a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	330b      	adds	r3, #11
 8001b50:	2245      	movs	r2, #69	@ 0x45
 8001b52:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	330c      	adds	r3, #12
 8001b58:	2266      	movs	r2, #102	@ 0x66
 8001b5a:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	330d      	adds	r3, #13
 8001b60:	226d      	movs	r2, #109	@ 0x6d
 8001b62:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	330e      	adds	r3, #14
 8001b68:	2274      	movs	r2, #116	@ 0x74
 8001b6a:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	330f      	adds	r3, #15
 8001b70:	2220      	movs	r2, #32
 8001b72:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3310      	adds	r3, #16
 8001b78:	2210      	movs	r2, #16
 8001b7a:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3311      	adds	r3, #17
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3312      	adds	r3, #18
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3313      	adds	r3, #19
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3314      	adds	r3, #20
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3315      	adds	r3, #21
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	8ada      	ldrh	r2, [r3, #22]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3316      	adds	r3, #22
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3317      	adds	r3, #23
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	0a1a      	lsrs	r2, r3, #8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3319      	adds	r3, #25
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	0c1a      	lsrs	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	331a      	adds	r3, #26
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	0e1a      	lsrs	r2, r3, #24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	331b      	adds	r3, #27
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	331c      	adds	r3, #28
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	0a1a      	lsrs	r2, r3, #8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	331d      	adds	r3, #29
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	0c1a      	lsrs	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	331e      	adds	r3, #30
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	0e1a      	lsrs	r2, r3, #24
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	331f      	adds	r3, #31
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	8c1a      	ldrh	r2, [r3, #32]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3321      	adds	r3, #33	@ 0x21
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3322      	adds	r3, #34	@ 0x22
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3323      	adds	r3, #35	@ 0x23
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3324      	adds	r3, #36	@ 0x24
 8001c50:	2264      	movs	r2, #100	@ 0x64
 8001c52:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3325      	adds	r3, #37	@ 0x25
 8001c58:	2261      	movs	r2, #97	@ 0x61
 8001c5a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3326      	adds	r3, #38	@ 0x26
 8001c60:	2274      	movs	r2, #116	@ 0x74
 8001c62:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3327      	adds	r3, #39	@ 0x27
 8001c68:	2261      	movs	r2, #97	@ 0x61
 8001c6a:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3328      	adds	r3, #40	@ 0x28
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3329      	adds	r3, #41	@ 0x29
 8001c78:	224c      	movs	r2, #76	@ 0x4c
 8001c7a:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	332a      	adds	r3, #42	@ 0x2a
 8001c80:	221d      	movs	r2, #29
 8001c82:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	332b      	adds	r3, #43	@ 0x2b
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1a      	lsrs	r2, r3, #8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3305      	adds	r3, #5
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1a      	lsrs	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0e1a      	lsrs	r2, r3, #24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3b2c      	subs	r3, #44	@ 0x2c
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001ce4:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3328      	adds	r3, #40	@ 0x28
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0a1a      	lsrs	r2, r3, #8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3329      	adds	r3, #41	@ 0x29
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c1a      	lsrs	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	332a      	adds	r3, #42	@ 0x2a
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0e1a      	lsrs	r2, r3, #24
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	332b      	adds	r3, #43	@ 0x2b
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20005490 	.word	0x20005490

08001d30 <message>:

void message(const char *format, ...) {
 8001d30:	b40f      	push	{r0, r1, r2, r3}
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 8001d38:	2064      	movs	r0, #100	@ 0x64
 8001d3a:	f00b fd21 	bl	800d780 <malloc>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <message+0x36>
        va_list args;
        va_start(args, format);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	2164      	movs	r1, #100	@ 0x64
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f00b ffd3 	bl	800dd00 <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fc08 	bl	8000570 <Send_Uart>
        free(buf);      // Free the allocated memory
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f00b fd15 	bl	800d790 <free>
    }
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d70:	b004      	add	sp, #16
 8001d72:	4770      	bx	lr

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <eeprom_init>:

#include "new_eeprom.h"


HAL_StatusTypeDef eeprom_init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, EEPROMWIRTE, 10, HAL_MAX_DELAY)!=HAL_OK)
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	220a      	movs	r2, #10
 8001d8a:	21a0      	movs	r1, #160	@ 0xa0
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <eeprom_init+0x24>)
 8001d8e:	f003 fbfb 	bl	8005588 <HAL_I2C_IsDeviceReady>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <eeprom_init+0x1c>
	{
		return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <eeprom_init+0x1e>
	}
	else
	{
		return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
	}
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000108 	.word	0x20000108

08001da8 <eeprom_write>:
	}
}


HAL_StatusTypeDef eeprom_write(uint16_t addr,uint8_t* data,uint8_t len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af04      	add	r7, sp, #16
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	4613      	mov	r3, r2
 8001db6:	717b      	strb	r3, [r7, #5]
	if(len > 128)
 8001db8:	797b      	ldrb	r3, [r7, #5]
 8001dba:	2b80      	cmp	r3, #128	@ 0x80
 8001dbc:	d901      	bls.n	8001dc2 <eeprom_write+0x1a>
	{
		return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e016      	b.n	8001df0 <eeprom_write+0x48>
	}
	else
	{
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, addr, 2, data, len, HAL_MAX_DELAY)!=HAL_OK)
 8001dc2:	797b      	ldrb	r3, [r7, #5]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	9102      	str	r1, [sp, #8]
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	21a0      	movs	r1, #160	@ 0xa0
 8001dd8:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <eeprom_write+0x50>)
 8001dda:	f003 f8b5 	bl	8004f48 <HAL_I2C_Mem_Write>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <eeprom_write+0x40>
		{
		return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e003      	b.n	8001df0 <eeprom_write+0x48>
		}
		HAL_Delay(10);
 8001de8:	200a      	movs	r0, #10
 8001dea:	f001 fd27 	bl	800383c <HAL_Delay>
		return HAL_OK;
 8001dee:	2300      	movs	r3, #0
	}
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000108 	.word	0x20000108

08001dfc <eeprom_read>:
    if (HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr, 2, buffer, len, HAL_MAX_DELAY) != HAL_OK) {
        return NULL;  // Read failed
    }
    return buffer;  // Return pointer to the provided buffer
}*/
uint8_t* eeprom_read(uint16_t addr, uint8_t* buffer, uint16_t len) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	@ 0x38
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	80fb      	strh	r3, [r7, #6]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80bb      	strh	r3, [r7, #4]
    // Removed initial check to debug I2C read
    uint16_t offset = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001e10:	e043      	b.n	8001e9a <eeprom_read+0x9e>
        uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001e12:	88ba      	ldrh	r2, [r7, #4]
 8001e14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b80      	cmp	r3, #128	@ 0x80
 8001e1a:	bfa8      	it	ge
 8001e1c:	2380      	movge	r3, #128	@ 0x80
 8001e1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr + offset, 2, buffer + offset, chunk_size, HAL_MAX_DELAY);
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e24:	4413      	add	r3, r2
 8001e26:	b299      	uxth	r1, r3
 8001e28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	21a1      	movs	r1, #161	@ 0xa1
 8001e40:	481e      	ldr	r0, [pc, #120]	@ (8001ebc <eeprom_read+0xc0>)
 8001e42:	f003 f97b 	bl	800513c <HAL_I2C_Mem_Read>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status != HAL_OK) {
 8001e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01e      	beq.n	8001e92 <eeprom_read+0x96>
            HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read fail at offset ", 27, HAL_MAX_DELAY);
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	221b      	movs	r2, #27
 8001e5a:	4919      	ldr	r1, [pc, #100]	@ (8001ec0 <eeprom_read+0xc4>)
 8001e5c:	4819      	ldr	r0, [pc, #100]	@ (8001ec4 <eeprom_read+0xc8>)
 8001e5e:	f006 fefa 	bl	8008c56 <HAL_UART_Transmit>
            char msg[20];
            sprintf(msg, "%d, status: %d\n\r", offset, status);
 8001e62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e68:	f107 000c 	add.w	r0, r7, #12
 8001e6c:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <eeprom_read+0xcc>)
 8001e6e:	f00b fe8d 	bl	800db8c <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe f9aa 	bl	80001d0 <strlen>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f107 010c 	add.w	r1, r7, #12
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <eeprom_read+0xc8>)
 8001e8a:	f006 fee4 	bl	8008c56 <HAL_UART_Transmit>
            return NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e00f      	b.n	8001eb2 <eeprom_read+0xb6>
        }
        offset += chunk_size;
 8001e92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e96:	4413      	add	r3, r2
 8001e98:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001e9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3b7      	bcc.n	8001e12 <eeprom_read+0x16>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read complete\n\r", 22, HAL_MAX_DELAY);
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <eeprom_read+0xd0>)
 8001eaa:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <eeprom_read+0xc8>)
 8001eac:	f006 fed3 	bl	8008c56 <HAL_UART_Transmit>
    return buffer;
 8001eb0:	683b      	ldr	r3, [r7, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000108 	.word	0x20000108
 8001ec0:	0800fed8 	.word	0x0800fed8
 8001ec4:	20000374 	.word	0x20000374
 8001ec8:	0800fef4 	.word	0x0800fef4
 8001ecc:	0800ff08 	.word	0x0800ff08

08001ed0 <eeprom_store_config>:
    HAL_UART_Transmit(huart, (uint8_t*)"String read from EEPROM: ", 25, HAL_MAX_DELAY);
    HAL_UART_Transmit(huart, buffer, len, HAL_MAX_DELAY);
    HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef eeprom_store_config(const char* config) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af04      	add	r7, sp, #16
 8001ed6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(config) + 1;
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7fe f979 	bl	80001d0 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	81bb      	strh	r3, [r7, #12]
    if (len > EEPROMSIZE)
    	{
    	HAL_UART_Transmit(&huart3, (uint8_t*)"Config too long\n\r", 17, HAL_MAX_DELAY);
    	return HAL_ERROR;
    	}
    	uint16_t offset = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	81fb      	strh	r3, [r7, #14]
        while (offset < len) {
 8001eea:	e029      	b.n	8001f40 <eeprom_store_config+0x70>
            uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001eec:	89ba      	ldrh	r2, [r7, #12]
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b80      	cmp	r3, #128	@ 0x80
 8001ef4:	bfa8      	it	ge
 8001ef6:	2380      	movge	r3, #128	@ 0x80
 8001ef8:	817b      	strh	r3, [r7, #10]
            if (HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, ALARM_CONFIG_ADDR + offset, 2, (uint8_t*)(config + offset), chunk_size, HAL_MAX_DELAY) != HAL_OK) {
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	89f9      	ldrh	r1, [r7, #14]
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	9202      	str	r2, [sp, #8]
 8001f08:	897a      	ldrh	r2, [r7, #10]
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	460a      	mov	r2, r1
 8001f12:	21a0      	movs	r1, #160	@ 0xa0
 8001f14:	480f      	ldr	r0, [pc, #60]	@ (8001f54 <eeprom_store_config+0x84>)
 8001f16:	f003 f817 	bl	8004f48 <HAL_I2C_Mem_Write>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <eeprom_store_config+0x62>
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM write fail\n\r", 19, HAL_MAX_DELAY);
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	2213      	movs	r2, #19
 8001f26:	490c      	ldr	r1, [pc, #48]	@ (8001f58 <eeprom_store_config+0x88>)
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <eeprom_store_config+0x8c>)
 8001f2a:	f006 fe94 	bl	8008c56 <HAL_UART_Transmit>
                return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00b      	b.n	8001f4a <eeprom_store_config+0x7a>
            }
            HAL_Delay(10);  // EEPROM write cycle delay
 8001f32:	200a      	movs	r0, #10
 8001f34:	f001 fc82 	bl	800383c <HAL_Delay>
            offset += chunk_size;
 8001f38:	89fa      	ldrh	r2, [r7, #14]
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	81fb      	strh	r3, [r7, #14]
        while (offset < len) {
 8001f40:	89fa      	ldrh	r2, [r7, #14]
 8001f42:	89bb      	ldrh	r3, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d3d1      	bcc.n	8001eec <eeprom_store_config+0x1c>
        }
        return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000108 	.word	0x20000108
 8001f58:	0800ff74 	.word	0x0800ff74
 8001f5c:	20000374 	.word	0x20000374

08001f60 <eeprom_read_config>:
        buffer[max_len - 1] = '\0';
        return HAL_OK;
    }
    return HAL_ERROR;
}*/
HAL_StatusTypeDef eeprom_read_config(char* buffer, uint16_t max_len) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
    const uint16_t read_size = 256;  // Read 2 pages
 8001f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f70:	81fb      	strh	r3, [r7, #14]
    if (max_len < read_size) {
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d208      	bcs.n	8001f8c <eeprom_read_config+0x2c>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Buffer too small for 2 pages\n\r", 30, HAL_MAX_DELAY);
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	221e      	movs	r2, #30
 8001f80:	491f      	ldr	r1, [pc, #124]	@ (8002000 <eeprom_read_config+0xa0>)
 8001f82:	4820      	ldr	r0, [pc, #128]	@ (8002004 <eeprom_read_config+0xa4>)
 8001f84:	f006 fe67 	bl	8008c56 <HAL_UART_Transmit>
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e034      	b.n	8001ff6 <eeprom_read_config+0x96>
    }
    if (eeprom_read(ALARM_CONFIG_ADDR, (uint8_t*)buffer, read_size) != NULL) {
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff ff32 	bl	8001dfc <eeprom_read>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d023      	beq.n	8001fe6 <eeprom_read_config+0x86>
        buffer[read_size - 1] = '\0';
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
        if (strlen(buffer) > 0 && buffer[0] != 0xFF && buffer[0] != 0x00) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d010      	beq.n	8001fd4 <eeprom_read_config+0x74>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2bff      	cmp	r3, #255	@ 0xff
 8001fb8:	d00c      	beq.n	8001fd4 <eeprom_read_config+0x74>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <eeprom_read_config+0x74>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Config read success (256 bytes)\n\r", 33, HAL_MAX_DELAY);
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	2221      	movs	r2, #33	@ 0x21
 8001fc8:	490f      	ldr	r1, [pc, #60]	@ (8002008 <eeprom_read_config+0xa8>)
 8001fca:	480e      	ldr	r0, [pc, #56]	@ (8002004 <eeprom_read_config+0xa4>)
 8001fcc:	f006 fe43 	bl	8008c56 <HAL_UART_Transmit>
            return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e010      	b.n	8001ff6 <eeprom_read_config+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Config empty or invalid\n\r", 25, HAL_MAX_DELAY);
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd8:	2219      	movs	r2, #25
 8001fda:	490c      	ldr	r1, [pc, #48]	@ (800200c <eeprom_read_config+0xac>)
 8001fdc:	4809      	ldr	r0, [pc, #36]	@ (8002004 <eeprom_read_config+0xa4>)
 8001fde:	f006 fe3a 	bl	8008c56 <HAL_UART_Transmit>
            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e007      	b.n	8001ff6 <eeprom_read_config+0x96>
        }
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read config fail\n\r", 25, HAL_MAX_DELAY);
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	2219      	movs	r2, #25
 8001fec:	4908      	ldr	r1, [pc, #32]	@ (8002010 <eeprom_read_config+0xb0>)
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <eeprom_read_config+0xa4>)
 8001ff0:	f006 fe31 	bl	8008c56 <HAL_UART_Transmit>
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	0800ff88 	.word	0x0800ff88
 8002004:	20000374 	.word	0x20000374
 8002008:	0800ffa8 	.word	0x0800ffa8
 800200c:	0800ffcc 	.word	0x0800ffcc
 8002010:	0800ffe8 	.word	0x0800ffe8

08002014 <decimal_to_bcd>:
rtc_timedate_t alarm_queue[MAX_ALARMS] = {0}; // Global alarm queue
uint8_t alarm_count = 0;                      // Global alarm count
uint8_t current_idx = 0;                      // Global current index


uint8_t decimal_to_bcd(uint8_t decimal) {
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <decimal_to_bcd+0x44>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	08db      	lsrs	r3, r3, #3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	b258      	sxtb	r0, r3
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <decimal_to_bcd+0x44>)
 8002032:	fba3 1302 	umull	r1, r3, r3, r2
 8002036:	08d9      	lsrs	r1, r3, #3
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	b25b      	sxtb	r3, r3
 8002046:	4303      	orrs	r3, r0
 8002048:	b25b      	sxtb	r3, r3
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	cccccccd 	.word	0xcccccccd

0800205c <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd) {
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <rtc_init>:
void rtc_init(I2C_HandleTypeDef *hi2c)
{// 1 check if rtc is ready
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	6078      	str	r0, [r7, #4]
	ret=HAL_I2C_IsDeviceReady(&hi2c1, slavwrite, 10, HAL_MAX_DELAY);
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	220a      	movs	r2, #10
 800209e:	21a2      	movs	r1, #162	@ 0xa2
 80020a0:	4881      	ldr	r0, [pc, #516]	@ (80022a8 <rtc_init+0x218>)
 80020a2:	f003 fa71 	bl	8005588 <HAL_I2C_IsDeviceReady>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b80      	ldr	r3, [pc, #512]	@ (80022ac <rtc_init+0x21c>)
 80020ac:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80020ae:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <rtc_init+0x21c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d113      	bne.n	80020de <rtc_init+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020bc:	487c      	ldr	r0, [pc, #496]	@ (80022b0 <rtc_init+0x220>)
 80020be:	f002 faa9 	bl	8004614 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80020c2:	2064      	movs	r0, #100	@ 0x64
 80020c4:	f001 fbba 	bl	800383c <HAL_Delay>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC ok\n\r", 8, HAL_MAX_DELAY);
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
 80020cc:	2208      	movs	r2, #8
 80020ce:	4979      	ldr	r1, [pc, #484]	@ (80022b4 <rtc_init+0x224>)
 80020d0:	4879      	ldr	r0, [pc, #484]	@ (80022b8 <rtc_init+0x228>)
 80020d2:	f006 fdc0 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020d6:	2064      	movs	r0, #100	@ 0x64
 80020d8:	f001 fbb0 	bl	800383c <HAL_Delay>
 80020dc:	e009      	b.n	80020f2 <rtc_init+0x62>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC notok\n\r", 11, HAL_MAX_DELAY);
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	220b      	movs	r2, #11
 80020e4:	4975      	ldr	r1, [pc, #468]	@ (80022bc <rtc_init+0x22c>)
 80020e6:	4874      	ldr	r0, [pc, #464]	@ (80022b8 <rtc_init+0x228>)
 80020e8:	f006 fdb5 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020ec:	2064      	movs	r0, #100	@ 0x64
 80020ee:	f001 fba5 	bl	800383c <HAL_Delay>
	  }
	  //2 perform otp refresh Performing an OTP refresh ensures that the device operates with the correct calibration data after power-on or reset.
	  uint8_t data[2];
	  data[0]=CLKOUT_ctl;
 80020f2:	230f      	movs	r3, #15
 80020f4:	733b      	strb	r3, [r7, #12]
	  data[1]=0x01;//set it to 1 to initiate the refresh process
 80020f6:	2301      	movs	r3, #1
 80020f8:	737b      	strb	r3, [r7, #13]

	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2302      	movs	r3, #2
 8002106:	21a2      	movs	r1, #162	@ 0xa2
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f002 fbf9 	bl	8004900 <HAL_I2C_Master_Transmit>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b66      	ldr	r3, [pc, #408]	@ (80022ac <rtc_init+0x21c>)
 8002114:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002116:	4b65      	ldr	r3, [pc, #404]	@ (80022ac <rtc_init+0x21c>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <rtc_init+0xa4>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh ok\n\r", 20, HAL_MAX_DELAY);
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	2214      	movs	r2, #20
 8002124:	4966      	ldr	r1, [pc, #408]	@ (80022c0 <rtc_init+0x230>)
 8002126:	4864      	ldr	r0, [pc, #400]	@ (80022b8 <rtc_init+0x228>)
 8002128:	f006 fd95 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800212c:	2064      	movs	r0, #100	@ 0x64
 800212e:	f001 fb85 	bl	800383c <HAL_Delay>
 8002132:	e009      	b.n	8002148 <rtc_init+0xb8>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh notok\n\r", 23, HAL_MAX_DELAY);
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	2217      	movs	r2, #23
 800213a:	4962      	ldr	r1, [pc, #392]	@ (80022c4 <rtc_init+0x234>)
 800213c:	485e      	ldr	r0, [pc, #376]	@ (80022b8 <rtc_init+0x228>)
 800213e:	f006 fd8a 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002142:	2064      	movs	r0, #100	@ 0x64
 8002144:	f001 fb7a 	bl	800383c <HAL_Delay>
	  }

	  //3 Configure Control_1 Register (0x00) for basic settings
	  data[0]=Control_1;
 8002148:	2300      	movs	r3, #0
 800214a:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 800214c:	2300      	movs	r3, #0
 800214e:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002150:	f107 020c 	add.w	r2, r7, #12
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2302      	movs	r3, #2
 800215c:	21a2      	movs	r1, #162	@ 0xa2
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f002 fbce 	bl	8004900 <HAL_I2C_Master_Transmit>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <rtc_init+0x21c>)
 800216a:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800216c:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <rtc_init+0x21c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <rtc_init+0xfa>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 ok\n\r", 14, HAL_MAX_DELAY);
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	220e      	movs	r2, #14
 800217a:	4953      	ldr	r1, [pc, #332]	@ (80022c8 <rtc_init+0x238>)
 800217c:	484e      	ldr	r0, [pc, #312]	@ (80022b8 <rtc_init+0x228>)
 800217e:	f006 fd6a 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002182:	2064      	movs	r0, #100	@ 0x64
 8002184:	f001 fb5a 	bl	800383c <HAL_Delay>
 8002188:	e009      	b.n	800219e <rtc_init+0x10e>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 notok\n\r", 17, HAL_MAX_DELAY);
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	2211      	movs	r2, #17
 8002190:	494e      	ldr	r1, [pc, #312]	@ (80022cc <rtc_init+0x23c>)
 8002192:	4849      	ldr	r0, [pc, #292]	@ (80022b8 <rtc_init+0x228>)
 8002194:	f006 fd5f 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002198:	2064      	movs	r0, #100	@ 0x64
 800219a:	f001 fb4f 	bl	800383c <HAL_Delay>
	  }

	  //4 Configure Control_2 Register (0x01) for alarm
	  data[0]=Control_2;
 800219e:	2301      	movs	r3, #1
 80021a0:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 80021a2:	2300      	movs	r3, #0
 80021a4:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80021a6:	f107 020c 	add.w	r2, r7, #12
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2302      	movs	r3, #2
 80021b2:	21a2      	movs	r1, #162	@ 0xa2
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f002 fba3 	bl	8004900 <HAL_I2C_Master_Transmit>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	4b3b      	ldr	r3, [pc, #236]	@ (80022ac <rtc_init+0x21c>)
 80021c0:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80021c2:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <rtc_init+0x21c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <rtc_init+0x150>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 ok\n\r", 14, HAL_MAX_DELAY);
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	220e      	movs	r2, #14
 80021d0:	493f      	ldr	r1, [pc, #252]	@ (80022d0 <rtc_init+0x240>)
 80021d2:	4839      	ldr	r0, [pc, #228]	@ (80022b8 <rtc_init+0x228>)
 80021d4:	f006 fd3f 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021d8:	2064      	movs	r0, #100	@ 0x64
 80021da:	f001 fb2f 	bl	800383c <HAL_Delay>
 80021de:	e009      	b.n	80021f4 <rtc_init+0x164>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 notok\n\r", 17, HAL_MAX_DELAY);
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	2211      	movs	r2, #17
 80021e6:	493b      	ldr	r1, [pc, #236]	@ (80022d4 <rtc_init+0x244>)
 80021e8:	4833      	ldr	r0, [pc, #204]	@ (80022b8 <rtc_init+0x228>)
 80021ea:	f006 fd34 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021ee:	2064      	movs	r0, #100	@ 0x64
 80021f0:	f001 fb24 	bl	800383c <HAL_Delay>
	  }

	  //5 Configure Control_3 Register (0x02) for battery
	  data[0]=Control_3;
 80021f4:	2302      	movs	r3, #2
 80021f6:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 80021f8:	2300      	movs	r3, #0
 80021fa:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80021fc:	f107 020c 	add.w	r2, r7, #12
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2302      	movs	r3, #2
 8002208:	21a2      	movs	r1, #162	@ 0xa2
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f002 fb78 	bl	8004900 <HAL_I2C_Master_Transmit>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b25      	ldr	r3, [pc, #148]	@ (80022ac <rtc_init+0x21c>)
 8002216:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <rtc_init+0x21c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <rtc_init+0x1a6>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 ok\n\r", 14, HAL_MAX_DELAY);
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	220e      	movs	r2, #14
 8002226:	492c      	ldr	r1, [pc, #176]	@ (80022d8 <rtc_init+0x248>)
 8002228:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <rtc_init+0x228>)
 800222a:	f006 fd14 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800222e:	2064      	movs	r0, #100	@ 0x64
 8002230:	f001 fb04 	bl	800383c <HAL_Delay>
 8002234:	e009      	b.n	800224a <rtc_init+0x1ba>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 notok\n\r", 17, HAL_MAX_DELAY);
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	2211      	movs	r2, #17
 800223c:	4927      	ldr	r1, [pc, #156]	@ (80022dc <rtc_init+0x24c>)
 800223e:	481e      	ldr	r0, [pc, #120]	@ (80022b8 <rtc_init+0x228>)
 8002240:	f006 fd09 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	f001 faf9 	bl	800383c <HAL_Delay>
	  }

	  //6 Set the CLKOUT frequency, if needed
	  data[0]=CLKOUT_ctl;
 800224a:	230f      	movs	r3, #15
 800224c:	733b      	strb	r3, [r7, #12]
	  data[1]=0x07;
 800224e:	2307      	movs	r3, #7
 8002250:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002252:	f107 020c 	add.w	r2, r7, #12
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2302      	movs	r3, #2
 800225e:	21a2      	movs	r1, #162	@ 0xa2
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 fb4d 	bl	8004900 <HAL_I2C_Master_Transmit>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <rtc_init+0x21c>)
 800226c:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800226e:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <rtc_init+0x21c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <rtc_init+0x1fc>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout ok\n\r", 11, HAL_MAX_DELAY);
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	220b      	movs	r2, #11
 800227c:	4918      	ldr	r1, [pc, #96]	@ (80022e0 <rtc_init+0x250>)
 800227e:	480e      	ldr	r0, [pc, #56]	@ (80022b8 <rtc_init+0x228>)
 8002280:	f006 fce9 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002284:	2064      	movs	r0, #100	@ 0x64
 8002286:	f001 fad9 	bl	800383c <HAL_Delay>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
		  HAL_Delay(100);
	  }

}
 800228a:	e009      	b.n	80022a0 <rtc_init+0x210>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	220e      	movs	r2, #14
 8002292:	4914      	ldr	r1, [pc, #80]	@ (80022e4 <rtc_init+0x254>)
 8002294:	4808      	ldr	r0, [pc, #32]	@ (80022b8 <rtc_init+0x228>)
 8002296:	f006 fcde 	bl	8008c56 <HAL_UART_Transmit>
		  HAL_Delay(100);
 800229a:	2064      	movs	r0, #100	@ 0x64
 800229c:	f001 face 	bl	800383c <HAL_Delay>
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000108 	.word	0x20000108
 80022ac:	200000b0 	.word	0x200000b0
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	08010004 	.word	0x08010004
 80022b8:	20000374 	.word	0x20000374
 80022bc:	08010010 	.word	0x08010010
 80022c0:	0801001c 	.word	0x0801001c
 80022c4:	08010034 	.word	0x08010034
 80022c8:	0801004c 	.word	0x0801004c
 80022cc:	0801005c 	.word	0x0801005c
 80022d0:	08010070 	.word	0x08010070
 80022d4:	08010080 	.word	0x08010080
 80022d8:	08010094 	.word	0x08010094
 80022dc:	080100a4 	.word	0x080100a4
 80022e0:	080100b8 	.word	0x080100b8
 80022e4:	080100c4 	.word	0x080100c4

080022e8 <rtc_wirte>:

HAL_StatusTypeDef rtc_wirte(uint8_t reg_addr,uint8_t value)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	4603      	mov	r3, r0
 80022f0:	460a      	mov	r2, r1
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=reg_addr;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 80022fc:	79bb      	ldrb	r3, [r7, #6]
 80022fe:	737b      	strb	r3, [r7, #13]

	ret=HAL_I2C_Master_Transmit(&hi2c1, slavwrite, data, sizeof(data), HAL_MAX_DELAY);
 8002300:	f107 020c 	add.w	r2, r7, #12
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2302      	movs	r3, #2
 800230c:	21a2      	movs	r1, #162	@ 0xa2
 800230e:	480c      	ldr	r0, [pc, #48]	@ (8002340 <rtc_wirte+0x58>)
 8002310:	f002 faf6 	bl	8004900 <HAL_I2C_Master_Transmit>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <rtc_wirte+0x5c>)
 800231a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return HAL_ERROR;
	}*/
	if (ret != HAL_OK) {
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <rtc_wirte+0x5c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <rtc_wirte+0x4e>
	        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C write fail\n\r", 16, HAL_MAX_DELAY);
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	2210      	movs	r2, #16
 800232a:	4907      	ldr	r1, [pc, #28]	@ (8002348 <rtc_wirte+0x60>)
 800232c:	4807      	ldr	r0, [pc, #28]	@ (800234c <rtc_wirte+0x64>)
 800232e:	f006 fc92 	bl	8008c56 <HAL_UART_Transmit>
	        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <rtc_wirte+0x50>
	    }
	    return HAL_OK;
 8002336:	2300      	movs	r3, #0

}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000108 	.word	0x20000108
 8002344:	200000b0 	.word	0x200000b0
 8002348:	080100d4 	.word	0x080100d4
 800234c:	20000374 	.word	0x20000374

08002350 <rtc_read>:

uint8_t rtc_read(uint8_t reg_addr)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret1;
	    uint8_t value = 0xFF; // Default value in case of error
 800235a:	23ff      	movs	r3, #255	@ 0xff
 800235c:	73bb      	strb	r3, [r7, #14]

	    // Transmit the register address
	    ret1 = HAL_I2C_Master_Transmit(&hi2c1, slavwrite, &reg_addr, 1, HAL_MAX_DELAY);
 800235e:	1dfa      	adds	r2, r7, #7
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	21a2      	movs	r1, #162	@ 0xa2
 800236a:	4810      	ldr	r0, [pc, #64]	@ (80023ac <rtc_read+0x5c>)
 800236c:	f002 fac8 	bl	8004900 <HAL_I2C_Master_Transmit>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <rtc_read+0x2e>
	        return value; // Return default value if transmit fails
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	e011      	b.n	80023a2 <rtc_read+0x52>
	    }

	    // Receive the register value
	    ret1 = HAL_I2C_Master_Receive(&hi2c1, slaveread, &value, 1, HAL_MAX_DELAY);
 800237e:	f107 020e 	add.w	r2, r7, #14
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	21a3      	movs	r1, #163	@ 0xa3
 800238c:	4807      	ldr	r0, [pc, #28]	@ (80023ac <rtc_read+0x5c>)
 800238e:	f002 fbb5 	bl	8004afc <HAL_I2C_Master_Receive>
 8002392:	4603      	mov	r3, r0
 8002394:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <rtc_read+0x50>
	        return 0xFF; // Return default value if receive fails
 800239c:	23ff      	movs	r3, #255	@ 0xff
 800239e:	e000      	b.n	80023a2 <rtc_read+0x52>
	    }

	    return value; // Return the register value
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000108 	.word	0x20000108

080023b0 <rtc_settime>:

HAL_StatusTypeDef rtc_settime(const rtc_timedate_t* timedate)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if(rtc_wirte(Seconds, decimal_to_bcd(timedate->second))!=HAL_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	789b      	ldrb	r3, [r3, #2]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fe29 	bl	8002014 <decimal_to_bcd>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	2003      	movs	r0, #3
 80023c8:	f7ff ff8e 	bl	80022e8 <rtc_wirte>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <rtc_settime+0x26>
	{
		return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e04b      	b.n	800246e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Minutes, decimal_to_bcd(timedate->minute))!=HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fe1a 	bl	8002014 <decimal_to_bcd>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	2004      	movs	r0, #4
 80023e6:	f7ff ff7f 	bl	80022e8 <rtc_wirte>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <rtc_settime+0x44>
	{
		return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e03c      	b.n	800246e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Hours, decimal_to_bcd(timedate->hour))!=HAL_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe0b 	bl	8002014 <decimal_to_bcd>
 80023fe:	4603      	mov	r3, r0
 8002400:	4619      	mov	r1, r3
 8002402:	2005      	movs	r0, #5
 8002404:	f7ff ff70 	bl	80022e8 <rtc_wirte>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <rtc_settime+0x62>
	{
		return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e02d      	b.n	800246e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Days, decimal_to_bcd(timedate->day))!=HAL_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	78db      	ldrb	r3, [r3, #3]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fdfc 	bl	8002014 <decimal_to_bcd>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	2006      	movs	r0, #6
 8002422:	f7ff ff61 	bl	80022e8 <rtc_wirte>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <rtc_settime+0x80>
	{
		return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e01e      	b.n	800246e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Months, decimal_to_bcd(timedate->month))!=HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fded 	bl	8002014 <decimal_to_bcd>
 800243a:	4603      	mov	r3, r0
 800243c:	4619      	mov	r1, r3
 800243e:	2008      	movs	r0, #8
 8002440:	f7ff ff52 	bl	80022e8 <rtc_wirte>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <rtc_settime+0x9e>
	{
		return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <rtc_settime+0xbe>
	}
	if(rtc_wirte(Years, decimal_to_bcd(timedate->year))!=HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	795b      	ldrb	r3, [r3, #5]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdde 	bl	8002014 <decimal_to_bcd>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	2009      	movs	r0, #9
 800245e:	f7ff ff43 	bl	80022e8 <rtc_wirte>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <rtc_settime+0xbc>
	{
		return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <rtc_settime+0xbe>
	}

	return HAL_OK;
 800246c:	2300      	movs	r3, #0

}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <rtc_gettime>:

HAL_StatusTypeDef rtc_gettime(rtc_timedate_t* timedate)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp=rtc_read(Seconds);//second register
 800247e:	2003      	movs	r0, #3
 8002480:	f7ff ff66 	bl	8002350 <rtc_read>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2bff      	cmp	r3, #255	@ 0xff
 800248c:	d101      	bne.n	8002492 <rtc_gettime+0x1c>
	{
		return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e062      	b.n	8002558 <rtc_gettime+0xe2>
	}
	timedate->second= bcd_to_decimal(temp);
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fde1 	bl	800205c <bcd_to_decimal>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	709a      	strb	r2, [r3, #2]
	temp=rtc_read(Minutes);//minute register
 80024a2:	2004      	movs	r0, #4
 80024a4:	f7ff ff54 	bl	8002350 <rtc_read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2bff      	cmp	r3, #255	@ 0xff
 80024b0:	d101      	bne.n	80024b6 <rtc_gettime+0x40>
	{
		return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e050      	b.n	8002558 <rtc_gettime+0xe2>
	}
	timedate->minute= bcd_to_decimal(temp);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fdcf 	bl	800205c <bcd_to_decimal>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	705a      	strb	r2, [r3, #1]
	temp=rtc_read(Hours);//hour register
 80024c6:	2005      	movs	r0, #5
 80024c8:	f7ff ff42 	bl	8002350 <rtc_read>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2bff      	cmp	r3, #255	@ 0xff
 80024d4:	d101      	bne.n	80024da <rtc_gettime+0x64>
	{
		return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e03e      	b.n	8002558 <rtc_gettime+0xe2>
	}
	timedate->hour= bcd_to_decimal(temp);
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fdbd 	bl	800205c <bcd_to_decimal>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	701a      	strb	r2, [r3, #0]
	temp=rtc_read(Days);//day register
 80024ea:	2006      	movs	r0, #6
 80024ec:	f7ff ff30 	bl	8002350 <rtc_read>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2bff      	cmp	r3, #255	@ 0xff
 80024f8:	d101      	bne.n	80024fe <rtc_gettime+0x88>
	{
		return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e02c      	b.n	8002558 <rtc_gettime+0xe2>
	}
	timedate->day= bcd_to_decimal(temp);
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fdab 	bl	800205c <bcd_to_decimal>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	70da      	strb	r2, [r3, #3]
	temp=rtc_read(Months);//second register
 800250e:	2008      	movs	r0, #8
 8002510:	f7ff ff1e 	bl	8002350 <rtc_read>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2bff      	cmp	r3, #255	@ 0xff
 800251c:	d101      	bne.n	8002522 <rtc_gettime+0xac>
	{
		return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e01a      	b.n	8002558 <rtc_gettime+0xe2>
	}
	timedate->month= bcd_to_decimal(temp);
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd99 	bl	800205c <bcd_to_decimal>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	711a      	strb	r2, [r3, #4]
	temp=rtc_read(Years);//second register
 8002532:	2009      	movs	r0, #9
 8002534:	f7ff ff0c 	bl	8002350 <rtc_read>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2bff      	cmp	r3, #255	@ 0xff
 8002540:	d101      	bne.n	8002546 <rtc_gettime+0xd0>
	{
		return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e008      	b.n	8002558 <rtc_gettime+0xe2>
	}
	timedate->year= bcd_to_decimal(temp);
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd87 	bl	800205c <bcd_to_decimal>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	715a      	strb	r2, [r3, #5]

	return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <rtc_setalarm>:


HAL_StatusTypeDef rtc_setalarm(rtc_timedate_t* timedate)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	//second alarm
	if(rtc_wirte(Second_alarm, (timedate->second==0xFF)?0x80:decimal_to_bcd(timedate->second))!=HAL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	789b      	ldrb	r3, [r3, #2]
 800256c:	2bff      	cmp	r3, #255	@ 0xff
 800256e:	d006      	beq.n	800257e <rtc_setalarm+0x1e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fd4d 	bl	8002014 <decimal_to_bcd>
 800257a:	4603      	mov	r3, r0
 800257c:	e000      	b.n	8002580 <rtc_setalarm+0x20>
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	4619      	mov	r1, r3
 8002582:	200a      	movs	r0, #10
 8002584:	f7ff feb0 	bl	80022e8 <rtc_wirte>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <rtc_setalarm+0x32>
	{
		return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07a      	b.n	8002688 <rtc_setalarm+0x128>
	}
	//minute alarm
	if(rtc_wirte(Minute_alarm, (timedate->minute==0xFF)?0x80:decimal_to_bcd(timedate->minute))!=HAL_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2bff      	cmp	r3, #255	@ 0xff
 8002598:	d006      	beq.n	80025a8 <rtc_setalarm+0x48>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fd38 	bl	8002014 <decimal_to_bcd>
 80025a4:	4603      	mov	r3, r0
 80025a6:	e000      	b.n	80025aa <rtc_setalarm+0x4a>
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	4619      	mov	r1, r3
 80025ac:	200b      	movs	r0, #11
 80025ae:	f7ff fe9b 	bl	80022e8 <rtc_wirte>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <rtc_setalarm+0x5c>
	{
		return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e065      	b.n	8002688 <rtc_setalarm+0x128>
	}
	//hour alarm
	if(rtc_wirte(Hour_alarm, (timedate->hour==0xFF)?0x80:decimal_to_bcd(timedate->hour))!=HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2bff      	cmp	r3, #255	@ 0xff
 80025c2:	d006      	beq.n	80025d2 <rtc_setalarm+0x72>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fd23 	bl	8002014 <decimal_to_bcd>
 80025ce:	4603      	mov	r3, r0
 80025d0:	e000      	b.n	80025d4 <rtc_setalarm+0x74>
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	4619      	mov	r1, r3
 80025d6:	200c      	movs	r0, #12
 80025d8:	f7ff fe86 	bl	80022e8 <rtc_wirte>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <rtc_setalarm+0x86>
	{
		return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e050      	b.n	8002688 <rtc_setalarm+0x128>
	}
	//day alarm
	if(rtc_wirte(Day_alarm, (timedate->day==0xFF)?0x80:decimal_to_bcd(timedate->day))!=HAL_OK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	78db      	ldrb	r3, [r3, #3]
 80025ea:	2bff      	cmp	r3, #255	@ 0xff
 80025ec:	d006      	beq.n	80025fc <rtc_setalarm+0x9c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fd0e 	bl	8002014 <decimal_to_bcd>
 80025f8:	4603      	mov	r3, r0
 80025fa:	e000      	b.n	80025fe <rtc_setalarm+0x9e>
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	4619      	mov	r1, r3
 8002600:	200d      	movs	r0, #13
 8002602:	f7ff fe71 	bl	80022e8 <rtc_wirte>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <rtc_setalarm+0xb0>
	{
		return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e03b      	b.n	8002688 <rtc_setalarm+0x128>
	}
	//week alarm
	if(rtc_wirte(Weekday_alarm, (timedate->weekday==0xFF)?0x80:decimal_to_bcd(timedate->weekday))!=HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	799b      	ldrb	r3, [r3, #6]
 8002614:	2bff      	cmp	r3, #255	@ 0xff
 8002616:	d006      	beq.n	8002626 <rtc_setalarm+0xc6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	799b      	ldrb	r3, [r3, #6]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fcf9 	bl	8002014 <decimal_to_bcd>
 8002622:	4603      	mov	r3, r0
 8002624:	e000      	b.n	8002628 <rtc_setalarm+0xc8>
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	4619      	mov	r1, r3
 800262a:	200e      	movs	r0, #14
 800262c:	f7ff fe5c 	bl	80022e8 <rtc_wirte>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <rtc_setalarm+0xda>
	{
		return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e026      	b.n	8002688 <rtc_setalarm+0x128>
	}

	uint8_t control2 = rtc_read(Control_2);
 800263a:	2001      	movs	r0, #1
 800263c:	f7ff fe88 	bl	8002350 <rtc_read>
 8002640:	4603      	mov	r3, r0
 8002642:	73fb      	strb	r3, [r7, #15]
	    if (control2 == 0xFF) return HAL_ERROR;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2bff      	cmp	r3, #255	@ 0xff
 8002648:	d101      	bne.n	800264e <rtc_setalarm+0xee>
 800264a:	2301      	movs	r3, #1
 800264c:	e01c      	b.n	8002688 <rtc_setalarm+0x128>
	    control2 &= ~(1 << 7);  // Clear MSF
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002654:	73fb      	strb	r3, [r7, #15]
	    control2 |= (1 << 1);   // Set AIE
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	73fb      	strb	r3, [r7, #15]
	    if (rtc_wirte(Control_2, control2) != HAL_OK) return HAL_ERROR;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	4619      	mov	r1, r3
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff fe40 	bl	80022e8 <rtc_wirte>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <rtc_setalarm+0x112>
 800266e:	2301      	movs	r3, #1
 8002670:	e00a      	b.n	8002688 <rtc_setalarm+0x128>

	    HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm set complete\n\r", 20, HAL_MAX_DELAY);
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	2214      	movs	r2, #20
 8002678:	4905      	ldr	r1, [pc, #20]	@ (8002690 <rtc_setalarm+0x130>)
 800267a:	4806      	ldr	r0, [pc, #24]	@ (8002694 <rtc_setalarm+0x134>)
 800267c:	f006 faeb 	bl	8008c56 <HAL_UART_Transmit>
	    read_and_transmit(Control_2);
 8002680:	2001      	movs	r0, #1
 8002682:	f000 f84f 	bl	8002724 <read_and_transmit>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"interrupt notenabled\n\r", 22, HAL_MAX_DELAY);
		HAL_Delay(100);
	}*/
	return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	080100e8 	.word	0x080100e8
 8002694:	20000374 	.word	0x20000374

08002698 <rtc_clearalarm>:

HAL_StatusTypeDef rtc_clearalarm(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
	uint8_t control2;
	//read_and_transmit(0x01);
	control2=rtc_read(Control_2);
 800269e:	2001      	movs	r0, #1
 80026a0:	f7ff fe56 	bl	8002350 <rtc_read>
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
	//read_and_transmit(0x01);
	if(control2==0xFF)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2bff      	cmp	r3, #255	@ 0xff
 80026ac:	d101      	bne.n	80026b2 <rtc_clearalarm+0x1a>
	{
		return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <rtc_clearalarm+0x38>
	}
	control2 &=~(1<<4);
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f023 0310 	bic.w	r3, r3, #16
 80026b8:	71fb      	strb	r3, [r7, #7]
	//control2=0x00;
	if(rtc_wirte(Control_2, control2)!=HAL_OK)
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	4619      	mov	r1, r3
 80026be:	2001      	movs	r0, #1
 80026c0:	f7ff fe12 	bl	80022e8 <rtc_wirte>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <rtc_clearalarm+0x36>
	{
		//read_and_transmit(0x01);
		return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <rtc_clearalarm+0x38>
	}

	return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <rtc_check_alarm_flag>:

uint8_t rtc_check_alarm_flag(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
	{
	uint8_t control2 = rtc_read(Control_2); // Read the Control_2 register
 80026de:	2001      	movs	r0, #1
 80026e0:	f7ff fe36 	bl	8002350 <rtc_read>
 80026e4:	4603      	mov	r3, r0
 80026e6:	71fb      	strb	r3, [r7, #7]
	read_and_transmit(Control_2);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f000 f81b 	bl	8002724 <read_and_transmit>
	    if (control2 == 0xFF) {
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2bff      	cmp	r3, #255	@ 0xff
 80026f2:	d108      	bne.n	8002706 <rtc_check_alarm_flag+0x2e>
	    	HAL_UART_Transmit(&huart3, (uint8_t*)"Flag read error\n\r", 17, HAL_MAX_DELAY);
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	2211      	movs	r2, #17
 80026fa:	4908      	ldr	r1, [pc, #32]	@ (800271c <rtc_check_alarm_flag+0x44>)
 80026fc:	4808      	ldr	r0, [pc, #32]	@ (8002720 <rtc_check_alarm_flag+0x48>)
 80026fe:	f006 faaa 	bl	8008c56 <HAL_UART_Transmit>
	        return 0xFF; // Error occurred while reading
 8002702:	23ff      	movs	r3, #255	@ 0xff
 8002704:	e005      	b.n	8002712 <rtc_check_alarm_flag+0x3a>
	    }

	    return (control2 & (1 << 4)) ? 1 : 0; // Return 1 if AF is set, otherwise 0
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	111b      	asrs	r3, r3, #4
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
	}
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	08010100 	.word	0x08010100
 8002720:	20000374 	.word	0x20000374

08002724 <read_and_transmit>:
    rtc_wirte(Control_2, control2);
    //read_and_transmit(Control_2);
    return HAL_OK;
}

void read_and_transmit(uint8_t reg_addr) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b090      	sub	sp, #64	@ 0x40
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
    char uart_buffer[50];
    uint8_t reg_value = rtc_read(reg_addr);
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fe0d 	bl	8002350 <rtc_read>
 8002736:	4603      	mov	r3, r0
 8002738:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Check if the read was successful
    if (reg_value == 0xFF) {
 800273c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002740:	2bff      	cmp	r3, #255	@ 0xff
 8002742:	d107      	bne.n	8002754 <read_and_transmit+0x30>
        // Error handling: Send an error message over UART
        sprintf(uart_buffer, "Error reading register 0x%02X\r\n", reg_addr);
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	490f      	ldr	r1, [pc, #60]	@ (8002788 <read_and_transmit+0x64>)
 800274c:	4618      	mov	r0, r3
 800274e:	f00b fa1d 	bl	800db8c <siprintf>
 8002752:	e007      	b.n	8002764 <read_and_transmit+0x40>
    } else {
        // Send the read value over UART
        sprintf(uart_buffer, "Register 0x%02X: 0x%02X\r\n", reg_addr, reg_value);
 8002754:	79fa      	ldrb	r2, [r7, #7]
 8002756:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800275a:	f107 000c 	add.w	r0, r7, #12
 800275e:	490b      	ldr	r1, [pc, #44]	@ (800278c <read_and_transmit+0x68>)
 8002760:	f00b fa14 	bl	800db8c <siprintf>
    }

    // Transmit the message via UART3
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fd31 	bl	80001d0 <strlen>
 800276e:	4603      	mov	r3, r0
 8002770:	b29a      	uxth	r2, r3
 8002772:	f107 010c 	add.w	r1, r7, #12
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <read_and_transmit+0x6c>)
 800277c:	f006 fa6b 	bl	8008c56 <HAL_UART_Transmit>
}
 8002780:	bf00      	nop
 8002782:	3740      	adds	r7, #64	@ 0x40
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	08010114 	.word	0x08010114
 800278c:	08010134 	.word	0x08010134
 8002790:	20000374 	.word	0x20000374

08002794 <senddata>:

char uart_buffer[50]; // Definition of uart_buffer
int id1 = 0;          // Definition of id1

void senddata(char* str,uint8_t size)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r",2, HAL_MAX_DELAY);
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	2202      	movs	r2, #2
 80027a6:	4909      	ldr	r1, [pc, #36]	@ (80027cc <senddata+0x38>)
 80027a8:	4809      	ldr	r0, [pc, #36]	@ (80027d0 <senddata+0x3c>)
 80027aa:	f006 fa54 	bl	8008c56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str,size, HAL_MAX_DELAY);
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <senddata+0x3c>)
 80027ba:	f006 fa4c 	bl	8008c56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80027be:	2064      	movs	r0, #100	@ 0x64
 80027c0:	f001 f83c 	bl	800383c <HAL_Delay>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08010150 	.word	0x08010150
 80027d0:	20000374 	.word	0x20000374

080027d4 <HAL_UART_RxCpltCallback>:
	}

}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3 || huart->Instance == USART2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2f      	ldr	r2, [pc, #188]	@ (80028a0 <HAL_UART_RxCpltCallback+0xcc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_UART_RxCpltCallback+0x1c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2e      	ldr	r2, [pc, #184]	@ (80028a4 <HAL_UART_RxCpltCallback+0xd0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d153      	bne.n	8002898 <HAL_UART_RxCpltCallback+0xc4>
  {
    if (rxindex < RX_buffersize - 1)
 80027f0:	4b2d      	ldr	r3, [pc, #180]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2bff      	cmp	r3, #255	@ 0xff
 80027f8:	d00c      	beq.n	8002814 <HAL_UART_RxCpltCallback+0x40>
    {
      rxindex++;
 80027fa:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3301      	adds	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 8002806:	701a      	strb	r2, [r3, #0]
    {
      rxbuffer[RX_buffersize - 1] = '\0';
      datarecived = 1;
      return;
    }
    if (rxindex >= strlen(EOP_string) && strncmp(&rxbuffer[rxindex - strlen(EOP_string)], EOP_string, strlen(EOP_string)) == 0)
 8002808:	4b27      	ldr	r3, [pc, #156]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d921      	bls.n	8002856 <HAL_UART_RxCpltCallback+0x82>
 8002812:	e007      	b.n	8002824 <HAL_UART_RxCpltCallback+0x50>
      rxbuffer[RX_buffersize - 1] = '\0';
 8002814:	4b25      	ldr	r3, [pc, #148]	@ (80028ac <HAL_UART_RxCpltCallback+0xd8>)
 8002816:	2200      	movs	r2, #0
 8002818:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
      datarecived = 1;
 800281c:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <HAL_UART_RxCpltCallback+0xdc>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
      return;
 8002822:	e039      	b.n	8002898 <HAL_UART_RxCpltCallback+0xc4>
    if (rxindex >= strlen(EOP_string) && strncmp(&rxbuffer[rxindex - strlen(EOP_string)], EOP_string, strlen(EOP_string)) == 0)
 8002824:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	3b03      	subs	r3, #3
 800282c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_UART_RxCpltCallback+0xd8>)
 800282e:	4413      	add	r3, r2
 8002830:	2203      	movs	r2, #3
 8002832:	4920      	ldr	r1, [pc, #128]	@ (80028b4 <HAL_UART_RxCpltCallback+0xe0>)
 8002834:	4618      	mov	r0, r3
 8002836:	f00b fa79 	bl	800dd2c <strncmp>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_UART_RxCpltCallback+0x82>
    {
      rxbuffer[RX_buffersize - 1] = '\0';
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <HAL_UART_RxCpltCallback+0xd8>)
 8002842:	2200      	movs	r2, #0
 8002844:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
      datarecived = 1;
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_UART_RxCpltCallback+0xdc>)
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
      rxindex = 0;
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
      return;
 8002854:	e020      	b.n	8002898 <HAL_UART_RxCpltCallback+0xc4>
    }

    // Restart interrupt for the specific UART instance
    if (huart->Instance == USART3)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <HAL_UART_RxCpltCallback+0xcc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10b      	bne.n	8002878 <HAL_UART_RxCpltCallback+0xa4>
    {
      HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_UART_RxCpltCallback+0xd8>)
 800286a:	4413      	add	r3, r2
 800286c:	2201      	movs	r2, #1
 800286e:	4619      	mov	r1, r3
 8002870:	4811      	ldr	r0, [pc, #68]	@ (80028b8 <HAL_UART_RxCpltCallback+0xe4>)
 8002872:	f006 fa82 	bl	8008d7a <HAL_UART_Receive_IT>
 8002876:	e00f      	b.n	8002898 <HAL_UART_RxCpltCallback+0xc4>
    }
    else if (huart->Instance == USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_UART_RxCpltCallback+0xd0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10a      	bne.n	8002898 <HAL_UART_RxCpltCallback+0xc4>
    {
      HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_UART_RxCpltCallback+0xd4>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_UART_RxCpltCallback+0xd8>)
 800288c:	4413      	add	r3, r2
 800288e:	2201      	movs	r2, #1
 8002890:	4619      	mov	r1, r3
 8002892:	480a      	ldr	r0, [pc, #40]	@ (80028bc <HAL_UART_RxCpltCallback+0xe8>)
 8002894:	f006 fa71 	bl	8008d7a <HAL_UART_Receive_IT>
    }
  }
}
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40004800 	.word	0x40004800
 80028a4:	40004400 	.word	0x40004400
 80028a8:	2000562c 	.word	0x2000562c
 80028ac:	2000552c 	.word	0x2000552c
 80028b0:	2000562d 	.word	0x2000562d
 80028b4:	08010154 	.word	0x08010154
 80028b8:	20000374 	.word	0x20000374
 80028bc:	20000330 	.word	0x20000330

080028c0 <parse_and_print>:
}*/




void parse_and_print(char *buffer) {
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b0df      	sub	sp, #380	@ 0x17c
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028ce:	6018      	str	r0, [r3, #0]
    char temp[RX_buffersize]; // Temporary buffer to hold a copy of input string
    strcpy(temp, buffer); // Copy to avoid modifying original string
 80028d0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028d8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	4610      	mov	r0, r2
 80028e0:	f00b fb15 	bl	800df0e <strcpy>


    char *token = strtok(temp, "|");
 80028e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80028e8:	49bf      	ldr	r1, [pc, #764]	@ (8002be8 <parse_and_print+0x328>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00b fa30 	bl	800dd50 <strtok>
 80028f0:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    //static uint8_t alarm_count = 0;
    //static uint8_t current_idx = 0;


    // Extract and print ID
    if (token) {
 80028f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d024      	beq.n	8002946 <parse_and_print+0x86>
    	int id;
    	sscanf(token,"%d",&id);
 80028fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002900:	461a      	mov	r2, r3
 8002902:	49ba      	ldr	r1, [pc, #744]	@ (8002bec <parse_and_print+0x32c>)
 8002904:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002908:	f00b f960 	bl	800dbcc <siscanf>
        sprintf(msg, "id: %d\r\n", id);
 800290c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002910:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800291a:	49b5      	ldr	r1, [pc, #724]	@ (8002bf0 <parse_and_print+0x330>)
 800291c:	4618      	mov	r0, r3
 800291e:	f00b f935 	bl	800db8c <siprintf>
        UART_Print(msg);
 8002922:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002926:	4618      	mov	r0, r3
 8002928:	f000 faa4 	bl	8002e74 <UART_Print>
        token = strtok(NULL, "|");
 800292c:	49ae      	ldr	r1, [pc, #696]	@ (8002be8 <parse_and_print+0x328>)
 800292e:	2000      	movs	r0, #0
 8002930:	f00b fa0e 	bl	800dd50 <strtok>
 8002934:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
        id1=id;
 8002938:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800293c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4aac      	ldr	r2, [pc, #688]	@ (8002bf4 <parse_and_print+0x334>)
 8002944:	6013      	str	r3, [r2, #0]
    }

    // Extract and print Name
    if (token) {
 8002946:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <parse_and_print+0xb4>
        sprintf(msg, "name: %s\r\n", token);
 800294e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002952:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002956:	49a8      	ldr	r1, [pc, #672]	@ (8002bf8 <parse_and_print+0x338>)
 8002958:	4618      	mov	r0, r3
 800295a:	f00b f917 	bl	800db8c <siprintf>
        UART_Print(msg);
 800295e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fa86 	bl	8002e74 <UART_Print>
        token = strtok(NULL, "|");
 8002968:	499f      	ldr	r1, [pc, #636]	@ (8002be8 <parse_and_print+0x328>)
 800296a:	2000      	movs	r0, #0
 800296c:	f00b f9f0 	bl	800dd50 <strtok>
 8002970:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }

    // Extract and print Location
    if (token) {
 8002974:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d012      	beq.n	80029a2 <parse_and_print+0xe2>
        sprintf(msg, "loc: %s\r\n", token);
 800297c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002980:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002984:	499d      	ldr	r1, [pc, #628]	@ (8002bfc <parse_and_print+0x33c>)
 8002986:	4618      	mov	r0, r3
 8002988:	f00b f900 	bl	800db8c <siprintf>
        UART_Print(msg);
 800298c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fa6f 	bl	8002e74 <UART_Print>
        token = strtok(NULL, "|");
 8002996:	4994      	ldr	r1, [pc, #592]	@ (8002be8 <parse_and_print+0x328>)
 8002998:	2000      	movs	r0, #0
 800299a:	f00b f9d9 	bl	800dd50 <strtok>
 800299e:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }
    if(id1==1)
 80029a2:	4b94      	ldr	r3, [pc, #592]	@ (8002bf4 <parse_and_print+0x334>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 80ef 	bne.w	8002b8a <parse_and_print+0x2ca>
    {
    // Extract and print Time (hh:mm:ss)
    if (token) {
 80029ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d060      	beq.n	8002a76 <parse_and_print+0x1b6>
        UART_Print("time-\r\n");
 80029b4:	4892      	ldr	r0, [pc, #584]	@ (8002c00 <parse_and_print+0x340>)
 80029b6:	f000 fa5d 	bl	8002e74 <UART_Print>
        int hh, mm, ss;
        if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 80029ba:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80029be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80029c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	498e      	ldr	r1, [pc, #568]	@ (8002c04 <parse_and_print+0x344>)
 80029cc:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 80029d0:	f00b f8fc 	bl	800dbcc <siscanf>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d147      	bne.n	8002a6a <parse_and_print+0x1aa>
            sprintf(msg, "hour: %d\r\n", hh);
 80029da:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029de:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029e8:	4987      	ldr	r1, [pc, #540]	@ (8002c08 <parse_and_print+0x348>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00b f8ce 	bl	800db8c <siprintf>
            UART_Print(msg);
 80029f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fa3d 	bl	8002e74 <UART_Print>
            sprintf(msg, "min: %d\r\n", mm);
 80029fa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a08:	4980      	ldr	r1, [pc, #512]	@ (8002c0c <parse_and_print+0x34c>)
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00b f8be 	bl	800db8c <siprintf>
            UART_Print(msg);
 8002a10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa2d 	bl	8002e74 <UART_Print>
            sprintf(msg, "sec: %d\r\n", ss);
 8002a1a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a1e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a28:	4979      	ldr	r1, [pc, #484]	@ (8002c10 <parse_and_print+0x350>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f00b f8ae 	bl	800db8c <siprintf>
            UART_Print(msg);
 8002a30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa1d 	bl	8002e74 <UART_Print>
            timedate.hour=hh;
 8002a3a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a3e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b73      	ldr	r3, [pc, #460]	@ (8002c14 <parse_and_print+0x354>)
 8002a48:	701a      	strb	r2, [r3, #0]
            timedate.minute=mm;
 8002a4a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a4e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <parse_and_print+0x354>)
 8002a58:	705a      	strb	r2, [r3, #1]
            timedate.second=ss;
 8002a5a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a5e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b6b      	ldr	r3, [pc, #428]	@ (8002c14 <parse_and_print+0x354>)
 8002a68:	709a      	strb	r2, [r3, #2]
        }
        token = strtok(NULL, "|");
 8002a6a:	495f      	ldr	r1, [pc, #380]	@ (8002be8 <parse_and_print+0x328>)
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f00b f96f 	bl	800dd50 <strtok>
 8002a72:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }

    // Extract and print Date (mm/dd/yyyy)
    if (token) {
 8002a76:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d064      	beq.n	8002b48 <parse_and_print+0x288>
        UART_Print("date-\r\n");
 8002a7e:	4866      	ldr	r0, [pc, #408]	@ (8002c18 <parse_and_print+0x358>)
 8002a80:	f000 f9f8 	bl	8002e74 <UART_Print>
        int month, day, year;
        if (sscanf(token, "%d/%d/%d", &month, &day, &year) == 3) {
 8002a84:	f107 0120 	add.w	r1, r7, #32
 8002a88:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	460b      	mov	r3, r1
 8002a94:	4961      	ldr	r1, [pc, #388]	@ (8002c1c <parse_and_print+0x35c>)
 8002a96:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002a9a:	f00b f897 	bl	800dbcc <siscanf>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d148      	bne.n	8002b36 <parse_and_print+0x276>
            sprintf(msg, "month: %d\r\n", month);
 8002aa4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002aa8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ab2:	495b      	ldr	r1, [pc, #364]	@ (8002c20 <parse_and_print+0x360>)
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00b f869 	bl	800db8c <siprintf>
            UART_Print(msg);
 8002aba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f9d8 	bl	8002e74 <UART_Print>
            sprintf(msg, "day: %d\r\n", day);
 8002ac4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ac8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ad2:	4954      	ldr	r1, [pc, #336]	@ (8002c24 <parse_and_print+0x364>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00b f859 	bl	800db8c <siprintf>
            UART_Print(msg);
 8002ada:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f9c8 	bl	8002e74 <UART_Print>
            sprintf(msg, "year: %d\r\n", year);
 8002ae4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ae8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002af2:	494d      	ldr	r1, [pc, #308]	@ (8002c28 <parse_and_print+0x368>)
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00b f849 	bl	800db8c <siprintf>
            UART_Print(msg);
 8002afa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f9b8 	bl	8002e74 <UART_Print>
            timedate.month=month;
 8002b04:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b40      	ldr	r3, [pc, #256]	@ (8002c14 <parse_and_print+0x354>)
 8002b12:	711a      	strb	r2, [r3, #4]
            timedate.day=day;
 8002b14:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b3c      	ldr	r3, [pc, #240]	@ (8002c14 <parse_and_print+0x354>)
 8002b22:	70da      	strb	r2, [r3, #3]
            timedate.year=year;
 8002b24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b28:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <parse_and_print+0x354>)
 8002b32:	715a      	strb	r2, [r3, #5]
 8002b34:	e002      	b.n	8002b3c <parse_and_print+0x27c>
        } else {
            UART_Print("Error: Invalid Date Format\r\n");
 8002b36:	483d      	ldr	r0, [pc, #244]	@ (8002c2c <parse_and_print+0x36c>)
 8002b38:	f000 f99c 	bl	8002e74 <UART_Print>
        }
        token = strtok(NULL, "|");
 8002b3c:	492a      	ldr	r1, [pc, #168]	@ (8002be8 <parse_and_print+0x328>)
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f00b f906 	bl	800dd50 <strtok>
 8002b44:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }
    ret=rtc_settime(&timedate);
 8002b48:	4832      	ldr	r0, [pc, #200]	@ (8002c14 <parse_and_print+0x354>)
 8002b4a:	f7ff fc31 	bl	80023b0 <rtc_settime>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <parse_and_print+0x370>)
 8002b54:	701a      	strb	r2, [r3, #0]
    	if(ret==HAL_OK)
 8002b56:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <parse_and_print+0x370>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <parse_and_print+0x2b4>
    	{
    		HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	2211      	movs	r2, #17
 8002b64:	4933      	ldr	r1, [pc, #204]	@ (8002c34 <parse_and_print+0x374>)
 8002b66:	4834      	ldr	r0, [pc, #208]	@ (8002c38 <parse_and_print+0x378>)
 8002b68:	f006 f875 	bl	8008c56 <HAL_UART_Transmit>
    		HAL_Delay(100);
 8002b6c:	2064      	movs	r0, #100	@ 0x64
 8002b6e:	f000 fe65 	bl	800383c <HAL_Delay>
 8002b72:	e162      	b.n	8002e3a <parse_and_print+0x57a>
    	}
    	else
    	{
    		HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
 8002b78:	2214      	movs	r2, #20
 8002b7a:	4930      	ldr	r1, [pc, #192]	@ (8002c3c <parse_and_print+0x37c>)
 8002b7c:	482e      	ldr	r0, [pc, #184]	@ (8002c38 <parse_and_print+0x378>)
 8002b7e:	f006 f86a 	bl	8008c56 <HAL_UART_Transmit>
    		HAL_Delay(100);
 8002b82:	2064      	movs	r0, #100	@ 0x64
 8002b84:	f000 fe5a 	bl	800383c <HAL_Delay>
 8002b88:	e157      	b.n	8002e3a <parse_and_print+0x57a>
    	          {
    	        	  HAL_UART_Transmit(&huart3, (uint8_t*)"alarm notset\n\r", 14, HAL_MAX_DELAY);
    	        	  HAL_Delay(100);
    	          }
    }*/
    else if (id1 == 2) {
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <parse_and_print+0x334>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	f040 8153 	bne.w	8002e3a <parse_and_print+0x57a>
            if (token) {
 8002b94:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 814e 	beq.w	8002e3a <parse_and_print+0x57a>

            	int num_alarms;
            	sscanf(token, "%d", &num_alarms);
 8002b9e:	f107 0318 	add.w	r3, r7, #24
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4911      	ldr	r1, [pc, #68]	@ (8002bec <parse_and_print+0x32c>)
 8002ba6:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002baa:	f00b f80f 	bl	800dbcc <siscanf>
            	token = strtok(NULL, "|");
 8002bae:	490e      	ldr	r1, [pc, #56]	@ (8002be8 <parse_and_print+0x328>)
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f00b f8cd 	bl	800dd50 <strtok>
 8002bb6:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c


            	if (num_alarms > MAX_ALARMS) {
 8002bba:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bbe:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b0e      	cmp	r3, #14
 8002bc6:	dd07      	ble.n	8002bd8 <parse_and_print+0x318>
            		HAL_UART_Transmit(&huart3, (uint8_t*)"Too many!\n\r", 11, HAL_MAX_DELAY);
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	220b      	movs	r2, #11
 8002bce:	491c      	ldr	r1, [pc, #112]	@ (8002c40 <parse_and_print+0x380>)
 8002bd0:	4819      	ldr	r0, [pc, #100]	@ (8002c38 <parse_and_print+0x378>)
 8002bd2:	f006 f840 	bl	8008c56 <HAL_UART_Transmit>
 8002bd6:	e130      	b.n	8002e3a <parse_and_print+0x57a>
            		return;
            	        }
            	alarm_count = 0;
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <parse_and_print+0x384>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
            	current_idx = 0;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <parse_and_print+0x388>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
            	while (token && alarm_count < num_alarms)
 8002be4:	e0d9      	b.n	8002d9a <parse_and_print+0x4da>
 8002be6:	bf00      	nop
 8002be8:	08010158 	.word	0x08010158
 8002bec:	0801015c 	.word	0x0801015c
 8002bf0:	08010160 	.word	0x08010160
 8002bf4:	2000566c 	.word	0x2000566c
 8002bf8:	0801016c 	.word	0x0801016c
 8002bfc:	08010178 	.word	0x08010178
 8002c00:	08010184 	.word	0x08010184
 8002c04:	0801018c 	.word	0x0801018c
 8002c08:	08010198 	.word	0x08010198
 8002c0c:	080101a4 	.word	0x080101a4
 8002c10:	080101b0 	.word	0x080101b0
 8002c14:	20005630 	.word	0x20005630
 8002c18:	080101bc 	.word	0x080101bc
 8002c1c:	080101c4 	.word	0x080101c4
 8002c20:	080101d0 	.word	0x080101d0
 8002c24:	080101dc 	.word	0x080101dc
 8002c28:	080101e8 	.word	0x080101e8
 8002c2c:	080101f4 	.word	0x080101f4
 8002c30:	200000b0 	.word	0x200000b0
 8002c34:	08010214 	.word	0x08010214
 8002c38:	20000374 	.word	0x20000374
 8002c3c:	08010228 	.word	0x08010228
 8002c40:	08010240 	.word	0x08010240
 8002c44:	2000552a 	.word	0x2000552a
 8002c48:	2000552b 	.word	0x2000552b
            	{


                UART_Print("time-\r\n");
 8002c4c:	487d      	ldr	r0, [pc, #500]	@ (8002e44 <parse_and_print+0x584>)
 8002c4e:	f000 f911 	bl	8002e74 <UART_Print>
                int hh, mm, ss;
                if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 8002c52:	f107 0110 	add.w	r1, r7, #16
 8002c56:	f107 0214 	add.w	r2, r7, #20
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	460b      	mov	r3, r1
 8002c62:	4979      	ldr	r1, [pc, #484]	@ (8002e48 <parse_and_print+0x588>)
 8002c64:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002c68:	f00a ffb0 	bl	800dbcc <siscanf>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	f040 808d 	bne.w	8002d8e <parse_and_print+0x4ce>
                    timedate.day = 0xFF;    // Disable day
                    timedate.weekday = 0xFF; // Disable weekday
                    timedate.month = 0xFF;  // Optional: Disable month
                    timedate.year = 0xFF;   // Optional: Disable year*/

                	sprintf(msg, "Alarm %d: %02d:%02d:%02d\r\n", alarm_count + 1, hh, mm, ss);
 8002c74:	4b75      	ldr	r3, [pc, #468]	@ (8002e4c <parse_and_print+0x58c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	1c59      	adds	r1, r3, #1
 8002c7a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c7e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002c82:	681c      	ldr	r4, [r3, #0]
 8002c84:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c88:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8002c92:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	496a      	ldr	r1, [pc, #424]	@ (8002e50 <parse_and_print+0x590>)
 8002ca6:	f00a ff71 	bl	800db8c <siprintf>
                	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002caa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fa8e 	bl	80001d0 <strlen>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	4864      	ldr	r0, [pc, #400]	@ (8002e54 <parse_and_print+0x594>)
 8002cc2:	f005 ffc8 	bl	8008c56 <HAL_UART_Transmit>
                	alarm_queue[alarm_count].hour = hh;
 8002cc6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cca:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e4c <parse_and_print+0x58c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	b2d0      	uxtb	r0, r2
 8002cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e58 <parse_and_print+0x598>)
 8002cda:	460b      	mov	r3, r1
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a5b      	subs	r3, r3, r1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].minute = mm;
 8002ce6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b56      	ldr	r3, [pc, #344]	@ (8002e4c <parse_and_print+0x58c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	b2d0      	uxtb	r0, r2
 8002cf8:	4a57      	ldr	r2, [pc, #348]	@ (8002e58 <parse_and_print+0x598>)
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	1a5b      	subs	r3, r3, r1
 8002d00:	4413      	add	r3, r2
 8002d02:	3301      	adds	r3, #1
 8002d04:	4602      	mov	r2, r0
 8002d06:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].second = ss;
 8002d08:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d0c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b4e      	ldr	r3, [pc, #312]	@ (8002e4c <parse_and_print+0x58c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	b2d0      	uxtb	r0, r2
 8002d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e58 <parse_and_print+0x598>)
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a5b      	subs	r3, r3, r1
 8002d22:	4413      	add	r3, r2
 8002d24:	3302      	adds	r3, #2
 8002d26:	4602      	mov	r2, r0
 8002d28:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].day = 0xFF;
 8002d2a:	4b48      	ldr	r3, [pc, #288]	@ (8002e4c <parse_and_print+0x58c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4a49      	ldr	r2, [pc, #292]	@ (8002e58 <parse_and_print+0x598>)
 8002d32:	460b      	mov	r3, r1
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a5b      	subs	r3, r3, r1
 8002d38:	4413      	add	r3, r2
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	22ff      	movs	r2, #255	@ 0xff
 8002d3e:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].weekday = 0xFF;
 8002d40:	4b42      	ldr	r3, [pc, #264]	@ (8002e4c <parse_and_print+0x58c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4a44      	ldr	r2, [pc, #272]	@ (8002e58 <parse_and_print+0x598>)
 8002d48:	460b      	mov	r3, r1
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a5b      	subs	r3, r3, r1
 8002d4e:	4413      	add	r3, r2
 8002d50:	3306      	adds	r3, #6
 8002d52:	22ff      	movs	r2, #255	@ 0xff
 8002d54:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].month = 0xFF;
 8002d56:	4b3d      	ldr	r3, [pc, #244]	@ (8002e4c <parse_and_print+0x58c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e58 <parse_and_print+0x598>)
 8002d5e:	460b      	mov	r3, r1
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a5b      	subs	r3, r3, r1
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	22ff      	movs	r2, #255	@ 0xff
 8002d6a:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].year = 0xFF;
 8002d6c:	4b37      	ldr	r3, [pc, #220]	@ (8002e4c <parse_and_print+0x58c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	4a39      	ldr	r2, [pc, #228]	@ (8002e58 <parse_and_print+0x598>)
 8002d74:	460b      	mov	r3, r1
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a5b      	subs	r3, r3, r1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3305      	adds	r3, #5
 8002d7e:	22ff      	movs	r2, #255	@ 0xff
 8002d80:	701a      	strb	r2, [r3, #0]
                	alarm_count++;
 8002d82:	4b32      	ldr	r3, [pc, #200]	@ (8002e4c <parse_and_print+0x58c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b30      	ldr	r3, [pc, #192]	@ (8002e4c <parse_and_print+0x58c>)
 8002d8c:	701a      	strb	r2, [r3, #0]

                }
                token = strtok(NULL, "|");
 8002d8e:	4933      	ldr	r1, [pc, #204]	@ (8002e5c <parse_and_print+0x59c>)
 8002d90:	2000      	movs	r0, #0
 8002d92:	f00a ffdd 	bl	800dd50 <strtok>
 8002d96:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
            	while (token && alarm_count < num_alarms)
 8002d9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <parse_and_print+0x4f8>
 8002da2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <parse_and_print+0x58c>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002dac:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	f6ff af4a 	blt.w	8002c4c <parse_and_print+0x38c>
            }

            	eeprom_store_config(buffer);
 8002db8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002dbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f7ff f885 	bl	8001ed0 <eeprom_store_config>
            	HAL_UART_Transmit(&huart3, (uint8_t*)"Alarms set\n\r", 12, HAL_MAX_DELAY);
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	220c      	movs	r2, #12
 8002dcc:	4924      	ldr	r1, [pc, #144]	@ (8002e60 <parse_and_print+0x5a0>)
 8002dce:	4821      	ldr	r0, [pc, #132]	@ (8002e54 <parse_and_print+0x594>)
 8002dd0:	f005 ff41 	bl	8008c56 <HAL_UART_Transmit>

            	if (alarm_count > 0) {
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <parse_and_print+0x58c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02e      	beq.n	8002e3a <parse_and_print+0x57a>
            	            ret = rtc_setalarm(&alarm_queue[0]);
 8002ddc:	481e      	ldr	r0, [pc, #120]	@ (8002e58 <parse_and_print+0x598>)
 8002dde:	f7ff fbbf 	bl	8002560 <rtc_setalarm>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <parse_and_print+0x5a4>)
 8002de8:	701a      	strb	r2, [r3, #0]
            	            if (ret == HAL_OK) {
 8002dea:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <parse_and_print+0x5a4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d123      	bne.n	8002e3a <parse_and_print+0x57a>
            	                HAL_UART_Transmit(&huart3, (uint8_t*)"First alarm set\n\r", 17, HAL_MAX_DELAY);
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	2211      	movs	r2, #17
 8002df8:	491b      	ldr	r1, [pc, #108]	@ (8002e68 <parse_and_print+0x5a8>)
 8002dfa:	4816      	ldr	r0, [pc, #88]	@ (8002e54 <parse_and_print+0x594>)
 8002dfc:	f005 ff2b 	bl	8008c56 <HAL_UART_Transmit>
            	                if (alarm_count > 1) {
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <parse_and_print+0x58c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d918      	bls.n	8002e3a <parse_and_print+0x57a>
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <parse_and_print+0x598>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002e0c:	461a      	mov	r2, r3
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <parse_and_print+0x598>)
 8002e10:	785b      	ldrb	r3, [r3, #1]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002e12:	4619      	mov	r1, r3
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <parse_and_print+0x598>)
 8002e16:	789b      	ldrb	r3, [r3, #2]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4913      	ldr	r1, [pc, #76]	@ (8002e6c <parse_and_print+0x5ac>)
 8002e1e:	4814      	ldr	r0, [pc, #80]	@ (8002e70 <parse_and_print+0x5b0>)
 8002e20:	f00a feb4 	bl	800db8c <siprintf>
            	                    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002e24:	4812      	ldr	r0, [pc, #72]	@ (8002e70 <parse_and_print+0x5b0>)
 8002e26:	f7fd f9d3 	bl	80001d0 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	490f      	ldr	r1, [pc, #60]	@ (8002e70 <parse_and_print+0x5b0>)
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <parse_and_print+0x594>)
 8002e36:	f005 ff0e 	bl	8008c56 <HAL_UART_Transmit>
                }
    }



}
 8002e3a:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08010184 	.word	0x08010184
 8002e48:	0801018c 	.word	0x0801018c
 8002e4c:	2000552a 	.word	0x2000552a
 8002e50:	0801024c 	.word	0x0801024c
 8002e54:	20000374 	.word	0x20000374
 8002e58:	200054c8 	.word	0x200054c8
 8002e5c:	08010158 	.word	0x08010158
 8002e60:	08010268 	.word	0x08010268
 8002e64:	200000b0 	.word	0x200000b0
 8002e68:	08010278 	.word	0x08010278
 8002e6c:	0801028c 	.word	0x0801028c
 8002e70:	20005638 	.word	0x20005638

08002e74 <UART_Print>:


void UART_Print(const char *str) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd f9a7 	bl	80001d0 <strlen>
 8002e82:	4603      	mov	r3, r0
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <UART_Print+0x28>)
 8002e8e:	f005 fee2 	bl	8008c56 <HAL_UART_Transmit>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000374 	.word	0x20000374

08002ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_MspInit+0x4c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	4a0f      	ldr	r2, [pc, #60]	@ (8002eec <HAL_MspInit+0x4c>)
 8002eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <HAL_MspInit+0x4c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_MspInit+0x4c>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_MspInit+0x4c>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_MspInit+0x4c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800

08002ef0 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]

    if(hi2c->Instance==I2C1) // Add I2C1 configuration
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a32      	ldr	r2, [pc, #200]	@ (8002fd8 <HAL_I2C_MspInit+0xe8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d12c      	bne.n	8002f6c <HAL_I2C_MspInit+0x7c>
    {
      /* USER CODE BEGIN I2C1_MspInit 0 */
      /* USER CODE END I2C1_MspInit 0 */

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a30      	ldr	r2, [pc, #192]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b2e      	ldr	r3, [pc, #184]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
      /**I2C1 GPIO Configuration
      PB6     ------> I2C1_SCL
      PB7     ------> I2C1_SDA
      */
      GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002f2e:	23c0      	movs	r3, #192	@ 0xc0
 8002f30:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8002f32:	2312      	movs	r3, #18
 8002f34:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;     // External pull-ups required
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // AF4 for I2C1
 8002f3e:	2304      	movs	r3, #4
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	4825      	ldr	r0, [pc, #148]	@ (8002fe0 <HAL_I2C_MspInit+0xf0>)
 8002f4a:	f001 f9af 	bl	80042ac <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_I2C1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	4a21      	ldr	r2, [pc, #132]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f6a:	e031      	b.n	8002fd0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_I2C_MspInit+0xf4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d12c      	bne.n	8002fd0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f98:	2312      	movs	r3, #18
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	480c      	ldr	r0, [pc, #48]	@ (8002fe0 <HAL_I2C_MspInit+0xf0>)
 8002fb0:	f001 f97c 	bl	80042ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	4a07      	ldr	r2, [pc, #28]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002fbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_I2C_MspInit+0xec>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3730      	adds	r7, #48	@ 0x30
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40005400 	.word	0x40005400
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40005800 	.word	0x40005800

08002fe8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	@ 0x38
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a91      	ldr	r2, [pc, #580]	@ (800324c <HAL_I2S_MspInit+0x264>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f040 808c 	bne.w	8003124 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	4b8f      	ldr	r3, [pc, #572]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	4a8e      	ldr	r2, [pc, #568]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800301a:	6413      	str	r3, [r2, #64]	@ 0x40
 800301c:	4b8c      	ldr	r3, [pc, #560]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	4b88      	ldr	r3, [pc, #544]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	4a87      	ldr	r2, [pc, #540]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6313      	str	r3, [r2, #48]	@ 0x30
 8003038:	4b85      	ldr	r3, [pc, #532]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	4b81      	ldr	r3, [pc, #516]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	4a80      	ldr	r2, [pc, #512]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	6313      	str	r3, [r2, #48]	@ 0x30
 8003054:	4b7e      	ldr	r3, [pc, #504]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003060:	2308      	movs	r3, #8
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003070:	2305      	movs	r3, #5
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	4876      	ldr	r0, [pc, #472]	@ (8003254 <HAL_I2S_MspInit+0x26c>)
 800307c:	f001 f916 	bl	80042ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003080:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003092:	2305      	movs	r3, #5
 8003094:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800309a:	4619      	mov	r1, r3
 800309c:	486e      	ldr	r0, [pc, #440]	@ (8003258 <HAL_I2S_MspInit+0x270>)
 800309e:	f001 f905 	bl	80042ac <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80030a2:	4b6e      	ldr	r3, [pc, #440]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003260 <HAL_I2S_MspInit+0x278>)
 80030a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80030a8:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ae:	4b6b      	ldr	r3, [pc, #428]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b4:	4b69      	ldr	r3, [pc, #420]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ba:	4b68      	ldr	r3, [pc, #416]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030c0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030c2:	4b66      	ldr	r3, [pc, #408]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ca:	4b64      	ldr	r3, [pc, #400]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80030d0:	4b62      	ldr	r3, [pc, #392]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030d6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030d8:	4b60      	ldr	r3, [pc, #384]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030de:	4b5f      	ldr	r3, [pc, #380]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030e0:	2204      	movs	r2, #4
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80030e4:	4b5d      	ldr	r3, [pc, #372]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030e6:	2203      	movs	r2, #3
 80030e8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80030ea:	4b5c      	ldr	r3, [pc, #368]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80030f0:	4b5a      	ldr	r3, [pc, #360]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80030f6:	4859      	ldr	r0, [pc, #356]	@ (800325c <HAL_I2S_MspInit+0x274>)
 80030f8:	f000 fcd6 	bl	8003aa8 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 8003102:	f7fe fe37 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a54      	ldr	r2, [pc, #336]	@ (800325c <HAL_I2S_MspInit+0x274>)
 800310a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800310c:	4a53      	ldr	r2, [pc, #332]	@ (800325c <HAL_I2S_MspInit+0x274>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2024      	movs	r0, #36	@ 0x24
 8003118:	f000 fc8f 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800311c:	2024      	movs	r0, #36	@ 0x24
 800311e:	f000 fca8 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003122:	e08f      	b.n	8003244 <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4e      	ldr	r2, [pc, #312]	@ (8003264 <HAL_I2S_MspInit+0x27c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	f040 808a 	bne.w	8003244 <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	4b46      	ldr	r3, [pc, #280]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	4a45      	ldr	r2, [pc, #276]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800313a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800313e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003140:	4b43      	ldr	r3, [pc, #268]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	4a3e      	ldr	r2, [pc, #248]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6313      	str	r3, [r2, #48]	@ 0x30
 800315c:	4b3c      	ldr	r3, [pc, #240]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	4b38      	ldr	r3, [pc, #224]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	4a37      	ldr	r2, [pc, #220]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 8003172:	f043 0302 	orr.w	r3, r3, #2
 8003176:	6313      	str	r3, [r2, #48]	@ 0x30
 8003178:	4b35      	ldr	r3, [pc, #212]	@ (8003250 <HAL_I2S_MspInit+0x268>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003184:	2310      	movs	r3, #16
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	2300      	movs	r3, #0
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003194:	2306      	movs	r3, #6
 8003196:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	4619      	mov	r1, r3
 800319e:	4832      	ldr	r0, [pc, #200]	@ (8003268 <HAL_I2S_MspInit+0x280>)
 80031a0:	f001 f884 	bl	80042ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80031a4:	2328      	movs	r3, #40	@ 0x28
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031b4:	2306      	movs	r3, #6
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031bc:	4619      	mov	r1, r3
 80031be:	4826      	ldr	r0, [pc, #152]	@ (8003258 <HAL_I2S_MspInit+0x270>)
 80031c0:	f001 f874 	bl	80042ac <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80031c4:	4b29      	ldr	r3, [pc, #164]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003270 <HAL_I2S_MspInit+0x288>)
 80031c8:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80031ca:	4b28      	ldr	r3, [pc, #160]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d0:	4b26      	ldr	r3, [pc, #152]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d6:	4b25      	ldr	r3, [pc, #148]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031dc:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e2:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031e4:	4b21      	ldr	r3, [pc, #132]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031ea:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ec:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80031f2:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031f8:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031fa:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <HAL_I2S_MspInit+0x284>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003200:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_I2S_MspInit+0x284>)
 8003202:	2204      	movs	r2, #4
 8003204:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003206:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_I2S_MspInit+0x284>)
 8003208:	2203      	movs	r2, #3
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800320c:	4b17      	ldr	r3, [pc, #92]	@ (800326c <HAL_I2S_MspInit+0x284>)
 800320e:	2200      	movs	r2, #0
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <HAL_I2S_MspInit+0x284>)
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003218:	4814      	ldr	r0, [pc, #80]	@ (800326c <HAL_I2S_MspInit+0x284>)
 800321a:	f000 fc45 	bl	8003aa8 <HAL_DMA_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2S_MspInit+0x240>
      Error_Handler();
 8003224:	f7fe fda6 	bl	8001d74 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a10      	ldr	r2, [pc, #64]	@ (800326c <HAL_I2S_MspInit+0x284>)
 800322c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800322e:	4a0f      	ldr	r2, [pc, #60]	@ (800326c <HAL_I2S_MspInit+0x284>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2100      	movs	r1, #0
 8003238:	2033      	movs	r0, #51	@ 0x33
 800323a:	f000 fbfe 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800323e:	2033      	movs	r0, #51	@ 0x33
 8003240:	f000 fc17 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 8003244:	bf00      	nop
 8003246:	3738      	adds	r7, #56	@ 0x38
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40003800 	.word	0x40003800
 8003250:	40023800 	.word	0x40023800
 8003254:	40020800 	.word	0x40020800
 8003258:	40020400 	.word	0x40020400
 800325c:	200001ec 	.word	0x200001ec
 8003260:	40026058 	.word	0x40026058
 8003264:	40003c00 	.word	0x40003c00
 8003268:	40020000 	.word	0x40020000
 800326c:	2000024c 	.word	0x2000024c
 8003270:	40026010 	.word	0x40026010

08003274 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	@ 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <HAL_SD_MspInit+0xc0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d14a      	bne.n	800332c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	4a26      	ldr	r2, [pc, #152]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032a6:	4b24      	ldr	r3, [pc, #144]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <HAL_SD_MspInit+0xc4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80032ea:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80032ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032fc:	230c      	movs	r3, #12
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	480d      	ldr	r0, [pc, #52]	@ (800333c <HAL_SD_MspInit+0xc8>)
 8003308:	f000 ffd0 	bl	80042ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800330c:	2304      	movs	r3, #4
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800331c:	230c      	movs	r3, #12
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	@ (8003340 <HAL_SD_MspInit+0xcc>)
 8003328:	f000 ffc0 	bl	80042ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800332c:	bf00      	nop
 800332e:	3728      	adds	r7, #40	@ 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40023800 	.word	0x40023800
 800333c:	40020800 	.word	0x40020800
 8003340:	40020c00 	.word	0x40020c00

08003344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	@ 0x30
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 031c 	add.w	r3, r7, #28
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3a      	ldr	r2, [pc, #232]	@ (800344c <HAL_UART_MspInit+0x108>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d134      	bne.n	80033d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	4a38      	ldr	r2, [pc, #224]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 8003370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003374:	6413      	str	r3, [r2, #64]	@ 0x40
 8003376:	4b36      	ldr	r3, [pc, #216]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	4b32      	ldr	r3, [pc, #200]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a31      	ldr	r2, [pc, #196]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	4b2f      	ldr	r3, [pc, #188]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800339e:	230c      	movs	r3, #12
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ae:	2307      	movs	r3, #7
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	4619      	mov	r1, r3
 80033b8:	4826      	ldr	r0, [pc, #152]	@ (8003454 <HAL_UART_MspInit+0x110>)
 80033ba:	f000 ff77 	bl	80042ac <HAL_GPIO_Init>



    /* USART2 interrupt Init */
        HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2026      	movs	r0, #38	@ 0x26
 80033c4:	f000 fb39 	bl	8003a3a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033c8:	2026      	movs	r0, #38	@ 0x26
 80033ca:	f000 fb52 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033ce:	e039      	b.n	8003444 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a20      	ldr	r2, [pc, #128]	@ (8003458 <HAL_UART_MspInit+0x114>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d134      	bne.n	8003444 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b1c      	ldr	r3, [pc, #112]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ea:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_UART_MspInit+0x10c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003412:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003424:	2307      	movs	r3, #7
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	480b      	ldr	r0, [pc, #44]	@ (800345c <HAL_UART_MspInit+0x118>)
 8003430:	f000 ff3c 	bl	80042ac <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2100      	movs	r1, #0
 8003438:	2027      	movs	r0, #39	@ 0x27
 800343a:	f000 fafe 	bl	8003a3a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 800343e:	2027      	movs	r0, #39	@ 0x27
 8003440:	f000 fb17 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 8003444:	bf00      	nop
 8003446:	3730      	adds	r7, #48	@ 0x30
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40004400 	.word	0x40004400
 8003450:	40023800 	.word	0x40023800
 8003454:	40020000 	.word	0x40020000
 8003458:	40004800 	.word	0x40004800
 800345c:	40020c00 	.word	0x40020c00

08003460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <NMI_Handler+0x4>

08003468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <HardFault_Handler+0x4>

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <MemManage_Handler+0x4>

08003478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <BusFault_Handler+0x4>

08003480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <UsageFault_Handler+0x4>

08003488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b6:	f000 f9a1 	bl	80037fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}

080034be <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void EXTI0_IRQHandler(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034c2:	2001      	movs	r0, #1
 80034c4:	f001 f8c0 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}

080034cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80034d0:	2004      	movs	r0, #4
 80034d2:	f001 f8b9 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <DMA1_Stream0_IRQHandler+0x10>)
 80034e2:	f000 fc79 	bl	8003dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000024c 	.word	0x2000024c

080034f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80034f4:	4802      	ldr	r0, [pc, #8]	@ (8003500 <DMA1_Stream3_IRQHandler+0x10>)
 80034f6:	f000 fc6f 	bl	8003dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200001ec 	.word	0x200001ec

08003504 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <SPI2_IRQHandler+0x10>)
 800350a:	f003 f9ed 	bl	80068e8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000015c 	.word	0x2000015c

08003518 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <SPI3_IRQHandler+0x10>)
 800351e:	f003 f9e3 	bl	80068e8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200001a4 	.word	0x200001a4

0800352c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003530:	4802      	ldr	r0, [pc, #8]	@ (800353c <USART2_IRQHandler+0x10>)
 8003532:	f005 fc53 	bl	8008ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000330 	.word	0x20000330

08003540 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003544:	4802      	ldr	r0, [pc, #8]	@ (8003550 <USART3_IRQHandler+0x10>)
 8003546:	f005 fc49 	bl	8008ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000374 	.word	0x20000374

08003554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return 1;
 8003558:	2301      	movs	r3, #1
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_kill>:

int _kill(int pid, int sig)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800356e:	f00a fca1 	bl	800deb4 <__errno>
 8003572:	4603      	mov	r3, r0
 8003574:	2216      	movs	r2, #22
 8003576:	601a      	str	r2, [r3, #0]
  return -1;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_exit>:

void _exit (int status)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ffe7 	bl	8003564 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003596:	bf00      	nop
 8003598:	e7fd      	b.n	8003596 <_exit+0x12>

0800359a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e00a      	b.n	80035c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ac:	f3af 8000 	nop.w
 80035b0:	4601      	mov	r1, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	60ba      	str	r2, [r7, #8]
 80035b8:	b2ca      	uxtb	r2, r1
 80035ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	dbf0      	blt.n	80035ac <_read+0x12>
  }

  return len;
 80035ca:	687b      	ldr	r3, [r7, #4]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e009      	b.n	80035fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	60ba      	str	r2, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3301      	adds	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	dbf1      	blt.n	80035e6 <_write+0x12>
  }
  return len;
 8003602:	687b      	ldr	r3, [r7, #4]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_close>:

int _close(int file)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003634:	605a      	str	r2, [r3, #4]
  return 0;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <_isatty>:

int _isatty(int file)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800364c:	2301      	movs	r3, #1
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800367c:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <_sbrk+0x5c>)
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <_sbrk+0x60>)
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003688:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <_sbrk+0x64>)
 8003692:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <_sbrk+0x68>)
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d207      	bcs.n	80036b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a4:	f00a fc06 	bl	800deb4 <__errno>
 80036a8:	4603      	mov	r3, r0
 80036aa:	220c      	movs	r2, #12
 80036ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	e009      	b.n	80036c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b4:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	4a05      	ldr	r2, [pc, #20]	@ (80036d8 <_sbrk+0x64>)
 80036c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20020000 	.word	0x20020000
 80036d4:	00000400 	.word	0x00000400
 80036d8:	20005670 	.word	0x20005670
 80036dc:	20005800 	.word	0x20005800

080036e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <SystemInit+0x20>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <SystemInit+0x20>)
 80036ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800373c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003708:	480d      	ldr	r0, [pc, #52]	@ (8003740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370a:	490e      	ldr	r1, [pc, #56]	@ (8003744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800370c:	4a0e      	ldr	r2, [pc, #56]	@ (8003748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0b      	ldr	r2, [pc, #44]	@ (800374c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003720:	4c0b      	ldr	r4, [pc, #44]	@ (8003750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800372e:	f7ff ffd7 	bl	80036e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003732:	f00a fbc5 	bl	800dec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003736:	f7fc ff31 	bl	800059c <main>
  bx  lr    
 800373a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800373c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003748:	080105b4 	.word	0x080105b4
  ldr r2, =_sbss
 800374c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003750:	20005800 	.word	0x20005800

08003754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC_IRQHandler>
	...

08003758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800375c:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <HAL_Init+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0d      	ldr	r2, [pc, #52]	@ (8003798 <HAL_Init+0x40>)
 8003762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <HAL_Init+0x40>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_Init+0x40>)
 800376e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003774:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <HAL_Init+0x40>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a07      	ldr	r2, [pc, #28]	@ (8003798 <HAL_Init+0x40>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003780:	2003      	movs	r0, #3
 8003782:	f000 f94f 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003786:	200f      	movs	r0, #15
 8003788:	f000 f808 	bl	800379c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800378c:	f7ff fb88 	bl	8002ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023c00 	.word	0x40023c00

0800379c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_InitTick+0x54>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <HAL_InitTick+0x58>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f967 	bl	8003a8e <HAL_SYSTICK_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00e      	b.n	80037e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d80a      	bhi.n	80037e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d0:	2200      	movs	r2, #0
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f000 f92f 	bl	8003a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037dc:	4a06      	ldr	r2, [pc, #24]	@ (80037f8 <HAL_InitTick+0x5c>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000020 	.word	0x20000020
 80037f4:	20000028 	.word	0x20000028
 80037f8:	20000024 	.word	0x20000024

080037fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_IncTick+0x20>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_IncTick+0x24>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4413      	add	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <HAL_IncTick+0x24>)
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000028 	.word	0x20000028
 8003820:	20005674 	.word	0x20005674

08003824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return uwTick;
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_GetTick+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20005674 	.word	0x20005674

0800383c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff ffee 	bl	8003824 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d005      	beq.n	8003862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003856:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <HAL_Delay+0x44>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003862:	bf00      	nop
 8003864:	f7ff ffde 	bl	8003824 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d8f7      	bhi.n	8003864 <HAL_Delay+0x28>
  {
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000028 	.word	0x20000028

08003884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	@ (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	@ (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	@ (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	@ (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f0:	d301      	bcc.n	80039f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <SysTick_Config+0x40>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fe:	210f      	movs	r1, #15
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f7ff ff8e 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <SysTick_Config+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <SysTick_Config+0x40>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff29 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4c:	f7ff ff3e 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff8e 	bl	8003978 <NVIC_EncodePriority>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5d 	bl	8003924 <__NVIC_SetPriority>
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff31 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa2 	bl	80039e0 <SysTick_Config>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff feb6 	bl	8003824 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e099      	b.n	8003bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae4:	e00f      	b.n	8003b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ae6:	f7ff fe9d 	bl	8003824 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d908      	bls.n	8003b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e078      	b.n	8003bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e8      	bne.n	8003ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4b38      	ldr	r3, [pc, #224]	@ (8003c00 <HAL_DMA_Init+0x158>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d107      	bne.n	8003b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0307 	bic.w	r3, r3, #7
 8003b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d117      	bne.n	8003bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb01 	bl	80041b4 <DMA_CheckFifoParam>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2240      	movs	r2, #64	@ 0x40
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e016      	b.n	8003bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fab8 	bl	8004148 <DMA_CalcBaseAndBitshift>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	223f      	movs	r2, #63	@ 0x3f
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	f010803f 	.word	0xf010803f

08003c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Start_IT+0x26>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e040      	b.n	8003cac <HAL_DMA_Start_IT+0xa8>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12f      	bne.n	8003c9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fa4a 	bl	80040ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	223f      	movs	r2, #63	@ 0x3f
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0216 	orr.w	r2, r2, #22
 8003c72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e005      	b.n	8003caa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cc2:	f7ff fdaf 	bl	8003824 <HAL_GetTick>
 8003cc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d008      	beq.n	8003ce6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2280      	movs	r2, #128	@ 0x80
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e052      	b.n	8003d8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0216 	bic.w	r2, r2, #22
 8003cf4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_DMA_Abort+0x62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d36:	e013      	b.n	8003d60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d38:	f7ff fd74 	bl	8003824 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d90c      	bls.n	8003d60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e015      	b.n	8003d8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e4      	bne.n	8003d38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	223f      	movs	r2, #63	@ 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d004      	beq.n	8003db2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2280      	movs	r2, #128	@ 0x80
 8003dac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00c      	b.n	8003dcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2205      	movs	r2, #5
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003de4:	4b8e      	ldr	r3, [pc, #568]	@ (8004020 <HAL_DMA_IRQHandler+0x248>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a8e      	ldr	r2, [pc, #568]	@ (8004024 <HAL_DMA_IRQHandler+0x24c>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0a9b      	lsrs	r3, r3, #10
 8003df0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e02:	2208      	movs	r2, #8
 8003e04:	409a      	lsls	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01a      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0204 	bic.w	r2, r2, #4
 8003e2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e30:	2208      	movs	r2, #8
 8003e32:	409a      	lsls	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d012      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	2201      	movs	r2, #1
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e72:	f043 0202 	orr.w	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7e:	2204      	movs	r2, #4
 8003e80:	409a      	lsls	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d043      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03c      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d018      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d024      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
 8003f06:	e01f      	b.n	8003f48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
 8003f18:	e016      	b.n	8003f48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0208 	bic.w	r2, r2, #8
 8003f36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 808f 	beq.w	8004078 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8087 	beq.w	8004078 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	2220      	movs	r2, #32
 8003f70:	409a      	lsls	r2, r3
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d136      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0216 	bic.w	r2, r2, #22
 8003f90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x1da>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0208 	bic.w	r2, r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc6:	223f      	movs	r2, #63	@ 0x3f
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d07e      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
        }
        return;
 8003fee:	e079      	b.n	80040e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	2b00      	cmp	r3, #0
 8004012:	d031      	beq.n	8004078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
 800401c:	e02c      	b.n	8004078 <HAL_DMA_IRQHandler+0x2a0>
 800401e:	bf00      	nop
 8004020:	20000020 	.word	0x20000020
 8004024:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d023      	beq.n	8004078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
 8004038:	e01e      	b.n	8004078 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10f      	bne.n	8004068 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0210 	bic.w	r2, r2, #16
 8004056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	2b00      	cmp	r3, #0
 800407e:	d032      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2205      	movs	r2, #5
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d307      	bcc.n	80040c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f2      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x2cc>
 80040be:	e000      	b.n	80040c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
 80040e2:	e000      	b.n	80040e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040e4:	bf00      	nop
    }
  }
}
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d108      	bne.n	800412c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800412a:	e007      	b.n	800413c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	3b10      	subs	r3, #16
 8004158:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <DMA_CalcBaseAndBitshift+0x64>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004162:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d909      	bls.n	800418a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	1d1a      	adds	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	659a      	str	r2, [r3, #88]	@ 0x58
 8004188:	e007      	b.n	800419a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	aaaaaaab 	.word	0xaaaaaaab
 80041b0:	0801030c 	.word	0x0801030c

080041b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11f      	bne.n	800420e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d856      	bhi.n	8004282 <DMA_CheckFifoParam+0xce>
 80041d4:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <DMA_CheckFifoParam+0x28>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041ff 	.word	0x080041ff
 80041e4:	080041ed 	.word	0x080041ed
 80041e8:	08004283 	.word	0x08004283
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d046      	beq.n	8004286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fc:	e043      	b.n	8004286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004206:	d140      	bne.n	800428a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420c:	e03d      	b.n	800428a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004216:	d121      	bne.n	800425c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d837      	bhi.n	800428e <DMA_CheckFifoParam+0xda>
 800421e:	a201      	add	r2, pc, #4	@ (adr r2, 8004224 <DMA_CheckFifoParam+0x70>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004235 	.word	0x08004235
 8004228:	0800423b 	.word	0x0800423b
 800422c:	08004235 	.word	0x08004235
 8004230:	0800424d 	.word	0x0800424d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      break;
 8004238:	e030      	b.n	800429c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d025      	beq.n	8004292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424a:	e022      	b.n	8004292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004254:	d11f      	bne.n	8004296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800425a:	e01c      	b.n	8004296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d903      	bls.n	800426a <DMA_CheckFifoParam+0xb6>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d003      	beq.n	8004270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004268:	e018      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
      break;
 800426e:	e015      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      break;
 8004280:	e00b      	b.n	800429a <DMA_CheckFifoParam+0xe6>
      break;
 8004282:	bf00      	nop
 8004284:	e00a      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      break;
 8004286:	bf00      	nop
 8004288:	e008      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      break;
 800428a:	bf00      	nop
 800428c:	e006      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      break;
 800428e:	bf00      	nop
 8004290:	e004      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      break;   
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
    }
  } 
  
  return status; 
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop

080042ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	@ 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e16b      	b.n	80045a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042c8:	2201      	movs	r2, #1
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f040 815a 	bne.w	800459a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d005      	beq.n	80042fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d130      	bne.n	8004360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 0201 	and.w	r2, r3, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b03      	cmp	r3, #3
 800436a:	d017      	beq.n	800439c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d123      	bne.n	80043f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	08da      	lsrs	r2, r3, #3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3208      	adds	r2, #8
 80043b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220f      	movs	r2, #15
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	08da      	lsrs	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3208      	adds	r2, #8
 80043ea:	69b9      	ldr	r1, [r7, #24]
 80043ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	2203      	movs	r2, #3
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0203 	and.w	r2, r3, #3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80b4 	beq.w	800459a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b60      	ldr	r3, [pc, #384]	@ (80045b8 <HAL_GPIO_Init+0x30c>)
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	4a5f      	ldr	r2, [pc, #380]	@ (80045b8 <HAL_GPIO_Init+0x30c>)
 800443c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004440:	6453      	str	r3, [r2, #68]	@ 0x44
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <HAL_GPIO_Init+0x30c>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800444e:	4a5b      	ldr	r2, [pc, #364]	@ (80045bc <HAL_GPIO_Init+0x310>)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	3302      	adds	r3, #2
 8004456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	220f      	movs	r2, #15
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a52      	ldr	r2, [pc, #328]	@ (80045c0 <HAL_GPIO_Init+0x314>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02b      	beq.n	80044d2 <HAL_GPIO_Init+0x226>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a51      	ldr	r2, [pc, #324]	@ (80045c4 <HAL_GPIO_Init+0x318>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d025      	beq.n	80044ce <HAL_GPIO_Init+0x222>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a50      	ldr	r2, [pc, #320]	@ (80045c8 <HAL_GPIO_Init+0x31c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01f      	beq.n	80044ca <HAL_GPIO_Init+0x21e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4f      	ldr	r2, [pc, #316]	@ (80045cc <HAL_GPIO_Init+0x320>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d019      	beq.n	80044c6 <HAL_GPIO_Init+0x21a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4e      	ldr	r2, [pc, #312]	@ (80045d0 <HAL_GPIO_Init+0x324>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_GPIO_Init+0x216>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a4d      	ldr	r2, [pc, #308]	@ (80045d4 <HAL_GPIO_Init+0x328>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00d      	beq.n	80044be <HAL_GPIO_Init+0x212>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4c      	ldr	r2, [pc, #304]	@ (80045d8 <HAL_GPIO_Init+0x32c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0x20e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	@ (80045dc <HAL_GPIO_Init+0x330>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_GPIO_Init+0x20a>
 80044b2:	2307      	movs	r3, #7
 80044b4:	e00e      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044b6:	2308      	movs	r3, #8
 80044b8:	e00c      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044ba:	2306      	movs	r3, #6
 80044bc:	e00a      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044be:	2305      	movs	r3, #5
 80044c0:	e008      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044c2:	2304      	movs	r3, #4
 80044c4:	e006      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044c6:	2303      	movs	r3, #3
 80044c8:	e004      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e002      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044d2:	2300      	movs	r3, #0
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f002 0203 	and.w	r2, r2, #3
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	4093      	lsls	r3, r2
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e4:	4935      	ldr	r1, [pc, #212]	@ (80045bc <HAL_GPIO_Init+0x310>)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	3302      	adds	r3, #2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044f2:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004516:	4a32      	ldr	r2, [pc, #200]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800451c:	4b30      	ldr	r3, [pc, #192]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004540:	4a27      	ldr	r2, [pc, #156]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004546:	4b26      	ldr	r3, [pc, #152]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800456a:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004570:	4b1b      	ldr	r3, [pc, #108]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004594:	4a12      	ldr	r2, [pc, #72]	@ (80045e0 <HAL_GPIO_Init+0x334>)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	f67f ae90 	bls.w	80042c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	@ 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40021400 	.word	0x40021400
 80045d8:	40021800 	.word	0x40021800
 80045dc:	40021c00 	.word	0x40021c00
 80045e0:	40013c00 	.word	0x40013c00

080045e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	887b      	ldrh	r3, [r7, #2]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	e001      	b.n	8004606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004624:	787b      	ldrb	r3, [r7, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004630:	e003      	b.n	800463a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	041a      	lsls	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004652:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fd66 	bl	8001138 <HAL_GPIO_EXTI_Callback>
  }
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40013c00 	.word	0x40013c00

08004678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e12b      	b.n	80048e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fe fc26 	bl	8002ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	@ 0x24
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046dc:	f003 f97e 	bl	80079dc <HAL_RCC_GetPCLK1Freq>
 80046e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4a81      	ldr	r2, [pc, #516]	@ (80048ec <HAL_I2C_Init+0x274>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d807      	bhi.n	80046fc <HAL_I2C_Init+0x84>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a80      	ldr	r2, [pc, #512]	@ (80048f0 <HAL_I2C_Init+0x278>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bf94      	ite	ls
 80046f4:	2301      	movls	r3, #1
 80046f6:	2300      	movhi	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e006      	b.n	800470a <HAL_I2C_Init+0x92>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a7d      	ldr	r2, [pc, #500]	@ (80048f4 <HAL_I2C_Init+0x27c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0e7      	b.n	80048e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a78      	ldr	r2, [pc, #480]	@ (80048f8 <HAL_I2C_Init+0x280>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0c9b      	lsrs	r3, r3, #18
 800471c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a6a      	ldr	r2, [pc, #424]	@ (80048ec <HAL_I2C_Init+0x274>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d802      	bhi.n	800474c <HAL_I2C_Init+0xd4>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3301      	adds	r3, #1
 800474a:	e009      	b.n	8004760 <HAL_I2C_Init+0xe8>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	4a69      	ldr	r2, [pc, #420]	@ (80048fc <HAL_I2C_Init+0x284>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	3301      	adds	r3, #1
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	430b      	orrs	r3, r1
 8004766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004772:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	495c      	ldr	r1, [pc, #368]	@ (80048ec <HAL_I2C_Init+0x274>)
 800477c:	428b      	cmp	r3, r1
 800477e:	d819      	bhi.n	80047b4 <HAL_I2C_Init+0x13c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1e59      	subs	r1, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fbb1 f3f3 	udiv	r3, r1, r3
 800478e:	1c59      	adds	r1, r3, #1
 8004790:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004794:	400b      	ands	r3, r1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_I2C_Init+0x138>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1e59      	subs	r1, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ae:	e051      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 80047b0:	2304      	movs	r3, #4
 80047b2:	e04f      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d111      	bne.n	80047e0 <HAL_I2C_Init+0x168>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	440b      	add	r3, r1
 80047ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e012      	b.n	8004806 <HAL_I2C_Init+0x18e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	0099      	lsls	r1, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Init+0x196>
 800480a:	2301      	movs	r3, #1
 800480c:	e022      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10e      	bne.n	8004834 <HAL_I2C_Init+0x1bc>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1e58      	subs	r0, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	440b      	add	r3, r1
 8004824:	fbb0 f3f3 	udiv	r3, r0, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004832:	e00f      	b.n	8004854 <HAL_I2C_Init+0x1dc>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e58      	subs	r0, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	0099      	lsls	r1, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	6809      	ldr	r1, [r1, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004882:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6911      	ldr	r1, [r2, #16]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	4311      	orrs	r1, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	430b      	orrs	r3, r1
 8004896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	000186a0 	.word	0x000186a0
 80048f0:	001e847f 	.word	0x001e847f
 80048f4:	003d08ff 	.word	0x003d08ff
 80048f8:	431bde83 	.word	0x431bde83
 80048fc:	10624dd3 	.word	0x10624dd3

08004900 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	461a      	mov	r2, r3
 800490c:	460b      	mov	r3, r1
 800490e:	817b      	strh	r3, [r7, #10]
 8004910:	4613      	mov	r3, r2
 8004912:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004914:	f7fe ff86 	bl	8003824 <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b20      	cmp	r3, #32
 8004924:	f040 80e0 	bne.w	8004ae8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2319      	movs	r3, #25
 800492e:	2201      	movs	r2, #1
 8004930:	4970      	ldr	r1, [pc, #448]	@ (8004af4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f001 fa24 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
 8004940:	e0d3      	b.n	8004aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_I2C_Master_Transmit+0x50>
 800494c:	2302      	movs	r3, #2
 800494e:	e0cc      	b.n	8004aea <HAL_I2C_Master_Transmit+0x1ea>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d007      	beq.n	8004976 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004984:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2221      	movs	r2, #33	@ 0x21
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2210      	movs	r2, #16
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	893a      	ldrh	r2, [r7, #8]
 80049a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a50      	ldr	r2, [pc, #320]	@ (8004af8 <HAL_I2C_Master_Transmit+0x1f8>)
 80049b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049b8:	8979      	ldrh	r1, [r7, #10]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 ff10 	bl	80057e4 <I2C_MasterRequestWrite>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e08d      	b.n	8004aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049e4:	e066      	b.n	8004ab4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	6a39      	ldr	r1, [r7, #32]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f001 fa9e 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d107      	bne.n	8004a0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e06b      	b.n	8004aea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11b      	bne.n	8004a88 <HAL_I2C_Master_Transmit+0x188>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d017      	beq.n	8004a88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	6a39      	ldr	r1, [r7, #32]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f001 fa8e 	bl	8005fae <I2C_WaitOnBTFFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d107      	bne.n	8004ab0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e01a      	b.n	8004aea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d194      	bne.n	80049e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e000      	b.n	8004aea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	00100002 	.word	0x00100002
 8004af8:	ffff0000 	.word	0xffff0000

08004afc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08c      	sub	sp, #48	@ 0x30
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b10:	f7fe fe88 	bl	8003824 <HAL_GetTick>
 8004b14:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	f040 820b 	bne.w	8004f3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2319      	movs	r3, #25
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	497c      	ldr	r1, [pc, #496]	@ (8004d20 <HAL_I2C_Master_Receive+0x224>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f001 f926 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e1fe      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_I2C_Master_Receive+0x50>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e1f7      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d007      	beq.n	8004b72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2222      	movs	r2, #34	@ 0x22
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	893a      	ldrh	r2, [r7, #8]
 8004ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a5c      	ldr	r2, [pc, #368]	@ (8004d24 <HAL_I2C_Master_Receive+0x228>)
 8004bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bb4:	8979      	ldrh	r1, [r7, #10]
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fe94 	bl	80058e8 <I2C_MasterRequestRead>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e1b8      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d113      	bne.n	8004bfa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e18c      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d11b      	bne.n	8004c3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e16c      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d11b      	bne.n	8004c7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	e14c      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ca0:	e138      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	f200 80f1 	bhi.w	8004e8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d123      	bne.n	8004cfc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f001 f9b9 	bl	8006030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e139      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cfa:	e10b      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d14e      	bne.n	8004da2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4906      	ldr	r1, [pc, #24]	@ (8004d28 <HAL_I2C_Master_Receive+0x22c>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f001 f836 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d008      	beq.n	8004d2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e10e      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
 8004d1e:	bf00      	nop
 8004d20:	00100002 	.word	0x00100002
 8004d24:	ffff0000 	.word	0xffff0000
 8004d28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004da0:	e0b8      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	2200      	movs	r2, #0
 8004daa:	4966      	ldr	r1, [pc, #408]	@ (8004f44 <HAL_I2C_Master_Receive+0x448>)
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 ffe7 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0bf      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	2200      	movs	r2, #0
 8004e06:	494f      	ldr	r1, [pc, #316]	@ (8004f44 <HAL_I2C_Master_Receive+0x448>)
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 ffb9 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e091      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e8c:	e042      	b.n	8004f14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f001 f8cc 	bl	8006030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e04c      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d118      	bne.n	8004f14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f aec2 	bne.w	8004ca2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	@ 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	00010004 	.word	0x00010004

08004f48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	813b      	strh	r3, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f62:	f7fe fc5f 	bl	8003824 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	f040 80d9 	bne.w	8005128 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2319      	movs	r3, #25
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	496d      	ldr	r1, [pc, #436]	@ (8005134 <HAL_I2C_Mem_Write+0x1ec>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fefd 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0cc      	b.n	800512a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_I2C_Mem_Write+0x56>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0c5      	b.n	800512a <HAL_I2C_Mem_Write+0x1e2>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d007      	beq.n	8004fc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2221      	movs	r2, #33	@ 0x21
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2240      	movs	r2, #64	@ 0x40
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4a4d      	ldr	r2, [pc, #308]	@ (8005138 <HAL_I2C_Mem_Write+0x1f0>)
 8005004:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005006:	88f8      	ldrh	r0, [r7, #6]
 8005008:	893a      	ldrh	r2, [r7, #8]
 800500a:	8979      	ldrh	r1, [r7, #10]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4603      	mov	r3, r0
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fd34 	bl	8005a84 <I2C_RequestMemoryWrite>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d052      	beq.n	80050c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e081      	b.n	800512a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 ff7e 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	2b04      	cmp	r3, #4
 800503c:	d107      	bne.n	800504e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800504c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e06b      	b.n	800512a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d11b      	bne.n	80050c8 <HAL_I2C_Mem_Write+0x180>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1aa      	bne.n	8005026 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 ff6a 	bl	8005fae <I2C_WaitOnBTFFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00d      	beq.n	80050fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d107      	bne.n	80050f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e016      	b.n	800512a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	00100002 	.word	0x00100002
 8005138:	ffff0000 	.word	0xffff0000

0800513c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08c      	sub	sp, #48	@ 0x30
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	4608      	mov	r0, r1
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	4603      	mov	r3, r0
 800514c:	817b      	strh	r3, [r7, #10]
 800514e:	460b      	mov	r3, r1
 8005150:	813b      	strh	r3, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005156:	f7fe fb65 	bl	8003824 <HAL_GetTick>
 800515a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b20      	cmp	r3, #32
 8005166:	f040 8208 	bne.w	800557a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2319      	movs	r3, #25
 8005170:	2201      	movs	r2, #1
 8005172:	497b      	ldr	r1, [pc, #492]	@ (8005360 <HAL_I2C_Mem_Read+0x224>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fe03 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
 8005182:	e1fb      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Mem_Read+0x56>
 800518e:	2302      	movs	r3, #2
 8005190:	e1f4      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d007      	beq.n	80051b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2222      	movs	r2, #34	@ 0x22
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2240      	movs	r2, #64	@ 0x40
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005364 <HAL_I2C_Mem_Read+0x228>)
 80051f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051fa:	88f8      	ldrh	r0, [r7, #6]
 80051fc:	893a      	ldrh	r2, [r7, #8]
 80051fe:	8979      	ldrh	r1, [r7, #10]
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	4603      	mov	r3, r0
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fcd0 	bl	8005bb0 <I2C_RequestMemoryRead>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1b0      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d113      	bne.n	800524a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	623b      	str	r3, [r7, #32]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	623b      	str	r3, [r7, #32]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e184      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	2b01      	cmp	r3, #1
 8005250:	d11b      	bne.n	800528a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e164      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528e:	2b02      	cmp	r3, #2
 8005290:	d11b      	bne.n	80052ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	e144      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052e0:	e138      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	f200 80f1 	bhi.w	80054ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d123      	bne.n	800533c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fe99 	bl	8006030 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e139      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800533a:	e10b      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005340:	2b02      	cmp	r3, #2
 8005342:	d14e      	bne.n	80053e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534a:	2200      	movs	r2, #0
 800534c:	4906      	ldr	r1, [pc, #24]	@ (8005368 <HAL_I2C_Mem_Read+0x22c>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fd16 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e10e      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
 800535e:	bf00      	nop
 8005360:	00100002 	.word	0x00100002
 8005364:	ffff0000 	.word	0xffff0000
 8005368:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053e0:	e0b8      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	2200      	movs	r2, #0
 80053ea:	4966      	ldr	r1, [pc, #408]	@ (8005584 <HAL_I2C_Mem_Read+0x448>)
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fcc7 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0bf      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	2200      	movs	r2, #0
 8005446:	494f      	ldr	r1, [pc, #316]	@ (8005584 <HAL_I2C_Mem_Read+0x448>)
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fc99 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e091      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054cc:	e042      	b.n	8005554 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fdac 	bl	8006030 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e04c      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b04      	cmp	r3, #4
 8005520:	d118      	bne.n	8005554 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	f47f aec2 	bne.w	80052e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e000      	b.n	800557c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
  }
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	@ 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	00010004 	.word	0x00010004

08005588 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	460b      	mov	r3, r1
 8005596:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005598:	f7fe f944 	bl	8003824 <HAL_GetTick>
 800559c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	f040 8111 	bne.w	80057d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2319      	movs	r3, #25
 80055b6:	2201      	movs	r2, #1
 80055b8:	4988      	ldr	r1, [pc, #544]	@ (80057dc <HAL_I2C_IsDeviceReady+0x254>)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fbe0 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e104      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_I2C_IsDeviceReady+0x50>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e0fd      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d007      	beq.n	80055fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800560c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2224      	movs	r2, #36	@ 0x24
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a70      	ldr	r2, [pc, #448]	@ (80057e0 <HAL_I2C_IsDeviceReady+0x258>)
 8005620:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005630:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fb9e 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005658:	d103      	bne.n	8005662 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e0b6      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005674:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005676:	f7fe f8d5 	bl	8003824 <HAL_GetTick>
 800567a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056aa:	e025      	b.n	80056f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ac:	f7fe f8ba 	bl	8003824 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <HAL_I2C_IsDeviceReady+0x13a>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	22a0      	movs	r2, #160	@ 0xa0
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2ba0      	cmp	r3, #160	@ 0xa0
 8005702:	d005      	beq.n	8005710 <HAL_I2C_IsDeviceReady+0x188>
 8005704:	7dfb      	ldrb	r3, [r7, #23]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <HAL_I2C_IsDeviceReady+0x188>
 800570a:	7dbb      	ldrb	r3, [r7, #22]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0cd      	beq.n	80056ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d129      	bne.n	800577a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005734:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2319      	movs	r3, #25
 8005752:	2201      	movs	r2, #1
 8005754:	4921      	ldr	r1, [pc, #132]	@ (80057dc <HAL_I2C_IsDeviceReady+0x254>)
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fb12 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e036      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e02c      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005788:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005792:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2319      	movs	r3, #25
 800579a:	2201      	movs	r2, #1
 800579c:	490f      	ldr	r1, [pc, #60]	@ (80057dc <HAL_I2C_IsDeviceReady+0x254>)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 faee 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e012      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3301      	adds	r3, #1
 80057b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	f4ff af32 	bcc.w	8005622 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	00100002 	.word	0x00100002
 80057e0:	ffff0000 	.word	0xffff0000

080057e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	460b      	mov	r3, r1
 80057f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d006      	beq.n	800580e <I2C_MasterRequestWrite+0x2a>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d003      	beq.n	800580e <I2C_MasterRequestWrite+0x2a>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800580c:	d108      	bne.n	8005820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e00b      	b.n	8005838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	2b12      	cmp	r3, #18
 8005826:	d107      	bne.n	8005838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fa9b 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585e:	d103      	bne.n	8005868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e035      	b.n	80058d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005874:	d108      	bne.n	8005888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005876:	897b      	ldrh	r3, [r7, #10]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005884:	611a      	str	r2, [r3, #16]
 8005886:	e01b      	b.n	80058c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005888:	897b      	ldrh	r3, [r7, #10]
 800588a:	11db      	asrs	r3, r3, #7
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0306 	and.w	r3, r3, #6
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f063 030f 	orn	r3, r3, #15
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	490e      	ldr	r1, [pc, #56]	@ (80058e0 <I2C_MasterRequestWrite+0xfc>)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fac1 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e010      	b.n	80058d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058b6:	897b      	ldrh	r3, [r7, #10]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4907      	ldr	r1, [pc, #28]	@ (80058e4 <I2C_MasterRequestWrite+0x100>)
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fab1 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	00010008 	.word	0x00010008
 80058e4:	00010002 	.word	0x00010002

080058e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	460b      	mov	r3, r1
 80058f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800590c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d006      	beq.n	8005922 <I2C_MasterRequestRead+0x3a>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d003      	beq.n	8005922 <I2C_MasterRequestRead+0x3a>
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005920:	d108      	bne.n	8005934 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e00b      	b.n	800594c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	2b11      	cmp	r3, #17
 800593a:	d107      	bne.n	800594c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800594a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fa11 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00d      	beq.n	8005980 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005972:	d103      	bne.n	800597c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800597a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e079      	b.n	8005a74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005988:	d108      	bne.n	800599c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	611a      	str	r2, [r3, #16]
 800599a:	e05f      	b.n	8005a5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800599c:	897b      	ldrh	r3, [r7, #10]
 800599e:	11db      	asrs	r3, r3, #7
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0306 	and.w	r3, r3, #6
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f063 030f 	orn	r3, r3, #15
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4930      	ldr	r1, [pc, #192]	@ (8005a7c <I2C_MasterRequestRead+0x194>)
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fa37 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e054      	b.n	8005a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059ca:	897b      	ldrh	r3, [r7, #10]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4929      	ldr	r1, [pc, #164]	@ (8005a80 <I2C_MasterRequestRead+0x198>)
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fa27 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e044      	b.n	8005a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f9af 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a36:	d103      	bne.n	8005a40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e017      	b.n	8005a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a44:	897b      	ldrh	r3, [r7, #10]
 8005a46:	11db      	asrs	r3, r3, #7
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f003 0306 	and.w	r3, r3, #6
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f063 030e 	orn	r3, r3, #14
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4907      	ldr	r1, [pc, #28]	@ (8005a80 <I2C_MasterRequestRead+0x198>)
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f9e3 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	00010008 	.word	0x00010008
 8005a80:	00010002 	.word	0x00010002

08005a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	817b      	strh	r3, [r7, #10]
 8005a96:	460b      	mov	r3, r1
 8005a98:	813b      	strh	r3, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f960 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad4:	d103      	bne.n	8005ade <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e05f      	b.n	8005ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	492d      	ldr	r1, [pc, #180]	@ (8005bac <I2C_RequestMemoryWrite+0x128>)
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f998 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e04c      	b.n	8005ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b20:	6a39      	ldr	r1, [r7, #32]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fa02 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00d      	beq.n	8005b4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d107      	bne.n	8005b46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e02b      	b.n	8005ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d105      	bne.n	8005b5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b50:	893b      	ldrh	r3, [r7, #8]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]
 8005b5a:	e021      	b.n	8005ba0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b5c:	893b      	ldrh	r3, [r7, #8]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6c:	6a39      	ldr	r1, [r7, #32]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f9dc 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d107      	bne.n	8005b92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e005      	b.n	8005ba2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b96:	893b      	ldrh	r3, [r7, #8]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	00010002 	.word	0x00010002

08005bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f8c2 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00d      	beq.n	8005c1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c10:	d103      	bne.n	8005c1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e0aa      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c1e:	897b      	ldrh	r3, [r7, #10]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	6a3a      	ldr	r2, [r7, #32]
 8005c32:	4952      	ldr	r1, [pc, #328]	@ (8005d7c <I2C_RequestMemoryRead+0x1cc>)
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f8fa 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e097      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5c:	6a39      	ldr	r1, [r7, #32]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f964 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d107      	bne.n	8005c82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e076      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d105      	bne.n	8005c98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c8c:	893b      	ldrh	r3, [r7, #8]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	611a      	str	r2, [r3, #16]
 8005c96:	e021      	b.n	8005cdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c98:	893b      	ldrh	r3, [r7, #8]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca8:	6a39      	ldr	r1, [r7, #32]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f93e 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d107      	bne.n	8005cce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e050      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cd2:	893b      	ldrh	r3, [r7, #8]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cde:	6a39      	ldr	r1, [r7, #32]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f923 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00d      	beq.n	8005d08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d107      	bne.n	8005d04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e035      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f82b 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d3e:	d103      	bne.n	8005d48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e013      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d4c:	897b      	ldrh	r3, [r7, #10]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	6a3a      	ldr	r2, [r7, #32]
 8005d60:	4906      	ldr	r1, [pc, #24]	@ (8005d7c <I2C_RequestMemoryRead+0x1cc>)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f863 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	00010002 	.word	0x00010002

08005d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d90:	e025      	b.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d021      	beq.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fd fd43 	bl	8003824 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d116      	bne.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e023      	b.n	8005e26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10d      	bne.n	8005e04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	43da      	mvns	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	e00c      	b.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf0c      	ite	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	2300      	movne	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d0b6      	beq.n	8005d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e3c:	e051      	b.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4c:	d123      	bne.n	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e046      	b.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d021      	beq.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fd fcc1 	bl	8003824 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d116      	bne.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e020      	b.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d10c      	bne.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	e00b      	b.n	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d18d      	bne.n	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f38:	e02d      	b.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f8ce 	bl	80060dc <I2C_IsAcknowledgeFailed>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e02d      	b.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d021      	beq.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fd fc67 	bl	8003824 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d116      	bne.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	f043 0220 	orr.w	r2, r3, #32
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e007      	b.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa0:	2b80      	cmp	r3, #128	@ 0x80
 8005fa2:	d1ca      	bne.n	8005f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fba:	e02d      	b.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f88d 	bl	80060dc <I2C_IsAcknowledgeFailed>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e02d      	b.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d021      	beq.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd4:	f7fd fc26 	bl	8003824 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d116      	bne.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	f043 0220 	orr.w	r2, r3, #32
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e007      	b.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b04      	cmp	r3, #4
 8006024:	d1ca      	bne.n	8005fbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800603c:	e042      	b.n	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b10      	cmp	r3, #16
 800604a:	d119      	bne.n	8006080 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0210 	mvn.w	r2, #16
 8006054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e029      	b.n	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006080:	f7fd fbd0 	bl	8003824 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	f043 0220 	orr.w	r2, r3, #32
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e007      	b.n	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d1b5      	bne.n	800603e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f2:	d11b      	bne.n	800612c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e128      	b.n	80063a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a90      	ldr	r2, [pc, #576]	@ (80063a8 <HAL_I2S_Init+0x26c>)
 8006166:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fc ff3d 	bl	8002fe8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006184:	f023 030f 	bic.w	r3, r3, #15
 8006188:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2202      	movs	r2, #2
 8006190:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d060      	beq.n	800625c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80061a2:	2310      	movs	r3, #16
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e001      	b.n	80061ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80061a8:	2320      	movs	r3, #32
 80061aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d802      	bhi.n	80061ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80061ba:	2001      	movs	r0, #1
 80061bc:	f001 fd18 	bl	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq>
 80061c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ca:	d125      	bne.n	8006218 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d010      	beq.n	80061f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	fbb2 f2f3 	udiv	r2, r2, r3
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	3305      	adds	r3, #5
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	e01f      	b.n	8006236 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	461a      	mov	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006212:	3305      	adds	r3, #5
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	e00e      	b.n	8006236 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	3305      	adds	r3, #5
 8006234:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4a5c      	ldr	r2, [pc, #368]	@ (80063ac <HAL_I2S_Init+0x270>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e003      	b.n	8006264 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800625c:	2302      	movs	r3, #2
 800625e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d902      	bls.n	8006270 <HAL_I2S_Init+0x134>
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2bff      	cmp	r3, #255	@ 0xff
 800626e:	d907      	bls.n	8006280 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006274:	f043 0210 	orr.w	r2, r3, #16
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e08f      	b.n	80063a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	ea42 0103 	orr.w	r1, r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	430a      	orrs	r2, r1
 8006292:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800629e:	f023 030f 	bic.w	r3, r3, #15
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6851      	ldr	r1, [r2, #4]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	4311      	orrs	r1, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68d2      	ldr	r2, [r2, #12]
 80062b0:	4311      	orrs	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6992      	ldr	r2, [r2, #24]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d161      	bne.n	8006390 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a38      	ldr	r2, [pc, #224]	@ (80063b0 <HAL_I2S_Init+0x274>)
 80062d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a37      	ldr	r2, [pc, #220]	@ (80063b4 <HAL_I2S_Init+0x278>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d101      	bne.n	80062e0 <HAL_I2S_Init+0x1a4>
 80062dc:	4b36      	ldr	r3, [pc, #216]	@ (80063b8 <HAL_I2S_Init+0x27c>)
 80062de:	e001      	b.n	80062e4 <HAL_I2S_Init+0x1a8>
 80062e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	4932      	ldr	r1, [pc, #200]	@ (80063b4 <HAL_I2S_Init+0x278>)
 80062ec:	428a      	cmp	r2, r1
 80062ee:	d101      	bne.n	80062f4 <HAL_I2S_Init+0x1b8>
 80062f0:	4a31      	ldr	r2, [pc, #196]	@ (80063b8 <HAL_I2S_Init+0x27c>)
 80062f2:	e001      	b.n	80062f8 <HAL_I2S_Init+0x1bc>
 80062f4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80062f8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80062fc:	f023 030f 	bic.w	r3, r3, #15
 8006300:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2b      	ldr	r2, [pc, #172]	@ (80063b4 <HAL_I2S_Init+0x278>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d101      	bne.n	8006310 <HAL_I2S_Init+0x1d4>
 800630c:	4b2a      	ldr	r3, [pc, #168]	@ (80063b8 <HAL_I2S_Init+0x27c>)
 800630e:	e001      	b.n	8006314 <HAL_I2S_Init+0x1d8>
 8006310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006314:	2202      	movs	r2, #2
 8006316:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a25      	ldr	r2, [pc, #148]	@ (80063b4 <HAL_I2S_Init+0x278>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <HAL_I2S_Init+0x1ea>
 8006322:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <HAL_I2S_Init+0x27c>)
 8006324:	e001      	b.n	800632a <HAL_I2S_Init+0x1ee>
 8006326:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006336:	d003      	beq.n	8006340 <HAL_I2S_Init+0x204>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e001      	b.n	800634c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006356:	4313      	orrs	r3, r2
 8006358:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006360:	4313      	orrs	r3, r2
 8006362:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800636a:	4313      	orrs	r3, r2
 800636c:	b29a      	uxth	r2, r3
 800636e:	897b      	ldrh	r3, [r7, #10]
 8006370:	4313      	orrs	r3, r2
 8006372:	b29b      	uxth	r3, r3
 8006374:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006378:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a0d      	ldr	r2, [pc, #52]	@ (80063b4 <HAL_I2S_Init+0x278>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d101      	bne.n	8006388 <HAL_I2S_Init+0x24c>
 8006384:	4b0c      	ldr	r3, [pc, #48]	@ (80063b8 <HAL_I2S_Init+0x27c>)
 8006386:	e001      	b.n	800638c <HAL_I2S_Init+0x250>
 8006388:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800638c:	897a      	ldrh	r2, [r7, #10]
 800638e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	08006ac1 	.word	0x08006ac1
 80063ac:	cccccccd 	.word	0xcccccccd
 80063b0:	08006c49 	.word	0x08006c49
 80063b4:	40003800 	.word	0x40003800
 80063b8:	40003400 	.word	0x40003400

080063bc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <HAL_I2S_Receive_DMA+0x1a>
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e0a1      	b.n	800651e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_I2S_Receive_DMA+0x2e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e099      	b.n	800651e <HAL_I2S_Receive_DMA+0x162>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d005      	beq.n	800640a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
 8006408:	e089      	b.n	800651e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2204      	movs	r2, #4
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d002      	beq.n	8006436 <HAL_I2S_Receive_DMA+0x7a>
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b05      	cmp	r3, #5
 8006434:	d10a      	bne.n	800644c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	865a      	strh	r2, [r3, #50]	@ 0x32
 800644a:	e005      	b.n	8006458 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	88fa      	ldrh	r2, [r7, #6]
 8006450:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645c:	4a32      	ldr	r2, [pc, #200]	@ (8006528 <HAL_I2S_Receive_DMA+0x16c>)
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006464:	4a31      	ldr	r2, [pc, #196]	@ (800652c <HAL_I2S_Receive_DMA+0x170>)
 8006466:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646c:	4a30      	ldr	r2, [pc, #192]	@ (8006530 <HAL_I2S_Receive_DMA+0x174>)
 800646e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800647e:	d10a      	bne.n	8006496 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	4619      	mov	r1, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80064ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80064ae:	f7fd fba9 	bl	8003c04 <HAL_DMA_Start_IT>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064bc:	f043 0208 	orr.w	r2, r3, #8
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e022      	b.n	800651e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064f4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d107      	bne.n	8006514 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	0800699f 	.word	0x0800699f
 800652c:	0800695d 	.word	0x0800695d
 8006530:	080069bb 	.word	0x080069bb

08006534 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006548:	d004      	beq.n	8006554 <HAL_I2S_DMAStop+0x20>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 80d1 	bne.w	80066f6 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00f      	beq.n	800657c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	4618      	mov	r0, r3
 8006562:	f7fd fba7 	bl	8003cb4 <HAL_DMA_Abort>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006570:	f043 0208 	orr.w	r2, r3, #8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800657c:	2364      	movs	r3, #100	@ 0x64
 800657e:	2201      	movs	r2, #1
 8006580:	2102      	movs	r1, #2
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fb26 	bl	8006bd4 <I2S_WaitFlagStateUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80065a6:	2364      	movs	r3, #100	@ 0x64
 80065a8:	2200      	movs	r2, #0
 80065aa:	2180      	movs	r1, #128	@ 0x80
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fb11 	bl	8006bd4 <I2S_WaitFlagStateUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065bc:	f043 0201 	orr.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065de:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0202 	bic.w	r2, r2, #2
 80065fc:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b05      	cmp	r3, #5
 8006608:	f040 8165 	bne.w	80068d6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00f      	beq.n	8006634 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006618:	4618      	mov	r0, r3
 800661a:	f7fd fb4b 	bl	8003cb4 <HAL_DMA_Abort>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	f043 0208 	orr.w	r2, r3, #8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a8a      	ldr	r2, [pc, #552]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_I2S_DMAStop+0x10e>
 800663e:	4b8a      	ldr	r3, [pc, #552]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006640:	e001      	b.n	8006646 <HAL_I2S_DMAStop+0x112>
 8006642:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4985      	ldr	r1, [pc, #532]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 800664e:	428b      	cmp	r3, r1
 8006650:	d101      	bne.n	8006656 <HAL_I2S_DMAStop+0x122>
 8006652:	4b85      	ldr	r3, [pc, #532]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006654:	e001      	b.n	800665a <HAL_I2S_DMAStop+0x126>
 8006656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800665a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a7e      	ldr	r2, [pc, #504]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_I2S_DMAStop+0x13e>
 800666e:	4b7e      	ldr	r3, [pc, #504]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006670:	e001      	b.n	8006676 <HAL_I2S_DMAStop+0x142>
 8006672:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a79      	ldr	r2, [pc, #484]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_I2S_DMAStop+0x154>
 8006684:	4b78      	ldr	r3, [pc, #480]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006686:	e001      	b.n	800668c <HAL_I2S_DMAStop+0x158>
 8006688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a73      	ldr	r2, [pc, #460]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d101      	bne.n	80066a0 <HAL_I2S_DMAStop+0x16c>
 800669c:	4b72      	ldr	r3, [pc, #456]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 800669e:	e001      	b.n	80066a4 <HAL_I2S_DMAStop+0x170>
 80066a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	496e      	ldr	r1, [pc, #440]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 80066ac:	428b      	cmp	r3, r1
 80066ae:	d101      	bne.n	80066b4 <HAL_I2S_DMAStop+0x180>
 80066b0:	4b6d      	ldr	r3, [pc, #436]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 80066b2:	e001      	b.n	80066b8 <HAL_I2S_DMAStop+0x184>
 80066b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10c      	bne.n	80066e0 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066de:	e0fa      	b.n	80068d6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <HAL_I2S_DMAStop+0x1ba>
 80066ea:	4b5f      	ldr	r3, [pc, #380]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 80066ec:	e001      	b.n	80066f2 <HAL_I2S_DMAStop+0x1be>
 80066ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066f2:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066f4:	e0ef      	b.n	80068d6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066fe:	d005      	beq.n	800670c <HAL_I2S_DMAStop+0x1d8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006708:	f040 80e5 	bne.w	80068d6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00f      	beq.n	8006734 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006718:	4618      	mov	r0, r3
 800671a:	f7fd facb 	bl	8003cb4 <HAL_DMA_Abort>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006728:	f043 0208 	orr.w	r2, r3, #8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b05      	cmp	r3, #5
 800673e:	f040 809a 	bne.w	8006876 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00f      	beq.n	800676a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	4618      	mov	r0, r3
 8006750:	f7fd fab0 	bl	8003cb4 <HAL_DMA_Abort>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675e:	f043 0208 	orr.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800676a:	f7fd f85b 	bl	8003824 <HAL_GetTick>
 800676e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006770:	e012      	b.n	8006798 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006772:	f7fd f857 	bl	8003824 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b64      	cmp	r3, #100	@ 0x64
 800677e:	d90b      	bls.n	8006798 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006784:	f043 0201 	orr.w	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a31      	ldr	r2, [pc, #196]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d101      	bne.n	80067a6 <HAL_I2S_DMAStop+0x272>
 80067a2:	4b31      	ldr	r3, [pc, #196]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 80067a4:	e001      	b.n	80067aa <HAL_I2S_DMAStop+0x276>
 80067a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d1de      	bne.n	8006772 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80067b4:	e012      	b.n	80067dc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80067b6:	f7fd f835 	bl	8003824 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b64      	cmp	r3, #100	@ 0x64
 80067c2:	d90b      	bls.n	80067dc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c8:	f043 0201 	orr.w	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a20      	ldr	r2, [pc, #128]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_I2S_DMAStop+0x2b6>
 80067e6:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 80067e8:	e001      	b.n	80067ee <HAL_I2S_DMAStop+0x2ba>
 80067ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f4:	2b80      	cmp	r3, #128	@ 0x80
 80067f6:	d0de      	beq.n	80067b6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a19      	ldr	r2, [pc, #100]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_I2S_DMAStop+0x2d2>
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006804:	e001      	b.n	800680a <HAL_I2S_DMAStop+0x2d6>
 8006806:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4914      	ldr	r1, [pc, #80]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 8006812:	428b      	cmp	r3, r1
 8006814:	d101      	bne.n	800681a <HAL_I2S_DMAStop+0x2e6>
 8006816:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006818:	e001      	b.n	800681e <HAL_I2S_DMAStop+0x2ea>
 800681a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800681e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006822:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0d      	ldr	r2, [pc, #52]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <HAL_I2S_DMAStop+0x302>
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006834:	e001      	b.n	800683a <HAL_I2S_DMAStop+0x306>
 8006836:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a07      	ldr	r2, [pc, #28]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <HAL_I2S_DMAStop+0x31a>
 800684a:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 800684c:	e001      	b.n	8006852 <HAL_I2S_DMAStop+0x31e>
 800684e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4902      	ldr	r1, [pc, #8]	@ (8006864 <HAL_I2S_DMAStop+0x330>)
 800685a:	428b      	cmp	r3, r1
 800685c:	d106      	bne.n	800686c <HAL_I2S_DMAStop+0x338>
 800685e:	4b02      	ldr	r3, [pc, #8]	@ (8006868 <HAL_I2S_DMAStop+0x334>)
 8006860:	e006      	b.n	8006870 <HAL_I2S_DMAStop+0x33c>
 8006862:	bf00      	nop
 8006864:	40003800 	.word	0x40003800
 8006868:	40003400 	.word	0x40003400
 800686c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006870:	f022 0202 	bic.w	r2, r2, #2
 8006874:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006884:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b4:	d10c      	bne.n	80068d0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e002      	b.n	80068d6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80068de:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006936:	b2db      	uxtb	r3, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_I2S_GetError>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval I2S Error Code
  */
uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  return hi2s->ErrorCode;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10e      	bne.n	8006990 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7fa fe5b 	bl	800164c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7fa fe9d 	bl	80016ec <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0203 	bic.w	r2, r2, #3
 80069d6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f0:	f043 0208 	orr.w	r2, r3, #8
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff ff8b 	bl	8006914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10e      	bne.n	8006a5a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff53 	bl	8006900 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	b292      	uxth	r2, r2
 8006a76:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10e      	bne.n	8006ab8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006aa8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fa fdca 	bl	800164c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d13a      	bne.n	8006b52 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d109      	bne.n	8006afa <I2S_IRQHandler+0x3a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af0:	2b40      	cmp	r3, #64	@ 0x40
 8006af2:	d102      	bne.n	8006afa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ffb4 	bl	8006a62 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b40      	cmp	r3, #64	@ 0x40
 8006b02:	d126      	bne.n	8006b52 <I2S_IRQHandler+0x92>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d11f      	bne.n	8006b52 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b20:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b44:	f043 0202 	orr.w	r2, r3, #2
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fee1 	bl	8006914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d136      	bne.n	8006bcc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d109      	bne.n	8006b7c <I2S_IRQHandler+0xbc>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b72:	2b80      	cmp	r3, #128	@ 0x80
 8006b74:	d102      	bne.n	8006b7c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff45 	bl	8006a06 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d122      	bne.n	8006bcc <I2S_IRQHandler+0x10c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d11b      	bne.n	8006bcc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ba2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bbe:	f043 0204 	orr.w	r2, r3, #4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff fea4 	bl	8006914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bcc:	bf00      	nop
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006be4:	f7fc fe1e 	bl	8003824 <HAL_GetTick>
 8006be8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006bea:	e018      	b.n	8006c1e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d014      	beq.n	8006c1e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006bf4:	f7fc fe16 	bl	8003824 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d902      	bls.n	8006c0a <I2S_WaitFlagStateUntilTimeout+0x36>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e00f      	b.n	8006c3e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4013      	ands	r3, r2
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d1d7      	bne.n	8006bec <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a92      	ldr	r2, [pc, #584]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d101      	bne.n	8006c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006c62:	4b92      	ldr	r3, [pc, #584]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c64:	e001      	b.n	8006c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006c66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a8b      	ldr	r2, [pc, #556]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d101      	bne.n	8006c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c80:	4b8a      	ldr	r3, [pc, #552]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c82:	e001      	b.n	8006c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c94:	d004      	beq.n	8006ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 8099 	bne.w	8006dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d107      	bne.n	8006cba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f925 	bl	8006f04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d107      	bne.n	8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9c8 	bl	8007064 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cda:	2b40      	cmp	r3, #64	@ 0x40
 8006cdc:	d13a      	bne.n	8006d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d035      	beq.n	8006d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6e      	ldr	r2, [pc, #440]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cf4:	e001      	b.n	8006cfa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006cf6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4969      	ldr	r1, [pc, #420]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d02:	428b      	cmp	r3, r1
 8006d04:	d101      	bne.n	8006d0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006d06:	4b69      	ldr	r3, [pc, #420]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d08:	e001      	b.n	8006d0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006d0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d46:	f043 0202 	orr.w	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fde0 	bl	8006914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	f040 80c3 	bne.w	8006ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80bd 	beq.w	8006ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a49      	ldr	r2, [pc, #292]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d101      	bne.n	8006d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d86:	4b49      	ldr	r3, [pc, #292]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d88:	e001      	b.n	8006d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4944      	ldr	r1, [pc, #272]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d96:	428b      	cmp	r3, r1
 8006d98:	d101      	bne.n	8006d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d9a:	4b44      	ldr	r3, [pc, #272]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d9c:	e001      	b.n	8006da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006da2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006da6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006da8:	2300      	movs	r3, #0
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60bb      	str	r3, [r7, #8]
 8006db4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	f043 0204 	orr.w	r2, r3, #4
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fda2 	bl	8006914 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006dd0:	e089      	b.n	8006ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d107      	bne.n	8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f8be 	bl	8006f68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d107      	bne.n	8006e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8fd 	bl	8007000 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0c:	2b40      	cmp	r3, #64	@ 0x40
 8006e0e:	d12f      	bne.n	8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d02a      	beq.n	8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d101      	bne.n	8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006e34:	4b1d      	ldr	r3, [pc, #116]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e36:	e001      	b.n	8006e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006e38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4919      	ldr	r1, [pc, #100]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e44:	428b      	cmp	r3, r1
 8006e46:	d101      	bne.n	8006e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006e48:	4b18      	ldr	r3, [pc, #96]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e4a:	e001      	b.n	8006e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f043 0202 	orr.w	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fd52 	bl	8006914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d136      	bne.n	8006ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d031      	beq.n	8006ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a07      	ldr	r2, [pc, #28]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e8e:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e90:	e001      	b.n	8006e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4902      	ldr	r1, [pc, #8]	@ (8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e9e:	428b      	cmp	r3, r1
 8006ea0:	d106      	bne.n	8006eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006ea2:	4b02      	ldr	r3, [pc, #8]	@ (8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ea4:	e006      	b.n	8006eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006ea6:	bf00      	nop
 8006ea8:	40003800 	.word	0x40003800
 8006eac:	40003400 	.word	0x40003400
 8006eb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006eb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006eb8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ec8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed6:	f043 0204 	orr.w	r2, r3, #4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fd18 	bl	8006914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ee4:	e000      	b.n	8006ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ee6:	bf00      	nop
}
 8006ee8:	bf00      	nop
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	1c99      	adds	r1, r3, #2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f16:	881a      	ldrh	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d113      	bne.n	8006f5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ffc9 	bl	8006ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	1c99      	adds	r1, r3, #2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f7a:	8819      	ldrh	r1, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d101      	bne.n	8006f8a <I2SEx_TxISR_I2SExt+0x22>
 8006f86:	4b1d      	ldr	r3, [pc, #116]	@ (8006ffc <I2SEx_TxISR_I2SExt+0x94>)
 8006f88:	e001      	b.n	8006f8e <I2SEx_TxISR_I2SExt+0x26>
 8006f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f8e:	460a      	mov	r2, r1
 8006f90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d121      	bne.n	8006fee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a12      	ldr	r2, [pc, #72]	@ (8006ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d101      	bne.n	8006fb8 <I2SEx_TxISR_I2SExt+0x50>
 8006fb4:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <I2SEx_TxISR_I2SExt+0x94>)
 8006fb6:	e001      	b.n	8006fbc <I2SEx_TxISR_I2SExt+0x54>
 8006fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	490d      	ldr	r1, [pc, #52]	@ (8006ff8 <I2SEx_TxISR_I2SExt+0x90>)
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	d101      	bne.n	8006fcc <I2SEx_TxISR_I2SExt+0x64>
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006ffc <I2SEx_TxISR_I2SExt+0x94>)
 8006fca:	e001      	b.n	8006fd0 <I2SEx_TxISR_I2SExt+0x68>
 8006fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006fd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff ff81 	bl	8006ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40003800 	.word	0x40003800
 8006ffc:	40003400 	.word	0x40003400

08007000 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68d8      	ldr	r0, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	1c99      	adds	r1, r3, #2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007018:	b282      	uxth	r2, r0
 800701a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d113      	bne.n	800705c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007042:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff ff4a 	bl	8006ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a20      	ldr	r2, [pc, #128]	@ (80070f4 <I2SEx_RxISR_I2SExt+0x90>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <I2SEx_RxISR_I2SExt+0x16>
 8007076:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <I2SEx_RxISR_I2SExt+0x94>)
 8007078:	e001      	b.n	800707e <I2SEx_RxISR_I2SExt+0x1a>
 800707a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800707e:	68d8      	ldr	r0, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	1c99      	adds	r1, r3, #2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800708a:	b282      	uxth	r2, r0
 800708c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d121      	bne.n	80070ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a12      	ldr	r2, [pc, #72]	@ (80070f4 <I2SEx_RxISR_I2SExt+0x90>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d101      	bne.n	80070b4 <I2SEx_RxISR_I2SExt+0x50>
 80070b0:	4b11      	ldr	r3, [pc, #68]	@ (80070f8 <I2SEx_RxISR_I2SExt+0x94>)
 80070b2:	e001      	b.n	80070b8 <I2SEx_RxISR_I2SExt+0x54>
 80070b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	490d      	ldr	r1, [pc, #52]	@ (80070f4 <I2SEx_RxISR_I2SExt+0x90>)
 80070c0:	428b      	cmp	r3, r1
 80070c2:	d101      	bne.n	80070c8 <I2SEx_RxISR_I2SExt+0x64>
 80070c4:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <I2SEx_RxISR_I2SExt+0x94>)
 80070c6:	e001      	b.n	80070cc <I2SEx_RxISR_I2SExt+0x68>
 80070c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff03 	bl	8006ef0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40003800 	.word	0x40003800
 80070f8:	40003400 	.word	0x40003400

080070fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e267      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d075      	beq.n	8007206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800711a:	4b88      	ldr	r3, [pc, #544]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b04      	cmp	r3, #4
 8007124:	d00c      	beq.n	8007140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007126:	4b85      	ldr	r3, [pc, #532]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800712e:	2b08      	cmp	r3, #8
 8007130:	d112      	bne.n	8007158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007132:	4b82      	ldr	r3, [pc, #520]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800713a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800713e:	d10b      	bne.n	8007158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007140:	4b7e      	ldr	r3, [pc, #504]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d05b      	beq.n	8007204 <HAL_RCC_OscConfig+0x108>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d157      	bne.n	8007204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e242      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007160:	d106      	bne.n	8007170 <HAL_RCC_OscConfig+0x74>
 8007162:	4b76      	ldr	r3, [pc, #472]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a75      	ldr	r2, [pc, #468]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e01d      	b.n	80071ac <HAL_RCC_OscConfig+0xb0>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007178:	d10c      	bne.n	8007194 <HAL_RCC_OscConfig+0x98>
 800717a:	4b70      	ldr	r3, [pc, #448]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a6f      	ldr	r2, [pc, #444]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4b6d      	ldr	r3, [pc, #436]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a6c      	ldr	r2, [pc, #432]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800718c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	e00b      	b.n	80071ac <HAL_RCC_OscConfig+0xb0>
 8007194:	4b69      	ldr	r3, [pc, #420]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a68      	ldr	r2, [pc, #416]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800719a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	4b66      	ldr	r3, [pc, #408]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a65      	ldr	r2, [pc, #404]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 80071a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d013      	beq.n	80071dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fc fb36 	bl	8003824 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071bc:	f7fc fb32 	bl	8003824 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b64      	cmp	r3, #100	@ 0x64
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e207      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ce:	4b5b      	ldr	r3, [pc, #364]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0f0      	beq.n	80071bc <HAL_RCC_OscConfig+0xc0>
 80071da:	e014      	b.n	8007206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071dc:	f7fc fb22 	bl	8003824 <HAL_GetTick>
 80071e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071e4:	f7fc fb1e 	bl	8003824 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b64      	cmp	r3, #100	@ 0x64
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e1f3      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071f6:	4b51      	ldr	r3, [pc, #324]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f0      	bne.n	80071e4 <HAL_RCC_OscConfig+0xe8>
 8007202:	e000      	b.n	8007206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d063      	beq.n	80072da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007212:	4b4a      	ldr	r3, [pc, #296]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800721e:	4b47      	ldr	r3, [pc, #284]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007226:	2b08      	cmp	r3, #8
 8007228:	d11c      	bne.n	8007264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800722a:	4b44      	ldr	r3, [pc, #272]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d116      	bne.n	8007264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007236:	4b41      	ldr	r3, [pc, #260]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_RCC_OscConfig+0x152>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d001      	beq.n	800724e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e1c7      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724e:	4b3b      	ldr	r3, [pc, #236]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4937      	ldr	r1, [pc, #220]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800725e:	4313      	orrs	r3, r2
 8007260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007262:	e03a      	b.n	80072da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d020      	beq.n	80072ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800726c:	4b34      	ldr	r3, [pc, #208]	@ (8007340 <HAL_RCC_OscConfig+0x244>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007272:	f7fc fad7 	bl	8003824 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800727a:	f7fc fad3 	bl	8003824 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e1a8      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728c:	4b2b      	ldr	r3, [pc, #172]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007298:	4b28      	ldr	r3, [pc, #160]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4925      	ldr	r1, [pc, #148]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	e015      	b.n	80072da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ae:	4b24      	ldr	r3, [pc, #144]	@ (8007340 <HAL_RCC_OscConfig+0x244>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b4:	f7fc fab6 	bl	8003824 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072bc:	f7fc fab2 	bl	8003824 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e187      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ce:	4b1b      	ldr	r3, [pc, #108]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d036      	beq.n	8007354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072ee:	4b15      	ldr	r3, [pc, #84]	@ (8007344 <HAL_RCC_OscConfig+0x248>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fc fa96 	bl	8003824 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072fc:	f7fc fa92 	bl	8003824 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e167      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800730e:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <HAL_RCC_OscConfig+0x240>)
 8007310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0x200>
 800731a:	e01b      	b.n	8007354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800731c:	4b09      	ldr	r3, [pc, #36]	@ (8007344 <HAL_RCC_OscConfig+0x248>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007322:	f7fc fa7f 	bl	8003824 <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007328:	e00e      	b.n	8007348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800732a:	f7fc fa7b 	bl	8003824 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d907      	bls.n	8007348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e150      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
 800733c:	40023800 	.word	0x40023800
 8007340:	42470000 	.word	0x42470000
 8007344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007348:	4b88      	ldr	r3, [pc, #544]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800734a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ea      	bne.n	800732a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8097 	beq.w	8007490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007366:	4b81      	ldr	r3, [pc, #516]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10f      	bne.n	8007392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	4b7d      	ldr	r3, [pc, #500]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737a:	4a7c      	ldr	r2, [pc, #496]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800737c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007380:	6413      	str	r3, [r2, #64]	@ 0x40
 8007382:	4b7a      	ldr	r3, [pc, #488]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007392:	4b77      	ldr	r3, [pc, #476]	@ (8007570 <HAL_RCC_OscConfig+0x474>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739a:	2b00      	cmp	r3, #0
 800739c:	d118      	bne.n	80073d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800739e:	4b74      	ldr	r3, [pc, #464]	@ (8007570 <HAL_RCC_OscConfig+0x474>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a73      	ldr	r2, [pc, #460]	@ (8007570 <HAL_RCC_OscConfig+0x474>)
 80073a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073aa:	f7fc fa3b 	bl	8003824 <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b2:	f7fc fa37 	bl	8003824 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e10c      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007570 <HAL_RCC_OscConfig+0x474>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d106      	bne.n	80073e6 <HAL_RCC_OscConfig+0x2ea>
 80073d8:	4b64      	ldr	r3, [pc, #400]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 80073da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073dc:	4a63      	ldr	r2, [pc, #396]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e4:	e01c      	b.n	8007420 <HAL_RCC_OscConfig+0x324>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d10c      	bne.n	8007408 <HAL_RCC_OscConfig+0x30c>
 80073ee:	4b5f      	ldr	r3, [pc, #380]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f2:	4a5e      	ldr	r2, [pc, #376]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 80073f4:	f043 0304 	orr.w	r3, r3, #4
 80073f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fa:	4b5c      	ldr	r3, [pc, #368]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fe:	4a5b      	ldr	r2, [pc, #364]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	6713      	str	r3, [r2, #112]	@ 0x70
 8007406:	e00b      	b.n	8007420 <HAL_RCC_OscConfig+0x324>
 8007408:	4b58      	ldr	r3, [pc, #352]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740c:	4a57      	ldr	r2, [pc, #348]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800740e:	f023 0301 	bic.w	r3, r3, #1
 8007412:	6713      	str	r3, [r2, #112]	@ 0x70
 8007414:	4b55      	ldr	r3, [pc, #340]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	4a54      	ldr	r2, [pc, #336]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800741a:	f023 0304 	bic.w	r3, r3, #4
 800741e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007428:	f7fc f9fc 	bl	8003824 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742e:	e00a      	b.n	8007446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007430:	f7fc f9f8 	bl	8003824 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0cb      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007446:	4b49      	ldr	r3, [pc, #292]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0ee      	beq.n	8007430 <HAL_RCC_OscConfig+0x334>
 8007452:	e014      	b.n	800747e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007454:	f7fc f9e6 	bl	8003824 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800745a:	e00a      	b.n	8007472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800745c:	f7fc f9e2 	bl	8003824 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e0b5      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007472:	4b3e      	ldr	r3, [pc, #248]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1ee      	bne.n	800745c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d105      	bne.n	8007490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007484:	4b39      	ldr	r3, [pc, #228]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007488:	4a38      	ldr	r2, [pc, #224]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800748a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800748e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a1 	beq.w	80075dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800749a:	4b34      	ldr	r3, [pc, #208]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 030c 	and.w	r3, r3, #12
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d05c      	beq.n	8007560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d141      	bne.n	8007532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ae:	4b31      	ldr	r3, [pc, #196]	@ (8007574 <HAL_RCC_OscConfig+0x478>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b4:	f7fc f9b6 	bl	8003824 <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074bc:	f7fc f9b2 	bl	8003824 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e087      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ce:	4b27      	ldr	r3, [pc, #156]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e8:	019b      	lsls	r3, r3, #6
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	3b01      	subs	r3, #1
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	061b      	lsls	r3, r3, #24
 80074fe:	491b      	ldr	r1, [pc, #108]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007500:	4313      	orrs	r3, r2
 8007502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007504:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <HAL_RCC_OscConfig+0x478>)
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800750a:	f7fc f98b 	bl	8003824 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007510:	e008      	b.n	8007524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007512:	f7fc f987 	bl	8003824 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e05c      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007524:	4b11      	ldr	r3, [pc, #68]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f0      	beq.n	8007512 <HAL_RCC_OscConfig+0x416>
 8007530:	e054      	b.n	80075dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007532:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <HAL_RCC_OscConfig+0x478>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fc f974 	bl	8003824 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007540:	f7fc f970 	bl	8003824 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e045      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	4b06      	ldr	r3, [pc, #24]	@ (800756c <HAL_RCC_OscConfig+0x470>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x444>
 800755e:	e03d      	b.n	80075dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e038      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
 800756c:	40023800 	.word	0x40023800
 8007570:	40007000 	.word	0x40007000
 8007574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007578:	4b1b      	ldr	r3, [pc, #108]	@ (80075e8 <HAL_RCC_OscConfig+0x4ec>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d028      	beq.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007590:	429a      	cmp	r2, r3
 8007592:	d121      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d11a      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075a8:	4013      	ands	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d111      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	3b01      	subs	r3, #1
 80075c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d107      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40023800 	.word	0x40023800

080075ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0cc      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007600:	4b68      	ldr	r3, [pc, #416]	@ (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d90c      	bls.n	8007628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800760e:	4b65      	ldr	r3, [pc, #404]	@ (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007616:	4b63      	ldr	r3, [pc, #396]	@ (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d001      	beq.n	8007628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0b8      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d020      	beq.n	8007676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007640:	4b59      	ldr	r3, [pc, #356]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4a58      	ldr	r2, [pc, #352]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800764a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007658:	4b53      	ldr	r3, [pc, #332]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	4a52      	ldr	r2, [pc, #328]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800765e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007664:	4b50      	ldr	r3, [pc, #320]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	494d      	ldr	r1, [pc, #308]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d044      	beq.n	800770c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d107      	bne.n	800769a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768a:	4b47      	ldr	r3, [pc, #284]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d119      	bne.n	80076ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e07f      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d003      	beq.n	80076aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d107      	bne.n	80076ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076aa:	4b3f      	ldr	r3, [pc, #252]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e06f      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ba:	4b3b      	ldr	r3, [pc, #236]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e067      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ca:	4b37      	ldr	r3, [pc, #220]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f023 0203 	bic.w	r2, r3, #3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4934      	ldr	r1, [pc, #208]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076dc:	f7fc f8a2 	bl	8003824 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e2:	e00a      	b.n	80076fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076e4:	f7fc f89e 	bl	8003824 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e04f      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076fa:	4b2b      	ldr	r3, [pc, #172]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 020c 	and.w	r2, r3, #12
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	429a      	cmp	r2, r3
 800770a:	d1eb      	bne.n	80076e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800770c:	4b25      	ldr	r3, [pc, #148]	@ (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d20c      	bcs.n	8007734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771a:	4b22      	ldr	r3, [pc, #136]	@ (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b20      	ldr	r3, [pc, #128]	@ (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e032      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007740:	4b19      	ldr	r3, [pc, #100]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4916      	ldr	r1, [pc, #88]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	4313      	orrs	r3, r2
 8007750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800775e:	4b12      	ldr	r3, [pc, #72]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	490e      	ldr	r1, [pc, #56]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	4313      	orrs	r3, r2
 8007770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007772:	f000 f821 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8007776:	4602      	mov	r2, r0
 8007778:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	490a      	ldr	r1, [pc, #40]	@ (80077ac <HAL_RCC_ClockConfig+0x1c0>)
 8007784:	5ccb      	ldrb	r3, [r1, r3]
 8007786:	fa22 f303 	lsr.w	r3, r2, r3
 800778a:	4a09      	ldr	r2, [pc, #36]	@ (80077b0 <HAL_RCC_ClockConfig+0x1c4>)
 800778c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800778e:	4b09      	ldr	r3, [pc, #36]	@ (80077b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f7fc f802 	bl	800379c <HAL_InitTick>

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40023c00 	.word	0x40023c00
 80077a8:	40023800 	.word	0x40023800
 80077ac:	080102f4 	.word	0x080102f4
 80077b0:	20000020 	.word	0x20000020
 80077b4:	20000024 	.word	0x20000024

080077b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077bc:	b094      	sub	sp, #80	@ 0x50
 80077be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c4:	2300      	movs	r3, #0
 80077c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077c8:	2300      	movs	r3, #0
 80077ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077d0:	4b79      	ldr	r3, [pc, #484]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 030c 	and.w	r3, r3, #12
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d00d      	beq.n	80077f8 <HAL_RCC_GetSysClockFreq+0x40>
 80077dc:	2b08      	cmp	r3, #8
 80077de:	f200 80e1 	bhi.w	80079a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_RCC_GetSysClockFreq+0x34>
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d003      	beq.n	80077f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80077ea:	e0db      	b.n	80079a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077ec:	4b73      	ldr	r3, [pc, #460]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x204>)
 80077ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80077f0:	e0db      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077f2:	4b73      	ldr	r3, [pc, #460]	@ (80079c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80077f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077f6:	e0d8      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077f8:	4b6f      	ldr	r3, [pc, #444]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007800:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007802:	4b6d      	ldr	r3, [pc, #436]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d063      	beq.n	80078d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800780e:	4b6a      	ldr	r3, [pc, #424]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	099b      	lsrs	r3, r3, #6
 8007814:	2200      	movs	r2, #0
 8007816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007818:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800781a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	633b      	str	r3, [r7, #48]	@ 0x30
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
 8007826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f04f 0000 	mov.w	r0, #0
 8007832:	f04f 0100 	mov.w	r1, #0
 8007836:	0159      	lsls	r1, r3, #5
 8007838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800783c:	0150      	lsls	r0, r2, #5
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4621      	mov	r1, r4
 8007844:	1a51      	subs	r1, r2, r1
 8007846:	6139      	str	r1, [r7, #16]
 8007848:	4629      	mov	r1, r5
 800784a:	eb63 0301 	sbc.w	r3, r3, r1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800785c:	4659      	mov	r1, fp
 800785e:	018b      	lsls	r3, r1, #6
 8007860:	4651      	mov	r1, sl
 8007862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007866:	4651      	mov	r1, sl
 8007868:	018a      	lsls	r2, r1, #6
 800786a:	4651      	mov	r1, sl
 800786c:	ebb2 0801 	subs.w	r8, r2, r1
 8007870:	4659      	mov	r1, fp
 8007872:	eb63 0901 	sbc.w	r9, r3, r1
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800788a:	4690      	mov	r8, r2
 800788c:	4699      	mov	r9, r3
 800788e:	4623      	mov	r3, r4
 8007890:	eb18 0303 	adds.w	r3, r8, r3
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	462b      	mov	r3, r5
 8007898:	eb49 0303 	adc.w	r3, r9, r3
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078aa:	4629      	mov	r1, r5
 80078ac:	024b      	lsls	r3, r1, #9
 80078ae:	4621      	mov	r1, r4
 80078b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078b4:	4621      	mov	r1, r4
 80078b6:	024a      	lsls	r2, r1, #9
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078be:	2200      	movs	r2, #0
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078c8:	f7f8 fcda 	bl	8000280 <__aeabi_uldivmod>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4613      	mov	r3, r2
 80078d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078d4:	e058      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d6:	4b38      	ldr	r3, [pc, #224]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	099b      	lsrs	r3, r3, #6
 80078dc:	2200      	movs	r2, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	4611      	mov	r1, r2
 80078e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078e6:	623b      	str	r3, [r7, #32]
 80078e8:	2300      	movs	r3, #0
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f04f 0100 	mov.w	r1, #0
 80078fc:	0159      	lsls	r1, r3, #5
 80078fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007902:	0150      	lsls	r0, r2, #5
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4641      	mov	r1, r8
 800790a:	ebb2 0a01 	subs.w	sl, r2, r1
 800790e:	4649      	mov	r1, r9
 8007910:	eb63 0b01 	sbc.w	fp, r3, r1
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007928:	ebb2 040a 	subs.w	r4, r2, sl
 800792c:	eb63 050b 	sbc.w	r5, r3, fp
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	00eb      	lsls	r3, r5, #3
 800793a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800793e:	00e2      	lsls	r2, r4, #3
 8007940:	4614      	mov	r4, r2
 8007942:	461d      	mov	r5, r3
 8007944:	4643      	mov	r3, r8
 8007946:	18e3      	adds	r3, r4, r3
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	464b      	mov	r3, r9
 800794c:	eb45 0303 	adc.w	r3, r5, r3
 8007950:	607b      	str	r3, [r7, #4]
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800795e:	4629      	mov	r1, r5
 8007960:	028b      	lsls	r3, r1, #10
 8007962:	4621      	mov	r1, r4
 8007964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007968:	4621      	mov	r1, r4
 800796a:	028a      	lsls	r2, r1, #10
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007972:	2200      	movs	r2, #0
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	61fa      	str	r2, [r7, #28]
 8007978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800797c:	f7f8 fc80 	bl	8000280 <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4613      	mov	r3, r2
 8007986:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	3301      	adds	r3, #1
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800799a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079a2:	e002      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079a4:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <HAL_RCC_GetSysClockFreq+0x204>)
 80079a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3750      	adds	r7, #80	@ 0x50
 80079b0:	46bd      	mov	sp, r7
 80079b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b6:	bf00      	nop
 80079b8:	40023800 	.word	0x40023800
 80079bc:	00f42400 	.word	0x00f42400
 80079c0:	007a1200 	.word	0x007a1200

080079c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079c8:	4b03      	ldr	r3, [pc, #12]	@ (80079d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079ca:	681b      	ldr	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000020 	.word	0x20000020

080079dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079e0:	f7ff fff0 	bl	80079c4 <HAL_RCC_GetHCLKFreq>
 80079e4:	4602      	mov	r2, r0
 80079e6:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	0a9b      	lsrs	r3, r3, #10
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	4903      	ldr	r1, [pc, #12]	@ (8007a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f2:	5ccb      	ldrb	r3, [r1, r3]
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40023800 	.word	0x40023800
 8007a00:	08010304 	.word	0x08010304

08007a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a08:	f7ff ffdc 	bl	80079c4 <HAL_RCC_GetHCLKFreq>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	0b5b      	lsrs	r3, r3, #13
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4903      	ldr	r1, [pc, #12]	@ (8007a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a1a:	5ccb      	ldrb	r3, [r1, r3]
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40023800 	.word	0x40023800
 8007a28:	08010304 	.word	0x08010304

08007a2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d035      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a54:	4b62      	ldr	r3, [pc, #392]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a5a:	f7fb fee3 	bl	8003824 <HAL_GetTick>
 8007a5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a60:	e008      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a62:	f7fb fedf 	bl	8003824 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e0b0      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a74:	4b5b      	ldr	r3, [pc, #364]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f0      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	019a      	lsls	r2, r3, #6
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	071b      	lsls	r3, r3, #28
 8007a8c:	4955      	ldr	r1, [pc, #340]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a94:	4b52      	ldr	r3, [pc, #328]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a9a:	f7fb fec3 	bl	8003824 <HAL_GetTick>
 8007a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007aa2:	f7fb febf 	bl	8003824 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e090      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8083 	beq.w	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	4b44      	ldr	r3, [pc, #272]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	4a43      	ldr	r2, [pc, #268]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ade:	4b41      	ldr	r3, [pc, #260]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007aea:	4b3f      	ldr	r3, [pc, #252]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a3e      	ldr	r2, [pc, #248]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007af4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007af6:	f7fb fe95 	bl	8003824 <HAL_GetTick>
 8007afa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007afe:	f7fb fe91 	bl	8003824 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e062      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b10:	4b35      	ldr	r3, [pc, #212]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b1c:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02f      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d028      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b44:	4b29      	ldr	r3, [pc, #164]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b4a:	4b28      	ldr	r3, [pc, #160]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b50:	4a24      	ldr	r2, [pc, #144]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b56:	4b23      	ldr	r3, [pc, #140]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d114      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b62:	f7fb fe5f 	bl	8003824 <HAL_GetTick>
 8007b66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b68:	e00a      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b6a:	f7fb fe5b 	bl	8003824 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e02a      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b80:	4b18      	ldr	r3, [pc, #96]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0ee      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b98:	d10d      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b9a:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bae:	490d      	ldr	r1, [pc, #52]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	608b      	str	r3, [r1, #8]
 8007bb4:	e005      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	4a0a      	ldr	r2, [pc, #40]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bbc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007bc0:	6093      	str	r3, [r2, #8]
 8007bc2:	4b08      	ldr	r3, [pc, #32]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bce:	4905      	ldr	r1, [pc, #20]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	42470068 	.word	0x42470068
 8007be4:	40023800 	.word	0x40023800
 8007be8:	40007000 	.word	0x40007000
 8007bec:	42470e40 	.word	0x42470e40

08007bf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d13e      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007c0e:	4b23      	ldr	r3, [pc, #140]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d12f      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c24:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c26:	617b      	str	r3, [r7, #20]
          break;
 8007c28:	e02f      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c36:	d108      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c38:	4b18      	ldr	r3, [pc, #96]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c40:	4a18      	ldr	r2, [pc, #96]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e007      	b.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c4a:	4b14      	ldr	r3, [pc, #80]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c52:	4a15      	ldr	r2, [pc, #84]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c58:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007c5a:	4b10      	ldr	r3, [pc, #64]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c60:	099b      	lsrs	r3, r3, #6
 8007c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	fb02 f303 	mul.w	r3, r2, r3
 8007c6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c74:	0f1b      	lsrs	r3, r3, #28
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	617b      	str	r3, [r7, #20]
          break;
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
          break;
 8007c88:	bf00      	nop
        }
      }
      break;
 8007c8a:	bf00      	nop
    }
  }
  return frequency;
 8007c8c:	697b      	ldr	r3, [r7, #20]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	00bb8000 	.word	0x00bb8000
 8007ca4:	007a1200 	.word	0x007a1200
 8007ca8:	00f42400 	.word	0x00f42400

08007cac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e022      	b.n	8007d04 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fb facf 	bl	8003274 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2203      	movs	r2, #3
 8007cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f814 	bl	8007d0c <HAL_SD_InitCard>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e00a      	b.n	8007d04 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d0c:	b5b0      	push	{r4, r5, r7, lr}
 8007d0e:	b08e      	sub	sp, #56	@ 0x38
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007d28:	2376      	movs	r3, #118	@ 0x76
 8007d2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681d      	ldr	r5, [r3, #0]
 8007d30:	466c      	mov	r4, sp
 8007d32:	f107 0314 	add.w	r3, r7, #20
 8007d36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d44:	4628      	mov	r0, r5
 8007d46:	f001 ffb1 	bl	8009cac <SDIO_Init>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e04f      	b.n	8007dfc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007d5c:	4b29      	ldr	r3, [pc, #164]	@ (8007e04 <HAL_SD_InitCard+0xf8>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 ffe9 	bl	8009d3e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007d6c:	4b25      	ldr	r3, [pc, #148]	@ (8007e04 <HAL_SD_InitCard+0xf8>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007d72:	2002      	movs	r0, #2
 8007d74:	f7fb fd62 	bl	800383c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fe69 	bl	8008a50 <SD_PowerON>
 8007d7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00b      	beq.n	8007d9e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	431a      	orrs	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e02e      	b.n	8007dfc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fd88 	bl	80088b4 <SD_InitCard>
 8007da4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e01b      	b.n	8007dfc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f002 f848 	bl	8009e62 <SDMMC_CmdBlockLength>
 8007dd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00f      	beq.n	8007dfa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a0a      	ldr	r2, [pc, #40]	@ (8007e08 <HAL_SD_InitCard+0xfc>)
 8007de0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3728      	adds	r7, #40	@ 0x28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bdb0      	pop	{r4, r5, r7, pc}
 8007e04:	422580a0 	.word	0x422580a0
 8007e08:	004005ff 	.word	0x004005ff

08007e0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b092      	sub	sp, #72	@ 0x48
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e1a:	f7fb fd03 	bl	8003824 <HAL_GetTick>
 8007e1e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d107      	bne.n	8007e3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e1bd      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	f040 81b0 	bne.w	80081ac <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	441a      	add	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d907      	bls.n	8007e70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e64:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e1a4      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2203      	movs	r2, #3
 8007e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d002      	beq.n	8007e8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8a:	025b      	lsls	r3, r3, #9
 8007e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	025b      	lsls	r3, r3, #9
 8007e98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e9a:	2390      	movs	r3, #144	@ 0x90
 8007e9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f107 0214 	add.w	r2, r7, #20
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 ffa8 	bl	8009e0a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d90a      	bls.n	8007ed6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f002 f80c 	bl	8009eea <SDMMC_CmdReadMultiBlock>
 8007ed2:	6478      	str	r0, [r7, #68]	@ 0x44
 8007ed4:	e009      	b.n	8007eea <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 ffdf 	bl	8009ea6 <SDMMC_CmdReadSingleBlock>
 8007ee8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d012      	beq.n	8007f16 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80080e0 <HAL_SD_ReadBlocks+0x2d4>)
 8007ef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007efe:	431a      	orrs	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e151      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007f1a:	e061      	b.n	8007fe0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d03c      	beq.n	8007fa4 <HAL_SD_ReadBlocks+0x198>
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d039      	beq.n	8007fa4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007f30:	2300      	movs	r3, #0
 8007f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f34:	e033      	b.n	8007f9e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f001 fee1 	bl	8009d02 <SDIO_ReadFIFO>
 8007f40:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f52:	3b01      	subs	r3, #1
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	0a1b      	lsrs	r3, r3, #8
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f62:	3301      	adds	r3, #1
 8007f64:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f78:	3301      	adds	r3, #1
 8007f7a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f84:	0e1b      	lsrs	r3, r3, #24
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8e:	3301      	adds	r3, #1
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f94:	3b01      	subs	r3, #1
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fa0:	2b07      	cmp	r3, #7
 8007fa2:	d9c8      	bls.n	8007f36 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007fa4:	f7fb fc3e 	bl	8003824 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d902      	bls.n	8007fba <HAL_SD_ReadBlocks+0x1ae>
 8007fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d112      	bne.n	8007fe0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a48      	ldr	r2, [pc, #288]	@ (80080e0 <HAL_SD_ReadBlocks+0x2d4>)
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e0ec      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fe6:	f240 332a 	movw	r3, #810	@ 0x32a
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d095      	beq.n	8007f1c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d022      	beq.n	8008044 <HAL_SD_ReadBlocks+0x238>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d91f      	bls.n	8008044 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008008:	2b03      	cmp	r3, #3
 800800a:	d01b      	beq.n	8008044 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f001 ffd1 	bl	8009fb8 <SDMMC_CmdStopTransfer>
 8008016:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801a:	2b00      	cmp	r3, #0
 800801c:	d012      	beq.n	8008044 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2f      	ldr	r2, [pc, #188]	@ (80080e0 <HAL_SD_ReadBlocks+0x2d4>)
 8008024:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800802a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800802c:	431a      	orrs	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0ba      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d012      	beq.n	8008078 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a22      	ldr	r2, [pc, #136]	@ (80080e0 <HAL_SD_ReadBlocks+0x2d4>)
 8008058:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805e:	f043 0208 	orr.w	r2, r3, #8
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e0a0      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d012      	beq.n	80080ac <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a15      	ldr	r2, [pc, #84]	@ (80080e0 <HAL_SD_ReadBlocks+0x2d4>)
 800808c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	f043 0202 	orr.w	r2, r3, #2
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e086      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d063      	beq.n	8008182 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a08      	ldr	r2, [pc, #32]	@ (80080e0 <HAL_SD_ReadBlocks+0x2d4>)
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c6:	f043 0220 	orr.w	r2, r3, #32
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e06c      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
 80080e0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 fe0a 	bl	8009d02 <SDIO_ReadFIFO>
 80080ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80080f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fa:	3301      	adds	r3, #1
 80080fc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008100:	3b01      	subs	r3, #1
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b2da      	uxtb	r2, r3
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800810e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008110:	3301      	adds	r3, #1
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008116:	3b01      	subs	r3, #1
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800811a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	b2da      	uxtb	r2, r3
 8008120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008122:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	3301      	adds	r3, #1
 8008128:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800812a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812c:	3b01      	subs	r3, #1
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008132:	0e1b      	lsrs	r3, r3, #24
 8008134:	b2da      	uxtb	r2, r3
 8008136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008138:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800813a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813c:	3301      	adds	r3, #1
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008142:	3b01      	subs	r3, #1
 8008144:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008146:	f7fb fb6d 	bl	8003824 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008152:	429a      	cmp	r2, r3
 8008154:	d902      	bls.n	800815c <HAL_SD_ReadBlocks+0x350>
 8008156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008158:	2b00      	cmp	r3, #0
 800815a:	d112      	bne.n	8008182 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a18      	ldr	r2, [pc, #96]	@ (80081c4 <HAL_SD_ReadBlocks+0x3b8>)
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008168:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e01b      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_SD_ReadBlocks+0x38a>
 8008190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1a6      	bne.n	80080e4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e006      	b.n	80081ba <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3748      	adds	r7, #72	@ 0x48
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	004005ff 	.word	0x004005ff

080081c8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b092      	sub	sp, #72	@ 0x48
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081d6:	f7fb fb25 	bl	8003824 <HAL_GetTick>
 80081da:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d107      	bne.n	80081fa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e166      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b01      	cmp	r3, #1
 8008204:	f040 8159 	bne.w	80084ba <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800820e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	441a      	add	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008218:	429a      	cmp	r2, r3
 800821a:	d907      	bls.n	800822c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008220:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e14d      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2203      	movs	r2, #3
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008240:	2b01      	cmp	r3, #1
 8008242:	d002      	beq.n	800824a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008246:	025b      	lsls	r3, r3, #9
 8008248:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	025b      	lsls	r3, r3, #9
 8008254:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008256:	2390      	movs	r3, #144	@ 0x90
 8008258:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800825a:	2300      	movs	r3, #0
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800825e:	2300      	movs	r3, #0
 8008260:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008262:	2301      	movs	r3, #1
 8008264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f107 0218 	add.w	r2, r7, #24
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f001 fdca 	bl	8009e0a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d90a      	bls.n	8008292 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fe72 	bl	8009f72 <SDMMC_CmdWriteMultiBlock>
 800828e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008290:	e009      	b.n	80082a6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2210      	movs	r2, #16
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fe45 	bl	8009f2e <SDMMC_CmdWriteSingleBlock>
 80082a4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80082a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d012      	beq.n	80082d2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a87      	ldr	r2, [pc, #540]	@ (80084d0 <HAL_SD_WriteBlocks+0x308>)
 80082b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ba:	431a      	orrs	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e0fa      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80082d6:	e065      	b.n	80083a4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d040      	beq.n	8008368 <HAL_SD_WriteBlocks+0x1a0>
 80082e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03d      	beq.n	8008368 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80082ec:	2300      	movs	r3, #0
 80082ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80082f0:	e037      	b.n	8008362 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80082f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082fa:	3301      	adds	r3, #1
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008300:	3b01      	subs	r3, #1
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	021a      	lsls	r2, r3, #8
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008312:	3301      	adds	r3, #1
 8008314:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008318:	3b01      	subs	r3, #1
 800831a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	041a      	lsls	r2, r3, #16
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832a:	3301      	adds	r3, #1
 800832c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800832e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008330:	3b01      	subs	r3, #1
 8008332:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	061a      	lsls	r2, r3, #24
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008342:	3301      	adds	r3, #1
 8008344:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008348:	3b01      	subs	r3, #1
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f107 0214 	add.w	r2, r7, #20
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fce0 	bl	8009d1c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800835c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800835e:	3301      	adds	r3, #1
 8008360:	643b      	str	r3, [r7, #64]	@ 0x40
 8008362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008364:	2b07      	cmp	r3, #7
 8008366:	d9c4      	bls.n	80082f2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008368:	f7fb fa5c 	bl	8003824 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008374:	429a      	cmp	r2, r3
 8008376:	d902      	bls.n	800837e <HAL_SD_WriteBlocks+0x1b6>
 8008378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	d112      	bne.n	80083a4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a53      	ldr	r2, [pc, #332]	@ (80084d0 <HAL_SD_WriteBlocks+0x308>)
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800838a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800838c:	431a      	orrs	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e091      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083aa:	f240 331a 	movw	r3, #794	@ 0x31a
 80083ae:	4013      	ands	r3, r2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d091      	beq.n	80082d8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d022      	beq.n	8008408 <HAL_SD_WriteBlocks+0x240>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d91f      	bls.n	8008408 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d01b      	beq.n	8008408 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 fdef 	bl	8009fb8 <SDMMC_CmdStopTransfer>
 80083da:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80083dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d012      	beq.n	8008408 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3a      	ldr	r2, [pc, #232]	@ (80084d0 <HAL_SD_WriteBlocks+0x308>)
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f0:	431a      	orrs	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e05f      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d012      	beq.n	800843c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a2d      	ldr	r2, [pc, #180]	@ (80084d0 <HAL_SD_WriteBlocks+0x308>)
 800841c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	f043 0208 	orr.w	r2, r3, #8
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e045      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d012      	beq.n	8008470 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a20      	ldr	r2, [pc, #128]	@ (80084d0 <HAL_SD_WriteBlocks+0x308>)
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f043 0202 	orr.w	r2, r3, #2
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e02b      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	d012      	beq.n	80084a4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a13      	ldr	r2, [pc, #76]	@ (80084d0 <HAL_SD_WriteBlocks+0x308>)
 8008484:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	f043 0210 	orr.w	r2, r3, #16
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e011      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80084ac:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e006      	b.n	80084c8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3748      	adds	r7, #72	@ 0x48
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	004005ff 	.word	0x004005ff

080084d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e2:	0f9b      	lsrs	r3, r3, #30
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ee:	0e9b      	lsrs	r3, r3, #26
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008500:	0e1b      	lsrs	r3, r3, #24
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	b2da      	uxtb	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008512:	0c1b      	lsrs	r3, r3, #16
 8008514:	b2da      	uxtb	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	b2da      	uxtb	r2, r3
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800852a:	b2da      	uxtb	r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008534:	0d1b      	lsrs	r3, r3, #20
 8008536:	b29a      	uxth	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	b2da      	uxtb	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008552:	0bdb      	lsrs	r3, r3, #15
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008564:	0b9b      	lsrs	r3, r3, #14
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	b2da      	uxtb	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008576:	0b5b      	lsrs	r3, r3, #13
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008588:	0b1b      	lsrs	r3, r3, #12
 800858a:	b2db      	uxtb	r3, r3
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	b2da      	uxtb	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2200      	movs	r2, #0
 800859a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d163      	bne.n	800866c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085a8:	009a      	lsls	r2, r3, #2
 80085aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80085ae:	4013      	ands	r3, r2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80085b4:	0f92      	lsrs	r2, r2, #30
 80085b6:	431a      	orrs	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c0:	0edb      	lsrs	r3, r3, #27
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 0307 	and.w	r3, r3, #7
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d2:	0e1b      	lsrs	r3, r3, #24
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e4:	0d5b      	lsrs	r3, r3, #21
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085f6:	0c9b      	lsrs	r3, r3, #18
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008608:	0bdb      	lsrs	r3, r3, #15
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	b2da      	uxtb	r2, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	7e1b      	ldrb	r3, [r3, #24]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	3302      	adds	r3, #2
 800862c:	2201      	movs	r2, #1
 800862e:	fa02 f303 	lsl.w	r3, r2, r3
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008636:	fb03 f202 	mul.w	r2, r3, r2
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	7a1b      	ldrb	r3, [r3, #8]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	2201      	movs	r2, #1
 800864a:	409a      	lsls	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008658:	0a52      	lsrs	r2, r2, #9
 800865a:	fb03 f202 	mul.w	r2, r3, r2
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008668:	661a      	str	r2, [r3, #96]	@ 0x60
 800866a:	e031      	b.n	80086d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008670:	2b01      	cmp	r3, #1
 8008672:	d11d      	bne.n	80086b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008678:	041b      	lsls	r3, r3, #16
 800867a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	431a      	orrs	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	3301      	adds	r3, #1
 8008690:	029a      	lsls	r2, r3, #10
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086a4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80086ae:	e00f      	b.n	80086d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a58      	ldr	r2, [pc, #352]	@ (8008818 <HAL_SD_GetCardCSD+0x344>)
 80086b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e09d      	b.n	800880c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d4:	0b9b      	lsrs	r3, r3, #14
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e6:	09db      	lsrs	r3, r3, #7
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008708:	0fdb      	lsrs	r3, r3, #31
 800870a:	b2da      	uxtb	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008714:	0f5b      	lsrs	r3, r3, #29
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	b2da      	uxtb	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008726:	0e9b      	lsrs	r3, r3, #26
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008738:	0d9b      	lsrs	r3, r3, #22
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	b2da      	uxtb	r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874a:	0d5b      	lsrs	r3, r3, #21
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008766:	0c1b      	lsrs	r3, r3, #16
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877a:	0bdb      	lsrs	r3, r3, #15
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	b2da      	uxtb	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878e:	0b9b      	lsrs	r3, r3, #14
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	b2da      	uxtb	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a2:	0b5b      	lsrs	r3, r3, #13
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b6:	0b1b      	lsrs	r3, r3, #12
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ca:	0a9b      	lsrs	r3, r3, #10
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0303 	and.w	r3, r3, #3
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	004005ff 	.word	0x004005ff

0800881c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008880:	f107 030c 	add.w	r3, r7, #12
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f970 	bl	8008b6c <SD_SendStatus>
 800888c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	0a5b      	lsrs	r3, r3, #9
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088aa:	693b      	ldr	r3, [r7, #16]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088b4:	b5b0      	push	{r4, r5, r7, lr}
 80088b6:	b094      	sub	sp, #80	@ 0x50
 80088b8:	af04      	add	r7, sp, #16
 80088ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80088bc:	2301      	movs	r3, #1
 80088be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fa48 	bl	8009d5a <SDIO_GetPowerState>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80088d4:	e0b8      	b.n	8008a48 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d02f      	beq.n	800893e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 fc2f 	bl	800a146 <SDMMC_CmdSendCID>
 80088e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80088f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f2:	e0a9      	b.n	8008a48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 fa72 	bl	8009de4 <SDIO_GetResponse>
 8008900:	4602      	mov	r2, r0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2104      	movs	r1, #4
 800890c:	4618      	mov	r0, r3
 800890e:	f001 fa69 	bl	8009de4 <SDIO_GetResponse>
 8008912:	4602      	mov	r2, r0
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2108      	movs	r1, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f001 fa60 	bl	8009de4 <SDIO_GetResponse>
 8008924:	4602      	mov	r2, r0
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	210c      	movs	r1, #12
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fa57 	bl	8009de4 <SDIO_GetResponse>
 8008936:	4602      	mov	r2, r0
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008942:	2b03      	cmp	r3, #3
 8008944:	d00d      	beq.n	8008962 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f107 020e 	add.w	r2, r7, #14
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fc35 	bl	800a1c0 <SDMMC_CmdSetRelAdd>
 8008956:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <SD_InitCard+0xae>
    {
      return errorstate;
 800895e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008960:	e072      	b.n	8008a48 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008966:	2b03      	cmp	r3, #3
 8008968:	d036      	beq.n	80089d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800896a:	89fb      	ldrh	r3, [r7, #14]
 800896c:	461a      	mov	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f001 fbff 	bl	800a182 <SDMMC_CmdSendCSD>
 8008984:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SD_InitCard+0xdc>
    {
      return errorstate;
 800898c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898e:	e05b      	b.n	8008a48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f001 fa24 	bl	8009de4 <SDIO_GetResponse>
 800899c:	4602      	mov	r2, r0
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2104      	movs	r1, #4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fa1b 	bl	8009de4 <SDIO_GetResponse>
 80089ae:	4602      	mov	r2, r0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2108      	movs	r1, #8
 80089ba:	4618      	mov	r0, r3
 80089bc:	f001 fa12 	bl	8009de4 <SDIO_GetResponse>
 80089c0:	4602      	mov	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	210c      	movs	r1, #12
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fa09 	bl	8009de4 <SDIO_GetResponse>
 80089d2:	4602      	mov	r2, r0
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2104      	movs	r1, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 fa00 	bl	8009de4 <SDIO_GetResponse>
 80089e4:	4603      	mov	r3, r0
 80089e6:	0d1a      	lsrs	r2, r3, #20
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80089ec:	f107 0310 	add.w	r3, r7, #16
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fd6e 	bl	80084d4 <HAL_SD_GetCardCSD>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a02:	e021      	b.n	8008a48 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6819      	ldr	r1, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	2200      	movs	r2, #0
 8008a10:	461c      	mov	r4, r3
 8008a12:	4615      	mov	r5, r2
 8008a14:	4622      	mov	r2, r4
 8008a16:	462b      	mov	r3, r5
 8008a18:	4608      	mov	r0, r1
 8008a1a:	f001 faef 	bl	8009ffc <SDMMC_CmdSelDesel>
 8008a1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <SD_InitCard+0x176>
  {
    return errorstate;
 8008a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a28:	e00e      	b.n	8008a48 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681d      	ldr	r5, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	466c      	mov	r4, sp
 8008a32:	f103 0210 	add.w	r2, r3, #16
 8008a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a40:	4628      	mov	r0, r5
 8008a42:	f001 f933 	bl	8009cac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3740      	adds	r7, #64	@ 0x40
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bdb0      	pop	{r4, r5, r7, pc}

08008a50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	2300      	movs	r3, #0
 8008a62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 faea 	bl	800a042 <SDMMC_CmdGoIdleState>
 8008a6e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	e072      	b.n	8008b60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 fafd 	bl	800a07e <SDMMC_CmdOperCond>
 8008a84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00d      	beq.n	8008aa8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 fad3 	bl	800a042 <SDMMC_CmdGoIdleState>
 8008a9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d004      	beq.n	8008aae <SD_PowerON+0x5e>
    {
      return errorstate;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	e05b      	b.n	8008b60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d137      	bne.n	8008b26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 fafd 	bl	800a0bc <SDMMC_CmdAppCommand>
 8008ac2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d02d      	beq.n	8008b26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008ace:	e047      	b.n	8008b60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 faf0 	bl	800a0bc <SDMMC_CmdAppCommand>
 8008adc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	e03b      	b.n	8008b60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	491e      	ldr	r1, [pc, #120]	@ (8008b68 <SD_PowerON+0x118>)
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 fb06 	bl	800a100 <SDMMC_CmdAppOperCommand>
 8008af4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008afc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b00:	e02e      	b.n	8008b60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2100      	movs	r1, #0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f96b 	bl	8009de4 <SDIO_GetResponse>
 8008b0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	0fdb      	lsrs	r3, r3, #31
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <SD_PowerON+0xcc>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <SD_PowerON+0xce>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	613b      	str	r3, [r7, #16]

    count++;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d802      	bhi.n	8008b36 <SD_PowerON+0xe6>
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0cc      	beq.n	8008ad0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d902      	bls.n	8008b46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b44:	e00c      	b.n	8008b60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	645a      	str	r2, [r3, #68]	@ 0x44
 8008b56:	e002      	b.n	8008b5e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	c1100000 	.word	0xc1100000

08008b6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b80:	e018      	b.n	8008bb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f001 fb37 	bl	800a202 <SDMMC_CmdSendStatus>
 8008b94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	e009      	b.n	8008bb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 f91c 	bl	8009de4 <SDIO_GetResponse>
 8008bac:	4602      	mov	r2, r0
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e03f      	b.n	8008c4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7fa fbae 	bl	8003344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2224      	movs	r2, #36	@ 0x24
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fddf 	bl	80097c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b08a      	sub	sp, #40	@ 0x28
 8008c5a:	af02      	add	r7, sp, #8
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	603b      	str	r3, [r7, #0]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d17c      	bne.n	8008d70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <HAL_UART_Transmit+0x2c>
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e075      	b.n	8008d72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Transmit+0x3e>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e06e      	b.n	8008d72 <HAL_UART_Transmit+0x11c>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2221      	movs	r2, #33	@ 0x21
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008caa:	f7fa fdbb 	bl	8003824 <HAL_GetTick>
 8008cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	88fa      	ldrh	r2, [r7, #6]
 8008cba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc4:	d108      	bne.n	8008cd8 <HAL_UART_Transmit+0x82>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d104      	bne.n	8008cd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e003      	b.n	8008ce0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008ce8:	e02a      	b.n	8008d40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2180      	movs	r1, #128	@ 0x80
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fb1f 	bl	8009338 <UART_WaitOnFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e036      	b.n	8008d72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10b      	bne.n	8008d22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	3302      	adds	r3, #2
 8008d1e:	61bb      	str	r3, [r7, #24]
 8008d20:	e007      	b.n	8008d32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	781a      	ldrb	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1cf      	bne.n	8008cea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	2140      	movs	r1, #64	@ 0x40
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 faef 	bl	8009338 <UART_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e006      	b.n	8008d72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e000      	b.n	8008d72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	d11d      	bne.n	8008dd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <HAL_UART_Receive_IT+0x26>
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e016      	b.n	8008dd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d101      	bne.n	8008db2 <HAL_UART_Receive_IT+0x38>
 8008dae:	2302      	movs	r3, #2
 8008db0:	e00f      	b.n	8008dd2 <HAL_UART_Receive_IT+0x58>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fb24 	bl	8009414 <UART_Start_Receive_IT>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	e000      	b.n	8008dd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008dd0:	2302      	movs	r3, #2
  }
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b0ba      	sub	sp, #232	@ 0xe8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10f      	bne.n	8008e42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <HAL_UART_IRQHandler+0x66>
 8008e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fc07 	bl	800964e <UART_Receive_IT>
      return;
 8008e40:	e256      	b.n	80092f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 80de 	beq.w	8009008 <HAL_UART_IRQHandler+0x22c>
 8008e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80d1 	beq.w	8009008 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00b      	beq.n	8008e8a <HAL_UART_IRQHandler+0xae>
 8008e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e82:	f043 0201 	orr.w	r2, r3, #1
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <HAL_UART_IRQHandler+0xd2>
 8008e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea6:	f043 0202 	orr.w	r2, r3, #2
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00b      	beq.n	8008ed2 <HAL_UART_IRQHandler+0xf6>
 8008eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	f043 0204 	orr.w	r2, r3, #4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d011      	beq.n	8008f02 <HAL_UART_IRQHandler+0x126>
 8008ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	f043 0208 	orr.w	r2, r3, #8
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 81ed 	beq.w	80092e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f10:	f003 0320 	and.w	r3, r3, #32
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <HAL_UART_IRQHandler+0x14e>
 8008f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fb92 	bl	800964e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f34:	2b40      	cmp	r3, #64	@ 0x40
 8008f36:	bf0c      	ite	eq
 8008f38:	2301      	moveq	r3, #1
 8008f3a:	2300      	movne	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d103      	bne.n	8008f56 <HAL_UART_IRQHandler+0x17a>
 8008f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d04f      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa9a 	bl	8009490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f66:	2b40      	cmp	r3, #64	@ 0x40
 8008f68:	d141      	bne.n	8008fee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3314      	adds	r3, #20
 8008f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1d9      	bne.n	8008f6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d013      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80091b8 <HAL_UART_IRQHandler+0x3dc>)
 8008fc4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fa fee2 	bl	8003d94 <HAL_DMA_Abort_IT>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d016      	beq.n	8009004 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe4:	e00e      	b.n	8009004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f990 	bl	800930c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fec:	e00a      	b.n	8009004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f98c 	bl	800930c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff4:	e006      	b.n	8009004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f988 	bl	800930c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009002:	e170      	b.n	80092e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009004:	bf00      	nop
    return;
 8009006:	e16e      	b.n	80092e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800900c:	2b01      	cmp	r3, #1
 800900e:	f040 814a 	bne.w	80092a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009016:	f003 0310 	and.w	r3, r3, #16
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8143 	beq.w	80092a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 813c 	beq.w	80092a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800902e:	2300      	movs	r3, #0
 8009030:	60bb      	str	r3, [r7, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	60bb      	str	r3, [r7, #8]
 8009042:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904e:	2b40      	cmp	r3, #64	@ 0x40
 8009050:	f040 80b4 	bne.w	80091bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009060:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 8140 	beq.w	80092ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800906e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009072:	429a      	cmp	r2, r3
 8009074:	f080 8139 	bcs.w	80092ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800907e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800908a:	f000 8088 	beq.w	800919e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	330c      	adds	r3, #12
 80090b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1d9      	bne.n	800908e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3314      	adds	r3, #20
 80090e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090ec:	f023 0301 	bic.w	r3, r3, #1
 80090f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3314      	adds	r3, #20
 80090fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009102:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009106:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e1      	bne.n	80090da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3314      	adds	r3, #20
 800911c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800912c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3314      	adds	r3, #20
 8009136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800913a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800913c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e3      	bne.n	8009116 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	330c      	adds	r3, #12
 8009162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800916c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800916e:	f023 0310 	bic.w	r3, r3, #16
 8009172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	330c      	adds	r3, #12
 800917c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009180:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009182:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800918e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e3      	bne.n	800915c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009198:	4618      	mov	r0, r3
 800919a:	f7fa fd8b 	bl	8003cb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8b6 	bl	8009320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091b4:	e099      	b.n	80092ea <HAL_UART_IRQHandler+0x50e>
 80091b6:	bf00      	nop
 80091b8:	08009557 	.word	0x08009557
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 808b 	beq.w	80092ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 8086 	beq.w	80092ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	330c      	adds	r3, #12
 80091e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009206:	647a      	str	r2, [r7, #68]	@ 0x44
 8009208:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800920c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e3      	bne.n	80091e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3314      	adds	r3, #20
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	623b      	str	r3, [r7, #32]
   return(result);
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	f023 0301 	bic.w	r3, r3, #1
 8009230:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3314      	adds	r3, #20
 800923a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800923e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800924c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e3      	bne.n	800921a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	330c      	adds	r3, #12
 8009266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0310 	bic.w	r3, r3, #16
 8009276:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	330c      	adds	r3, #12
 8009280:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009284:	61fa      	str	r2, [r7, #28]
 8009286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	69b9      	ldr	r1, [r7, #24]
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	617b      	str	r3, [r7, #20]
   return(result);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e3      	bne.n	8009260 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f83e 	bl	8009320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092a4:	e023      	b.n	80092ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d009      	beq.n	80092c6 <HAL_UART_IRQHandler+0x4ea>
 80092b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f95d 	bl	800957e <UART_Transmit_IT>
    return;
 80092c4:	e014      	b.n	80092f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00e      	beq.n	80092f0 <HAL_UART_IRQHandler+0x514>
 80092d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f99d 	bl	800961e <UART_EndTransmit_IT>
    return;
 80092e4:	e004      	b.n	80092f0 <HAL_UART_IRQHandler+0x514>
    return;
 80092e6:	bf00      	nop
 80092e8:	e002      	b.n	80092f0 <HAL_UART_IRQHandler+0x514>
      return;
 80092ea:	bf00      	nop
 80092ec:	e000      	b.n	80092f0 <HAL_UART_IRQHandler+0x514>
      return;
 80092ee:	bf00      	nop
  }
}
 80092f0:	37e8      	adds	r7, #232	@ 0xe8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop

080092f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b090      	sub	sp, #64	@ 0x40
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	4613      	mov	r3, r2
 8009346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009348:	e050      	b.n	80093ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800934a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800934c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009350:	d04c      	beq.n	80093ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <UART_WaitOnFlagUntilTimeout+0x30>
 8009358:	f7fa fa64 	bl	8003824 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009364:	429a      	cmp	r2, r3
 8009366:	d241      	bcs.n	80093ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	330c      	adds	r3, #12
 800936e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	330c      	adds	r3, #12
 8009386:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009388:	637a      	str	r2, [r7, #52]	@ 0x34
 800938a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800938e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e5      	bne.n	8009368 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3314      	adds	r3, #20
 80093a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	613b      	str	r3, [r7, #16]
   return(result);
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3314      	adds	r3, #20
 80093ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093bc:	623a      	str	r2, [r7, #32]
 80093be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	69f9      	ldr	r1, [r7, #28]
 80093c2:	6a3a      	ldr	r2, [r7, #32]
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e5      	bne.n	800939c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e00f      	b.n	800940c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	4013      	ands	r3, r2
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	bf0c      	ite	eq
 80093fc:	2301      	moveq	r3, #1
 80093fe:	2300      	movne	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	461a      	mov	r2, r3
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	429a      	cmp	r2, r3
 8009408:	d09f      	beq.n	800934a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3740      	adds	r7, #64	@ 0x40
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	88fa      	ldrh	r2, [r7, #6]
 800942c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	88fa      	ldrh	r2, [r7, #6]
 8009432:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2222      	movs	r2, #34	@ 0x22
 800943e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d007      	beq.n	8009462 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009460:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	695a      	ldr	r2, [r3, #20]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 0201 	orr.w	r2, r2, #1
 8009470:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f042 0220 	orr.w	r2, r2, #32
 8009480:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b095      	sub	sp, #84	@ 0x54
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a2:	e853 3f00 	ldrex	r3, [r3]
 80094a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	330c      	adds	r3, #12
 80094b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80094ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e5      	bne.n	8009498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3314      	adds	r3, #20
 80094d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	61fb      	str	r3, [r7, #28]
   return(result);
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f023 0301 	bic.w	r3, r3, #1
 80094e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3314      	adds	r3, #20
 80094ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e5      	bne.n	80094cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009504:	2b01      	cmp	r3, #1
 8009506:	d119      	bne.n	800953c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	330c      	adds	r3, #12
 800950e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	e853 3f00 	ldrex	r3, [r3]
 8009516:	60bb      	str	r3, [r7, #8]
   return(result);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f023 0310 	bic.w	r3, r3, #16
 800951e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	330c      	adds	r3, #12
 8009526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009528:	61ba      	str	r2, [r7, #24]
 800952a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952c:	6979      	ldr	r1, [r7, #20]
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	e841 2300 	strex	r3, r2, [r1]
 8009534:	613b      	str	r3, [r7, #16]
   return(result);
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e5      	bne.n	8009508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2220      	movs	r2, #32
 8009540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800954a:	bf00      	nop
 800954c:	3754      	adds	r7, #84	@ 0x54
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fecb 	bl	800930c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b21      	cmp	r3, #33	@ 0x21
 8009590:	d13e      	bne.n	8009610 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800959a:	d114      	bne.n	80095c6 <UART_Transmit_IT+0x48>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d110      	bne.n	80095c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	1c9a      	adds	r2, r3, #2
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	621a      	str	r2, [r3, #32]
 80095c4:	e008      	b.n	80095d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	1c59      	adds	r1, r3, #1
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6211      	str	r1, [r2, #32]
 80095d0:	781a      	ldrb	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	4619      	mov	r1, r3
 80095e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10f      	bne.n	800960c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80095fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800960a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e000      	b.n	8009612 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009610:	2302      	movs	r3, #2
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff fe5a 	bl	80092f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b08c      	sub	sp, #48	@ 0x30
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b22      	cmp	r3, #34	@ 0x22
 8009660:	f040 80ab 	bne.w	80097ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800966c:	d117      	bne.n	800969e <UART_Receive_IT+0x50>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d113      	bne.n	800969e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	b29b      	uxth	r3, r3
 8009688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968c:	b29a      	uxth	r2, r3
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009696:	1c9a      	adds	r2, r3, #2
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	629a      	str	r2, [r3, #40]	@ 0x28
 800969c:	e026      	b.n	80096ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b0:	d007      	beq.n	80096c2 <UART_Receive_IT+0x74>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <UART_Receive_IT+0x82>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	e008      	b.n	80096e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	4619      	mov	r1, r3
 80096fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d15a      	bne.n	80097b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f022 0220 	bic.w	r2, r2, #32
 800970e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68da      	ldr	r2, [r3, #12]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800971e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695a      	ldr	r2, [r3, #20]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0201 	bic.w	r2, r2, #1
 800972e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973c:	2b01      	cmp	r3, #1
 800973e:	d135      	bne.n	80097ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	330c      	adds	r3, #12
 800974c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	613b      	str	r3, [r7, #16]
   return(result);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f023 0310 	bic.w	r3, r3, #16
 800975c:	627b      	str	r3, [r7, #36]	@ 0x24
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	330c      	adds	r3, #12
 8009764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009766:	623a      	str	r2, [r7, #32]
 8009768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	69f9      	ldr	r1, [r7, #28]
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	61bb      	str	r3, [r7, #24]
   return(result);
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e5      	bne.n	8009746 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b10      	cmp	r3, #16
 8009786:	d10a      	bne.n	800979e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff fdbb 	bl	8009320 <HAL_UARTEx_RxEventCallback>
 80097aa:	e002      	b.n	80097b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7f9 f811 	bl	80027d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e002      	b.n	80097bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e000      	b.n	80097bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80097ba:	2302      	movs	r3, #2
  }
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3730      	adds	r7, #48	@ 0x30
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097c8:	b0c0      	sub	sp, #256	@ 0x100
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80097dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e0:	68d9      	ldr	r1, [r3, #12]
 80097e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	ea40 0301 	orr.w	r3, r0, r1
 80097ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	431a      	orrs	r2, r3
 8009804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800981c:	f021 010c 	bic.w	r1, r1, #12
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800982a:	430b      	orrs	r3, r1
 800982c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800983e:	6999      	ldr	r1, [r3, #24]
 8009840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	ea40 0301 	orr.w	r3, r0, r1
 800984a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800984c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b8f      	ldr	r3, [pc, #572]	@ (8009a90 <UART_SetConfig+0x2cc>)
 8009854:	429a      	cmp	r2, r3
 8009856:	d005      	beq.n	8009864 <UART_SetConfig+0xa0>
 8009858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b8d      	ldr	r3, [pc, #564]	@ (8009a94 <UART_SetConfig+0x2d0>)
 8009860:	429a      	cmp	r2, r3
 8009862:	d104      	bne.n	800986e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009864:	f7fe f8ce 	bl	8007a04 <HAL_RCC_GetPCLK2Freq>
 8009868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800986c:	e003      	b.n	8009876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800986e:	f7fe f8b5 	bl	80079dc <HAL_RCC_GetPCLK1Freq>
 8009872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009880:	f040 810c 	bne.w	8009a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800988e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009896:	4622      	mov	r2, r4
 8009898:	462b      	mov	r3, r5
 800989a:	1891      	adds	r1, r2, r2
 800989c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800989e:	415b      	adcs	r3, r3
 80098a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098a6:	4621      	mov	r1, r4
 80098a8:	eb12 0801 	adds.w	r8, r2, r1
 80098ac:	4629      	mov	r1, r5
 80098ae:	eb43 0901 	adc.w	r9, r3, r1
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098c6:	4690      	mov	r8, r2
 80098c8:	4699      	mov	r9, r3
 80098ca:	4623      	mov	r3, r4
 80098cc:	eb18 0303 	adds.w	r3, r8, r3
 80098d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098d4:	462b      	mov	r3, r5
 80098d6:	eb49 0303 	adc.w	r3, r9, r3
 80098da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80098ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80098f2:	460b      	mov	r3, r1
 80098f4:	18db      	adds	r3, r3, r3
 80098f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098f8:	4613      	mov	r3, r2
 80098fa:	eb42 0303 	adc.w	r3, r2, r3
 80098fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009908:	f7f6 fcba 	bl	8000280 <__aeabi_uldivmod>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4b61      	ldr	r3, [pc, #388]	@ (8009a98 <UART_SetConfig+0x2d4>)
 8009912:	fba3 2302 	umull	r2, r3, r3, r2
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	011c      	lsls	r4, r3, #4
 800991a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	1891      	adds	r1, r2, r2
 8009932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009934:	415b      	adcs	r3, r3
 8009936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800993c:	4641      	mov	r1, r8
 800993e:	eb12 0a01 	adds.w	sl, r2, r1
 8009942:	4649      	mov	r1, r9
 8009944:	eb43 0b01 	adc.w	fp, r3, r1
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800995c:	4692      	mov	sl, r2
 800995e:	469b      	mov	fp, r3
 8009960:	4643      	mov	r3, r8
 8009962:	eb1a 0303 	adds.w	r3, sl, r3
 8009966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800996a:	464b      	mov	r3, r9
 800996c:	eb4b 0303 	adc.w	r3, fp, r3
 8009970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009988:	460b      	mov	r3, r1
 800998a:	18db      	adds	r3, r3, r3
 800998c:	643b      	str	r3, [r7, #64]	@ 0x40
 800998e:	4613      	mov	r3, r2
 8009990:	eb42 0303 	adc.w	r3, r2, r3
 8009994:	647b      	str	r3, [r7, #68]	@ 0x44
 8009996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800999a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800999e:	f7f6 fc6f 	bl	8000280 <__aeabi_uldivmod>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	4b3b      	ldr	r3, [pc, #236]	@ (8009a98 <UART_SetConfig+0x2d4>)
 80099aa:	fba3 2301 	umull	r2, r3, r3, r1
 80099ae:	095b      	lsrs	r3, r3, #5
 80099b0:	2264      	movs	r2, #100	@ 0x64
 80099b2:	fb02 f303 	mul.w	r3, r2, r3
 80099b6:	1acb      	subs	r3, r1, r3
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80099be:	4b36      	ldr	r3, [pc, #216]	@ (8009a98 <UART_SetConfig+0x2d4>)
 80099c0:	fba3 2302 	umull	r2, r3, r3, r2
 80099c4:	095b      	lsrs	r3, r3, #5
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80099cc:	441c      	add	r4, r3
 80099ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80099dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80099e0:	4642      	mov	r2, r8
 80099e2:	464b      	mov	r3, r9
 80099e4:	1891      	adds	r1, r2, r2
 80099e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80099e8:	415b      	adcs	r3, r3
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80099f0:	4641      	mov	r1, r8
 80099f2:	1851      	adds	r1, r2, r1
 80099f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80099f6:	4649      	mov	r1, r9
 80099f8:	414b      	adcs	r3, r1
 80099fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	f04f 0300 	mov.w	r3, #0
 8009a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009a08:	4659      	mov	r1, fp
 8009a0a:	00cb      	lsls	r3, r1, #3
 8009a0c:	4651      	mov	r1, sl
 8009a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a12:	4651      	mov	r1, sl
 8009a14:	00ca      	lsls	r2, r1, #3
 8009a16:	4610      	mov	r0, r2
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	4642      	mov	r2, r8
 8009a1e:	189b      	adds	r3, r3, r2
 8009a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a24:	464b      	mov	r3, r9
 8009a26:	460a      	mov	r2, r1
 8009a28:	eb42 0303 	adc.w	r3, r2, r3
 8009a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a44:	460b      	mov	r3, r1
 8009a46:	18db      	adds	r3, r3, r3
 8009a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	eb42 0303 	adc.w	r3, r2, r3
 8009a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009a5a:	f7f6 fc11 	bl	8000280 <__aeabi_uldivmod>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4b0d      	ldr	r3, [pc, #52]	@ (8009a98 <UART_SetConfig+0x2d4>)
 8009a64:	fba3 1302 	umull	r1, r3, r3, r2
 8009a68:	095b      	lsrs	r3, r3, #5
 8009a6a:	2164      	movs	r1, #100	@ 0x64
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	3332      	adds	r3, #50	@ 0x32
 8009a76:	4a08      	ldr	r2, [pc, #32]	@ (8009a98 <UART_SetConfig+0x2d4>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	095b      	lsrs	r3, r3, #5
 8009a7e:	f003 0207 	and.w	r2, r3, #7
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4422      	add	r2, r4
 8009a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a8c:	e106      	b.n	8009c9c <UART_SetConfig+0x4d8>
 8009a8e:	bf00      	nop
 8009a90:	40011000 	.word	0x40011000
 8009a94:	40011400 	.word	0x40011400
 8009a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009aae:	4642      	mov	r2, r8
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	1891      	adds	r1, r2, r2
 8009ab4:	6239      	str	r1, [r7, #32]
 8009ab6:	415b      	adcs	r3, r3
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009abe:	4641      	mov	r1, r8
 8009ac0:	1854      	adds	r4, r2, r1
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	eb43 0501 	adc.w	r5, r3, r1
 8009ac8:	f04f 0200 	mov.w	r2, #0
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	00eb      	lsls	r3, r5, #3
 8009ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ad6:	00e2      	lsls	r2, r4, #3
 8009ad8:	4614      	mov	r4, r2
 8009ada:	461d      	mov	r5, r3
 8009adc:	4643      	mov	r3, r8
 8009ade:	18e3      	adds	r3, r4, r3
 8009ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	eb45 0303 	adc.w	r3, r5, r3
 8009aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	f04f 0300 	mov.w	r3, #0
 8009b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	008b      	lsls	r3, r1, #2
 8009b0e:	4621      	mov	r1, r4
 8009b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b14:	4621      	mov	r1, r4
 8009b16:	008a      	lsls	r2, r1, #2
 8009b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009b1c:	f7f6 fbb0 	bl	8000280 <__aeabi_uldivmod>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4b60      	ldr	r3, [pc, #384]	@ (8009ca8 <UART_SetConfig+0x4e4>)
 8009b26:	fba3 2302 	umull	r2, r3, r3, r2
 8009b2a:	095b      	lsrs	r3, r3, #5
 8009b2c:	011c      	lsls	r4, r3, #4
 8009b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009b40:	4642      	mov	r2, r8
 8009b42:	464b      	mov	r3, r9
 8009b44:	1891      	adds	r1, r2, r2
 8009b46:	61b9      	str	r1, [r7, #24]
 8009b48:	415b      	adcs	r3, r3
 8009b4a:	61fb      	str	r3, [r7, #28]
 8009b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b50:	4641      	mov	r1, r8
 8009b52:	1851      	adds	r1, r2, r1
 8009b54:	6139      	str	r1, [r7, #16]
 8009b56:	4649      	mov	r1, r9
 8009b58:	414b      	adcs	r3, r1
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b68:	4659      	mov	r1, fp
 8009b6a:	00cb      	lsls	r3, r1, #3
 8009b6c:	4651      	mov	r1, sl
 8009b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b72:	4651      	mov	r1, sl
 8009b74:	00ca      	lsls	r2, r1, #3
 8009b76:	4610      	mov	r0, r2
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	189b      	adds	r3, r3, r2
 8009b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b84:	464b      	mov	r3, r9
 8009b86:	460a      	mov	r2, r1
 8009b88:	eb42 0303 	adc.w	r3, r2, r3
 8009b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	f04f 0300 	mov.w	r3, #0
 8009ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ba8:	4649      	mov	r1, r9
 8009baa:	008b      	lsls	r3, r1, #2
 8009bac:	4641      	mov	r1, r8
 8009bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	008a      	lsls	r2, r1, #2
 8009bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009bba:	f7f6 fb61 	bl	8000280 <__aeabi_uldivmod>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	4b38      	ldr	r3, [pc, #224]	@ (8009ca8 <UART_SetConfig+0x4e4>)
 8009bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8009bca:	095b      	lsrs	r3, r3, #5
 8009bcc:	2264      	movs	r2, #100	@ 0x64
 8009bce:	fb02 f303 	mul.w	r3, r2, r3
 8009bd2:	1acb      	subs	r3, r1, r3
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	3332      	adds	r3, #50	@ 0x32
 8009bd8:	4a33      	ldr	r2, [pc, #204]	@ (8009ca8 <UART_SetConfig+0x4e4>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	095b      	lsrs	r3, r3, #5
 8009be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009be4:	441c      	add	r4, r3
 8009be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bea:	2200      	movs	r2, #0
 8009bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8009bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	1891      	adds	r1, r2, r2
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	415b      	adcs	r3, r3
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c04:	4641      	mov	r1, r8
 8009c06:	1851      	adds	r1, r2, r1
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	414b      	adcs	r3, r1
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	f04f 0200 	mov.w	r2, #0
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c1c:	4659      	mov	r1, fp
 8009c1e:	00cb      	lsls	r3, r1, #3
 8009c20:	4651      	mov	r1, sl
 8009c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c26:	4651      	mov	r1, sl
 8009c28:	00ca      	lsls	r2, r1, #3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4642      	mov	r2, r8
 8009c32:	189b      	adds	r3, r3, r2
 8009c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c36:	464b      	mov	r3, r9
 8009c38:	460a      	mov	r2, r1
 8009c3a:	eb42 0303 	adc.w	r3, r2, r3
 8009c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009c4c:	f04f 0200 	mov.w	r2, #0
 8009c50:	f04f 0300 	mov.w	r3, #0
 8009c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009c58:	4649      	mov	r1, r9
 8009c5a:	008b      	lsls	r3, r1, #2
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c62:	4641      	mov	r1, r8
 8009c64:	008a      	lsls	r2, r1, #2
 8009c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c6a:	f7f6 fb09 	bl	8000280 <__aeabi_uldivmod>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca8 <UART_SetConfig+0x4e4>)
 8009c74:	fba3 1302 	umull	r1, r3, r3, r2
 8009c78:	095b      	lsrs	r3, r3, #5
 8009c7a:	2164      	movs	r1, #100	@ 0x64
 8009c7c:	fb01 f303 	mul.w	r3, r1, r3
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	3332      	adds	r3, #50	@ 0x32
 8009c86:	4a08      	ldr	r2, [pc, #32]	@ (8009ca8 <UART_SetConfig+0x4e4>)
 8009c88:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8c:	095b      	lsrs	r3, r3, #5
 8009c8e:	f003 020f 	and.w	r2, r3, #15
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4422      	add	r2, r4
 8009c9a:	609a      	str	r2, [r3, #8]
}
 8009c9c:	bf00      	nop
 8009c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ca8:	51eb851f 	.word	0x51eb851f

08009cac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009cac:	b084      	sub	sp, #16
 8009cae:	b480      	push	{r7}
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	f107 001c 	add.w	r0, r7, #28
 8009cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009cc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009cc6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009cca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009cce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009cd2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009cd6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009ce6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	431a      	orrs	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	b004      	add	sp, #16
 8009d00:	4770      	bx	lr

08009d02 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2203      	movs	r2, #3
 8009d4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0303 	and.w	r3, r3, #3
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d94:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d9a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009da0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009db0:	f023 030f 	bic.w	r3, r3, #15
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	b2db      	uxtb	r3, r3
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3314      	adds	r3, #20
 8009df2:	461a      	mov	r2, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	4413      	add	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
}  
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e30:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009e36:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009e3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009e54:	2300      	movs	r3, #0

}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b088      	sub	sp, #32
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e70:	2310      	movs	r3, #16
 8009e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e74:	2340      	movs	r3, #64	@ 0x40
 8009e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e82:	f107 0308 	add.w	r3, r7, #8
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ff74 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e92:	2110      	movs	r1, #16
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f9d7 	bl	800a248 <SDMMC_GetCmdResp1>
 8009e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b088      	sub	sp, #32
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009eb4:	2311      	movs	r3, #17
 8009eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eb8:	2340      	movs	r3, #64	@ 0x40
 8009eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ec4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ec6:	f107 0308 	add.w	r3, r7, #8
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff ff52 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ed6:	2111      	movs	r1, #17
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f9b5 	bl	800a248 <SDMMC_GetCmdResp1>
 8009ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b088      	sub	sp, #32
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ef8:	2312      	movs	r3, #18
 8009efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009efc:	2340      	movs	r3, #64	@ 0x40
 8009efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f0a:	f107 0308 	add.w	r3, r7, #8
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ff30 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f1a:	2112      	movs	r1, #18
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f993 	bl	800a248 <SDMMC_GetCmdResp1>
 8009f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f24:	69fb      	ldr	r3, [r7, #28]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b088      	sub	sp, #32
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f3c:	2318      	movs	r3, #24
 8009f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f40:	2340      	movs	r3, #64	@ 0x40
 8009f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f4e:	f107 0308 	add.w	r3, r7, #8
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ff0e 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f5e:	2118      	movs	r1, #24
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f971 	bl	800a248 <SDMMC_GetCmdResp1>
 8009f66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f68:	69fb      	ldr	r3, [r7, #28]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3720      	adds	r7, #32
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b088      	sub	sp, #32
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f80:	2319      	movs	r3, #25
 8009f82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f84:	2340      	movs	r3, #64	@ 0x40
 8009f86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff feec 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fa2:	2119      	movs	r1, #25
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f94f 	bl	800a248 <SDMMC_GetCmdResp1>
 8009faa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fac:	69fb      	ldr	r3, [r7, #28]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3720      	adds	r7, #32
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
	...

08009fb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fc8:	2340      	movs	r3, #64	@ 0x40
 8009fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff feca 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009fe2:	4a05      	ldr	r2, [pc, #20]	@ (8009ff8 <SDMMC_CmdStopTransfer+0x40>)
 8009fe4:	210c      	movs	r1, #12
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f92e 	bl	800a248 <SDMMC_GetCmdResp1>
 8009fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fee:	69fb      	ldr	r3, [r7, #28]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3720      	adds	r7, #32
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	05f5e100 	.word	0x05f5e100

08009ffc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08a      	sub	sp, #40	@ 0x28
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a00c:	2307      	movs	r3, #7
 800a00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a010:	2340      	movs	r3, #64	@ 0x40
 800a012:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a01c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a01e:	f107 0310 	add.w	r3, r7, #16
 800a022:	4619      	mov	r1, r3
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fea6 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a02a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a02e:	2107      	movs	r1, #7
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 f909 	bl	800a248 <SDMMC_GetCmdResp1>
 800a036:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3728      	adds	r7, #40	@ 0x28
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b088      	sub	sp, #32
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a052:	2300      	movs	r3, #0
 800a054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a056:	2300      	movs	r3, #0
 800a058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a05a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a05e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff fe85 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fb23 	bl	800a6b8 <SDMMC_GetCmdError>
 800a072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a074:	69fb      	ldr	r3, [r7, #28]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b088      	sub	sp, #32
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a086:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a08c:	2308      	movs	r3, #8
 800a08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a090:	2340      	movs	r3, #64	@ 0x40
 800a092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a09c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff fe66 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fab6 	bl	800a61c <SDMMC_GetCmdResp7>
 800a0b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3720      	adds	r7, #32
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a0ca:	2337      	movs	r3, #55	@ 0x37
 800a0cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ce:	2340      	movs	r3, #64	@ 0x40
 800a0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0dc:	f107 0308 	add.w	r3, r7, #8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff fe47 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a0e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ec:	2137      	movs	r1, #55	@ 0x37
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f8aa 	bl	800a248 <SDMMC_GetCmdResp1>
 800a0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f6:	69fb      	ldr	r3, [r7, #28]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a116:	2329      	movs	r3, #41	@ 0x29
 800a118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a11a:	2340      	movs	r3, #64	@ 0x40
 800a11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a128:	f107 0308 	add.w	r3, r7, #8
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff fe21 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f9bd 	bl	800a4b4 <SDMMC_GetCmdResp3>
 800a13a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a13c:	69fb      	ldr	r3, [r7, #28]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3720      	adds	r7, #32
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b088      	sub	sp, #32
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a152:	2302      	movs	r3, #2
 800a154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a156:	23c0      	movs	r3, #192	@ 0xc0
 800a158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a15e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a164:	f107 0308 	add.w	r3, r7, #8
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fe03 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f957 	bl	800a424 <SDMMC_GetCmdResp2>
 800a176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a178:	69fb      	ldr	r3, [r7, #28]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3720      	adds	r7, #32
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b088      	sub	sp, #32
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a190:	2309      	movs	r3, #9
 800a192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a194:	23c0      	movs	r3, #192	@ 0xc0
 800a196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a19c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff fde4 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f938 	bl	800a424 <SDMMC_GetCmdResp2>
 800a1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1d2:	2340      	movs	r3, #64	@ 0x40
 800a1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff fdc5 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	2103      	movs	r1, #3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f99d 	bl	800a530 <SDMMC_GetCmdResp6>
 800a1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b088      	sub	sp, #32
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a210:	230d      	movs	r3, #13
 800a212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a214:	2340      	movs	r3, #64	@ 0x40
 800a216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a218:	2300      	movs	r3, #0
 800a21a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a21c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fda4 	bl	8009d76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a22e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a232:	210d      	movs	r1, #13
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f807 	bl	800a248 <SDMMC_GetCmdResp1>
 800a23a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a23c:	69fb      	ldr	r3, [r7, #28]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	460b      	mov	r3, r1
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a256:	4b70      	ldr	r3, [pc, #448]	@ (800a418 <SDMMC_GetCmdResp1+0x1d0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a70      	ldr	r2, [pc, #448]	@ (800a41c <SDMMC_GetCmdResp1+0x1d4>)
 800a25c:	fba2 2303 	umull	r2, r3, r2, r3
 800a260:	0a5a      	lsrs	r2, r3, #9
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	fb02 f303 	mul.w	r3, r2, r3
 800a268:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	1e5a      	subs	r2, r3, #1
 800a26e:	61fa      	str	r2, [r7, #28]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a274:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a278:	e0c9      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a27e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0ef      	beq.n	800a26a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1ea      	bne.n	800a26a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d004      	beq.n	800a2aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2a6:	2304      	movs	r3, #4
 800a2a8:	e0b1      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d004      	beq.n	800a2c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e0a6      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	22c5      	movs	r2, #197	@ 0xc5
 800a2c4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fd7f 	bl	8009dca <SDIO_GetCommandResponse>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	7afb      	ldrb	r3, [r7, #11]
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d001      	beq.n	800a2da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e099      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a2da:	2100      	movs	r1, #0
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff fd81 	bl	8009de4 <SDIO_GetResponse>
 800a2e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4b4e      	ldr	r3, [pc, #312]	@ (800a420 <SDMMC_GetCmdResp1+0x1d8>)
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e08d      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da02      	bge.n	800a2fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2fc:	e087      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a308:	2340      	movs	r3, #64	@ 0x40
 800a30a:	e080      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a316:	2380      	movs	r3, #128	@ 0x80
 800a318:	e079      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a328:	e071      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a338:	e069      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a348:	e061      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a358:	e059      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a368:	e051      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a378:	e049      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a384:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a388:	e041      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a394:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a398:	e039      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a3a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a3a8:	e031      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a3b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a3b8:	e029      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a3c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a3c8:	e021      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3d8:	e019      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a3e8:	e011      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a3f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a3f8:	e009      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f003 0308 	and.w	r3, r3, #8
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a404:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a408:	e001      	b.n	800a40e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a40a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3720      	adds	r7, #32
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000020 	.word	0x20000020
 800a41c:	10624dd3 	.word	0x10624dd3
 800a420:	fdffe008 	.word	0xfdffe008

0800a424 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a42c:	4b1f      	ldr	r3, [pc, #124]	@ (800a4ac <SDMMC_GetCmdResp2+0x88>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a1f      	ldr	r2, [pc, #124]	@ (800a4b0 <SDMMC_GetCmdResp2+0x8c>)
 800a432:	fba2 2303 	umull	r2, r3, r2, r3
 800a436:	0a5b      	lsrs	r3, r3, #9
 800a438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a43c:	fb02 f303 	mul.w	r3, r2, r3
 800a440:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	1e5a      	subs	r2, r3, #1
 800a446:	60fa      	str	r2, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a44c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a450:	e026      	b.n	800a4a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a456:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0ef      	beq.n	800a442 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1ea      	bne.n	800a442 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2204      	movs	r2, #4
 800a47c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a47e:	2304      	movs	r3, #4
 800a480:	e00e      	b.n	800a4a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d004      	beq.n	800a498 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a494:	2301      	movs	r3, #1
 800a496:	e003      	b.n	800a4a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	22c5      	movs	r2, #197	@ 0xc5
 800a49c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	20000020 	.word	0x20000020
 800a4b0:	10624dd3 	.word	0x10624dd3

0800a4b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4bc:	4b1a      	ldr	r3, [pc, #104]	@ (800a528 <SDMMC_GetCmdResp3+0x74>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a52c <SDMMC_GetCmdResp3+0x78>)
 800a4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c6:	0a5b      	lsrs	r3, r3, #9
 800a4c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4cc:	fb02 f303 	mul.w	r3, r2, r3
 800a4d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	1e5a      	subs	r2, r3, #1
 800a4d6:	60fa      	str	r2, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4e0:	e01b      	b.n	800a51a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0ef      	beq.n	800a4d2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1ea      	bne.n	800a4d2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a500:	f003 0304 	and.w	r3, r3, #4
 800a504:	2b00      	cmp	r3, #0
 800a506:	d004      	beq.n	800a512 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2204      	movs	r2, #4
 800a50c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a50e:	2304      	movs	r3, #4
 800a510:	e003      	b.n	800a51a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	22c5      	movs	r2, #197	@ 0xc5
 800a516:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	20000020 	.word	0x20000020
 800a52c:	10624dd3 	.word	0x10624dd3

0800a530 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	460b      	mov	r3, r1
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a53e:	4b35      	ldr	r3, [pc, #212]	@ (800a614 <SDMMC_GetCmdResp6+0xe4>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a35      	ldr	r2, [pc, #212]	@ (800a618 <SDMMC_GetCmdResp6+0xe8>)
 800a544:	fba2 2303 	umull	r2, r3, r2, r3
 800a548:	0a5b      	lsrs	r3, r3, #9
 800a54a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a54e:	fb02 f303 	mul.w	r3, r2, r3
 800a552:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	1e5a      	subs	r2, r3, #1
 800a558:	61fa      	str	r2, [r7, #28]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a55e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a562:	e052      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a568:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0ef      	beq.n	800a554 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1ea      	bne.n	800a554 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2204      	movs	r2, #4
 800a58e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a590:	2304      	movs	r3, #4
 800a592:	e03a      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d004      	beq.n	800a5aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e02f      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7ff fc0d 	bl	8009dca <SDIO_GetCommandResponse>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d001      	beq.n	800a5be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e025      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22c5      	movs	r2, #197	@ 0xc5
 800a5c2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fc0c 	bl	8009de4 <SDIO_GetResponse>
 800a5cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d106      	bne.n	800a5e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	0c1b      	lsrs	r3, r3, #16
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e011      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5f4:	e009      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a604:	e001      	b.n	800a60a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a606:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000020 	.word	0x20000020
 800a618:	10624dd3 	.word	0x10624dd3

0800a61c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a624:	4b22      	ldr	r3, [pc, #136]	@ (800a6b0 <SDMMC_GetCmdResp7+0x94>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a22      	ldr	r2, [pc, #136]	@ (800a6b4 <SDMMC_GetCmdResp7+0x98>)
 800a62a:	fba2 2303 	umull	r2, r3, r2, r3
 800a62e:	0a5b      	lsrs	r3, r3, #9
 800a630:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a634:	fb02 f303 	mul.w	r3, r2, r3
 800a638:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	1e5a      	subs	r2, r3, #1
 800a63e:	60fa      	str	r2, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a644:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a648:	e02c      	b.n	800a6a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0ef      	beq.n	800a63a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1ea      	bne.n	800a63a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2204      	movs	r2, #4
 800a674:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a676:	2304      	movs	r3, #4
 800a678:	e014      	b.n	800a6a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d004      	beq.n	800a690 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e009      	b.n	800a6a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2240      	movs	r2, #64	@ 0x40
 800a6a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6a2:	2300      	movs	r3, #0
  
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20000020 	.word	0x20000020
 800a6b4:	10624dd3 	.word	0x10624dd3

0800a6b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6c0:	4b11      	ldr	r3, [pc, #68]	@ (800a708 <SDMMC_GetCmdError+0x50>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a11      	ldr	r2, [pc, #68]	@ (800a70c <SDMMC_GetCmdError+0x54>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	0a5b      	lsrs	r3, r3, #9
 800a6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6d0:	fb02 f303 	mul.w	r3, r2, r3
 800a6d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	60fa      	str	r2, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6e4:	e009      	b.n	800a6fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0f1      	beq.n	800a6d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	22c5      	movs	r2, #197	@ 0xc5
 800a6f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	20000020 	.word	0x20000020
 800a70c:	10624dd3 	.word	0x10624dd3

0800a710 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a714:	4904      	ldr	r1, [pc, #16]	@ (800a728 <MX_FATFS_Init+0x18>)
 800a716:	4805      	ldr	r0, [pc, #20]	@ (800a72c <MX_FATFS_Init+0x1c>)
 800a718:	f003 f81e 	bl	800d758 <FATFS_LinkDriver>
 800a71c:	4603      	mov	r3, r0
 800a71e:	461a      	mov	r2, r3
 800a720:	4b03      	ldr	r3, [pc, #12]	@ (800a730 <MX_FATFS_Init+0x20>)
 800a722:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a724:	bf00      	nop
 800a726:	bd80      	pop	{r7, pc}
 800a728:	2000567c 	.word	0x2000567c
 800a72c:	08010314 	.word	0x08010314
 800a730:	20005678 	.word	0x20005678

0800a734 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a738:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a74e:	f000 f86b 	bl	800a828 <BSP_SD_IsDetected>
 800a752:	4603      	mov	r3, r0
 800a754:	2b01      	cmp	r3, #1
 800a756:	d001      	beq.n	800a75c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e005      	b.n	800a768 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a75c:	4804      	ldr	r0, [pc, #16]	@ (800a770 <BSP_SD_Init+0x2c>)
 800a75e:	f7fd faa5 	bl	8007cac <HAL_SD_Init>
 800a762:	4603      	mov	r3, r0
 800a764:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a766:	79fb      	ldrb	r3, [r7, #7]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	200002ac 	.word	0x200002ac

0800a774 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	4806      	ldr	r0, [pc, #24]	@ (800a7ac <BSP_SD_ReadBlocks+0x38>)
 800a792:	f7fd fb3b 	bl	8007e0c <HAL_SD_ReadBlocks>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200002ac 	.word	0x200002ac

0800a7b0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af02      	add	r7, sp, #8
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	4806      	ldr	r0, [pc, #24]	@ (800a7e8 <BSP_SD_WriteBlocks+0x38>)
 800a7ce:	f7fd fcfb 	bl	80081c8 <HAL_SD_WriteBlocks>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	200002ac 	.word	0x200002ac

0800a7ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7f0:	4805      	ldr	r0, [pc, #20]	@ (800a808 <BSP_SD_GetCardState+0x1c>)
 800a7f2:	f7fe f83f 	bl	8008874 <HAL_SD_GetCardState>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	bf14      	ite	ne
 800a7fc:	2301      	movne	r3, #1
 800a7fe:	2300      	moveq	r3, #0
 800a800:	b2db      	uxtb	r3, r3
}
 800a802:	4618      	mov	r0, r3
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	200002ac 	.word	0x200002ac

0800a80c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	4803      	ldr	r0, [pc, #12]	@ (800a824 <BSP_SD_GetCardInfo+0x18>)
 800a818:	f7fe f800 	bl	800881c <HAL_SD_GetCardInfo>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	200002ac 	.word	0x200002ac

0800a828 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a82e:	2301      	movs	r3, #1
 800a830:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	b2db      	uxtb	r3, r3
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
	...

0800a844 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	4603      	mov	r3, r0
 800a84c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a84e:	4b0b      	ldr	r3, [pc, #44]	@ (800a87c <SD_CheckStatus+0x38>)
 800a850:	2201      	movs	r2, #1
 800a852:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a854:	f7ff ffca 	bl	800a7ec <BSP_SD_GetCardState>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a85e:	4b07      	ldr	r3, [pc, #28]	@ (800a87c <SD_CheckStatus+0x38>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f023 0301 	bic.w	r3, r3, #1
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	4b04      	ldr	r3, [pc, #16]	@ (800a87c <SD_CheckStatus+0x38>)
 800a86c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a86e:	4b03      	ldr	r3, [pc, #12]	@ (800a87c <SD_CheckStatus+0x38>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	b2db      	uxtb	r3, r3
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20000029 	.word	0x20000029

0800a880 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a88a:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b8 <SD_initialize+0x38>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a890:	f7ff ff58 	bl	800a744 <BSP_SD_Init>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d107      	bne.n	800a8aa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff ffd1 	bl	800a844 <SD_CheckStatus>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4b04      	ldr	r3, [pc, #16]	@ (800a8b8 <SD_initialize+0x38>)
 800a8a8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	@ (800a8b8 <SD_initialize+0x38>)
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	b2db      	uxtb	r3, r3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000029 	.word	0x20000029

0800a8bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff ffbb 	bl	800a844 <SD_CheckStatus>
 800a8ce:	4603      	mov	r3, r0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60b9      	str	r1, [r7, #8]
 800a8e0:	607a      	str	r2, [r7, #4]
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	68b8      	ldr	r0, [r7, #8]
 800a8f6:	f7ff ff3d 	bl	800a774 <BSP_SD_ReadBlocks>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d107      	bne.n	800a910 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a900:	bf00      	nop
 800a902:	f7ff ff73 	bl	800a7ec <BSP_SD_GetCardState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1fa      	bne.n	800a902 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b086      	sub	sp, #24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	68b8      	ldr	r0, [r7, #8]
 800a938:	f7ff ff3a 	bl	800a7b0 <BSP_SD_WriteBlocks>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d107      	bne.n	800a952 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a942:	bf00      	nop
 800a944:	f7ff ff52 	bl	800a7ec <BSP_SD_GetCardState>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1fa      	bne.n	800a944 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a952:	7dfb      	ldrb	r3, [r7, #23]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08c      	sub	sp, #48	@ 0x30
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	603a      	str	r2, [r7, #0]
 800a966:	71fb      	strb	r3, [r7, #7]
 800a968:	460b      	mov	r3, r1
 800a96a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a972:	4b25      	ldr	r3, [pc, #148]	@ (800aa08 <SD_ioctl+0xac>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <SD_ioctl+0x28>
 800a980:	2303      	movs	r3, #3
 800a982:	e03c      	b.n	800a9fe <SD_ioctl+0xa2>

  switch (cmd)
 800a984:	79bb      	ldrb	r3, [r7, #6]
 800a986:	2b03      	cmp	r3, #3
 800a988:	d834      	bhi.n	800a9f4 <SD_ioctl+0x98>
 800a98a:	a201      	add	r2, pc, #4	@ (adr r2, 800a990 <SD_ioctl+0x34>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800a9a1 	.word	0x0800a9a1
 800a994:	0800a9a9 	.word	0x0800a9a9
 800a998:	0800a9c1 	.word	0x0800a9c1
 800a99c:	0800a9db 	.word	0x0800a9db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a9a6:	e028      	b.n	800a9fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff ff2d 	bl	800a80c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a9b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a9be:	e01c      	b.n	800a9fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9c0:	f107 030c 	add.w	r3, r7, #12
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff ff21 	bl	800a80c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a9d8:	e00f      	b.n	800a9fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9da:	f107 030c 	add.w	r3, r7, #12
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff ff14 	bl	800a80c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	0a5a      	lsrs	r2, r3, #9
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a9f2:	e002      	b.n	800a9fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a9f4:	2304      	movs	r3, #4
 800a9f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3730      	adds	r7, #48	@ 0x30
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20000029 	.word	0x20000029

0800aa0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	4a08      	ldr	r2, [pc, #32]	@ (800aa3c <disk_status+0x30>)
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	79fa      	ldrb	r2, [r7, #7]
 800aa24:	4905      	ldr	r1, [pc, #20]	@ (800aa3c <disk_status+0x30>)
 800aa26:	440a      	add	r2, r1
 800aa28:	7a12      	ldrb	r2, [r2, #8]
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	4798      	blx	r3
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	200056a8 	.word	0x200056a8

0800aa40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	4a0d      	ldr	r2, [pc, #52]	@ (800aa88 <disk_initialize+0x48>)
 800aa52:	5cd3      	ldrb	r3, [r2, r3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d111      	bne.n	800aa7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	4a0b      	ldr	r2, [pc, #44]	@ (800aa88 <disk_initialize+0x48>)
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	4a09      	ldr	r2, [pc, #36]	@ (800aa88 <disk_initialize+0x48>)
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	79fa      	ldrb	r2, [r7, #7]
 800aa6e:	4906      	ldr	r1, [pc, #24]	@ (800aa88 <disk_initialize+0x48>)
 800aa70:	440a      	add	r2, r1
 800aa72:	7a12      	ldrb	r2, [r2, #8]
 800aa74:	4610      	mov	r0, r2
 800aa76:	4798      	blx	r3
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	200056a8 	.word	0x200056a8

0800aa8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa8c:	b590      	push	{r4, r7, lr}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	607a      	str	r2, [r7, #4]
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	4603      	mov	r3, r0
 800aa9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	4a0a      	ldr	r2, [pc, #40]	@ (800aac8 <disk_read+0x3c>)
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	689c      	ldr	r4, [r3, #8]
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	4a07      	ldr	r2, [pc, #28]	@ (800aac8 <disk_read+0x3c>)
 800aaac:	4413      	add	r3, r2
 800aaae:	7a18      	ldrb	r0, [r3, #8]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	47a0      	blx	r4
 800aab8:	4603      	mov	r3, r0
 800aaba:	75fb      	strb	r3, [r7, #23]
  return res;
 800aabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	371c      	adds	r7, #28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd90      	pop	{r4, r7, pc}
 800aac6:	bf00      	nop
 800aac8:	200056a8 	.word	0x200056a8

0800aacc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aacc:	b590      	push	{r4, r7, lr}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	607a      	str	r2, [r7, #4]
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	4a0a      	ldr	r2, [pc, #40]	@ (800ab08 <disk_write+0x3c>)
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	68dc      	ldr	r4, [r3, #12]
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	4a07      	ldr	r2, [pc, #28]	@ (800ab08 <disk_write+0x3c>)
 800aaec:	4413      	add	r3, r2
 800aaee:	7a18      	ldrb	r0, [r3, #8]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	47a0      	blx	r4
 800aaf8:	4603      	mov	r3, r0
 800aafa:	75fb      	strb	r3, [r7, #23]
  return res;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd90      	pop	{r4, r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200056a8 	.word	0x200056a8

0800ab0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	603a      	str	r2, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	4a09      	ldr	r2, [pc, #36]	@ (800ab44 <disk_ioctl+0x38>)
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	79fa      	ldrb	r2, [r7, #7]
 800ab2a:	4906      	ldr	r1, [pc, #24]	@ (800ab44 <disk_ioctl+0x38>)
 800ab2c:	440a      	add	r2, r1
 800ab2e:	7a10      	ldrb	r0, [r2, #8]
 800ab30:	79b9      	ldrb	r1, [r7, #6]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	4798      	blx	r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]
  return res;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	200056a8 	.word	0x200056a8

0800ab48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3301      	adds	r3, #1
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ab58:	89fb      	ldrh	r3, [r7, #14]
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	b21a      	sxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	b21b      	sxth	r3, r3
 800ab64:	4313      	orrs	r3, r2
 800ab66:	b21b      	sxth	r3, r3
 800ab68:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ab6a:	89fb      	ldrh	r3, [r7, #14]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3303      	adds	r3, #3
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	021b      	lsls	r3, r3, #8
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	3202      	adds	r2, #2
 800ab90:	7812      	ldrb	r2, [r2, #0]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	3201      	adds	r2, #1
 800ab9e:	7812      	ldrb	r2, [r2, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	7812      	ldrb	r2, [r2, #0]
 800abac:	4313      	orrs	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
	return rv;
 800abb0:	68fb      	ldr	r3, [r7, #12]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	887a      	ldrh	r2, [r7, #2]
 800abd2:	b2d2      	uxtb	r2, r2
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	887b      	ldrh	r3, [r7, #2]
 800abd8:	0a1b      	lsrs	r3, r3, #8
 800abda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	887a      	ldrh	r2, [r7, #2]
 800abe4:	b2d2      	uxtb	r2, r2
 800abe6:	701a      	strb	r2, [r3, #0]
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	b2d2      	uxtb	r2, r2
 800ac08:	701a      	strb	r2, [r3, #0]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	0a1b      	lsrs	r3, r3, #8
 800ac0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	607a      	str	r2, [r7, #4]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	b2d2      	uxtb	r2, r2
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	0a1b      	lsrs	r3, r3, #8
 800ac32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	b2d2      	uxtb	r2, r2
 800ac3e:	701a      	strb	r2, [r3, #0]
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00d      	beq.n	800ac82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	1c53      	adds	r3, r2, #1
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	1c59      	adds	r1, r3, #1
 800ac70:	6179      	str	r1, [r7, #20]
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	607b      	str	r3, [r7, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f1      	bne.n	800ac66 <mem_cpy+0x1a>
	}
}
 800ac82:	bf00      	nop
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac8e:	b480      	push	{r7}
 800ac90:	b087      	sub	sp, #28
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	617a      	str	r2, [r7, #20]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	b2d2      	uxtb	r2, r2
 800aca8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3b01      	subs	r3, #1
 800acae:	607b      	str	r3, [r7, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1f3      	bne.n	800ac9e <mem_set+0x10>
}
 800acb6:	bf00      	nop
 800acb8:	bf00      	nop
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800acc4:	b480      	push	{r7}
 800acc6:	b089      	sub	sp, #36	@ 0x24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	61fb      	str	r3, [r7, #28]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	61fa      	str	r2, [r7, #28]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	4619      	mov	r1, r3
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	61ba      	str	r2, [r7, #24]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	1acb      	subs	r3, r1, r3
 800acf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	607b      	str	r3, [r7, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <mem_cmp+0x40>
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0eb      	beq.n	800acdc <mem_cmp+0x18>

	return r;
 800ad04:	697b      	ldr	r3, [r7, #20]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3724      	adds	r7, #36	@ 0x24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ad1c:	e002      	b.n	800ad24 <chk_chr+0x12>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3301      	adds	r3, #1
 800ad22:	607b      	str	r3, [r7, #4]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <chk_chr+0x26>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d1f2      	bne.n	800ad1e <chk_chr+0xc>
	return *str;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e029      	b.n	800adb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ad5c:	4a27      	ldr	r2, [pc, #156]	@ (800adfc <chk_lock+0xb4>)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	4413      	add	r3, r2
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01d      	beq.n	800ada6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad6a:	4a24      	ldr	r2, [pc, #144]	@ (800adfc <chk_lock+0xb4>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	4413      	add	r3, r2
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d116      	bne.n	800adaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad7c:	4a1f      	ldr	r2, [pc, #124]	@ (800adfc <chk_lock+0xb4>)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	011b      	lsls	r3, r3, #4
 800ad82:	4413      	add	r3, r2
 800ad84:	3304      	adds	r3, #4
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d10c      	bne.n	800adaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad90:	4a1a      	ldr	r2, [pc, #104]	@ (800adfc <chk_lock+0xb4>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	4413      	add	r3, r2
 800ad98:	3308      	adds	r3, #8
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d102      	bne.n	800adaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ada4:	e007      	b.n	800adb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ada6:	2301      	movs	r3, #1
 800ada8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3301      	adds	r3, #1
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d9d2      	bls.n	800ad5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d109      	bne.n	800add0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <chk_lock+0x80>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d101      	bne.n	800adcc <chk_lock+0x84>
 800adc8:	2300      	movs	r3, #0
 800adca:	e010      	b.n	800adee <chk_lock+0xa6>
 800adcc:	2312      	movs	r3, #18
 800adce:	e00e      	b.n	800adee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d108      	bne.n	800ade8 <chk_lock+0xa0>
 800add6:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <chk_lock+0xb4>)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	4413      	add	r3, r2
 800adde:	330c      	adds	r3, #12
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade6:	d101      	bne.n	800adec <chk_lock+0xa4>
 800ade8:	2310      	movs	r3, #16
 800adea:	e000      	b.n	800adee <chk_lock+0xa6>
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20005688 	.word	0x20005688

0800ae00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae06:	2300      	movs	r3, #0
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	e002      	b.n	800ae12 <enq_lock+0x12>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	607b      	str	r3, [r7, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d806      	bhi.n	800ae26 <enq_lock+0x26>
 800ae18:	4a09      	ldr	r2, [pc, #36]	@ (800ae40 <enq_lock+0x40>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	4413      	add	r3, r2
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f2      	bne.n	800ae0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	bf14      	ite	ne
 800ae2c:	2301      	movne	r3, #1
 800ae2e:	2300      	moveq	r3, #0
 800ae30:	b2db      	uxtb	r3, r3
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	20005688 	.word	0x20005688

0800ae44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	e01f      	b.n	800ae94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ae54:	4a41      	ldr	r2, [pc, #260]	@ (800af5c <inc_lock+0x118>)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	4413      	add	r3, r2
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d113      	bne.n	800ae8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ae66:	4a3d      	ldr	r2, [pc, #244]	@ (800af5c <inc_lock+0x118>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	011b      	lsls	r3, r3, #4
 800ae6c:	4413      	add	r3, r2
 800ae6e:	3304      	adds	r3, #4
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d109      	bne.n	800ae8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae7a:	4a38      	ldr	r2, [pc, #224]	@ (800af5c <inc_lock+0x118>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	4413      	add	r3, r2
 800ae82:	3308      	adds	r3, #8
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d006      	beq.n	800ae9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d9dc      	bls.n	800ae54 <inc_lock+0x10>
 800ae9a:	e000      	b.n	800ae9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d132      	bne.n	800af0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	e002      	b.n	800aeb0 <inc_lock+0x6c>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d806      	bhi.n	800aec4 <inc_lock+0x80>
 800aeb6:	4a29      	ldr	r2, [pc, #164]	@ (800af5c <inc_lock+0x118>)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	4413      	add	r3, r2
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1f2      	bne.n	800aeaa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d101      	bne.n	800aece <inc_lock+0x8a>
 800aeca:	2300      	movs	r3, #0
 800aecc:	e040      	b.n	800af50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4922      	ldr	r1, [pc, #136]	@ (800af5c <inc_lock+0x118>)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	440b      	add	r3, r1
 800aeda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689a      	ldr	r2, [r3, #8]
 800aee0:	491e      	ldr	r1, [pc, #120]	@ (800af5c <inc_lock+0x118>)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	440b      	add	r3, r1
 800aee8:	3304      	adds	r3, #4
 800aeea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	695a      	ldr	r2, [r3, #20]
 800aef0:	491a      	ldr	r1, [pc, #104]	@ (800af5c <inc_lock+0x118>)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	440b      	add	r3, r1
 800aef8:	3308      	adds	r3, #8
 800aefa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aefc:	4a17      	ldr	r2, [pc, #92]	@ (800af5c <inc_lock+0x118>)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	011b      	lsls	r3, r3, #4
 800af02:	4413      	add	r3, r2
 800af04:	330c      	adds	r3, #12
 800af06:	2200      	movs	r2, #0
 800af08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <inc_lock+0xe0>
 800af10:	4a12      	ldr	r2, [pc, #72]	@ (800af5c <inc_lock+0x118>)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	011b      	lsls	r3, r3, #4
 800af16:	4413      	add	r3, r2
 800af18:	330c      	adds	r3, #12
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <inc_lock+0xe0>
 800af20:	2300      	movs	r3, #0
 800af22:	e015      	b.n	800af50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d108      	bne.n	800af3c <inc_lock+0xf8>
 800af2a:	4a0c      	ldr	r2, [pc, #48]	@ (800af5c <inc_lock+0x118>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	330c      	adds	r3, #12
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	3301      	adds	r3, #1
 800af38:	b29a      	uxth	r2, r3
 800af3a:	e001      	b.n	800af40 <inc_lock+0xfc>
 800af3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af40:	4906      	ldr	r1, [pc, #24]	@ (800af5c <inc_lock+0x118>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	440b      	add	r3, r1
 800af48:	330c      	adds	r3, #12
 800af4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3301      	adds	r3, #1
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20005688 	.word	0x20005688

0800af60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d825      	bhi.n	800afc0 <dec_lock+0x60>
		n = Files[i].ctr;
 800af74:	4a17      	ldr	r2, [pc, #92]	@ (800afd4 <dec_lock+0x74>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	011b      	lsls	r3, r3, #4
 800af7a:	4413      	add	r3, r2
 800af7c:	330c      	adds	r3, #12
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af82:	89fb      	ldrh	r3, [r7, #14]
 800af84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af88:	d101      	bne.n	800af8e <dec_lock+0x2e>
 800af8a:	2300      	movs	r3, #0
 800af8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af8e:	89fb      	ldrh	r3, [r7, #14]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <dec_lock+0x3a>
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	3b01      	subs	r3, #1
 800af98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af9a:	4a0e      	ldr	r2, [pc, #56]	@ (800afd4 <dec_lock+0x74>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	4413      	add	r3, r2
 800afa2:	330c      	adds	r3, #12
 800afa4:	89fa      	ldrh	r2, [r7, #14]
 800afa6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800afa8:	89fb      	ldrh	r3, [r7, #14]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d105      	bne.n	800afba <dec_lock+0x5a>
 800afae:	4a09      	ldr	r2, [pc, #36]	@ (800afd4 <dec_lock+0x74>)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	4413      	add	r3, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	737b      	strb	r3, [r7, #13]
 800afbe:	e001      	b.n	800afc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800afc0:	2302      	movs	r3, #2
 800afc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800afc4:	7b7b      	ldrb	r3, [r7, #13]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20005688 	.word	0x20005688

0800afd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800afe0:	2300      	movs	r3, #0
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e010      	b.n	800b008 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800afe6:	4a0d      	ldr	r2, [pc, #52]	@ (800b01c <clear_lock+0x44>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	4413      	add	r3, r2
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d105      	bne.n	800b002 <clear_lock+0x2a>
 800aff6:	4a09      	ldr	r2, [pc, #36]	@ (800b01c <clear_lock+0x44>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	4413      	add	r3, r2
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3301      	adds	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d9eb      	bls.n	800afe6 <clear_lock+0xe>
	}
}
 800b00e:	bf00      	nop
 800b010:	bf00      	nop
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20005688 	.word	0x20005688

0800b020 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	78db      	ldrb	r3, [r3, #3]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d034      	beq.n	800b09e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b038:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	7858      	ldrb	r0, [r3, #1]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b044:	2301      	movs	r3, #1
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	f7ff fd40 	bl	800aacc <disk_write>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b052:	2301      	movs	r3, #1
 800b054:	73fb      	strb	r3, [r7, #15]
 800b056:	e022      	b.n	800b09e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	1ad2      	subs	r2, r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d217      	bcs.n	800b09e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	789b      	ldrb	r3, [r3, #2]
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	e010      	b.n	800b098 <sync_window+0x78>
					wsect += fs->fsize;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4413      	add	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	7858      	ldrb	r0, [r3, #1]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b08a:	2301      	movs	r3, #1
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	f7ff fd1d 	bl	800aacc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	3b01      	subs	r3, #1
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d8eb      	bhi.n	800b076 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d01b      	beq.n	800b0f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff ffad 	bl	800b020 <sync_window>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d113      	bne.n	800b0f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7858      	ldrb	r0, [r3, #1]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b0da:	2301      	movs	r3, #1
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	f7ff fcd5 	bl	800aa8c <disk_read>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d004      	beq.n	800b0f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff87 	bl	800b020 <sync_window>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d159      	bne.n	800b1d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b03      	cmp	r3, #3
 800b122:	d149      	bne.n	800b1b8 <sync_fs+0xb4>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d145      	bne.n	800b1b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	899b      	ldrh	r3, [r3, #12]
 800b136:	461a      	mov	r2, r3
 800b138:	2100      	movs	r1, #0
 800b13a:	f7ff fda8 	bl	800ac8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3334      	adds	r3, #52	@ 0x34
 800b142:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b146:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff fd37 	bl	800abbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3334      	adds	r3, #52	@ 0x34
 800b154:	4921      	ldr	r1, [pc, #132]	@ (800b1dc <sync_fs+0xd8>)
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fd4c 	bl	800abf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3334      	adds	r3, #52	@ 0x34
 800b160:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b164:	491e      	ldr	r1, [pc, #120]	@ (800b1e0 <sync_fs+0xdc>)
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff fd44 	bl	800abf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3334      	adds	r3, #52	@ 0x34
 800b170:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	4619      	mov	r1, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7ff fd3a 	bl	800abf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3334      	adds	r3, #52	@ 0x34
 800b184:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f7ff fd30 	bl	800abf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7858      	ldrb	r0, [r3, #1]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f7ff fc8d 	bl	800aacc <disk_write>
			fs->fsi_flag = 0;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fca3 	bl	800ab0c <disk_ioctl>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <sync_fs+0xcc>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	41615252 	.word	0x41615252
 800b1e0:	61417272 	.word	0x61417272

0800b1e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	3b02      	subs	r3, #2
 800b1f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	3b02      	subs	r3, #2
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d301      	bcc.n	800b204 <clust2sect+0x20>
 800b200:	2300      	movs	r3, #0
 800b202:	e008      	b.n	800b216 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	895b      	ldrh	r3, [r3, #10]
 800b208:	461a      	mov	r2, r3
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	fb03 f202 	mul.w	r2, r3, r2
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b214:	4413      	add	r3, r2
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b086      	sub	sp, #24
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d904      	bls.n	800b242 <get_fat+0x20>
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d302      	bcc.n	800b248 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b242:	2301      	movs	r3, #1
 800b244:	617b      	str	r3, [r7, #20]
 800b246:	e0ba      	b.n	800b3be <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b248:	f04f 33ff 	mov.w	r3, #4294967295
 800b24c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b03      	cmp	r3, #3
 800b254:	f000 8082 	beq.w	800b35c <get_fat+0x13a>
 800b258:	2b03      	cmp	r3, #3
 800b25a:	f300 80a6 	bgt.w	800b3aa <get_fat+0x188>
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d002      	beq.n	800b268 <get_fat+0x46>
 800b262:	2b02      	cmp	r3, #2
 800b264:	d055      	beq.n	800b312 <get_fat+0xf0>
 800b266:	e0a0      	b.n	800b3aa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	085b      	lsrs	r3, r3, #1
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4413      	add	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	899b      	ldrh	r3, [r3, #12]
 800b27e:	4619      	mov	r1, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	fbb3 f3f1 	udiv	r3, r3, r1
 800b286:	4413      	add	r3, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	f7ff ff0c 	bl	800b0a8 <move_window>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	f040 808c 	bne.w	800b3b0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	1c5a      	adds	r2, r3, #1
 800b29c:	60fa      	str	r2, [r7, #12]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	8992      	ldrh	r2, [r2, #12]
 800b2a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2a6:	fb01 f202 	mul.w	r2, r1, r2
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b2b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	899b      	ldrh	r3, [r3, #12]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6938      	ldr	r0, [r7, #16]
 800b2cc:	f7ff feec 	bl	800b0a8 <move_window>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d16e      	bne.n	800b3b4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	899b      	ldrh	r3, [r3, #12]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2e2:	fb01 f202 	mul.w	r2, r1, r2
 800b2e6:	1a9b      	subs	r3, r3, r2
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <get_fat+0xe6>
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	091b      	lsrs	r3, r3, #4
 800b306:	e002      	b.n	800b30e <get_fat+0xec>
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b30e:	617b      	str	r3, [r7, #20]
			break;
 800b310:	e055      	b.n	800b3be <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	899b      	ldrh	r3, [r3, #12]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	4619      	mov	r1, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	fbb3 f3f1 	udiv	r3, r3, r1
 800b326:	4413      	add	r3, r2
 800b328:	4619      	mov	r1, r3
 800b32a:	6938      	ldr	r0, [r7, #16]
 800b32c:	f7ff febc 	bl	800b0a8 <move_window>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d140      	bne.n	800b3b8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	8992      	ldrh	r2, [r2, #12]
 800b344:	fbb3 f0f2 	udiv	r0, r3, r2
 800b348:	fb00 f202 	mul.w	r2, r0, r2
 800b34c:	1a9b      	subs	r3, r3, r2
 800b34e:	440b      	add	r3, r1
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fbf9 	bl	800ab48 <ld_word>
 800b356:	4603      	mov	r3, r0
 800b358:	617b      	str	r3, [r7, #20]
			break;
 800b35a:	e030      	b.n	800b3be <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	899b      	ldrh	r3, [r3, #12]
 800b364:	089b      	lsrs	r3, r3, #2
 800b366:	b29b      	uxth	r3, r3
 800b368:	4619      	mov	r1, r3
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b370:	4413      	add	r3, r2
 800b372:	4619      	mov	r1, r3
 800b374:	6938      	ldr	r0, [r7, #16]
 800b376:	f7ff fe97 	bl	800b0a8 <move_window>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11d      	bne.n	800b3bc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	8992      	ldrh	r2, [r2, #12]
 800b38e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b392:	fb00 f202 	mul.w	r2, r0, r2
 800b396:	1a9b      	subs	r3, r3, r2
 800b398:	440b      	add	r3, r1
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff fbec 	bl	800ab78 <ld_dword>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b3a6:	617b      	str	r3, [r7, #20]
			break;
 800b3a8:	e009      	b.n	800b3be <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e006      	b.n	800b3be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3b0:	bf00      	nop
 800b3b2:	e004      	b.n	800b3be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3b4:	bf00      	nop
 800b3b6:	e002      	b.n	800b3be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3b8:	bf00      	nop
 800b3ba:	e000      	b.n	800b3be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3bc:	bf00      	nop
		}
	}

	return val;
 800b3be:	697b      	ldr	r3, [r7, #20]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b089      	sub	sp, #36	@ 0x24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	f240 8109 	bls.w	800b5f2 <put_fat+0x22a>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	f080 8103 	bcs.w	800b5f2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	f000 80b6 	beq.w	800b562 <put_fat+0x19a>
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	f300 80fb 	bgt.w	800b5f2 <put_fat+0x22a>
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d003      	beq.n	800b408 <put_fat+0x40>
 800b400:	2b02      	cmp	r3, #2
 800b402:	f000 8083 	beq.w	800b50c <put_fat+0x144>
 800b406:	e0f4      	b.n	800b5f2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	61bb      	str	r3, [r7, #24]
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	4413      	add	r3, r2
 800b414:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	899b      	ldrh	r3, [r3, #12]
 800b41e:	4619      	mov	r1, r3
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	fbb3 f3f1 	udiv	r3, r3, r1
 800b426:	4413      	add	r3, r2
 800b428:	4619      	mov	r1, r3
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff fe3c 	bl	800b0a8 <move_window>
 800b430:	4603      	mov	r3, r0
 800b432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b434:	7ffb      	ldrb	r3, [r7, #31]
 800b436:	2b00      	cmp	r3, #0
 800b438:	f040 80d4 	bne.w	800b5e4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	61ba      	str	r2, [r7, #24]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	8992      	ldrh	r2, [r2, #12]
 800b44c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b450:	fb00 f202 	mul.w	r2, r0, r2
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	440b      	add	r3, r1
 800b458:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f003 0301 	and.w	r3, r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00d      	beq.n	800b480 <put_fat+0xb8>
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	b25b      	sxtb	r3, r3
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	b25a      	sxtb	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	b25b      	sxtb	r3, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	b25b      	sxtb	r3, r3
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	e001      	b.n	800b484 <put_fat+0xbc>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2201      	movs	r2, #1
 800b48c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	899b      	ldrh	r3, [r3, #12]
 800b496:	4619      	mov	r1, r3
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b49e:	4413      	add	r3, r2
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f7ff fe00 	bl	800b0a8 <move_window>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ac:	7ffb      	ldrb	r3, [r7, #31]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f040 809a 	bne.w	800b5e8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	899b      	ldrh	r3, [r3, #12]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4c6:	fb00 f202 	mul.w	r2, r0, r2
 800b4ca:	1a9b      	subs	r3, r3, r2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <put_fat+0x11a>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	091b      	lsrs	r3, r3, #4
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	e00e      	b.n	800b500 <put_fat+0x138>
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	b25b      	sxtb	r3, r3
 800b4e8:	f023 030f 	bic.w	r3, r3, #15
 800b4ec:	b25a      	sxtb	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	0a1b      	lsrs	r3, r3, #8
 800b4f2:	b25b      	sxtb	r3, r3
 800b4f4:	f003 030f 	and.w	r3, r3, #15
 800b4f8:	b25b      	sxtb	r3, r3
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	b25b      	sxtb	r3, r3
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	697a      	ldr	r2, [r7, #20]
 800b502:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2201      	movs	r2, #1
 800b508:	70da      	strb	r2, [r3, #3]
			break;
 800b50a:	e072      	b.n	800b5f2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	899b      	ldrh	r3, [r3, #12]
 800b514:	085b      	lsrs	r3, r3, #1
 800b516:	b29b      	uxth	r3, r3
 800b518:	4619      	mov	r1, r3
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b520:	4413      	add	r3, r2
 800b522:	4619      	mov	r1, r3
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f7ff fdbf 	bl	800b0a8 <move_window>
 800b52a:	4603      	mov	r3, r0
 800b52c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b52e:	7ffb      	ldrb	r3, [r7, #31]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d15b      	bne.n	800b5ec <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	8992      	ldrh	r2, [r2, #12]
 800b542:	fbb3 f0f2 	udiv	r0, r3, r2
 800b546:	fb00 f202 	mul.w	r2, r0, r2
 800b54a:	1a9b      	subs	r3, r3, r2
 800b54c:	440b      	add	r3, r1
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	b292      	uxth	r2, r2
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff fb32 	bl	800abbe <st_word>
			fs->wflag = 1;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	70da      	strb	r2, [r3, #3]
			break;
 800b560:	e047      	b.n	800b5f2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	899b      	ldrh	r3, [r3, #12]
 800b56a:	089b      	lsrs	r3, r3, #2
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4619      	mov	r1, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	fbb3 f3f1 	udiv	r3, r3, r1
 800b576:	4413      	add	r3, r2
 800b578:	4619      	mov	r1, r3
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7ff fd94 	bl	800b0a8 <move_window>
 800b580:	4603      	mov	r3, r0
 800b582:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b584:	7ffb      	ldrb	r3, [r7, #31]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d132      	bne.n	800b5f0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	8992      	ldrh	r2, [r2, #12]
 800b59e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5a2:	fb00 f202 	mul.w	r2, r0, r2
 800b5a6:	1a9b      	subs	r3, r3, r2
 800b5a8:	440b      	add	r3, r1
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fae4 	bl	800ab78 <ld_dword>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b5b6:	4323      	orrs	r3, r4
 800b5b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	8992      	ldrh	r2, [r2, #12]
 800b5c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5cc:	fb00 f202 	mul.w	r2, r0, r2
 800b5d0:	1a9b      	subs	r3, r3, r2
 800b5d2:	440b      	add	r3, r1
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fb0c 	bl	800abf4 <st_dword>
			fs->wflag = 1;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	70da      	strb	r2, [r3, #3]
			break;
 800b5e2:	e006      	b.n	800b5f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5e4:	bf00      	nop
 800b5e6:	e004      	b.n	800b5f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5e8:	bf00      	nop
 800b5ea:	e002      	b.n	800b5f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5ec:	bf00      	nop
 800b5ee:	e000      	b.n	800b5f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5f0:	bf00      	nop
		}
	}
	return res;
 800b5f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3724      	adds	r7, #36	@ 0x24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd90      	pop	{r4, r7, pc}

0800b5fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d904      	bls.n	800b622 <remove_chain+0x26>
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d301      	bcc.n	800b626 <remove_chain+0x2a>
 800b622:	2302      	movs	r3, #2
 800b624:	e04b      	b.n	800b6be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00c      	beq.n	800b646 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	69b8      	ldr	r0, [r7, #24]
 800b634:	f7ff fec8 	bl	800b3c8 <put_fat>
 800b638:	4603      	mov	r3, r0
 800b63a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b63c:	7ffb      	ldrb	r3, [r7, #31]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <remove_chain+0x4a>
 800b642:	7ffb      	ldrb	r3, [r7, #31]
 800b644:	e03b      	b.n	800b6be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7ff fdea 	bl	800b222 <get_fat>
 800b64e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d031      	beq.n	800b6ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d101      	bne.n	800b660 <remove_chain+0x64>
 800b65c:	2302      	movs	r3, #2
 800b65e:	e02e      	b.n	800b6be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b666:	d101      	bne.n	800b66c <remove_chain+0x70>
 800b668:	2301      	movs	r3, #1
 800b66a:	e028      	b.n	800b6be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b66c:	2200      	movs	r2, #0
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	69b8      	ldr	r0, [r7, #24]
 800b672:	f7ff fea9 	bl	800b3c8 <put_fat>
 800b676:	4603      	mov	r3, r0
 800b678:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b67a:	7ffb      	ldrb	r3, [r7, #31]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <remove_chain+0x88>
 800b680:	7ffb      	ldrb	r3, [r7, #31]
 800b682:	e01c      	b.n	800b6be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	695a      	ldr	r2, [r3, #20]
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	3b02      	subs	r3, #2
 800b68e:	429a      	cmp	r2, r3
 800b690:	d20b      	bcs.n	800b6aa <remove_chain+0xae>
			fs->free_clst++;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	791b      	ldrb	r3, [r3, #4]
 800b6a0:	f043 0301 	orr.w	r3, r3, #1
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d3c6      	bcc.n	800b646 <remove_chain+0x4a>
 800b6b8:	e000      	b.n	800b6bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b6ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3720      	adds	r7, #32
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b088      	sub	sp, #32
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10d      	bne.n	800b6f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d004      	beq.n	800b6f2 <create_chain+0x2c>
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d31b      	bcc.n	800b72a <create_chain+0x64>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	61bb      	str	r3, [r7, #24]
 800b6f6:	e018      	b.n	800b72a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fd91 	bl	800b222 <get_fat>
 800b700:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d801      	bhi.n	800b70c <create_chain+0x46>
 800b708:	2301      	movs	r3, #1
 800b70a:	e070      	b.n	800b7ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d101      	bne.n	800b718 <create_chain+0x52>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	e06a      	b.n	800b7ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d201      	bcs.n	800b726 <create_chain+0x60>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	e063      	b.n	800b7ee <create_chain+0x128>
		scl = clst;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	3301      	adds	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d307      	bcc.n	800b74e <create_chain+0x88>
				ncl = 2;
 800b73e:	2302      	movs	r3, #2
 800b740:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b742:	69fa      	ldr	r2, [r7, #28]
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	429a      	cmp	r2, r3
 800b748:	d901      	bls.n	800b74e <create_chain+0x88>
 800b74a:	2300      	movs	r3, #0
 800b74c:	e04f      	b.n	800b7ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b74e:	69f9      	ldr	r1, [r7, #28]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff fd66 	bl	800b222 <get_fat>
 800b756:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00e      	beq.n	800b77c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d003      	beq.n	800b76c <create_chain+0xa6>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76a:	d101      	bne.n	800b770 <create_chain+0xaa>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	e03e      	b.n	800b7ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	429a      	cmp	r2, r3
 800b776:	d1da      	bne.n	800b72e <create_chain+0x68>
 800b778:	2300      	movs	r3, #0
 800b77a:	e038      	b.n	800b7ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b77c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b77e:	f04f 32ff 	mov.w	r2, #4294967295
 800b782:	69f9      	ldr	r1, [r7, #28]
 800b784:	6938      	ldr	r0, [r7, #16]
 800b786:	f7ff fe1f 	bl	800b3c8 <put_fat>
 800b78a:	4603      	mov	r3, r0
 800b78c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d109      	bne.n	800b7a8 <create_chain+0xe2>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6938      	ldr	r0, [r7, #16]
 800b7a0:	f7ff fe12 	bl	800b3c8 <put_fat>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d116      	bne.n	800b7dc <create_chain+0x116>
		fs->last_clst = ncl;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	69fa      	ldr	r2, [r7, #28]
 800b7b2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	695a      	ldr	r2, [r3, #20]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	3b02      	subs	r3, #2
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d804      	bhi.n	800b7cc <create_chain+0x106>
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	1e5a      	subs	r2, r3, #1
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	791b      	ldrb	r3, [r3, #4]
 800b7d0:	f043 0301 	orr.w	r3, r3, #1
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	711a      	strb	r2, [r3, #4]
 800b7da:	e007      	b.n	800b7ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d102      	bne.n	800b7e8 <create_chain+0x122>
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e6:	e000      	b.n	800b7ea <create_chain+0x124>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b7ec:	69fb      	ldr	r3, [r7, #28]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b087      	sub	sp, #28
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80a:	3304      	adds	r3, #4
 800b80c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	899b      	ldrh	r3, [r3, #12]
 800b812:	461a      	mov	r2, r3
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	fbb3 f3f2 	udiv	r3, r3, r2
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	8952      	ldrh	r2, [r2, #10]
 800b81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b822:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	1d1a      	adds	r2, r3, #4
 800b828:	613a      	str	r2, [r7, #16]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <clmt_clust+0x42>
 800b834:	2300      	movs	r3, #0
 800b836:	e010      	b.n	800b85a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d307      	bcc.n	800b850 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	3304      	adds	r3, #4
 800b84c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b84e:	e7e9      	b.n	800b824 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b850:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	4413      	add	r3, r2
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b086      	sub	sp, #24
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b87c:	d204      	bcs.n	800b888 <dir_sdi+0x22>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	f003 031f 	and.w	r3, r3, #31
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <dir_sdi+0x26>
		return FR_INT_ERR;
 800b888:	2302      	movs	r3, #2
 800b88a:	e071      	b.n	800b970 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	683a      	ldr	r2, [r7, #0]
 800b890:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d106      	bne.n	800b8ac <dir_sdi+0x46>
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d902      	bls.n	800b8ac <dir_sdi+0x46>
		clst = fs->dirbase;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10c      	bne.n	800b8cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	095b      	lsrs	r3, r3, #5
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	8912      	ldrh	r2, [r2, #8]
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d301      	bcc.n	800b8c2 <dir_sdi+0x5c>
 800b8be:	2302      	movs	r3, #2
 800b8c0:	e056      	b.n	800b970 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	61da      	str	r2, [r3, #28]
 800b8ca:	e02d      	b.n	800b928 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	895b      	ldrh	r3, [r3, #10]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	899b      	ldrh	r3, [r3, #12]
 800b8d6:	fb02 f303 	mul.w	r3, r2, r3
 800b8da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8dc:	e019      	b.n	800b912 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6979      	ldr	r1, [r7, #20]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff fc9d 	bl	800b222 <get_fat>
 800b8e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f0:	d101      	bne.n	800b8f6 <dir_sdi+0x90>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e03c      	b.n	800b970 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d904      	bls.n	800b906 <dir_sdi+0xa0>
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	429a      	cmp	r2, r3
 800b904:	d301      	bcc.n	800b90a <dir_sdi+0xa4>
 800b906:	2302      	movs	r3, #2
 800b908:	e032      	b.n	800b970 <dir_sdi+0x10a>
			ofs -= csz;
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	429a      	cmp	r2, r3
 800b918:	d2e1      	bcs.n	800b8de <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b91a:	6979      	ldr	r1, [r7, #20]
 800b91c:	6938      	ldr	r0, [r7, #16]
 800b91e:	f7ff fc61 	bl	800b1e4 <clust2sect>
 800b922:	4602      	mov	r2, r0
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	69db      	ldr	r3, [r3, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <dir_sdi+0xd4>
 800b936:	2302      	movs	r3, #2
 800b938:	e01a      	b.n	800b970 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69da      	ldr	r2, [r3, #28]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	899b      	ldrh	r3, [r3, #12]
 800b942:	4619      	mov	r1, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	fbb3 f3f1 	udiv	r3, r3, r1
 800b94a:	441a      	add	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	899b      	ldrh	r3, [r3, #12]
 800b95a:	461a      	mov	r2, r3
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b962:	fb00 f202 	mul.w	r2, r0, r2
 800b966:	1a9b      	subs	r3, r3, r2
 800b968:	18ca      	adds	r2, r1, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	3320      	adds	r3, #32
 800b98e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <dir_next+0x28>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b99e:	d301      	bcc.n	800b9a4 <dir_next+0x2c>
 800b9a0:	2304      	movs	r3, #4
 800b9a2:	e0bb      	b.n	800bb1c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	899b      	ldrh	r3, [r3, #12]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9b0:	fb01 f202 	mul.w	r2, r1, r2
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f040 809d 	bne.w	800baf6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10b      	bne.n	800b9e6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	095b      	lsrs	r3, r3, #5
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	8912      	ldrh	r2, [r2, #8]
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	f0c0 808d 	bcc.w	800baf6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	61da      	str	r2, [r3, #28]
 800b9e2:	2304      	movs	r3, #4
 800b9e4:	e09a      	b.n	800bb1c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	899b      	ldrh	r3, [r3, #12]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	8952      	ldrh	r2, [r2, #10]
 800b9f6:	3a01      	subs	r2, #1
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d17b      	bne.n	800baf6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f7ff fc0b 	bl	800b222 <get_fat>
 800ba0c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d801      	bhi.n	800ba18 <dir_next+0xa0>
 800ba14:	2302      	movs	r3, #2
 800ba16:	e081      	b.n	800bb1c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1e:	d101      	bne.n	800ba24 <dir_next+0xac>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e07b      	b.n	800bb1c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d359      	bcc.n	800bae2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d104      	bne.n	800ba3e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	61da      	str	r2, [r3, #28]
 800ba3a:	2304      	movs	r3, #4
 800ba3c:	e06e      	b.n	800bb1c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	4619      	mov	r1, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	f7ff fe3d 	bl	800b6c6 <create_chain>
 800ba4c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <dir_next+0xe0>
 800ba54:	2307      	movs	r3, #7
 800ba56:	e061      	b.n	800bb1c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d101      	bne.n	800ba62 <dir_next+0xea>
 800ba5e:	2302      	movs	r3, #2
 800ba60:	e05c      	b.n	800bb1c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba68:	d101      	bne.n	800ba6e <dir_next+0xf6>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e056      	b.n	800bb1c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f7ff fad6 	bl	800b020 <sync_window>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <dir_next+0x106>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e04e      	b.n	800bb1c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	899b      	ldrh	r3, [r3, #12]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	f7ff f8ff 	bl	800ac8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba90:	2300      	movs	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	6979      	ldr	r1, [r7, #20]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7ff fba4 	bl	800b1e4 <clust2sect>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	631a      	str	r2, [r3, #48]	@ 0x30
 800baa2:	e012      	b.n	800baca <dir_next+0x152>
						fs->wflag = 1;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2201      	movs	r2, #1
 800baa8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f7ff fab8 	bl	800b020 <sync_window>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <dir_next+0x142>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e030      	b.n	800bb1c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	3301      	adds	r3, #1
 800babe:	613b      	str	r3, [r7, #16]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	631a      	str	r2, [r3, #48]	@ 0x30
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	895b      	ldrh	r3, [r3, #10]
 800bace:	461a      	mov	r2, r3
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d3e6      	bcc.n	800baa4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	1ad2      	subs	r2, r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bae8:	6979      	ldr	r1, [r7, #20]
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff fb7a 	bl	800b1e4 <clust2sect>
 800baf0:	4602      	mov	r2, r0
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	899b      	ldrh	r3, [r3, #12]
 800bb06:	461a      	mov	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb0e:	fb00 f202 	mul.w	r2, r0, r2
 800bb12:	1a9b      	subs	r3, r3, r2
 800bb14:	18ca      	adds	r2, r1, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb34:	2100      	movs	r1, #0
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fe95 	bl	800b866 <dir_sdi>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d12b      	bne.n	800bb9e <dir_alloc+0x7a>
		n = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f7ff faa9 	bl	800b0a8 <move_window>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d11d      	bne.n	800bb9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2be5      	cmp	r3, #229	@ 0xe5
 800bb68:	d004      	beq.n	800bb74 <dir_alloc+0x50>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d107      	bne.n	800bb84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	3301      	adds	r3, #1
 800bb78:	613b      	str	r3, [r7, #16]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d102      	bne.n	800bb88 <dir_alloc+0x64>
 800bb82:	e00c      	b.n	800bb9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb84:	2300      	movs	r3, #0
 800bb86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb88:	2101      	movs	r1, #1
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fef4 	bl	800b978 <dir_next>
 800bb90:	4603      	mov	r3, r0
 800bb92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0d7      	beq.n	800bb4a <dir_alloc+0x26>
 800bb9a:	e000      	b.n	800bb9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d101      	bne.n	800bba8 <dir_alloc+0x84>
 800bba4:	2307      	movs	r3, #7
 800bba6:	75fb      	strb	r3, [r7, #23]
	return res;
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	331a      	adds	r3, #26
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe ffc1 	bl	800ab48 <ld_word>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d109      	bne.n	800bbe6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	3314      	adds	r3, #20
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe ffb6 	bl	800ab48 <ld_word>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	041b      	lsls	r3, r3, #16
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	331a      	adds	r3, #26
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	b292      	uxth	r2, r2
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe ffd9 	bl	800abbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d109      	bne.n	800bc28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f103 0214 	add.w	r2, r3, #20
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	0c1b      	lsrs	r3, r3, #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fe ffcb 	bl	800abbe <st_word>
	}
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff fe10 	bl	800b866 <dir_sdi>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <dir_find+0x24>
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	e03e      	b.n	800bcd2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6938      	ldr	r0, [r7, #16]
 800bc5c:	f7ff fa24 	bl	800b0a8 <move_window>
 800bc60:	4603      	mov	r3, r0
 800bc62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d12f      	bne.n	800bcca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <dir_find+0x4e>
 800bc78:	2304      	movs	r3, #4
 800bc7a:	75fb      	strb	r3, [r7, #23]
 800bc7c:	e028      	b.n	800bcd0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	330b      	adds	r3, #11
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	330b      	adds	r3, #11
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	f003 0308 	and.w	r3, r3, #8
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <dir_find+0x86>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a18      	ldr	r0, [r3, #32]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3324      	adds	r3, #36	@ 0x24
 800bca8:	220b      	movs	r2, #11
 800bcaa:	4619      	mov	r1, r3
 800bcac:	f7ff f80a 	bl	800acc4 <mem_cmp>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff fe5d 	bl	800b978 <dir_next>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0c5      	beq.n	800bc54 <dir_find+0x24>
 800bcc8:	e002      	b.n	800bcd0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bcca:	bf00      	nop
 800bccc:	e000      	b.n	800bcd0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcce:	bf00      	nop

	return res;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bce8:	2101      	movs	r1, #1
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff ff1a 	bl	800bb24 <dir_alloc>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d11c      	bne.n	800bd34 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	68b8      	ldr	r0, [r7, #8]
 800bd02:	f7ff f9d1 	bl	800b0a8 <move_window>
 800bd06:	4603      	mov	r3, r0
 800bd08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d111      	bne.n	800bd34 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	2220      	movs	r2, #32
 800bd16:	2100      	movs	r1, #0
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe ffb8 	bl	800ac8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a18      	ldr	r0, [r3, #32]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3324      	adds	r3, #36	@ 0x24
 800bd26:	220b      	movs	r2, #11
 800bd28:	4619      	mov	r1, r3
 800bd2a:	f7fe ff8f 	bl	800ac4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2201      	movs	r2, #1
 800bd32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b086      	sub	sp, #24
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d04f      	beq.n	800bdf6 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	613b      	str	r3, [r7, #16]
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bd5e:	e022      	b.n	800bda6 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	1c59      	adds	r1, r3, #1
 800bd68:	6179      	str	r1, [r7, #20]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	2b20      	cmp	r3, #32
 800bd74:	d016      	beq.n	800bda4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	2b05      	cmp	r3, #5
 800bd7a:	d101      	bne.n	800bd80 <get_fileinfo+0x42>
 800bd7c:	23e5      	movs	r3, #229	@ 0xe5
 800bd7e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	2b09      	cmp	r3, #9
 800bd84:	d106      	bne.n	800bd94 <get_fileinfo+0x56>
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	613a      	str	r2, [r7, #16]
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	4413      	add	r3, r2
 800bd90:	222e      	movs	r2, #46	@ 0x2e
 800bd92:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	613a      	str	r2, [r7, #16]
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	7bfa      	ldrb	r2, [r7, #15]
 800bda0:	725a      	strb	r2, [r3, #9]
 800bda2:	e000      	b.n	800bda6 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800bda4:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2b0a      	cmp	r3, #10
 800bdaa:	d9d9      	bls.n	800bd60 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bdac:	683a      	ldr	r2, [r7, #0]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	3309      	adds	r3, #9
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	7ada      	ldrb	r2, [r3, #11]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a1b      	ldr	r3, [r3, #32]
 800bdc6:	331c      	adds	r3, #28
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fed5 	bl	800ab78 <ld_dword>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a1b      	ldr	r3, [r3, #32]
 800bdd8:	3316      	adds	r3, #22
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fe fecc 	bl	800ab78 <ld_dword>
 800bde0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	80da      	strh	r2, [r3, #6]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	0c1b      	lsrs	r3, r3, #16
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	809a      	strh	r2, [r3, #4]
 800bdf4:	e000      	b.n	800bdf8 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bdf6:	bf00      	nop
}
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3324      	adds	r3, #36	@ 0x24
 800be14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800be16:	220b      	movs	r2, #11
 800be18:	2120      	movs	r1, #32
 800be1a:	68b8      	ldr	r0, [r7, #8]
 800be1c:	f7fe ff37 	bl	800ac8e <mem_set>
	si = i = 0; ni = 8;
 800be20:	2300      	movs	r3, #0
 800be22:	613b      	str	r3, [r7, #16]
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	61fb      	str	r3, [r7, #28]
 800be28:	2308      	movs	r3, #8
 800be2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	61fa      	str	r2, [r7, #28]
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	4413      	add	r3, r2
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be3a:	7efb      	ldrb	r3, [r7, #27]
 800be3c:	2b20      	cmp	r3, #32
 800be3e:	d94e      	bls.n	800bede <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800be40:	7efb      	ldrb	r3, [r7, #27]
 800be42:	2b2f      	cmp	r3, #47	@ 0x2f
 800be44:	d006      	beq.n	800be54 <create_name+0x54>
 800be46:	7efb      	ldrb	r3, [r7, #27]
 800be48:	2b5c      	cmp	r3, #92	@ 0x5c
 800be4a:	d110      	bne.n	800be6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be4c:	e002      	b.n	800be54 <create_name+0x54>
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	3301      	adds	r3, #1
 800be52:	61fb      	str	r3, [r7, #28]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	4413      	add	r3, r2
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800be5e:	d0f6      	beq.n	800be4e <create_name+0x4e>
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b5c      	cmp	r3, #92	@ 0x5c
 800be6a:	d0f0      	beq.n	800be4e <create_name+0x4e>
			break;
 800be6c:	e038      	b.n	800bee0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800be6e:	7efb      	ldrb	r3, [r7, #27]
 800be70:	2b2e      	cmp	r3, #46	@ 0x2e
 800be72:	d003      	beq.n	800be7c <create_name+0x7c>
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d30c      	bcc.n	800be96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	2b0b      	cmp	r3, #11
 800be80:	d002      	beq.n	800be88 <create_name+0x88>
 800be82:	7efb      	ldrb	r3, [r7, #27]
 800be84:	2b2e      	cmp	r3, #46	@ 0x2e
 800be86:	d001      	beq.n	800be8c <create_name+0x8c>
 800be88:	2306      	movs	r3, #6
 800be8a:	e044      	b.n	800bf16 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800be8c:	2308      	movs	r3, #8
 800be8e:	613b      	str	r3, [r7, #16]
 800be90:	230b      	movs	r3, #11
 800be92:	617b      	str	r3, [r7, #20]
			continue;
 800be94:	e022      	b.n	800bedc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800be96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da04      	bge.n	800bea8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be9e:	7efb      	ldrb	r3, [r7, #27]
 800bea0:	3b80      	subs	r3, #128	@ 0x80
 800bea2:	4a1f      	ldr	r2, [pc, #124]	@ (800bf20 <create_name+0x120>)
 800bea4:	5cd3      	ldrb	r3, [r2, r3]
 800bea6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bea8:	7efb      	ldrb	r3, [r7, #27]
 800beaa:	4619      	mov	r1, r3
 800beac:	481d      	ldr	r0, [pc, #116]	@ (800bf24 <create_name+0x124>)
 800beae:	f7fe ff30 	bl	800ad12 <chk_chr>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d001      	beq.n	800bebc <create_name+0xbc>
 800beb8:	2306      	movs	r3, #6
 800beba:	e02c      	b.n	800bf16 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bebc:	7efb      	ldrb	r3, [r7, #27]
 800bebe:	2b60      	cmp	r3, #96	@ 0x60
 800bec0:	d905      	bls.n	800bece <create_name+0xce>
 800bec2:	7efb      	ldrb	r3, [r7, #27]
 800bec4:	2b7a      	cmp	r3, #122	@ 0x7a
 800bec6:	d802      	bhi.n	800bece <create_name+0xce>
 800bec8:	7efb      	ldrb	r3, [r7, #27]
 800beca:	3b20      	subs	r3, #32
 800becc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	613a      	str	r2, [r7, #16]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	4413      	add	r3, r2
 800bed8:	7efa      	ldrb	r2, [r7, #27]
 800beda:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bedc:	e7a6      	b.n	800be2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bede:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	441a      	add	r2, r3
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <create_name+0xf4>
 800bef0:	2306      	movs	r3, #6
 800bef2:	e010      	b.n	800bf16 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2be5      	cmp	r3, #229	@ 0xe5
 800befa:	d102      	bne.n	800bf02 <create_name+0x102>
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2205      	movs	r2, #5
 800bf00:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf02:	7efb      	ldrb	r3, [r7, #27]
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	d801      	bhi.n	800bf0c <create_name+0x10c>
 800bf08:	2204      	movs	r2, #4
 800bf0a:	e000      	b.n	800bf0e <create_name+0x10e>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	330b      	adds	r3, #11
 800bf12:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bf14:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	08010328 	.word	0x08010328
 800bf24:	080102a4 	.word	0x080102a4

0800bf28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bf3c:	e002      	b.n	800bf44 <follow_path+0x1c>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	3301      	adds	r3, #1
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	2b2f      	cmp	r3, #47	@ 0x2f
 800bf4a:	d0f8      	beq.n	800bf3e <follow_path+0x16>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b5c      	cmp	r3, #92	@ 0x5c
 800bf52:	d0f4      	beq.n	800bf3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	2200      	movs	r2, #0
 800bf58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b1f      	cmp	r3, #31
 800bf60:	d80a      	bhi.n	800bf78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2280      	movs	r2, #128	@ 0x80
 800bf66:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7ff fc7a 	bl	800b866 <dir_sdi>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]
 800bf76:	e048      	b.n	800c00a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf78:	463b      	mov	r3, r7
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff ff3f 	bl	800be00 <create_name>
 800bf82:	4603      	mov	r3, r0
 800bf84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d139      	bne.n	800c000 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fe4f 	bl	800bc30 <dir_find>
 800bf92:	4603      	mov	r3, r0
 800bf94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bf9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00a      	beq.n	800bfba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d12c      	bne.n	800c004 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bfaa:	7afb      	ldrb	r3, [r7, #11]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d127      	bne.n	800c004 <follow_path+0xdc>
 800bfb4:	2305      	movs	r3, #5
 800bfb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bfb8:	e024      	b.n	800c004 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	f003 0304 	and.w	r3, r3, #4
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d121      	bne.n	800c008 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	799b      	ldrb	r3, [r3, #6]
 800bfc8:	f003 0310 	and.w	r3, r3, #16
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bfd0:	2305      	movs	r3, #5
 800bfd2:	75fb      	strb	r3, [r7, #23]
 800bfd4:	e019      	b.n	800c00a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	8992      	ldrh	r2, [r2, #12]
 800bfe4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfe8:	fb00 f202 	mul.w	r2, r0, r2
 800bfec:	1a9b      	subs	r3, r3, r2
 800bfee:	440b      	add	r3, r1
 800bff0:	4619      	mov	r1, r3
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f7ff fddd 	bl	800bbb2 <ld_clust>
 800bff8:	4602      	mov	r2, r0
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bffe:	e7bb      	b.n	800bf78 <follow_path+0x50>
			if (res != FR_OK) break;
 800c000:	bf00      	nop
 800c002:	e002      	b.n	800c00a <follow_path+0xe2>
				break;
 800c004:	bf00      	nop
 800c006:	e000      	b.n	800c00a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c008:	bf00      	nop
			}
		}
	}

	return res;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c01c:	f04f 33ff 	mov.w	r3, #4294967295
 800c020:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d031      	beq.n	800c08e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	e002      	b.n	800c038 <get_ldnumber+0x24>
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	3301      	adds	r3, #1
 800c036:	617b      	str	r3, [r7, #20]
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b20      	cmp	r3, #32
 800c03e:	d903      	bls.n	800c048 <get_ldnumber+0x34>
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2b3a      	cmp	r3, #58	@ 0x3a
 800c046:	d1f4      	bne.n	800c032 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	2b3a      	cmp	r3, #58	@ 0x3a
 800c04e:	d11c      	bne.n	800c08a <get_ldnumber+0x76>
			tp = *path;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	60fa      	str	r2, [r7, #12]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	3b30      	subs	r3, #48	@ 0x30
 800c060:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b09      	cmp	r3, #9
 800c066:	d80e      	bhi.n	800c086 <get_ldnumber+0x72>
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d10a      	bne.n	800c086 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d107      	bne.n	800c086 <get_ldnumber+0x72>
					vol = (int)i;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	3301      	adds	r3, #1
 800c07e:	617b      	str	r3, [r7, #20]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	e002      	b.n	800c090 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c08a:	2300      	movs	r3, #0
 800c08c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c08e:	693b      	ldr	r3, [r7, #16]
}
 800c090:	4618      	mov	r0, r3
 800c092:	371c      	adds	r7, #28
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	70da      	strb	r2, [r3, #3]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7fe fff6 	bl	800b0a8 <move_window>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <check_fs+0x2a>
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	e038      	b.n	800c138 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3334      	adds	r3, #52	@ 0x34
 800c0ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe fd3a 	bl	800ab48 <ld_word>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d001      	beq.n	800c0e4 <check_fs+0x48>
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e029      	b.n	800c138 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0ea:	2be9      	cmp	r3, #233	@ 0xe9
 800c0ec:	d009      	beq.n	800c102 <check_fs+0x66>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0f4:	2beb      	cmp	r3, #235	@ 0xeb
 800c0f6:	d11e      	bne.n	800c136 <check_fs+0x9a>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c0fe:	2b90      	cmp	r3, #144	@ 0x90
 800c100:	d119      	bne.n	800c136 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	3334      	adds	r3, #52	@ 0x34
 800c106:	3336      	adds	r3, #54	@ 0x36
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fd35 	bl	800ab78 <ld_dword>
 800c10e:	4603      	mov	r3, r0
 800c110:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c114:	4a0a      	ldr	r2, [pc, #40]	@ (800c140 <check_fs+0xa4>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d101      	bne.n	800c11e <check_fs+0x82>
 800c11a:	2300      	movs	r3, #0
 800c11c:	e00c      	b.n	800c138 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3334      	adds	r3, #52	@ 0x34
 800c122:	3352      	adds	r3, #82	@ 0x52
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe fd27 	bl	800ab78 <ld_dword>
 800c12a:	4603      	mov	r3, r0
 800c12c:	4a05      	ldr	r2, [pc, #20]	@ (800c144 <check_fs+0xa8>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d101      	bne.n	800c136 <check_fs+0x9a>
 800c132:	2300      	movs	r3, #0
 800c134:	e000      	b.n	800c138 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c136:	2302      	movs	r3, #2
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	00544146 	.word	0x00544146
 800c144:	33544146 	.word	0x33544146

0800c148 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b096      	sub	sp, #88	@ 0x58
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4613      	mov	r3, r2
 800c154:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f7ff ff59 	bl	800c014 <get_ldnumber>
 800c162:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c166:	2b00      	cmp	r3, #0
 800c168:	da01      	bge.n	800c16e <find_volume+0x26>
 800c16a:	230b      	movs	r3, #11
 800c16c:	e262      	b.n	800c634 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c16e:	4a9f      	ldr	r2, [pc, #636]	@ (800c3ec <find_volume+0x2a4>)
 800c170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c176:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <find_volume+0x3a>
 800c17e:	230c      	movs	r3, #12
 800c180:	e258      	b.n	800c634 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c186:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	f023 0301 	bic.w	r3, r3, #1
 800c18e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d01a      	beq.n	800c1ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	785b      	ldrb	r3, [r3, #1]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fe fc35 	bl	800aa0c <disk_status>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10c      	bne.n	800c1ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d007      	beq.n	800c1ca <find_volume+0x82>
 800c1ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1be:	f003 0304 	and.w	r3, r3, #4
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c1c6:	230a      	movs	r3, #10
 800c1c8:	e234      	b.n	800c634 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e232      	b.n	800c634 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1de:	785b      	ldrb	r3, [r3, #1]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fc2d 	bl	800aa40 <disk_initialize>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c1ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	e21b      	b.n	800c634 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d007      	beq.n	800c212 <find_volume+0xca>
 800c202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c206:	f003 0304 	and.w	r3, r3, #4
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c20e:	230a      	movs	r3, #10
 800c210:	e210      	b.n	800c634 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c214:	7858      	ldrb	r0, [r3, #1]
 800c216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c218:	330c      	adds	r3, #12
 800c21a:	461a      	mov	r2, r3
 800c21c:	2102      	movs	r1, #2
 800c21e:	f7fe fc75 	bl	800ab0c <disk_ioctl>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <find_volume+0xe4>
 800c228:	2301      	movs	r3, #1
 800c22a:	e203      	b.n	800c634 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22e:	899b      	ldrh	r3, [r3, #12]
 800c230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c234:	d80d      	bhi.n	800c252 <find_volume+0x10a>
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	899b      	ldrh	r3, [r3, #12]
 800c23a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c23e:	d308      	bcc.n	800c252 <find_volume+0x10a>
 800c240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c242:	899b      	ldrh	r3, [r3, #12]
 800c244:	461a      	mov	r2, r3
 800c246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c248:	899b      	ldrh	r3, [r3, #12]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	4013      	ands	r3, r2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <find_volume+0x10e>
 800c252:	2301      	movs	r3, #1
 800c254:	e1ee      	b.n	800c634 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c25a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c25c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c25e:	f7ff ff1d 	bl	800c09c <check_fs>
 800c262:	4603      	mov	r3, r0
 800c264:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c268:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d149      	bne.n	800c304 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c270:	2300      	movs	r3, #0
 800c272:	643b      	str	r3, [r7, #64]	@ 0x40
 800c274:	e01e      	b.n	800c2b4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c278:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c27e:	011b      	lsls	r3, r3, #4
 800c280:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c284:	4413      	add	r3, r2
 800c286:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28a:	3304      	adds	r3, #4
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d006      	beq.n	800c2a0 <find_volume+0x158>
 800c292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c294:	3308      	adds	r3, #8
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe fc6e 	bl	800ab78 <ld_dword>
 800c29c:	4602      	mov	r2, r0
 800c29e:	e000      	b.n	800c2a2 <find_volume+0x15a>
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	3358      	adds	r3, #88	@ 0x58
 800c2a8:	443b      	add	r3, r7
 800c2aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d9dd      	bls.n	800c276 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <find_volume+0x182>
 800c2c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	3358      	adds	r3, #88	@ 0x58
 800c2d0:	443b      	add	r3, r7
 800c2d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c2d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c2d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d005      	beq.n	800c2ea <find_volume+0x1a2>
 800c2de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c2e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2e2:	f7ff fedb 	bl	800c09c <check_fs>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	e000      	b.n	800c2ec <find_volume+0x1a4>
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d905      	bls.n	800c304 <find_volume+0x1bc>
 800c2f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c300:	2b03      	cmp	r3, #3
 800c302:	d9e2      	bls.n	800c2ca <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c304:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d101      	bne.n	800c310 <find_volume+0x1c8>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e191      	b.n	800c634 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c310:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c314:	2b01      	cmp	r3, #1
 800c316:	d901      	bls.n	800c31c <find_volume+0x1d4>
 800c318:	230d      	movs	r3, #13
 800c31a:	e18b      	b.n	800c634 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31e:	3334      	adds	r3, #52	@ 0x34
 800c320:	330b      	adds	r3, #11
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe fc10 	bl	800ab48 <ld_word>
 800c328:	4603      	mov	r3, r0
 800c32a:	461a      	mov	r2, r3
 800c32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32e:	899b      	ldrh	r3, [r3, #12]
 800c330:	429a      	cmp	r2, r3
 800c332:	d001      	beq.n	800c338 <find_volume+0x1f0>
 800c334:	230d      	movs	r3, #13
 800c336:	e17d      	b.n	800c634 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33a:	3334      	adds	r3, #52	@ 0x34
 800c33c:	3316      	adds	r3, #22
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fe fc02 	bl	800ab48 <ld_word>
 800c344:	4603      	mov	r3, r0
 800c346:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <find_volume+0x214>
 800c34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c350:	3334      	adds	r3, #52	@ 0x34
 800c352:	3324      	adds	r3, #36	@ 0x24
 800c354:	4618      	mov	r0, r3
 800c356:	f7fe fc0f 	bl	800ab78 <ld_dword>
 800c35a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c360:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c364:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36e:	789b      	ldrb	r3, [r3, #2]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d005      	beq.n	800c380 <find_volume+0x238>
 800c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c376:	789b      	ldrb	r3, [r3, #2]
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d001      	beq.n	800c380 <find_volume+0x238>
 800c37c:	230d      	movs	r3, #13
 800c37e:	e159      	b.n	800c634 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	789b      	ldrb	r3, [r3, #2]
 800c384:	461a      	mov	r2, r3
 800c386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c394:	461a      	mov	r2, r3
 800c396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c398:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	895b      	ldrh	r3, [r3, #10]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d008      	beq.n	800c3b4 <find_volume+0x26c>
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a4:	895b      	ldrh	r3, [r3, #10]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3aa:	895b      	ldrh	r3, [r3, #10]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4013      	ands	r3, r2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <find_volume+0x270>
 800c3b4:	230d      	movs	r3, #13
 800c3b6:	e13d      	b.n	800c634 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ba:	3334      	adds	r3, #52	@ 0x34
 800c3bc:	3311      	adds	r3, #17
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fbc2 	bl	800ab48 <ld_word>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ce:	891b      	ldrh	r3, [r3, #8]
 800c3d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3d2:	8992      	ldrh	r2, [r2, #12]
 800c3d4:	0952      	lsrs	r2, r2, #5
 800c3d6:	b292      	uxth	r2, r2
 800c3d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3dc:	fb01 f202 	mul.w	r2, r1, r2
 800c3e0:	1a9b      	subs	r3, r3, r2
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <find_volume+0x2a8>
 800c3e8:	230d      	movs	r3, #13
 800c3ea:	e123      	b.n	800c634 <find_volume+0x4ec>
 800c3ec:	20005680 	.word	0x20005680

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f2:	3334      	adds	r3, #52	@ 0x34
 800c3f4:	3313      	adds	r3, #19
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fba6 	bl	800ab48 <ld_word>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <find_volume+0x2cc>
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	3334      	adds	r3, #52	@ 0x34
 800c40a:	3320      	adds	r3, #32
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fe fbb3 	bl	800ab78 <ld_dword>
 800c412:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	3334      	adds	r3, #52	@ 0x34
 800c418:	330e      	adds	r3, #14
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fb94 	bl	800ab48 <ld_word>
 800c420:	4603      	mov	r3, r0
 800c422:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c424:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <find_volume+0x2e6>
 800c42a:	230d      	movs	r3, #13
 800c42c:	e102      	b.n	800c634 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c42e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c432:	4413      	add	r3, r2
 800c434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c436:	8911      	ldrh	r1, [r2, #8]
 800c438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c43a:	8992      	ldrh	r2, [r2, #12]
 800c43c:	0952      	lsrs	r2, r2, #5
 800c43e:	b292      	uxth	r2, r2
 800c440:	fbb1 f2f2 	udiv	r2, r1, r2
 800c444:	b292      	uxth	r2, r2
 800c446:	4413      	add	r3, r2
 800c448:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c44a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44e:	429a      	cmp	r2, r3
 800c450:	d201      	bcs.n	800c456 <find_volume+0x30e>
 800c452:	230d      	movs	r3, #13
 800c454:	e0ee      	b.n	800c634 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c45e:	8952      	ldrh	r2, [r2, #10]
 800c460:	fbb3 f3f2 	udiv	r3, r3, r2
 800c464:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <find_volume+0x328>
 800c46c:	230d      	movs	r3, #13
 800c46e:	e0e1      	b.n	800c634 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c470:	2303      	movs	r3, #3
 800c472:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c478:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d802      	bhi.n	800c486 <find_volume+0x33e>
 800c480:	2302      	movs	r3, #2
 800c482:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c488:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d802      	bhi.n	800c496 <find_volume+0x34e>
 800c490:	2301      	movs	r3, #1
 800c492:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	1c9a      	adds	r2, r3, #2
 800c49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c4a2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c4a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c4a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4a8:	441a      	add	r2, r3
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c4ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b2:	441a      	add	r2, r3
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b6:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d11e      	bne.n	800c4fe <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c2:	3334      	adds	r3, #52	@ 0x34
 800c4c4:	332a      	adds	r3, #42	@ 0x2a
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe fb3e 	bl	800ab48 <ld_word>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <find_volume+0x38e>
 800c4d2:	230d      	movs	r3, #13
 800c4d4:	e0ae      	b.n	800c634 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d8:	891b      	ldrh	r3, [r3, #8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <find_volume+0x39a>
 800c4de:	230d      	movs	r3, #13
 800c4e0:	e0a8      	b.n	800c634 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e4:	3334      	adds	r3, #52	@ 0x34
 800c4e6:	332c      	adds	r3, #44	@ 0x2c
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe fb45 	bl	800ab78 <ld_dword>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4fc:	e01f      	b.n	800c53e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c500:	891b      	ldrh	r3, [r3, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d101      	bne.n	800c50a <find_volume+0x3c2>
 800c506:	230d      	movs	r3, #13
 800c508:	e094      	b.n	800c634 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c50e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c510:	441a      	add	r2, r3
 800c512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c514:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c516:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d103      	bne.n	800c526 <find_volume+0x3de>
 800c51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	e00a      	b.n	800c53c <find_volume+0x3f4>
 800c526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c528:	699a      	ldr	r2, [r3, #24]
 800c52a:	4613      	mov	r3, r2
 800c52c:	005b      	lsls	r3, r3, #1
 800c52e:	4413      	add	r3, r2
 800c530:	085a      	lsrs	r2, r3, #1
 800c532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c53c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c540:	69da      	ldr	r2, [r3, #28]
 800c542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c544:	899b      	ldrh	r3, [r3, #12]
 800c546:	4619      	mov	r1, r3
 800c548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c54a:	440b      	add	r3, r1
 800c54c:	3b01      	subs	r3, #1
 800c54e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c550:	8989      	ldrh	r1, [r1, #12]
 800c552:	fbb3 f3f1 	udiv	r3, r3, r1
 800c556:	429a      	cmp	r2, r3
 800c558:	d201      	bcs.n	800c55e <find_volume+0x416>
 800c55a:	230d      	movs	r3, #13
 800c55c:	e06a      	b.n	800c634 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c560:	f04f 32ff 	mov.w	r2, #4294967295
 800c564:	615a      	str	r2, [r3, #20]
 800c566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c568:	695a      	ldr	r2, [r3, #20]
 800c56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c570:	2280      	movs	r2, #128	@ 0x80
 800c572:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c574:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d149      	bne.n	800c610 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57e:	3334      	adds	r3, #52	@ 0x34
 800c580:	3330      	adds	r3, #48	@ 0x30
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe fae0 	bl	800ab48 <ld_word>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d140      	bne.n	800c610 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c58e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c590:	3301      	adds	r3, #1
 800c592:	4619      	mov	r1, r3
 800c594:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c596:	f7fe fd87 	bl	800b0a8 <move_window>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d137      	bne.n	800c610 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a8:	3334      	adds	r3, #52	@ 0x34
 800c5aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe faca 	bl	800ab48 <ld_word>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d127      	bne.n	800c610 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	3334      	adds	r3, #52	@ 0x34
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fad7 	bl	800ab78 <ld_dword>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	4a1b      	ldr	r2, [pc, #108]	@ (800c63c <find_volume+0x4f4>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d11e      	bne.n	800c610 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d4:	3334      	adds	r3, #52	@ 0x34
 800c5d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe facc 	bl	800ab78 <ld_dword>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	4a17      	ldr	r2, [pc, #92]	@ (800c640 <find_volume+0x4f8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d113      	bne.n	800c610 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ea:	3334      	adds	r3, #52	@ 0x34
 800c5ec:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe fac1 	bl	800ab78 <ld_dword>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fe:	3334      	adds	r3, #52	@ 0x34
 800c600:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c604:	4618      	mov	r0, r3
 800c606:	f7fe fab7 	bl	800ab78 <ld_dword>
 800c60a:	4602      	mov	r2, r0
 800c60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c612:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c616:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c618:	4b0a      	ldr	r3, [pc, #40]	@ (800c644 <find_volume+0x4fc>)
 800c61a:	881b      	ldrh	r3, [r3, #0]
 800c61c:	3301      	adds	r3, #1
 800c61e:	b29a      	uxth	r2, r3
 800c620:	4b08      	ldr	r3, [pc, #32]	@ (800c644 <find_volume+0x4fc>)
 800c622:	801a      	strh	r2, [r3, #0]
 800c624:	4b07      	ldr	r3, [pc, #28]	@ (800c644 <find_volume+0x4fc>)
 800c626:	881a      	ldrh	r2, [r3, #0]
 800c628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c62c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c62e:	f7fe fcd3 	bl	800afd8 <clear_lock>
#endif
	return FR_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3758      	adds	r7, #88	@ 0x58
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	41615252 	.word	0x41615252
 800c640:	61417272 	.word	0x61417272
 800c644:	20005684 	.word	0x20005684

0800c648 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c652:	2309      	movs	r3, #9
 800c654:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01c      	beq.n	800c696 <validate+0x4e>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d018      	beq.n	800c696 <validate+0x4e>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d013      	beq.n	800c696 <validate+0x4e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	889a      	ldrh	r2, [r3, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	88db      	ldrh	r3, [r3, #6]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d10c      	bne.n	800c696 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	785b      	ldrb	r3, [r3, #1]
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe f9c2 	bl	800aa0c <disk_status>
 800c688:	4603      	mov	r3, r0
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <validate+0x4e>
			res = FR_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <validate+0x5a>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	e000      	b.n	800c6a4 <validate+0x5c>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	6013      	str	r3, [r2, #0]
	return res;
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
	...

0800c6b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c6c6:	f107 0310 	add.w	r3, r7, #16
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fca2 	bl	800c014 <get_ldnumber>
 800c6d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	da01      	bge.n	800c6dc <f_mount+0x28>
 800c6d8:	230b      	movs	r3, #11
 800c6da:	e02b      	b.n	800c734 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c6dc:	4a17      	ldr	r2, [pc, #92]	@ (800c73c <f_mount+0x88>)
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c6ec:	69b8      	ldr	r0, [r7, #24]
 800c6ee:	f7fe fc73 	bl	800afd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	490d      	ldr	r1, [pc, #52]	@ (800c73c <f_mount+0x88>)
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <f_mount+0x66>
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d001      	beq.n	800c71e <f_mount+0x6a>
 800c71a:	2300      	movs	r3, #0
 800c71c:	e00a      	b.n	800c734 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c71e:	f107 010c 	add.w	r1, r7, #12
 800c722:	f107 0308 	add.w	r3, r7, #8
 800c726:	2200      	movs	r2, #0
 800c728:	4618      	mov	r0, r3
 800c72a:	f7ff fd0d 	bl	800c148 <find_volume>
 800c72e:	4603      	mov	r3, r0
 800c730:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c732:	7dfb      	ldrb	r3, [r7, #23]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3720      	adds	r7, #32
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20005680 	.word	0x20005680

0800c740 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b098      	sub	sp, #96	@ 0x60
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d101      	bne.n	800c758 <f_open+0x18>
 800c754:	2309      	movs	r3, #9
 800c756:	e1b7      	b.n	800cac8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c758:	79fb      	ldrb	r3, [r7, #7]
 800c75a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c75e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c760:	79fa      	ldrb	r2, [r7, #7]
 800c762:	f107 0110 	add.w	r1, r7, #16
 800c766:	f107 0308 	add.w	r3, r7, #8
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff fcec 	bl	800c148 <find_volume>
 800c770:	4603      	mov	r3, r0
 800c772:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c776:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f040 819b 	bne.w	800cab6 <f_open+0x376>
		dj.obj.fs = fs;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	f107 0314 	add.w	r3, r7, #20
 800c78a:	4611      	mov	r1, r2
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7ff fbcb 	bl	800bf28 <follow_path>
 800c792:	4603      	mov	r3, r0
 800c794:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c798:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d118      	bne.n	800c7d2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c7a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7a4:	b25b      	sxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	da03      	bge.n	800c7b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c7aa:	2306      	movs	r3, #6
 800c7ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c7b0:	e00f      	b.n	800c7d2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	bf8c      	ite	hi
 800c7b8:	2301      	movhi	r3, #1
 800c7ba:	2300      	movls	r3, #0
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	461a      	mov	r2, r3
 800c7c0:	f107 0314 	add.w	r3, r7, #20
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fe fabe 	bl	800ad48 <chk_lock>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	f003 031c 	and.w	r3, r3, #28
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d07f      	beq.n	800c8dc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c7dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d017      	beq.n	800c814 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c7e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d10e      	bne.n	800c80a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c7ec:	f7fe fb08 	bl	800ae00 <enq_lock>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d006      	beq.n	800c804 <f_open+0xc4>
 800c7f6:	f107 0314 	add.w	r3, r7, #20
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff fa6d 	bl	800bcda <dir_register>
 800c800:	4603      	mov	r3, r0
 800c802:	e000      	b.n	800c806 <f_open+0xc6>
 800c804:	2312      	movs	r3, #18
 800c806:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	f043 0308 	orr.w	r3, r3, #8
 800c810:	71fb      	strb	r3, [r7, #7]
 800c812:	e010      	b.n	800c836 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c814:	7ebb      	ldrb	r3, [r7, #26]
 800c816:	f003 0311 	and.w	r3, r3, #17
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <f_open+0xe6>
					res = FR_DENIED;
 800c81e:	2307      	movs	r3, #7
 800c820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c824:	e007      	b.n	800c836 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c826:	79fb      	ldrb	r3, [r7, #7]
 800c828:	f003 0304 	and.w	r3, r3, #4
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d002      	beq.n	800c836 <f_open+0xf6>
 800c830:	2308      	movs	r3, #8
 800c832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c836:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d168      	bne.n	800c910 <f_open+0x1d0>
 800c83e:	79fb      	ldrb	r3, [r7, #7]
 800c840:	f003 0308 	and.w	r3, r3, #8
 800c844:	2b00      	cmp	r3, #0
 800c846:	d063      	beq.n	800c910 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c848:	f7fd ff74 	bl	800a734 <get_fattime>
 800c84c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c850:	330e      	adds	r3, #14
 800c852:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c854:	4618      	mov	r0, r3
 800c856:	f7fe f9cd 	bl	800abf4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85c:	3316      	adds	r3, #22
 800c85e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe f9c7 	bl	800abf4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c868:	330b      	adds	r3, #11
 800c86a:	2220      	movs	r2, #32
 800c86c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c872:	4611      	mov	r1, r2
 800c874:	4618      	mov	r0, r3
 800c876:	f7ff f99c 	bl	800bbb2 <ld_clust>
 800c87a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c880:	2200      	movs	r2, #0
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff f9b4 	bl	800bbf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88a:	331c      	adds	r3, #28
 800c88c:	2100      	movs	r1, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe f9b0 	bl	800abf4 <st_dword>
					fs->wflag = 1;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	2201      	movs	r2, #1
 800c898:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c89a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d037      	beq.n	800c910 <f_open+0x1d0>
						dw = fs->winsect;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c8a6:	f107 0314 	add.w	r3, r7, #20
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe fea4 	bl	800b5fc <remove_chain>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c8ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d126      	bne.n	800c910 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fe fbee 	bl	800b0a8 <move_window>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8d6:	3a01      	subs	r2, #1
 800c8d8:	611a      	str	r2, [r3, #16]
 800c8da:	e019      	b.n	800c910 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c8dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d115      	bne.n	800c910 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c8e4:	7ebb      	ldrb	r3, [r7, #26]
 800c8e6:	f003 0310 	and.w	r3, r3, #16
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d003      	beq.n	800c8f6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c8ee:	2304      	movs	r3, #4
 800c8f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c8f4:	e00c      	b.n	800c910 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c8f6:	79fb      	ldrb	r3, [r7, #7]
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d007      	beq.n	800c910 <f_open+0x1d0>
 800c900:	7ebb      	ldrb	r3, [r7, #26]
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <f_open+0x1d0>
						res = FR_DENIED;
 800c90a:	2307      	movs	r3, #7
 800c90c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c914:	2b00      	cmp	r3, #0
 800c916:	d126      	bne.n	800c966 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c918:	79fb      	ldrb	r3, [r7, #7]
 800c91a:	f003 0308 	and.w	r3, r3, #8
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d003      	beq.n	800c92a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c922:	79fb      	ldrb	r3, [r7, #7]
 800c924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c928:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c938:	79fb      	ldrb	r3, [r7, #7]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	bf8c      	ite	hi
 800c93e:	2301      	movhi	r3, #1
 800c940:	2300      	movls	r3, #0
 800c942:	b2db      	uxtb	r3, r3
 800c944:	461a      	mov	r2, r3
 800c946:	f107 0314 	add.w	r3, r7, #20
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fa79 	bl	800ae44 <inc_lock>
 800c952:	4602      	mov	r2, r0
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <f_open+0x226>
 800c960:	2302      	movs	r3, #2
 800c962:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c966:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 80a3 	bne.w	800cab6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff f91b 	bl	800bbb2 <ld_clust>
 800c97c:	4602      	mov	r2, r0
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c984:	331c      	adds	r3, #28
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe f8f6 	bl	800ab78 <ld_dword>
 800c98c:	4602      	mov	r2, r0
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	88da      	ldrh	r2, [r3, #6]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	79fa      	ldrb	r2, [r7, #7]
 800c9aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3330      	adds	r3, #48	@ 0x30
 800c9c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe f960 	bl	800ac8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c9ce:	79fb      	ldrb	r3, [r7, #7]
 800c9d0:	f003 0320 	and.w	r3, r3, #32
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d06e      	beq.n	800cab6 <f_open+0x376>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d06a      	beq.n	800cab6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68da      	ldr	r2, [r3, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	895b      	ldrh	r3, [r3, #10]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	899b      	ldrh	r3, [r3, #12]
 800c9f2:	fb02 f303 	mul.w	r3, r2, r3
 800c9f6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca04:	e016      	b.n	800ca34 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe fc09 	bl	800b222 <get_fat>
 800ca10:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ca12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d802      	bhi.n	800ca1e <f_open+0x2de>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ca1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca24:	d102      	bne.n	800ca2c <f_open+0x2ec>
 800ca26:	2301      	movs	r3, #1
 800ca28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d103      	bne.n	800ca44 <f_open+0x304>
 800ca3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d8e0      	bhi.n	800ca06 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ca4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d131      	bne.n	800cab6 <f_open+0x376>
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	899b      	ldrh	r3, [r3, #12]
 800ca56:	461a      	mov	r2, r3
 800ca58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca5e:	fb01 f202 	mul.w	r2, r1, r2
 800ca62:	1a9b      	subs	r3, r3, r2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d026      	beq.n	800cab6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fe fbb9 	bl	800b1e4 <clust2sect>
 800ca72:	6478      	str	r0, [r7, #68]	@ 0x44
 800ca74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d103      	bne.n	800ca82 <f_open+0x342>
						res = FR_INT_ERR;
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca80:	e019      	b.n	800cab6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	899b      	ldrh	r3, [r3, #12]
 800ca86:	461a      	mov	r2, r3
 800ca88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca90:	441a      	add	r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	7858      	ldrb	r0, [r3, #1]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6a1a      	ldr	r2, [r3, #32]
 800caa4:	2301      	movs	r3, #1
 800caa6:	f7fd fff1 	bl	800aa8c <disk_read>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <f_open+0x376>
 800cab0:	2301      	movs	r3, #1
 800cab2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cab6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <f_open+0x384>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cac4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3760      	adds	r7, #96	@ 0x60
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08e      	sub	sp, #56	@ 0x38
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f107 0214 	add.w	r2, r7, #20
 800caee:	4611      	mov	r1, r2
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff fda9 	bl	800c648 <validate>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cafc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d107      	bne.n	800cb14 <f_read+0x44>
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	7d5b      	ldrb	r3, [r3, #21]
 800cb08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <f_read+0x4a>
 800cb14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb18:	e135      	b.n	800cd86 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	7d1b      	ldrb	r3, [r3, #20]
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <f_read+0x5a>
 800cb26:	2307      	movs	r3, #7
 800cb28:	e12d      	b.n	800cd86 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	68da      	ldr	r2, [r3, #12]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	f240 811e 	bls.w	800cd7c <f_read+0x2ac>
 800cb40:	6a3b      	ldr	r3, [r7, #32]
 800cb42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cb44:	e11a      	b.n	800cd7c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	697a      	ldr	r2, [r7, #20]
 800cb4c:	8992      	ldrh	r2, [r2, #12]
 800cb4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb52:	fb01 f202 	mul.w	r2, r1, r2
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f040 80d5 	bne.w	800cd08 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	697a      	ldr	r2, [r7, #20]
 800cb64:	8992      	ldrh	r2, [r2, #12]
 800cb66:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	8952      	ldrh	r2, [r2, #10]
 800cb6e:	3a01      	subs	r2, #1
 800cb70:	4013      	ands	r3, r2
 800cb72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d12f      	bne.n	800cbda <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d103      	bne.n	800cb8a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb88:	e013      	b.n	800cbb2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d007      	beq.n	800cba2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	4619      	mov	r1, r3
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7fe fe2c 	bl	800b7f6 <clmt_clust>
 800cb9e:	6338      	str	r0, [r7, #48]	@ 0x30
 800cba0:	e007      	b.n	800cbb2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	69db      	ldr	r3, [r3, #28]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7fe fb39 	bl	800b222 <get_fat>
 800cbb0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d804      	bhi.n	800cbc2 <f_read+0xf2>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	755a      	strb	r2, [r3, #21]
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e0e1      	b.n	800cd86 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc8:	d104      	bne.n	800cbd4 <f_read+0x104>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	755a      	strb	r2, [r3, #21]
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e0d8      	b.n	800cd86 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbd8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	69db      	ldr	r3, [r3, #28]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	f7fe fafe 	bl	800b1e4 <clust2sect>
 800cbe8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <f_read+0x12a>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	755a      	strb	r2, [r3, #21]
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	e0c5      	b.n	800cd86 <f_read+0x2b6>
			sect += csect;
 800cbfa:	69ba      	ldr	r2, [r7, #24]
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	4413      	add	r3, r2
 800cc00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	899b      	ldrh	r3, [r3, #12]
 800cc06:	461a      	mov	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d041      	beq.n	800cc9a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cc16:	69fa      	ldr	r2, [r7, #28]
 800cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1a:	4413      	add	r3, r2
 800cc1c:	697a      	ldr	r2, [r7, #20]
 800cc1e:	8952      	ldrh	r2, [r2, #10]
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d905      	bls.n	800cc30 <f_read+0x160>
					cc = fs->csize - csect;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	895b      	ldrh	r3, [r3, #10]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	7858      	ldrb	r0, [r3, #1]
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	69ba      	ldr	r2, [r7, #24]
 800cc38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc3a:	f7fd ff27 	bl	800aa8c <disk_read>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d004      	beq.n	800cc4e <f_read+0x17e>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2201      	movs	r2, #1
 800cc48:	755a      	strb	r2, [r3, #21]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e09b      	b.n	800cd86 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	7d1b      	ldrb	r3, [r3, #20]
 800cc52:	b25b      	sxtb	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da18      	bge.n	800cc8a <f_read+0x1ba>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6a1a      	ldr	r2, [r3, #32]
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d911      	bls.n	800cc8a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6a1a      	ldr	r2, [r3, #32]
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	8992      	ldrh	r2, [r2, #12]
 800cc72:	fb02 f303 	mul.w	r3, r2, r3
 800cc76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc78:	18d0      	adds	r0, r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	899b      	ldrh	r3, [r3, #12]
 800cc84:	461a      	mov	r2, r3
 800cc86:	f7fd ffe1 	bl	800ac4c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	899b      	ldrh	r3, [r3, #12]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc92:	fb02 f303 	mul.w	r3, r2, r3
 800cc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cc98:	e05c      	b.n	800cd54 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	69ba      	ldr	r2, [r7, #24]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d02e      	beq.n	800cd02 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	7d1b      	ldrb	r3, [r3, #20]
 800cca8:	b25b      	sxtb	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	da18      	bge.n	800cce0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	7858      	ldrb	r0, [r3, #1]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6a1a      	ldr	r2, [r3, #32]
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	f7fd ff05 	bl	800aacc <disk_write>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d004      	beq.n	800ccd2 <f_read+0x202>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2201      	movs	r2, #1
 800cccc:	755a      	strb	r2, [r3, #21]
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e059      	b.n	800cd86 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	7d1b      	ldrb	r3, [r3, #20]
 800ccd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccda:	b2da      	uxtb	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	7858      	ldrb	r0, [r3, #1]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccea:	2301      	movs	r3, #1
 800ccec:	69ba      	ldr	r2, [r7, #24]
 800ccee:	f7fd fecd 	bl	800aa8c <disk_read>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d004      	beq.n	800cd02 <f_read+0x232>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	755a      	strb	r2, [r3, #21]
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e041      	b.n	800cd86 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	69ba      	ldr	r2, [r7, #24]
 800cd06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	899b      	ldrh	r3, [r3, #12]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	8992      	ldrh	r2, [r2, #12]
 800cd16:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd1a:	fb01 f202 	mul.w	r2, r1, r2
 800cd1e:	1a9b      	subs	r3, r3, r2
 800cd20:	1ac3      	subs	r3, r0, r3
 800cd22:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cd24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d901      	bls.n	800cd30 <f_read+0x260>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	8992      	ldrh	r2, [r2, #12]
 800cd3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd42:	fb00 f202 	mul.w	r2, r0, r2
 800cd46:	1a9b      	subs	r3, r3, r2
 800cd48:	440b      	add	r3, r1
 800cd4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd50:	f7fd ff7c 	bl	800ac4c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cd54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd58:	4413      	add	r3, r2
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	699a      	ldr	r2, [r3, #24]
 800cd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd62:	441a      	add	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	619a      	str	r2, [r3, #24]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6e:	441a      	add	r2, r3
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f47f aee1 	bne.w	800cb46 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3738      	adds	r7, #56	@ 0x38
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b08c      	sub	sp, #48	@ 0x30
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	60f8      	str	r0, [r7, #12]
 800cd96:	60b9      	str	r1, [r7, #8]
 800cd98:	607a      	str	r2, [r7, #4]
 800cd9a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2200      	movs	r2, #0
 800cda4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f107 0210 	add.w	r2, r7, #16
 800cdac:	4611      	mov	r1, r2
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff fc4a 	bl	800c648 <validate>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cdba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d107      	bne.n	800cdd2 <f_write+0x44>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	7d5b      	ldrb	r3, [r3, #21]
 800cdc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cdca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <f_write+0x4a>
 800cdd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cdd6:	e16a      	b.n	800d0ae <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	7d1b      	ldrb	r3, [r3, #20]
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <f_write+0x5a>
 800cde4:	2307      	movs	r3, #7
 800cde6:	e162      	b.n	800d0ae <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	699a      	ldr	r2, [r3, #24]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	441a      	add	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	699b      	ldr	r3, [r3, #24]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	f080 814c 	bcs.w	800d092 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	43db      	mvns	r3, r3
 800ce00:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ce02:	e146      	b.n	800d092 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	8992      	ldrh	r2, [r2, #12]
 800ce0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce10:	fb01 f202 	mul.w	r2, r1, r2
 800ce14:	1a9b      	subs	r3, r3, r2
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f040 80f1 	bne.w	800cffe <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	8992      	ldrh	r2, [r2, #12]
 800ce24:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce28:	693a      	ldr	r2, [r7, #16]
 800ce2a:	8952      	ldrh	r2, [r2, #10]
 800ce2c:	3a01      	subs	r2, #1
 800ce2e:	4013      	ands	r3, r2
 800ce30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d143      	bne.n	800cec0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10c      	bne.n	800ce5a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ce46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d11a      	bne.n	800ce82 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2100      	movs	r1, #0
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fe fc38 	bl	800b6c6 <create_chain>
 800ce56:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce58:	e013      	b.n	800ce82 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d007      	beq.n	800ce72 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	699b      	ldr	r3, [r3, #24]
 800ce66:	4619      	mov	r1, r3
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f7fe fcc4 	bl	800b7f6 <clmt_clust>
 800ce6e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce70:	e007      	b.n	800ce82 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	69db      	ldr	r3, [r3, #28]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	f7fe fc23 	bl	800b6c6 <create_chain>
 800ce80:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 8109 	beq.w	800d09c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d104      	bne.n	800ce9a <f_write+0x10c>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2202      	movs	r2, #2
 800ce94:	755a      	strb	r2, [r3, #21]
 800ce96:	2302      	movs	r3, #2
 800ce98:	e109      	b.n	800d0ae <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea0:	d104      	bne.n	800ceac <f_write+0x11e>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2201      	movs	r2, #1
 800cea6:	755a      	strb	r2, [r3, #21]
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e100      	b.n	800d0ae <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ceb0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <f_write+0x132>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cebe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
 800cec4:	b25b      	sxtb	r3, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	da18      	bge.n	800cefc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	7858      	ldrb	r0, [r3, #1]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6a1a      	ldr	r2, [r3, #32]
 800ced8:	2301      	movs	r3, #1
 800ceda:	f7fd fdf7 	bl	800aacc <disk_write>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d004      	beq.n	800ceee <f_write+0x160>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2201      	movs	r2, #1
 800cee8:	755a      	strb	r2, [r3, #21]
 800ceea:	2301      	movs	r3, #1
 800ceec:	e0df      	b.n	800d0ae <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	7d1b      	ldrb	r3, [r3, #20]
 800cef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	4619      	mov	r1, r3
 800cf04:	4610      	mov	r0, r2
 800cf06:	f7fe f96d 	bl	800b1e4 <clust2sect>
 800cf0a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d104      	bne.n	800cf1c <f_write+0x18e>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2202      	movs	r2, #2
 800cf16:	755a      	strb	r2, [r3, #21]
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e0c8      	b.n	800d0ae <f_write+0x320>
			sect += csect;
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	4413      	add	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	899b      	ldrh	r3, [r3, #12]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf30:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d043      	beq.n	800cfc0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cf38:	69ba      	ldr	r2, [r7, #24]
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	8952      	ldrh	r2, [r2, #10]
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d905      	bls.n	800cf52 <f_write+0x1c4>
					cc = fs->csize - csect;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	895b      	ldrh	r3, [r3, #10]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	7858      	ldrb	r0, [r3, #1]
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	69f9      	ldr	r1, [r7, #28]
 800cf5c:	f7fd fdb6 	bl	800aacc <disk_write>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d004      	beq.n	800cf70 <f_write+0x1e2>
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	755a      	strb	r2, [r3, #21]
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e09e      	b.n	800d0ae <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6a1a      	ldr	r2, [r3, #32]
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	6a3a      	ldr	r2, [r7, #32]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d918      	bls.n	800cfb0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6a1a      	ldr	r2, [r3, #32]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	8992      	ldrh	r2, [r2, #12]
 800cf90:	fb02 f303 	mul.w	r3, r2, r3
 800cf94:	69fa      	ldr	r2, [r7, #28]
 800cf96:	18d1      	adds	r1, r2, r3
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	899b      	ldrh	r3, [r3, #12]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	f7fd fe55 	bl	800ac4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	7d1b      	ldrb	r3, [r3, #20]
 800cfa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	899b      	ldrh	r3, [r3, #12]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	fb02 f303 	mul.w	r3, r2, r3
 800cfbc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cfbe:	e04b      	b.n	800d058 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d016      	beq.n	800cff8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	699a      	ldr	r2, [r3, #24]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d210      	bcs.n	800cff8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	7858      	ldrb	r0, [r3, #1]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	f7fd fd52 	bl	800aa8c <disk_read>
 800cfe8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d004      	beq.n	800cff8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2201      	movs	r2, #1
 800cff2:	755a      	strb	r2, [r3, #21]
 800cff4:	2301      	movs	r3, #1
 800cff6:	e05a      	b.n	800d0ae <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	697a      	ldr	r2, [r7, #20]
 800cffc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	899b      	ldrh	r3, [r3, #12]
 800d002:	4618      	mov	r0, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	8992      	ldrh	r2, [r2, #12]
 800d00c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d010:	fb01 f202 	mul.w	r2, r1, r2
 800d014:	1a9b      	subs	r3, r3, r2
 800d016:	1ac3      	subs	r3, r0, r3
 800d018:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d01a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d901      	bls.n	800d026 <f_write+0x298>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	8992      	ldrh	r2, [r2, #12]
 800d034:	fbb3 f0f2 	udiv	r0, r3, r2
 800d038:	fb00 f202 	mul.w	r2, r0, r2
 800d03c:	1a9b      	subs	r3, r3, r2
 800d03e:	440b      	add	r3, r1
 800d040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d042:	69f9      	ldr	r1, [r7, #28]
 800d044:	4618      	mov	r0, r3
 800d046:	f7fd fe01 	bl	800ac4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	7d1b      	ldrb	r3, [r3, #20]
 800d04e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d052:	b2da      	uxtb	r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05c:	4413      	add	r3, r2
 800d05e:	61fb      	str	r3, [r7, #28]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	699a      	ldr	r2, [r3, #24]
 800d064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d066:	441a      	add	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	619a      	str	r2, [r3, #24]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	68da      	ldr	r2, [r3, #12]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	429a      	cmp	r2, r3
 800d076:	bf38      	it	cc
 800d078:	461a      	movcc	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	60da      	str	r2, [r3, #12]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	441a      	add	r2, r3
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f47f aeb5 	bne.w	800ce04 <f_write+0x76>
 800d09a:	e000      	b.n	800d09e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d09c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	7d1b      	ldrb	r3, [r3, #20]
 800d0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3730      	adds	r7, #48	@ 0x30
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b086      	sub	sp, #24
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f107 0208 	add.w	r2, r7, #8
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff fabe 	bl	800c648 <validate>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d168      	bne.n	800d1a8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7d1b      	ldrb	r3, [r3, #20]
 800d0da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d062      	beq.n	800d1a8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	7d1b      	ldrb	r3, [r3, #20]
 800d0e6:	b25b      	sxtb	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	da15      	bge.n	800d118 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	7858      	ldrb	r0, [r3, #1]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a1a      	ldr	r2, [r3, #32]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	f7fd fce6 	bl	800aacc <disk_write>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <f_sync+0x54>
 800d106:	2301      	movs	r3, #1
 800d108:	e04f      	b.n	800d1aa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	7d1b      	ldrb	r3, [r3, #20]
 800d10e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d112:	b2da      	uxtb	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d118:	f7fd fb0c 	bl	800a734 <get_fattime>
 800d11c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d124:	4619      	mov	r1, r3
 800d126:	4610      	mov	r0, r2
 800d128:	f7fd ffbe 	bl	800b0a8 <move_window>
 800d12c:	4603      	mov	r3, r0
 800d12e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d130:	7dfb      	ldrb	r3, [r7, #23]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d138      	bne.n	800d1a8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d13a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	330b      	adds	r3, #11
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	330b      	adds	r3, #11
 800d146:	f042 0220 	orr.w	r2, r2, #32
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	461a      	mov	r2, r3
 800d158:	68f9      	ldr	r1, [r7, #12]
 800d15a:	f7fe fd49 	bl	800bbf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f103 021c 	add.w	r2, r3, #28
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	4619      	mov	r1, r3
 800d16a:	4610      	mov	r0, r2
 800d16c:	f7fd fd42 	bl	800abf4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3316      	adds	r3, #22
 800d174:	6939      	ldr	r1, [r7, #16]
 800d176:	4618      	mov	r0, r3
 800d178:	f7fd fd3c 	bl	800abf4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	3312      	adds	r3, #18
 800d180:	2100      	movs	r1, #0
 800d182:	4618      	mov	r0, r3
 800d184:	f7fd fd1b 	bl	800abbe <st_word>
					fs->wflag = 1;
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2201      	movs	r2, #1
 800d18c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	4618      	mov	r0, r3
 800d192:	f7fd ffb7 	bl	800b104 <sync_fs>
 800d196:	4603      	mov	r3, r0
 800d198:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	7d1b      	ldrb	r3, [r3, #20]
 800d19e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff ff7b 	bl	800d0b6 <f_sync>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d118      	bne.n	800d1fc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f107 0208 	add.w	r2, r7, #8
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff fa38 	bl	800c648 <validate>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10c      	bne.n	800d1fc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fd feba 	bl	800af60 <dec_lock>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b090      	sub	sp, #64	@ 0x40
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f107 0208 	add.w	r2, r7, #8
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fa15 	bl	800c648 <validate>
 800d21e:	4603      	mov	r3, r0
 800d220:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d224:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d103      	bne.n	800d234 <f_lseek+0x2e>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7d5b      	ldrb	r3, [r3, #21]
 800d230:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d234:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <f_lseek+0x3c>
 800d23c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d240:	e201      	b.n	800d646 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d246:	2b00      	cmp	r3, #0
 800d248:	f000 80d9 	beq.w	800d3fe <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d252:	d15a      	bne.n	800d30a <f_lseek+0x104>
			tbl = fp->cltbl;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d258:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25c:	1d1a      	adds	r2, r3, #4
 800d25e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	2302      	movs	r3, #2
 800d266:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d270:	2b00      	cmp	r3, #0
 800d272:	d03a      	beq.n	800d2ea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d276:	613b      	str	r3, [r7, #16]
 800d278:	2300      	movs	r3, #0
 800d27a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	3302      	adds	r3, #2
 800d280:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	3301      	adds	r3, #1
 800d28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d290:	4618      	mov	r0, r3
 800d292:	f7fd ffc6 	bl	800b222 <get_fat>
 800d296:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d804      	bhi.n	800d2a8 <f_lseek+0xa2>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	755a      	strb	r2, [r3, #21]
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	e1ce      	b.n	800d646 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ae:	d104      	bne.n	800d2ba <f_lseek+0xb4>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	755a      	strb	r2, [r3, #21]
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e1c5      	b.n	800d646 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d0de      	beq.n	800d282 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d2c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d809      	bhi.n	800d2e0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ce:	1d1a      	adds	r2, r3, #4
 800d2d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d8:	1d1a      	adds	r2, r3, #4
 800d2da:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2dc:	693a      	ldr	r2, [r7, #16]
 800d2de:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d3c4      	bcc.n	800d274 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2f0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d2f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d803      	bhi.n	800d302 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	e19f      	b.n	800d642 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d302:	2311      	movs	r3, #17
 800d304:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d308:	e19b      	b.n	800d642 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	429a      	cmp	r2, r3
 800d312:	d902      	bls.n	800d31a <f_lseek+0x114>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 818d 	beq.w	800d642 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	3b01      	subs	r3, #1
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7fe fa61 	bl	800b7f6 <clmt_clust>
 800d334:	4602      	mov	r2, r0
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	69db      	ldr	r3, [r3, #28]
 800d340:	4619      	mov	r1, r3
 800d342:	4610      	mov	r0, r2
 800d344:	f7fd ff4e 	bl	800b1e4 <clust2sect>
 800d348:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d104      	bne.n	800d35a <f_lseek+0x154>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2202      	movs	r2, #2
 800d354:	755a      	strb	r2, [r3, #21]
 800d356:	2302      	movs	r3, #2
 800d358:	e175      	b.n	800d646 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	8992      	ldrh	r2, [r2, #12]
 800d362:	fbb3 f3f2 	udiv	r3, r3, r2
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	8952      	ldrh	r2, [r2, #10]
 800d36a:	3a01      	subs	r2, #1
 800d36c:	4013      	ands	r3, r2
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	4413      	add	r3, r2
 800d372:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	8992      	ldrh	r2, [r2, #12]
 800d37c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d380:	fb01 f202 	mul.w	r2, r1, r2
 800d384:	1a9b      	subs	r3, r3, r2
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 815b 	beq.w	800d642 <f_lseek+0x43c>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	69ba      	ldr	r2, [r7, #24]
 800d392:	429a      	cmp	r2, r3
 800d394:	f000 8155 	beq.w	800d642 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7d1b      	ldrb	r3, [r3, #20]
 800d39c:	b25b      	sxtb	r3, r3
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	da18      	bge.n	800d3d4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	7858      	ldrb	r0, [r3, #1]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a1a      	ldr	r2, [r3, #32]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f7fd fb8b 	bl	800aacc <disk_write>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d004      	beq.n	800d3c6 <f_lseek+0x1c0>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	755a      	strb	r2, [r3, #21]
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e13f      	b.n	800d646 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	7d1b      	ldrb	r3, [r3, #20]
 800d3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	7858      	ldrb	r0, [r3, #1]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3de:	2301      	movs	r3, #1
 800d3e0:	69ba      	ldr	r2, [r7, #24]
 800d3e2:	f7fd fb53 	bl	800aa8c <disk_read>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d004      	beq.n	800d3f6 <f_lseek+0x1f0>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	755a      	strb	r2, [r3, #21]
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e127      	b.n	800d646 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69ba      	ldr	r2, [r7, #24]
 800d3fa:	621a      	str	r2, [r3, #32]
 800d3fc:	e121      	b.n	800d642 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d908      	bls.n	800d41a <f_lseek+0x214>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	7d1b      	ldrb	r3, [r3, #20]
 800d40c:	f003 0302 	and.w	r3, r3, #2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d102      	bne.n	800d41a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	637b      	str	r3, [r7, #52]	@ 0x34
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d428:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 80b5 	beq.w	800d59c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	895b      	ldrh	r3, [r3, #10]
 800d436:	461a      	mov	r2, r3
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	899b      	ldrh	r3, [r3, #12]
 800d43c:	fb02 f303 	mul.w	r3, r2, r3
 800d440:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01b      	beq.n	800d480 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	1e5a      	subs	r2, r3, #1
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	1e59      	subs	r1, r3, #1
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d30f      	bcc.n	800d480 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	1e5a      	subs	r2, r3, #1
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	425b      	negs	r3, r3
 800d468:	401a      	ands	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	69db      	ldr	r3, [r3, #28]
 800d47c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d47e:	e022      	b.n	800d4c6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d119      	bne.n	800d4c0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2100      	movs	r1, #0
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe f918 	bl	800b6c6 <create_chain>
 800d496:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d104      	bne.n	800d4a8 <f_lseek+0x2a2>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2202      	movs	r2, #2
 800d4a2:	755a      	strb	r2, [r3, #21]
 800d4a4:	2302      	movs	r3, #2
 800d4a6:	e0ce      	b.n	800d646 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ae:	d104      	bne.n	800d4ba <f_lseek+0x2b4>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	755a      	strb	r2, [r3, #21]
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e0c5      	b.n	800d646 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4be:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4c4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d067      	beq.n	800d59c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d4cc:	e03a      	b.n	800d544 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	603b      	str	r3, [r7, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	699a      	ldr	r2, [r3, #24]
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	441a      	add	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	7d1b      	ldrb	r3, [r3, #20]
 800d4e6:	f003 0302 	and.w	r3, r3, #2
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00b      	beq.n	800d506 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f8e7 	bl	800b6c6 <create_chain>
 800d4f8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d108      	bne.n	800d512 <f_lseek+0x30c>
							ofs = 0; break;
 800d500:	2300      	movs	r3, #0
 800d502:	603b      	str	r3, [r7, #0]
 800d504:	e022      	b.n	800d54c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fd fe89 	bl	800b222 <get_fat>
 800d510:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d518:	d104      	bne.n	800d524 <f_lseek+0x31e>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2201      	movs	r2, #1
 800d51e:	755a      	strb	r2, [r3, #21]
 800d520:	2301      	movs	r3, #1
 800d522:	e090      	b.n	800d646 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d526:	2b01      	cmp	r3, #1
 800d528:	d904      	bls.n	800d534 <f_lseek+0x32e>
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	699b      	ldr	r3, [r3, #24]
 800d52e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d530:	429a      	cmp	r2, r3
 800d532:	d304      	bcc.n	800d53e <f_lseek+0x338>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2202      	movs	r2, #2
 800d538:	755a      	strb	r2, [r3, #21]
 800d53a:	2302      	movs	r3, #2
 800d53c:	e083      	b.n	800d646 <f_lseek+0x440>
					fp->clust = clst;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d542:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d8c0      	bhi.n	800d4ce <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	699a      	ldr	r2, [r3, #24]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	441a      	add	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	899b      	ldrh	r3, [r3, #12]
 800d55c:	461a      	mov	r2, r3
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	fbb3 f1f2 	udiv	r1, r3, r2
 800d564:	fb01 f202 	mul.w	r2, r1, r2
 800d568:	1a9b      	subs	r3, r3, r2
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d016      	beq.n	800d59c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d572:	4618      	mov	r0, r3
 800d574:	f7fd fe36 	bl	800b1e4 <clust2sect>
 800d578:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <f_lseek+0x384>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2202      	movs	r2, #2
 800d584:	755a      	strb	r2, [r3, #21]
 800d586:	2302      	movs	r3, #2
 800d588:	e05d      	b.n	800d646 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	899b      	ldrh	r3, [r3, #12]
 800d58e:	461a      	mov	r2, r3
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	fbb3 f3f2 	udiv	r3, r3, r2
 800d596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d598:	4413      	add	r3, r2
 800d59a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d90a      	bls.n	800d5be <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	699a      	ldr	r2, [r3, #24]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	7d1b      	ldrb	r3, [r3, #20]
 800d5b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	8992      	ldrh	r2, [r2, #12]
 800d5c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5ca:	fb01 f202 	mul.w	r2, r1, r2
 800d5ce:	1a9b      	subs	r3, r3, r2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d036      	beq.n	800d642 <f_lseek+0x43c>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d031      	beq.n	800d642 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	7d1b      	ldrb	r3, [r3, #20]
 800d5e2:	b25b      	sxtb	r3, r3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	da18      	bge.n	800d61a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	7858      	ldrb	r0, [r3, #1]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a1a      	ldr	r2, [r3, #32]
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f7fd fa68 	bl	800aacc <disk_write>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d004      	beq.n	800d60c <f_lseek+0x406>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	755a      	strb	r2, [r3, #21]
 800d608:	2301      	movs	r3, #1
 800d60a:	e01c      	b.n	800d646 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	7d1b      	ldrb	r3, [r3, #20]
 800d610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d614:	b2da      	uxtb	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	7858      	ldrb	r0, [r3, #1]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d624:	2301      	movs	r3, #1
 800d626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d628:	f7fd fa30 	bl	800aa8c <disk_read>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d004      	beq.n	800d63c <f_lseek+0x436>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	755a      	strb	r2, [r3, #21]
 800d638:	2301      	movs	r3, #1
 800d63a:	e004      	b.n	800d646 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d640:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d642:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d646:	4618      	mov	r0, r3
 800d648:	3740      	adds	r7, #64	@ 0x40
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b090      	sub	sp, #64	@ 0x40
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d658:	f107 010c 	add.w	r1, r7, #12
 800d65c:	1d3b      	adds	r3, r7, #4
 800d65e:	2200      	movs	r2, #0
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fd71 	bl	800c148 <find_volume>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800d66c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d670:	2b00      	cmp	r3, #0
 800d672:	d11f      	bne.n	800d6b4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	f107 030c 	add.w	r3, r7, #12
 800d67a:	4611      	mov	r1, r2
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fe fc53 	bl	800bf28 <follow_path>
 800d682:	4603      	mov	r3, r0
 800d684:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d688:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d111      	bne.n	800d6b4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d690:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d694:	b25b      	sxtb	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	da03      	bge.n	800d6a2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d69a:	2306      	movs	r3, #6
 800d69c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d6a0:	e008      	b.n	800d6b4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d005      	beq.n	800d6b4 <f_stat+0x66>
 800d6a8:	f107 030c 	add.w	r3, r7, #12
 800d6ac:	6839      	ldr	r1, [r7, #0]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fb45 	bl	800bd3e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d6b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3740      	adds	r7, #64	@ 0x40
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6d6:	4b1f      	ldr	r3, [pc, #124]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6d8:	7a5b      	ldrb	r3, [r3, #9]
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d131      	bne.n	800d744 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6e0:	4b1c      	ldr	r3, [pc, #112]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6e2:	7a5b      	ldrb	r3, [r3, #9]
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6ee:	4b19      	ldr	r3, [pc, #100]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6f0:	7a5b      	ldrb	r3, [r3, #9]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	4a17      	ldr	r2, [pc, #92]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4413      	add	r3, r2
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6fe:	4b15      	ldr	r3, [pc, #84]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d700:	7a5b      	ldrb	r3, [r3, #9]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	461a      	mov	r2, r3
 800d706:	4b13      	ldr	r3, [pc, #76]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d708:	4413      	add	r3, r2
 800d70a:	79fa      	ldrb	r2, [r7, #7]
 800d70c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d70e:	4b11      	ldr	r3, [pc, #68]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d710:	7a5b      	ldrb	r3, [r3, #9]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	b2d1      	uxtb	r1, r2
 800d718:	4a0e      	ldr	r2, [pc, #56]	@ (800d754 <FATFS_LinkDriverEx+0x94>)
 800d71a:	7251      	strb	r1, [r2, #9]
 800d71c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d71e:	7dbb      	ldrb	r3, [r7, #22]
 800d720:	3330      	adds	r3, #48	@ 0x30
 800d722:	b2da      	uxtb	r2, r3
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	3301      	adds	r3, #1
 800d72c:	223a      	movs	r2, #58	@ 0x3a
 800d72e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	3302      	adds	r3, #2
 800d734:	222f      	movs	r2, #47	@ 0x2f
 800d736:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	3303      	adds	r3, #3
 800d73c:	2200      	movs	r2, #0
 800d73e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d740:	2300      	movs	r3, #0
 800d742:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d744:	7dfb      	ldrb	r3, [r7, #23]
}
 800d746:	4618      	mov	r0, r3
 800d748:	371c      	adds	r7, #28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	200056a8 	.word	0x200056a8

0800d758 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d762:	2200      	movs	r2, #0
 800d764:	6839      	ldr	r1, [r7, #0]
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff ffaa 	bl	800d6c0 <FATFS_LinkDriverEx>
 800d76c:	4603      	mov	r3, r0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <atoi>:
 800d776:	220a      	movs	r2, #10
 800d778:	2100      	movs	r1, #0
 800d77a:	f000 b93b 	b.w	800d9f4 <strtol>
	...

0800d780 <malloc>:
 800d780:	4b02      	ldr	r3, [pc, #8]	@ (800d78c <malloc+0xc>)
 800d782:	4601      	mov	r1, r0
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	f000 b82d 	b.w	800d7e4 <_malloc_r>
 800d78a:	bf00      	nop
 800d78c:	20000038 	.word	0x20000038

0800d790 <free>:
 800d790:	4b02      	ldr	r3, [pc, #8]	@ (800d79c <free+0xc>)
 800d792:	4601      	mov	r1, r0
 800d794:	6818      	ldr	r0, [r3, #0]
 800d796:	f000 bbe1 	b.w	800df5c <_free_r>
 800d79a:	bf00      	nop
 800d79c:	20000038 	.word	0x20000038

0800d7a0 <sbrk_aligned>:
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	4e0f      	ldr	r6, [pc, #60]	@ (800d7e0 <sbrk_aligned+0x40>)
 800d7a4:	460c      	mov	r4, r1
 800d7a6:	6831      	ldr	r1, [r6, #0]
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	b911      	cbnz	r1, 800d7b2 <sbrk_aligned+0x12>
 800d7ac:	f000 fb60 	bl	800de70 <_sbrk_r>
 800d7b0:	6030      	str	r0, [r6, #0]
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	f000 fb5b 	bl	800de70 <_sbrk_r>
 800d7ba:	1c43      	adds	r3, r0, #1
 800d7bc:	d103      	bne.n	800d7c6 <sbrk_aligned+0x26>
 800d7be:	f04f 34ff 	mov.w	r4, #4294967295
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	bd70      	pop	{r4, r5, r6, pc}
 800d7c6:	1cc4      	adds	r4, r0, #3
 800d7c8:	f024 0403 	bic.w	r4, r4, #3
 800d7cc:	42a0      	cmp	r0, r4
 800d7ce:	d0f8      	beq.n	800d7c2 <sbrk_aligned+0x22>
 800d7d0:	1a21      	subs	r1, r4, r0
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f000 fb4c 	bl	800de70 <_sbrk_r>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d1f2      	bne.n	800d7c2 <sbrk_aligned+0x22>
 800d7dc:	e7ef      	b.n	800d7be <sbrk_aligned+0x1e>
 800d7de:	bf00      	nop
 800d7e0:	200056b4 	.word	0x200056b4

0800d7e4 <_malloc_r>:
 800d7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e8:	1ccd      	adds	r5, r1, #3
 800d7ea:	f025 0503 	bic.w	r5, r5, #3
 800d7ee:	3508      	adds	r5, #8
 800d7f0:	2d0c      	cmp	r5, #12
 800d7f2:	bf38      	it	cc
 800d7f4:	250c      	movcc	r5, #12
 800d7f6:	2d00      	cmp	r5, #0
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	db01      	blt.n	800d800 <_malloc_r+0x1c>
 800d7fc:	42a9      	cmp	r1, r5
 800d7fe:	d904      	bls.n	800d80a <_malloc_r+0x26>
 800d800:	230c      	movs	r3, #12
 800d802:	6033      	str	r3, [r6, #0]
 800d804:	2000      	movs	r0, #0
 800d806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d80a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d8e0 <_malloc_r+0xfc>
 800d80e:	f000 f869 	bl	800d8e4 <__malloc_lock>
 800d812:	f8d8 3000 	ldr.w	r3, [r8]
 800d816:	461c      	mov	r4, r3
 800d818:	bb44      	cbnz	r4, 800d86c <_malloc_r+0x88>
 800d81a:	4629      	mov	r1, r5
 800d81c:	4630      	mov	r0, r6
 800d81e:	f7ff ffbf 	bl	800d7a0 <sbrk_aligned>
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	4604      	mov	r4, r0
 800d826:	d158      	bne.n	800d8da <_malloc_r+0xf6>
 800d828:	f8d8 4000 	ldr.w	r4, [r8]
 800d82c:	4627      	mov	r7, r4
 800d82e:	2f00      	cmp	r7, #0
 800d830:	d143      	bne.n	800d8ba <_malloc_r+0xd6>
 800d832:	2c00      	cmp	r4, #0
 800d834:	d04b      	beq.n	800d8ce <_malloc_r+0xea>
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	4639      	mov	r1, r7
 800d83a:	4630      	mov	r0, r6
 800d83c:	eb04 0903 	add.w	r9, r4, r3
 800d840:	f000 fb16 	bl	800de70 <_sbrk_r>
 800d844:	4581      	cmp	r9, r0
 800d846:	d142      	bne.n	800d8ce <_malloc_r+0xea>
 800d848:	6821      	ldr	r1, [r4, #0]
 800d84a:	1a6d      	subs	r5, r5, r1
 800d84c:	4629      	mov	r1, r5
 800d84e:	4630      	mov	r0, r6
 800d850:	f7ff ffa6 	bl	800d7a0 <sbrk_aligned>
 800d854:	3001      	adds	r0, #1
 800d856:	d03a      	beq.n	800d8ce <_malloc_r+0xea>
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	442b      	add	r3, r5
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	f8d8 3000 	ldr.w	r3, [r8]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	bb62      	cbnz	r2, 800d8c0 <_malloc_r+0xdc>
 800d866:	f8c8 7000 	str.w	r7, [r8]
 800d86a:	e00f      	b.n	800d88c <_malloc_r+0xa8>
 800d86c:	6822      	ldr	r2, [r4, #0]
 800d86e:	1b52      	subs	r2, r2, r5
 800d870:	d420      	bmi.n	800d8b4 <_malloc_r+0xd0>
 800d872:	2a0b      	cmp	r2, #11
 800d874:	d917      	bls.n	800d8a6 <_malloc_r+0xc2>
 800d876:	1961      	adds	r1, r4, r5
 800d878:	42a3      	cmp	r3, r4
 800d87a:	6025      	str	r5, [r4, #0]
 800d87c:	bf18      	it	ne
 800d87e:	6059      	strne	r1, [r3, #4]
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	bf08      	it	eq
 800d884:	f8c8 1000 	streq.w	r1, [r8]
 800d888:	5162      	str	r2, [r4, r5]
 800d88a:	604b      	str	r3, [r1, #4]
 800d88c:	4630      	mov	r0, r6
 800d88e:	f000 f82f 	bl	800d8f0 <__malloc_unlock>
 800d892:	f104 000b 	add.w	r0, r4, #11
 800d896:	1d23      	adds	r3, r4, #4
 800d898:	f020 0007 	bic.w	r0, r0, #7
 800d89c:	1ac2      	subs	r2, r0, r3
 800d89e:	bf1c      	itt	ne
 800d8a0:	1a1b      	subne	r3, r3, r0
 800d8a2:	50a3      	strne	r3, [r4, r2]
 800d8a4:	e7af      	b.n	800d806 <_malloc_r+0x22>
 800d8a6:	6862      	ldr	r2, [r4, #4]
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	bf0c      	ite	eq
 800d8ac:	f8c8 2000 	streq.w	r2, [r8]
 800d8b0:	605a      	strne	r2, [r3, #4]
 800d8b2:	e7eb      	b.n	800d88c <_malloc_r+0xa8>
 800d8b4:	4623      	mov	r3, r4
 800d8b6:	6864      	ldr	r4, [r4, #4]
 800d8b8:	e7ae      	b.n	800d818 <_malloc_r+0x34>
 800d8ba:	463c      	mov	r4, r7
 800d8bc:	687f      	ldr	r7, [r7, #4]
 800d8be:	e7b6      	b.n	800d82e <_malloc_r+0x4a>
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	d1fb      	bne.n	800d8c0 <_malloc_r+0xdc>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	6053      	str	r3, [r2, #4]
 800d8cc:	e7de      	b.n	800d88c <_malloc_r+0xa8>
 800d8ce:	230c      	movs	r3, #12
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f000 f80c 	bl	800d8f0 <__malloc_unlock>
 800d8d8:	e794      	b.n	800d804 <_malloc_r+0x20>
 800d8da:	6005      	str	r5, [r0, #0]
 800d8dc:	e7d6      	b.n	800d88c <_malloc_r+0xa8>
 800d8de:	bf00      	nop
 800d8e0:	200056b8 	.word	0x200056b8

0800d8e4 <__malloc_lock>:
 800d8e4:	4801      	ldr	r0, [pc, #4]	@ (800d8ec <__malloc_lock+0x8>)
 800d8e6:	f000 bb10 	b.w	800df0a <__retarget_lock_acquire_recursive>
 800d8ea:	bf00      	nop
 800d8ec:	200057fc 	.word	0x200057fc

0800d8f0 <__malloc_unlock>:
 800d8f0:	4801      	ldr	r0, [pc, #4]	@ (800d8f8 <__malloc_unlock+0x8>)
 800d8f2:	f000 bb0b 	b.w	800df0c <__retarget_lock_release_recursive>
 800d8f6:	bf00      	nop
 800d8f8:	200057fc 	.word	0x200057fc

0800d8fc <_strtol_l.constprop.0>:
 800d8fc:	2b24      	cmp	r3, #36	@ 0x24
 800d8fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d902:	4686      	mov	lr, r0
 800d904:	4690      	mov	r8, r2
 800d906:	d801      	bhi.n	800d90c <_strtol_l.constprop.0+0x10>
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d106      	bne.n	800d91a <_strtol_l.constprop.0+0x1e>
 800d90c:	f000 fad2 	bl	800deb4 <__errno>
 800d910:	2316      	movs	r3, #22
 800d912:	6003      	str	r3, [r0, #0]
 800d914:	2000      	movs	r0, #0
 800d916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91a:	4834      	ldr	r0, [pc, #208]	@ (800d9ec <_strtol_l.constprop.0+0xf0>)
 800d91c:	460d      	mov	r5, r1
 800d91e:	462a      	mov	r2, r5
 800d920:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d924:	5d06      	ldrb	r6, [r0, r4]
 800d926:	f016 0608 	ands.w	r6, r6, #8
 800d92a:	d1f8      	bne.n	800d91e <_strtol_l.constprop.0+0x22>
 800d92c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d92e:	d12d      	bne.n	800d98c <_strtol_l.constprop.0+0x90>
 800d930:	782c      	ldrb	r4, [r5, #0]
 800d932:	2601      	movs	r6, #1
 800d934:	1c95      	adds	r5, r2, #2
 800d936:	f033 0210 	bics.w	r2, r3, #16
 800d93a:	d109      	bne.n	800d950 <_strtol_l.constprop.0+0x54>
 800d93c:	2c30      	cmp	r4, #48	@ 0x30
 800d93e:	d12a      	bne.n	800d996 <_strtol_l.constprop.0+0x9a>
 800d940:	782a      	ldrb	r2, [r5, #0]
 800d942:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d946:	2a58      	cmp	r2, #88	@ 0x58
 800d948:	d125      	bne.n	800d996 <_strtol_l.constprop.0+0x9a>
 800d94a:	786c      	ldrb	r4, [r5, #1]
 800d94c:	2310      	movs	r3, #16
 800d94e:	3502      	adds	r5, #2
 800d950:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d954:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d958:	2200      	movs	r2, #0
 800d95a:	fbbc f9f3 	udiv	r9, ip, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	fb03 ca19 	mls	sl, r3, r9, ip
 800d964:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d968:	2f09      	cmp	r7, #9
 800d96a:	d81b      	bhi.n	800d9a4 <_strtol_l.constprop.0+0xa8>
 800d96c:	463c      	mov	r4, r7
 800d96e:	42a3      	cmp	r3, r4
 800d970:	dd27      	ble.n	800d9c2 <_strtol_l.constprop.0+0xc6>
 800d972:	1c57      	adds	r7, r2, #1
 800d974:	d007      	beq.n	800d986 <_strtol_l.constprop.0+0x8a>
 800d976:	4581      	cmp	r9, r0
 800d978:	d320      	bcc.n	800d9bc <_strtol_l.constprop.0+0xc0>
 800d97a:	d101      	bne.n	800d980 <_strtol_l.constprop.0+0x84>
 800d97c:	45a2      	cmp	sl, r4
 800d97e:	db1d      	blt.n	800d9bc <_strtol_l.constprop.0+0xc0>
 800d980:	fb00 4003 	mla	r0, r0, r3, r4
 800d984:	2201      	movs	r2, #1
 800d986:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d98a:	e7eb      	b.n	800d964 <_strtol_l.constprop.0+0x68>
 800d98c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d98e:	bf04      	itt	eq
 800d990:	782c      	ldrbeq	r4, [r5, #0]
 800d992:	1c95      	addeq	r5, r2, #2
 800d994:	e7cf      	b.n	800d936 <_strtol_l.constprop.0+0x3a>
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1da      	bne.n	800d950 <_strtol_l.constprop.0+0x54>
 800d99a:	2c30      	cmp	r4, #48	@ 0x30
 800d99c:	bf0c      	ite	eq
 800d99e:	2308      	moveq	r3, #8
 800d9a0:	230a      	movne	r3, #10
 800d9a2:	e7d5      	b.n	800d950 <_strtol_l.constprop.0+0x54>
 800d9a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d9a8:	2f19      	cmp	r7, #25
 800d9aa:	d801      	bhi.n	800d9b0 <_strtol_l.constprop.0+0xb4>
 800d9ac:	3c37      	subs	r4, #55	@ 0x37
 800d9ae:	e7de      	b.n	800d96e <_strtol_l.constprop.0+0x72>
 800d9b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d9b4:	2f19      	cmp	r7, #25
 800d9b6:	d804      	bhi.n	800d9c2 <_strtol_l.constprop.0+0xc6>
 800d9b8:	3c57      	subs	r4, #87	@ 0x57
 800d9ba:	e7d8      	b.n	800d96e <_strtol_l.constprop.0+0x72>
 800d9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c0:	e7e1      	b.n	800d986 <_strtol_l.constprop.0+0x8a>
 800d9c2:	1c53      	adds	r3, r2, #1
 800d9c4:	d108      	bne.n	800d9d8 <_strtol_l.constprop.0+0xdc>
 800d9c6:	2322      	movs	r3, #34	@ 0x22
 800d9c8:	f8ce 3000 	str.w	r3, [lr]
 800d9cc:	4660      	mov	r0, ip
 800d9ce:	f1b8 0f00 	cmp.w	r8, #0
 800d9d2:	d0a0      	beq.n	800d916 <_strtol_l.constprop.0+0x1a>
 800d9d4:	1e69      	subs	r1, r5, #1
 800d9d6:	e006      	b.n	800d9e6 <_strtol_l.constprop.0+0xea>
 800d9d8:	b106      	cbz	r6, 800d9dc <_strtol_l.constprop.0+0xe0>
 800d9da:	4240      	negs	r0, r0
 800d9dc:	f1b8 0f00 	cmp.w	r8, #0
 800d9e0:	d099      	beq.n	800d916 <_strtol_l.constprop.0+0x1a>
 800d9e2:	2a00      	cmp	r2, #0
 800d9e4:	d1f6      	bne.n	800d9d4 <_strtol_l.constprop.0+0xd8>
 800d9e6:	f8c8 1000 	str.w	r1, [r8]
 800d9ea:	e794      	b.n	800d916 <_strtol_l.constprop.0+0x1a>
 800d9ec:	080103a9 	.word	0x080103a9

0800d9f0 <_strtol_r>:
 800d9f0:	f7ff bf84 	b.w	800d8fc <_strtol_l.constprop.0>

0800d9f4 <strtol>:
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	460a      	mov	r2, r1
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	4802      	ldr	r0, [pc, #8]	@ (800da04 <strtol+0x10>)
 800d9fc:	6800      	ldr	r0, [r0, #0]
 800d9fe:	f7ff bf7d 	b.w	800d8fc <_strtol_l.constprop.0>
 800da02:	bf00      	nop
 800da04:	20000038 	.word	0x20000038

0800da08 <std>:
 800da08:	2300      	movs	r3, #0
 800da0a:	b510      	push	{r4, lr}
 800da0c:	4604      	mov	r4, r0
 800da0e:	e9c0 3300 	strd	r3, r3, [r0]
 800da12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da16:	6083      	str	r3, [r0, #8]
 800da18:	8181      	strh	r1, [r0, #12]
 800da1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800da1c:	81c2      	strh	r2, [r0, #14]
 800da1e:	6183      	str	r3, [r0, #24]
 800da20:	4619      	mov	r1, r3
 800da22:	2208      	movs	r2, #8
 800da24:	305c      	adds	r0, #92	@ 0x5c
 800da26:	f000 f979 	bl	800dd1c <memset>
 800da2a:	4b0d      	ldr	r3, [pc, #52]	@ (800da60 <std+0x58>)
 800da2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800da2e:	4b0d      	ldr	r3, [pc, #52]	@ (800da64 <std+0x5c>)
 800da30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da32:	4b0d      	ldr	r3, [pc, #52]	@ (800da68 <std+0x60>)
 800da34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da36:	4b0d      	ldr	r3, [pc, #52]	@ (800da6c <std+0x64>)
 800da38:	6323      	str	r3, [r4, #48]	@ 0x30
 800da3a:	4b0d      	ldr	r3, [pc, #52]	@ (800da70 <std+0x68>)
 800da3c:	6224      	str	r4, [r4, #32]
 800da3e:	429c      	cmp	r4, r3
 800da40:	d006      	beq.n	800da50 <std+0x48>
 800da42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da46:	4294      	cmp	r4, r2
 800da48:	d002      	beq.n	800da50 <std+0x48>
 800da4a:	33d0      	adds	r3, #208	@ 0xd0
 800da4c:	429c      	cmp	r4, r3
 800da4e:	d105      	bne.n	800da5c <std+0x54>
 800da50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da58:	f000 ba56 	b.w	800df08 <__retarget_lock_init_recursive>
 800da5c:	bd10      	pop	{r4, pc}
 800da5e:	bf00      	nop
 800da60:	0800dc21 	.word	0x0800dc21
 800da64:	0800dc47 	.word	0x0800dc47
 800da68:	0800dc7f 	.word	0x0800dc7f
 800da6c:	0800dca3 	.word	0x0800dca3
 800da70:	200056bc 	.word	0x200056bc

0800da74 <stdio_exit_handler>:
 800da74:	4a02      	ldr	r2, [pc, #8]	@ (800da80 <stdio_exit_handler+0xc>)
 800da76:	4903      	ldr	r1, [pc, #12]	@ (800da84 <stdio_exit_handler+0x10>)
 800da78:	4803      	ldr	r0, [pc, #12]	@ (800da88 <stdio_exit_handler+0x14>)
 800da7a:	f000 b869 	b.w	800db50 <_fwalk_sglue>
 800da7e:	bf00      	nop
 800da80:	2000002c 	.word	0x2000002c
 800da84:	0800ecf9 	.word	0x0800ecf9
 800da88:	2000003c 	.word	0x2000003c

0800da8c <cleanup_stdio>:
 800da8c:	6841      	ldr	r1, [r0, #4]
 800da8e:	4b0c      	ldr	r3, [pc, #48]	@ (800dac0 <cleanup_stdio+0x34>)
 800da90:	4299      	cmp	r1, r3
 800da92:	b510      	push	{r4, lr}
 800da94:	4604      	mov	r4, r0
 800da96:	d001      	beq.n	800da9c <cleanup_stdio+0x10>
 800da98:	f001 f92e 	bl	800ecf8 <_fflush_r>
 800da9c:	68a1      	ldr	r1, [r4, #8]
 800da9e:	4b09      	ldr	r3, [pc, #36]	@ (800dac4 <cleanup_stdio+0x38>)
 800daa0:	4299      	cmp	r1, r3
 800daa2:	d002      	beq.n	800daaa <cleanup_stdio+0x1e>
 800daa4:	4620      	mov	r0, r4
 800daa6:	f001 f927 	bl	800ecf8 <_fflush_r>
 800daaa:	68e1      	ldr	r1, [r4, #12]
 800daac:	4b06      	ldr	r3, [pc, #24]	@ (800dac8 <cleanup_stdio+0x3c>)
 800daae:	4299      	cmp	r1, r3
 800dab0:	d004      	beq.n	800dabc <cleanup_stdio+0x30>
 800dab2:	4620      	mov	r0, r4
 800dab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab8:	f001 b91e 	b.w	800ecf8 <_fflush_r>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	bf00      	nop
 800dac0:	200056bc 	.word	0x200056bc
 800dac4:	20005724 	.word	0x20005724
 800dac8:	2000578c 	.word	0x2000578c

0800dacc <global_stdio_init.part.0>:
 800dacc:	b510      	push	{r4, lr}
 800dace:	4b0b      	ldr	r3, [pc, #44]	@ (800dafc <global_stdio_init.part.0+0x30>)
 800dad0:	4c0b      	ldr	r4, [pc, #44]	@ (800db00 <global_stdio_init.part.0+0x34>)
 800dad2:	4a0c      	ldr	r2, [pc, #48]	@ (800db04 <global_stdio_init.part.0+0x38>)
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	4620      	mov	r0, r4
 800dad8:	2200      	movs	r2, #0
 800dada:	2104      	movs	r1, #4
 800dadc:	f7ff ff94 	bl	800da08 <std>
 800dae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dae4:	2201      	movs	r2, #1
 800dae6:	2109      	movs	r1, #9
 800dae8:	f7ff ff8e 	bl	800da08 <std>
 800daec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800daf0:	2202      	movs	r2, #2
 800daf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daf6:	2112      	movs	r1, #18
 800daf8:	f7ff bf86 	b.w	800da08 <std>
 800dafc:	200057f4 	.word	0x200057f4
 800db00:	200056bc 	.word	0x200056bc
 800db04:	0800da75 	.word	0x0800da75

0800db08 <__sfp_lock_acquire>:
 800db08:	4801      	ldr	r0, [pc, #4]	@ (800db10 <__sfp_lock_acquire+0x8>)
 800db0a:	f000 b9fe 	b.w	800df0a <__retarget_lock_acquire_recursive>
 800db0e:	bf00      	nop
 800db10:	200057fd 	.word	0x200057fd

0800db14 <__sfp_lock_release>:
 800db14:	4801      	ldr	r0, [pc, #4]	@ (800db1c <__sfp_lock_release+0x8>)
 800db16:	f000 b9f9 	b.w	800df0c <__retarget_lock_release_recursive>
 800db1a:	bf00      	nop
 800db1c:	200057fd 	.word	0x200057fd

0800db20 <__sinit>:
 800db20:	b510      	push	{r4, lr}
 800db22:	4604      	mov	r4, r0
 800db24:	f7ff fff0 	bl	800db08 <__sfp_lock_acquire>
 800db28:	6a23      	ldr	r3, [r4, #32]
 800db2a:	b11b      	cbz	r3, 800db34 <__sinit+0x14>
 800db2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db30:	f7ff bff0 	b.w	800db14 <__sfp_lock_release>
 800db34:	4b04      	ldr	r3, [pc, #16]	@ (800db48 <__sinit+0x28>)
 800db36:	6223      	str	r3, [r4, #32]
 800db38:	4b04      	ldr	r3, [pc, #16]	@ (800db4c <__sinit+0x2c>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1f5      	bne.n	800db2c <__sinit+0xc>
 800db40:	f7ff ffc4 	bl	800dacc <global_stdio_init.part.0>
 800db44:	e7f2      	b.n	800db2c <__sinit+0xc>
 800db46:	bf00      	nop
 800db48:	0800da8d 	.word	0x0800da8d
 800db4c:	200057f4 	.word	0x200057f4

0800db50 <_fwalk_sglue>:
 800db50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db54:	4607      	mov	r7, r0
 800db56:	4688      	mov	r8, r1
 800db58:	4614      	mov	r4, r2
 800db5a:	2600      	movs	r6, #0
 800db5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db60:	f1b9 0901 	subs.w	r9, r9, #1
 800db64:	d505      	bpl.n	800db72 <_fwalk_sglue+0x22>
 800db66:	6824      	ldr	r4, [r4, #0]
 800db68:	2c00      	cmp	r4, #0
 800db6a:	d1f7      	bne.n	800db5c <_fwalk_sglue+0xc>
 800db6c:	4630      	mov	r0, r6
 800db6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db72:	89ab      	ldrh	r3, [r5, #12]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d907      	bls.n	800db88 <_fwalk_sglue+0x38>
 800db78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db7c:	3301      	adds	r3, #1
 800db7e:	d003      	beq.n	800db88 <_fwalk_sglue+0x38>
 800db80:	4629      	mov	r1, r5
 800db82:	4638      	mov	r0, r7
 800db84:	47c0      	blx	r8
 800db86:	4306      	orrs	r6, r0
 800db88:	3568      	adds	r5, #104	@ 0x68
 800db8a:	e7e9      	b.n	800db60 <_fwalk_sglue+0x10>

0800db8c <siprintf>:
 800db8c:	b40e      	push	{r1, r2, r3}
 800db8e:	b500      	push	{lr}
 800db90:	b09c      	sub	sp, #112	@ 0x70
 800db92:	ab1d      	add	r3, sp, #116	@ 0x74
 800db94:	9002      	str	r0, [sp, #8]
 800db96:	9006      	str	r0, [sp, #24]
 800db98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db9c:	4809      	ldr	r0, [pc, #36]	@ (800dbc4 <siprintf+0x38>)
 800db9e:	9107      	str	r1, [sp, #28]
 800dba0:	9104      	str	r1, [sp, #16]
 800dba2:	4909      	ldr	r1, [pc, #36]	@ (800dbc8 <siprintf+0x3c>)
 800dba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dba8:	9105      	str	r1, [sp, #20]
 800dbaa:	6800      	ldr	r0, [r0, #0]
 800dbac:	9301      	str	r3, [sp, #4]
 800dbae:	a902      	add	r1, sp, #8
 800dbb0:	f000 fa7a 	bl	800e0a8 <_svfiprintf_r>
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	701a      	strb	r2, [r3, #0]
 800dbba:	b01c      	add	sp, #112	@ 0x70
 800dbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbc0:	b003      	add	sp, #12
 800dbc2:	4770      	bx	lr
 800dbc4:	20000038 	.word	0x20000038
 800dbc8:	ffff0208 	.word	0xffff0208

0800dbcc <siscanf>:
 800dbcc:	b40e      	push	{r1, r2, r3}
 800dbce:	b530      	push	{r4, r5, lr}
 800dbd0:	b09c      	sub	sp, #112	@ 0x70
 800dbd2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800dbd4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800dbd8:	f854 5b04 	ldr.w	r5, [r4], #4
 800dbdc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800dbe0:	9002      	str	r0, [sp, #8]
 800dbe2:	9006      	str	r0, [sp, #24]
 800dbe4:	f7f2 faf4 	bl	80001d0 <strlen>
 800dbe8:	4b0b      	ldr	r3, [pc, #44]	@ (800dc18 <siscanf+0x4c>)
 800dbea:	9003      	str	r0, [sp, #12]
 800dbec:	9007      	str	r0, [sp, #28]
 800dbee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbf0:	480a      	ldr	r0, [pc, #40]	@ (800dc1c <siscanf+0x50>)
 800dbf2:	9401      	str	r4, [sp, #4]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbf8:	9314      	str	r3, [sp, #80]	@ 0x50
 800dbfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbfe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc02:	462a      	mov	r2, r5
 800dc04:	4623      	mov	r3, r4
 800dc06:	a902      	add	r1, sp, #8
 800dc08:	6800      	ldr	r0, [r0, #0]
 800dc0a:	f000 fba1 	bl	800e350 <__ssvfiscanf_r>
 800dc0e:	b01c      	add	sp, #112	@ 0x70
 800dc10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc14:	b003      	add	sp, #12
 800dc16:	4770      	bx	lr
 800dc18:	0800dc43 	.word	0x0800dc43
 800dc1c:	20000038 	.word	0x20000038

0800dc20 <__sread>:
 800dc20:	b510      	push	{r4, lr}
 800dc22:	460c      	mov	r4, r1
 800dc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc28:	f000 f910 	bl	800de4c <_read_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	bfab      	itete	ge
 800dc30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc32:	89a3      	ldrhlt	r3, [r4, #12]
 800dc34:	181b      	addge	r3, r3, r0
 800dc36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc3a:	bfac      	ite	ge
 800dc3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc3e:	81a3      	strhlt	r3, [r4, #12]
 800dc40:	bd10      	pop	{r4, pc}

0800dc42 <__seofread>:
 800dc42:	2000      	movs	r0, #0
 800dc44:	4770      	bx	lr

0800dc46 <__swrite>:
 800dc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4a:	461f      	mov	r7, r3
 800dc4c:	898b      	ldrh	r3, [r1, #12]
 800dc4e:	05db      	lsls	r3, r3, #23
 800dc50:	4605      	mov	r5, r0
 800dc52:	460c      	mov	r4, r1
 800dc54:	4616      	mov	r6, r2
 800dc56:	d505      	bpl.n	800dc64 <__swrite+0x1e>
 800dc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f000 f8e2 	bl	800de28 <_lseek_r>
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc6e:	81a3      	strh	r3, [r4, #12]
 800dc70:	4632      	mov	r2, r6
 800dc72:	463b      	mov	r3, r7
 800dc74:	4628      	mov	r0, r5
 800dc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7a:	f000 b909 	b.w	800de90 <_write_r>

0800dc7e <__sseek>:
 800dc7e:	b510      	push	{r4, lr}
 800dc80:	460c      	mov	r4, r1
 800dc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc86:	f000 f8cf 	bl	800de28 <_lseek_r>
 800dc8a:	1c43      	adds	r3, r0, #1
 800dc8c:	89a3      	ldrh	r3, [r4, #12]
 800dc8e:	bf15      	itete	ne
 800dc90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc9a:	81a3      	strheq	r3, [r4, #12]
 800dc9c:	bf18      	it	ne
 800dc9e:	81a3      	strhne	r3, [r4, #12]
 800dca0:	bd10      	pop	{r4, pc}

0800dca2 <__sclose>:
 800dca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dca6:	f000 b8af 	b.w	800de08 <_close_r>

0800dcaa <_vsniprintf_r>:
 800dcaa:	b530      	push	{r4, r5, lr}
 800dcac:	4614      	mov	r4, r2
 800dcae:	2c00      	cmp	r4, #0
 800dcb0:	b09b      	sub	sp, #108	@ 0x6c
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	da05      	bge.n	800dcc4 <_vsniprintf_r+0x1a>
 800dcb8:	238b      	movs	r3, #139	@ 0x8b
 800dcba:	6003      	str	r3, [r0, #0]
 800dcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc0:	b01b      	add	sp, #108	@ 0x6c
 800dcc2:	bd30      	pop	{r4, r5, pc}
 800dcc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dcc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dccc:	bf14      	ite	ne
 800dcce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dcd2:	4623      	moveq	r3, r4
 800dcd4:	9302      	str	r3, [sp, #8]
 800dcd6:	9305      	str	r3, [sp, #20]
 800dcd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcdc:	9100      	str	r1, [sp, #0]
 800dcde:	9104      	str	r1, [sp, #16]
 800dce0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dce4:	4669      	mov	r1, sp
 800dce6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dce8:	f000 f9de 	bl	800e0a8 <_svfiprintf_r>
 800dcec:	1c43      	adds	r3, r0, #1
 800dcee:	bfbc      	itt	lt
 800dcf0:	238b      	movlt	r3, #139	@ 0x8b
 800dcf2:	602b      	strlt	r3, [r5, #0]
 800dcf4:	2c00      	cmp	r4, #0
 800dcf6:	d0e3      	beq.n	800dcc0 <_vsniprintf_r+0x16>
 800dcf8:	9b00      	ldr	r3, [sp, #0]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	701a      	strb	r2, [r3, #0]
 800dcfe:	e7df      	b.n	800dcc0 <_vsniprintf_r+0x16>

0800dd00 <vsniprintf>:
 800dd00:	b507      	push	{r0, r1, r2, lr}
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	4613      	mov	r3, r2
 800dd06:	460a      	mov	r2, r1
 800dd08:	4601      	mov	r1, r0
 800dd0a:	4803      	ldr	r0, [pc, #12]	@ (800dd18 <vsniprintf+0x18>)
 800dd0c:	6800      	ldr	r0, [r0, #0]
 800dd0e:	f7ff ffcc 	bl	800dcaa <_vsniprintf_r>
 800dd12:	b003      	add	sp, #12
 800dd14:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd18:	20000038 	.word	0x20000038

0800dd1c <memset>:
 800dd1c:	4402      	add	r2, r0
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d100      	bne.n	800dd26 <memset+0xa>
 800dd24:	4770      	bx	lr
 800dd26:	f803 1b01 	strb.w	r1, [r3], #1
 800dd2a:	e7f9      	b.n	800dd20 <memset+0x4>

0800dd2c <strncmp>:
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	b16a      	cbz	r2, 800dd4c <strncmp+0x20>
 800dd30:	3901      	subs	r1, #1
 800dd32:	1884      	adds	r4, r0, r2
 800dd34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d103      	bne.n	800dd48 <strncmp+0x1c>
 800dd40:	42a0      	cmp	r0, r4
 800dd42:	d001      	beq.n	800dd48 <strncmp+0x1c>
 800dd44:	2a00      	cmp	r2, #0
 800dd46:	d1f5      	bne.n	800dd34 <strncmp+0x8>
 800dd48:	1ad0      	subs	r0, r2, r3
 800dd4a:	bd10      	pop	{r4, pc}
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	e7fc      	b.n	800dd4a <strncmp+0x1e>

0800dd50 <strtok>:
 800dd50:	4b16      	ldr	r3, [pc, #88]	@ (800ddac <strtok+0x5c>)
 800dd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd56:	681f      	ldr	r7, [r3, #0]
 800dd58:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	460e      	mov	r6, r1
 800dd5e:	b9ec      	cbnz	r4, 800dd9c <strtok+0x4c>
 800dd60:	2050      	movs	r0, #80	@ 0x50
 800dd62:	f7ff fd0d 	bl	800d780 <malloc>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6478      	str	r0, [r7, #68]	@ 0x44
 800dd6a:	b920      	cbnz	r0, 800dd76 <strtok+0x26>
 800dd6c:	4b10      	ldr	r3, [pc, #64]	@ (800ddb0 <strtok+0x60>)
 800dd6e:	4811      	ldr	r0, [pc, #68]	@ (800ddb4 <strtok+0x64>)
 800dd70:	215b      	movs	r1, #91	@ 0x5b
 800dd72:	f000 f8d5 	bl	800df20 <__assert_func>
 800dd76:	e9c0 4400 	strd	r4, r4, [r0]
 800dd7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dd7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dd82:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dd86:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dd8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dd8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dd92:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dd96:	6184      	str	r4, [r0, #24]
 800dd98:	7704      	strb	r4, [r0, #28]
 800dd9a:	6244      	str	r4, [r0, #36]	@ 0x24
 800dd9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd9e:	4631      	mov	r1, r6
 800dda0:	4628      	mov	r0, r5
 800dda2:	2301      	movs	r3, #1
 800dda4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dda8:	f000 b806 	b.w	800ddb8 <__strtok_r>
 800ddac:	20000038 	.word	0x20000038
 800ddb0:	080104a9 	.word	0x080104a9
 800ddb4:	080104c0 	.word	0x080104c0

0800ddb8 <__strtok_r>:
 800ddb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	b908      	cbnz	r0, 800ddc2 <__strtok_r+0xa>
 800ddbe:	6814      	ldr	r4, [r2, #0]
 800ddc0:	b144      	cbz	r4, 800ddd4 <__strtok_r+0x1c>
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ddc8:	460f      	mov	r7, r1
 800ddca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ddce:	b91e      	cbnz	r6, 800ddd8 <__strtok_r+0x20>
 800ddd0:	b965      	cbnz	r5, 800ddec <__strtok_r+0x34>
 800ddd2:	6015      	str	r5, [r2, #0]
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	e005      	b.n	800dde4 <__strtok_r+0x2c>
 800ddd8:	42b5      	cmp	r5, r6
 800ddda:	d1f6      	bne.n	800ddca <__strtok_r+0x12>
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1f0      	bne.n	800ddc2 <__strtok_r+0xa>
 800dde0:	6014      	str	r4, [r2, #0]
 800dde2:	7003      	strb	r3, [r0, #0]
 800dde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dde6:	461c      	mov	r4, r3
 800dde8:	e00c      	b.n	800de04 <__strtok_r+0x4c>
 800ddea:	b915      	cbnz	r5, 800ddf2 <__strtok_r+0x3a>
 800ddec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ddf0:	460e      	mov	r6, r1
 800ddf2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ddf6:	42ab      	cmp	r3, r5
 800ddf8:	d1f7      	bne.n	800ddea <__strtok_r+0x32>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d0f3      	beq.n	800dde6 <__strtok_r+0x2e>
 800ddfe:	2300      	movs	r3, #0
 800de00:	f804 3c01 	strb.w	r3, [r4, #-1]
 800de04:	6014      	str	r4, [r2, #0]
 800de06:	e7ed      	b.n	800dde4 <__strtok_r+0x2c>

0800de08 <_close_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4d06      	ldr	r5, [pc, #24]	@ (800de24 <_close_r+0x1c>)
 800de0c:	2300      	movs	r3, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	602b      	str	r3, [r5, #0]
 800de14:	f7f5 fbfa 	bl	800360c <_close>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_close_r+0x1a>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_close_r+0x1a>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	200057f8 	.word	0x200057f8

0800de28 <_lseek_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4d07      	ldr	r5, [pc, #28]	@ (800de48 <_lseek_r+0x20>)
 800de2c:	4604      	mov	r4, r0
 800de2e:	4608      	mov	r0, r1
 800de30:	4611      	mov	r1, r2
 800de32:	2200      	movs	r2, #0
 800de34:	602a      	str	r2, [r5, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	f7f5 fc0f 	bl	800365a <_lseek>
 800de3c:	1c43      	adds	r3, r0, #1
 800de3e:	d102      	bne.n	800de46 <_lseek_r+0x1e>
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	b103      	cbz	r3, 800de46 <_lseek_r+0x1e>
 800de44:	6023      	str	r3, [r4, #0]
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	200057f8 	.word	0x200057f8

0800de4c <_read_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	4d07      	ldr	r5, [pc, #28]	@ (800de6c <_read_r+0x20>)
 800de50:	4604      	mov	r4, r0
 800de52:	4608      	mov	r0, r1
 800de54:	4611      	mov	r1, r2
 800de56:	2200      	movs	r2, #0
 800de58:	602a      	str	r2, [r5, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	f7f5 fb9d 	bl	800359a <_read>
 800de60:	1c43      	adds	r3, r0, #1
 800de62:	d102      	bne.n	800de6a <_read_r+0x1e>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	b103      	cbz	r3, 800de6a <_read_r+0x1e>
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	bd38      	pop	{r3, r4, r5, pc}
 800de6c:	200057f8 	.word	0x200057f8

0800de70 <_sbrk_r>:
 800de70:	b538      	push	{r3, r4, r5, lr}
 800de72:	4d06      	ldr	r5, [pc, #24]	@ (800de8c <_sbrk_r+0x1c>)
 800de74:	2300      	movs	r3, #0
 800de76:	4604      	mov	r4, r0
 800de78:	4608      	mov	r0, r1
 800de7a:	602b      	str	r3, [r5, #0]
 800de7c:	f7f5 fbfa 	bl	8003674 <_sbrk>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	d102      	bne.n	800de8a <_sbrk_r+0x1a>
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	b103      	cbz	r3, 800de8a <_sbrk_r+0x1a>
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	200057f8 	.word	0x200057f8

0800de90 <_write_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4d07      	ldr	r5, [pc, #28]	@ (800deb0 <_write_r+0x20>)
 800de94:	4604      	mov	r4, r0
 800de96:	4608      	mov	r0, r1
 800de98:	4611      	mov	r1, r2
 800de9a:	2200      	movs	r2, #0
 800de9c:	602a      	str	r2, [r5, #0]
 800de9e:	461a      	mov	r2, r3
 800dea0:	f7f5 fb98 	bl	80035d4 <_write>
 800dea4:	1c43      	adds	r3, r0, #1
 800dea6:	d102      	bne.n	800deae <_write_r+0x1e>
 800dea8:	682b      	ldr	r3, [r5, #0]
 800deaa:	b103      	cbz	r3, 800deae <_write_r+0x1e>
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	bd38      	pop	{r3, r4, r5, pc}
 800deb0:	200057f8 	.word	0x200057f8

0800deb4 <__errno>:
 800deb4:	4b01      	ldr	r3, [pc, #4]	@ (800debc <__errno+0x8>)
 800deb6:	6818      	ldr	r0, [r3, #0]
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	20000038 	.word	0x20000038

0800dec0 <__libc_init_array>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	4d0d      	ldr	r5, [pc, #52]	@ (800def8 <__libc_init_array+0x38>)
 800dec4:	4c0d      	ldr	r4, [pc, #52]	@ (800defc <__libc_init_array+0x3c>)
 800dec6:	1b64      	subs	r4, r4, r5
 800dec8:	10a4      	asrs	r4, r4, #2
 800deca:	2600      	movs	r6, #0
 800decc:	42a6      	cmp	r6, r4
 800dece:	d109      	bne.n	800dee4 <__libc_init_array+0x24>
 800ded0:	4d0b      	ldr	r5, [pc, #44]	@ (800df00 <__libc_init_array+0x40>)
 800ded2:	4c0c      	ldr	r4, [pc, #48]	@ (800df04 <__libc_init_array+0x44>)
 800ded4:	f001 fb30 	bl	800f538 <_init>
 800ded8:	1b64      	subs	r4, r4, r5
 800deda:	10a4      	asrs	r4, r4, #2
 800dedc:	2600      	movs	r6, #0
 800dede:	42a6      	cmp	r6, r4
 800dee0:	d105      	bne.n	800deee <__libc_init_array+0x2e>
 800dee2:	bd70      	pop	{r4, r5, r6, pc}
 800dee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dee8:	4798      	blx	r3
 800deea:	3601      	adds	r6, #1
 800deec:	e7ee      	b.n	800decc <__libc_init_array+0xc>
 800deee:	f855 3b04 	ldr.w	r3, [r5], #4
 800def2:	4798      	blx	r3
 800def4:	3601      	adds	r6, #1
 800def6:	e7f2      	b.n	800dede <__libc_init_array+0x1e>
 800def8:	080105ac 	.word	0x080105ac
 800defc:	080105ac 	.word	0x080105ac
 800df00:	080105ac 	.word	0x080105ac
 800df04:	080105b0 	.word	0x080105b0

0800df08 <__retarget_lock_init_recursive>:
 800df08:	4770      	bx	lr

0800df0a <__retarget_lock_acquire_recursive>:
 800df0a:	4770      	bx	lr

0800df0c <__retarget_lock_release_recursive>:
 800df0c:	4770      	bx	lr

0800df0e <strcpy>:
 800df0e:	4603      	mov	r3, r0
 800df10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df14:	f803 2b01 	strb.w	r2, [r3], #1
 800df18:	2a00      	cmp	r2, #0
 800df1a:	d1f9      	bne.n	800df10 <strcpy+0x2>
 800df1c:	4770      	bx	lr
	...

0800df20 <__assert_func>:
 800df20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df22:	4614      	mov	r4, r2
 800df24:	461a      	mov	r2, r3
 800df26:	4b09      	ldr	r3, [pc, #36]	@ (800df4c <__assert_func+0x2c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4605      	mov	r5, r0
 800df2c:	68d8      	ldr	r0, [r3, #12]
 800df2e:	b954      	cbnz	r4, 800df46 <__assert_func+0x26>
 800df30:	4b07      	ldr	r3, [pc, #28]	@ (800df50 <__assert_func+0x30>)
 800df32:	461c      	mov	r4, r3
 800df34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df38:	9100      	str	r1, [sp, #0]
 800df3a:	462b      	mov	r3, r5
 800df3c:	4905      	ldr	r1, [pc, #20]	@ (800df54 <__assert_func+0x34>)
 800df3e:	f000 ff03 	bl	800ed48 <fiprintf>
 800df42:	f000 ffae 	bl	800eea2 <abort>
 800df46:	4b04      	ldr	r3, [pc, #16]	@ (800df58 <__assert_func+0x38>)
 800df48:	e7f4      	b.n	800df34 <__assert_func+0x14>
 800df4a:	bf00      	nop
 800df4c:	20000038 	.word	0x20000038
 800df50:	08010555 	.word	0x08010555
 800df54:	08010527 	.word	0x08010527
 800df58:	0801051a 	.word	0x0801051a

0800df5c <_free_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4605      	mov	r5, r0
 800df60:	2900      	cmp	r1, #0
 800df62:	d041      	beq.n	800dfe8 <_free_r+0x8c>
 800df64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df68:	1f0c      	subs	r4, r1, #4
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfb8      	it	lt
 800df6e:	18e4      	addlt	r4, r4, r3
 800df70:	f7ff fcb8 	bl	800d8e4 <__malloc_lock>
 800df74:	4a1d      	ldr	r2, [pc, #116]	@ (800dfec <_free_r+0x90>)
 800df76:	6813      	ldr	r3, [r2, #0]
 800df78:	b933      	cbnz	r3, 800df88 <_free_r+0x2c>
 800df7a:	6063      	str	r3, [r4, #4]
 800df7c:	6014      	str	r4, [r2, #0]
 800df7e:	4628      	mov	r0, r5
 800df80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df84:	f7ff bcb4 	b.w	800d8f0 <__malloc_unlock>
 800df88:	42a3      	cmp	r3, r4
 800df8a:	d908      	bls.n	800df9e <_free_r+0x42>
 800df8c:	6820      	ldr	r0, [r4, #0]
 800df8e:	1821      	adds	r1, r4, r0
 800df90:	428b      	cmp	r3, r1
 800df92:	bf01      	itttt	eq
 800df94:	6819      	ldreq	r1, [r3, #0]
 800df96:	685b      	ldreq	r3, [r3, #4]
 800df98:	1809      	addeq	r1, r1, r0
 800df9a:	6021      	streq	r1, [r4, #0]
 800df9c:	e7ed      	b.n	800df7a <_free_r+0x1e>
 800df9e:	461a      	mov	r2, r3
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	b10b      	cbz	r3, 800dfa8 <_free_r+0x4c>
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	d9fa      	bls.n	800df9e <_free_r+0x42>
 800dfa8:	6811      	ldr	r1, [r2, #0]
 800dfaa:	1850      	adds	r0, r2, r1
 800dfac:	42a0      	cmp	r0, r4
 800dfae:	d10b      	bne.n	800dfc8 <_free_r+0x6c>
 800dfb0:	6820      	ldr	r0, [r4, #0]
 800dfb2:	4401      	add	r1, r0
 800dfb4:	1850      	adds	r0, r2, r1
 800dfb6:	4283      	cmp	r3, r0
 800dfb8:	6011      	str	r1, [r2, #0]
 800dfba:	d1e0      	bne.n	800df7e <_free_r+0x22>
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	6053      	str	r3, [r2, #4]
 800dfc2:	4408      	add	r0, r1
 800dfc4:	6010      	str	r0, [r2, #0]
 800dfc6:	e7da      	b.n	800df7e <_free_r+0x22>
 800dfc8:	d902      	bls.n	800dfd0 <_free_r+0x74>
 800dfca:	230c      	movs	r3, #12
 800dfcc:	602b      	str	r3, [r5, #0]
 800dfce:	e7d6      	b.n	800df7e <_free_r+0x22>
 800dfd0:	6820      	ldr	r0, [r4, #0]
 800dfd2:	1821      	adds	r1, r4, r0
 800dfd4:	428b      	cmp	r3, r1
 800dfd6:	bf04      	itt	eq
 800dfd8:	6819      	ldreq	r1, [r3, #0]
 800dfda:	685b      	ldreq	r3, [r3, #4]
 800dfdc:	6063      	str	r3, [r4, #4]
 800dfde:	bf04      	itt	eq
 800dfe0:	1809      	addeq	r1, r1, r0
 800dfe2:	6021      	streq	r1, [r4, #0]
 800dfe4:	6054      	str	r4, [r2, #4]
 800dfe6:	e7ca      	b.n	800df7e <_free_r+0x22>
 800dfe8:	bd38      	pop	{r3, r4, r5, pc}
 800dfea:	bf00      	nop
 800dfec:	200056b8 	.word	0x200056b8

0800dff0 <__ssputs_r>:
 800dff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff4:	688e      	ldr	r6, [r1, #8]
 800dff6:	461f      	mov	r7, r3
 800dff8:	42be      	cmp	r6, r7
 800dffa:	680b      	ldr	r3, [r1, #0]
 800dffc:	4682      	mov	sl, r0
 800dffe:	460c      	mov	r4, r1
 800e000:	4690      	mov	r8, r2
 800e002:	d82d      	bhi.n	800e060 <__ssputs_r+0x70>
 800e004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e008:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e00c:	d026      	beq.n	800e05c <__ssputs_r+0x6c>
 800e00e:	6965      	ldr	r5, [r4, #20]
 800e010:	6909      	ldr	r1, [r1, #16]
 800e012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e016:	eba3 0901 	sub.w	r9, r3, r1
 800e01a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e01e:	1c7b      	adds	r3, r7, #1
 800e020:	444b      	add	r3, r9
 800e022:	106d      	asrs	r5, r5, #1
 800e024:	429d      	cmp	r5, r3
 800e026:	bf38      	it	cc
 800e028:	461d      	movcc	r5, r3
 800e02a:	0553      	lsls	r3, r2, #21
 800e02c:	d527      	bpl.n	800e07e <__ssputs_r+0x8e>
 800e02e:	4629      	mov	r1, r5
 800e030:	f7ff fbd8 	bl	800d7e4 <_malloc_r>
 800e034:	4606      	mov	r6, r0
 800e036:	b360      	cbz	r0, 800e092 <__ssputs_r+0xa2>
 800e038:	6921      	ldr	r1, [r4, #16]
 800e03a:	464a      	mov	r2, r9
 800e03c:	f000 ff23 	bl	800ee86 <memcpy>
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e04a:	81a3      	strh	r3, [r4, #12]
 800e04c:	6126      	str	r6, [r4, #16]
 800e04e:	6165      	str	r5, [r4, #20]
 800e050:	444e      	add	r6, r9
 800e052:	eba5 0509 	sub.w	r5, r5, r9
 800e056:	6026      	str	r6, [r4, #0]
 800e058:	60a5      	str	r5, [r4, #8]
 800e05a:	463e      	mov	r6, r7
 800e05c:	42be      	cmp	r6, r7
 800e05e:	d900      	bls.n	800e062 <__ssputs_r+0x72>
 800e060:	463e      	mov	r6, r7
 800e062:	6820      	ldr	r0, [r4, #0]
 800e064:	4632      	mov	r2, r6
 800e066:	4641      	mov	r1, r8
 800e068:	f000 fef3 	bl	800ee52 <memmove>
 800e06c:	68a3      	ldr	r3, [r4, #8]
 800e06e:	1b9b      	subs	r3, r3, r6
 800e070:	60a3      	str	r3, [r4, #8]
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	4433      	add	r3, r6
 800e076:	6023      	str	r3, [r4, #0]
 800e078:	2000      	movs	r0, #0
 800e07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07e:	462a      	mov	r2, r5
 800e080:	f000 ff16 	bl	800eeb0 <_realloc_r>
 800e084:	4606      	mov	r6, r0
 800e086:	2800      	cmp	r0, #0
 800e088:	d1e0      	bne.n	800e04c <__ssputs_r+0x5c>
 800e08a:	6921      	ldr	r1, [r4, #16]
 800e08c:	4650      	mov	r0, sl
 800e08e:	f7ff ff65 	bl	800df5c <_free_r>
 800e092:	230c      	movs	r3, #12
 800e094:	f8ca 3000 	str.w	r3, [sl]
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e09e:	81a3      	strh	r3, [r4, #12]
 800e0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a4:	e7e9      	b.n	800e07a <__ssputs_r+0x8a>
	...

0800e0a8 <_svfiprintf_r>:
 800e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	4698      	mov	r8, r3
 800e0ae:	898b      	ldrh	r3, [r1, #12]
 800e0b0:	061b      	lsls	r3, r3, #24
 800e0b2:	b09d      	sub	sp, #116	@ 0x74
 800e0b4:	4607      	mov	r7, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	4614      	mov	r4, r2
 800e0ba:	d510      	bpl.n	800e0de <_svfiprintf_r+0x36>
 800e0bc:	690b      	ldr	r3, [r1, #16]
 800e0be:	b973      	cbnz	r3, 800e0de <_svfiprintf_r+0x36>
 800e0c0:	2140      	movs	r1, #64	@ 0x40
 800e0c2:	f7ff fb8f 	bl	800d7e4 <_malloc_r>
 800e0c6:	6028      	str	r0, [r5, #0]
 800e0c8:	6128      	str	r0, [r5, #16]
 800e0ca:	b930      	cbnz	r0, 800e0da <_svfiprintf_r+0x32>
 800e0cc:	230c      	movs	r3, #12
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d4:	b01d      	add	sp, #116	@ 0x74
 800e0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0da:	2340      	movs	r3, #64	@ 0x40
 800e0dc:	616b      	str	r3, [r5, #20]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0e2:	2320      	movs	r3, #32
 800e0e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ec:	2330      	movs	r3, #48	@ 0x30
 800e0ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e28c <_svfiprintf_r+0x1e4>
 800e0f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0f6:	f04f 0901 	mov.w	r9, #1
 800e0fa:	4623      	mov	r3, r4
 800e0fc:	469a      	mov	sl, r3
 800e0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e102:	b10a      	cbz	r2, 800e108 <_svfiprintf_r+0x60>
 800e104:	2a25      	cmp	r2, #37	@ 0x25
 800e106:	d1f9      	bne.n	800e0fc <_svfiprintf_r+0x54>
 800e108:	ebba 0b04 	subs.w	fp, sl, r4
 800e10c:	d00b      	beq.n	800e126 <_svfiprintf_r+0x7e>
 800e10e:	465b      	mov	r3, fp
 800e110:	4622      	mov	r2, r4
 800e112:	4629      	mov	r1, r5
 800e114:	4638      	mov	r0, r7
 800e116:	f7ff ff6b 	bl	800dff0 <__ssputs_r>
 800e11a:	3001      	adds	r0, #1
 800e11c:	f000 80a7 	beq.w	800e26e <_svfiprintf_r+0x1c6>
 800e120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e122:	445a      	add	r2, fp
 800e124:	9209      	str	r2, [sp, #36]	@ 0x24
 800e126:	f89a 3000 	ldrb.w	r3, [sl]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 809f 	beq.w	800e26e <_svfiprintf_r+0x1c6>
 800e130:	2300      	movs	r3, #0
 800e132:	f04f 32ff 	mov.w	r2, #4294967295
 800e136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e13a:	f10a 0a01 	add.w	sl, sl, #1
 800e13e:	9304      	str	r3, [sp, #16]
 800e140:	9307      	str	r3, [sp, #28]
 800e142:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e146:	931a      	str	r3, [sp, #104]	@ 0x68
 800e148:	4654      	mov	r4, sl
 800e14a:	2205      	movs	r2, #5
 800e14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e150:	484e      	ldr	r0, [pc, #312]	@ (800e28c <_svfiprintf_r+0x1e4>)
 800e152:	f7f2 f845 	bl	80001e0 <memchr>
 800e156:	9a04      	ldr	r2, [sp, #16]
 800e158:	b9d8      	cbnz	r0, 800e192 <_svfiprintf_r+0xea>
 800e15a:	06d0      	lsls	r0, r2, #27
 800e15c:	bf44      	itt	mi
 800e15e:	2320      	movmi	r3, #32
 800e160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e164:	0711      	lsls	r1, r2, #28
 800e166:	bf44      	itt	mi
 800e168:	232b      	movmi	r3, #43	@ 0x2b
 800e16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e16e:	f89a 3000 	ldrb.w	r3, [sl]
 800e172:	2b2a      	cmp	r3, #42	@ 0x2a
 800e174:	d015      	beq.n	800e1a2 <_svfiprintf_r+0xfa>
 800e176:	9a07      	ldr	r2, [sp, #28]
 800e178:	4654      	mov	r4, sl
 800e17a:	2000      	movs	r0, #0
 800e17c:	f04f 0c0a 	mov.w	ip, #10
 800e180:	4621      	mov	r1, r4
 800e182:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e186:	3b30      	subs	r3, #48	@ 0x30
 800e188:	2b09      	cmp	r3, #9
 800e18a:	d94b      	bls.n	800e224 <_svfiprintf_r+0x17c>
 800e18c:	b1b0      	cbz	r0, 800e1bc <_svfiprintf_r+0x114>
 800e18e:	9207      	str	r2, [sp, #28]
 800e190:	e014      	b.n	800e1bc <_svfiprintf_r+0x114>
 800e192:	eba0 0308 	sub.w	r3, r0, r8
 800e196:	fa09 f303 	lsl.w	r3, r9, r3
 800e19a:	4313      	orrs	r3, r2
 800e19c:	9304      	str	r3, [sp, #16]
 800e19e:	46a2      	mov	sl, r4
 800e1a0:	e7d2      	b.n	800e148 <_svfiprintf_r+0xa0>
 800e1a2:	9b03      	ldr	r3, [sp, #12]
 800e1a4:	1d19      	adds	r1, r3, #4
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	9103      	str	r1, [sp, #12]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	bfbb      	ittet	lt
 800e1ae:	425b      	neglt	r3, r3
 800e1b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e1b4:	9307      	strge	r3, [sp, #28]
 800e1b6:	9307      	strlt	r3, [sp, #28]
 800e1b8:	bfb8      	it	lt
 800e1ba:	9204      	strlt	r2, [sp, #16]
 800e1bc:	7823      	ldrb	r3, [r4, #0]
 800e1be:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1c0:	d10a      	bne.n	800e1d8 <_svfiprintf_r+0x130>
 800e1c2:	7863      	ldrb	r3, [r4, #1]
 800e1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1c6:	d132      	bne.n	800e22e <_svfiprintf_r+0x186>
 800e1c8:	9b03      	ldr	r3, [sp, #12]
 800e1ca:	1d1a      	adds	r2, r3, #4
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	9203      	str	r2, [sp, #12]
 800e1d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1d4:	3402      	adds	r4, #2
 800e1d6:	9305      	str	r3, [sp, #20]
 800e1d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e29c <_svfiprintf_r+0x1f4>
 800e1dc:	7821      	ldrb	r1, [r4, #0]
 800e1de:	2203      	movs	r2, #3
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	f7f1 fffd 	bl	80001e0 <memchr>
 800e1e6:	b138      	cbz	r0, 800e1f8 <_svfiprintf_r+0x150>
 800e1e8:	9b04      	ldr	r3, [sp, #16]
 800e1ea:	eba0 000a 	sub.w	r0, r0, sl
 800e1ee:	2240      	movs	r2, #64	@ 0x40
 800e1f0:	4082      	lsls	r2, r0
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	3401      	adds	r4, #1
 800e1f6:	9304      	str	r3, [sp, #16]
 800e1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1fc:	4824      	ldr	r0, [pc, #144]	@ (800e290 <_svfiprintf_r+0x1e8>)
 800e1fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e202:	2206      	movs	r2, #6
 800e204:	f7f1 ffec 	bl	80001e0 <memchr>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d036      	beq.n	800e27a <_svfiprintf_r+0x1d2>
 800e20c:	4b21      	ldr	r3, [pc, #132]	@ (800e294 <_svfiprintf_r+0x1ec>)
 800e20e:	bb1b      	cbnz	r3, 800e258 <_svfiprintf_r+0x1b0>
 800e210:	9b03      	ldr	r3, [sp, #12]
 800e212:	3307      	adds	r3, #7
 800e214:	f023 0307 	bic.w	r3, r3, #7
 800e218:	3308      	adds	r3, #8
 800e21a:	9303      	str	r3, [sp, #12]
 800e21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e21e:	4433      	add	r3, r6
 800e220:	9309      	str	r3, [sp, #36]	@ 0x24
 800e222:	e76a      	b.n	800e0fa <_svfiprintf_r+0x52>
 800e224:	fb0c 3202 	mla	r2, ip, r2, r3
 800e228:	460c      	mov	r4, r1
 800e22a:	2001      	movs	r0, #1
 800e22c:	e7a8      	b.n	800e180 <_svfiprintf_r+0xd8>
 800e22e:	2300      	movs	r3, #0
 800e230:	3401      	adds	r4, #1
 800e232:	9305      	str	r3, [sp, #20]
 800e234:	4619      	mov	r1, r3
 800e236:	f04f 0c0a 	mov.w	ip, #10
 800e23a:	4620      	mov	r0, r4
 800e23c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e240:	3a30      	subs	r2, #48	@ 0x30
 800e242:	2a09      	cmp	r2, #9
 800e244:	d903      	bls.n	800e24e <_svfiprintf_r+0x1a6>
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0c6      	beq.n	800e1d8 <_svfiprintf_r+0x130>
 800e24a:	9105      	str	r1, [sp, #20]
 800e24c:	e7c4      	b.n	800e1d8 <_svfiprintf_r+0x130>
 800e24e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e252:	4604      	mov	r4, r0
 800e254:	2301      	movs	r3, #1
 800e256:	e7f0      	b.n	800e23a <_svfiprintf_r+0x192>
 800e258:	ab03      	add	r3, sp, #12
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	462a      	mov	r2, r5
 800e25e:	4b0e      	ldr	r3, [pc, #56]	@ (800e298 <_svfiprintf_r+0x1f0>)
 800e260:	a904      	add	r1, sp, #16
 800e262:	4638      	mov	r0, r7
 800e264:	f3af 8000 	nop.w
 800e268:	1c42      	adds	r2, r0, #1
 800e26a:	4606      	mov	r6, r0
 800e26c:	d1d6      	bne.n	800e21c <_svfiprintf_r+0x174>
 800e26e:	89ab      	ldrh	r3, [r5, #12]
 800e270:	065b      	lsls	r3, r3, #25
 800e272:	f53f af2d 	bmi.w	800e0d0 <_svfiprintf_r+0x28>
 800e276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e278:	e72c      	b.n	800e0d4 <_svfiprintf_r+0x2c>
 800e27a:	ab03      	add	r3, sp, #12
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	462a      	mov	r2, r5
 800e280:	4b05      	ldr	r3, [pc, #20]	@ (800e298 <_svfiprintf_r+0x1f0>)
 800e282:	a904      	add	r1, sp, #16
 800e284:	4638      	mov	r0, r7
 800e286:	f000 fa45 	bl	800e714 <_printf_i>
 800e28a:	e7ed      	b.n	800e268 <_svfiprintf_r+0x1c0>
 800e28c:	08010556 	.word	0x08010556
 800e290:	08010560 	.word	0x08010560
 800e294:	00000000 	.word	0x00000000
 800e298:	0800dff1 	.word	0x0800dff1
 800e29c:	0801055c 	.word	0x0801055c

0800e2a0 <_sungetc_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	1c4b      	adds	r3, r1, #1
 800e2a4:	4614      	mov	r4, r2
 800e2a6:	d103      	bne.n	800e2b0 <_sungetc_r+0x10>
 800e2a8:	f04f 35ff 	mov.w	r5, #4294967295
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	8993      	ldrh	r3, [r2, #12]
 800e2b2:	f023 0320 	bic.w	r3, r3, #32
 800e2b6:	8193      	strh	r3, [r2, #12]
 800e2b8:	6853      	ldr	r3, [r2, #4]
 800e2ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e2bc:	b2cd      	uxtb	r5, r1
 800e2be:	b18a      	cbz	r2, 800e2e4 <_sungetc_r+0x44>
 800e2c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	dd08      	ble.n	800e2d8 <_sungetc_r+0x38>
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	1e5a      	subs	r2, r3, #1
 800e2ca:	6022      	str	r2, [r4, #0]
 800e2cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	6063      	str	r3, [r4, #4]
 800e2d6:	e7e9      	b.n	800e2ac <_sungetc_r+0xc>
 800e2d8:	4621      	mov	r1, r4
 800e2da:	f000 fd80 	bl	800edde <__submore>
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d0f1      	beq.n	800e2c6 <_sungetc_r+0x26>
 800e2e2:	e7e1      	b.n	800e2a8 <_sungetc_r+0x8>
 800e2e4:	6921      	ldr	r1, [r4, #16]
 800e2e6:	6822      	ldr	r2, [r4, #0]
 800e2e8:	b141      	cbz	r1, 800e2fc <_sungetc_r+0x5c>
 800e2ea:	4291      	cmp	r1, r2
 800e2ec:	d206      	bcs.n	800e2fc <_sungetc_r+0x5c>
 800e2ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e2f2:	42a9      	cmp	r1, r5
 800e2f4:	d102      	bne.n	800e2fc <_sungetc_r+0x5c>
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	6022      	str	r2, [r4, #0]
 800e2fa:	e7ea      	b.n	800e2d2 <_sungetc_r+0x32>
 800e2fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e304:	6363      	str	r3, [r4, #52]	@ 0x34
 800e306:	2303      	movs	r3, #3
 800e308:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e30a:	4623      	mov	r3, r4
 800e30c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	2301      	movs	r3, #1
 800e314:	e7de      	b.n	800e2d4 <_sungetc_r+0x34>

0800e316 <__ssrefill_r>:
 800e316:	b510      	push	{r4, lr}
 800e318:	460c      	mov	r4, r1
 800e31a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e31c:	b169      	cbz	r1, 800e33a <__ssrefill_r+0x24>
 800e31e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e322:	4299      	cmp	r1, r3
 800e324:	d001      	beq.n	800e32a <__ssrefill_r+0x14>
 800e326:	f7ff fe19 	bl	800df5c <_free_r>
 800e32a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e32c:	6063      	str	r3, [r4, #4]
 800e32e:	2000      	movs	r0, #0
 800e330:	6360      	str	r0, [r4, #52]	@ 0x34
 800e332:	b113      	cbz	r3, 800e33a <__ssrefill_r+0x24>
 800e334:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e336:	6023      	str	r3, [r4, #0]
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	6923      	ldr	r3, [r4, #16]
 800e33c:	6023      	str	r3, [r4, #0]
 800e33e:	2300      	movs	r3, #0
 800e340:	6063      	str	r3, [r4, #4]
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f043 0320 	orr.w	r3, r3, #32
 800e348:	81a3      	strh	r3, [r4, #12]
 800e34a:	f04f 30ff 	mov.w	r0, #4294967295
 800e34e:	e7f3      	b.n	800e338 <__ssrefill_r+0x22>

0800e350 <__ssvfiscanf_r>:
 800e350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e354:	460c      	mov	r4, r1
 800e356:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e35a:	2100      	movs	r1, #0
 800e35c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e360:	49a5      	ldr	r1, [pc, #660]	@ (800e5f8 <__ssvfiscanf_r+0x2a8>)
 800e362:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e364:	f10d 0804 	add.w	r8, sp, #4
 800e368:	49a4      	ldr	r1, [pc, #656]	@ (800e5fc <__ssvfiscanf_r+0x2ac>)
 800e36a:	4fa5      	ldr	r7, [pc, #660]	@ (800e600 <__ssvfiscanf_r+0x2b0>)
 800e36c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e370:	4606      	mov	r6, r0
 800e372:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	7813      	ldrb	r3, [r2, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f000 8158 	beq.w	800e62e <__ssvfiscanf_r+0x2de>
 800e37e:	5cf9      	ldrb	r1, [r7, r3]
 800e380:	f011 0108 	ands.w	r1, r1, #8
 800e384:	f102 0501 	add.w	r5, r2, #1
 800e388:	d019      	beq.n	800e3be <__ssvfiscanf_r+0x6e>
 800e38a:	6863      	ldr	r3, [r4, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dd0f      	ble.n	800e3b0 <__ssvfiscanf_r+0x60>
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	781a      	ldrb	r2, [r3, #0]
 800e394:	5cba      	ldrb	r2, [r7, r2]
 800e396:	0712      	lsls	r2, r2, #28
 800e398:	d401      	bmi.n	800e39e <__ssvfiscanf_r+0x4e>
 800e39a:	462a      	mov	r2, r5
 800e39c:	e7eb      	b.n	800e376 <__ssvfiscanf_r+0x26>
 800e39e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e3a0:	3201      	adds	r2, #1
 800e3a2:	9245      	str	r2, [sp, #276]	@ 0x114
 800e3a4:	6862      	ldr	r2, [r4, #4]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	3a01      	subs	r2, #1
 800e3aa:	6062      	str	r2, [r4, #4]
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	e7ec      	b.n	800e38a <__ssvfiscanf_r+0x3a>
 800e3b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	4798      	blx	r3
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d0e9      	beq.n	800e390 <__ssvfiscanf_r+0x40>
 800e3bc:	e7ed      	b.n	800e39a <__ssvfiscanf_r+0x4a>
 800e3be:	2b25      	cmp	r3, #37	@ 0x25
 800e3c0:	d012      	beq.n	800e3e8 <__ssvfiscanf_r+0x98>
 800e3c2:	4699      	mov	r9, r3
 800e3c4:	6863      	ldr	r3, [r4, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f340 8093 	ble.w	800e4f2 <__ssvfiscanf_r+0x1a2>
 800e3cc:	6822      	ldr	r2, [r4, #0]
 800e3ce:	7813      	ldrb	r3, [r2, #0]
 800e3d0:	454b      	cmp	r3, r9
 800e3d2:	f040 812c 	bne.w	800e62e <__ssvfiscanf_r+0x2de>
 800e3d6:	6863      	ldr	r3, [r4, #4]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	6063      	str	r3, [r4, #4]
 800e3dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e3de:	3201      	adds	r2, #1
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	6022      	str	r2, [r4, #0]
 800e3e4:	9345      	str	r3, [sp, #276]	@ 0x114
 800e3e6:	e7d8      	b.n	800e39a <__ssvfiscanf_r+0x4a>
 800e3e8:	9141      	str	r1, [sp, #260]	@ 0x104
 800e3ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e3ec:	7853      	ldrb	r3, [r2, #1]
 800e3ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3f0:	bf02      	ittt	eq
 800e3f2:	2310      	moveq	r3, #16
 800e3f4:	1c95      	addeq	r5, r2, #2
 800e3f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e3f8:	220a      	movs	r2, #10
 800e3fa:	46a9      	mov	r9, r5
 800e3fc:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e400:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e404:	2b09      	cmp	r3, #9
 800e406:	d91e      	bls.n	800e446 <__ssvfiscanf_r+0xf6>
 800e408:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e604 <__ssvfiscanf_r+0x2b4>
 800e40c:	2203      	movs	r2, #3
 800e40e:	4650      	mov	r0, sl
 800e410:	f7f1 fee6 	bl	80001e0 <memchr>
 800e414:	b138      	cbz	r0, 800e426 <__ssvfiscanf_r+0xd6>
 800e416:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e418:	eba0 000a 	sub.w	r0, r0, sl
 800e41c:	2301      	movs	r3, #1
 800e41e:	4083      	lsls	r3, r0
 800e420:	4313      	orrs	r3, r2
 800e422:	9341      	str	r3, [sp, #260]	@ 0x104
 800e424:	464d      	mov	r5, r9
 800e426:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e42a:	2b78      	cmp	r3, #120	@ 0x78
 800e42c:	d806      	bhi.n	800e43c <__ssvfiscanf_r+0xec>
 800e42e:	2b57      	cmp	r3, #87	@ 0x57
 800e430:	d810      	bhi.n	800e454 <__ssvfiscanf_r+0x104>
 800e432:	2b25      	cmp	r3, #37	@ 0x25
 800e434:	d0c5      	beq.n	800e3c2 <__ssvfiscanf_r+0x72>
 800e436:	d857      	bhi.n	800e4e8 <__ssvfiscanf_r+0x198>
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d065      	beq.n	800e508 <__ssvfiscanf_r+0x1b8>
 800e43c:	2303      	movs	r3, #3
 800e43e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e440:	230a      	movs	r3, #10
 800e442:	9342      	str	r3, [sp, #264]	@ 0x108
 800e444:	e078      	b.n	800e538 <__ssvfiscanf_r+0x1e8>
 800e446:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e448:	fb02 1103 	mla	r1, r2, r3, r1
 800e44c:	3930      	subs	r1, #48	@ 0x30
 800e44e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e450:	464d      	mov	r5, r9
 800e452:	e7d2      	b.n	800e3fa <__ssvfiscanf_r+0xaa>
 800e454:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e458:	2a20      	cmp	r2, #32
 800e45a:	d8ef      	bhi.n	800e43c <__ssvfiscanf_r+0xec>
 800e45c:	a101      	add	r1, pc, #4	@ (adr r1, 800e464 <__ssvfiscanf_r+0x114>)
 800e45e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e517 	.word	0x0800e517
 800e468:	0800e43d 	.word	0x0800e43d
 800e46c:	0800e43d 	.word	0x0800e43d
 800e470:	0800e571 	.word	0x0800e571
 800e474:	0800e43d 	.word	0x0800e43d
 800e478:	0800e43d 	.word	0x0800e43d
 800e47c:	0800e43d 	.word	0x0800e43d
 800e480:	0800e43d 	.word	0x0800e43d
 800e484:	0800e43d 	.word	0x0800e43d
 800e488:	0800e43d 	.word	0x0800e43d
 800e48c:	0800e43d 	.word	0x0800e43d
 800e490:	0800e587 	.word	0x0800e587
 800e494:	0800e56d 	.word	0x0800e56d
 800e498:	0800e4ef 	.word	0x0800e4ef
 800e49c:	0800e4ef 	.word	0x0800e4ef
 800e4a0:	0800e4ef 	.word	0x0800e4ef
 800e4a4:	0800e43d 	.word	0x0800e43d
 800e4a8:	0800e529 	.word	0x0800e529
 800e4ac:	0800e43d 	.word	0x0800e43d
 800e4b0:	0800e43d 	.word	0x0800e43d
 800e4b4:	0800e43d 	.word	0x0800e43d
 800e4b8:	0800e43d 	.word	0x0800e43d
 800e4bc:	0800e597 	.word	0x0800e597
 800e4c0:	0800e531 	.word	0x0800e531
 800e4c4:	0800e50f 	.word	0x0800e50f
 800e4c8:	0800e43d 	.word	0x0800e43d
 800e4cc:	0800e43d 	.word	0x0800e43d
 800e4d0:	0800e593 	.word	0x0800e593
 800e4d4:	0800e43d 	.word	0x0800e43d
 800e4d8:	0800e56d 	.word	0x0800e56d
 800e4dc:	0800e43d 	.word	0x0800e43d
 800e4e0:	0800e43d 	.word	0x0800e43d
 800e4e4:	0800e517 	.word	0x0800e517
 800e4e8:	3b45      	subs	r3, #69	@ 0x45
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d8a6      	bhi.n	800e43c <__ssvfiscanf_r+0xec>
 800e4ee:	2305      	movs	r3, #5
 800e4f0:	e021      	b.n	800e536 <__ssvfiscanf_r+0x1e6>
 800e4f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e4f4:	4621      	mov	r1, r4
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	4798      	blx	r3
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	f43f af66 	beq.w	800e3cc <__ssvfiscanf_r+0x7c>
 800e500:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e502:	2800      	cmp	r0, #0
 800e504:	f040 808b 	bne.w	800e61e <__ssvfiscanf_r+0x2ce>
 800e508:	f04f 30ff 	mov.w	r0, #4294967295
 800e50c:	e08b      	b.n	800e626 <__ssvfiscanf_r+0x2d6>
 800e50e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e510:	f042 0220 	orr.w	r2, r2, #32
 800e514:	9241      	str	r2, [sp, #260]	@ 0x104
 800e516:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e51c:	9241      	str	r2, [sp, #260]	@ 0x104
 800e51e:	2210      	movs	r2, #16
 800e520:	2b6e      	cmp	r3, #110	@ 0x6e
 800e522:	9242      	str	r2, [sp, #264]	@ 0x108
 800e524:	d902      	bls.n	800e52c <__ssvfiscanf_r+0x1dc>
 800e526:	e005      	b.n	800e534 <__ssvfiscanf_r+0x1e4>
 800e528:	2300      	movs	r3, #0
 800e52a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e52c:	2303      	movs	r3, #3
 800e52e:	e002      	b.n	800e536 <__ssvfiscanf_r+0x1e6>
 800e530:	2308      	movs	r3, #8
 800e532:	9342      	str	r3, [sp, #264]	@ 0x108
 800e534:	2304      	movs	r3, #4
 800e536:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dd39      	ble.n	800e5b2 <__ssvfiscanf_r+0x262>
 800e53e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e540:	0659      	lsls	r1, r3, #25
 800e542:	d404      	bmi.n	800e54e <__ssvfiscanf_r+0x1fe>
 800e544:	6823      	ldr	r3, [r4, #0]
 800e546:	781a      	ldrb	r2, [r3, #0]
 800e548:	5cba      	ldrb	r2, [r7, r2]
 800e54a:	0712      	lsls	r2, r2, #28
 800e54c:	d438      	bmi.n	800e5c0 <__ssvfiscanf_r+0x270>
 800e54e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e550:	2b02      	cmp	r3, #2
 800e552:	dc47      	bgt.n	800e5e4 <__ssvfiscanf_r+0x294>
 800e554:	466b      	mov	r3, sp
 800e556:	4622      	mov	r2, r4
 800e558:	a941      	add	r1, sp, #260	@ 0x104
 800e55a:	4630      	mov	r0, r6
 800e55c:	f000 f9fa 	bl	800e954 <_scanf_chars>
 800e560:	2801      	cmp	r0, #1
 800e562:	d064      	beq.n	800e62e <__ssvfiscanf_r+0x2de>
 800e564:	2802      	cmp	r0, #2
 800e566:	f47f af18 	bne.w	800e39a <__ssvfiscanf_r+0x4a>
 800e56a:	e7c9      	b.n	800e500 <__ssvfiscanf_r+0x1b0>
 800e56c:	220a      	movs	r2, #10
 800e56e:	e7d7      	b.n	800e520 <__ssvfiscanf_r+0x1d0>
 800e570:	4629      	mov	r1, r5
 800e572:	4640      	mov	r0, r8
 800e574:	f000 fbfa 	bl	800ed6c <__sccl>
 800e578:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e57e:	9341      	str	r3, [sp, #260]	@ 0x104
 800e580:	4605      	mov	r5, r0
 800e582:	2301      	movs	r3, #1
 800e584:	e7d7      	b.n	800e536 <__ssvfiscanf_r+0x1e6>
 800e586:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e58c:	9341      	str	r3, [sp, #260]	@ 0x104
 800e58e:	2300      	movs	r3, #0
 800e590:	e7d1      	b.n	800e536 <__ssvfiscanf_r+0x1e6>
 800e592:	2302      	movs	r3, #2
 800e594:	e7cf      	b.n	800e536 <__ssvfiscanf_r+0x1e6>
 800e596:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e598:	06c3      	lsls	r3, r0, #27
 800e59a:	f53f aefe 	bmi.w	800e39a <__ssvfiscanf_r+0x4a>
 800e59e:	9b00      	ldr	r3, [sp, #0]
 800e5a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e5a2:	1d19      	adds	r1, r3, #4
 800e5a4:	9100      	str	r1, [sp, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	07c0      	lsls	r0, r0, #31
 800e5aa:	bf4c      	ite	mi
 800e5ac:	801a      	strhmi	r2, [r3, #0]
 800e5ae:	601a      	strpl	r2, [r3, #0]
 800e5b0:	e6f3      	b.n	800e39a <__ssvfiscanf_r+0x4a>
 800e5b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	4798      	blx	r3
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d0bf      	beq.n	800e53e <__ssvfiscanf_r+0x1ee>
 800e5be:	e79f      	b.n	800e500 <__ssvfiscanf_r+0x1b0>
 800e5c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e5c2:	3201      	adds	r2, #1
 800e5c4:	9245      	str	r2, [sp, #276]	@ 0x114
 800e5c6:	6862      	ldr	r2, [r4, #4]
 800e5c8:	3a01      	subs	r2, #1
 800e5ca:	2a00      	cmp	r2, #0
 800e5cc:	6062      	str	r2, [r4, #4]
 800e5ce:	dd02      	ble.n	800e5d6 <__ssvfiscanf_r+0x286>
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	6023      	str	r3, [r4, #0]
 800e5d4:	e7b6      	b.n	800e544 <__ssvfiscanf_r+0x1f4>
 800e5d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e5d8:	4621      	mov	r1, r4
 800e5da:	4630      	mov	r0, r6
 800e5dc:	4798      	blx	r3
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0b0      	beq.n	800e544 <__ssvfiscanf_r+0x1f4>
 800e5e2:	e78d      	b.n	800e500 <__ssvfiscanf_r+0x1b0>
 800e5e4:	2b04      	cmp	r3, #4
 800e5e6:	dc0f      	bgt.n	800e608 <__ssvfiscanf_r+0x2b8>
 800e5e8:	466b      	mov	r3, sp
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	a941      	add	r1, sp, #260	@ 0x104
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	f000 fa0a 	bl	800ea08 <_scanf_i>
 800e5f4:	e7b4      	b.n	800e560 <__ssvfiscanf_r+0x210>
 800e5f6:	bf00      	nop
 800e5f8:	0800e2a1 	.word	0x0800e2a1
 800e5fc:	0800e317 	.word	0x0800e317
 800e600:	080103a9 	.word	0x080103a9
 800e604:	0801055c 	.word	0x0801055c
 800e608:	4b0a      	ldr	r3, [pc, #40]	@ (800e634 <__ssvfiscanf_r+0x2e4>)
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f43f aec5 	beq.w	800e39a <__ssvfiscanf_r+0x4a>
 800e610:	466b      	mov	r3, sp
 800e612:	4622      	mov	r2, r4
 800e614:	a941      	add	r1, sp, #260	@ 0x104
 800e616:	4630      	mov	r0, r6
 800e618:	f3af 8000 	nop.w
 800e61c:	e7a0      	b.n	800e560 <__ssvfiscanf_r+0x210>
 800e61e:	89a3      	ldrh	r3, [r4, #12]
 800e620:	065b      	lsls	r3, r3, #25
 800e622:	f53f af71 	bmi.w	800e508 <__ssvfiscanf_r+0x1b8>
 800e626:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e62e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e630:	e7f9      	b.n	800e626 <__ssvfiscanf_r+0x2d6>
 800e632:	bf00      	nop
 800e634:	00000000 	.word	0x00000000

0800e638 <_printf_common>:
 800e638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e63c:	4616      	mov	r6, r2
 800e63e:	4698      	mov	r8, r3
 800e640:	688a      	ldr	r2, [r1, #8]
 800e642:	690b      	ldr	r3, [r1, #16]
 800e644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e648:	4293      	cmp	r3, r2
 800e64a:	bfb8      	it	lt
 800e64c:	4613      	movlt	r3, r2
 800e64e:	6033      	str	r3, [r6, #0]
 800e650:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e654:	4607      	mov	r7, r0
 800e656:	460c      	mov	r4, r1
 800e658:	b10a      	cbz	r2, 800e65e <_printf_common+0x26>
 800e65a:	3301      	adds	r3, #1
 800e65c:	6033      	str	r3, [r6, #0]
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	0699      	lsls	r1, r3, #26
 800e662:	bf42      	ittt	mi
 800e664:	6833      	ldrmi	r3, [r6, #0]
 800e666:	3302      	addmi	r3, #2
 800e668:	6033      	strmi	r3, [r6, #0]
 800e66a:	6825      	ldr	r5, [r4, #0]
 800e66c:	f015 0506 	ands.w	r5, r5, #6
 800e670:	d106      	bne.n	800e680 <_printf_common+0x48>
 800e672:	f104 0a19 	add.w	sl, r4, #25
 800e676:	68e3      	ldr	r3, [r4, #12]
 800e678:	6832      	ldr	r2, [r6, #0]
 800e67a:	1a9b      	subs	r3, r3, r2
 800e67c:	42ab      	cmp	r3, r5
 800e67e:	dc26      	bgt.n	800e6ce <_printf_common+0x96>
 800e680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e684:	6822      	ldr	r2, [r4, #0]
 800e686:	3b00      	subs	r3, #0
 800e688:	bf18      	it	ne
 800e68a:	2301      	movne	r3, #1
 800e68c:	0692      	lsls	r2, r2, #26
 800e68e:	d42b      	bmi.n	800e6e8 <_printf_common+0xb0>
 800e690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e694:	4641      	mov	r1, r8
 800e696:	4638      	mov	r0, r7
 800e698:	47c8      	blx	r9
 800e69a:	3001      	adds	r0, #1
 800e69c:	d01e      	beq.n	800e6dc <_printf_common+0xa4>
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	6922      	ldr	r2, [r4, #16]
 800e6a2:	f003 0306 	and.w	r3, r3, #6
 800e6a6:	2b04      	cmp	r3, #4
 800e6a8:	bf02      	ittt	eq
 800e6aa:	68e5      	ldreq	r5, [r4, #12]
 800e6ac:	6833      	ldreq	r3, [r6, #0]
 800e6ae:	1aed      	subeq	r5, r5, r3
 800e6b0:	68a3      	ldr	r3, [r4, #8]
 800e6b2:	bf0c      	ite	eq
 800e6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6b8:	2500      	movne	r5, #0
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	bfc4      	itt	gt
 800e6be:	1a9b      	subgt	r3, r3, r2
 800e6c0:	18ed      	addgt	r5, r5, r3
 800e6c2:	2600      	movs	r6, #0
 800e6c4:	341a      	adds	r4, #26
 800e6c6:	42b5      	cmp	r5, r6
 800e6c8:	d11a      	bne.n	800e700 <_printf_common+0xc8>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	e008      	b.n	800e6e0 <_printf_common+0xa8>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	4652      	mov	r2, sl
 800e6d2:	4641      	mov	r1, r8
 800e6d4:	4638      	mov	r0, r7
 800e6d6:	47c8      	blx	r9
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d103      	bne.n	800e6e4 <_printf_common+0xac>
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e4:	3501      	adds	r5, #1
 800e6e6:	e7c6      	b.n	800e676 <_printf_common+0x3e>
 800e6e8:	18e1      	adds	r1, r4, r3
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	2030      	movs	r0, #48	@ 0x30
 800e6ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6f2:	4422      	add	r2, r4
 800e6f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	e7c7      	b.n	800e690 <_printf_common+0x58>
 800e700:	2301      	movs	r3, #1
 800e702:	4622      	mov	r2, r4
 800e704:	4641      	mov	r1, r8
 800e706:	4638      	mov	r0, r7
 800e708:	47c8      	blx	r9
 800e70a:	3001      	adds	r0, #1
 800e70c:	d0e6      	beq.n	800e6dc <_printf_common+0xa4>
 800e70e:	3601      	adds	r6, #1
 800e710:	e7d9      	b.n	800e6c6 <_printf_common+0x8e>
	...

0800e714 <_printf_i>:
 800e714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e718:	7e0f      	ldrb	r7, [r1, #24]
 800e71a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e71c:	2f78      	cmp	r7, #120	@ 0x78
 800e71e:	4691      	mov	r9, r2
 800e720:	4680      	mov	r8, r0
 800e722:	460c      	mov	r4, r1
 800e724:	469a      	mov	sl, r3
 800e726:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e72a:	d807      	bhi.n	800e73c <_printf_i+0x28>
 800e72c:	2f62      	cmp	r7, #98	@ 0x62
 800e72e:	d80a      	bhi.n	800e746 <_printf_i+0x32>
 800e730:	2f00      	cmp	r7, #0
 800e732:	f000 80d2 	beq.w	800e8da <_printf_i+0x1c6>
 800e736:	2f58      	cmp	r7, #88	@ 0x58
 800e738:	f000 80b9 	beq.w	800e8ae <_printf_i+0x19a>
 800e73c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e740:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e744:	e03a      	b.n	800e7bc <_printf_i+0xa8>
 800e746:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e74a:	2b15      	cmp	r3, #21
 800e74c:	d8f6      	bhi.n	800e73c <_printf_i+0x28>
 800e74e:	a101      	add	r1, pc, #4	@ (adr r1, 800e754 <_printf_i+0x40>)
 800e750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e754:	0800e7ad 	.word	0x0800e7ad
 800e758:	0800e7c1 	.word	0x0800e7c1
 800e75c:	0800e73d 	.word	0x0800e73d
 800e760:	0800e73d 	.word	0x0800e73d
 800e764:	0800e73d 	.word	0x0800e73d
 800e768:	0800e73d 	.word	0x0800e73d
 800e76c:	0800e7c1 	.word	0x0800e7c1
 800e770:	0800e73d 	.word	0x0800e73d
 800e774:	0800e73d 	.word	0x0800e73d
 800e778:	0800e73d 	.word	0x0800e73d
 800e77c:	0800e73d 	.word	0x0800e73d
 800e780:	0800e8c1 	.word	0x0800e8c1
 800e784:	0800e7eb 	.word	0x0800e7eb
 800e788:	0800e87b 	.word	0x0800e87b
 800e78c:	0800e73d 	.word	0x0800e73d
 800e790:	0800e73d 	.word	0x0800e73d
 800e794:	0800e8e3 	.word	0x0800e8e3
 800e798:	0800e73d 	.word	0x0800e73d
 800e79c:	0800e7eb 	.word	0x0800e7eb
 800e7a0:	0800e73d 	.word	0x0800e73d
 800e7a4:	0800e73d 	.word	0x0800e73d
 800e7a8:	0800e883 	.word	0x0800e883
 800e7ac:	6833      	ldr	r3, [r6, #0]
 800e7ae:	1d1a      	adds	r2, r3, #4
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	6032      	str	r2, [r6, #0]
 800e7b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e09d      	b.n	800e8fc <_printf_i+0x1e8>
 800e7c0:	6833      	ldr	r3, [r6, #0]
 800e7c2:	6820      	ldr	r0, [r4, #0]
 800e7c4:	1d19      	adds	r1, r3, #4
 800e7c6:	6031      	str	r1, [r6, #0]
 800e7c8:	0606      	lsls	r6, r0, #24
 800e7ca:	d501      	bpl.n	800e7d0 <_printf_i+0xbc>
 800e7cc:	681d      	ldr	r5, [r3, #0]
 800e7ce:	e003      	b.n	800e7d8 <_printf_i+0xc4>
 800e7d0:	0645      	lsls	r5, r0, #25
 800e7d2:	d5fb      	bpl.n	800e7cc <_printf_i+0xb8>
 800e7d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7d8:	2d00      	cmp	r5, #0
 800e7da:	da03      	bge.n	800e7e4 <_printf_i+0xd0>
 800e7dc:	232d      	movs	r3, #45	@ 0x2d
 800e7de:	426d      	negs	r5, r5
 800e7e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7e4:	4859      	ldr	r0, [pc, #356]	@ (800e94c <_printf_i+0x238>)
 800e7e6:	230a      	movs	r3, #10
 800e7e8:	e011      	b.n	800e80e <_printf_i+0xfa>
 800e7ea:	6821      	ldr	r1, [r4, #0]
 800e7ec:	6833      	ldr	r3, [r6, #0]
 800e7ee:	0608      	lsls	r0, r1, #24
 800e7f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7f4:	d402      	bmi.n	800e7fc <_printf_i+0xe8>
 800e7f6:	0649      	lsls	r1, r1, #25
 800e7f8:	bf48      	it	mi
 800e7fa:	b2ad      	uxthmi	r5, r5
 800e7fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7fe:	4853      	ldr	r0, [pc, #332]	@ (800e94c <_printf_i+0x238>)
 800e800:	6033      	str	r3, [r6, #0]
 800e802:	bf14      	ite	ne
 800e804:	230a      	movne	r3, #10
 800e806:	2308      	moveq	r3, #8
 800e808:	2100      	movs	r1, #0
 800e80a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e80e:	6866      	ldr	r6, [r4, #4]
 800e810:	60a6      	str	r6, [r4, #8]
 800e812:	2e00      	cmp	r6, #0
 800e814:	bfa2      	ittt	ge
 800e816:	6821      	ldrge	r1, [r4, #0]
 800e818:	f021 0104 	bicge.w	r1, r1, #4
 800e81c:	6021      	strge	r1, [r4, #0]
 800e81e:	b90d      	cbnz	r5, 800e824 <_printf_i+0x110>
 800e820:	2e00      	cmp	r6, #0
 800e822:	d04b      	beq.n	800e8bc <_printf_i+0x1a8>
 800e824:	4616      	mov	r6, r2
 800e826:	fbb5 f1f3 	udiv	r1, r5, r3
 800e82a:	fb03 5711 	mls	r7, r3, r1, r5
 800e82e:	5dc7      	ldrb	r7, [r0, r7]
 800e830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e834:	462f      	mov	r7, r5
 800e836:	42bb      	cmp	r3, r7
 800e838:	460d      	mov	r5, r1
 800e83a:	d9f4      	bls.n	800e826 <_printf_i+0x112>
 800e83c:	2b08      	cmp	r3, #8
 800e83e:	d10b      	bne.n	800e858 <_printf_i+0x144>
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	07df      	lsls	r7, r3, #31
 800e844:	d508      	bpl.n	800e858 <_printf_i+0x144>
 800e846:	6923      	ldr	r3, [r4, #16]
 800e848:	6861      	ldr	r1, [r4, #4]
 800e84a:	4299      	cmp	r1, r3
 800e84c:	bfde      	ittt	le
 800e84e:	2330      	movle	r3, #48	@ 0x30
 800e850:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e854:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e858:	1b92      	subs	r2, r2, r6
 800e85a:	6122      	str	r2, [r4, #16]
 800e85c:	f8cd a000 	str.w	sl, [sp]
 800e860:	464b      	mov	r3, r9
 800e862:	aa03      	add	r2, sp, #12
 800e864:	4621      	mov	r1, r4
 800e866:	4640      	mov	r0, r8
 800e868:	f7ff fee6 	bl	800e638 <_printf_common>
 800e86c:	3001      	adds	r0, #1
 800e86e:	d14a      	bne.n	800e906 <_printf_i+0x1f2>
 800e870:	f04f 30ff 	mov.w	r0, #4294967295
 800e874:	b004      	add	sp, #16
 800e876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	f043 0320 	orr.w	r3, r3, #32
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	4833      	ldr	r0, [pc, #204]	@ (800e950 <_printf_i+0x23c>)
 800e884:	2778      	movs	r7, #120	@ 0x78
 800e886:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e88a:	6823      	ldr	r3, [r4, #0]
 800e88c:	6831      	ldr	r1, [r6, #0]
 800e88e:	061f      	lsls	r7, r3, #24
 800e890:	f851 5b04 	ldr.w	r5, [r1], #4
 800e894:	d402      	bmi.n	800e89c <_printf_i+0x188>
 800e896:	065f      	lsls	r7, r3, #25
 800e898:	bf48      	it	mi
 800e89a:	b2ad      	uxthmi	r5, r5
 800e89c:	6031      	str	r1, [r6, #0]
 800e89e:	07d9      	lsls	r1, r3, #31
 800e8a0:	bf44      	itt	mi
 800e8a2:	f043 0320 	orrmi.w	r3, r3, #32
 800e8a6:	6023      	strmi	r3, [r4, #0]
 800e8a8:	b11d      	cbz	r5, 800e8b2 <_printf_i+0x19e>
 800e8aa:	2310      	movs	r3, #16
 800e8ac:	e7ac      	b.n	800e808 <_printf_i+0xf4>
 800e8ae:	4827      	ldr	r0, [pc, #156]	@ (800e94c <_printf_i+0x238>)
 800e8b0:	e7e9      	b.n	800e886 <_printf_i+0x172>
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	f023 0320 	bic.w	r3, r3, #32
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	e7f6      	b.n	800e8aa <_printf_i+0x196>
 800e8bc:	4616      	mov	r6, r2
 800e8be:	e7bd      	b.n	800e83c <_printf_i+0x128>
 800e8c0:	6833      	ldr	r3, [r6, #0]
 800e8c2:	6825      	ldr	r5, [r4, #0]
 800e8c4:	6961      	ldr	r1, [r4, #20]
 800e8c6:	1d18      	adds	r0, r3, #4
 800e8c8:	6030      	str	r0, [r6, #0]
 800e8ca:	062e      	lsls	r6, r5, #24
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	d501      	bpl.n	800e8d4 <_printf_i+0x1c0>
 800e8d0:	6019      	str	r1, [r3, #0]
 800e8d2:	e002      	b.n	800e8da <_printf_i+0x1c6>
 800e8d4:	0668      	lsls	r0, r5, #25
 800e8d6:	d5fb      	bpl.n	800e8d0 <_printf_i+0x1bc>
 800e8d8:	8019      	strh	r1, [r3, #0]
 800e8da:	2300      	movs	r3, #0
 800e8dc:	6123      	str	r3, [r4, #16]
 800e8de:	4616      	mov	r6, r2
 800e8e0:	e7bc      	b.n	800e85c <_printf_i+0x148>
 800e8e2:	6833      	ldr	r3, [r6, #0]
 800e8e4:	1d1a      	adds	r2, r3, #4
 800e8e6:	6032      	str	r2, [r6, #0]
 800e8e8:	681e      	ldr	r6, [r3, #0]
 800e8ea:	6862      	ldr	r2, [r4, #4]
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7f1 fc76 	bl	80001e0 <memchr>
 800e8f4:	b108      	cbz	r0, 800e8fa <_printf_i+0x1e6>
 800e8f6:	1b80      	subs	r0, r0, r6
 800e8f8:	6060      	str	r0, [r4, #4]
 800e8fa:	6863      	ldr	r3, [r4, #4]
 800e8fc:	6123      	str	r3, [r4, #16]
 800e8fe:	2300      	movs	r3, #0
 800e900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e904:	e7aa      	b.n	800e85c <_printf_i+0x148>
 800e906:	6923      	ldr	r3, [r4, #16]
 800e908:	4632      	mov	r2, r6
 800e90a:	4649      	mov	r1, r9
 800e90c:	4640      	mov	r0, r8
 800e90e:	47d0      	blx	sl
 800e910:	3001      	adds	r0, #1
 800e912:	d0ad      	beq.n	800e870 <_printf_i+0x15c>
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	079b      	lsls	r3, r3, #30
 800e918:	d413      	bmi.n	800e942 <_printf_i+0x22e>
 800e91a:	68e0      	ldr	r0, [r4, #12]
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	4298      	cmp	r0, r3
 800e920:	bfb8      	it	lt
 800e922:	4618      	movlt	r0, r3
 800e924:	e7a6      	b.n	800e874 <_printf_i+0x160>
 800e926:	2301      	movs	r3, #1
 800e928:	4632      	mov	r2, r6
 800e92a:	4649      	mov	r1, r9
 800e92c:	4640      	mov	r0, r8
 800e92e:	47d0      	blx	sl
 800e930:	3001      	adds	r0, #1
 800e932:	d09d      	beq.n	800e870 <_printf_i+0x15c>
 800e934:	3501      	adds	r5, #1
 800e936:	68e3      	ldr	r3, [r4, #12]
 800e938:	9903      	ldr	r1, [sp, #12]
 800e93a:	1a5b      	subs	r3, r3, r1
 800e93c:	42ab      	cmp	r3, r5
 800e93e:	dcf2      	bgt.n	800e926 <_printf_i+0x212>
 800e940:	e7eb      	b.n	800e91a <_printf_i+0x206>
 800e942:	2500      	movs	r5, #0
 800e944:	f104 0619 	add.w	r6, r4, #25
 800e948:	e7f5      	b.n	800e936 <_printf_i+0x222>
 800e94a:	bf00      	nop
 800e94c:	08010567 	.word	0x08010567
 800e950:	08010578 	.word	0x08010578

0800e954 <_scanf_chars>:
 800e954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e958:	4615      	mov	r5, r2
 800e95a:	688a      	ldr	r2, [r1, #8]
 800e95c:	4680      	mov	r8, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	b932      	cbnz	r2, 800e970 <_scanf_chars+0x1c>
 800e962:	698a      	ldr	r2, [r1, #24]
 800e964:	2a00      	cmp	r2, #0
 800e966:	bf14      	ite	ne
 800e968:	f04f 32ff 	movne.w	r2, #4294967295
 800e96c:	2201      	moveq	r2, #1
 800e96e:	608a      	str	r2, [r1, #8]
 800e970:	6822      	ldr	r2, [r4, #0]
 800e972:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ea04 <_scanf_chars+0xb0>
 800e976:	06d1      	lsls	r1, r2, #27
 800e978:	bf5f      	itttt	pl
 800e97a:	681a      	ldrpl	r2, [r3, #0]
 800e97c:	1d11      	addpl	r1, r2, #4
 800e97e:	6019      	strpl	r1, [r3, #0]
 800e980:	6816      	ldrpl	r6, [r2, #0]
 800e982:	2700      	movs	r7, #0
 800e984:	69a0      	ldr	r0, [r4, #24]
 800e986:	b188      	cbz	r0, 800e9ac <_scanf_chars+0x58>
 800e988:	2801      	cmp	r0, #1
 800e98a:	d107      	bne.n	800e99c <_scanf_chars+0x48>
 800e98c:	682b      	ldr	r3, [r5, #0]
 800e98e:	781a      	ldrb	r2, [r3, #0]
 800e990:	6963      	ldr	r3, [r4, #20]
 800e992:	5c9b      	ldrb	r3, [r3, r2]
 800e994:	b953      	cbnz	r3, 800e9ac <_scanf_chars+0x58>
 800e996:	2f00      	cmp	r7, #0
 800e998:	d031      	beq.n	800e9fe <_scanf_chars+0xaa>
 800e99a:	e022      	b.n	800e9e2 <_scanf_chars+0x8e>
 800e99c:	2802      	cmp	r0, #2
 800e99e:	d120      	bne.n	800e9e2 <_scanf_chars+0x8e>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e9a8:	071b      	lsls	r3, r3, #28
 800e9aa:	d41a      	bmi.n	800e9e2 <_scanf_chars+0x8e>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	06da      	lsls	r2, r3, #27
 800e9b0:	bf5e      	ittt	pl
 800e9b2:	682b      	ldrpl	r3, [r5, #0]
 800e9b4:	781b      	ldrbpl	r3, [r3, #0]
 800e9b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e9ba:	682a      	ldr	r2, [r5, #0]
 800e9bc:	686b      	ldr	r3, [r5, #4]
 800e9be:	3201      	adds	r2, #1
 800e9c0:	602a      	str	r2, [r5, #0]
 800e9c2:	68a2      	ldr	r2, [r4, #8]
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	3a01      	subs	r2, #1
 800e9c8:	606b      	str	r3, [r5, #4]
 800e9ca:	3701      	adds	r7, #1
 800e9cc:	60a2      	str	r2, [r4, #8]
 800e9ce:	b142      	cbz	r2, 800e9e2 <_scanf_chars+0x8e>
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	dcd7      	bgt.n	800e984 <_scanf_chars+0x30>
 800e9d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4640      	mov	r0, r8
 800e9dc:	4798      	blx	r3
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d0d0      	beq.n	800e984 <_scanf_chars+0x30>
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	f013 0310 	ands.w	r3, r3, #16
 800e9e8:	d105      	bne.n	800e9f6 <_scanf_chars+0xa2>
 800e9ea:	68e2      	ldr	r2, [r4, #12]
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	60e2      	str	r2, [r4, #12]
 800e9f0:	69a2      	ldr	r2, [r4, #24]
 800e9f2:	b102      	cbz	r2, 800e9f6 <_scanf_chars+0xa2>
 800e9f4:	7033      	strb	r3, [r6, #0]
 800e9f6:	6923      	ldr	r3, [r4, #16]
 800e9f8:	443b      	add	r3, r7
 800e9fa:	6123      	str	r3, [r4, #16]
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea02:	bf00      	nop
 800ea04:	080103a9 	.word	0x080103a9

0800ea08 <_scanf_i>:
 800ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea0c:	4698      	mov	r8, r3
 800ea0e:	4b74      	ldr	r3, [pc, #464]	@ (800ebe0 <_scanf_i+0x1d8>)
 800ea10:	460c      	mov	r4, r1
 800ea12:	4682      	mov	sl, r0
 800ea14:	4616      	mov	r6, r2
 800ea16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	ab03      	add	r3, sp, #12
 800ea1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea22:	4b70      	ldr	r3, [pc, #448]	@ (800ebe4 <_scanf_i+0x1dc>)
 800ea24:	69a1      	ldr	r1, [r4, #24]
 800ea26:	4a70      	ldr	r2, [pc, #448]	@ (800ebe8 <_scanf_i+0x1e0>)
 800ea28:	2903      	cmp	r1, #3
 800ea2a:	bf08      	it	eq
 800ea2c:	461a      	moveq	r2, r3
 800ea2e:	68a3      	ldr	r3, [r4, #8]
 800ea30:	9201      	str	r2, [sp, #4]
 800ea32:	1e5a      	subs	r2, r3, #1
 800ea34:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ea38:	bf88      	it	hi
 800ea3a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ea3e:	4627      	mov	r7, r4
 800ea40:	bf82      	ittt	hi
 800ea42:	eb03 0905 	addhi.w	r9, r3, r5
 800ea46:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ea4a:	60a3      	strhi	r3, [r4, #8]
 800ea4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea50:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ea54:	bf98      	it	ls
 800ea56:	f04f 0900 	movls.w	r9, #0
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	463d      	mov	r5, r7
 800ea5e:	f04f 0b00 	mov.w	fp, #0
 800ea62:	6831      	ldr	r1, [r6, #0]
 800ea64:	ab03      	add	r3, sp, #12
 800ea66:	7809      	ldrb	r1, [r1, #0]
 800ea68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ea6c:	2202      	movs	r2, #2
 800ea6e:	f7f1 fbb7 	bl	80001e0 <memchr>
 800ea72:	b328      	cbz	r0, 800eac0 <_scanf_i+0xb8>
 800ea74:	f1bb 0f01 	cmp.w	fp, #1
 800ea78:	d159      	bne.n	800eb2e <_scanf_i+0x126>
 800ea7a:	6862      	ldr	r2, [r4, #4]
 800ea7c:	b92a      	cbnz	r2, 800ea8a <_scanf_i+0x82>
 800ea7e:	6822      	ldr	r2, [r4, #0]
 800ea80:	2108      	movs	r1, #8
 800ea82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea86:	6061      	str	r1, [r4, #4]
 800ea88:	6022      	str	r2, [r4, #0]
 800ea8a:	6822      	ldr	r2, [r4, #0]
 800ea8c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	68a2      	ldr	r2, [r4, #8]
 800ea94:	1e51      	subs	r1, r2, #1
 800ea96:	60a1      	str	r1, [r4, #8]
 800ea98:	b192      	cbz	r2, 800eac0 <_scanf_i+0xb8>
 800ea9a:	6832      	ldr	r2, [r6, #0]
 800ea9c:	1c51      	adds	r1, r2, #1
 800ea9e:	6031      	str	r1, [r6, #0]
 800eaa0:	7812      	ldrb	r2, [r2, #0]
 800eaa2:	f805 2b01 	strb.w	r2, [r5], #1
 800eaa6:	6872      	ldr	r2, [r6, #4]
 800eaa8:	3a01      	subs	r2, #1
 800eaaa:	2a00      	cmp	r2, #0
 800eaac:	6072      	str	r2, [r6, #4]
 800eaae:	dc07      	bgt.n	800eac0 <_scanf_i+0xb8>
 800eab0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800eab4:	4631      	mov	r1, r6
 800eab6:	4650      	mov	r0, sl
 800eab8:	4790      	blx	r2
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f040 8085 	bne.w	800ebca <_scanf_i+0x1c2>
 800eac0:	f10b 0b01 	add.w	fp, fp, #1
 800eac4:	f1bb 0f03 	cmp.w	fp, #3
 800eac8:	d1cb      	bne.n	800ea62 <_scanf_i+0x5a>
 800eaca:	6863      	ldr	r3, [r4, #4]
 800eacc:	b90b      	cbnz	r3, 800ead2 <_scanf_i+0xca>
 800eace:	230a      	movs	r3, #10
 800ead0:	6063      	str	r3, [r4, #4]
 800ead2:	6863      	ldr	r3, [r4, #4]
 800ead4:	4945      	ldr	r1, [pc, #276]	@ (800ebec <_scanf_i+0x1e4>)
 800ead6:	6960      	ldr	r0, [r4, #20]
 800ead8:	1ac9      	subs	r1, r1, r3
 800eada:	f000 f947 	bl	800ed6c <__sccl>
 800eade:	f04f 0b00 	mov.w	fp, #0
 800eae2:	68a3      	ldr	r3, [r4, #8]
 800eae4:	6822      	ldr	r2, [r4, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d03d      	beq.n	800eb66 <_scanf_i+0x15e>
 800eaea:	6831      	ldr	r1, [r6, #0]
 800eaec:	6960      	ldr	r0, [r4, #20]
 800eaee:	f891 c000 	ldrb.w	ip, [r1]
 800eaf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d035      	beq.n	800eb66 <_scanf_i+0x15e>
 800eafa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800eafe:	d124      	bne.n	800eb4a <_scanf_i+0x142>
 800eb00:	0510      	lsls	r0, r2, #20
 800eb02:	d522      	bpl.n	800eb4a <_scanf_i+0x142>
 800eb04:	f10b 0b01 	add.w	fp, fp, #1
 800eb08:	f1b9 0f00 	cmp.w	r9, #0
 800eb0c:	d003      	beq.n	800eb16 <_scanf_i+0x10e>
 800eb0e:	3301      	adds	r3, #1
 800eb10:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb14:	60a3      	str	r3, [r4, #8]
 800eb16:	6873      	ldr	r3, [r6, #4]
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	6073      	str	r3, [r6, #4]
 800eb1e:	dd1b      	ble.n	800eb58 <_scanf_i+0x150>
 800eb20:	6833      	ldr	r3, [r6, #0]
 800eb22:	3301      	adds	r3, #1
 800eb24:	6033      	str	r3, [r6, #0]
 800eb26:	68a3      	ldr	r3, [r4, #8]
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	60a3      	str	r3, [r4, #8]
 800eb2c:	e7d9      	b.n	800eae2 <_scanf_i+0xda>
 800eb2e:	f1bb 0f02 	cmp.w	fp, #2
 800eb32:	d1ae      	bne.n	800ea92 <_scanf_i+0x8a>
 800eb34:	6822      	ldr	r2, [r4, #0]
 800eb36:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800eb3a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800eb3e:	d1bf      	bne.n	800eac0 <_scanf_i+0xb8>
 800eb40:	2110      	movs	r1, #16
 800eb42:	6061      	str	r1, [r4, #4]
 800eb44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eb48:	e7a2      	b.n	800ea90 <_scanf_i+0x88>
 800eb4a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eb4e:	6022      	str	r2, [r4, #0]
 800eb50:	780b      	ldrb	r3, [r1, #0]
 800eb52:	f805 3b01 	strb.w	r3, [r5], #1
 800eb56:	e7de      	b.n	800eb16 <_scanf_i+0x10e>
 800eb58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4650      	mov	r0, sl
 800eb60:	4798      	blx	r3
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d0df      	beq.n	800eb26 <_scanf_i+0x11e>
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	05d9      	lsls	r1, r3, #23
 800eb6a:	d50d      	bpl.n	800eb88 <_scanf_i+0x180>
 800eb6c:	42bd      	cmp	r5, r7
 800eb6e:	d909      	bls.n	800eb84 <_scanf_i+0x17c>
 800eb70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb78:	4632      	mov	r2, r6
 800eb7a:	4650      	mov	r0, sl
 800eb7c:	4798      	blx	r3
 800eb7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800eb82:	464d      	mov	r5, r9
 800eb84:	42bd      	cmp	r5, r7
 800eb86:	d028      	beq.n	800ebda <_scanf_i+0x1d2>
 800eb88:	6822      	ldr	r2, [r4, #0]
 800eb8a:	f012 0210 	ands.w	r2, r2, #16
 800eb8e:	d113      	bne.n	800ebb8 <_scanf_i+0x1b0>
 800eb90:	702a      	strb	r2, [r5, #0]
 800eb92:	6863      	ldr	r3, [r4, #4]
 800eb94:	9e01      	ldr	r6, [sp, #4]
 800eb96:	4639      	mov	r1, r7
 800eb98:	4650      	mov	r0, sl
 800eb9a:	47b0      	blx	r6
 800eb9c:	f8d8 3000 	ldr.w	r3, [r8]
 800eba0:	6821      	ldr	r1, [r4, #0]
 800eba2:	1d1a      	adds	r2, r3, #4
 800eba4:	f8c8 2000 	str.w	r2, [r8]
 800eba8:	f011 0f20 	tst.w	r1, #32
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	d00f      	beq.n	800ebd0 <_scanf_i+0x1c8>
 800ebb0:	6018      	str	r0, [r3, #0]
 800ebb2:	68e3      	ldr	r3, [r4, #12]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	60e3      	str	r3, [r4, #12]
 800ebb8:	6923      	ldr	r3, [r4, #16]
 800ebba:	1bed      	subs	r5, r5, r7
 800ebbc:	445d      	add	r5, fp
 800ebbe:	442b      	add	r3, r5
 800ebc0:	6123      	str	r3, [r4, #16]
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	b007      	add	sp, #28
 800ebc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebca:	f04f 0b00 	mov.w	fp, #0
 800ebce:	e7ca      	b.n	800eb66 <_scanf_i+0x15e>
 800ebd0:	07ca      	lsls	r2, r1, #31
 800ebd2:	bf4c      	ite	mi
 800ebd4:	8018      	strhmi	r0, [r3, #0]
 800ebd6:	6018      	strpl	r0, [r3, #0]
 800ebd8:	e7eb      	b.n	800ebb2 <_scanf_i+0x1aa>
 800ebda:	2001      	movs	r0, #1
 800ebdc:	e7f2      	b.n	800ebc4 <_scanf_i+0x1bc>
 800ebde:	bf00      	nop
 800ebe0:	080102e8 	.word	0x080102e8
 800ebe4:	0800d9f1 	.word	0x0800d9f1
 800ebe8:	0800efe9 	.word	0x0800efe9
 800ebec:	08010599 	.word	0x08010599

0800ebf0 <__sflush_r>:
 800ebf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf8:	0716      	lsls	r6, r2, #28
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	d454      	bmi.n	800ecaa <__sflush_r+0xba>
 800ec00:	684b      	ldr	r3, [r1, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dc02      	bgt.n	800ec0c <__sflush_r+0x1c>
 800ec06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dd48      	ble.n	800ec9e <__sflush_r+0xae>
 800ec0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec0e:	2e00      	cmp	r6, #0
 800ec10:	d045      	beq.n	800ec9e <__sflush_r+0xae>
 800ec12:	2300      	movs	r3, #0
 800ec14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec18:	682f      	ldr	r7, [r5, #0]
 800ec1a:	6a21      	ldr	r1, [r4, #32]
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	d030      	beq.n	800ec82 <__sflush_r+0x92>
 800ec20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	0759      	lsls	r1, r3, #29
 800ec26:	d505      	bpl.n	800ec34 <__sflush_r+0x44>
 800ec28:	6863      	ldr	r3, [r4, #4]
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec2e:	b10b      	cbz	r3, 800ec34 <__sflush_r+0x44>
 800ec30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	2300      	movs	r3, #0
 800ec36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec38:	6a21      	ldr	r1, [r4, #32]
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b0      	blx	r6
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	d106      	bne.n	800ec52 <__sflush_r+0x62>
 800ec44:	6829      	ldr	r1, [r5, #0]
 800ec46:	291d      	cmp	r1, #29
 800ec48:	d82b      	bhi.n	800eca2 <__sflush_r+0xb2>
 800ec4a:	4a2a      	ldr	r2, [pc, #168]	@ (800ecf4 <__sflush_r+0x104>)
 800ec4c:	410a      	asrs	r2, r1
 800ec4e:	07d6      	lsls	r6, r2, #31
 800ec50:	d427      	bmi.n	800eca2 <__sflush_r+0xb2>
 800ec52:	2200      	movs	r2, #0
 800ec54:	6062      	str	r2, [r4, #4]
 800ec56:	04d9      	lsls	r1, r3, #19
 800ec58:	6922      	ldr	r2, [r4, #16]
 800ec5a:	6022      	str	r2, [r4, #0]
 800ec5c:	d504      	bpl.n	800ec68 <__sflush_r+0x78>
 800ec5e:	1c42      	adds	r2, r0, #1
 800ec60:	d101      	bne.n	800ec66 <__sflush_r+0x76>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b903      	cbnz	r3, 800ec68 <__sflush_r+0x78>
 800ec66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec6a:	602f      	str	r7, [r5, #0]
 800ec6c:	b1b9      	cbz	r1, 800ec9e <__sflush_r+0xae>
 800ec6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec72:	4299      	cmp	r1, r3
 800ec74:	d002      	beq.n	800ec7c <__sflush_r+0x8c>
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7ff f970 	bl	800df5c <_free_r>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec80:	e00d      	b.n	800ec9e <__sflush_r+0xae>
 800ec82:	2301      	movs	r3, #1
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b0      	blx	r6
 800ec88:	4602      	mov	r2, r0
 800ec8a:	1c50      	adds	r0, r2, #1
 800ec8c:	d1c9      	bne.n	800ec22 <__sflush_r+0x32>
 800ec8e:	682b      	ldr	r3, [r5, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d0c6      	beq.n	800ec22 <__sflush_r+0x32>
 800ec94:	2b1d      	cmp	r3, #29
 800ec96:	d001      	beq.n	800ec9c <__sflush_r+0xac>
 800ec98:	2b16      	cmp	r3, #22
 800ec9a:	d11e      	bne.n	800ecda <__sflush_r+0xea>
 800ec9c:	602f      	str	r7, [r5, #0]
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e022      	b.n	800ece8 <__sflush_r+0xf8>
 800eca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eca6:	b21b      	sxth	r3, r3
 800eca8:	e01b      	b.n	800ece2 <__sflush_r+0xf2>
 800ecaa:	690f      	ldr	r7, [r1, #16]
 800ecac:	2f00      	cmp	r7, #0
 800ecae:	d0f6      	beq.n	800ec9e <__sflush_r+0xae>
 800ecb0:	0793      	lsls	r3, r2, #30
 800ecb2:	680e      	ldr	r6, [r1, #0]
 800ecb4:	bf08      	it	eq
 800ecb6:	694b      	ldreq	r3, [r1, #20]
 800ecb8:	600f      	str	r7, [r1, #0]
 800ecba:	bf18      	it	ne
 800ecbc:	2300      	movne	r3, #0
 800ecbe:	eba6 0807 	sub.w	r8, r6, r7
 800ecc2:	608b      	str	r3, [r1, #8]
 800ecc4:	f1b8 0f00 	cmp.w	r8, #0
 800ecc8:	dde9      	ble.n	800ec9e <__sflush_r+0xae>
 800ecca:	6a21      	ldr	r1, [r4, #32]
 800eccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecce:	4643      	mov	r3, r8
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	47b0      	blx	r6
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	dc08      	bgt.n	800ecec <__sflush_r+0xfc>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	f04f 30ff 	mov.w	r0, #4294967295
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	4407      	add	r7, r0
 800ecee:	eba8 0800 	sub.w	r8, r8, r0
 800ecf2:	e7e7      	b.n	800ecc4 <__sflush_r+0xd4>
 800ecf4:	dfbffffe 	.word	0xdfbffffe

0800ecf8 <_fflush_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	690b      	ldr	r3, [r1, #16]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	460c      	mov	r4, r1
 800ed00:	b913      	cbnz	r3, 800ed08 <_fflush_r+0x10>
 800ed02:	2500      	movs	r5, #0
 800ed04:	4628      	mov	r0, r5
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	b118      	cbz	r0, 800ed12 <_fflush_r+0x1a>
 800ed0a:	6a03      	ldr	r3, [r0, #32]
 800ed0c:	b90b      	cbnz	r3, 800ed12 <_fflush_r+0x1a>
 800ed0e:	f7fe ff07 	bl	800db20 <__sinit>
 800ed12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0f3      	beq.n	800ed02 <_fflush_r+0xa>
 800ed1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed1c:	07d0      	lsls	r0, r2, #31
 800ed1e:	d404      	bmi.n	800ed2a <_fflush_r+0x32>
 800ed20:	0599      	lsls	r1, r3, #22
 800ed22:	d402      	bmi.n	800ed2a <_fflush_r+0x32>
 800ed24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed26:	f7ff f8f0 	bl	800df0a <__retarget_lock_acquire_recursive>
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f7ff ff5f 	bl	800ebf0 <__sflush_r>
 800ed32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed34:	07da      	lsls	r2, r3, #31
 800ed36:	4605      	mov	r5, r0
 800ed38:	d4e4      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	059b      	lsls	r3, r3, #22
 800ed3e:	d4e1      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed42:	f7ff f8e3 	bl	800df0c <__retarget_lock_release_recursive>
 800ed46:	e7dd      	b.n	800ed04 <_fflush_r+0xc>

0800ed48 <fiprintf>:
 800ed48:	b40e      	push	{r1, r2, r3}
 800ed4a:	b503      	push	{r0, r1, lr}
 800ed4c:	4601      	mov	r1, r0
 800ed4e:	ab03      	add	r3, sp, #12
 800ed50:	4805      	ldr	r0, [pc, #20]	@ (800ed68 <fiprintf+0x20>)
 800ed52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed56:	6800      	ldr	r0, [r0, #0]
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	f000 f971 	bl	800f040 <_vfiprintf_r>
 800ed5e:	b002      	add	sp, #8
 800ed60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed64:	b003      	add	sp, #12
 800ed66:	4770      	bx	lr
 800ed68:	20000038 	.word	0x20000038

0800ed6c <__sccl>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	780b      	ldrb	r3, [r1, #0]
 800ed70:	4604      	mov	r4, r0
 800ed72:	2b5e      	cmp	r3, #94	@ 0x5e
 800ed74:	bf0b      	itete	eq
 800ed76:	784b      	ldrbeq	r3, [r1, #1]
 800ed78:	1c4a      	addne	r2, r1, #1
 800ed7a:	1c8a      	addeq	r2, r1, #2
 800ed7c:	2100      	movne	r1, #0
 800ed7e:	bf08      	it	eq
 800ed80:	2101      	moveq	r1, #1
 800ed82:	3801      	subs	r0, #1
 800ed84:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ed88:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ed8c:	42a8      	cmp	r0, r5
 800ed8e:	d1fb      	bne.n	800ed88 <__sccl+0x1c>
 800ed90:	b90b      	cbnz	r3, 800ed96 <__sccl+0x2a>
 800ed92:	1e50      	subs	r0, r2, #1
 800ed94:	bd70      	pop	{r4, r5, r6, pc}
 800ed96:	f081 0101 	eor.w	r1, r1, #1
 800ed9a:	54e1      	strb	r1, [r4, r3]
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	4602      	mov	r2, r0
 800eda0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eda4:	2d2d      	cmp	r5, #45	@ 0x2d
 800eda6:	d005      	beq.n	800edb4 <__sccl+0x48>
 800eda8:	2d5d      	cmp	r5, #93	@ 0x5d
 800edaa:	d016      	beq.n	800edda <__sccl+0x6e>
 800edac:	2d00      	cmp	r5, #0
 800edae:	d0f1      	beq.n	800ed94 <__sccl+0x28>
 800edb0:	462b      	mov	r3, r5
 800edb2:	e7f2      	b.n	800ed9a <__sccl+0x2e>
 800edb4:	7846      	ldrb	r6, [r0, #1]
 800edb6:	2e5d      	cmp	r6, #93	@ 0x5d
 800edb8:	d0fa      	beq.n	800edb0 <__sccl+0x44>
 800edba:	42b3      	cmp	r3, r6
 800edbc:	dcf8      	bgt.n	800edb0 <__sccl+0x44>
 800edbe:	3002      	adds	r0, #2
 800edc0:	461a      	mov	r2, r3
 800edc2:	3201      	adds	r2, #1
 800edc4:	4296      	cmp	r6, r2
 800edc6:	54a1      	strb	r1, [r4, r2]
 800edc8:	dcfb      	bgt.n	800edc2 <__sccl+0x56>
 800edca:	1af2      	subs	r2, r6, r3
 800edcc:	3a01      	subs	r2, #1
 800edce:	1c5d      	adds	r5, r3, #1
 800edd0:	42b3      	cmp	r3, r6
 800edd2:	bfa8      	it	ge
 800edd4:	2200      	movge	r2, #0
 800edd6:	18ab      	adds	r3, r5, r2
 800edd8:	e7e1      	b.n	800ed9e <__sccl+0x32>
 800edda:	4610      	mov	r0, r2
 800eddc:	e7da      	b.n	800ed94 <__sccl+0x28>

0800edde <__submore>:
 800edde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede2:	460c      	mov	r4, r1
 800ede4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ede6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edea:	4299      	cmp	r1, r3
 800edec:	d11d      	bne.n	800ee2a <__submore+0x4c>
 800edee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800edf2:	f7fe fcf7 	bl	800d7e4 <_malloc_r>
 800edf6:	b918      	cbnz	r0, 800ee00 <__submore+0x22>
 800edf8:	f04f 30ff 	mov.w	r0, #4294967295
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee04:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ee06:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ee0a:	6360      	str	r0, [r4, #52]	@ 0x34
 800ee0c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ee10:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ee14:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ee18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee1c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ee20:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ee24:	6020      	str	r0, [r4, #0]
 800ee26:	2000      	movs	r0, #0
 800ee28:	e7e8      	b.n	800edfc <__submore+0x1e>
 800ee2a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ee2c:	0077      	lsls	r7, r6, #1
 800ee2e:	463a      	mov	r2, r7
 800ee30:	f000 f83e 	bl	800eeb0 <_realloc_r>
 800ee34:	4605      	mov	r5, r0
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d0de      	beq.n	800edf8 <__submore+0x1a>
 800ee3a:	eb00 0806 	add.w	r8, r0, r6
 800ee3e:	4601      	mov	r1, r0
 800ee40:	4632      	mov	r2, r6
 800ee42:	4640      	mov	r0, r8
 800ee44:	f000 f81f 	bl	800ee86 <memcpy>
 800ee48:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ee4c:	f8c4 8000 	str.w	r8, [r4]
 800ee50:	e7e9      	b.n	800ee26 <__submore+0x48>

0800ee52 <memmove>:
 800ee52:	4288      	cmp	r0, r1
 800ee54:	b510      	push	{r4, lr}
 800ee56:	eb01 0402 	add.w	r4, r1, r2
 800ee5a:	d902      	bls.n	800ee62 <memmove+0x10>
 800ee5c:	4284      	cmp	r4, r0
 800ee5e:	4623      	mov	r3, r4
 800ee60:	d807      	bhi.n	800ee72 <memmove+0x20>
 800ee62:	1e43      	subs	r3, r0, #1
 800ee64:	42a1      	cmp	r1, r4
 800ee66:	d008      	beq.n	800ee7a <memmove+0x28>
 800ee68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee70:	e7f8      	b.n	800ee64 <memmove+0x12>
 800ee72:	4402      	add	r2, r0
 800ee74:	4601      	mov	r1, r0
 800ee76:	428a      	cmp	r2, r1
 800ee78:	d100      	bne.n	800ee7c <memmove+0x2a>
 800ee7a:	bd10      	pop	{r4, pc}
 800ee7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee84:	e7f7      	b.n	800ee76 <memmove+0x24>

0800ee86 <memcpy>:
 800ee86:	440a      	add	r2, r1
 800ee88:	4291      	cmp	r1, r2
 800ee8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee8e:	d100      	bne.n	800ee92 <memcpy+0xc>
 800ee90:	4770      	bx	lr
 800ee92:	b510      	push	{r4, lr}
 800ee94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee9c:	4291      	cmp	r1, r2
 800ee9e:	d1f9      	bne.n	800ee94 <memcpy+0xe>
 800eea0:	bd10      	pop	{r4, pc}

0800eea2 <abort>:
 800eea2:	b508      	push	{r3, lr}
 800eea4:	2006      	movs	r0, #6
 800eea6:	f000 fa9f 	bl	800f3e8 <raise>
 800eeaa:	2001      	movs	r0, #1
 800eeac:	f7f4 fb6a 	bl	8003584 <_exit>

0800eeb0 <_realloc_r>:
 800eeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb4:	4680      	mov	r8, r0
 800eeb6:	4615      	mov	r5, r2
 800eeb8:	460c      	mov	r4, r1
 800eeba:	b921      	cbnz	r1, 800eec6 <_realloc_r+0x16>
 800eebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eec0:	4611      	mov	r1, r2
 800eec2:	f7fe bc8f 	b.w	800d7e4 <_malloc_r>
 800eec6:	b92a      	cbnz	r2, 800eed4 <_realloc_r+0x24>
 800eec8:	f7ff f848 	bl	800df5c <_free_r>
 800eecc:	2400      	movs	r4, #0
 800eece:	4620      	mov	r0, r4
 800eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed4:	f000 faa4 	bl	800f420 <_malloc_usable_size_r>
 800eed8:	4285      	cmp	r5, r0
 800eeda:	4606      	mov	r6, r0
 800eedc:	d802      	bhi.n	800eee4 <_realloc_r+0x34>
 800eede:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eee2:	d8f4      	bhi.n	800eece <_realloc_r+0x1e>
 800eee4:	4629      	mov	r1, r5
 800eee6:	4640      	mov	r0, r8
 800eee8:	f7fe fc7c 	bl	800d7e4 <_malloc_r>
 800eeec:	4607      	mov	r7, r0
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d0ec      	beq.n	800eecc <_realloc_r+0x1c>
 800eef2:	42b5      	cmp	r5, r6
 800eef4:	462a      	mov	r2, r5
 800eef6:	4621      	mov	r1, r4
 800eef8:	bf28      	it	cs
 800eefa:	4632      	movcs	r2, r6
 800eefc:	f7ff ffc3 	bl	800ee86 <memcpy>
 800ef00:	4621      	mov	r1, r4
 800ef02:	4640      	mov	r0, r8
 800ef04:	f7ff f82a 	bl	800df5c <_free_r>
 800ef08:	463c      	mov	r4, r7
 800ef0a:	e7e0      	b.n	800eece <_realloc_r+0x1e>

0800ef0c <_strtoul_l.constprop.0>:
 800ef0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef10:	4e34      	ldr	r6, [pc, #208]	@ (800efe4 <_strtoul_l.constprop.0+0xd8>)
 800ef12:	4686      	mov	lr, r0
 800ef14:	460d      	mov	r5, r1
 800ef16:	4628      	mov	r0, r5
 800ef18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef1c:	5d37      	ldrb	r7, [r6, r4]
 800ef1e:	f017 0708 	ands.w	r7, r7, #8
 800ef22:	d1f8      	bne.n	800ef16 <_strtoul_l.constprop.0+0xa>
 800ef24:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef26:	d12f      	bne.n	800ef88 <_strtoul_l.constprop.0+0x7c>
 800ef28:	782c      	ldrb	r4, [r5, #0]
 800ef2a:	2701      	movs	r7, #1
 800ef2c:	1c85      	adds	r5, r0, #2
 800ef2e:	f033 0010 	bics.w	r0, r3, #16
 800ef32:	d109      	bne.n	800ef48 <_strtoul_l.constprop.0+0x3c>
 800ef34:	2c30      	cmp	r4, #48	@ 0x30
 800ef36:	d12c      	bne.n	800ef92 <_strtoul_l.constprop.0+0x86>
 800ef38:	7828      	ldrb	r0, [r5, #0]
 800ef3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ef3e:	2858      	cmp	r0, #88	@ 0x58
 800ef40:	d127      	bne.n	800ef92 <_strtoul_l.constprop.0+0x86>
 800ef42:	786c      	ldrb	r4, [r5, #1]
 800ef44:	2310      	movs	r3, #16
 800ef46:	3502      	adds	r5, #2
 800ef48:	f04f 38ff 	mov.w	r8, #4294967295
 800ef4c:	2600      	movs	r6, #0
 800ef4e:	fbb8 f8f3 	udiv	r8, r8, r3
 800ef52:	fb03 f908 	mul.w	r9, r3, r8
 800ef56:	ea6f 0909 	mvn.w	r9, r9
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ef60:	f1bc 0f09 	cmp.w	ip, #9
 800ef64:	d81c      	bhi.n	800efa0 <_strtoul_l.constprop.0+0x94>
 800ef66:	4664      	mov	r4, ip
 800ef68:	42a3      	cmp	r3, r4
 800ef6a:	dd2a      	ble.n	800efc2 <_strtoul_l.constprop.0+0xb6>
 800ef6c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ef70:	d007      	beq.n	800ef82 <_strtoul_l.constprop.0+0x76>
 800ef72:	4580      	cmp	r8, r0
 800ef74:	d322      	bcc.n	800efbc <_strtoul_l.constprop.0+0xb0>
 800ef76:	d101      	bne.n	800ef7c <_strtoul_l.constprop.0+0x70>
 800ef78:	45a1      	cmp	r9, r4
 800ef7a:	db1f      	blt.n	800efbc <_strtoul_l.constprop.0+0xb0>
 800ef7c:	fb00 4003 	mla	r0, r0, r3, r4
 800ef80:	2601      	movs	r6, #1
 800ef82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef86:	e7e9      	b.n	800ef5c <_strtoul_l.constprop.0+0x50>
 800ef88:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef8a:	bf04      	itt	eq
 800ef8c:	782c      	ldrbeq	r4, [r5, #0]
 800ef8e:	1c85      	addeq	r5, r0, #2
 800ef90:	e7cd      	b.n	800ef2e <_strtoul_l.constprop.0+0x22>
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1d8      	bne.n	800ef48 <_strtoul_l.constprop.0+0x3c>
 800ef96:	2c30      	cmp	r4, #48	@ 0x30
 800ef98:	bf0c      	ite	eq
 800ef9a:	2308      	moveq	r3, #8
 800ef9c:	230a      	movne	r3, #10
 800ef9e:	e7d3      	b.n	800ef48 <_strtoul_l.constprop.0+0x3c>
 800efa0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800efa4:	f1bc 0f19 	cmp.w	ip, #25
 800efa8:	d801      	bhi.n	800efae <_strtoul_l.constprop.0+0xa2>
 800efaa:	3c37      	subs	r4, #55	@ 0x37
 800efac:	e7dc      	b.n	800ef68 <_strtoul_l.constprop.0+0x5c>
 800efae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800efb2:	f1bc 0f19 	cmp.w	ip, #25
 800efb6:	d804      	bhi.n	800efc2 <_strtoul_l.constprop.0+0xb6>
 800efb8:	3c57      	subs	r4, #87	@ 0x57
 800efba:	e7d5      	b.n	800ef68 <_strtoul_l.constprop.0+0x5c>
 800efbc:	f04f 36ff 	mov.w	r6, #4294967295
 800efc0:	e7df      	b.n	800ef82 <_strtoul_l.constprop.0+0x76>
 800efc2:	1c73      	adds	r3, r6, #1
 800efc4:	d106      	bne.n	800efd4 <_strtoul_l.constprop.0+0xc8>
 800efc6:	2322      	movs	r3, #34	@ 0x22
 800efc8:	f8ce 3000 	str.w	r3, [lr]
 800efcc:	4630      	mov	r0, r6
 800efce:	b932      	cbnz	r2, 800efde <_strtoul_l.constprop.0+0xd2>
 800efd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efd4:	b107      	cbz	r7, 800efd8 <_strtoul_l.constprop.0+0xcc>
 800efd6:	4240      	negs	r0, r0
 800efd8:	2a00      	cmp	r2, #0
 800efda:	d0f9      	beq.n	800efd0 <_strtoul_l.constprop.0+0xc4>
 800efdc:	b106      	cbz	r6, 800efe0 <_strtoul_l.constprop.0+0xd4>
 800efde:	1e69      	subs	r1, r5, #1
 800efe0:	6011      	str	r1, [r2, #0]
 800efe2:	e7f5      	b.n	800efd0 <_strtoul_l.constprop.0+0xc4>
 800efe4:	080103a9 	.word	0x080103a9

0800efe8 <_strtoul_r>:
 800efe8:	f7ff bf90 	b.w	800ef0c <_strtoul_l.constprop.0>

0800efec <__sfputc_r>:
 800efec:	6893      	ldr	r3, [r2, #8]
 800efee:	3b01      	subs	r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	b410      	push	{r4}
 800eff4:	6093      	str	r3, [r2, #8]
 800eff6:	da08      	bge.n	800f00a <__sfputc_r+0x1e>
 800eff8:	6994      	ldr	r4, [r2, #24]
 800effa:	42a3      	cmp	r3, r4
 800effc:	db01      	blt.n	800f002 <__sfputc_r+0x16>
 800effe:	290a      	cmp	r1, #10
 800f000:	d103      	bne.n	800f00a <__sfputc_r+0x1e>
 800f002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f006:	f000 b933 	b.w	800f270 <__swbuf_r>
 800f00a:	6813      	ldr	r3, [r2, #0]
 800f00c:	1c58      	adds	r0, r3, #1
 800f00e:	6010      	str	r0, [r2, #0]
 800f010:	7019      	strb	r1, [r3, #0]
 800f012:	4608      	mov	r0, r1
 800f014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f018:	4770      	bx	lr

0800f01a <__sfputs_r>:
 800f01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01c:	4606      	mov	r6, r0
 800f01e:	460f      	mov	r7, r1
 800f020:	4614      	mov	r4, r2
 800f022:	18d5      	adds	r5, r2, r3
 800f024:	42ac      	cmp	r4, r5
 800f026:	d101      	bne.n	800f02c <__sfputs_r+0x12>
 800f028:	2000      	movs	r0, #0
 800f02a:	e007      	b.n	800f03c <__sfputs_r+0x22>
 800f02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f030:	463a      	mov	r2, r7
 800f032:	4630      	mov	r0, r6
 800f034:	f7ff ffda 	bl	800efec <__sfputc_r>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	d1f3      	bne.n	800f024 <__sfputs_r+0xa>
 800f03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f040 <_vfiprintf_r>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	460d      	mov	r5, r1
 800f046:	b09d      	sub	sp, #116	@ 0x74
 800f048:	4614      	mov	r4, r2
 800f04a:	4698      	mov	r8, r3
 800f04c:	4606      	mov	r6, r0
 800f04e:	b118      	cbz	r0, 800f058 <_vfiprintf_r+0x18>
 800f050:	6a03      	ldr	r3, [r0, #32]
 800f052:	b90b      	cbnz	r3, 800f058 <_vfiprintf_r+0x18>
 800f054:	f7fe fd64 	bl	800db20 <__sinit>
 800f058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f05a:	07d9      	lsls	r1, r3, #31
 800f05c:	d405      	bmi.n	800f06a <_vfiprintf_r+0x2a>
 800f05e:	89ab      	ldrh	r3, [r5, #12]
 800f060:	059a      	lsls	r2, r3, #22
 800f062:	d402      	bmi.n	800f06a <_vfiprintf_r+0x2a>
 800f064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f066:	f7fe ff50 	bl	800df0a <__retarget_lock_acquire_recursive>
 800f06a:	89ab      	ldrh	r3, [r5, #12]
 800f06c:	071b      	lsls	r3, r3, #28
 800f06e:	d501      	bpl.n	800f074 <_vfiprintf_r+0x34>
 800f070:	692b      	ldr	r3, [r5, #16]
 800f072:	b99b      	cbnz	r3, 800f09c <_vfiprintf_r+0x5c>
 800f074:	4629      	mov	r1, r5
 800f076:	4630      	mov	r0, r6
 800f078:	f000 f938 	bl	800f2ec <__swsetup_r>
 800f07c:	b170      	cbz	r0, 800f09c <_vfiprintf_r+0x5c>
 800f07e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f080:	07dc      	lsls	r4, r3, #31
 800f082:	d504      	bpl.n	800f08e <_vfiprintf_r+0x4e>
 800f084:	f04f 30ff 	mov.w	r0, #4294967295
 800f088:	b01d      	add	sp, #116	@ 0x74
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	89ab      	ldrh	r3, [r5, #12]
 800f090:	0598      	lsls	r0, r3, #22
 800f092:	d4f7      	bmi.n	800f084 <_vfiprintf_r+0x44>
 800f094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f096:	f7fe ff39 	bl	800df0c <__retarget_lock_release_recursive>
 800f09a:	e7f3      	b.n	800f084 <_vfiprintf_r+0x44>
 800f09c:	2300      	movs	r3, #0
 800f09e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a0:	2320      	movs	r3, #32
 800f0a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0aa:	2330      	movs	r3, #48	@ 0x30
 800f0ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f25c <_vfiprintf_r+0x21c>
 800f0b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0b4:	f04f 0901 	mov.w	r9, #1
 800f0b8:	4623      	mov	r3, r4
 800f0ba:	469a      	mov	sl, r3
 800f0bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0c0:	b10a      	cbz	r2, 800f0c6 <_vfiprintf_r+0x86>
 800f0c2:	2a25      	cmp	r2, #37	@ 0x25
 800f0c4:	d1f9      	bne.n	800f0ba <_vfiprintf_r+0x7a>
 800f0c6:	ebba 0b04 	subs.w	fp, sl, r4
 800f0ca:	d00b      	beq.n	800f0e4 <_vfiprintf_r+0xa4>
 800f0cc:	465b      	mov	r3, fp
 800f0ce:	4622      	mov	r2, r4
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f7ff ffa1 	bl	800f01a <__sfputs_r>
 800f0d8:	3001      	adds	r0, #1
 800f0da:	f000 80a7 	beq.w	800f22c <_vfiprintf_r+0x1ec>
 800f0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0e0:	445a      	add	r2, fp
 800f0e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f000 809f 	beq.w	800f22c <_vfiprintf_r+0x1ec>
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0f8:	f10a 0a01 	add.w	sl, sl, #1
 800f0fc:	9304      	str	r3, [sp, #16]
 800f0fe:	9307      	str	r3, [sp, #28]
 800f100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f104:	931a      	str	r3, [sp, #104]	@ 0x68
 800f106:	4654      	mov	r4, sl
 800f108:	2205      	movs	r2, #5
 800f10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10e:	4853      	ldr	r0, [pc, #332]	@ (800f25c <_vfiprintf_r+0x21c>)
 800f110:	f7f1 f866 	bl	80001e0 <memchr>
 800f114:	9a04      	ldr	r2, [sp, #16]
 800f116:	b9d8      	cbnz	r0, 800f150 <_vfiprintf_r+0x110>
 800f118:	06d1      	lsls	r1, r2, #27
 800f11a:	bf44      	itt	mi
 800f11c:	2320      	movmi	r3, #32
 800f11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f122:	0713      	lsls	r3, r2, #28
 800f124:	bf44      	itt	mi
 800f126:	232b      	movmi	r3, #43	@ 0x2b
 800f128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f12c:	f89a 3000 	ldrb.w	r3, [sl]
 800f130:	2b2a      	cmp	r3, #42	@ 0x2a
 800f132:	d015      	beq.n	800f160 <_vfiprintf_r+0x120>
 800f134:	9a07      	ldr	r2, [sp, #28]
 800f136:	4654      	mov	r4, sl
 800f138:	2000      	movs	r0, #0
 800f13a:	f04f 0c0a 	mov.w	ip, #10
 800f13e:	4621      	mov	r1, r4
 800f140:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f144:	3b30      	subs	r3, #48	@ 0x30
 800f146:	2b09      	cmp	r3, #9
 800f148:	d94b      	bls.n	800f1e2 <_vfiprintf_r+0x1a2>
 800f14a:	b1b0      	cbz	r0, 800f17a <_vfiprintf_r+0x13a>
 800f14c:	9207      	str	r2, [sp, #28]
 800f14e:	e014      	b.n	800f17a <_vfiprintf_r+0x13a>
 800f150:	eba0 0308 	sub.w	r3, r0, r8
 800f154:	fa09 f303 	lsl.w	r3, r9, r3
 800f158:	4313      	orrs	r3, r2
 800f15a:	9304      	str	r3, [sp, #16]
 800f15c:	46a2      	mov	sl, r4
 800f15e:	e7d2      	b.n	800f106 <_vfiprintf_r+0xc6>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	1d19      	adds	r1, r3, #4
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	9103      	str	r1, [sp, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	bfbb      	ittet	lt
 800f16c:	425b      	neglt	r3, r3
 800f16e:	f042 0202 	orrlt.w	r2, r2, #2
 800f172:	9307      	strge	r3, [sp, #28]
 800f174:	9307      	strlt	r3, [sp, #28]
 800f176:	bfb8      	it	lt
 800f178:	9204      	strlt	r2, [sp, #16]
 800f17a:	7823      	ldrb	r3, [r4, #0]
 800f17c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f17e:	d10a      	bne.n	800f196 <_vfiprintf_r+0x156>
 800f180:	7863      	ldrb	r3, [r4, #1]
 800f182:	2b2a      	cmp	r3, #42	@ 0x2a
 800f184:	d132      	bne.n	800f1ec <_vfiprintf_r+0x1ac>
 800f186:	9b03      	ldr	r3, [sp, #12]
 800f188:	1d1a      	adds	r2, r3, #4
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	9203      	str	r2, [sp, #12]
 800f18e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f192:	3402      	adds	r4, #2
 800f194:	9305      	str	r3, [sp, #20]
 800f196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f26c <_vfiprintf_r+0x22c>
 800f19a:	7821      	ldrb	r1, [r4, #0]
 800f19c:	2203      	movs	r2, #3
 800f19e:	4650      	mov	r0, sl
 800f1a0:	f7f1 f81e 	bl	80001e0 <memchr>
 800f1a4:	b138      	cbz	r0, 800f1b6 <_vfiprintf_r+0x176>
 800f1a6:	9b04      	ldr	r3, [sp, #16]
 800f1a8:	eba0 000a 	sub.w	r0, r0, sl
 800f1ac:	2240      	movs	r2, #64	@ 0x40
 800f1ae:	4082      	lsls	r2, r0
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	3401      	adds	r4, #1
 800f1b4:	9304      	str	r3, [sp, #16]
 800f1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ba:	4829      	ldr	r0, [pc, #164]	@ (800f260 <_vfiprintf_r+0x220>)
 800f1bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1c0:	2206      	movs	r2, #6
 800f1c2:	f7f1 f80d 	bl	80001e0 <memchr>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d03f      	beq.n	800f24a <_vfiprintf_r+0x20a>
 800f1ca:	4b26      	ldr	r3, [pc, #152]	@ (800f264 <_vfiprintf_r+0x224>)
 800f1cc:	bb1b      	cbnz	r3, 800f216 <_vfiprintf_r+0x1d6>
 800f1ce:	9b03      	ldr	r3, [sp, #12]
 800f1d0:	3307      	adds	r3, #7
 800f1d2:	f023 0307 	bic.w	r3, r3, #7
 800f1d6:	3308      	adds	r3, #8
 800f1d8:	9303      	str	r3, [sp, #12]
 800f1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1dc:	443b      	add	r3, r7
 800f1de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1e0:	e76a      	b.n	800f0b8 <_vfiprintf_r+0x78>
 800f1e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	e7a8      	b.n	800f13e <_vfiprintf_r+0xfe>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	3401      	adds	r4, #1
 800f1f0:	9305      	str	r3, [sp, #20]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	f04f 0c0a 	mov.w	ip, #10
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1fe:	3a30      	subs	r2, #48	@ 0x30
 800f200:	2a09      	cmp	r2, #9
 800f202:	d903      	bls.n	800f20c <_vfiprintf_r+0x1cc>
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0c6      	beq.n	800f196 <_vfiprintf_r+0x156>
 800f208:	9105      	str	r1, [sp, #20]
 800f20a:	e7c4      	b.n	800f196 <_vfiprintf_r+0x156>
 800f20c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f210:	4604      	mov	r4, r0
 800f212:	2301      	movs	r3, #1
 800f214:	e7f0      	b.n	800f1f8 <_vfiprintf_r+0x1b8>
 800f216:	ab03      	add	r3, sp, #12
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	462a      	mov	r2, r5
 800f21c:	4b12      	ldr	r3, [pc, #72]	@ (800f268 <_vfiprintf_r+0x228>)
 800f21e:	a904      	add	r1, sp, #16
 800f220:	4630      	mov	r0, r6
 800f222:	f3af 8000 	nop.w
 800f226:	4607      	mov	r7, r0
 800f228:	1c78      	adds	r0, r7, #1
 800f22a:	d1d6      	bne.n	800f1da <_vfiprintf_r+0x19a>
 800f22c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f22e:	07d9      	lsls	r1, r3, #31
 800f230:	d405      	bmi.n	800f23e <_vfiprintf_r+0x1fe>
 800f232:	89ab      	ldrh	r3, [r5, #12]
 800f234:	059a      	lsls	r2, r3, #22
 800f236:	d402      	bmi.n	800f23e <_vfiprintf_r+0x1fe>
 800f238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f23a:	f7fe fe67 	bl	800df0c <__retarget_lock_release_recursive>
 800f23e:	89ab      	ldrh	r3, [r5, #12]
 800f240:	065b      	lsls	r3, r3, #25
 800f242:	f53f af1f 	bmi.w	800f084 <_vfiprintf_r+0x44>
 800f246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f248:	e71e      	b.n	800f088 <_vfiprintf_r+0x48>
 800f24a:	ab03      	add	r3, sp, #12
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	462a      	mov	r2, r5
 800f250:	4b05      	ldr	r3, [pc, #20]	@ (800f268 <_vfiprintf_r+0x228>)
 800f252:	a904      	add	r1, sp, #16
 800f254:	4630      	mov	r0, r6
 800f256:	f7ff fa5d 	bl	800e714 <_printf_i>
 800f25a:	e7e4      	b.n	800f226 <_vfiprintf_r+0x1e6>
 800f25c:	08010556 	.word	0x08010556
 800f260:	08010560 	.word	0x08010560
 800f264:	00000000 	.word	0x00000000
 800f268:	0800f01b 	.word	0x0800f01b
 800f26c:	0801055c 	.word	0x0801055c

0800f270 <__swbuf_r>:
 800f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f272:	460e      	mov	r6, r1
 800f274:	4614      	mov	r4, r2
 800f276:	4605      	mov	r5, r0
 800f278:	b118      	cbz	r0, 800f282 <__swbuf_r+0x12>
 800f27a:	6a03      	ldr	r3, [r0, #32]
 800f27c:	b90b      	cbnz	r3, 800f282 <__swbuf_r+0x12>
 800f27e:	f7fe fc4f 	bl	800db20 <__sinit>
 800f282:	69a3      	ldr	r3, [r4, #24]
 800f284:	60a3      	str	r3, [r4, #8]
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	071a      	lsls	r2, r3, #28
 800f28a:	d501      	bpl.n	800f290 <__swbuf_r+0x20>
 800f28c:	6923      	ldr	r3, [r4, #16]
 800f28e:	b943      	cbnz	r3, 800f2a2 <__swbuf_r+0x32>
 800f290:	4621      	mov	r1, r4
 800f292:	4628      	mov	r0, r5
 800f294:	f000 f82a 	bl	800f2ec <__swsetup_r>
 800f298:	b118      	cbz	r0, 800f2a2 <__swbuf_r+0x32>
 800f29a:	f04f 37ff 	mov.w	r7, #4294967295
 800f29e:	4638      	mov	r0, r7
 800f2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a2:	6823      	ldr	r3, [r4, #0]
 800f2a4:	6922      	ldr	r2, [r4, #16]
 800f2a6:	1a98      	subs	r0, r3, r2
 800f2a8:	6963      	ldr	r3, [r4, #20]
 800f2aa:	b2f6      	uxtb	r6, r6
 800f2ac:	4283      	cmp	r3, r0
 800f2ae:	4637      	mov	r7, r6
 800f2b0:	dc05      	bgt.n	800f2be <__swbuf_r+0x4e>
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	f7ff fd1f 	bl	800ecf8 <_fflush_r>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d1ed      	bne.n	800f29a <__swbuf_r+0x2a>
 800f2be:	68a3      	ldr	r3, [r4, #8]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	60a3      	str	r3, [r4, #8]
 800f2c4:	6823      	ldr	r3, [r4, #0]
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	6022      	str	r2, [r4, #0]
 800f2ca:	701e      	strb	r6, [r3, #0]
 800f2cc:	6962      	ldr	r2, [r4, #20]
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d004      	beq.n	800f2de <__swbuf_r+0x6e>
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	07db      	lsls	r3, r3, #31
 800f2d8:	d5e1      	bpl.n	800f29e <__swbuf_r+0x2e>
 800f2da:	2e0a      	cmp	r6, #10
 800f2dc:	d1df      	bne.n	800f29e <__swbuf_r+0x2e>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	f7ff fd09 	bl	800ecf8 <_fflush_r>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d0d9      	beq.n	800f29e <__swbuf_r+0x2e>
 800f2ea:	e7d6      	b.n	800f29a <__swbuf_r+0x2a>

0800f2ec <__swsetup_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4b29      	ldr	r3, [pc, #164]	@ (800f394 <__swsetup_r+0xa8>)
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	6818      	ldr	r0, [r3, #0]
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	b118      	cbz	r0, 800f300 <__swsetup_r+0x14>
 800f2f8:	6a03      	ldr	r3, [r0, #32]
 800f2fa:	b90b      	cbnz	r3, 800f300 <__swsetup_r+0x14>
 800f2fc:	f7fe fc10 	bl	800db20 <__sinit>
 800f300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f304:	0719      	lsls	r1, r3, #28
 800f306:	d422      	bmi.n	800f34e <__swsetup_r+0x62>
 800f308:	06da      	lsls	r2, r3, #27
 800f30a:	d407      	bmi.n	800f31c <__swsetup_r+0x30>
 800f30c:	2209      	movs	r2, #9
 800f30e:	602a      	str	r2, [r5, #0]
 800f310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	f04f 30ff 	mov.w	r0, #4294967295
 800f31a:	e033      	b.n	800f384 <__swsetup_r+0x98>
 800f31c:	0758      	lsls	r0, r3, #29
 800f31e:	d512      	bpl.n	800f346 <__swsetup_r+0x5a>
 800f320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f322:	b141      	cbz	r1, 800f336 <__swsetup_r+0x4a>
 800f324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f328:	4299      	cmp	r1, r3
 800f32a:	d002      	beq.n	800f332 <__swsetup_r+0x46>
 800f32c:	4628      	mov	r0, r5
 800f32e:	f7fe fe15 	bl	800df5c <_free_r>
 800f332:	2300      	movs	r3, #0
 800f334:	6363      	str	r3, [r4, #52]	@ 0x34
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f33c:	81a3      	strh	r3, [r4, #12]
 800f33e:	2300      	movs	r3, #0
 800f340:	6063      	str	r3, [r4, #4]
 800f342:	6923      	ldr	r3, [r4, #16]
 800f344:	6023      	str	r3, [r4, #0]
 800f346:	89a3      	ldrh	r3, [r4, #12]
 800f348:	f043 0308 	orr.w	r3, r3, #8
 800f34c:	81a3      	strh	r3, [r4, #12]
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	b94b      	cbnz	r3, 800f366 <__swsetup_r+0x7a>
 800f352:	89a3      	ldrh	r3, [r4, #12]
 800f354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f35c:	d003      	beq.n	800f366 <__swsetup_r+0x7a>
 800f35e:	4621      	mov	r1, r4
 800f360:	4628      	mov	r0, r5
 800f362:	f000 f88b 	bl	800f47c <__smakebuf_r>
 800f366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f36a:	f013 0201 	ands.w	r2, r3, #1
 800f36e:	d00a      	beq.n	800f386 <__swsetup_r+0x9a>
 800f370:	2200      	movs	r2, #0
 800f372:	60a2      	str	r2, [r4, #8]
 800f374:	6962      	ldr	r2, [r4, #20]
 800f376:	4252      	negs	r2, r2
 800f378:	61a2      	str	r2, [r4, #24]
 800f37a:	6922      	ldr	r2, [r4, #16]
 800f37c:	b942      	cbnz	r2, 800f390 <__swsetup_r+0xa4>
 800f37e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f382:	d1c5      	bne.n	800f310 <__swsetup_r+0x24>
 800f384:	bd38      	pop	{r3, r4, r5, pc}
 800f386:	0799      	lsls	r1, r3, #30
 800f388:	bf58      	it	pl
 800f38a:	6962      	ldrpl	r2, [r4, #20]
 800f38c:	60a2      	str	r2, [r4, #8]
 800f38e:	e7f4      	b.n	800f37a <__swsetup_r+0x8e>
 800f390:	2000      	movs	r0, #0
 800f392:	e7f7      	b.n	800f384 <__swsetup_r+0x98>
 800f394:	20000038 	.word	0x20000038

0800f398 <_raise_r>:
 800f398:	291f      	cmp	r1, #31
 800f39a:	b538      	push	{r3, r4, r5, lr}
 800f39c:	4605      	mov	r5, r0
 800f39e:	460c      	mov	r4, r1
 800f3a0:	d904      	bls.n	800f3ac <_raise_r+0x14>
 800f3a2:	2316      	movs	r3, #22
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f3ae:	b112      	cbz	r2, 800f3b6 <_raise_r+0x1e>
 800f3b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3b4:	b94b      	cbnz	r3, 800f3ca <_raise_r+0x32>
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f000 f830 	bl	800f41c <_getpid_r>
 800f3bc:	4622      	mov	r2, r4
 800f3be:	4601      	mov	r1, r0
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3c6:	f000 b817 	b.w	800f3f8 <_kill_r>
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d00a      	beq.n	800f3e4 <_raise_r+0x4c>
 800f3ce:	1c59      	adds	r1, r3, #1
 800f3d0:	d103      	bne.n	800f3da <_raise_r+0x42>
 800f3d2:	2316      	movs	r3, #22
 800f3d4:	6003      	str	r3, [r0, #0]
 800f3d6:	2001      	movs	r0, #1
 800f3d8:	e7e7      	b.n	800f3aa <_raise_r+0x12>
 800f3da:	2100      	movs	r1, #0
 800f3dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4798      	blx	r3
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	e7e0      	b.n	800f3aa <_raise_r+0x12>

0800f3e8 <raise>:
 800f3e8:	4b02      	ldr	r3, [pc, #8]	@ (800f3f4 <raise+0xc>)
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	6818      	ldr	r0, [r3, #0]
 800f3ee:	f7ff bfd3 	b.w	800f398 <_raise_r>
 800f3f2:	bf00      	nop
 800f3f4:	20000038 	.word	0x20000038

0800f3f8 <_kill_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4d07      	ldr	r5, [pc, #28]	@ (800f418 <_kill_r+0x20>)
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	4604      	mov	r4, r0
 800f400:	4608      	mov	r0, r1
 800f402:	4611      	mov	r1, r2
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	f7f4 f8ad 	bl	8003564 <_kill>
 800f40a:	1c43      	adds	r3, r0, #1
 800f40c:	d102      	bne.n	800f414 <_kill_r+0x1c>
 800f40e:	682b      	ldr	r3, [r5, #0]
 800f410:	b103      	cbz	r3, 800f414 <_kill_r+0x1c>
 800f412:	6023      	str	r3, [r4, #0]
 800f414:	bd38      	pop	{r3, r4, r5, pc}
 800f416:	bf00      	nop
 800f418:	200057f8 	.word	0x200057f8

0800f41c <_getpid_r>:
 800f41c:	f7f4 b89a 	b.w	8003554 <_getpid>

0800f420 <_malloc_usable_size_r>:
 800f420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f424:	1f18      	subs	r0, r3, #4
 800f426:	2b00      	cmp	r3, #0
 800f428:	bfbc      	itt	lt
 800f42a:	580b      	ldrlt	r3, [r1, r0]
 800f42c:	18c0      	addlt	r0, r0, r3
 800f42e:	4770      	bx	lr

0800f430 <__swhatbuf_r>:
 800f430:	b570      	push	{r4, r5, r6, lr}
 800f432:	460c      	mov	r4, r1
 800f434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f438:	2900      	cmp	r1, #0
 800f43a:	b096      	sub	sp, #88	@ 0x58
 800f43c:	4615      	mov	r5, r2
 800f43e:	461e      	mov	r6, r3
 800f440:	da0d      	bge.n	800f45e <__swhatbuf_r+0x2e>
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f448:	f04f 0100 	mov.w	r1, #0
 800f44c:	bf14      	ite	ne
 800f44e:	2340      	movne	r3, #64	@ 0x40
 800f450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f454:	2000      	movs	r0, #0
 800f456:	6031      	str	r1, [r6, #0]
 800f458:	602b      	str	r3, [r5, #0]
 800f45a:	b016      	add	sp, #88	@ 0x58
 800f45c:	bd70      	pop	{r4, r5, r6, pc}
 800f45e:	466a      	mov	r2, sp
 800f460:	f000 f848 	bl	800f4f4 <_fstat_r>
 800f464:	2800      	cmp	r0, #0
 800f466:	dbec      	blt.n	800f442 <__swhatbuf_r+0x12>
 800f468:	9901      	ldr	r1, [sp, #4]
 800f46a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f46e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f472:	4259      	negs	r1, r3
 800f474:	4159      	adcs	r1, r3
 800f476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f47a:	e7eb      	b.n	800f454 <__swhatbuf_r+0x24>

0800f47c <__smakebuf_r>:
 800f47c:	898b      	ldrh	r3, [r1, #12]
 800f47e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f480:	079d      	lsls	r5, r3, #30
 800f482:	4606      	mov	r6, r0
 800f484:	460c      	mov	r4, r1
 800f486:	d507      	bpl.n	800f498 <__smakebuf_r+0x1c>
 800f488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	6123      	str	r3, [r4, #16]
 800f490:	2301      	movs	r3, #1
 800f492:	6163      	str	r3, [r4, #20]
 800f494:	b003      	add	sp, #12
 800f496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f498:	ab01      	add	r3, sp, #4
 800f49a:	466a      	mov	r2, sp
 800f49c:	f7ff ffc8 	bl	800f430 <__swhatbuf_r>
 800f4a0:	9f00      	ldr	r7, [sp, #0]
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f7fe f99c 	bl	800d7e4 <_malloc_r>
 800f4ac:	b948      	cbnz	r0, 800f4c2 <__smakebuf_r+0x46>
 800f4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4b2:	059a      	lsls	r2, r3, #22
 800f4b4:	d4ee      	bmi.n	800f494 <__smakebuf_r+0x18>
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	f043 0302 	orr.w	r3, r3, #2
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	e7e2      	b.n	800f488 <__smakebuf_r+0xc>
 800f4c2:	89a3      	ldrh	r3, [r4, #12]
 800f4c4:	6020      	str	r0, [r4, #0]
 800f4c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ca:	81a3      	strh	r3, [r4, #12]
 800f4cc:	9b01      	ldr	r3, [sp, #4]
 800f4ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f4d2:	b15b      	cbz	r3, 800f4ec <__smakebuf_r+0x70>
 800f4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f000 f81d 	bl	800f518 <_isatty_r>
 800f4de:	b128      	cbz	r0, 800f4ec <__smakebuf_r+0x70>
 800f4e0:	89a3      	ldrh	r3, [r4, #12]
 800f4e2:	f023 0303 	bic.w	r3, r3, #3
 800f4e6:	f043 0301 	orr.w	r3, r3, #1
 800f4ea:	81a3      	strh	r3, [r4, #12]
 800f4ec:	89a3      	ldrh	r3, [r4, #12]
 800f4ee:	431d      	orrs	r5, r3
 800f4f0:	81a5      	strh	r5, [r4, #12]
 800f4f2:	e7cf      	b.n	800f494 <__smakebuf_r+0x18>

0800f4f4 <_fstat_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	4d07      	ldr	r5, [pc, #28]	@ (800f514 <_fstat_r+0x20>)
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	4611      	mov	r1, r2
 800f500:	602b      	str	r3, [r5, #0]
 800f502:	f7f4 f88f 	bl	8003624 <_fstat>
 800f506:	1c43      	adds	r3, r0, #1
 800f508:	d102      	bne.n	800f510 <_fstat_r+0x1c>
 800f50a:	682b      	ldr	r3, [r5, #0]
 800f50c:	b103      	cbz	r3, 800f510 <_fstat_r+0x1c>
 800f50e:	6023      	str	r3, [r4, #0]
 800f510:	bd38      	pop	{r3, r4, r5, pc}
 800f512:	bf00      	nop
 800f514:	200057f8 	.word	0x200057f8

0800f518 <_isatty_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d06      	ldr	r5, [pc, #24]	@ (800f534 <_isatty_r+0x1c>)
 800f51c:	2300      	movs	r3, #0
 800f51e:	4604      	mov	r4, r0
 800f520:	4608      	mov	r0, r1
 800f522:	602b      	str	r3, [r5, #0]
 800f524:	f7f4 f88e 	bl	8003644 <_isatty>
 800f528:	1c43      	adds	r3, r0, #1
 800f52a:	d102      	bne.n	800f532 <_isatty_r+0x1a>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	b103      	cbz	r3, 800f532 <_isatty_r+0x1a>
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	bd38      	pop	{r3, r4, r5, pc}
 800f534:	200057f8 	.word	0x200057f8

0800f538 <_init>:
 800f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53a:	bf00      	nop
 800f53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53e:	bc08      	pop	{r3}
 800f540:	469e      	mov	lr, r3
 800f542:	4770      	bx	lr

0800f544 <_fini>:
 800f544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f546:	bf00      	nop
 800f548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f54a:	bc08      	pop	{r3}
 800f54c:	469e      	mov	lr, r3
 800f54e:	4770      	bx	lr

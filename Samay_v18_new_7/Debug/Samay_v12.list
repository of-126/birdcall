
Samay_v12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b478  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800b608  0800b608  0000c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf48  0800bf48  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf48  0800bf48  0000cf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf50  0800bf50  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf50  0800bf50  0000cf50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf54  0800bf54  0000cf54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bf58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d078  2**0
                  CONTENTS
 10 .bss          00004630  20000078  20000078  0000d078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200046a8  200046a8  0000d078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016759  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003499  00000000  00000000  00023801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00026ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0f  00000000  00000000  00027fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024110  00000000  00000000  00028ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6dc  00000000  00000000  0004d007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec18  00000000  00000000  000686e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001372fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005658  00000000  00000000  00137340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0013c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5f0 	.word	0x0800b5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800b5f0 	.word	0x0800b5f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Send_Uart+0x28>)
 800058a:	f006 f9e4 	bl	8006956 <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000030c 	.word	0x2000030c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 fbca 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f848 	bl	8000638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a8:	f000 f8b0 	bl	800070c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f9f2 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f9c8 	bl	8000944 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f970 	bl	8000898 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b8:	f000 f998 	bl	80008ec <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005bc:	f007 fa72 	bl	8007aa4 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005c0:	f000 f94a 	bl	8000858 <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80005c4:	f000 f8ec 	bl	80007a0 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005c8:	f000 f918 	bl	80007fc <MX_I2S3_Init>
  MX_I2C2_Init();
 80005cc:	f000 f8ba 	bl	8000744 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d4:	f001 fc22 	bl	8001e1c <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 80005d8:	f000 fd66 	bl	80010a8 <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 80005dc:	f000 fd3a 	bl	8001054 <CODEC_RST>

  configure_codec();
 80005e0:	f000 fcc6 	bl	8000f70 <configure_codec>

  Start_Recording();
 80005e4:	f000 fa7e 	bl	8000ae4 <Start_Recording>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ec:	f001 fc16 	bl	8001e1c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f6:	480e      	ldr	r0, [pc, #56]	@ (8000630 <main+0x94>)
 80005f8:	f002 fac2 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000600:	f001 fc0c 	bl	8001e1c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060a:	4809      	ldr	r0, [pc, #36]	@ (8000630 <main+0x94>)
 800060c:	f002 fab8 	bl	8002b80 <HAL_GPIO_WritePin>

	if(save_frequency >= AUDIO_BUFFER_SIZE * 1){
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <main+0x98>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000618:	dbe6      	blt.n	80005e8 <main+0x4c>
		stop_recording();
 800061a:	f000 fbb3 	bl	8000d84 <stop_recording>
		HAL_Delay(5000);
 800061e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000622:	f001 fbfb 	bl	8001e1c <HAL_Delay>
		break;
 8000626:	bf00      	nop
 8000628:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020c00 	.word	0x40020c00
 8000634:	200044b0 	.word	0x200044b0

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00a fc00 	bl	800ae4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 80006ac:	23a5      	movs	r3, #165	@ 0xa5
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fb2d 	bl	8004d1c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 ffca 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fd8e 	bl	800520c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 ffb3 	bl	8001660 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800071e:	2301      	movs	r3, #1
 8000720:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000722:	2332      	movs	r3, #50	@ 0x32
 8000724:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f004 ff8d 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000738:	f000 ff92 	bl	8001660 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <MX_I2C2_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_I2C2_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_I2C2_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_I2C2_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_I2C2_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_I2C2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_I2C2_Init+0x50>)
 8000782:	f002 fa17 	bl	8002bb4 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 ff68 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000a0 	.word	0x200000a0
 8000798:	40005800 	.word	0x40005800
 800079c:	000186a0 	.word	0x000186a0

080007a0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S2_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007c6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S2_Init+0x54>)
 80007e0:	f003 fad6 	bl	8003d90 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 ff39 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f4 	.word	0x200000f4
 80007f8:	40003800 	.word	0x40003800

080007fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000802:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <MX_I2S3_Init+0x58>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000816:	2201      	movs	r2, #1
 8000818:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <MX_I2S3_Init+0x54>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000822:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000826:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_I2S3_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_I2S3_Init+0x54>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_I2S3_Init+0x54>)
 800083c:	f003 faa8 	bl	8003d90 <HAL_I2S_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000846:	f000 ff0b 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000013c 	.word	0x2000013c
 8000854:	40003c00 	.word	0x40003c00

08000858 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 800085e:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <MX_SDIO_SD_Init+0x3c>)
 8000860:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <MX_SDIO_SD_Init+0x38>)
 8000882:	2204      	movs	r2, #4
 8000884:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	20000244 	.word	0x20000244
 8000894:	40012c00 	.word	0x40012c00

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f005 ff84 	bl	80067dc <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 fec1 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200002c8 	.word	0x200002c8
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_USART3_UART_Init+0x50>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <MX_USART3_UART_Init+0x54>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART3_UART_Init+0x50>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USART3_UART_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <MX_USART3_UART_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART3_UART_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_USART3_UART_Init+0x50>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART3_UART_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_USART3_UART_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART3_UART_Init+0x50>)
 8000928:	f005 ffa5 	bl	8006876 <HAL_MultiProcessor_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 fe95 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000030c 	.word	0x2000030c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_DMA_Init+0x4c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <MX_DMA_Init+0x4c>)
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_DMA_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200b      	movs	r0, #11
 800096c:	f001 fb55 	bl	800201a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000970:	200b      	movs	r0, #11
 8000972:	f001 fb6e 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	200e      	movs	r0, #14
 800097c:	f001 fb4d 	bl	800201a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000980:	200e      	movs	r0, #14
 8000982:	f001 fb66 	bl	8002052 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	@ 0x30
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	4b49      	ldr	r3, [pc, #292]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a48      	ldr	r2, [pc, #288]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b46      	ldr	r3, [pc, #280]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	4b42      	ldr	r3, [pc, #264]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a41      	ldr	r2, [pc, #260]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a3a      	ldr	r2, [pc, #232]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b34      	ldr	r3, [pc, #208]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a33      	ldr	r2, [pc, #204]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_GPIO_Init+0x140>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2132      	movs	r1, #50	@ 0x32
 8000a56:	4820      	ldr	r0, [pc, #128]	@ (8000ad8 <MX_GPIO_Init+0x144>)
 8000a58:	f002 f892 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f24b 0178 	movw	r1, #45176	@ 0xb078
 8000a62:	481e      	ldr	r0, [pc, #120]	@ (8000adc <MX_GPIO_Init+0x148>)
 8000a64:	f002 f88c 	bl	8002b80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000a6e:	481c      	ldr	r0, [pc, #112]	@ (8000ae0 <MX_GPIO_Init+0x14c>)
 8000a70:	f002 f886 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8000a74:	2332      	movs	r3, #50	@ 0x32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4813      	ldr	r0, [pc, #76]	@ (8000ad8 <MX_GPIO_Init+0x144>)
 8000a8c:	f001 fedc 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000a90:	f24b 0378 	movw	r3, #45176	@ 0xb078
 8000a94:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_GPIO_Init+0x148>)
 8000aaa:	f001 fecd 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000aae:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <MX_GPIO_Init+0x14c>)
 8000ac8:	f001 febe 	bl	8002848 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <Start_Recording>:

/* USER CODE BEGIN 4 */
int Start_Recording(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	  /**********************************************************************************************************	SD card ***/

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);// OE	SD 1 and 2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2108      	movs	r1, #8
 8000aec:	4888      	ldr	r0, [pc, #544]	@ (8000d10 <Start_Recording+0x22c>)
 8000aee:	f002 f847 	bl	8002b80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2110      	movs	r1, #16
 8000af6:	4886      	ldr	r0, [pc, #536]	@ (8000d10 <Start_Recording+0x22c>)
 8000af8:	f002 f842 	bl	8002b80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);// OE	SD 3 and 4
 8000afc:	2201      	movs	r2, #1
 8000afe:	2120      	movs	r1, #32
 8000b00:	4883      	ldr	r0, [pc, #524]	@ (8000d10 <Start_Recording+0x22c>)
 8000b02:	f002 f83d 	bl	8002b80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2140      	movs	r1, #64	@ 0x40
 8000b0a:	4881      	ldr	r0, [pc, #516]	@ (8000d10 <Start_Recording+0x22c>)
 8000b0c:	f002 f838 	bl	8002b80 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	@ 0x64
 8000b12:	f001 f983 	bl	8001e1c <HAL_Delay>

	  /**********************************************************************************************************	SD 1	***/
	  message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 8000b16:	497f      	ldr	r1, [pc, #508]	@ (8000d14 <Start_Recording+0x230>)
 8000b18:	487f      	ldr	r0, [pc, #508]	@ (8000d18 <Start_Recording+0x234>)
 8000b1a:	f000 fd7f 	bl	800161c <message>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);	// OE  Pin pulled low		SD 1 and 2
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	487b      	ldr	r0, [pc, #492]	@ (8000d10 <Start_Recording+0x22c>)
 8000b24:	f002 f82c 	bl	8002b80 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b28:	2064      	movs	r0, #100	@ 0x64
 8000b2a:	f001 f977 	bl	8001e1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);	// SEL Pin pulled low		SD 1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2110      	movs	r1, #16
 8000b32:	4877      	ldr	r0, [pc, #476]	@ (8000d10 <Start_Recording+0x22c>)
 8000b34:	f002 f824 	bl	8002b80 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b38:	2064      	movs	r0, #100	@ 0x64
 8000b3a:	f001 f96f 	bl	8001e1c <HAL_Delay>

	//  Mount_SD("/");
	//  Format_SD();
	//  Unmount_SD("/");

	  message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 8000b3e:	4977      	ldr	r1, [pc, #476]	@ (8000d1c <Start_Recording+0x238>)
 8000b40:	4875      	ldr	r0, [pc, #468]	@ (8000d18 <Start_Recording+0x234>)
 8000b42:	f000 fd6b 	bl	800161c <message>

		fresult = f_mount(&fs_local, "/", 1);/*	Mount Stroge	*/
 8000b46:	2201      	movs	r2, #1
 8000b48:	4975      	ldr	r1, [pc, #468]	@ (8000d20 <Start_Recording+0x23c>)
 8000b4a:	4876      	ldr	r0, [pc, #472]	@ (8000d24 <Start_Recording+0x240>)
 8000b4c:	f008 ff7c 	bl	8009a48 <f_mount>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b74      	ldr	r3, [pc, #464]	@ (8000d28 <Start_Recording+0x244>)
 8000b56:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK){ message ("ERROR!!! in mounting SD CARD...\r\n");	return 0;}
 8000b58:	4b73      	ldr	r3, [pc, #460]	@ (8000d28 <Start_Recording+0x244>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <Start_Recording+0x86>
 8000b60:	4872      	ldr	r0, [pc, #456]	@ (8000d2c <Start_Recording+0x248>)
 8000b62:	f000 fd5b 	bl	800161c <message>
 8000b66:	2300      	movs	r3, #0
 8000b68:	e0d0      	b.n	8000d0c <Start_Recording+0x228>



		History_update();
 8000b6a:	f000 fb35 	bl	80011d8 <History_update>

	/************************************************************************************************************/
		sprintf(File_name_1, "file_%d_1.wav",number);
 8000b6e:	4b70      	ldr	r3, [pc, #448]	@ (8000d30 <Start_Recording+0x24c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	496f      	ldr	r1, [pc, #444]	@ (8000d34 <Start_Recording+0x250>)
 8000b76:	4870      	ldr	r0, [pc, #448]	@ (8000d38 <Start_Recording+0x254>)
 8000b78:	f00a f90e 	bl	800ad98 <siprintf>
		sprintf(File_name_2, "file_%d_2.wav",number);
 8000b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d30 <Start_Recording+0x24c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	496e      	ldr	r1, [pc, #440]	@ (8000d3c <Start_Recording+0x258>)
 8000b84:	486e      	ldr	r0, [pc, #440]	@ (8000d40 <Start_Recording+0x25c>)
 8000b86:	f00a f907 	bl	800ad98 <siprintf>

		fresult = f_stat (File_name_1, &fno_local);	/*	Check For File Presence	*/
 8000b8a:	496e      	ldr	r1, [pc, #440]	@ (8000d44 <Start_Recording+0x260>)
 8000b8c:	486a      	ldr	r0, [pc, #424]	@ (8000d38 <Start_Recording+0x254>)
 8000b8e:	f009 ff28 	bl	800a9e2 <f_stat>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b64      	ldr	r3, [pc, #400]	@ (8000d28 <Start_Recording+0x244>)
 8000b98:	701a      	strb	r2, [r3, #0]
		fresult = f_stat (File_name_2, &fno_local);	/*	Check For File Presence	*/
 8000b9a:	496a      	ldr	r1, [pc, #424]	@ (8000d44 <Start_Recording+0x260>)
 8000b9c:	4868      	ldr	r0, [pc, #416]	@ (8000d40 <Start_Recording+0x25c>)
 8000b9e:	f009 ff20 	bl	800a9e2 <f_stat>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b60      	ldr	r3, [pc, #384]	@ (8000d28 <Start_Recording+0x244>)
 8000ba8:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK){message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n","FILE1.txt"); return 0;}
 8000baa:	4b5f      	ldr	r3, [pc, #380]	@ (8000d28 <Start_Recording+0x244>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d105      	bne.n	8000bbe <Start_Recording+0xda>
 8000bb2:	4965      	ldr	r1, [pc, #404]	@ (8000d48 <Start_Recording+0x264>)
 8000bb4:	4865      	ldr	r0, [pc, #404]	@ (8000d4c <Start_Recording+0x268>)
 8000bb6:	f000 fd31 	bl	800161c <message>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e0a6      	b.n	8000d0c <Start_Recording+0x228>
		else
		{
			fresult = f_open(&file_1,File_name_1, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);	/*	Create file	by opening */
 8000bbe:	220b      	movs	r2, #11
 8000bc0:	495d      	ldr	r1, [pc, #372]	@ (8000d38 <Start_Recording+0x254>)
 8000bc2:	4863      	ldr	r0, [pc, #396]	@ (8000d50 <Start_Recording+0x26c>)
 8000bc4:	f008 ff86 	bl	8009ad4 <f_open>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b56      	ldr	r3, [pc, #344]	@ (8000d28 <Start_Recording+0x244>)
 8000bce:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK){ message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1); return 0;}
 8000bd0:	4b55      	ldr	r3, [pc, #340]	@ (8000d28 <Start_Recording+0x244>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d008      	beq.n	8000bea <Start_Recording+0x106>
 8000bd8:	4b53      	ldr	r3, [pc, #332]	@ (8000d28 <Start_Recording+0x244>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4a56      	ldr	r2, [pc, #344]	@ (8000d38 <Start_Recording+0x254>)
 8000bde:	4619      	mov	r1, r3
 8000be0:	485c      	ldr	r0, [pc, #368]	@ (8000d54 <Start_Recording+0x270>)
 8000be2:	f000 fd1b 	bl	800161c <message>
 8000be6:	2300      	movs	r3, #0
 8000be8:	e090      	b.n	8000d0c <Start_Recording+0x228>

			fresult = f_open(&file_2,File_name_2, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);	/*	Create file	by opening */
 8000bea:	220b      	movs	r2, #11
 8000bec:	4954      	ldr	r1, [pc, #336]	@ (8000d40 <Start_Recording+0x25c>)
 8000bee:	485a      	ldr	r0, [pc, #360]	@ (8000d58 <Start_Recording+0x274>)
 8000bf0:	f008 ff70 	bl	8009ad4 <f_open>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d28 <Start_Recording+0x244>)
 8000bfa:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK){ message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1); return 0;}
 8000bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <Start_Recording+0x244>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <Start_Recording+0x132>
 8000c04:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <Start_Recording+0x244>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4a4b      	ldr	r2, [pc, #300]	@ (8000d38 <Start_Recording+0x254>)
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4851      	ldr	r0, [pc, #324]	@ (8000d54 <Start_Recording+0x270>)
 8000c0e:	f000 fd05 	bl	800161c <message>
 8000c12:	2300      	movs	r3, #0
 8000c14:	e07a      	b.n	8000d0c <Start_Recording+0x228>

			fresult = f_close(&file_1);	/*	Close file	*/
 8000c16:	484e      	ldr	r0, [pc, #312]	@ (8000d50 <Start_Recording+0x26c>)
 8000c18:	f009 fc95 	bl	800a546 <f_close>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b41      	ldr	r3, [pc, #260]	@ (8000d28 <Start_Recording+0x244>)
 8000c22:	701a      	strb	r2, [r3, #0]
			fresult = f_close(&file_2);	/*	Close file	*/
 8000c24:	484c      	ldr	r0, [pc, #304]	@ (8000d58 <Start_Recording+0x274>)
 8000c26:	f009 fc8e 	bl	800a546 <f_close>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <Start_Recording+0x244>)
 8000c30:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult,File_name_1);
 8000c32:	4b3d      	ldr	r3, [pc, #244]	@ (8000d28 <Start_Recording+0x244>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <Start_Recording+0x164>
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <Start_Recording+0x244>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d38 <Start_Recording+0x254>)
 8000c40:	4619      	mov	r1, r3
 8000c42:	4846      	ldr	r0, [pc, #280]	@ (8000d5c <Start_Recording+0x278>)
 8000c44:	f000 fcea 	bl	800161c <message>
		}

		f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 8000c48:	2232      	movs	r2, #50	@ 0x32
 8000c4a:	493b      	ldr	r1, [pc, #236]	@ (8000d38 <Start_Recording+0x254>)
 8000c4c:	4840      	ldr	r0, [pc, #256]	@ (8000d50 <Start_Recording+0x26c>)
 8000c4e:	f008 ff41 	bl	8009ad4 <f_open>
		f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 8000c52:	2232      	movs	r2, #50	@ 0x32
 8000c54:	493a      	ldr	r1, [pc, #232]	@ (8000d40 <Start_Recording+0x25c>)
 8000c56:	4840      	ldr	r0, [pc, #256]	@ (8000d58 <Start_Recording+0x274>)
 8000c58:	f008 ff3c 	bl	8009ad4 <f_open>

	  read_and_print_registers();
 8000c5c:	f000 fa48 	bl	80010f0 <read_and_print_registers>

	  /* Initialize header file */
	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8000c60:	493f      	ldr	r1, [pc, #252]	@ (8000d60 <Start_Recording+0x27c>)
 8000c62:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8000c66:	f000 fb77 	bl	8001358 <WavProcess_EncInit>

	  /* Write the header Wave */
	  f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 8000c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d64 <Start_Recording+0x280>)
 8000c6c:	222c      	movs	r2, #44	@ 0x2c
 8000c6e:	493c      	ldr	r1, [pc, #240]	@ (8000d60 <Start_Recording+0x27c>)
 8000c70:	4837      	ldr	r0, [pc, #220]	@ (8000d50 <Start_Recording+0x26c>)
 8000c72:	f009 fa56 	bl	800a122 <f_write>
	  f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 8000c76:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <Start_Recording+0x280>)
 8000c78:	222c      	movs	r2, #44	@ 0x2c
 8000c7a:	4939      	ldr	r1, [pc, #228]	@ (8000d60 <Start_Recording+0x27c>)
 8000c7c:	4836      	ldr	r0, [pc, #216]	@ (8000d58 <Start_Recording+0x274>)
 8000c7e:	f009 fa50 	bl	800a122 <f_write>

	  memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 8000c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c86:	2100      	movs	r1, #0
 8000c88:	4837      	ldr	r0, [pc, #220]	@ (8000d68 <Start_Recording+0x284>)
 8000c8a:	f00a f8df 	bl	800ae4c <memset>
	  memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 8000c8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c92:	2100      	movs	r1, #0
 8000c94:	4835      	ldr	r0, [pc, #212]	@ (8000d6c <Start_Recording+0x288>)
 8000c96:	f00a f8d9 	bl	800ae4c <memset>

	  message("Message: %s\r\n", "________________	Recording Started	_____________\r\n");
 8000c9a:	4935      	ldr	r1, [pc, #212]	@ (8000d70 <Start_Recording+0x28c>)
 8000c9c:	481e      	ldr	r0, [pc, #120]	@ (8000d18 <Start_Recording+0x234>)
 8000c9e:	f000 fcbd 	bl	800161c <message>
	  // Start I2S DMA reception
	   if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8000ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca6:	4930      	ldr	r1, [pc, #192]	@ (8000d68 <Start_Recording+0x284>)
 8000ca8:	4832      	ldr	r0, [pc, #200]	@ (8000d74 <Start_Recording+0x290>)
 8000caa:	f003 f9b1 	bl	8004010 <HAL_I2S_Receive_DMA>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d010      	beq.n	8000cd6 <Start_Recording+0x1f2>
	       // Error handling
		   message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error !!!!__!!__\r\n");
 8000cb4:	4930      	ldr	r1, [pc, #192]	@ (8000d78 <Start_Recording+0x294>)
 8000cb6:	4818      	ldr	r0, [pc, #96]	@ (8000d18 <Start_Recording+0x234>)
 8000cb8:	f000 fcb0 	bl	800161c <message>
		   message("Message: %d\r\n", HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE));
 8000cbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc0:	4929      	ldr	r1, [pc, #164]	@ (8000d68 <Start_Recording+0x284>)
 8000cc2:	482c      	ldr	r0, [pc, #176]	@ (8000d74 <Start_Recording+0x290>)
 8000cc4:	f003 f9a4 	bl	8004010 <HAL_I2S_Receive_DMA>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	482b      	ldr	r0, [pc, #172]	@ (8000d7c <Start_Recording+0x298>)
 8000cce:	f000 fca5 	bl	800161c <message>
	       Error_Handler();
 8000cd2:	f000 fcc5 	bl	8001660 <Error_Handler>
	   }
	   if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8000cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cda:	4924      	ldr	r1, [pc, #144]	@ (8000d6c <Start_Recording+0x288>)
 8000cdc:	4828      	ldr	r0, [pc, #160]	@ (8000d80 <Start_Recording+0x29c>)
 8000cde:	f003 f997 	bl	8004010 <HAL_I2S_Receive_DMA>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d010      	beq.n	8000d0a <Start_Recording+0x226>
	          // Error handling
	   	   message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error !!!!__!!__\r\n");
 8000ce8:	4923      	ldr	r1, [pc, #140]	@ (8000d78 <Start_Recording+0x294>)
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <Start_Recording+0x234>)
 8000cec:	f000 fc96 	bl	800161c <message>
	   	   message("Message: %d\r\n", HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE));
 8000cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf4:	491d      	ldr	r1, [pc, #116]	@ (8000d6c <Start_Recording+0x288>)
 8000cf6:	4822      	ldr	r0, [pc, #136]	@ (8000d80 <Start_Recording+0x29c>)
 8000cf8:	f003 f98a 	bl	8004010 <HAL_I2S_Receive_DMA>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481e      	ldr	r0, [pc, #120]	@ (8000d7c <Start_Recording+0x298>)
 8000d02:	f000 fc8b 	bl	800161c <message>
	       Error_Handler();
 8000d06:	f000 fcab 	bl	8001660 <Error_Handler>
	   }

	   return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	0800b704 	.word	0x0800b704
 8000d18:	0800b73c 	.word	0x0800b73c
 8000d1c:	0800b74c 	.word	0x0800b74c
 8000d20:	0800b7a0 	.word	0x0800b7a0
 8000d24:	200003b8 	.word	0x200003b8
 8000d28:	20000094 	.word	0x20000094
 8000d2c:	0800b7a4 	.word	0x0800b7a4
 8000d30:	200003b4 	.word	0x200003b4
 8000d34:	0800b7c8 	.word	0x0800b7c8
 8000d38:	20003470 	.word	0x20003470
 8000d3c:	0800b7d8 	.word	0x0800b7d8
 8000d40:	20003490 	.word	0x20003490
 8000d44:	20003450 	.word	0x20003450
 8000d48:	0800b7e8 	.word	0x0800b7e8
 8000d4c:	0800b7f4 	.word	0x0800b7f4
 8000d50:	200013ec 	.word	0x200013ec
 8000d54:	0800b82c 	.word	0x0800b82c
 8000d58:	2000241c 	.word	0x2000241c
 8000d5c:	0800b854 	.word	0x0800b854
 8000d60:	200044f0 	.word	0x200044f0
 8000d64:	200044ec 	.word	0x200044ec
 8000d68:	20003cb0 	.word	0x20003cb0
 8000d6c:	200034b0 	.word	0x200034b0
 8000d70:	0800b878 	.word	0x0800b878
 8000d74:	200000f4 	.word	0x200000f4
 8000d78:	0800b8ac 	.word	0x0800b8ac
 8000d7c:	0800b8e4 	.word	0x0800b8e4
 8000d80:	2000013c 	.word	0x2000013c

08000d84 <stop_recording>:

int stop_recording(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	stop_saving = 1;
 8000d88:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <stop_recording+0x98>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
	save_frequency = 0;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <stop_recording+0x9c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
	HAL_I2S_DMAStop(&hi2s2);
 8000d94:	4823      	ldr	r0, [pc, #140]	@ (8000e24 <stop_recording+0xa0>)
 8000d96:	f003 f9f7 	bl	8004188 <HAL_I2S_DMAStop>
	HAL_I2S_DMAStop(&hi2s3);
 8000d9a:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <stop_recording+0xa4>)
 8000d9c:	f003 f9f4 	bl	8004188 <HAL_I2S_DMAStop>

	read_and_print_registers();
 8000da0:	f000 f9a6 	bl	80010f0 <read_and_print_registers>

	HAL_Delay(1000);
 8000da4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da8:	f001 f838 	bl	8001e1c <HAL_Delay>

	/* Update the data length in the header of the recorded Wave */
	f_lseek(&file_1, 0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <stop_recording+0xa8>)
 8000db0:	f009 fbf3 	bl	800a59a <f_lseek>
	f_lseek(&file_2, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	481e      	ldr	r0, [pc, #120]	@ (8000e30 <stop_recording+0xac>)
 8000db8:	f009 fbef 	bl	800a59a <f_lseek>

	/* Parse the wav file header and extract required information */
	WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8000dbc:	491d      	ldr	r1, [pc, #116]	@ (8000e34 <stop_recording+0xb0>)
 8000dbe:	481e      	ldr	r0, [pc, #120]	@ (8000e38 <stop_recording+0xb4>)
 8000dc0:	f000 fbe2 	bl	8001588 <WavProcess_HeaderUpdate>
	f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <stop_recording+0xb8>)
 8000dc6:	222c      	movs	r2, #44	@ 0x2c
 8000dc8:	491b      	ldr	r1, [pc, #108]	@ (8000e38 <stop_recording+0xb4>)
 8000dca:	4818      	ldr	r0, [pc, #96]	@ (8000e2c <stop_recording+0xa8>)
 8000dcc:	f009 f9a9 	bl	800a122 <f_write>
	f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <stop_recording+0xb8>)
 8000dd2:	222c      	movs	r2, #44	@ 0x2c
 8000dd4:	4918      	ldr	r1, [pc, #96]	@ (8000e38 <stop_recording+0xb4>)
 8000dd6:	4816      	ldr	r0, [pc, #88]	@ (8000e30 <stop_recording+0xac>)
 8000dd8:	f009 f9a3 	bl	800a122 <f_write>

	f_close(&file_1);
 8000ddc:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <stop_recording+0xa8>)
 8000dde:	f009 fbb2 	bl	800a546 <f_close>
	f_close(&file_2);
 8000de2:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <stop_recording+0xac>)
 8000de4:	f009 fbaf 	bl	800a546 <f_close>

	fresult = f_mount(NULL, "/", 1);	/*	Unmount Stroge	*/
 8000de8:	2201      	movs	r2, #1
 8000dea:	4915      	ldr	r1, [pc, #84]	@ (8000e40 <stop_recording+0xbc>)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f008 fe2b 	bl	8009a48 <f_mount>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <stop_recording+0xc0>)
 8000df8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <stop_recording+0xc0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <stop_recording+0x84>
 8000e02:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <stop_recording+0xc4>)
 8000e04:	f000 fc0a 	bl	800161c <message>

	message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 8000e08:	4810      	ldr	r0, [pc, #64]	@ (8000e4c <stop_recording+0xc8>)
 8000e0a:	f000 fc07 	bl	800161c <message>
	HAL_Delay(1000);
 8000e0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e12:	f001 f803 	bl	8001e1c <HAL_Delay>
	return 0;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200044b4 	.word	0x200044b4
 8000e20:	200044b0 	.word	0x200044b0
 8000e24:	200000f4 	.word	0x200000f4
 8000e28:	2000013c 	.word	0x2000013c
 8000e2c:	200013ec 	.word	0x200013ec
 8000e30:	2000241c 	.word	0x2000241c
 8000e34:	200044b8 	.word	0x200044b8
 8000e38:	200044f0 	.word	0x200044f0
 8000e3c:	200044ec 	.word	0x200044ec
 8000e40:	0800b7a0 	.word	0x0800b7a0
 8000e44:	20000094 	.word	0x20000094
 8000e48:	0800b8f4 	.word	0x0800b8f4
 8000e4c:	0800b918 	.word	0x0800b918

08000e50 <HAL_I2S_RxCpltCallback>:

// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_I2S_RxCpltCallback+0x74>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d12d      	bne.n	8000ebc <HAL_I2S_RxCpltCallback+0x6c>
	    if (hi2s->Instance == SPI2) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_I2S_RxCpltCallback+0x78>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10b      	bne.n	8000e82 <HAL_I2S_RxCpltCallback+0x32>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_I2S_RxCpltCallback+0x7c>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	4917      	ldr	r1, [pc, #92]	@ (8000ed0 <HAL_I2S_RxCpltCallback+0x80>)
 8000e72:	4818      	ldr	r0, [pc, #96]	@ (8000ed4 <HAL_I2S_RxCpltCallback+0x84>)
 8000e74:	f009 f955 	bl	800a122 <f_write>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_I2S_RxCpltCallback+0x32>
				Error_Handler();  // File write failed
 8000e7e:	f000 fbef 	bl	8001660 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <HAL_I2S_RxCpltCallback+0x88>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d10b      	bne.n	8000ea4 <HAL_I2S_RxCpltCallback+0x54>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <HAL_I2S_RxCpltCallback+0x8c>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e92:	4913      	ldr	r1, [pc, #76]	@ (8000ee0 <HAL_I2S_RxCpltCallback+0x90>)
 8000e94:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <HAL_I2S_RxCpltCallback+0x94>)
 8000e96:	f009 f944 	bl	800a122 <f_write>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_I2S_RxCpltCallback+0x54>
				Error_Handler();  // File write failed
 8000ea0:	f000 fbde 	bl	8001660 <Error_Handler>
			}
		}
	    save_frequency ++;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_I2S_RxCpltCallback+0x98>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <HAL_I2S_RxCpltCallback+0x98>)
 8000eac:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_I2S_RxCpltCallback+0x9c>)
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_I2S_RxCpltCallback+0x7c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <HAL_I2S_RxCpltCallback+0x9c>)
 8000eba:	6053      	str	r3, [r2, #4]
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200044b4 	.word	0x200044b4
 8000ec8:	40003800 	.word	0x40003800
 8000ecc:	20003468 	.word	0x20003468
 8000ed0:	200040b0 	.word	0x200040b0
 8000ed4:	200013ec 	.word	0x200013ec
 8000ed8:	40003c00 	.word	0x40003c00
 8000edc:	2000346c 	.word	0x2000346c
 8000ee0:	200038b0 	.word	0x200038b0
 8000ee4:	2000241c 	.word	0x2000241c
 8000ee8:	200044b0 	.word	0x200044b0
 8000eec:	200044e4 	.word	0x200044e4

08000ef0 <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d121      	bne.n	8000f44 <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_I2S_RxHalfCpltCallback+0x60>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10b      	bne.n	8000f22 <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8000f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f10:	4911      	ldr	r1, [pc, #68]	@ (8000f58 <HAL_I2S_RxHalfCpltCallback+0x68>)
 8000f12:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8000f14:	f009 f905 	bl	800a122 <f_write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 8000f1e:	f000 fb9f 	bl	8001660 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <HAL_I2S_RxHalfCpltCallback+0x70>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10b      	bne.n	8000f44 <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8000f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8000f36:	f009 f8f4 	bl	800a122 <f_write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 8000f40:	f000 fb8e 	bl	8001660 <Error_Handler>
	    	}
	    }
	}

}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200044b4 	.word	0x200044b4
 8000f50:	40003800 	.word	0x40003800
 8000f54:	20003468 	.word	0x20003468
 8000f58:	20003cb0 	.word	0x20003cb0
 8000f5c:	200013ec 	.word	0x200013ec
 8000f60:	40003c00 	.word	0x40003c00
 8000f64:	2000346c 	.word	0x2000346c
 8000f68:	200034b0 	.word	0x200034b0
 8000f6c:	2000241c 	.word	0x2000241c

08000f70 <configure_codec>:

void configure_codec() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	21e2      	movs	r1, #226	@ 0xe2
 8000f7e:	482e      	ldr	r0, [pc, #184]	@ (8001038 <configure_codec+0xc8>)
 8000f80:	f002 fa7c 	bl	800347c <HAL_I2C_IsDeviceReady>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 8000f8a:	492c      	ldr	r1, [pc, #176]	@ (800103c <configure_codec+0xcc>)
 8000f8c:	482c      	ldr	r0, [pc, #176]	@ (8001040 <configure_codec+0xd0>)
 8000f8e:	f000 fb45 	bl	800161c <message>
    }
    HAL_Delay(500);
 8000f92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f96:	f000 ff41 	bl	8001e1c <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e023      	b.n	8000fe8 <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 8000fa0:	4a28      	ldr	r2, [pc, #160]	@ (8001044 <configure_codec+0xd4>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 8000fac:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <configure_codec+0xd4>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	1cfb      	adds	r3, r7, #3
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	21e2      	movs	r1, #226	@ 0xe2
 8000fc8:	481b      	ldr	r0, [pc, #108]	@ (8001038 <configure_codec+0xc8>)
 8000fca:	f001 ff37 	bl	8002e3c <HAL_I2C_Mem_Write>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 8000fd4:	491c      	ldr	r1, [pc, #112]	@ (8001048 <configure_codec+0xd8>)
 8000fd6:	481a      	ldr	r0, [pc, #104]	@ (8001040 <configure_codec+0xd0>)
 8000fd8:	f000 fb20 	bl	800161c <message>
        }
        HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	@ 0x64
 8000fde:	f000 ff1d 	bl	8001e1c <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b0d      	cmp	r3, #13
 8000fec:	d9d8      	bls.n	8000fa0 <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	1cbb      	adds	r3, r7, #2
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2206      	movs	r2, #6
 8001000:	21e2      	movs	r1, #226	@ 0xe2
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <configure_codec+0xc8>)
 8001004:	f002 f814 	bl	8003030 <HAL_I2C_Mem_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10b      	bne.n	8001026 <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <configure_codec+0xdc>)
 8001016:	f001 fdb3 	bl	8002b80 <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f000 fefc 	bl	8001e1c <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 8001024:	e003      	b.n	800102e <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 8001026:	490a      	ldr	r1, [pc, #40]	@ (8001050 <configure_codec+0xe0>)
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <configure_codec+0xd0>)
 800102a:	f000 faf7 	bl	800161c <message>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000a0 	.word	0x200000a0
 800103c:	0800b94c 	.word	0x0800b94c
 8001040:	0800b73c 	.word	0x0800b73c
 8001044:	20000000 	.word	0x20000000
 8001048:	0800b978 	.word	0x0800b978
 800104c:	40020c00 	.word	0x40020c00
 8001050:	0800b9a4 	.word	0x0800b9a4

08001054 <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 8001058:	4910      	ldr	r1, [pc, #64]	@ (800109c <CODEC_RST+0x48>)
 800105a:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <CODEC_RST+0x4c>)
 800105c:	f000 fade 	bl	800161c <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <CODEC_RST+0x50>)
 8001066:	f001 fd8b 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800106a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106e:	f000 fed5 	bl	8001e1c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2102      	movs	r1, #2
 8001076:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <CODEC_RST+0x50>)
 8001078:	f001 fd82 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001080:	f000 fecc 	bl	8001e1c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2102      	movs	r1, #2
 8001088:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <CODEC_RST+0x50>)
 800108a:	f001 fd79 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 800108e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001092:	f000 fec3 	bl	8001e1c <HAL_Delay>

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	0800bab8 	.word	0x0800bab8
 80010a0:	0800b73c 	.word	0x0800b73c
 80010a4:	40021000 	.word	0x40021000

080010a8 <TS472IQT_EN>:

void TS472IQT_EN(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <TS472IQT_EN+0x40>)
 80010b4:	f001 fd64 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010be:	480b      	ldr	r0, [pc, #44]	@ (80010ec <TS472IQT_EN+0x44>)
 80010c0:	f001 fd5e 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ca:	4808      	ldr	r0, [pc, #32]	@ (80010ec <TS472IQT_EN+0x44>)
 80010cc:	f001 fd58 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <TS472IQT_EN+0x44>)
 80010d8:	f001 fd52 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f000 fe9d 	bl	8001e1c <HAL_Delay>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40020000 	.word	0x40020000

080010f0 <read_and_print_registers>:


// Function to read and print register values
void read_and_print_registers() {
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af04      	add	r7, sp, #16
    uint8_t i2c_rbf; // Buffer to store the read byte
    HAL_StatusTypeDef ret;

    message("Reg\tName\t\tRead Value\tReset Value\r\n");
 80010f6:	4832      	ldr	r0, [pc, #200]	@ (80011c0 <read_and_print_registers+0xd0>)
 80010f8:	f000 fa90 	bl	800161c <message>
    message("----------------------------------------------------------\r\n");
 80010fc:	4831      	ldr	r0, [pc, #196]	@ (80011c4 <read_and_print_registers+0xd4>)
 80010fe:	f000 fa8d 	bl	800161c <message>

    for (uint8_t i = 0; i < NUM_REGISTERS; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e051      	b.n	80011ac <read_and_print_registers+0xbc>
        uint8_t reg = registers[i].address;
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	492f      	ldr	r1, [pc, #188]	@ (80011c8 <read_and_print_registers+0xd8>)
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	71bb      	strb	r3, [r7, #6]
        ret = HAL_I2C_Mem_Read(&hi2c2, I2C_DEVICE_ADDR, reg, 1, &i2c_rbf, 1, 1000);
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	b29a      	uxth	r2, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21e2      	movs	r1, #226	@ 0xe2
 8001130:	4826      	ldr	r0, [pc, #152]	@ (80011cc <read_and_print_registers+0xdc>)
 8001132:	f001 ff7d 	bl	8003030 <HAL_I2C_Mem_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	717b      	strb	r3, [r7, #5]

        if (ret == HAL_OK) {
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11b      	bne.n	8001178 <read_and_print_registers+0x88>
        	message("0x%02X\t%-15s\t0x%02X\t\t0x%02X\r\n", reg, registers[i].name, i2c_rbf, registers[i].reset_value);
 8001140:	79b9      	ldrb	r1, [r7, #6]
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	4820      	ldr	r0, [pc, #128]	@ (80011c8 <read_and_print_registers+0xd8>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4403      	add	r3, r0
 8001150:	3304      	adds	r3, #4
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	461d      	mov	r5, r3
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4c1b      	ldr	r4, [pc, #108]	@ (80011c8 <read_and_print_registers+0xd8>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4423      	add	r3, r4
 8001166:	3308      	adds	r3, #8
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	462b      	mov	r3, r5
 800116e:	4602      	mov	r2, r0
 8001170:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <read_and_print_registers+0xe0>)
 8001172:	f000 fa53 	bl	800161c <message>
 8001176:	e016      	b.n	80011a6 <read_and_print_registers+0xb6>
        } else {
        	message("0x%02X\t%-15s\tError\t\t0x%02X\r\n", reg, registers[i].name, registers[i].reset_value);
 8001178:	79b9      	ldrb	r1, [r7, #6]
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <read_and_print_registers+0xd8>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4403      	add	r3, r0
 8001188:	3304      	adds	r3, #4
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	4c0e      	ldr	r4, [pc, #56]	@ (80011c8 <read_and_print_registers+0xd8>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4423      	add	r3, r4
 800119a:	3308      	adds	r3, #8
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4602      	mov	r2, r0
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <read_and_print_registers+0xe4>)
 80011a2:	f000 fa3b 	bl	800161c <message>
    for (uint8_t i = 0; i < NUM_REGISTERS; i++) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	3301      	adds	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b0e      	cmp	r3, #14
 80011b0:	d9aa      	bls.n	8001108 <read_and_print_registers+0x18>
        }
    }

    message("----------------------------------------------------------\r\n");
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <read_and_print_registers+0xd4>)
 80011b4:	f000 fa32 	bl	800161c <message>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	0800bad8 	.word	0x0800bad8
 80011c4:	0800bafc 	.word	0x0800bafc
 80011c8:	0800bcac 	.word	0x0800bcac
 80011cc:	200000a0 	.word	0x200000a0
 80011d0:	0800bb3c 	.word	0x0800bb3c
 80011d4:	0800bb5c 	.word	0x0800bb5c

080011d8 <History_update>:

void History_update(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 80011dc:	494d      	ldr	r1, [pc, #308]	@ (8001314 <History_update+0x13c>)
 80011de:	484e      	ldr	r0, [pc, #312]	@ (8001318 <History_update+0x140>)
 80011e0:	f009 fbff 	bl	800a9e2 <f_stat>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <History_update+0x144>)
 80011ea:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 80011ec:	4b4b      	ldr	r3, [pc, #300]	@ (800131c <History_update+0x144>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 80011f4:	484a      	ldr	r0, [pc, #296]	@ (8001320 <History_update+0x148>)
 80011f6:	f000 fa11 	bl	800161c <message>
 80011fa:	e01a      	b.n	8001232 <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 80011fc:	4849      	ldr	r0, [pc, #292]	@ (8001324 <History_update+0x14c>)
 80011fe:	f000 fa0d 	bl	800161c <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001202:	220a      	movs	r2, #10
 8001204:	4944      	ldr	r1, [pc, #272]	@ (8001318 <History_update+0x140>)
 8001206:	4848      	ldr	r0, [pc, #288]	@ (8001328 <History_update+0x150>)
 8001208:	f008 fc64 	bl	8009ad4 <f_open>
		sprintf(buffer, "%d", number);
 800120c:	4b47      	ldr	r3, [pc, #284]	@ (800132c <History_update+0x154>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4947      	ldr	r1, [pc, #284]	@ (8001330 <History_update+0x158>)
 8001214:	4847      	ldr	r0, [pc, #284]	@ (8001334 <History_update+0x15c>)
 8001216:	f009 fdbf 	bl	800ad98 <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 800121a:	4846      	ldr	r0, [pc, #280]	@ (8001334 <History_update+0x15c>)
 800121c:	f7fe ffd8 	bl	80001d0 <strlen>
 8001220:	4602      	mov	r2, r0
 8001222:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <History_update+0x160>)
 8001224:	4943      	ldr	r1, [pc, #268]	@ (8001334 <History_update+0x15c>)
 8001226:	4840      	ldr	r0, [pc, #256]	@ (8001328 <History_update+0x150>)
 8001228:	f008 ff7b 	bl	800a122 <f_write>
		f_close(&file_1);
 800122c:	483e      	ldr	r0, [pc, #248]	@ (8001328 <History_update+0x150>)
 800122e:	f009 f98a 	bl	800a546 <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 8001232:	2201      	movs	r2, #1
 8001234:	4938      	ldr	r1, [pc, #224]	@ (8001318 <History_update+0x140>)
 8001236:	483c      	ldr	r0, [pc, #240]	@ (8001328 <History_update+0x150>)
 8001238:	f008 fc4c 	bl	8009ad4 <f_open>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <History_update+0x164>)
 8001242:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 8001244:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <History_update+0x164>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d15e      	bne.n	800130a <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 800124c:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <History_update+0x168>)
 800124e:	2263      	movs	r2, #99	@ 0x63
 8001250:	4938      	ldr	r1, [pc, #224]	@ (8001334 <History_update+0x15c>)
 8001252:	4835      	ldr	r0, [pc, #212]	@ (8001328 <History_update+0x150>)
 8001254:	f008 fe06 	bl	8009e64 <f_read>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <History_update+0x164>)
 800125e:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 8001260:	4b36      	ldr	r3, [pc, #216]	@ (800133c <History_update+0x164>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d11a      	bne.n	800129e <History_update+0xc6>
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <History_update+0x168>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d016      	beq.n	800129e <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 8001270:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <History_update+0x168>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2f      	ldr	r2, [pc, #188]	@ (8001334 <History_update+0x15c>)
 8001276:	2100      	movs	r1, #0
 8001278:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 800127a:	482e      	ldr	r0, [pc, #184]	@ (8001334 <History_update+0x15c>)
 800127c:	f009 fc45 	bl	800ab0a <atoi>
 8001280:	4603      	mov	r3, r0
 8001282:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <History_update+0x154>)
 8001284:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 8001286:	4b29      	ldr	r3, [pc, #164]	@ (800132c <History_update+0x154>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a27      	ldr	r2, [pc, #156]	@ (800132c <History_update+0x154>)
 800128e:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <History_update+0x154>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	482b      	ldr	r0, [pc, #172]	@ (8001344 <History_update+0x16c>)
 8001298:	f000 f9c0 	bl	800161c <message>
 800129c:	e002      	b.n	80012a4 <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 800129e:	482a      	ldr	r0, [pc, #168]	@ (8001348 <History_update+0x170>)
 80012a0:	f000 f9bc 	bl	800161c <message>
		}
		f_close(&file_1); // Close the file
 80012a4:	4820      	ldr	r0, [pc, #128]	@ (8001328 <History_update+0x150>)
 80012a6:	f009 f94e 	bl	800a546 <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80012aa:	220a      	movs	r2, #10
 80012ac:	491a      	ldr	r1, [pc, #104]	@ (8001318 <History_update+0x140>)
 80012ae:	481e      	ldr	r0, [pc, #120]	@ (8001328 <History_update+0x150>)
 80012b0:	f008 fc10 	bl	8009ad4 <f_open>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <History_update+0x164>)
 80012ba:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <History_update+0x164>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11e      	bne.n	8001302 <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <History_update+0x154>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4919      	ldr	r1, [pc, #100]	@ (8001330 <History_update+0x158>)
 80012cc:	4819      	ldr	r0, [pc, #100]	@ (8001334 <History_update+0x15c>)
 80012ce:	f009 fd63 	bl	800ad98 <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 80012d2:	4818      	ldr	r0, [pc, #96]	@ (8001334 <History_update+0x15c>)
 80012d4:	f7fe ff7c 	bl	80001d0 <strlen>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <History_update+0x160>)
 80012dc:	4915      	ldr	r1, [pc, #84]	@ (8001334 <History_update+0x15c>)
 80012de:	4812      	ldr	r0, [pc, #72]	@ (8001328 <History_update+0x150>)
 80012e0:	f008 ff1f 	bl	800a122 <f_write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <History_update+0x164>)
 80012ea:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <History_update+0x164>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 80012f4:	4815      	ldr	r0, [pc, #84]	@ (800134c <History_update+0x174>)
 80012f6:	f000 f991 	bl	800161c <message>
			}
			f_close(&file_1); // Close the file
 80012fa:	480b      	ldr	r0, [pc, #44]	@ (8001328 <History_update+0x150>)
 80012fc:	f009 f923 	bl	800a546 <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 8001300:	e006      	b.n	8001310 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 8001302:	4813      	ldr	r0, [pc, #76]	@ (8001350 <History_update+0x178>)
 8001304:	f000 f98a 	bl	800161c <message>
}
 8001308:	e002      	b.n	8001310 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 800130a:	4812      	ldr	r0, [pc, #72]	@ (8001354 <History_update+0x17c>)
 800130c:	f000 f986 	bl	800161c <message>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20003450 	.word	0x20003450
 8001318:	0800bb7c 	.word	0x0800bb7c
 800131c:	20000094 	.word	0x20000094
 8001320:	0800bb88 	.word	0x0800bb88
 8001324:	0800bbac 	.word	0x0800bbac
 8001328:	200013ec 	.word	0x200013ec
 800132c:	200003b4 	.word	0x200003b4
 8001330:	0800bbc8 	.word	0x0800bbc8
 8001334:	20000350 	.word	0x20000350
 8001338:	2000009c 	.word	0x2000009c
 800133c:	2000344c 	.word	0x2000344c
 8001340:	20000098 	.word	0x20000098
 8001344:	0800bbcc 	.word	0x0800bbcc
 8001348:	0800bbe4 	.word	0x0800bbe4
 800134c:	0800bc00 	.word	0x0800bc00
 8001350:	0800bc1c 	.word	0x0800bc1c
 8001354:	0800bc48 	.word	0x0800bc48

08001358 <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001362:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <WavProcess_EncInit+0x78>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <WavProcess_EncInit+0x78>)
 800136a:	2202      	movs	r2, #2
 800136c:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <WavProcess_EncInit+0x78>)
 8001370:	2210      	movs	r2, #16
 8001372:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <WavProcess_EncInit+0x78>)
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <WavProcess_EncInit+0x7c>)
 8001378:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <WavProcess_EncInit+0x78>)
 800137c:	222c      	movs	r2, #44	@ 0x2c
 800137e:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <WavProcess_EncInit+0x78>)
 8001382:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 8001384:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <WavProcess_EncInit+0x78>)
 8001386:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001388:	08d2      	lsrs	r2, r2, #3
 800138a:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800138c:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8001390:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <WavProcess_EncInit+0x78>)
 8001392:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 8001394:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <WavProcess_EncInit+0x78>)
 800139a:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <WavProcess_EncInit+0x78>)
 800139e:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <WavProcess_EncInit+0x78>)
 80013a2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	fb12 f303 	smulbb	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <WavProcess_EncInit+0x78>)
 80013b0:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 80013b2:	4907      	ldr	r1, [pc, #28]	@ (80013d0 <WavProcess_EncInit+0x78>)
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f000 f80f 	bl	80013d8 <WavProcess_HeaderInit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <WavProcess_EncInit+0x6c>
  {
    return 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <WavProcess_EncInit+0x6e>
  }
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200044b8 	.word	0x200044b8
 80013d4:	001d4c00 	.word	0x001d4c00

080013d8 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2252      	movs	r2, #82	@ 0x52
 80013e6:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	2249      	movs	r2, #73	@ 0x49
 80013ee:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3302      	adds	r3, #2
 80013f4:	2246      	movs	r2, #70	@ 0x46
 80013f6:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3303      	adds	r3, #3
 80013fc:	2246      	movs	r2, #70	@ 0x46
 80013fe:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3305      	adds	r3, #5
 800140c:	224c      	movs	r2, #76	@ 0x4c
 800140e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3306      	adds	r3, #6
 8001414:	221d      	movs	r2, #29
 8001416:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3307      	adds	r3, #7
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3308      	adds	r3, #8
 8001424:	2257      	movs	r2, #87	@ 0x57
 8001426:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3309      	adds	r3, #9
 800142c:	2241      	movs	r2, #65	@ 0x41
 800142e:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	330a      	adds	r3, #10
 8001434:	2256      	movs	r2, #86	@ 0x56
 8001436:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	330b      	adds	r3, #11
 800143c:	2245      	movs	r2, #69	@ 0x45
 800143e:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	330c      	adds	r3, #12
 8001444:	2266      	movs	r2, #102	@ 0x66
 8001446:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	330d      	adds	r3, #13
 800144c:	226d      	movs	r2, #109	@ 0x6d
 800144e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	330e      	adds	r3, #14
 8001454:	2274      	movs	r2, #116	@ 0x74
 8001456:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	330f      	adds	r3, #15
 800145c:	2220      	movs	r2, #32
 800145e:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3310      	adds	r3, #16
 8001464:	2210      	movs	r2, #16
 8001466:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3311      	adds	r3, #17
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3312      	adds	r3, #18
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3313      	adds	r3, #19
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3314      	adds	r3, #20
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3315      	adds	r3, #21
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	8ada      	ldrh	r2, [r3, #22]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3316      	adds	r3, #22
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3317      	adds	r3, #23
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3318      	adds	r3, #24
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	0a1a      	lsrs	r2, r3, #8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3319      	adds	r3, #25
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	0c1a      	lsrs	r2, r3, #16
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	331a      	adds	r3, #26
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	0e1a      	lsrs	r2, r3, #24
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	331b      	adds	r3, #27
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	331c      	adds	r3, #28
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	0a1a      	lsrs	r2, r3, #8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	331d      	adds	r3, #29
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	0c1a      	lsrs	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	331e      	adds	r3, #30
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	0e1a      	lsrs	r2, r3, #24
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	331f      	adds	r3, #31
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	8c1a      	ldrh	r2, [r3, #32]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3320      	adds	r3, #32
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3321      	adds	r3, #33	@ 0x21
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3322      	adds	r3, #34	@ 0x22
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3323      	adds	r3, #35	@ 0x23
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3324      	adds	r3, #36	@ 0x24
 800153c:	2264      	movs	r2, #100	@ 0x64
 800153e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3325      	adds	r3, #37	@ 0x25
 8001544:	2261      	movs	r2, #97	@ 0x61
 8001546:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3326      	adds	r3, #38	@ 0x26
 800154c:	2274      	movs	r2, #116	@ 0x74
 800154e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3327      	adds	r3, #39	@ 0x27
 8001554:	2261      	movs	r2, #97	@ 0x61
 8001556:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3328      	adds	r3, #40	@ 0x28
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3329      	adds	r3, #41	@ 0x29
 8001564:	224c      	movs	r2, #76	@ 0x4c
 8001566:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	332a      	adds	r3, #42	@ 0x2a
 800156c:	221d      	movs	r2, #29
 800156e:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	332b      	adds	r3, #43	@ 0x2b
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3304      	adds	r3, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0a1a      	lsrs	r2, r3, #8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3305      	adds	r3, #5
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	0c1a      	lsrs	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3306      	adds	r3, #6
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	0e1a      	lsrs	r2, r3, #24
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3307      	adds	r3, #7
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	3b2c      	subs	r3, #44	@ 0x2c
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015d0:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3328      	adds	r3, #40	@ 0x28
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	0a1a      	lsrs	r2, r3, #8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3329      	adds	r3, #41	@ 0x29
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1a      	lsrs	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	332a      	adds	r3, #42	@ 0x2a
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <WavProcess_HeaderUpdate+0x90>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	0e1a      	lsrs	r2, r3, #24
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	332b      	adds	r3, #43	@ 0x2b
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200044e4 	.word	0x200044e4

0800161c <message>:

void message(const char *format, ...) {
 800161c:	b40f      	push	{r0, r1, r2, r3}
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 8001624:	2064      	movs	r0, #100	@ 0x64
 8001626:	f009 fa75 	bl	800ab14 <malloc>
 800162a:	4603      	mov	r3, r0
 800162c:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00e      	beq.n	8001652 <message+0x36>
        va_list args;
        va_start(args, format);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	2164      	movs	r1, #100	@ 0x64
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f009 fbf5 	bl	800ae30 <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7fe ff92 	bl	8000570 <Send_Uart>
        free(buf);      // Free the allocated memory
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f009 fa69 	bl	800ab24 <free>
    }
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800165c:	b004      	add	sp, #16
 800165e:	4770      	bx	lr

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <Error_Handler+0x8>

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <HAL_I2C_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12c      	bne.n	8001738 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_I2C_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_I2C_MspInit+0x88>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800170c:	2304      	movs	r3, #4
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	480c      	ldr	r0, [pc, #48]	@ (8001748 <HAL_I2C_MspInit+0x8c>)
 8001718:	f001 f896 	bl	8002848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_I2C_MspInit+0x88>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_I2C_MspInit+0x88>)
 8001726:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800172a:	6413      	str	r3, [r2, #64]	@ 0x40
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_I2C_MspInit+0x88>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	@ 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40005800 	.word	0x40005800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	@ 0x38
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a91      	ldr	r2, [pc, #580]	@ (80019b0 <HAL_I2S_MspInit+0x264>)
 800176a:	4293      	cmp	r3, r2
 800176c:	f040 808c 	bne.w	8001888 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	4b8f      	ldr	r3, [pc, #572]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	4a8e      	ldr	r2, [pc, #568]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001780:	4b8c      	ldr	r3, [pc, #560]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	4b88      	ldr	r3, [pc, #544]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	4a87      	ldr	r2, [pc, #540]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6313      	str	r3, [r2, #48]	@ 0x30
 800179c:	4b85      	ldr	r3, [pc, #532]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	4b81      	ldr	r3, [pc, #516]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	4a80      	ldr	r2, [pc, #512]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b8:	4b7e      	ldr	r3, [pc, #504]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c4:	2308      	movs	r3, #8
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d4:	2305      	movs	r3, #5
 80017d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	4876      	ldr	r0, [pc, #472]	@ (80019b8 <HAL_I2S_MspInit+0x26c>)
 80017e0:	f001 f832 	bl	8002848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017e4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f6:	2305      	movs	r3, #5
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	486e      	ldr	r0, [pc, #440]	@ (80019bc <HAL_I2S_MspInit+0x270>)
 8001802:	f001 f821 	bl	8002848 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001806:	4b6e      	ldr	r3, [pc, #440]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001808:	4a6e      	ldr	r2, [pc, #440]	@ (80019c4 <HAL_I2S_MspInit+0x278>)
 800180a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800180c:	4b6c      	ldr	r3, [pc, #432]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001812:	4b6b      	ldr	r3, [pc, #428]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001818:	4b69      	ldr	r3, [pc, #420]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800181e:	4b68      	ldr	r3, [pc, #416]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001820:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001824:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001828:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800182c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182e:	4b64      	ldr	r3, [pc, #400]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001834:	4b62      	ldr	r3, [pc, #392]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001836:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800183a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800183c:	4b60      	ldr	r3, [pc, #384]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001842:	4b5f      	ldr	r3, [pc, #380]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001844:	2204      	movs	r2, #4
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001848:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 800184a:	2203      	movs	r2, #3
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800184e:	4b5c      	ldr	r3, [pc, #368]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001850:	2200      	movs	r2, #0
 8001852:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001854:	4b5a      	ldr	r3, [pc, #360]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001856:	2200      	movs	r2, #0
 8001858:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800185a:	4859      	ldr	r0, [pc, #356]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 800185c:	f000 fc14 	bl	8002088 <HAL_DMA_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 8001866:	f7ff fefb 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a54      	ldr	r2, [pc, #336]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 800186e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001870:	4a53      	ldr	r2, [pc, #332]	@ (80019c0 <HAL_I2S_MspInit+0x274>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2024      	movs	r0, #36	@ 0x24
 800187c:	f000 fbcd 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001880:	2024      	movs	r0, #36	@ 0x24
 8001882:	f000 fbe6 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001886:	e08f      	b.n	80019a8 <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4e      	ldr	r2, [pc, #312]	@ (80019c8 <HAL_I2S_MspInit+0x27c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	f040 808a 	bne.w	80019a8 <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	4b46      	ldr	r3, [pc, #280]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	4a45      	ldr	r2, [pc, #276]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 800189e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a4:	4b43      	ldr	r3, [pc, #268]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	4a3e      	ldr	r2, [pc, #248]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c0:	4b3c      	ldr	r3, [pc, #240]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	4a37      	ldr	r2, [pc, #220]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	6313      	str	r3, [r2, #48]	@ 0x30
 80018dc:	4b35      	ldr	r3, [pc, #212]	@ (80019b4 <HAL_I2S_MspInit+0x268>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e8:	2310      	movs	r3, #16
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018f8:	2306      	movs	r3, #6
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4832      	ldr	r0, [pc, #200]	@ (80019cc <HAL_I2S_MspInit+0x280>)
 8001904:	f000 ffa0 	bl	8002848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001908:	2328      	movs	r3, #40	@ 0x28
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001918:	2306      	movs	r3, #6
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4826      	ldr	r0, [pc, #152]	@ (80019bc <HAL_I2S_MspInit+0x270>)
 8001924:	f000 ff90 	bl	8002848 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001928:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 800192a:	4a2a      	ldr	r2, [pc, #168]	@ (80019d4 <HAL_I2S_MspInit+0x288>)
 800192c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001934:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001946:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 800194a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800194e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001966:	2204      	movs	r2, #4
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 800196c:	2203      	movs	r2, #3
 800196e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001976:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800197c:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 800197e:	f000 fb83 	bl	8002088 <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_I2S_MspInit+0x240>
      Error_Handler();
 8001988:	f7ff fe6a 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001990:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001992:	4a0f      	ldr	r2, [pc, #60]	@ (80019d0 <HAL_I2S_MspInit+0x284>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2033      	movs	r0, #51	@ 0x33
 800199e:	f000 fb3c 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80019a2:	2033      	movs	r0, #51	@ 0x33
 80019a4:	f000 fb55 	bl	8002052 <HAL_NVIC_EnableIRQ>
}
 80019a8:	bf00      	nop
 80019aa:	3738      	adds	r7, #56	@ 0x38
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40003800 	.word	0x40003800
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020400 	.word	0x40020400
 80019c0:	20000184 	.word	0x20000184
 80019c4:	40026058 	.word	0x40026058
 80019c8:	40003c00 	.word	0x40003c00
 80019cc:	40020000 	.word	0x40020000
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	40026010 	.word	0x40026010

080019d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a28      	ldr	r2, [pc, #160]	@ (8001a98 <HAL_SD_MspInit+0xc0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d14a      	bne.n	8001a90 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	4a26      	ldr	r2, [pc, #152]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <HAL_SD_MspInit+0xc4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001a4e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a60:	230c      	movs	r3, #12
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <HAL_SD_MspInit+0xc8>)
 8001a6c:	f000 feec 	bl	8002848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a70:	2304      	movs	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a80:	230c      	movs	r3, #12
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <HAL_SD_MspInit+0xcc>)
 8001a8c:	f000 fedc 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	@ 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020c00 	.word	0x40020c00

08001aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_UART_MspInit+0xe8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12c      	bne.n	8001b24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b02:	230c      	movs	r3, #12
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b12:	2307      	movs	r3, #7
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481e      	ldr	r0, [pc, #120]	@ (8001b98 <HAL_UART_MspInit+0xf0>)
 8001b1e:	f000 fe93 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b22:	e031      	b.n	8001b88 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <HAL_UART_MspInit+0xf4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12c      	bne.n	8001b88 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_UART_MspInit+0xec>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	@ (8001ba0 <HAL_UART_MspInit+0xf8>)
 8001b84:	f000 fe60 	bl	8002848 <HAL_GPIO_Init>
}
 8001b88:	bf00      	nop
 8001b8a:	3730      	adds	r7, #48	@ 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40004800 	.word	0x40004800
 8001ba0:	40020c00 	.word	0x40020c00

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f8ef 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <DMA1_Stream0_IRQHandler+0x10>)
 8001c0a:	f000 fbb3 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001e4 	.word	0x200001e4

08001c18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Stream3_IRQHandler+0x10>)
 8001c1e:	f000 fba9 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000184 	.word	0x20000184

08001c2c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <SPI2_IRQHandler+0x10>)
 8001c32:	f002 fc83 	bl	800453c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200000f4 	.word	0x200000f4

08001c40 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <SPI3_IRQHandler+0x10>)
 8001c46:	f002 fc79 	bl	800453c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000013c 	.word	0x2000013c

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f009 f8fa 	bl	800ae7c <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20020000 	.word	0x20020000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	2000451c 	.word	0x2000451c
 8001cbc:	200046a8 	.word	0x200046a8

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce8:	480d      	ldr	r0, [pc, #52]	@ (8001d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cea:	490e      	ldr	r1, [pc, #56]	@ (8001d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cec:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d00:	4c0b      	ldr	r4, [pc, #44]	@ (8001d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d0e:	f7ff ffd7 	bl	8001cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f009 f8b9 	bl	800ae88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7fe fc41 	bl	800059c <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d28:	0800bf58 	.word	0x0800bf58
  ldr r2, =_sbss
 8001d2c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d30:	200046a8 	.word	0x200046a8

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f94f 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fc7e 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f967 	bl	800206e <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f92f 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000001c 	.word	0x2000001c
 8001dd4:	20000024 	.word	0x20000024
 8001dd8:	20000020 	.word	0x20000020

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000024 	.word	0x20000024
 8001e00:	20004520 	.word	0x20004520

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20004520 	.word	0x20004520

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000024 	.word	0x20000024

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	@ (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff29 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff3e 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff8e 	bl	8001f58 <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5d 	bl	8001f04 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff31 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa2 	bl	8001fc0 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff feb6 	bl	8001e04 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e099      	b.n	80021d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c4:	e00f      	b.n	80020e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c6:	f7ff fe9d 	bl	8001e04 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d908      	bls.n	80020e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2203      	movs	r2, #3
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e078      	b.n	80021d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e8      	bne.n	80020c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4b38      	ldr	r3, [pc, #224]	@ (80021e0 <HAL_DMA_Init+0x158>)
 8002100:	4013      	ands	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	2b04      	cmp	r3, #4
 800213e:	d107      	bne.n	8002150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4313      	orrs	r3, r2
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f023 0307 	bic.w	r3, r3, #7
 8002166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b04      	cmp	r3, #4
 8002178:	d117      	bne.n	80021aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00e      	beq.n	80021aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fadf 	bl	8002750 <DMA_CheckFifoParam>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2240      	movs	r2, #64	@ 0x40
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021a6:	2301      	movs	r3, #1
 80021a8:	e016      	b.n	80021d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa96 	bl	80026e4 <DMA_CalcBaseAndBitshift>
 80021b8:	4603      	mov	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	223f      	movs	r2, #63	@ 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	f010803f 	.word	0xf010803f

080021e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_DMA_Start_IT+0x26>
 8002206:	2302      	movs	r3, #2
 8002208:	e040      	b.n	800228c <HAL_DMA_Start_IT+0xa8>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d12f      	bne.n	800227e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa28 	bl	8002688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	223f      	movs	r2, #63	@ 0x3f
 800223e:	409a      	lsls	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0216 	orr.w	r2, r2, #22
 8002252:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e005      	b.n	800228a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022a2:	f7ff fdaf 	bl	8001e04 <HAL_GetTick>
 80022a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d008      	beq.n	80022c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e052      	b.n	800236c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0216 	bic.w	r2, r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_DMA_Abort+0x62>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002316:	e013      	b.n	8002340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002318:	f7ff fd74 	bl	8001e04 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b05      	cmp	r3, #5
 8002324:	d90c      	bls.n	8002340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e015      	b.n	800236c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e4      	bne.n	8002318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	223f      	movs	r2, #63	@ 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002380:	4b8e      	ldr	r3, [pc, #568]	@ (80025bc <HAL_DMA_IRQHandler+0x248>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a8e      	ldr	r2, [pc, #568]	@ (80025c0 <HAL_DMA_IRQHandler+0x24c>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	2208      	movs	r2, #8
 80023a0:	409a      	lsls	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01a      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	2208      	movs	r2, #8
 80023ce:	409a      	lsls	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	2201      	movs	r2, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	2201      	movs	r2, #1
 8002404:	409a      	lsls	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240e:	f043 0202 	orr.w	r2, r3, #2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	2204      	movs	r2, #4
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d012      	beq.n	800244c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	2204      	movs	r2, #4
 800243a:	409a      	lsls	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	2210      	movs	r2, #16
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d043      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03c      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	2210      	movs	r2, #16
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d024      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e01f      	b.n	80024e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01b      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
 80024b4:	e016      	b.n	80024e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0208 	bic.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e8:	2220      	movs	r2, #32
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 808f 	beq.w	8002614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8087 	beq.w	8002614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	2220      	movs	r2, #32
 800250c:	409a      	lsls	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b05      	cmp	r3, #5
 800251c:	d136      	bne.n	800258c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0216 	bic.w	r2, r2, #22
 800252c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800253c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <HAL_DMA_IRQHandler+0x1da>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0208 	bic.w	r2, r2, #8
 800255c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	223f      	movs	r2, #63	@ 0x3f
 8002564:	409a      	lsls	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257e:	2b00      	cmp	r3, #0
 8002580:	d07e      	beq.n	8002680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
        }
        return;
 800258a:	e079      	b.n	8002680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01d      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d031      	beq.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e02c      	b.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
 80025ba:	bf00      	nop
 80025bc:	2000001c 	.word	0x2000001c
 80025c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d023      	beq.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e01e      	b.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10f      	bne.n	8002604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0210 	bic.w	r2, r2, #16
 80025f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	2b00      	cmp	r3, #0
 800261a:	d032      	beq.n	8002682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d022      	beq.n	800266e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	d307      	bcc.n	800265c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f2      	bne.n	8002640 <HAL_DMA_IRQHandler+0x2cc>
 800265a:	e000      	b.n	800265e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800265c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
 800267e:	e000      	b.n	8002682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002680:	bf00      	nop
    }
  }
}
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b40      	cmp	r3, #64	@ 0x40
 80026b4:	d108      	bne.n	80026c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026c6:	e007      	b.n	80026d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3b10      	subs	r3, #16
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <DMA_CalcBaseAndBitshift+0x64>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026fe:	4a13      	ldr	r2, [pc, #76]	@ (800274c <DMA_CalcBaseAndBitshift+0x68>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d909      	bls.n	8002726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	1d1a      	adds	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	659a      	str	r2, [r3, #88]	@ 0x58
 8002724:	e007      	b.n	8002736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	aaaaaaab 	.word	0xaaaaaaab
 800274c:	0800bd78 	.word	0x0800bd78

08002750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11f      	bne.n	80027aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d856      	bhi.n	800281e <DMA_CheckFifoParam+0xce>
 8002770:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <DMA_CheckFifoParam+0x28>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	08002789 	.word	0x08002789
 800277c:	0800279b 	.word	0x0800279b
 8002780:	08002789 	.word	0x08002789
 8002784:	0800281f 	.word	0x0800281f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d046      	beq.n	8002822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e043      	b.n	8002822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027a2:	d140      	bne.n	8002826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a8:	e03d      	b.n	8002826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b2:	d121      	bne.n	80027f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d837      	bhi.n	800282a <DMA_CheckFifoParam+0xda>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <DMA_CheckFifoParam+0x70>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d7 	.word	0x080027d7
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	080027e9 	.word	0x080027e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e030      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d025      	beq.n	800282e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e022      	b.n	800282e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027f0:	d11f      	bne.n	8002832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027f6:	e01c      	b.n	8002832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d903      	bls.n	8002806 <DMA_CheckFifoParam+0xb6>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d003      	beq.n	800280c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002804:	e018      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      break;
 800280a:	e015      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e00b      	b.n	8002836 <DMA_CheckFifoParam+0xe6>
      break;
 800281e:	bf00      	nop
 8002820:	e00a      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e008      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e006      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e004      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;   
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002836:	bf00      	nop
    }
  } 
  
  return status; 
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	@ 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e16b      	b.n	8002b3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 815a 	bne.w	8002b36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	2b02      	cmp	r3, #2
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b03      	cmp	r3, #3
 8002906:	d017      	beq.n	8002938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d123      	bne.n	800298c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80b4 	beq.w	8002b36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b60      	ldr	r3, [pc, #384]	@ (8002b54 <HAL_GPIO_Init+0x30c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b54 <HAL_GPIO_Init+0x30c>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029de:	4b5d      	ldr	r3, [pc, #372]	@ (8002b54 <HAL_GPIO_Init+0x30c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002b58 <HAL_GPIO_Init+0x310>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_GPIO_Init+0x314>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02b      	beq.n	8002a6e <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_GPIO_Init+0x318>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d025      	beq.n	8002a6a <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_GPIO_Init+0x31c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	@ (8002b68 <HAL_GPIO_Init+0x320>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x21a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4e      	ldr	r2, [pc, #312]	@ (8002b6c <HAL_GPIO_Init+0x324>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x216>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4d      	ldr	r2, [pc, #308]	@ (8002b70 <HAL_GPIO_Init+0x328>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x212>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4c      	ldr	r2, [pc, #304]	@ (8002b74 <HAL_GPIO_Init+0x32c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x20e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4b      	ldr	r2, [pc, #300]	@ (8002b78 <HAL_GPIO_Init+0x330>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x20a>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00e      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e00c      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a56:	2306      	movs	r3, #6
 8002a58:	e00a      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a80:	4935      	ldr	r1, [pc, #212]	@ (8002b58 <HAL_GPIO_Init+0x310>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b06:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b30:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	f67f ae90 	bls.w	8002864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40021c00 	.word	0x40021c00
 8002b7c:	40013c00 	.word	0x40013c00

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b9c:	e003      	b.n	8002ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e12b      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fd6e 	bl	80016bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	@ 0x24
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c18:	f002 fcf0 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a81      	ldr	r2, [pc, #516]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d807      	bhi.n	8002c38 <HAL_I2C_Init+0x84>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a80      	ldr	r2, [pc, #512]	@ (8002e2c <HAL_I2C_Init+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf94      	ite	ls
 8002c30:	2301      	movls	r3, #1
 8002c32:	2300      	movhi	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e006      	b.n	8002c46 <HAL_I2C_Init+0x92>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e30 <HAL_I2C_Init+0x27c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0e7      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a78      	ldr	r2, [pc, #480]	@ (8002e34 <HAL_I2C_Init+0x280>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9b      	lsrs	r3, r3, #18
 8002c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d802      	bhi.n	8002c88 <HAL_I2C_Init+0xd4>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	e009      	b.n	8002c9c <HAL_I2C_Init+0xe8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4a69      	ldr	r2, [pc, #420]	@ (8002e38 <HAL_I2C_Init+0x284>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	495c      	ldr	r1, [pc, #368]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d819      	bhi.n	8002cf0 <HAL_I2C_Init+0x13c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e59      	subs	r1, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_I2C_Init+0x138>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e59      	subs	r1, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	e051      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e04f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d111      	bne.n	8002d1c <HAL_I2C_Init+0x168>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e012      	b.n	8002d42 <HAL_I2C_Init+0x18e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x196>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e022      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <HAL_I2C_Init+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e58      	subs	r0, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	440b      	add	r3, r1
 8002d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d6e:	e00f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6911      	ldr	r1, [r2, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	001e847f 	.word	0x001e847f
 8002e30:	003d08ff 	.word	0x003d08ff
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e56:	f7fe ffd5 	bl	8001e04 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	f040 80d9 	bne.w	800301c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2319      	movs	r3, #25
 8002e70:	2201      	movs	r2, #1
 8002e72:	496d      	ldr	r1, [pc, #436]	@ (8003028 <HAL_I2C_Mem_Write+0x1ec>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fdad 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0cc      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2C_Mem_Write+0x56>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e0c5      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d007      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2221      	movs	r2, #33	@ 0x21
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	@ 0x40
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800302c <HAL_I2C_Mem_Write+0x1f0>)
 8002ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efa:	88f8      	ldrh	r0, [r7, #6]
 8002efc:	893a      	ldrh	r2, [r7, #8]
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4603      	mov	r3, r0
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fbe4 	bl	80036d8 <I2C_RequestMemoryWrite>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d052      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e081      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fe2e 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06b      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d11b      	bne.n	8002fbc <HAL_I2C_Mem_Write+0x180>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1aa      	bne.n	8002f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fe1a 	bl	8003c02 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d107      	bne.n	8002fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e016      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	00100002 	.word	0x00100002
 800302c:	ffff0000 	.word	0xffff0000

08003030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	4603      	mov	r3, r0
 8003040:	817b      	strh	r3, [r7, #10]
 8003042:	460b      	mov	r3, r1
 8003044:	813b      	strh	r3, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800304a:	f7fe fedb 	bl	8001e04 <HAL_GetTick>
 800304e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b20      	cmp	r3, #32
 800305a:	f040 8208 	bne.w	800346e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2319      	movs	r3, #25
 8003064:	2201      	movs	r2, #1
 8003066:	497b      	ldr	r1, [pc, #492]	@ (8003254 <HAL_I2C_Mem_Read+0x224>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fcb3 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	e1fb      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_I2C_Mem_Read+0x56>
 8003082:	2302      	movs	r3, #2
 8003084:	e1f4      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d007      	beq.n	80030ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2222      	movs	r2, #34	@ 0x22
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2240      	movs	r2, #64	@ 0x40
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003258 <HAL_I2C_Mem_Read+0x228>)
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ee:	88f8      	ldrh	r0, [r7, #6]
 80030f0:	893a      	ldrh	r2, [r7, #8]
 80030f2:	8979      	ldrh	r1, [r7, #10]
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4603      	mov	r3, r0
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fb80 	bl	8003804 <I2C_RequestMemoryRead>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1b0      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e184      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003142:	2b01      	cmp	r3, #1
 8003144:	d11b      	bne.n	800317e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e164      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	2b02      	cmp	r3, #2
 8003184:	d11b      	bne.n	80031be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	e144      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031d4:	e138      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	2b03      	cmp	r3, #3
 80031dc:	f200 80f1 	bhi.w	80033c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d123      	bne.n	8003230 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fd49 	bl	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e139      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800322e:	e10b      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	2b02      	cmp	r3, #2
 8003236:	d14e      	bne.n	80032d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323e:	2200      	movs	r2, #0
 8003240:	4906      	ldr	r1, [pc, #24]	@ (800325c <HAL_I2C_Mem_Read+0x22c>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fbc6 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e10e      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
 8003252:	bf00      	nop
 8003254:	00100002 	.word	0x00100002
 8003258:	ffff0000 	.word	0xffff0000
 800325c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032d4:	e0b8      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2200      	movs	r2, #0
 80032de:	4966      	ldr	r1, [pc, #408]	@ (8003478 <HAL_I2C_Mem_Read+0x448>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fb77 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0bf      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	2200      	movs	r2, #0
 800333a:	494f      	ldr	r1, [pc, #316]	@ (8003478 <HAL_I2C_Mem_Read+0x448>)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fb49 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e091      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c0:	e042      	b.n	8003448 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fc5c 	bl	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e04c      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d118      	bne.n	8003448 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f aec2 	bne.w	80031d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3728      	adds	r7, #40	@ 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00010004 	.word	0x00010004

0800347c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	@ 0x28
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	460b      	mov	r3, r1
 800348a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7fe fcba 	bl	8001e04 <HAL_GetTick>
 8003490:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 8111 	bne.w	80036c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2319      	movs	r3, #25
 80034aa:	2201      	movs	r2, #1
 80034ac:	4988      	ldr	r1, [pc, #544]	@ (80036d0 <HAL_I2C_IsDeviceReady+0x254>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fa90 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
 80034bc:	e104      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_I2C_IsDeviceReady+0x50>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0fd      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d007      	beq.n	80034f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003500:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2224      	movs	r2, #36	@ 0x24
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a70      	ldr	r2, [pc, #448]	@ (80036d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003524:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa4e 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354c:	d103      	bne.n	8003556 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0b6      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003568:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fc4b 	bl	8001e04 <HAL_GetTick>
 800356e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800359e:	e025      	b.n	80035ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fe fc30 	bl	8001e04 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <HAL_I2C_IsDeviceReady+0x13a>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	22a0      	movs	r2, #160	@ 0xa0
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80035f6:	d005      	beq.n	8003604 <HAL_I2C_IsDeviceReady+0x188>
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_I2C_IsDeviceReady+0x188>
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0cd      	beq.n	80035a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d129      	bne.n	800366e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003628:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2319      	movs	r3, #25
 8003646:	2201      	movs	r2, #1
 8003648:	4921      	ldr	r1, [pc, #132]	@ (80036d0 <HAL_I2C_IsDeviceReady+0x254>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f9c2 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e036      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e02c      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003686:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2319      	movs	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	490f      	ldr	r1, [pc, #60]	@ (80036d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f99e 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e012      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f4ff af32 	bcc.w	8003516 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	00100002 	.word	0x00100002
 80036d4:	ffff0000 	.word	0xffff0000

080036d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2200      	movs	r2, #0
 800370a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f960 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003728:	d103      	bne.n	8003732 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e05f      	b.n	80037f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003744:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	492d      	ldr	r1, [pc, #180]	@ (8003800 <I2C_RequestMemoryWrite+0x128>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f998 	bl	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04c      	b.n	80037f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa02 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	2b04      	cmp	r3, #4
 8003788:	d107      	bne.n	800379a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003798:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e02b      	b.n	80037f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a4:	893b      	ldrh	r3, [r7, #8]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	611a      	str	r2, [r3, #16]
 80037ae:	e021      	b.n	80037f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037b0:	893b      	ldrh	r3, [r7, #8]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	6a39      	ldr	r1, [r7, #32]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f9dc 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e005      	b.n	80037f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ea:	893b      	ldrh	r3, [r7, #8]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	00010002 	.word	0x00010002

08003804 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	460b      	mov	r3, r1
 8003818:	813b      	strh	r3, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800382c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800383c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	2200      	movs	r2, #0
 8003846:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f8c2 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003864:	d103      	bne.n	800386e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0aa      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003872:	897b      	ldrh	r3, [r7, #10]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	4952      	ldr	r1, [pc, #328]	@ (80039d0 <I2C_RequestMemoryRead+0x1cc>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f8fa 	bl	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e097      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	6a39      	ldr	r1, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f964 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e076      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038e0:	893b      	ldrh	r3, [r7, #8]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	611a      	str	r2, [r3, #16]
 80038ea:	e021      	b.n	8003930 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fc:	6a39      	ldr	r1, [r7, #32]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f93e 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	2b04      	cmp	r3, #4
 8003910:	d107      	bne.n	8003922 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e050      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003926:	893b      	ldrh	r3, [r7, #8]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	6a39      	ldr	r1, [r7, #32]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f923 	bl	8003b80 <I2C_WaitOnTXEFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	2b04      	cmp	r3, #4
 8003946:	d107      	bne.n	8003958 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003956:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e035      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800396a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2200      	movs	r2, #0
 8003974:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f82b 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003992:	d103      	bne.n	800399c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e013      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039a0:	897b      	ldrh	r3, [r7, #10]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	4906      	ldr	r1, [pc, #24]	@ (80039d0 <I2C_RequestMemoryRead+0x1cc>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f863 	bl	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	00010002 	.word	0x00010002

080039d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	e025      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d021      	beq.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fe fa09 	bl	8001e04 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d116      	bne.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e023      	b.n	8003a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10d      	bne.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	e00c      	b.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d0b6      	beq.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a90:	e051      	b.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa0:	d123      	bne.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e046      	b.n	8003b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d021      	beq.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fe f987 	bl	8001e04 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e020      	b.n	8003b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10c      	bne.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bf14      	ite	ne
 8003b52:	2301      	movne	r3, #1
 8003b54:	2300      	moveq	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e00b      	b.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d18d      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8c:	e02d      	b.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f8ce 	bl	8003d30 <I2C_IsAcknowledgeFailed>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e02d      	b.n	8003bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d021      	beq.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba6:	f7fe f92d 	bl	8001e04 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d116      	bne.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf4:	2b80      	cmp	r3, #128	@ 0x80
 8003bf6:	d1ca      	bne.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c0e:	e02d      	b.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f88d 	bl	8003d30 <I2C_IsAcknowledgeFailed>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e02d      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d021      	beq.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe f8ec 	bl	8001e04 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d1ca      	bne.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c90:	e042      	b.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d119      	bne.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0210 	mvn.w	r2, #16
 8003ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e029      	b.n	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe f896 	bl	8001e04 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d1b5      	bne.n	8003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d46:	d11b      	bne.n	8003d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	f043 0204 	orr.w	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e128      	b.n	8003ff4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a90      	ldr	r2, [pc, #576]	@ (8003ffc <HAL_I2S_Init+0x26c>)
 8003dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd fcc5 	bl	800174c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dd8:	f023 030f 	bic.w	r3, r3, #15
 8003ddc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2202      	movs	r2, #2
 8003de4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d060      	beq.n	8003eb0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003df6:	2310      	movs	r3, #16
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e001      	b.n	8003e00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d802      	bhi.n	8003e0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e0e:	2001      	movs	r0, #1
 8003e10:	f001 fcfe 	bl	8005810 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e14:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1e:	d125      	bne.n	8003e6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	3305      	adds	r3, #5
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e01f      	b.n	8003e8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	3305      	adds	r3, #5
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	e00e      	b.n	8003e8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	3305      	adds	r3, #5
 8003e88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004000 <HAL_I2S_Init+0x270>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e003      	b.n	8003eb8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d902      	bls.n	8003ec4 <HAL_I2S_Init+0x134>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2bff      	cmp	r3, #255	@ 0xff
 8003ec2:	d907      	bls.n	8003ed4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec8:	f043 0210 	orr.w	r2, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e08f      	b.n	8003ff4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	ea42 0103 	orr.w	r1, r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ef2:	f023 030f 	bic.w	r3, r3, #15
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6851      	ldr	r1, [r2, #4]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6892      	ldr	r2, [r2, #8]
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68d2      	ldr	r2, [r2, #12]
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6992      	ldr	r2, [r2, #24]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d161      	bne.n	8003fe4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a38      	ldr	r2, [pc, #224]	@ (8004004 <HAL_I2S_Init+0x274>)
 8003f24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a37      	ldr	r2, [pc, #220]	@ (8004008 <HAL_I2S_Init+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_I2S_Init+0x1a4>
 8003f30:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_I2S_Init+0x27c>)
 8003f32:	e001      	b.n	8003f38 <HAL_I2S_Init+0x1a8>
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	4932      	ldr	r1, [pc, #200]	@ (8004008 <HAL_I2S_Init+0x278>)
 8003f40:	428a      	cmp	r2, r1
 8003f42:	d101      	bne.n	8003f48 <HAL_I2S_Init+0x1b8>
 8003f44:	4a31      	ldr	r2, [pc, #196]	@ (800400c <HAL_I2S_Init+0x27c>)
 8003f46:	e001      	b.n	8003f4c <HAL_I2S_Init+0x1bc>
 8003f48:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f4c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f50:	f023 030f 	bic.w	r3, r3, #15
 8003f54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004008 <HAL_I2S_Init+0x278>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2S_Init+0x1d4>
 8003f60:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_I2S_Init+0x27c>)
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x1d8>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f68:	2202      	movs	r2, #2
 8003f6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <HAL_I2S_Init+0x278>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_I2S_Init+0x1ea>
 8003f76:	4b25      	ldr	r3, [pc, #148]	@ (800400c <HAL_I2S_Init+0x27c>)
 8003f78:	e001      	b.n	8003f7e <HAL_I2S_Init+0x1ee>
 8003f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f8a:	d003      	beq.n	8003f94 <HAL_I2S_Init+0x204>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	e001      	b.n	8003fa0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	897b      	ldrh	r3, [r7, #10]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fcc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8004008 <HAL_I2S_Init+0x278>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <HAL_I2S_Init+0x24c>
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <HAL_I2S_Init+0x27c>)
 8003fda:	e001      	b.n	8003fe0 <HAL_I2S_Init+0x250>
 8003fdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe0:	897a      	ldrh	r2, [r7, #10]
 8003fe2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	080046e1 	.word	0x080046e1
 8004000:	cccccccd 	.word	0xcccccccd
 8004004:	08004869 	.word	0x08004869
 8004008:	40003800 	.word	0x40003800
 800400c:	40003400 	.word	0x40003400

08004010 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_I2S_Receive_DMA+0x1a>
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0a1      	b.n	8004172 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2S_Receive_DMA+0x2e>
 800403a:	2302      	movs	r3, #2
 800403c:	e099      	b.n	8004172 <HAL_I2S_Receive_DMA+0x162>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d005      	beq.n	800405e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	e089      	b.n	8004172 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2204      	movs	r2, #4
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d002      	beq.n	800408a <HAL_I2S_Receive_DMA+0x7a>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d10a      	bne.n	80040a0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800409e:	e005      	b.n	80040ac <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	4a32      	ldr	r2, [pc, #200]	@ (800417c <HAL_I2S_Receive_DMA+0x16c>)
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	4a31      	ldr	r2, [pc, #196]	@ (8004180 <HAL_I2S_Receive_DMA+0x170>)
 80040ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c0:	4a30      	ldr	r2, [pc, #192]	@ (8004184 <HAL_I2S_Receive_DMA+0x174>)
 80040c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d2:	d10a      	bne.n	80040ea <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	4619      	mov	r1, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004100:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004102:	f7fe f86f 	bl	80021e4 <HAL_DMA_Start_IT>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00f      	beq.n	800412c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004110:	f043 0208 	orr.w	r2, r3, #8
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e022      	b.n	8004172 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004148:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	080045bf 	.word	0x080045bf
 8004180:	0800457d 	.word	0x0800457d
 8004184:	080045db 	.word	0x080045db

08004188 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419c:	d004      	beq.n	80041a8 <HAL_I2S_DMAStop+0x20>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 80d1 	bne.w	800434a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00f      	beq.n	80041d0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe f86d 	bl	8002294 <HAL_DMA_Abort>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c4:	f043 0208 	orr.w	r2, r3, #8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80041d0:	2364      	movs	r3, #100	@ 0x64
 80041d2:	2201      	movs	r2, #1
 80041d4:	2102      	movs	r1, #2
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fb0c 	bl	80047f4 <I2S_WaitFlagStateUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80041fa:	2364      	movs	r3, #100	@ 0x64
 80041fc:	2200      	movs	r2, #0
 80041fe:	2180      	movs	r1, #128	@ 0x80
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 faf7 	bl	80047f4 <I2S_WaitFlagStateUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00b      	beq.n	8004224 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004232:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0202 	bic.w	r2, r2, #2
 8004250:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b05      	cmp	r3, #5
 800425c:	f040 8165 	bne.w	800452a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00f      	beq.n	8004288 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe f811 	bl	8002294 <HAL_DMA_Abort>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427c:	f043 0208 	orr.w	r2, r3, #8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a8a      	ldr	r2, [pc, #552]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_I2S_DMAStop+0x10e>
 8004292:	4b8a      	ldr	r3, [pc, #552]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 8004294:	e001      	b.n	800429a <HAL_I2S_DMAStop+0x112>
 8004296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4985      	ldr	r1, [pc, #532]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 80042a2:	428b      	cmp	r3, r1
 80042a4:	d101      	bne.n	80042aa <HAL_I2S_DMAStop+0x122>
 80042a6:	4b85      	ldr	r3, [pc, #532]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80042a8:	e001      	b.n	80042ae <HAL_I2S_DMAStop+0x126>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042b2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7e      	ldr	r2, [pc, #504]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_I2S_DMAStop+0x13e>
 80042c2:	4b7e      	ldr	r3, [pc, #504]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80042c4:	e001      	b.n	80042ca <HAL_I2S_DMAStop+0x142>
 80042c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a79      	ldr	r2, [pc, #484]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_I2S_DMAStop+0x154>
 80042d8:	4b78      	ldr	r3, [pc, #480]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80042da:	e001      	b.n	80042e0 <HAL_I2S_DMAStop+0x158>
 80042dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a73      	ldr	r2, [pc, #460]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <HAL_I2S_DMAStop+0x16c>
 80042f0:	4b72      	ldr	r3, [pc, #456]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80042f2:	e001      	b.n	80042f8 <HAL_I2S_DMAStop+0x170>
 80042f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	496e      	ldr	r1, [pc, #440]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 8004300:	428b      	cmp	r3, r1
 8004302:	d101      	bne.n	8004308 <HAL_I2S_DMAStop+0x180>
 8004304:	4b6d      	ldr	r3, [pc, #436]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 8004306:	e001      	b.n	800430c <HAL_I2S_DMAStop+0x184>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10c      	bne.n	8004334 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004332:	e0fa      	b.n	800452a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a5f      	ldr	r2, [pc, #380]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <HAL_I2S_DMAStop+0x1ba>
 800433e:	4b5f      	ldr	r3, [pc, #380]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 8004340:	e001      	b.n	8004346 <HAL_I2S_DMAStop+0x1be>
 8004342:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004346:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004348:	e0ef      	b.n	800452a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004352:	d005      	beq.n	8004360 <HAL_I2S_DMAStop+0x1d8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435c:	f040 80e5 	bne.w	800452a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00f      	beq.n	8004388 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436c:	4618      	mov	r0, r3
 800436e:	f7fd ff91 	bl	8002294 <HAL_DMA_Abort>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	f043 0208 	orr.w	r2, r3, #8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b05      	cmp	r3, #5
 8004392:	f040 809a 	bne.w	80044ca <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00f      	beq.n	80043be <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd ff76 	bl	8002294 <HAL_DMA_Abort>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	f043 0208 	orr.w	r2, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80043be:	f7fd fd21 	bl	8001e04 <HAL_GetTick>
 80043c2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80043c4:	e012      	b.n	80043ec <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80043c6:	f7fd fd1d 	bl	8001e04 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b64      	cmp	r3, #100	@ 0x64
 80043d2:	d90b      	bls.n	80043ec <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a31      	ldr	r2, [pc, #196]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d101      	bne.n	80043fa <HAL_I2S_DMAStop+0x272>
 80043f6:	4b31      	ldr	r3, [pc, #196]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80043f8:	e001      	b.n	80043fe <HAL_I2S_DMAStop+0x276>
 80043fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d1de      	bne.n	80043c6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004408:	e012      	b.n	8004430 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800440a:	f7fd fcfb 	bl	8001e04 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b64      	cmp	r3, #100	@ 0x64
 8004416:	d90b      	bls.n	8004430 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441c:	f043 0201 	orr.w	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <HAL_I2S_DMAStop+0x2b6>
 800443a:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 800443c:	e001      	b.n	8004442 <HAL_I2S_DMAStop+0x2ba>
 800443e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	2b80      	cmp	r3, #128	@ 0x80
 800444a:	d0de      	beq.n	800440a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_I2S_DMAStop+0x2d2>
 8004456:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 8004458:	e001      	b.n	800445e <HAL_I2S_DMAStop+0x2d6>
 800445a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4914      	ldr	r1, [pc, #80]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 8004466:	428b      	cmp	r3, r1
 8004468:	d101      	bne.n	800446e <HAL_I2S_DMAStop+0x2e6>
 800446a:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 800446c:	e001      	b.n	8004472 <HAL_I2S_DMAStop+0x2ea>
 800446e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004476:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_I2S_DMAStop+0x302>
 8004486:	4b0d      	ldr	r3, [pc, #52]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 8004488:	e001      	b.n	800448e <HAL_I2S_DMAStop+0x306>
 800448a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a07      	ldr	r2, [pc, #28]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_I2S_DMAStop+0x31a>
 800449e:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80044a0:	e001      	b.n	80044a6 <HAL_I2S_DMAStop+0x31e>
 80044a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4902      	ldr	r1, [pc, #8]	@ (80044b8 <HAL_I2S_DMAStop+0x330>)
 80044ae:	428b      	cmp	r3, r1
 80044b0:	d106      	bne.n	80044c0 <HAL_I2S_DMAStop+0x338>
 80044b2:	4b02      	ldr	r3, [pc, #8]	@ (80044bc <HAL_I2S_DMAStop+0x334>)
 80044b4:	e006      	b.n	80044c4 <HAL_I2S_DMAStop+0x33c>
 80044b6:	bf00      	nop
 80044b8:	40003800 	.word	0x40003800
 80044bc:	40003400 	.word	0x40003400
 80044c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044c4:	f022 0202 	bic.w	r2, r2, #2
 80044c8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004508:	d10c      	bne.n	8004524 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e002      	b.n	800452a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8004532:	7ffb      	ldrb	r3, [r7, #31]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10e      	bne.n	80045b0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7fc fc4d 	bl	8000e50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7fc fc8f 	bl	8000ef0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0203 	bic.w	r2, r2, #3
 80045f6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f043 0208 	orr.w	r2, r3, #8
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff ffa5 	bl	8004568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	1c9a      	adds	r2, r3, #2
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10e      	bne.n	800467a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800466a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff6d 	bl	8004554 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	b292      	uxth	r2, r2
 8004696:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	1c9a      	adds	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fbbc 	bl	8000e50 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d13a      	bne.n	8004772 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d109      	bne.n	800471a <I2S_IRQHandler+0x3a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	d102      	bne.n	800471a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ffb4 	bl	8004682 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d126      	bne.n	8004772 <I2S_IRQHandler+0x92>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b20      	cmp	r3, #32
 8004730:	d11f      	bne.n	8004772 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004740:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	f043 0202 	orr.w	r2, r3, #2
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fefb 	bl	8004568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d136      	bne.n	80047ec <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d109      	bne.n	800479c <I2S_IRQHandler+0xbc>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b80      	cmp	r3, #128	@ 0x80
 8004794:	d102      	bne.n	800479c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff ff45 	bl	8004626 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d122      	bne.n	80047ec <I2S_IRQHandler+0x10c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d11b      	bne.n	80047ec <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047c2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff febe 	bl	8004568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004804:	f7fd fafe 	bl	8001e04 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800480a:	e018      	b.n	800483e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d014      	beq.n	800483e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004814:	f7fd faf6 	bl	8001e04 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d902      	bls.n	800482a <I2S_WaitFlagStateUntilTimeout+0x36>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e00f      	b.n	800485e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	429a      	cmp	r2, r3
 800485a:	d1d7      	bne.n	800480c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a92      	ldr	r2, [pc, #584]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004882:	4b92      	ldr	r3, [pc, #584]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004884:	e001      	b.n	800488a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004886:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a8b      	ldr	r2, [pc, #556]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80048a0:	4b8a      	ldr	r3, [pc, #552]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a2:	e001      	b.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80048a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b4:	d004      	beq.n	80048c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 8099 	bne.w	80049f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d107      	bne.n	80048da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f925 	bl	8004b24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9c8 	bl	8004c84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d13a      	bne.n	8004974 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d035      	beq.n	8004974 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004912:	4b6e      	ldr	r3, [pc, #440]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004914:	e001      	b.n	800491a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004916:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4969      	ldr	r1, [pc, #420]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004922:	428b      	cmp	r3, r1
 8004924:	d101      	bne.n	800492a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004926:	4b69      	ldr	r3, [pc, #420]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004928:	e001      	b.n	800492e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800492a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800492e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004932:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004942:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0202 	orr.w	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fdfa 	bl	8004568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	f040 80c3 	bne.w	8004b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80bd 	beq.w	8004b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800499a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a49      	ldr	r2, [pc, #292]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d101      	bne.n	80049aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80049a6:	4b49      	ldr	r3, [pc, #292]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049a8:	e001      	b.n	80049ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80049aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4944      	ldr	r1, [pc, #272]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049b6:	428b      	cmp	r3, r1
 80049b8:	d101      	bne.n	80049be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049bc:	e001      	b.n	80049c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fdbc 	bl	8004568 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049f0:	e089      	b.n	8004b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d107      	bne.n	8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8be 	bl	8004b88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d107      	bne.n	8004a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8fd 	bl	8004c20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d12f      	bne.n	8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02a      	beq.n	8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a54:	4b1d      	ldr	r3, [pc, #116]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a56:	e001      	b.n	8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4919      	ldr	r1, [pc, #100]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a64:	428b      	cmp	r3, r1
 8004a66:	d101      	bne.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a68:	4b18      	ldr	r3, [pc, #96]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a6a:	e001      	b.n	8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f043 0202 	orr.w	r2, r3, #2
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fd6c 	bl	8004568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d136      	bne.n	8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d031      	beq.n	8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004aae:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ab0:	e001      	b.n	8004ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004ab2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4902      	ldr	r1, [pc, #8]	@ (8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004abe:	428b      	cmp	r3, r1
 8004ac0:	d106      	bne.n	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004ac2:	4b02      	ldr	r3, [pc, #8]	@ (8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ac4:	e006      	b.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004ac6:	bf00      	nop
 8004ac8:	40003800 	.word	0x40003800
 8004acc:	40003400 	.word	0x40003400
 8004ad0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ad4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ad8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ae8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fd32 	bl	8004568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b04:	e000      	b.n	8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b06:	bf00      	nop
}
 8004b08:	bf00      	nop
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	1c99      	adds	r1, r3, #2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b36:	881a      	ldrh	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d113      	bne.n	8004b7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ffc9 	bl	8004b10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	1c99      	adds	r1, r3, #2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b9a:	8819      	ldrh	r1, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c18 <I2SEx_TxISR_I2SExt+0x90>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <I2SEx_TxISR_I2SExt+0x22>
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <I2SEx_TxISR_I2SExt+0x94>)
 8004ba8:	e001      	b.n	8004bae <I2SEx_TxISR_I2SExt+0x26>
 8004baa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bae:	460a      	mov	r2, r1
 8004bb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d121      	bne.n	8004c0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a12      	ldr	r2, [pc, #72]	@ (8004c18 <I2SEx_TxISR_I2SExt+0x90>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <I2SEx_TxISR_I2SExt+0x50>
 8004bd4:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <I2SEx_TxISR_I2SExt+0x94>)
 8004bd6:	e001      	b.n	8004bdc <I2SEx_TxISR_I2SExt+0x54>
 8004bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	490d      	ldr	r1, [pc, #52]	@ (8004c18 <I2SEx_TxISR_I2SExt+0x90>)
 8004be4:	428b      	cmp	r3, r1
 8004be6:	d101      	bne.n	8004bec <I2SEx_TxISR_I2SExt+0x64>
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <I2SEx_TxISR_I2SExt+0x94>)
 8004bea:	e001      	b.n	8004bf0 <I2SEx_TxISR_I2SExt+0x68>
 8004bec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bf0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bf4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff81 	bl	8004b10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40003800 	.word	0x40003800
 8004c1c:	40003400 	.word	0x40003400

08004c20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68d8      	ldr	r0, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	1c99      	adds	r1, r3, #2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c38:	b282      	uxth	r2, r0
 8004c3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d113      	bne.n	8004c7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ff4a 	bl	8004b10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a20      	ldr	r2, [pc, #128]	@ (8004d14 <I2SEx_RxISR_I2SExt+0x90>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <I2SEx_RxISR_I2SExt+0x16>
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <I2SEx_RxISR_I2SExt+0x94>)
 8004c98:	e001      	b.n	8004c9e <I2SEx_RxISR_I2SExt+0x1a>
 8004c9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c9e:	68d8      	ldr	r0, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	1c99      	adds	r1, r3, #2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004caa:	b282      	uxth	r2, r0
 8004cac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d121      	bne.n	8004d0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a12      	ldr	r2, [pc, #72]	@ (8004d14 <I2SEx_RxISR_I2SExt+0x90>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <I2SEx_RxISR_I2SExt+0x50>
 8004cd0:	4b11      	ldr	r3, [pc, #68]	@ (8004d18 <I2SEx_RxISR_I2SExt+0x94>)
 8004cd2:	e001      	b.n	8004cd8 <I2SEx_RxISR_I2SExt+0x54>
 8004cd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <I2SEx_RxISR_I2SExt+0x90>)
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d101      	bne.n	8004ce8 <I2SEx_RxISR_I2SExt+0x64>
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <I2SEx_RxISR_I2SExt+0x94>)
 8004ce6:	e001      	b.n	8004cec <I2SEx_RxISR_I2SExt+0x68>
 8004ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cf0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff03 	bl	8004b10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40003800 	.word	0x40003800
 8004d18:	40003400 	.word	0x40003400

08004d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e267      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d075      	beq.n	8004e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d3a:	4b88      	ldr	r3, [pc, #544]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d00c      	beq.n	8004d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d46:	4b85      	ldr	r3, [pc, #532]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d112      	bne.n	8004d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d52:	4b82      	ldr	r3, [pc, #520]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d5e:	d10b      	bne.n	8004d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	4b7e      	ldr	r3, [pc, #504]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d05b      	beq.n	8004e24 <HAL_RCC_OscConfig+0x108>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d157      	bne.n	8004e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e242      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d80:	d106      	bne.n	8004d90 <HAL_RCC_OscConfig+0x74>
 8004d82:	4b76      	ldr	r3, [pc, #472]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a75      	ldr	r2, [pc, #468]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e01d      	b.n	8004dcc <HAL_RCC_OscConfig+0xb0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCC_OscConfig+0x98>
 8004d9a:	4b70      	ldr	r3, [pc, #448]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6f      	ldr	r2, [pc, #444]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6c      	ldr	r2, [pc, #432]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00b      	b.n	8004dcc <HAL_RCC_OscConfig+0xb0>
 8004db4:	4b69      	ldr	r3, [pc, #420]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a68      	ldr	r2, [pc, #416]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b66      	ldr	r3, [pc, #408]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a65      	ldr	r2, [pc, #404]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d013      	beq.n	8004dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fd f816 	bl	8001e04 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ddc:	f7fd f812 	bl	8001e04 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	@ 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e207      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dee:	4b5b      	ldr	r3, [pc, #364]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0xc0>
 8004dfa:	e014      	b.n	8004e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fd f802 	bl	8001e04 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e04:	f7fc fffe 	bl	8001e04 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	@ 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1f3      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e16:	4b51      	ldr	r3, [pc, #324]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0xe8>
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d063      	beq.n	8004efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e32:	4b4a      	ldr	r3, [pc, #296]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b47      	ldr	r3, [pc, #284]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d11c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4a:	4b44      	ldr	r3, [pc, #272]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d116      	bne.n	8004e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e56:	4b41      	ldr	r3, [pc, #260]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_RCC_OscConfig+0x152>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e1c7      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4937      	ldr	r1, [pc, #220]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	e03a      	b.n	8004efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d020      	beq.n	8004ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8c:	4b34      	ldr	r3, [pc, #208]	@ (8004f60 <HAL_RCC_OscConfig+0x244>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc ffb7 	bl	8001e04 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fc ffb3 	bl	8001e04 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e1a8      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eac:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb8:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4925      	ldr	r1, [pc, #148]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]
 8004ecc:	e015      	b.n	8004efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ece:	4b24      	ldr	r3, [pc, #144]	@ (8004f60 <HAL_RCC_OscConfig+0x244>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fc ff96 	bl	8001e04 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004edc:	f7fc ff92 	bl	8001e04 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e187      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eee:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d036      	beq.n	8004f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <HAL_RCC_OscConfig+0x248>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fc ff76 	bl	8001e04 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7fc ff72 	bl	8001e04 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e167      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_OscConfig+0x240>)
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x200>
 8004f3a:	e01b      	b.n	8004f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_OscConfig+0x248>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f42:	f7fc ff5f 	bl	8001e04 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f48:	e00e      	b.n	8004f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4a:	f7fc ff5b 	bl	8001e04 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d907      	bls.n	8004f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e150      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	42470000 	.word	0x42470000
 8004f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	4b88      	ldr	r3, [pc, #544]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ea      	bne.n	8004f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8097 	beq.w	80050b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b81      	ldr	r3, [pc, #516]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	4b7d      	ldr	r3, [pc, #500]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	4a7c      	ldr	r2, [pc, #496]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	4b77      	ldr	r3, [pc, #476]	@ (8005190 <HAL_RCC_OscConfig+0x474>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fbe:	4b74      	ldr	r3, [pc, #464]	@ (8005190 <HAL_RCC_OscConfig+0x474>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a73      	ldr	r2, [pc, #460]	@ (8005190 <HAL_RCC_OscConfig+0x474>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fca:	f7fc ff1b 	bl	8001e04 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd2:	f7fc ff17 	bl	8001e04 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e10c      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8005190 <HAL_RCC_OscConfig+0x474>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x2ea>
 8004ff8:	4b64      	ldr	r3, [pc, #400]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a63      	ldr	r2, [pc, #396]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
 8005004:	e01c      	b.n	8005040 <HAL_RCC_OscConfig+0x324>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x30c>
 800500e:	4b5f      	ldr	r3, [pc, #380]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	4a5e      	ldr	r2, [pc, #376]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6713      	str	r3, [r2, #112]	@ 0x70
 800501a:	4b5c      	ldr	r3, [pc, #368]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a5b      	ldr	r2, [pc, #364]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0x324>
 8005028:	4b58      	ldr	r3, [pc, #352]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a57      	ldr	r2, [pc, #348]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
 8005034:	4b55      	ldr	r3, [pc, #340]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a54      	ldr	r2, [pc, #336]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fc fedc 	bl	8001e04 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fc fed8 	bl	8001e04 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0cb      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005066:	4b49      	ldr	r3, [pc, #292]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ee      	beq.n	8005050 <HAL_RCC_OscConfig+0x334>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005074:	f7fc fec6 	bl	8001e04 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fc fec2 	bl	8001e04 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0b5      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005092:	4b3e      	ldr	r3, [pc, #248]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ee      	bne.n	800507c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d105      	bne.n	80050b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a4:	4b39      	ldr	r3, [pc, #228]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	4a38      	ldr	r2, [pc, #224]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 80050aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80a1 	beq.w	80051fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ba:	4b34      	ldr	r3, [pc, #208]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d05c      	beq.n	8005180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d141      	bne.n	8005152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b31      	ldr	r3, [pc, #196]	@ (8005194 <HAL_RCC_OscConfig+0x478>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fc fe96 	bl	8001e04 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fc fe92 	bl	8001e04 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e087      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	4b27      	ldr	r3, [pc, #156]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	3b01      	subs	r3, #1
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	491b      	ldr	r1, [pc, #108]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_RCC_OscConfig+0x478>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7fc fe6b 	bl	8001e04 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005132:	f7fc fe67 	bl	8001e04 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e05c      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005144:	4b11      	ldr	r3, [pc, #68]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x416>
 8005150:	e054      	b.n	80051fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <HAL_RCC_OscConfig+0x478>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fc fe54 	bl	8001e04 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fc fe50 	bl	8001e04 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e045      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	4b06      	ldr	r3, [pc, #24]	@ (800518c <HAL_RCC_OscConfig+0x470>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x444>
 800517e:	e03d      	b.n	80051fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d107      	bne.n	8005198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e038      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
 800518c:	40023800 	.word	0x40023800
 8005190:	40007000 	.word	0x40007000
 8005194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <HAL_RCC_OscConfig+0x4ec>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d028      	beq.n	80051f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d121      	bne.n	80051f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d11a      	bne.n	80051f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d111      	bne.n	80051f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	3b01      	subs	r3, #1
 80051e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40023800 	.word	0x40023800

0800520c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0cc      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005220:	4b68      	ldr	r3, [pc, #416]	@ (80053c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d90c      	bls.n	8005248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522e:	4b65      	ldr	r3, [pc, #404]	@ (80053c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005236:	4b63      	ldr	r3, [pc, #396]	@ (80053c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0b8      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005260:	4b59      	ldr	r3, [pc, #356]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a58      	ldr	r2, [pc, #352]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800526a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005278:	4b53      	ldr	r3, [pc, #332]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4a52      	ldr	r2, [pc, #328]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005284:	4b50      	ldr	r3, [pc, #320]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	494d      	ldr	r1, [pc, #308]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d044      	beq.n	800532c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	4b47      	ldr	r3, [pc, #284]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d119      	bne.n	80052ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e07f      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d003      	beq.n	80052ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ca:	4b3f      	ldr	r3, [pc, #252]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e06f      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052da:	4b3b      	ldr	r3, [pc, #236]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e067      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ea:	4b37      	ldr	r3, [pc, #220]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f023 0203 	bic.w	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4934      	ldr	r1, [pc, #208]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052fc:	f7fc fd82 	bl	8001e04 <HAL_GetTick>
 8005300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	e00a      	b.n	800531a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005304:	f7fc fd7e 	bl	8001e04 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e04f      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	4b2b      	ldr	r3, [pc, #172]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 020c 	and.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	429a      	cmp	r2, r3
 800532a:	d1eb      	bne.n	8005304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b25      	ldr	r3, [pc, #148]	@ (80053c4 <HAL_RCC_ClockConfig+0x1b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d20c      	bcs.n	8005354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b20      	ldr	r3, [pc, #128]	@ (80053c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e032      	b.n	80053ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005360:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4916      	ldr	r1, [pc, #88]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800537e:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	490e      	ldr	r1, [pc, #56]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005392:	f000 f821 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 8005396:	4602      	mov	r2, r0
 8005398:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	490a      	ldr	r1, [pc, #40]	@ (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	5ccb      	ldrb	r3, [r1, r3]
 80053a6:	fa22 f303 	lsr.w	r3, r2, r3
 80053aa:	4a09      	ldr	r2, [pc, #36]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ae:	4b09      	ldr	r3, [pc, #36]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fc fce2 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40023c00 	.word	0x40023c00
 80053c8:	40023800 	.word	0x40023800
 80053cc:	0800bd60 	.word	0x0800bd60
 80053d0:	2000001c 	.word	0x2000001c
 80053d4:	20000020 	.word	0x20000020

080053d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053dc:	b094      	sub	sp, #80	@ 0x50
 80053de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e4:	2300      	movs	r3, #0
 80053e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e8:	2300      	movs	r3, #0
 80053ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053f0:	4b79      	ldr	r3, [pc, #484]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 030c 	and.w	r3, r3, #12
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d00d      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0x40>
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	f200 80e1 	bhi.w	80055c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x34>
 8005406:	2b04      	cmp	r3, #4
 8005408:	d003      	beq.n	8005412 <HAL_RCC_GetSysClockFreq+0x3a>
 800540a:	e0db      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800540c:	4b73      	ldr	r3, [pc, #460]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x204>)
 800540e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005410:	e0db      	b.n	80055ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005412:	4b73      	ldr	r3, [pc, #460]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005414:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005416:	e0d8      	b.n	80055ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005418:	4b6f      	ldr	r3, [pc, #444]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005420:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005422:	4b6d      	ldr	r3, [pc, #436]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d063      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800542e:	4b6a      	ldr	r3, [pc, #424]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	2200      	movs	r2, #0
 8005436:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005438:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800543a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005440:	633b      	str	r3, [r7, #48]	@ 0x30
 8005442:	2300      	movs	r3, #0
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
 8005446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	f04f 0000 	mov.w	r0, #0
 8005452:	f04f 0100 	mov.w	r1, #0
 8005456:	0159      	lsls	r1, r3, #5
 8005458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800545c:	0150      	lsls	r0, r2, #5
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4621      	mov	r1, r4
 8005464:	1a51      	subs	r1, r2, r1
 8005466:	6139      	str	r1, [r7, #16]
 8005468:	4629      	mov	r1, r5
 800546a:	eb63 0301 	sbc.w	r3, r3, r1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800547c:	4659      	mov	r1, fp
 800547e:	018b      	lsls	r3, r1, #6
 8005480:	4651      	mov	r1, sl
 8005482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005486:	4651      	mov	r1, sl
 8005488:	018a      	lsls	r2, r1, #6
 800548a:	4651      	mov	r1, sl
 800548c:	ebb2 0801 	subs.w	r8, r2, r1
 8005490:	4659      	mov	r1, fp
 8005492:	eb63 0901 	sbc.w	r9, r3, r1
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054aa:	4690      	mov	r8, r2
 80054ac:	4699      	mov	r9, r3
 80054ae:	4623      	mov	r3, r4
 80054b0:	eb18 0303 	adds.w	r3, r8, r3
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	462b      	mov	r3, r5
 80054b8:	eb49 0303 	adc.w	r3, r9, r3
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ca:	4629      	mov	r1, r5
 80054cc:	024b      	lsls	r3, r1, #9
 80054ce:	4621      	mov	r1, r4
 80054d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054d4:	4621      	mov	r1, r4
 80054d6:	024a      	lsls	r2, r1, #9
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054de:	2200      	movs	r2, #0
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054e8:	f7fa feca 	bl	8000280 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f4:	e058      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f6:	4b38      	ldr	r3, [pc, #224]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	099b      	lsrs	r3, r3, #6
 80054fc:	2200      	movs	r2, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	4611      	mov	r1, r2
 8005502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005506:	623b      	str	r3, [r7, #32]
 8005508:	2300      	movs	r3, #0
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
 800550c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005510:	4642      	mov	r2, r8
 8005512:	464b      	mov	r3, r9
 8005514:	f04f 0000 	mov.w	r0, #0
 8005518:	f04f 0100 	mov.w	r1, #0
 800551c:	0159      	lsls	r1, r3, #5
 800551e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005522:	0150      	lsls	r0, r2, #5
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4641      	mov	r1, r8
 800552a:	ebb2 0a01 	subs.w	sl, r2, r1
 800552e:	4649      	mov	r1, r9
 8005530:	eb63 0b01 	sbc.w	fp, r3, r1
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005548:	ebb2 040a 	subs.w	r4, r2, sl
 800554c:	eb63 050b 	sbc.w	r5, r3, fp
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	00eb      	lsls	r3, r5, #3
 800555a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800555e:	00e2      	lsls	r2, r4, #3
 8005560:	4614      	mov	r4, r2
 8005562:	461d      	mov	r5, r3
 8005564:	4643      	mov	r3, r8
 8005566:	18e3      	adds	r3, r4, r3
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	464b      	mov	r3, r9
 800556c:	eb45 0303 	adc.w	r3, r5, r3
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800557e:	4629      	mov	r1, r5
 8005580:	028b      	lsls	r3, r1, #10
 8005582:	4621      	mov	r1, r4
 8005584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005588:	4621      	mov	r1, r4
 800558a:	028a      	lsls	r2, r1, #10
 800558c:	4610      	mov	r0, r2
 800558e:	4619      	mov	r1, r3
 8005590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005592:	2200      	movs	r2, #0
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	61fa      	str	r2, [r7, #28]
 8005598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800559c:	f7fa fe70 	bl	8000280 <__aeabi_uldivmod>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4613      	mov	r3, r2
 80055a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055a8:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	3301      	adds	r3, #1
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80055b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055c2:	e002      	b.n	80055ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c4:	4b05      	ldr	r3, [pc, #20]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x204>)
 80055c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3750      	adds	r7, #80	@ 0x50
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800
 80055dc:	00f42400 	.word	0x00f42400
 80055e0:	007a1200 	.word	0x007a1200

080055e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e8:	4b03      	ldr	r3, [pc, #12]	@ (80055f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	2000001c 	.word	0x2000001c

080055fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005600:	f7ff fff0 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	@ (800561c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0a9b      	lsrs	r3, r3, #10
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4903      	ldr	r1, [pc, #12]	@ (8005620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	0800bd70 	.word	0x0800bd70

08005624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005628:	f7ff ffdc 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0b5b      	lsrs	r3, r3, #13
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4903      	ldr	r1, [pc, #12]	@ (8005648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40023800 	.word	0x40023800
 8005648:	0800bd70 	.word	0x0800bd70

0800564c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005670:	2b00      	cmp	r3, #0
 8005672:	d035      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005674:	4b62      	ldr	r3, [pc, #392]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800567a:	f7fc fbc3 	bl	8001e04 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005682:	f7fc fbbf 	bl	8001e04 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e0b0      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005694:	4b5b      	ldr	r3, [pc, #364]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1f0      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	019a      	lsls	r2, r3, #6
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	071b      	lsls	r3, r3, #28
 80056ac:	4955      	ldr	r1, [pc, #340]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056b4:	4b52      	ldr	r3, [pc, #328]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ba:	f7fc fba3 	bl	8001e04 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056c2:	f7fc fb9f 	bl	8001e04 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e090      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8083 	beq.w	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b44      	ldr	r3, [pc, #272]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	4a43      	ldr	r2, [pc, #268]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fe:	4b41      	ldr	r3, [pc, #260]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800570a:	4b3f      	ldr	r3, [pc, #252]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a3e      	ldr	r2, [pc, #248]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005716:	f7fc fb75 	bl	8001e04 <HAL_GetTick>
 800571a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800571e:	f7fc fb71 	bl	8001e04 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e062      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005730:	4b35      	ldr	r3, [pc, #212]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f0      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800573c:	4b31      	ldr	r3, [pc, #196]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005744:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	d028      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800575a:	4b2a      	ldr	r3, [pc, #168]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005762:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005764:	4b29      	ldr	r3, [pc, #164]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800576a:	4b28      	ldr	r3, [pc, #160]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005770:	4a24      	ldr	r2, [pc, #144]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005776:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d114      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005782:	f7fc fb3f 	bl	8001e04 <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005788:	e00a      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fc fb3b 	bl	8001e04 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e02a      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	4b18      	ldr	r3, [pc, #96]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ee      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057b8:	d10d      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ce:	490d      	ldr	r1, [pc, #52]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
 80057d4:	e005      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4a0a      	ldr	r2, [pc, #40]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057e0:	6093      	str	r3, [r2, #8]
 80057e2:	4b08      	ldr	r3, [pc, #32]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ee:	4905      	ldr	r1, [pc, #20]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	42470068 	.word	0x42470068
 8005804:	40023800 	.word	0x40023800
 8005808:	40007000 	.word	0x40007000
 800580c:	42470e40 	.word	0x42470e40

08005810 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d13e      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800582e:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d12f      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005844:	4b1e      	ldr	r3, [pc, #120]	@ (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005846:	617b      	str	r3, [r7, #20]
          break;
 8005848:	e02f      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800584a:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005856:	d108      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005858:	4b18      	ldr	r3, [pc, #96]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005860:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e007      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800586a:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800587a:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800587c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005880:	099b      	lsrs	r3, r3, #6
 8005882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	fb02 f303 	mul.w	r3, r2, r3
 800588c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800588e:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005894:	0f1b      	lsrs	r3, r3, #28
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]
          break;
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
          break;
 80058a8:	bf00      	nop
        }
      }
      break;
 80058aa:	bf00      	nop
    }
  }
  return frequency;
 80058ac:	697b      	ldr	r3, [r7, #20]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	00bb8000 	.word	0x00bb8000
 80058c4:	007a1200 	.word	0x007a1200
 80058c8:	00f42400 	.word	0x00f42400

080058cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e022      	b.n	8005924 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fc f871 	bl	80019d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2203      	movs	r2, #3
 80058fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f814 	bl	800592c <HAL_SD_InitCard>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e00a      	b.n	8005924 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800592c:	b5b0      	push	{r4, r5, r7, lr}
 800592e:	b08e      	sub	sp, #56	@ 0x38
 8005930:	af04      	add	r7, sp, #16
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005944:	2300      	movs	r3, #0
 8005946:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005948:	2376      	movs	r3, #118	@ 0x76
 800594a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681d      	ldr	r5, [r3, #0]
 8005950:	466c      	mov	r4, sp
 8005952:	f107 0314 	add.w	r3, r7, #20
 8005956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800595a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800595e:	f107 0308 	add.w	r3, r7, #8
 8005962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005964:	4628      	mov	r0, r5
 8005966:	f001 fb6b 	bl	8007040 <SDIO_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e04f      	b.n	8005a1c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800597c:	4b29      	ldr	r3, [pc, #164]	@ (8005a24 <HAL_SD_InitCard+0xf8>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fba3 	bl	80070d2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800598c:	4b25      	ldr	r3, [pc, #148]	@ (8005a24 <HAL_SD_InitCard+0xf8>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005992:	2002      	movs	r0, #2
 8005994:	f7fc fa42 	bl	8001e1c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fe69 	bl	8006670 <SD_PowerON>
 800599e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e02e      	b.n	8005a1c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fd88 	bl	80064d4 <SD_InitCard>
 80059c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e01b      	b.n	8005a1c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fc02 	bl	80071f6 <SDMMC_CmdBlockLength>
 80059f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <HAL_SD_InitCard+0xfc>)
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3728      	adds	r7, #40	@ 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bdb0      	pop	{r4, r5, r7, pc}
 8005a24:	422580a0 	.word	0x422580a0
 8005a28:	004005ff 	.word	0x004005ff

08005a2c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b092      	sub	sp, #72	@ 0x48
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a3a:	f7fc f9e3 	bl	8001e04 <HAL_GetTick>
 8005a3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e1bd      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	f040 81b0 	bne.w	8005dcc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	441a      	add	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d907      	bls.n	8005a90 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e1a4      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d002      	beq.n	8005aae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	025b      	lsls	r3, r3, #9
 8005aac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	025b      	lsls	r3, r3, #9
 8005ab8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005aba:	2390      	movs	r3, #144	@ 0x90
 8005abc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f107 0214 	add.w	r2, r7, #20
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 fb62 	bl	800719e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d90a      	bls.n	8005af6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fbc6 	bl	800727e <SDMMC_CmdReadMultiBlock>
 8005af2:	6478      	str	r0, [r7, #68]	@ 0x44
 8005af4:	e009      	b.n	8005b0a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fb99 	bl	800723a <SDMMC_CmdReadSingleBlock>
 8005b08:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d012      	beq.n	8005b36 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a7a      	ldr	r2, [pc, #488]	@ (8005d00 <HAL_SD_ReadBlocks+0x2d4>)
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e151      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b3a:	e061      	b.n	8005c00 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d03c      	beq.n	8005bc4 <HAL_SD_ReadBlocks+0x198>
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d039      	beq.n	8005bc4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b54:	e033      	b.n	8005bbe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 fa9b 	bl	8007096 <SDIO_ReadFIFO>
 8005b60:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b72:	3b01      	subs	r3, #1
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	3301      	adds	r3, #1
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b94:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b98:	3301      	adds	r3, #1
 8005b9a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	0e1b      	lsrs	r3, r3, #24
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bae:	3301      	adds	r3, #1
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bba:	3301      	adds	r3, #1
 8005bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d9c8      	bls.n	8005b56 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bc4:	f7fc f91e 	bl	8001e04 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d902      	bls.n	8005bda <HAL_SD_ReadBlocks+0x1ae>
 8005bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d112      	bne.n	8005c00 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a48      	ldr	r2, [pc, #288]	@ (8005d00 <HAL_SD_ReadBlocks+0x2d4>)
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0ec      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c06:	f240 332a 	movw	r3, #810	@ 0x32a
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d095      	beq.n	8005b3c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d022      	beq.n	8005c64 <HAL_SD_ReadBlocks+0x238>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d91f      	bls.n	8005c64 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d01b      	beq.n	8005c64 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 fb8b 	bl	800734c <SDMMC_CmdStopTransfer>
 8005c36:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d012      	beq.n	8005c64 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2f      	ldr	r2, [pc, #188]	@ (8005d00 <HAL_SD_ReadBlocks+0x2d4>)
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0ba      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a22      	ldr	r2, [pc, #136]	@ (8005d00 <HAL_SD_ReadBlocks+0x2d4>)
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	f043 0208 	orr.w	r2, r3, #8
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0a0      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d012      	beq.n	8005ccc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <HAL_SD_ReadBlocks+0x2d4>)
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb2:	f043 0202 	orr.w	r2, r3, #2
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e086      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d063      	beq.n	8005da2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a08      	ldr	r2, [pc, #32]	@ (8005d00 <HAL_SD_ReadBlocks+0x2d4>)
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e06c      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
 8005d00:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 f9c4 	bl	8007096 <SDIO_ReadFIFO>
 8005d0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d20:	3b01      	subs	r3, #1
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d30:	3301      	adds	r3, #1
 8005d32:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d36:	3b01      	subs	r3, #1
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d42:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d46:	3301      	adds	r3, #1
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	0e1b      	lsrs	r3, r3, #24
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d58:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d62:	3b01      	subs	r3, #1
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d66:	f7fc f84d 	bl	8001e04 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d902      	bls.n	8005d7c <HAL_SD_ReadBlocks+0x350>
 8005d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d112      	bne.n	8005da2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <HAL_SD_ReadBlocks+0x3b8>)
 8005d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e01b      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_SD_ReadBlocks+0x38a>
 8005db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1a6      	bne.n	8005d04 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005dbe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e006      	b.n	8005dda <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3748      	adds	r7, #72	@ 0x48
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	004005ff 	.word	0x004005ff

08005de8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	@ 0x48
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005df6:	f7fc f805 	bl	8001e04 <HAL_GetTick>
 8005dfa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e166      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	f040 8159 	bne.w	80060da <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d907      	bls.n	8005e4c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e14d      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d002      	beq.n	8005e6a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	025b      	lsls	r3, r3, #9
 8005e68:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	025b      	lsls	r3, r3, #9
 8005e74:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005e76:	2390      	movs	r3, #144	@ 0x90
 8005e78:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005e82:	2301      	movs	r3, #1
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f107 0218 	add.w	r2, r7, #24
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 f984 	bl	800719e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d90a      	bls.n	8005eb2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fa2c 	bl	8007306 <SDMMC_CmdWriteMultiBlock>
 8005eae:	6478      	str	r0, [r7, #68]	@ 0x44
 8005eb0:	e009      	b.n	8005ec6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 f9ff 	bl	80072c2 <SDMMC_CmdWriteSingleBlock>
 8005ec4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d012      	beq.n	8005ef2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a87      	ldr	r2, [pc, #540]	@ (80060f0 <HAL_SD_WriteBlocks+0x308>)
 8005ed2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e0fa      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005ef6:	e065      	b.n	8005fc4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d040      	beq.n	8005f88 <HAL_SD_WriteBlocks+0x1a0>
 8005f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d03d      	beq.n	8005f88 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f10:	e037      	b.n	8005f82 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f20:	3b01      	subs	r3, #1
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	021a      	lsls	r2, r3, #8
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	3301      	adds	r3, #1
 8005f34:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	041a      	lsls	r2, r3, #16
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f50:	3b01      	subs	r3, #1
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	061a      	lsls	r2, r3, #24
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f62:	3301      	adds	r3, #1
 8005f64:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f107 0214 	add.w	r2, r7, #20
 8005f74:	4611      	mov	r1, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 f89a 	bl	80070b0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7e:	3301      	adds	r3, #1
 8005f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	2b07      	cmp	r3, #7
 8005f86:	d9c4      	bls.n	8005f12 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f88:	f7fb ff3c 	bl	8001e04 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d902      	bls.n	8005f9e <HAL_SD_WriteBlocks+0x1b6>
 8005f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d112      	bne.n	8005fc4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a53      	ldr	r2, [pc, #332]	@ (80060f0 <HAL_SD_WriteBlocks+0x308>)
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e091      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fca:	f240 331a 	movw	r3, #794	@ 0x31a
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d091      	beq.n	8005ef8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d022      	beq.n	8006028 <HAL_SD_WriteBlocks+0x240>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d91f      	bls.n	8006028 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d01b      	beq.n	8006028 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f9a9 	bl	800734c <SDMMC_CmdStopTransfer>
 8005ffa:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d012      	beq.n	8006028 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a3a      	ldr	r2, [pc, #232]	@ (80060f0 <HAL_SD_WriteBlocks+0x308>)
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800600e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006010:	431a      	orrs	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e05f      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <HAL_SD_WriteBlocks+0x308>)
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	f043 0208 	orr.w	r2, r3, #8
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e045      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d012      	beq.n	8006090 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <HAL_SD_WriteBlocks+0x308>)
 8006070:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006076:	f043 0202 	orr.w	r2, r3, #2
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e02b      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a13      	ldr	r2, [pc, #76]	@ (80060f0 <HAL_SD_WriteBlocks+0x308>)
 80060a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	f043 0210 	orr.w	r2, r3, #16
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e011      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80060cc:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e006      	b.n	80060e8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3748      	adds	r7, #72	@ 0x48
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	004005ff 	.word	0x004005ff

080060f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006102:	0f9b      	lsrs	r3, r3, #30
 8006104:	b2da      	uxtb	r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800610e:	0e9b      	lsrs	r3, r3, #26
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	b2da      	uxtb	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006120:	0e1b      	lsrs	r3, r3, #24
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	b2da      	uxtb	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	b2da      	uxtb	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b2da      	uxtb	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614a:	b2da      	uxtb	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006154:	0d1b      	lsrs	r3, r3, #20
 8006156:	b29a      	uxth	r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006160:	0c1b      	lsrs	r3, r3, #16
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	b2da      	uxtb	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006172:	0bdb      	lsrs	r3, r3, #15
 8006174:	b2db      	uxtb	r3, r3
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	b2da      	uxtb	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006184:	0b9b      	lsrs	r3, r3, #14
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	b2da      	uxtb	r2, r3
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006196:	0b5b      	lsrs	r3, r3, #13
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a8:	0b1b      	lsrs	r3, r3, #12
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d163      	bne.n	800628c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061c8:	009a      	lsls	r2, r3, #2
 80061ca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061ce:	4013      	ands	r3, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80061d4:	0f92      	lsrs	r2, r2, #30
 80061d6:	431a      	orrs	r2, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e0:	0edb      	lsrs	r3, r3, #27
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006204:	0d5b      	lsrs	r3, r3, #21
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	b2da      	uxtb	r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006216:	0c9b      	lsrs	r3, r3, #18
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	b2da      	uxtb	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006228:	0bdb      	lsrs	r3, r3, #15
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	b2da      	uxtb	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	7e1b      	ldrb	r3, [r3, #24]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	3302      	adds	r3, #2
 800624c:	2201      	movs	r2, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006256:	fb03 f202 	mul.w	r2, r3, r2
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	7a1b      	ldrb	r3, [r3, #8]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	2201      	movs	r2, #1
 800626a:	409a      	lsls	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006278:	0a52      	lsrs	r2, r2, #9
 800627a:	fb03 f202 	mul.w	r2, r3, r2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006288:	661a      	str	r2, [r3, #96]	@ 0x60
 800628a:	e031      	b.n	80062f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006290:	2b01      	cmp	r3, #1
 8006292:	d11d      	bne.n	80062d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	431a      	orrs	r2, r3
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	3301      	adds	r3, #1
 80062b0:	029a      	lsls	r2, r3, #10
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80062ce:	e00f      	b.n	80062f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a58      	ldr	r2, [pc, #352]	@ (8006438 <HAL_SD_GetCardCSD+0x344>)
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e09d      	b.n	800642c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f4:	0b9b      	lsrs	r3, r3, #14
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630e:	b2da      	uxtb	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631e:	b2da      	uxtb	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006328:	0fdb      	lsrs	r3, r3, #31
 800632a:	b2da      	uxtb	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006334:	0f5b      	lsrs	r3, r3, #29
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	b2da      	uxtb	r2, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	0e9b      	lsrs	r3, r3, #26
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b2da      	uxtb	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006358:	0d9b      	lsrs	r3, r3, #22
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	b2da      	uxtb	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636a:	0d5b      	lsrs	r3, r3, #21
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	0c1b      	lsrs	r3, r3, #16
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	b2da      	uxtb	r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639a:	0bdb      	lsrs	r3, r3, #15
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	0b9b      	lsrs	r3, r3, #14
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c2:	0b5b      	lsrs	r3, r3, #13
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d6:	0b1b      	lsrs	r3, r3, #12
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ea:	0a9b      	lsrs	r3, r3, #10
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	b2da      	uxtb	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	004005ff 	.word	0x004005ff

0800643c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f970 	bl	800678c <SD_SendStatus>
 80064ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	0a5b      	lsrs	r3, r3, #9
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064ca:	693b      	ldr	r3, [r7, #16]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064d4:	b5b0      	push	{r4, r5, r7, lr}
 80064d6:	b094      	sub	sp, #80	@ 0x50
 80064d8:	af04      	add	r7, sp, #16
 80064da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80064dc:	2301      	movs	r3, #1
 80064de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe02 	bl	80070ee <SDIO_GetPowerState>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80064f4:	e0b8      	b.n	8006668 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d02f      	beq.n	800655e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ffe9 	bl	80074da <SDMMC_CmdSendCID>
 8006508:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800650a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <SD_InitCard+0x40>
    {
      return errorstate;
 8006510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006512:	e0a9      	b.n	8006668 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fe2c 	bl	8007178 <SDIO_GetResponse>
 8006520:	4602      	mov	r2, r0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2104      	movs	r1, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fe23 	bl	8007178 <SDIO_GetResponse>
 8006532:	4602      	mov	r2, r0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2108      	movs	r1, #8
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fe1a 	bl	8007178 <SDIO_GetResponse>
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	210c      	movs	r1, #12
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fe11 	bl	8007178 <SDIO_GetResponse>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006562:	2b03      	cmp	r3, #3
 8006564:	d00d      	beq.n	8006582 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f107 020e 	add.w	r2, r7, #14
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f000 ffef 	bl	8007554 <SDMMC_CmdSetRelAdd>
 8006576:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <SD_InitCard+0xae>
    {
      return errorstate;
 800657e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006580:	e072      	b.n	8006668 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006586:	2b03      	cmp	r3, #3
 8006588:	d036      	beq.n	80065f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800658a:	89fb      	ldrh	r3, [r7, #14]
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659a:	041b      	lsls	r3, r3, #16
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f000 ffb9 	bl	8007516 <SDMMC_CmdSendCSD>
 80065a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80065ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ae:	e05b      	b.n	8006668 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fdde 	bl	8007178 <SDIO_GetResponse>
 80065bc:	4602      	mov	r2, r0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2104      	movs	r1, #4
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fdd5 	bl	8007178 <SDIO_GetResponse>
 80065ce:	4602      	mov	r2, r0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2108      	movs	r1, #8
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fdcc 	bl	8007178 <SDIO_GetResponse>
 80065e0:	4602      	mov	r2, r0
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	210c      	movs	r1, #12
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fdc3 	bl	8007178 <SDIO_GetResponse>
 80065f2:	4602      	mov	r2, r0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2104      	movs	r1, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fdba 	bl	8007178 <SDIO_GetResponse>
 8006604:	4603      	mov	r3, r0
 8006606:	0d1a      	lsrs	r2, r3, #20
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fd6e 	bl	80060f4 <HAL_SD_GetCardCSD>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800661e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006622:	e021      	b.n	8006668 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	2200      	movs	r2, #0
 8006630:	461c      	mov	r4, r3
 8006632:	4615      	mov	r5, r2
 8006634:	4622      	mov	r2, r4
 8006636:	462b      	mov	r3, r5
 8006638:	4608      	mov	r0, r1
 800663a:	f000 fea9 	bl	8007390 <SDMMC_CmdSelDesel>
 800663e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <SD_InitCard+0x176>
  {
    return errorstate;
 8006646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006648:	e00e      	b.n	8006668 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681d      	ldr	r5, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	466c      	mov	r4, sp
 8006652:	f103 0210 	add.w	r2, r3, #16
 8006656:	ca07      	ldmia	r2, {r0, r1, r2}
 8006658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800665c:	3304      	adds	r3, #4
 800665e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006660:	4628      	mov	r0, r5
 8006662:	f000 fced 	bl	8007040 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3740      	adds	r7, #64	@ 0x40
 800666c:	46bd      	mov	sp, r7
 800666e:	bdb0      	pop	{r4, r5, r7, pc}

08006670 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fea4 	bl	80073d6 <SDMMC_CmdGoIdleState>
 800668e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	e072      	b.n	8006780 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 feb7 	bl	8007412 <SDMMC_CmdOperCond>
 80066a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00d      	beq.n	80066c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fe8d 	bl	80073d6 <SDMMC_CmdGoIdleState>
 80066bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	e05b      	b.n	8006780 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d137      	bne.n	8006746 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 feb7 	bl	8007450 <SDMMC_CmdAppCommand>
 80066e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d02d      	beq.n	8006746 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80066ee:	e047      	b.n	8006780 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 feaa 	bl	8007450 <SDMMC_CmdAppCommand>
 80066fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <SD_PowerON+0x98>
    {
      return errorstate;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e03b      	b.n	8006780 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	491e      	ldr	r1, [pc, #120]	@ (8006788 <SD_PowerON+0x118>)
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fec0 	bl	8007494 <SDMMC_CmdAppOperCommand>
 8006714:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800671c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006720:	e02e      	b.n	8006780 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fd25 	bl	8007178 <SDIO_GetResponse>
 800672e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	0fdb      	lsrs	r3, r3, #31
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <SD_PowerON+0xcc>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <SD_PowerON+0xce>
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]

    count++;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	3301      	adds	r3, #1
 8006744:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800674c:	4293      	cmp	r3, r2
 800674e:	d802      	bhi.n	8006756 <SD_PowerON+0xe6>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0cc      	beq.n	80066f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800675c:	4293      	cmp	r3, r2
 800675e:	d902      	bls.n	8006766 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006760:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006764:	e00c      	b.n	8006780 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	645a      	str	r2, [r3, #68]	@ 0x44
 8006776:	e002      	b.n	800677e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	c1100000 	.word	0xc1100000

0800678c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800679c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067a0:	e018      	b.n	80067d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f000 fef1 	bl	8007596 <SDMMC_CmdSendStatus>
 80067b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	e009      	b.n	80067d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fcd6 	bl	8007178 <SDIO_GetResponse>
 80067cc:	4602      	mov	r2, r0
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e03f      	b.n	800686e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fb f950 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2224      	movs	r2, #36	@ 0x24
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800681e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f999 	bl	8006b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	460b      	mov	r3, r1
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e05f      	b.n	800694e <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7fb f900 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2224      	movs	r2, #36	@ 0x24
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f949 	bl	8006b58 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068e4:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 020f 	bic.w	r2, r2, #15
 80068f4:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6919      	ldr	r1, [r3, #16]
 80068fc:	7afa      	ldrb	r2, [r7, #11]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006914:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68d9      	ldr	r1, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	430a      	orrs	r2, r1
 8006924:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b08a      	sub	sp, #40	@ 0x28
 800695a:	af02      	add	r7, sp, #8
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b20      	cmp	r3, #32
 8006974:	d17c      	bne.n	8006a70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_UART_Transmit+0x2c>
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e075      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Transmit+0x3e>
 8006990:	2302      	movs	r3, #2
 8006992:	e06e      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2221      	movs	r2, #33	@ 0x21
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069aa:	f7fb fa2b 	bl	8001e04 <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c4:	d108      	bne.n	80069d8 <HAL_UART_Transmit+0x82>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	e003      	b.n	80069e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80069e8:	e02a      	b.n	8006a40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	@ 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f840 	bl	8006a7a <UART_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e036      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e007      	b.n	8006a32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1cf      	bne.n	80069ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2140      	movs	r1, #64	@ 0x40
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f810 	bl	8006a7a <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e006      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e000      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a70:	2302      	movs	r3, #2
  }
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b090      	sub	sp, #64	@ 0x40
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8a:	e050      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d04c      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8006a9a:	f7fb f9b3 	bl	8001e04 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d241      	bcs.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006aca:	637a      	str	r2, [r7, #52]	@ 0x34
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3314      	adds	r3, #20
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	613b      	str	r3, [r7, #16]
   return(result);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3314      	adds	r3, #20
 8006afc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006afe:	623a      	str	r2, [r7, #32]
 8006b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	69f9      	ldr	r1, [r7, #28]
 8006b04:	6a3a      	ldr	r2, [r7, #32]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2301      	moveq	r3, #1
 8006b40:	2300      	movne	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d09f      	beq.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3740      	adds	r7, #64	@ 0x40
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b5c:	b0c0      	sub	sp, #256	@ 0x100
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	68d9      	ldr	r1, [r3, #12]
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	ea40 0301 	orr.w	r3, r0, r1
 8006b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	431a      	orrs	r2, r3
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bb0:	f021 010c 	bic.w	r1, r1, #12
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd2:	6999      	ldr	r1, [r3, #24]
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	ea40 0301 	orr.w	r3, r0, r1
 8006bde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b8f      	ldr	r3, [pc, #572]	@ (8006e24 <UART_SetConfig+0x2cc>)
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d005      	beq.n	8006bf8 <UART_SetConfig+0xa0>
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8006e28 <UART_SetConfig+0x2d0>)
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d104      	bne.n	8006c02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bf8:	f7fe fd14 	bl	8005624 <HAL_RCC_GetPCLK2Freq>
 8006bfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c00:	e003      	b.n	8006c0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c02:	f7fe fcfb 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8006c06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c14:	f040 810c 	bne.w	8006e30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	1891      	adds	r1, r2, r2
 8006c30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c32:	415b      	adcs	r3, r3
 8006c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	eb12 0801 	adds.w	r8, r2, r1
 8006c40:	4629      	mov	r1, r5
 8006c42:	eb43 0901 	adc.w	r9, r3, r1
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c5a:	4690      	mov	r8, r2
 8006c5c:	4699      	mov	r9, r3
 8006c5e:	4623      	mov	r3, r4
 8006c60:	eb18 0303 	adds.w	r3, r8, r3
 8006c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c68:	462b      	mov	r3, r5
 8006c6a:	eb49 0303 	adc.w	r3, r9, r3
 8006c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c86:	460b      	mov	r3, r1
 8006c88:	18db      	adds	r3, r3, r3
 8006c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	eb42 0303 	adc.w	r3, r2, r3
 8006c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c9c:	f7f9 faf0 	bl	8000280 <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4b61      	ldr	r3, [pc, #388]	@ (8006e2c <UART_SetConfig+0x2d4>)
 8006ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	011c      	lsls	r4, r3, #4
 8006cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	1891      	adds	r1, r2, r2
 8006cc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cc8:	415b      	adcs	r3, r3
 8006cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cd0:	4641      	mov	r1, r8
 8006cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cf0:	4692      	mov	sl, r2
 8006cf2:	469b      	mov	fp, r3
 8006cf4:	4643      	mov	r3, r8
 8006cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8006cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	eb4b 0303 	adc.w	r3, fp, r3
 8006d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	18db      	adds	r3, r3, r3
 8006d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d22:	4613      	mov	r3, r2
 8006d24:	eb42 0303 	adc.w	r3, r2, r3
 8006d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d32:	f7f9 faa5 	bl	8000280 <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e2c <UART_SetConfig+0x2d4>)
 8006d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	2264      	movs	r2, #100	@ 0x64
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	1acb      	subs	r3, r1, r3
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d52:	4b36      	ldr	r3, [pc, #216]	@ (8006e2c <UART_SetConfig+0x2d4>)
 8006d54:	fba3 2302 	umull	r2, r3, r3, r2
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d60:	441c      	add	r4, r3
 8006d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d74:	4642      	mov	r2, r8
 8006d76:	464b      	mov	r3, r9
 8006d78:	1891      	adds	r1, r2, r2
 8006d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d7c:	415b      	adcs	r3, r3
 8006d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d84:	4641      	mov	r1, r8
 8006d86:	1851      	adds	r1, r2, r1
 8006d88:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	414b      	adcs	r3, r1
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	00cb      	lsls	r3, r1, #3
 8006da0:	4651      	mov	r1, sl
 8006da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006da6:	4651      	mov	r1, sl
 8006da8:	00ca      	lsls	r2, r1, #3
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	4642      	mov	r2, r8
 8006db2:	189b      	adds	r3, r3, r2
 8006db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006db8:	464b      	mov	r3, r9
 8006dba:	460a      	mov	r2, r1
 8006dbc:	eb42 0303 	adc.w	r3, r2, r3
 8006dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dd8:	460b      	mov	r3, r1
 8006dda:	18db      	adds	r3, r3, r3
 8006ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dde:	4613      	mov	r3, r2
 8006de0:	eb42 0303 	adc.w	r3, r2, r3
 8006de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dee:	f7f9 fa47 	bl	8000280 <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <UART_SetConfig+0x2d4>)
 8006df8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2164      	movs	r1, #100	@ 0x64
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	3332      	adds	r3, #50	@ 0x32
 8006e0a:	4a08      	ldr	r2, [pc, #32]	@ (8006e2c <UART_SetConfig+0x2d4>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	f003 0207 	and.w	r2, r3, #7
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4422      	add	r2, r4
 8006e1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e20:	e106      	b.n	8007030 <UART_SetConfig+0x4d8>
 8006e22:	bf00      	nop
 8006e24:	40011000 	.word	0x40011000
 8006e28:	40011400 	.word	0x40011400
 8006e2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e42:	4642      	mov	r2, r8
 8006e44:	464b      	mov	r3, r9
 8006e46:	1891      	adds	r1, r2, r2
 8006e48:	6239      	str	r1, [r7, #32]
 8006e4a:	415b      	adcs	r3, r3
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e52:	4641      	mov	r1, r8
 8006e54:	1854      	adds	r4, r2, r1
 8006e56:	4649      	mov	r1, r9
 8006e58:	eb43 0501 	adc.w	r5, r3, r1
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	00eb      	lsls	r3, r5, #3
 8006e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e6a:	00e2      	lsls	r2, r4, #3
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	461d      	mov	r5, r3
 8006e70:	4643      	mov	r3, r8
 8006e72:	18e3      	adds	r3, r4, r3
 8006e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e78:	464b      	mov	r3, r9
 8006e7a:	eb45 0303 	adc.w	r3, r5, r3
 8006e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	008b      	lsls	r3, r1, #2
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	008a      	lsls	r2, r1, #2
 8006eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006eb0:	f7f9 f9e6 	bl	8000280 <__aeabi_uldivmod>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4b60      	ldr	r3, [pc, #384]	@ (800703c <UART_SetConfig+0x4e4>)
 8006eba:	fba3 2302 	umull	r2, r3, r3, r2
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	011c      	lsls	r4, r3, #4
 8006ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ecc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	1891      	adds	r1, r2, r2
 8006eda:	61b9      	str	r1, [r7, #24]
 8006edc:	415b      	adcs	r3, r3
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	1851      	adds	r1, r2, r1
 8006ee8:	6139      	str	r1, [r7, #16]
 8006eea:	4649      	mov	r1, r9
 8006eec:	414b      	adcs	r3, r1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006efc:	4659      	mov	r1, fp
 8006efe:	00cb      	lsls	r3, r1, #3
 8006f00:	4651      	mov	r1, sl
 8006f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f06:	4651      	mov	r1, sl
 8006f08:	00ca      	lsls	r2, r1, #3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4642      	mov	r2, r8
 8006f12:	189b      	adds	r3, r3, r2
 8006f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f18:	464b      	mov	r3, r9
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	eb42 0303 	adc.w	r3, r2, r3
 8006f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	008b      	lsls	r3, r1, #2
 8006f40:	4641      	mov	r1, r8
 8006f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f46:	4641      	mov	r1, r8
 8006f48:	008a      	lsls	r2, r1, #2
 8006f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f4e:	f7f9 f997 	bl	8000280 <__aeabi_uldivmod>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	4b38      	ldr	r3, [pc, #224]	@ (800703c <UART_SetConfig+0x4e4>)
 8006f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	2264      	movs	r2, #100	@ 0x64
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	1acb      	subs	r3, r1, r3
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	3332      	adds	r3, #50	@ 0x32
 8006f6c:	4a33      	ldr	r2, [pc, #204]	@ (800703c <UART_SetConfig+0x4e4>)
 8006f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f78:	441c      	add	r4, r3
 8006f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f7e:	2200      	movs	r2, #0
 8006f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f82:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	1891      	adds	r1, r2, r2
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	415b      	adcs	r3, r3
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f98:	4641      	mov	r1, r8
 8006f9a:	1851      	adds	r1, r2, r1
 8006f9c:	6039      	str	r1, [r7, #0]
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	414b      	adcs	r3, r1
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fb0:	4659      	mov	r1, fp
 8006fb2:	00cb      	lsls	r3, r1, #3
 8006fb4:	4651      	mov	r1, sl
 8006fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fba:	4651      	mov	r1, sl
 8006fbc:	00ca      	lsls	r2, r1, #3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fca:	464b      	mov	r3, r9
 8006fcc:	460a      	mov	r2, r1
 8006fce:	eb42 0303 	adc.w	r3, r2, r3
 8006fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fec:	4649      	mov	r1, r9
 8006fee:	008b      	lsls	r3, r1, #2
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	008a      	lsls	r2, r1, #2
 8006ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ffe:	f7f9 f93f 	bl	8000280 <__aeabi_uldivmod>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <UART_SetConfig+0x4e4>)
 8007008:	fba3 1302 	umull	r1, r3, r3, r2
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	2164      	movs	r1, #100	@ 0x64
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	3332      	adds	r3, #50	@ 0x32
 800701a:	4a08      	ldr	r2, [pc, #32]	@ (800703c <UART_SetConfig+0x4e4>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	f003 020f 	and.w	r2, r3, #15
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4422      	add	r2, r4
 800702e:	609a      	str	r2, [r3, #8]
}
 8007030:	bf00      	nop
 8007032:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007036:	46bd      	mov	sp, r7
 8007038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703c:	51eb851f 	.word	0x51eb851f

08007040 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007040:	b084      	sub	sp, #16
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	f107 001c 	add.w	r0, r7, #28
 800704e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007056:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007058:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800705a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800705e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007062:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007066:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800706a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800707a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	b004      	add	sp, #16
 8007094:	4770      	bx	lr

08007096 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2203      	movs	r2, #3
 80070de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0303 	and.w	r3, r3, #3
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007128:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800712e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007134:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007144:	f023 030f 	bic.w	r3, r3, #15
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	b2db      	uxtb	r3, r3
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3314      	adds	r3, #20
 8007186:	461a      	mov	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	4413      	add	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
}  
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071c4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80071ca:	431a      	orrs	r2, r3
                       Data->DPSM);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80071d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0

}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007204:	2310      	movs	r3, #16
 8007206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007208:	2340      	movs	r3, #64	@ 0x40
 800720a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff ff74 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007226:	2110      	movs	r1, #16
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f9d7 	bl	80075dc <SDMMC_GetCmdResp1>
 800722e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007230:	69fb      	ldr	r3, [r7, #28]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b088      	sub	sp, #32
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007248:	2311      	movs	r3, #17
 800724a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800724c:	2340      	movs	r3, #64	@ 0x40
 800724e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007258:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ff52 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726a:	2111      	movs	r1, #17
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9b5 	bl	80075dc <SDMMC_GetCmdResp1>
 8007272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007274:	69fb      	ldr	r3, [r7, #28]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b088      	sub	sp, #32
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800728c:	2312      	movs	r3, #18
 800728e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007290:	2340      	movs	r3, #64	@ 0x40
 8007292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800729c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ff30 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80072aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ae:	2112      	movs	r1, #18
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f993 	bl	80075dc <SDMMC_GetCmdResp1>
 80072b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072b8:	69fb      	ldr	r3, [r7, #28]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3720      	adds	r7, #32
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b088      	sub	sp, #32
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80072d0:	2318      	movs	r3, #24
 80072d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072d4:	2340      	movs	r3, #64	@ 0x40
 80072d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072e2:	f107 0308 	add.w	r3, r7, #8
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff0e 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80072ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072f2:	2118      	movs	r1, #24
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f971 	bl	80075dc <SDMMC_GetCmdResp1>
 80072fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072fc:	69fb      	ldr	r3, [r7, #28]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b088      	sub	sp, #32
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007314:	2319      	movs	r3, #25
 8007316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007318:	2340      	movs	r3, #64	@ 0x40
 800731a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007324:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff feec 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007336:	2119      	movs	r1, #25
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f94f 	bl	80075dc <SDMMC_GetCmdResp1>
 800733e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007340:	69fb      	ldr	r3, [r7, #28]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007358:	230c      	movs	r3, #12
 800735a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800735c:	2340      	movs	r3, #64	@ 0x40
 800735e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007368:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800736a:	f107 0308 	add.w	r3, r7, #8
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff feca 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007376:	4a05      	ldr	r2, [pc, #20]	@ (800738c <SDMMC_CmdStopTransfer+0x40>)
 8007378:	210c      	movs	r1, #12
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f92e 	bl	80075dc <SDMMC_GetCmdResp1>
 8007380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007382:	69fb      	ldr	r3, [r7, #28]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3720      	adds	r7, #32
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	05f5e100 	.word	0x05f5e100

08007390 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	@ 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073a0:	2307      	movs	r3, #7
 80073a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073a4:	2340      	movs	r3, #64	@ 0x40
 80073a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073b0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073b2:	f107 0310 	add.w	r3, r7, #16
 80073b6:	4619      	mov	r1, r3
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff fea6 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80073be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c2:	2107      	movs	r1, #7
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f909 	bl	80075dc <SDMMC_GetCmdResp1>
 80073ca:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	@ 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b088      	sub	sp, #32
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fe85 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb23 	bl	8007a4c <SDMMC_GetCmdError>
 8007406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007408:	69fb      	ldr	r3, [r7, #28]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b088      	sub	sp, #32
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800741a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800741e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007420:	2308      	movs	r3, #8
 8007422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007424:	2340      	movs	r3, #64	@ 0x40
 8007426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800742c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007430:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007432:	f107 0308 	add.w	r3, r7, #8
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fe66 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fab6 	bl	80079b0 <SDMMC_GetCmdResp7>
 8007444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007446:	69fb      	ldr	r3, [r7, #28]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800745e:	2337      	movs	r3, #55	@ 0x37
 8007460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007462:	2340      	movs	r3, #64	@ 0x40
 8007464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800746a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800746e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007470:	f107 0308 	add.w	r3, r7, #8
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fe47 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800747c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007480:	2137      	movs	r1, #55	@ 0x37
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8aa 	bl	80075dc <SDMMC_GetCmdResp1>
 8007488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800748a:	69fb      	ldr	r3, [r7, #28]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80074aa:	2329      	movs	r3, #41	@ 0x29
 80074ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074ae:	2340      	movs	r3, #64	@ 0x40
 80074b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fe21 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9bd 	bl	8007848 <SDMMC_GetCmdResp3>
 80074ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d0:	69fb      	ldr	r3, [r7, #28]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80074e6:	2302      	movs	r3, #2
 80074e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80074ea:	23c0      	movs	r3, #192	@ 0xc0
 80074ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074f8:	f107 0308 	add.w	r3, r7, #8
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fe03 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f957 	bl	80077b8 <SDMMC_GetCmdResp2>
 800750a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800750c:	69fb      	ldr	r3, [r7, #28]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b088      	sub	sp, #32
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007524:	2309      	movs	r3, #9
 8007526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007528:	23c0      	movs	r3, #192	@ 0xc0
 800752a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fde4 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f938 	bl	80077b8 <SDMMC_GetCmdResp2>
 8007548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800754a:	69fb      	ldr	r3, [r7, #28]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007562:	2303      	movs	r3, #3
 8007564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007566:	2340      	movs	r3, #64	@ 0x40
 8007568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800756e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007574:	f107 0308 	add.w	r3, r7, #8
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fdc5 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	2103      	movs	r1, #3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f99d 	bl	80078c4 <SDMMC_GetCmdResp6>
 800758a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800758c:	69fb      	ldr	r3, [r7, #28]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80075a4:	230d      	movs	r3, #13
 80075a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075a8:	2340      	movs	r3, #64	@ 0x40
 80075aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff fda4 	bl	800710a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80075c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c6:	210d      	movs	r1, #13
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f807 	bl	80075dc <SDMMC_GetCmdResp1>
 80075ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075d0:	69fb      	ldr	r3, [r7, #28]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	460b      	mov	r3, r1
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80075ea:	4b70      	ldr	r3, [pc, #448]	@ (80077ac <SDMMC_GetCmdResp1+0x1d0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a70      	ldr	r2, [pc, #448]	@ (80077b0 <SDMMC_GetCmdResp1+0x1d4>)
 80075f0:	fba2 2303 	umull	r2, r3, r2, r3
 80075f4:	0a5a      	lsrs	r2, r3, #9
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	61fa      	str	r2, [r7, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007608:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800760c:	e0c9      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007612:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0ef      	beq.n	80075fe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1ea      	bne.n	80075fe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2204      	movs	r2, #4
 8007638:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800763a:	2304      	movs	r3, #4
 800763c:	e0b1      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d004      	beq.n	8007654 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007650:	2301      	movs	r3, #1
 8007652:	e0a6      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	22c5      	movs	r2, #197	@ 0xc5
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fd7f 	bl	800715e <SDIO_GetCommandResponse>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	4293      	cmp	r3, r2
 8007668:	d001      	beq.n	800766e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800766a:	2301      	movs	r3, #1
 800766c:	e099      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800766e:	2100      	movs	r1, #0
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff fd81 	bl	8007178 <SDIO_GetResponse>
 8007676:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4b4e      	ldr	r3, [pc, #312]	@ (80077b4 <SDMMC_GetCmdResp1+0x1d8>)
 800767c:	4013      	ands	r3, r2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007682:	2300      	movs	r3, #0
 8007684:	e08d      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da02      	bge.n	8007692 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800768c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007690:	e087      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800769c:	2340      	movs	r3, #64	@ 0x40
 800769e:	e080      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80076aa:	2380      	movs	r3, #128	@ 0x80
 80076ac:	e079      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80076b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076bc:	e071      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80076c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076cc:	e069      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80076d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076dc:	e061      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80076e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076ec:	e059      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80076f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076fc:	e051      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800770c:	e049      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007718:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800771c:	e041      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772c:	e039      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800773c:	e031      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007748:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800774c:	e029      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007758:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800775c:	e021      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007768:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800776c:	e019      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007778:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800777c:	e011      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007788:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800778c:	e009      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007798:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800779c:	e001      	b.n	80077a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800779e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3720      	adds	r7, #32
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	2000001c 	.word	0x2000001c
 80077b0:	10624dd3 	.word	0x10624dd3
 80077b4:	fdffe008 	.word	0xfdffe008

080077b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077c0:	4b1f      	ldr	r3, [pc, #124]	@ (8007840 <SDMMC_GetCmdResp2+0x88>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007844 <SDMMC_GetCmdResp2+0x8c>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	0a5b      	lsrs	r3, r3, #9
 80077cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	1e5a      	subs	r2, r3, #1
 80077da:	60fa      	str	r2, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077e4:	e026      	b.n	8007834 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0ef      	beq.n	80077d6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1ea      	bne.n	80077d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2204      	movs	r2, #4
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007812:	2304      	movs	r3, #4
 8007814:	e00e      	b.n	8007834 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007828:	2301      	movs	r3, #1
 800782a:	e003      	b.n	8007834 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	22c5      	movs	r2, #197	@ 0xc5
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	2000001c 	.word	0x2000001c
 8007844:	10624dd3 	.word	0x10624dd3

08007848 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007850:	4b1a      	ldr	r3, [pc, #104]	@ (80078bc <SDMMC_GetCmdResp3+0x74>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1a      	ldr	r2, [pc, #104]	@ (80078c0 <SDMMC_GetCmdResp3+0x78>)
 8007856:	fba2 2303 	umull	r2, r3, r2, r3
 800785a:	0a5b      	lsrs	r3, r3, #9
 800785c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	60fa      	str	r2, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007870:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007874:	e01b      	b.n	80078ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800787a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0ef      	beq.n	8007866 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ea      	bne.n	8007866 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078a2:	2304      	movs	r3, #4
 80078a4:	e003      	b.n	80078ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	22c5      	movs	r2, #197	@ 0xc5
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	2000001c 	.word	0x2000001c
 80078c0:	10624dd3 	.word	0x10624dd3

080078c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078d2:	4b35      	ldr	r3, [pc, #212]	@ (80079a8 <SDMMC_GetCmdResp6+0xe4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a35      	ldr	r2, [pc, #212]	@ (80079ac <SDMMC_GetCmdResp6+0xe8>)
 80078d8:	fba2 2303 	umull	r2, r3, r2, r3
 80078dc:	0a5b      	lsrs	r3, r3, #9
 80078de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	1e5a      	subs	r2, r3, #1
 80078ec:	61fa      	str	r2, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078f6:	e052      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0ef      	beq.n	80078e8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1ea      	bne.n	80078e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2204      	movs	r2, #4
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007924:	2304      	movs	r3, #4
 8007926:	e03a      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800793a:	2301      	movs	r3, #1
 800793c:	e02f      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff fc0d 	bl	800715e <SDIO_GetCommandResponse>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	4293      	cmp	r3, r2
 800794c:	d001      	beq.n	8007952 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800794e:	2301      	movs	r3, #1
 8007950:	e025      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	22c5      	movs	r2, #197	@ 0xc5
 8007956:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007958:	2100      	movs	r1, #0
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fc0c 	bl	8007178 <SDIO_GetResponse>
 8007960:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d106      	bne.n	800797a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	0c1b      	lsrs	r3, r3, #16
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007976:	2300      	movs	r3, #0
 8007978:	e011      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007988:	e009      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007998:	e001      	b.n	800799e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800799a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	2000001c 	.word	0x2000001c
 80079ac:	10624dd3 	.word	0x10624dd3

080079b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079b8:	4b22      	ldr	r3, [pc, #136]	@ (8007a44 <SDMMC_GetCmdResp7+0x94>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a22      	ldr	r2, [pc, #136]	@ (8007a48 <SDMMC_GetCmdResp7+0x98>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	0a5b      	lsrs	r3, r3, #9
 80079c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079c8:	fb02 f303 	mul.w	r3, r2, r3
 80079cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1e5a      	subs	r2, r3, #1
 80079d2:	60fa      	str	r2, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079dc:	e02c      	b.n	8007a38 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ef      	beq.n	80079ce <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1ea      	bne.n	80079ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2204      	movs	r2, #4
 8007a08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	e014      	b.n	8007a38 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e009      	b.n	8007a38 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2240      	movs	r2, #64	@ 0x40
 8007a34:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a36:	2300      	movs	r3, #0
  
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	2000001c 	.word	0x2000001c
 8007a48:	10624dd3 	.word	0x10624dd3

08007a4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a54:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <SDMMC_GetCmdError+0x50>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a11      	ldr	r2, [pc, #68]	@ (8007aa0 <SDMMC_GetCmdError+0x54>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	0a5b      	lsrs	r3, r3, #9
 8007a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	1e5a      	subs	r2, r3, #1
 8007a6e:	60fa      	str	r2, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a78:	e009      	b.n	8007a8e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f1      	beq.n	8007a6a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	22c5      	movs	r2, #197	@ 0xc5
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	2000001c 	.word	0x2000001c
 8007aa0:	10624dd3 	.word	0x10624dd3

08007aa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007aa8:	4904      	ldr	r1, [pc, #16]	@ (8007abc <MX_FATFS_Init+0x18>)
 8007aaa:	4805      	ldr	r0, [pc, #20]	@ (8007ac0 <MX_FATFS_Init+0x1c>)
 8007aac:	f003 f81e 	bl	800aaec <FATFS_LinkDriver>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <MX_FATFS_Init+0x20>)
 8007ab6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ab8:	bf00      	nop
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20004528 	.word	0x20004528
 8007ac0:	0800bd80 	.word	0x0800bd80
 8007ac4:	20004524 	.word	0x20004524

08007ac8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007acc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ae2:	f000 f86b 	bl	8007bbc <BSP_SD_IsDetected>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e005      	b.n	8007afc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007af0:	4804      	ldr	r0, [pc, #16]	@ (8007b04 <BSP_SD_Init+0x2c>)
 8007af2:	f7fd feeb 	bl	80058cc <HAL_SD_Init>
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007afa:	79fb      	ldrb	r3, [r7, #7]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000244 	.word	0x20000244

08007b08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	4806      	ldr	r0, [pc, #24]	@ (8007b40 <BSP_SD_ReadBlocks+0x38>)
 8007b26:	f7fd ff81 	bl	8005a2c <HAL_SD_ReadBlocks>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000244 	.word	0x20000244

08007b44 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	4806      	ldr	r0, [pc, #24]	@ (8007b7c <BSP_SD_WriteBlocks+0x38>)
 8007b62:	f7fe f941 	bl	8005de8 <HAL_SD_WriteBlocks>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000244 	.word	0x20000244

08007b80 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007b84:	4805      	ldr	r0, [pc, #20]	@ (8007b9c <BSP_SD_GetCardState+0x1c>)
 8007b86:	f7fe fc85 	bl	8006494 <HAL_SD_GetCardState>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000244 	.word	0x20000244

08007ba0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4803      	ldr	r0, [pc, #12]	@ (8007bb8 <BSP_SD_GetCardInfo+0x18>)
 8007bac:	f7fe fc46 	bl	800643c <HAL_SD_GetCardInfo>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000244 	.word	0x20000244

08007bbc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	b2db      	uxtb	r3, r3
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007be2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c10 <SD_CheckStatus+0x38>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007be8:	f7ff ffca 	bl	8007b80 <BSP_SD_GetCardState>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d107      	bne.n	8007c02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007bf2:	4b07      	ldr	r3, [pc, #28]	@ (8007c10 <SD_CheckStatus+0x38>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f023 0301 	bic.w	r3, r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <SD_CheckStatus+0x38>)
 8007c00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007c02:	4b03      	ldr	r3, [pc, #12]	@ (8007c10 <SD_CheckStatus+0x38>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b2db      	uxtb	r3, r3
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000025 	.word	0x20000025

08007c14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c4c <SD_initialize+0x38>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007c24:	f7ff ff58 	bl	8007ad8 <BSP_SD_Init>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff ffd1 	bl	8007bd8 <SD_CheckStatus>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4b04      	ldr	r3, [pc, #16]	@ (8007c4c <SD_initialize+0x38>)
 8007c3c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007c3e:	4b03      	ldr	r3, [pc, #12]	@ (8007c4c <SD_initialize+0x38>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b2db      	uxtb	r3, r3
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000025 	.word	0x20000025

08007c50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ffbb 	bl	8007bd8 <SD_CheckStatus>
 8007c62:	4603      	mov	r3, r0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007c80:	f04f 33ff 	mov.w	r3, #4294967295
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	68b8      	ldr	r0, [r7, #8]
 8007c8a:	f7ff ff3d 	bl	8007b08 <BSP_SD_ReadBlocks>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007c94:	bf00      	nop
 8007c96:	f7ff ff73 	bl	8007b80 <BSP_SD_GetCardState>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1fa      	bne.n	8007c96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	68b8      	ldr	r0, [r7, #8]
 8007ccc:	f7ff ff3a 	bl	8007b44 <BSP_SD_WriteBlocks>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d107      	bne.n	8007ce6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007cd6:	bf00      	nop
 8007cd8:	f7ff ff52 	bl	8007b80 <BSP_SD_GetCardState>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1fa      	bne.n	8007cd8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08c      	sub	sp, #48	@ 0x30
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	603a      	str	r2, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d06:	4b25      	ldr	r3, [pc, #148]	@ (8007d9c <SD_ioctl+0xac>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <SD_ioctl+0x28>
 8007d14:	2303      	movs	r3, #3
 8007d16:	e03c      	b.n	8007d92 <SD_ioctl+0xa2>

  switch (cmd)
 8007d18:	79bb      	ldrb	r3, [r7, #6]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d834      	bhi.n	8007d88 <SD_ioctl+0x98>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <SD_ioctl+0x34>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007d3d 	.word	0x08007d3d
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d6f 	.word	0x08007d6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d3a:	e028      	b.n	8007d8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d3c:	f107 030c 	add.w	r3, r7, #12
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff ff2d 	bl	8007ba0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d52:	e01c      	b.n	8007d8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d54:	f107 030c 	add.w	r3, r7, #12
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff ff21 	bl	8007ba0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d6c:	e00f      	b.n	8007d8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d6e:	f107 030c 	add.w	r3, r7, #12
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff ff14 	bl	8007ba0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	0a5a      	lsrs	r2, r3, #9
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d86:	e002      	b.n	8007d8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8007d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3730      	adds	r7, #48	@ 0x30
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000025 	.word	0x20000025

08007da0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	4a08      	ldr	r2, [pc, #32]	@ (8007dd0 <disk_status+0x30>)
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	79fa      	ldrb	r2, [r7, #7]
 8007db8:	4905      	ldr	r1, [pc, #20]	@ (8007dd0 <disk_status+0x30>)
 8007dba:	440a      	add	r2, r1
 8007dbc:	7a12      	ldrb	r2, [r2, #8]
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4798      	blx	r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20004554 	.word	0x20004554

08007dd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e1c <disk_initialize+0x48>)
 8007de6:	5cd3      	ldrb	r3, [r2, r3]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d111      	bne.n	8007e10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	4a0b      	ldr	r2, [pc, #44]	@ (8007e1c <disk_initialize+0x48>)
 8007df0:	2101      	movs	r1, #1
 8007df2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	4a09      	ldr	r2, [pc, #36]	@ (8007e1c <disk_initialize+0x48>)
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	79fa      	ldrb	r2, [r7, #7]
 8007e02:	4906      	ldr	r1, [pc, #24]	@ (8007e1c <disk_initialize+0x48>)
 8007e04:	440a      	add	r2, r1
 8007e06:	7a12      	ldrb	r2, [r2, #8]
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20004554 	.word	0x20004554

08007e20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e20:	b590      	push	{r4, r7, lr}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	4a0a      	ldr	r2, [pc, #40]	@ (8007e5c <disk_read+0x3c>)
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	689c      	ldr	r4, [r3, #8]
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	4a07      	ldr	r2, [pc, #28]	@ (8007e5c <disk_read+0x3c>)
 8007e40:	4413      	add	r3, r2
 8007e42:	7a18      	ldrb	r0, [r3, #8]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	47a0      	blx	r4
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd90      	pop	{r4, r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20004554 	.word	0x20004554

08007e60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4a0a      	ldr	r2, [pc, #40]	@ (8007e9c <disk_write+0x3c>)
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	68dc      	ldr	r4, [r3, #12]
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	4a07      	ldr	r2, [pc, #28]	@ (8007e9c <disk_write+0x3c>)
 8007e80:	4413      	add	r3, r2
 8007e82:	7a18      	ldrb	r0, [r3, #8]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	47a0      	blx	r4
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd90      	pop	{r4, r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20004554 	.word	0x20004554

08007ea0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	603a      	str	r2, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
 8007eac:	460b      	mov	r3, r1
 8007eae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	4a09      	ldr	r2, [pc, #36]	@ (8007ed8 <disk_ioctl+0x38>)
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	79fa      	ldrb	r2, [r7, #7]
 8007ebe:	4906      	ldr	r1, [pc, #24]	@ (8007ed8 <disk_ioctl+0x38>)
 8007ec0:	440a      	add	r2, r1
 8007ec2:	7a10      	ldrb	r0, [r2, #8]
 8007ec4:	79b9      	ldrb	r1, [r7, #6]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20004554 	.word	0x20004554

08007edc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007eec:	89fb      	ldrh	r3, [r7, #14]
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	b21a      	sxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b21b      	sxth	r3, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007efe:	89fb      	ldrh	r3, [r7, #14]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3303      	adds	r3, #3
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	3202      	adds	r2, #2
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	3201      	adds	r2, #1
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f44:	68fb      	ldr	r3, [r7, #12]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	887a      	ldrh	r2, [r7, #2]
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	887b      	ldrh	r3, [r7, #2]
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	701a      	strb	r2, [r3, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	607a      	str	r2, [r7, #4]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	0a1b      	lsrs	r3, r3, #8
 8007fc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	701a      	strb	r2, [r3, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00d      	beq.n	8008016 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	1c53      	adds	r3, r2, #1
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	1c59      	adds	r1, r3, #1
 8008004:	6179      	str	r1, [r7, #20]
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3b01      	subs	r3, #1
 800800e:	607b      	str	r3, [r7, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f1      	bne.n	8007ffa <mem_cpy+0x1a>
	}
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008022:	b480      	push	{r7}
 8008024:	b087      	sub	sp, #28
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	617a      	str	r2, [r7, #20]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3b01      	subs	r3, #1
 8008042:	607b      	str	r3, [r7, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f3      	bne.n	8008032 <mem_set+0x10>
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	371c      	adds	r7, #28
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008058:	b480      	push	{r7}
 800805a:	b089      	sub	sp, #36	@ 0x24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	61fb      	str	r3, [r7, #28]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	61fa      	str	r2, [r7, #28]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	4619      	mov	r1, r3
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	61ba      	str	r2, [r7, #24]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	1acb      	subs	r3, r1, r3
 8008084:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3b01      	subs	r3, #1
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <mem_cmp+0x40>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0eb      	beq.n	8008070 <mem_cmp+0x18>

	return r;
 8008098:	697b      	ldr	r3, [r7, #20]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3724      	adds	r7, #36	@ 0x24
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80080b0:	e002      	b.n	80080b8 <chk_chr+0x12>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3301      	adds	r3, #1
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <chk_chr+0x26>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d1f2      	bne.n	80080b2 <chk_chr+0xc>
	return *str;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	781b      	ldrb	r3, [r3, #0]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e029      	b.n	8008144 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80080f0:	4a27      	ldr	r2, [pc, #156]	@ (8008190 <chk_lock+0xb4>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	4413      	add	r3, r2
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01d      	beq.n	800813a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80080fe:	4a24      	ldr	r2, [pc, #144]	@ (8008190 <chk_lock+0xb4>)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	4413      	add	r3, r2
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d116      	bne.n	800813e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008110:	4a1f      	ldr	r2, [pc, #124]	@ (8008190 <chk_lock+0xb4>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	4413      	add	r3, r2
 8008118:	3304      	adds	r3, #4
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008120:	429a      	cmp	r2, r3
 8008122:	d10c      	bne.n	800813e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008124:	4a1a      	ldr	r2, [pc, #104]	@ (8008190 <chk_lock+0xb4>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	4413      	add	r3, r2
 800812c:	3308      	adds	r3, #8
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008134:	429a      	cmp	r2, r3
 8008136:	d102      	bne.n	800813e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008138:	e007      	b.n	800814a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800813a:	2301      	movs	r3, #1
 800813c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d9d2      	bls.n	80080f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d109      	bne.n	8008164 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <chk_lock+0x80>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d101      	bne.n	8008160 <chk_lock+0x84>
 800815c:	2300      	movs	r3, #0
 800815e:	e010      	b.n	8008182 <chk_lock+0xa6>
 8008160:	2312      	movs	r3, #18
 8008162:	e00e      	b.n	8008182 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <chk_lock+0xa0>
 800816a:	4a09      	ldr	r2, [pc, #36]	@ (8008190 <chk_lock+0xb4>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	4413      	add	r3, r2
 8008172:	330c      	adds	r3, #12
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800817a:	d101      	bne.n	8008180 <chk_lock+0xa4>
 800817c:	2310      	movs	r3, #16
 800817e:	e000      	b.n	8008182 <chk_lock+0xa6>
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20004534 	.word	0x20004534

08008194 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800819a:	2300      	movs	r3, #0
 800819c:	607b      	str	r3, [r7, #4]
 800819e:	e002      	b.n	80081a6 <enq_lock+0x12>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3301      	adds	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d806      	bhi.n	80081ba <enq_lock+0x26>
 80081ac:	4a09      	ldr	r2, [pc, #36]	@ (80081d4 <enq_lock+0x40>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	4413      	add	r3, r2
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f2      	bne.n	80081a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	bf14      	ite	ne
 80081c0:	2301      	movne	r3, #1
 80081c2:	2300      	moveq	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20004534 	.word	0x20004534

080081d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	e01f      	b.n	8008228 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80081e8:	4a41      	ldr	r2, [pc, #260]	@ (80082f0 <inc_lock+0x118>)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	4413      	add	r3, r2
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d113      	bne.n	8008222 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80081fa:	4a3d      	ldr	r2, [pc, #244]	@ (80082f0 <inc_lock+0x118>)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	4413      	add	r3, r2
 8008202:	3304      	adds	r3, #4
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800820a:	429a      	cmp	r2, r3
 800820c:	d109      	bne.n	8008222 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800820e:	4a38      	ldr	r2, [pc, #224]	@ (80082f0 <inc_lock+0x118>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	4413      	add	r3, r2
 8008216:	3308      	adds	r3, #8
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800821e:	429a      	cmp	r2, r3
 8008220:	d006      	beq.n	8008230 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d9dc      	bls.n	80081e8 <inc_lock+0x10>
 800822e:	e000      	b.n	8008232 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008230:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d132      	bne.n	800829e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e002      	b.n	8008244 <inc_lock+0x6c>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d806      	bhi.n	8008258 <inc_lock+0x80>
 800824a:	4a29      	ldr	r2, [pc, #164]	@ (80082f0 <inc_lock+0x118>)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	4413      	add	r3, r2
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f2      	bne.n	800823e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d101      	bne.n	8008262 <inc_lock+0x8a>
 800825e:	2300      	movs	r3, #0
 8008260:	e040      	b.n	80082e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4922      	ldr	r1, [pc, #136]	@ (80082f0 <inc_lock+0x118>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	440b      	add	r3, r1
 800826e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	491e      	ldr	r1, [pc, #120]	@ (80082f0 <inc_lock+0x118>)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	440b      	add	r3, r1
 800827c:	3304      	adds	r3, #4
 800827e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	695a      	ldr	r2, [r3, #20]
 8008284:	491a      	ldr	r1, [pc, #104]	@ (80082f0 <inc_lock+0x118>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	440b      	add	r3, r1
 800828c:	3308      	adds	r3, #8
 800828e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008290:	4a17      	ldr	r2, [pc, #92]	@ (80082f0 <inc_lock+0x118>)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	4413      	add	r3, r2
 8008298:	330c      	adds	r3, #12
 800829a:	2200      	movs	r2, #0
 800829c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <inc_lock+0xe0>
 80082a4:	4a12      	ldr	r2, [pc, #72]	@ (80082f0 <inc_lock+0x118>)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	4413      	add	r3, r2
 80082ac:	330c      	adds	r3, #12
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <inc_lock+0xe0>
 80082b4:	2300      	movs	r3, #0
 80082b6:	e015      	b.n	80082e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d108      	bne.n	80082d0 <inc_lock+0xf8>
 80082be:	4a0c      	ldr	r2, [pc, #48]	@ (80082f0 <inc_lock+0x118>)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	4413      	add	r3, r2
 80082c6:	330c      	adds	r3, #12
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	3301      	adds	r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	e001      	b.n	80082d4 <inc_lock+0xfc>
 80082d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082d4:	4906      	ldr	r1, [pc, #24]	@ (80082f0 <inc_lock+0x118>)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	440b      	add	r3, r1
 80082dc:	330c      	adds	r3, #12
 80082de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20004534 	.word	0x20004534

080082f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3b01      	subs	r3, #1
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d825      	bhi.n	8008354 <dec_lock+0x60>
		n = Files[i].ctr;
 8008308:	4a17      	ldr	r2, [pc, #92]	@ (8008368 <dec_lock+0x74>)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	4413      	add	r3, r2
 8008310:	330c      	adds	r3, #12
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008316:	89fb      	ldrh	r3, [r7, #14]
 8008318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800831c:	d101      	bne.n	8008322 <dec_lock+0x2e>
 800831e:	2300      	movs	r3, #0
 8008320:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008322:	89fb      	ldrh	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <dec_lock+0x3a>
 8008328:	89fb      	ldrh	r3, [r7, #14]
 800832a:	3b01      	subs	r3, #1
 800832c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800832e:	4a0e      	ldr	r2, [pc, #56]	@ (8008368 <dec_lock+0x74>)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	4413      	add	r3, r2
 8008336:	330c      	adds	r3, #12
 8008338:	89fa      	ldrh	r2, [r7, #14]
 800833a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800833c:	89fb      	ldrh	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <dec_lock+0x5a>
 8008342:	4a09      	ldr	r2, [pc, #36]	@ (8008368 <dec_lock+0x74>)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	4413      	add	r3, r2
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	737b      	strb	r3, [r7, #13]
 8008352:	e001      	b.n	8008358 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008354:	2302      	movs	r3, #2
 8008356:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008358:	7b7b      	ldrb	r3, [r7, #13]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20004534 	.word	0x20004534

0800836c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e010      	b.n	800839c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800837a:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <clear_lock+0x44>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	4413      	add	r3, r2
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d105      	bne.n	8008396 <clear_lock+0x2a>
 800838a:	4a09      	ldr	r2, [pc, #36]	@ (80083b0 <clear_lock+0x44>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	4413      	add	r3, r2
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d9eb      	bls.n	800837a <clear_lock+0xe>
	}
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20004534 	.word	0x20004534

080083b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	78db      	ldrb	r3, [r3, #3]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d034      	beq.n	8008432 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7858      	ldrb	r0, [r3, #1]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80083d8:	2301      	movs	r3, #1
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	f7ff fd40 	bl	8007e60 <disk_write>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	e022      	b.n	8008432 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	1ad2      	subs	r2, r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d217      	bcs.n	8008432 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	789b      	ldrb	r3, [r3, #2]
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	e010      	b.n	800842c <sync_window+0x78>
					wsect += fs->fsize;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4413      	add	r3, r2
 8008412:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	7858      	ldrb	r0, [r3, #1]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800841e:	2301      	movs	r3, #1
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	f7ff fd1d 	bl	8007e60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3b01      	subs	r3, #1
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d8eb      	bhi.n	800840a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008432:	7bfb      	ldrb	r3, [r7, #15]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	429a      	cmp	r2, r3
 8008452:	d01b      	beq.n	800848c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff ffad 	bl	80083b4 <sync_window>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d113      	bne.n	800848c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7858      	ldrb	r0, [r3, #1]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800846e:	2301      	movs	r3, #1
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	f7ff fcd5 	bl	8007e20 <disk_read>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800847c:	f04f 33ff 	mov.w	r3, #4294967295
 8008480:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff ff87 	bl	80083b4 <sync_window>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d159      	bne.n	8008564 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d149      	bne.n	800854c <sync_fs+0xb4>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	791b      	ldrb	r3, [r3, #4]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d145      	bne.n	800854c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	899b      	ldrh	r3, [r3, #12]
 80084ca:	461a      	mov	r2, r3
 80084cc:	2100      	movs	r1, #0
 80084ce:	f7ff fda8 	bl	8008022 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3334      	adds	r3, #52	@ 0x34
 80084d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80084da:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fd37 	bl	8007f52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3334      	adds	r3, #52	@ 0x34
 80084e8:	4921      	ldr	r1, [pc, #132]	@ (8008570 <sync_fs+0xd8>)
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fd4c 	bl	8007f88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3334      	adds	r3, #52	@ 0x34
 80084f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80084f8:	491e      	ldr	r1, [pc, #120]	@ (8008574 <sync_fs+0xdc>)
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff fd44 	bl	8007f88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3334      	adds	r3, #52	@ 0x34
 8008504:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7ff fd3a 	bl	8007f88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3334      	adds	r3, #52	@ 0x34
 8008518:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7ff fd30 	bl	8007f88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7858      	ldrb	r0, [r3, #1]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008540:	2301      	movs	r3, #1
 8008542:	f7ff fc8d 	bl	8007e60 <disk_write>
			fs->fsi_flag = 0;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2200      	movs	r2, #0
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fca3 	bl	8007ea0 <disk_ioctl>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <sync_fs+0xcc>
 8008560:	2301      	movs	r3, #1
 8008562:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008564:	7bfb      	ldrb	r3, [r7, #15]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	41615252 	.word	0x41615252
 8008574:	61417272 	.word	0x61417272

08008578 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	3b02      	subs	r3, #2
 8008586:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	3b02      	subs	r3, #2
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d301      	bcc.n	8008598 <clust2sect+0x20>
 8008594:	2300      	movs	r3, #0
 8008596:	e008      	b.n	80085aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	895b      	ldrh	r3, [r3, #10]
 800859c:	461a      	mov	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	fb03 f202 	mul.w	r2, r3, r2
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a8:	4413      	add	r3, r2
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d904      	bls.n	80085d6 <get_fat+0x20>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80085d6:	2301      	movs	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e0ba      	b.n	8008752 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	f000 8082 	beq.w	80086f0 <get_fat+0x13a>
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	f300 80a6 	bgt.w	800873e <get_fat+0x188>
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d002      	beq.n	80085fc <get_fat+0x46>
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d055      	beq.n	80086a6 <get_fat+0xf0>
 80085fa:	e0a0      	b.n	800873e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	899b      	ldrh	r3, [r3, #12]
 8008612:	4619      	mov	r1, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	fbb3 f3f1 	udiv	r3, r3, r1
 800861a:	4413      	add	r3, r2
 800861c:	4619      	mov	r1, r3
 800861e:	6938      	ldr	r0, [r7, #16]
 8008620:	f7ff ff0c 	bl	800843c <move_window>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 808c 	bne.w	8008744 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	60fa      	str	r2, [r7, #12]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	8992      	ldrh	r2, [r2, #12]
 8008636:	fbb3 f1f2 	udiv	r1, r3, r2
 800863a:	fb01 f202 	mul.w	r2, r1, r2
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008648:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	899b      	ldrh	r3, [r3, #12]
 8008652:	4619      	mov	r1, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	fbb3 f3f1 	udiv	r3, r3, r1
 800865a:	4413      	add	r3, r2
 800865c:	4619      	mov	r1, r3
 800865e:	6938      	ldr	r0, [r7, #16]
 8008660:	f7ff feec 	bl	800843c <move_window>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d16e      	bne.n	8008748 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	899b      	ldrh	r3, [r3, #12]
 800866e:	461a      	mov	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	fbb3 f1f2 	udiv	r1, r3, r2
 8008676:	fb01 f202 	mul.w	r2, r1, r2
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4413      	add	r3, r2
 8008680:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	4313      	orrs	r3, r2
 800868a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <get_fat+0xe6>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	091b      	lsrs	r3, r3, #4
 800869a:	e002      	b.n	80086a2 <get_fat+0xec>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086a2:	617b      	str	r3, [r7, #20]
			break;
 80086a4:	e055      	b.n	8008752 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	899b      	ldrh	r3, [r3, #12]
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ba:	4413      	add	r3, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	6938      	ldr	r0, [r7, #16]
 80086c0:	f7ff febc 	bl	800843c <move_window>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d140      	bne.n	800874c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	8992      	ldrh	r2, [r2, #12]
 80086d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80086dc:	fb00 f202 	mul.w	r2, r0, r2
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	440b      	add	r3, r1
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fbf9 	bl	8007edc <ld_word>
 80086ea:	4603      	mov	r3, r0
 80086ec:	617b      	str	r3, [r7, #20]
			break;
 80086ee:	e030      	b.n	8008752 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	899b      	ldrh	r3, [r3, #12]
 80086f8:	089b      	lsrs	r3, r3, #2
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4619      	mov	r1, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	fbb3 f3f1 	udiv	r3, r3, r1
 8008704:	4413      	add	r3, r2
 8008706:	4619      	mov	r1, r3
 8008708:	6938      	ldr	r0, [r7, #16]
 800870a:	f7ff fe97 	bl	800843c <move_window>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11d      	bne.n	8008750 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	8992      	ldrh	r2, [r2, #12]
 8008722:	fbb3 f0f2 	udiv	r0, r3, r2
 8008726:	fb00 f202 	mul.w	r2, r0, r2
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	440b      	add	r3, r1
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff fbec 	bl	8007f0c <ld_dword>
 8008734:	4603      	mov	r3, r0
 8008736:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800873a:	617b      	str	r3, [r7, #20]
			break;
 800873c:	e009      	b.n	8008752 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800873e:	2301      	movs	r3, #1
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e006      	b.n	8008752 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008744:	bf00      	nop
 8008746:	e004      	b.n	8008752 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008748:	bf00      	nop
 800874a:	e002      	b.n	8008752 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800874c:	bf00      	nop
 800874e:	e000      	b.n	8008752 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008750:	bf00      	nop
		}
	}

	return val;
 8008752:	697b      	ldr	r3, [r7, #20]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b089      	sub	sp, #36	@ 0x24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008768:	2302      	movs	r3, #2
 800876a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b01      	cmp	r3, #1
 8008770:	f240 8109 	bls.w	8008986 <put_fat+0x22a>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	429a      	cmp	r2, r3
 800877c:	f080 8103 	bcs.w	8008986 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b03      	cmp	r3, #3
 8008786:	f000 80b6 	beq.w	80088f6 <put_fat+0x19a>
 800878a:	2b03      	cmp	r3, #3
 800878c:	f300 80fb 	bgt.w	8008986 <put_fat+0x22a>
 8008790:	2b01      	cmp	r3, #1
 8008792:	d003      	beq.n	800879c <put_fat+0x40>
 8008794:	2b02      	cmp	r3, #2
 8008796:	f000 8083 	beq.w	80088a0 <put_fat+0x144>
 800879a:	e0f4      	b.n	8008986 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	4413      	add	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	899b      	ldrh	r3, [r3, #12]
 80087b2:	4619      	mov	r1, r3
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ba:	4413      	add	r3, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fe3c 	bl	800843c <move_window>
 80087c4:	4603      	mov	r3, r0
 80087c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087c8:	7ffb      	ldrb	r3, [r7, #31]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f040 80d4 	bne.w	8008978 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	61ba      	str	r2, [r7, #24]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	8992      	ldrh	r2, [r2, #12]
 80087e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80087e4:	fb00 f202 	mul.w	r2, r0, r2
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	440b      	add	r3, r1
 80087ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00d      	beq.n	8008814 <put_fat+0xb8>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	b25a      	sxtb	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	b25b      	sxtb	r3, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	b25b      	sxtb	r3, r3
 8008810:	b2db      	uxtb	r3, r3
 8008812:	e001      	b.n	8008818 <put_fat+0xbc>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	899b      	ldrh	r3, [r3, #12]
 800882a:	4619      	mov	r1, r3
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008832:	4413      	add	r3, r2
 8008834:	4619      	mov	r1, r3
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7ff fe00 	bl	800843c <move_window>
 800883c:	4603      	mov	r3, r0
 800883e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008840:	7ffb      	ldrb	r3, [r7, #31]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f040 809a 	bne.w	800897c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	899b      	ldrh	r3, [r3, #12]
 8008852:	461a      	mov	r2, r3
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	fbb3 f0f2 	udiv	r0, r3, r2
 800885a:	fb00 f202 	mul.w	r2, r0, r2
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	440b      	add	r3, r1
 8008862:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <put_fat+0x11a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	091b      	lsrs	r3, r3, #4
 8008872:	b2db      	uxtb	r3, r3
 8008874:	e00e      	b.n	8008894 <put_fat+0x138>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b25b      	sxtb	r3, r3
 800887c:	f023 030f 	bic.w	r3, r3, #15
 8008880:	b25a      	sxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	b25b      	sxtb	r3, r3
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	b25b      	sxtb	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	b25b      	sxtb	r3, r3
 8008892:	b2db      	uxtb	r3, r3
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	70da      	strb	r2, [r3, #3]
			break;
 800889e:	e072      	b.n	8008986 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	899b      	ldrh	r3, [r3, #12]
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4619      	mov	r1, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80088b4:	4413      	add	r3, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fdbf 	bl	800843c <move_window>
 80088be:	4603      	mov	r3, r0
 80088c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088c2:	7ffb      	ldrb	r3, [r7, #31]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d15b      	bne.n	8008980 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	8992      	ldrh	r2, [r2, #12]
 80088d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80088da:	fb00 f202 	mul.w	r2, r0, r2
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	440b      	add	r3, r1
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	b292      	uxth	r2, r2
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fb32 	bl	8007f52 <st_word>
			fs->wflag = 1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	70da      	strb	r2, [r3, #3]
			break;
 80088f4:	e047      	b.n	8008986 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	899b      	ldrh	r3, [r3, #12]
 80088fe:	089b      	lsrs	r3, r3, #2
 8008900:	b29b      	uxth	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	fbb3 f3f1 	udiv	r3, r3, r1
 800890a:	4413      	add	r3, r2
 800890c:	4619      	mov	r1, r3
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff fd94 	bl	800843c <move_window>
 8008914:	4603      	mov	r3, r0
 8008916:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008918:	7ffb      	ldrb	r3, [r7, #31]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d132      	bne.n	8008984 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	8992      	ldrh	r2, [r2, #12]
 8008932:	fbb3 f0f2 	udiv	r0, r3, r2
 8008936:	fb00 f202 	mul.w	r2, r0, r2
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	440b      	add	r3, r1
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff fae4 	bl	8007f0c <ld_dword>
 8008944:	4603      	mov	r3, r0
 8008946:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800894a:	4323      	orrs	r3, r4
 800894c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	8992      	ldrh	r2, [r2, #12]
 800895c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008960:	fb00 f202 	mul.w	r2, r0, r2
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	440b      	add	r3, r1
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fb0c 	bl	8007f88 <st_dword>
			fs->wflag = 1;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	70da      	strb	r2, [r3, #3]
			break;
 8008976:	e006      	b.n	8008986 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008978:	bf00      	nop
 800897a:	e004      	b.n	8008986 <put_fat+0x22a>
			if (res != FR_OK) break;
 800897c:	bf00      	nop
 800897e:	e002      	b.n	8008986 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008980:	bf00      	nop
 8008982:	e000      	b.n	8008986 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008984:	bf00      	nop
		}
	}
	return res;
 8008986:	7ffb      	ldrb	r3, [r7, #31]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3724      	adds	r7, #36	@ 0x24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd90      	pop	{r4, r7, pc}

08008990 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d904      	bls.n	80089b6 <remove_chain+0x26>
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d301      	bcc.n	80089ba <remove_chain+0x2a>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e04b      	b.n	8008a52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80089c0:	f04f 32ff 	mov.w	r2, #4294967295
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	69b8      	ldr	r0, [r7, #24]
 80089c8:	f7ff fec8 	bl	800875c <put_fat>
 80089cc:	4603      	mov	r3, r0
 80089ce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80089d0:	7ffb      	ldrb	r3, [r7, #31]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <remove_chain+0x4a>
 80089d6:	7ffb      	ldrb	r3, [r7, #31]
 80089d8:	e03b      	b.n	8008a52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff fdea 	bl	80085b6 <get_fat>
 80089e2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d031      	beq.n	8008a4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <remove_chain+0x64>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e02e      	b.n	8008a52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fa:	d101      	bne.n	8008a00 <remove_chain+0x70>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e028      	b.n	8008a52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008a00:	2200      	movs	r2, #0
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	69b8      	ldr	r0, [r7, #24]
 8008a06:	f7ff fea9 	bl	800875c <put_fat>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008a0e:	7ffb      	ldrb	r3, [r7, #31]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <remove_chain+0x88>
 8008a14:	7ffb      	ldrb	r3, [r7, #31]
 8008a16:	e01c      	b.n	8008a52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	695a      	ldr	r2, [r3, #20]
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	3b02      	subs	r3, #2
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d20b      	bcs.n	8008a3e <remove_chain+0xae>
			fs->free_clst++;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	791b      	ldrb	r3, [r3, #4]
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d3c6      	bcc.n	80089da <remove_chain+0x4a>
 8008a4c:	e000      	b.n	8008a50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008a4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b088      	sub	sp, #32
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10d      	bne.n	8008a8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <create_chain+0x2c>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d31b      	bcc.n	8008abe <create_chain+0x64>
 8008a86:	2301      	movs	r3, #1
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	e018      	b.n	8008abe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fd91 	bl	80085b6 <get_fat>
 8008a94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d801      	bhi.n	8008aa0 <create_chain+0x46>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e070      	b.n	8008b82 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d101      	bne.n	8008aac <create_chain+0x52>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	e06a      	b.n	8008b82 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d201      	bcs.n	8008aba <create_chain+0x60>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	e063      	b.n	8008b82 <create_chain+0x128>
		scl = clst;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d307      	bcc.n	8008ae2 <create_chain+0x88>
				ncl = 2;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d901      	bls.n	8008ae2 <create_chain+0x88>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e04f      	b.n	8008b82 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ae2:	69f9      	ldr	r1, [r7, #28]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff fd66 	bl	80085b6 <get_fat>
 8008aea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00e      	beq.n	8008b10 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d003      	beq.n	8008b00 <create_chain+0xa6>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d101      	bne.n	8008b04 <create_chain+0xaa>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	e03e      	b.n	8008b82 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d1da      	bne.n	8008ac2 <create_chain+0x68>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e038      	b.n	8008b82 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008b10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	69f9      	ldr	r1, [r7, #28]
 8008b18:	6938      	ldr	r0, [r7, #16]
 8008b1a:	f7ff fe1f 	bl	800875c <put_fat>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d109      	bne.n	8008b3c <create_chain+0xe2>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6938      	ldr	r0, [r7, #16]
 8008b34:	f7ff fe12 	bl	800875c <put_fat>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d116      	bne.n	8008b70 <create_chain+0x116>
		fs->last_clst = ncl;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	695a      	ldr	r2, [r3, #20]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	3b02      	subs	r3, #2
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d804      	bhi.n	8008b60 <create_chain+0x106>
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	1e5a      	subs	r2, r3, #1
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	791b      	ldrb	r3, [r3, #4]
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	711a      	strb	r2, [r3, #4]
 8008b6e:	e007      	b.n	8008b80 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d102      	bne.n	8008b7c <create_chain+0x122>
 8008b76:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7a:	e000      	b.n	8008b7e <create_chain+0x124>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008b80:	69fb      	ldr	r3, [r7, #28]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b087      	sub	sp, #28
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	899b      	ldrh	r3, [r3, #12]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	8952      	ldrh	r2, [r2, #10]
 8008bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	1d1a      	adds	r2, r3, #4
 8008bbc:	613a      	str	r2, [r7, #16]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <clmt_clust+0x42>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e010      	b.n	8008bee <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d307      	bcc.n	8008be4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	3304      	adds	r3, #4
 8008be0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008be2:	e7e9      	b.n	8008bb8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008be4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	4413      	add	r3, r2
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b086      	sub	sp, #24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c10:	d204      	bcs.n	8008c1c <dir_sdi+0x22>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	f003 031f 	and.w	r3, r3, #31
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e071      	b.n	8008d04 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <dir_sdi+0x46>
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d902      	bls.n	8008c40 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10c      	bne.n	8008c60 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	095b      	lsrs	r3, r3, #5
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	8912      	ldrh	r2, [r2, #8]
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d301      	bcc.n	8008c56 <dir_sdi+0x5c>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e056      	b.n	8008d04 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	61da      	str	r2, [r3, #28]
 8008c5e:	e02d      	b.n	8008cbc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	895b      	ldrh	r3, [r3, #10]
 8008c64:	461a      	mov	r2, r3
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	899b      	ldrh	r3, [r3, #12]
 8008c6a:	fb02 f303 	mul.w	r3, r2, r3
 8008c6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c70:	e019      	b.n	8008ca6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6979      	ldr	r1, [r7, #20]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fc9d 	bl	80085b6 <get_fat>
 8008c7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c84:	d101      	bne.n	8008c8a <dir_sdi+0x90>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e03c      	b.n	8008d04 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d904      	bls.n	8008c9a <dir_sdi+0xa0>
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d301      	bcc.n	8008c9e <dir_sdi+0xa4>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e032      	b.n	8008d04 <dir_sdi+0x10a>
			ofs -= csz;
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d2e1      	bcs.n	8008c72 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008cae:	6979      	ldr	r1, [r7, #20]
 8008cb0:	6938      	ldr	r0, [r7, #16]
 8008cb2:	f7ff fc61 	bl	8008578 <clust2sect>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <dir_sdi+0xd4>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e01a      	b.n	8008d04 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69da      	ldr	r2, [r3, #28]
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	899b      	ldrh	r3, [r3, #12]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cde:	441a      	add	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	899b      	ldrh	r3, [r3, #12]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cf6:	fb00 f202 	mul.w	r2, r0, r2
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	18ca      	adds	r2, r1, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	3320      	adds	r3, #32
 8008d22:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <dir_next+0x28>
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d32:	d301      	bcc.n	8008d38 <dir_next+0x2c>
 8008d34:	2304      	movs	r3, #4
 8008d36:	e0bb      	b.n	8008eb0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	899b      	ldrh	r3, [r3, #12]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d44:	fb01 f202 	mul.w	r2, r1, r2
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f040 809d 	bne.w	8008e8a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	8912      	ldrh	r2, [r2, #8]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	f0c0 808d 	bcc.w	8008e8a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	61da      	str	r2, [r3, #28]
 8008d76:	2304      	movs	r3, #4
 8008d78:	e09a      	b.n	8008eb0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	899b      	ldrh	r3, [r3, #12]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	8952      	ldrh	r2, [r2, #10]
 8008d8a:	3a01      	subs	r2, #1
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d17b      	bne.n	8008e8a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7ff fc0b 	bl	80085b6 <get_fat>
 8008da0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d801      	bhi.n	8008dac <dir_next+0xa0>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e081      	b.n	8008eb0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d101      	bne.n	8008db8 <dir_next+0xac>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e07b      	b.n	8008eb0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d359      	bcc.n	8008e76 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	61da      	str	r2, [r3, #28]
 8008dce:	2304      	movs	r3, #4
 8008dd0:	e06e      	b.n	8008eb0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f7ff fe3d 	bl	8008a5a <create_chain>
 8008de0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <dir_next+0xe0>
 8008de8:	2307      	movs	r3, #7
 8008dea:	e061      	b.n	8008eb0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <dir_next+0xea>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e05c      	b.n	8008eb0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d101      	bne.n	8008e02 <dir_next+0xf6>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e056      	b.n	8008eb0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fad6 	bl	80083b4 <sync_window>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <dir_next+0x106>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e04e      	b.n	8008eb0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	899b      	ldrh	r3, [r3, #12]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	2100      	movs	r1, #0
 8008e20:	f7ff f8ff 	bl	8008022 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e24:	2300      	movs	r3, #0
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	6979      	ldr	r1, [r7, #20]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fba4 	bl	8008578 <clust2sect>
 8008e30:	4602      	mov	r2, r0
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e36:	e012      	b.n	8008e5e <dir_next+0x152>
						fs->wflag = 1;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f7ff fab8 	bl	80083b4 <sync_window>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <dir_next+0x142>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e030      	b.n	8008eb0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	3301      	adds	r3, #1
 8008e52:	613b      	str	r3, [r7, #16]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	895b      	ldrh	r3, [r3, #10]
 8008e62:	461a      	mov	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d3e6      	bcc.n	8008e38 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad2      	subs	r2, r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008e7c:	6979      	ldr	r1, [r7, #20]
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fb7a 	bl	8008578 <clust2sect>
 8008e84:	4602      	mov	r2, r0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	899b      	ldrh	r3, [r3, #12]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ea2:	fb00 f202 	mul.w	r2, r0, r2
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	18ca      	adds	r2, r1, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff fe95 	bl	8008bfa <dir_sdi>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d12b      	bne.n	8008f32 <dir_alloc+0x7a>
		n = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff faa9 	bl	800843c <move_window>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d11d      	bne.n	8008f30 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2be5      	cmp	r3, #229	@ 0xe5
 8008efc:	d004      	beq.n	8008f08 <dir_alloc+0x50>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d107      	bne.n	8008f18 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d102      	bne.n	8008f1c <dir_alloc+0x64>
 8008f16:	e00c      	b.n	8008f32 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008f18:	2300      	movs	r3, #0
 8008f1a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fef4 	bl	8008d0c <dir_next>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0d7      	beq.n	8008ede <dir_alloc+0x26>
 8008f2e:	e000      	b.n	8008f32 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008f30:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d101      	bne.n	8008f3c <dir_alloc+0x84>
 8008f38:	2307      	movs	r3, #7
 8008f3a:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	331a      	adds	r3, #26
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe ffc1 	bl	8007edc <ld_word>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d109      	bne.n	8008f7a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	3314      	adds	r3, #20
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe ffb6 	bl	8007edc <ld_word>
 8008f70:	4603      	mov	r3, r0
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	331a      	adds	r3, #26
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	b292      	uxth	r2, r2
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe ffd9 	bl	8007f52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d109      	bne.n	8008fbc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f103 0214 	add.w	r2, r3, #20
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	0c1b      	lsrs	r3, r3, #16
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7fe ffcb 	bl	8007f52 <st_word>
	}
}
 8008fbc:	bf00      	nop
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff fe10 	bl	8008bfa <dir_sdi>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <dir_find+0x24>
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	e03e      	b.n	8009066 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	4619      	mov	r1, r3
 8008fee:	6938      	ldr	r0, [r7, #16]
 8008ff0:	f7ff fa24 	bl	800843c <move_window>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d12f      	bne.n	800905e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <dir_find+0x4e>
 800900c:	2304      	movs	r3, #4
 800900e:	75fb      	strb	r3, [r7, #23]
 8009010:	e028      	b.n	8009064 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	330b      	adds	r3, #11
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800901e:	b2da      	uxtb	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	330b      	adds	r3, #11
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <dir_find+0x86>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a18      	ldr	r0, [r3, #32]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3324      	adds	r3, #36	@ 0x24
 800903c:	220b      	movs	r2, #11
 800903e:	4619      	mov	r1, r3
 8009040:	f7ff f80a 	bl	8008058 <mem_cmp>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800904a:	2100      	movs	r1, #0
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fe5d 	bl	8008d0c <dir_next>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0c5      	beq.n	8008fe8 <dir_find+0x24>
 800905c:	e002      	b.n	8009064 <dir_find+0xa0>
		if (res != FR_OK) break;
 800905e:	bf00      	nop
 8009060:	e000      	b.n	8009064 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009062:	bf00      	nop

	return res;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800907c:	2101      	movs	r1, #1
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff ff1a 	bl	8008eb8 <dir_alloc>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d11c      	bne.n	80090c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	4619      	mov	r1, r3
 8009094:	68b8      	ldr	r0, [r7, #8]
 8009096:	f7ff f9d1 	bl	800843c <move_window>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d111      	bne.n	80090c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	2220      	movs	r2, #32
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe ffb8 	bl	8008022 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a18      	ldr	r0, [r3, #32]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3324      	adds	r3, #36	@ 0x24
 80090ba:	220b      	movs	r2, #11
 80090bc:	4619      	mov	r1, r3
 80090be:	f7fe ff8f 	bl	8007fe0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2201      	movs	r2, #1
 80090c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2200      	movs	r2, #0
 80090e0:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d04f      	beq.n	800918a <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80090f2:	e022      	b.n	800913a <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1a      	ldr	r2, [r3, #32]
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	1c59      	adds	r1, r3, #1
 80090fc:	6179      	str	r1, [r7, #20]
 80090fe:	4413      	add	r3, r2
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	2b20      	cmp	r3, #32
 8009108:	d016      	beq.n	8009138 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	2b05      	cmp	r3, #5
 800910e:	d101      	bne.n	8009114 <get_fileinfo+0x42>
 8009110:	23e5      	movs	r3, #229	@ 0xe5
 8009112:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2b09      	cmp	r3, #9
 8009118:	d106      	bne.n	8009128 <get_fileinfo+0x56>
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	613a      	str	r2, [r7, #16]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	4413      	add	r3, r2
 8009124:	222e      	movs	r2, #46	@ 0x2e
 8009126:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	613a      	str	r2, [r7, #16]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	4413      	add	r3, r2
 8009132:	7bfa      	ldrb	r2, [r7, #15]
 8009134:	725a      	strb	r2, [r3, #9]
 8009136:	e000      	b.n	800913a <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8009138:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b0a      	cmp	r3, #10
 800913e:	d9d9      	bls.n	80090f4 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	4413      	add	r3, r2
 8009146:	3309      	adds	r3, #9
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	7ada      	ldrb	r2, [r3, #11]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	331c      	adds	r3, #28
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fed5 	bl	8007f0c <ld_dword>
 8009162:	4602      	mov	r2, r0
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	3316      	adds	r3, #22
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fecc 	bl	8007f0c <ld_dword>
 8009174:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	b29a      	uxth	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	80da      	strh	r2, [r3, #6]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	b29a      	uxth	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	809a      	strh	r2, [r3, #4]
 8009188:	e000      	b.n	800918c <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800918a:	bf00      	nop
}
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3324      	adds	r3, #36	@ 0x24
 80091a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80091aa:	220b      	movs	r2, #11
 80091ac:	2120      	movs	r1, #32
 80091ae:	68b8      	ldr	r0, [r7, #8]
 80091b0:	f7fe ff37 	bl	8008022 <mem_set>
	si = i = 0; ni = 8;
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	2308      	movs	r3, #8
 80091be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	61fa      	str	r2, [r7, #28]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091ce:	7efb      	ldrb	r3, [r7, #27]
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	d94e      	bls.n	8009272 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80091d4:	7efb      	ldrb	r3, [r7, #27]
 80091d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80091d8:	d006      	beq.n	80091e8 <create_name+0x54>
 80091da:	7efb      	ldrb	r3, [r7, #27]
 80091dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80091de:	d110      	bne.n	8009202 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80091e0:	e002      	b.n	80091e8 <create_name+0x54>
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	3301      	adds	r3, #1
 80091e6:	61fb      	str	r3, [r7, #28]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80091f2:	d0f6      	beq.n	80091e2 <create_name+0x4e>
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80091fe:	d0f0      	beq.n	80091e2 <create_name+0x4e>
			break;
 8009200:	e038      	b.n	8009274 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009202:	7efb      	ldrb	r3, [r7, #27]
 8009204:	2b2e      	cmp	r3, #46	@ 0x2e
 8009206:	d003      	beq.n	8009210 <create_name+0x7c>
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	429a      	cmp	r2, r3
 800920e:	d30c      	bcc.n	800922a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b0b      	cmp	r3, #11
 8009214:	d002      	beq.n	800921c <create_name+0x88>
 8009216:	7efb      	ldrb	r3, [r7, #27]
 8009218:	2b2e      	cmp	r3, #46	@ 0x2e
 800921a:	d001      	beq.n	8009220 <create_name+0x8c>
 800921c:	2306      	movs	r3, #6
 800921e:	e044      	b.n	80092aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009220:	2308      	movs	r3, #8
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	230b      	movs	r3, #11
 8009226:	617b      	str	r3, [r7, #20]
			continue;
 8009228:	e022      	b.n	8009270 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800922a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da04      	bge.n	800923c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009232:	7efb      	ldrb	r3, [r7, #27]
 8009234:	3b80      	subs	r3, #128	@ 0x80
 8009236:	4a1f      	ldr	r2, [pc, #124]	@ (80092b4 <create_name+0x120>)
 8009238:	5cd3      	ldrb	r3, [r2, r3]
 800923a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800923c:	7efb      	ldrb	r3, [r7, #27]
 800923e:	4619      	mov	r1, r3
 8009240:	481d      	ldr	r0, [pc, #116]	@ (80092b8 <create_name+0x124>)
 8009242:	f7fe ff30 	bl	80080a6 <chk_chr>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <create_name+0xbc>
 800924c:	2306      	movs	r3, #6
 800924e:	e02c      	b.n	80092aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009250:	7efb      	ldrb	r3, [r7, #27]
 8009252:	2b60      	cmp	r3, #96	@ 0x60
 8009254:	d905      	bls.n	8009262 <create_name+0xce>
 8009256:	7efb      	ldrb	r3, [r7, #27]
 8009258:	2b7a      	cmp	r3, #122	@ 0x7a
 800925a:	d802      	bhi.n	8009262 <create_name+0xce>
 800925c:	7efb      	ldrb	r3, [r7, #27]
 800925e:	3b20      	subs	r3, #32
 8009260:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	613a      	str	r2, [r7, #16]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	4413      	add	r3, r2
 800926c:	7efa      	ldrb	r2, [r7, #27]
 800926e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009270:	e7a6      	b.n	80091c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009272:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	441a      	add	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <create_name+0xf4>
 8009284:	2306      	movs	r3, #6
 8009286:	e010      	b.n	80092aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2be5      	cmp	r3, #229	@ 0xe5
 800928e:	d102      	bne.n	8009296 <create_name+0x102>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2205      	movs	r2, #5
 8009294:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009296:	7efb      	ldrb	r3, [r7, #27]
 8009298:	2b20      	cmp	r3, #32
 800929a:	d801      	bhi.n	80092a0 <create_name+0x10c>
 800929c:	2204      	movs	r2, #4
 800929e:	e000      	b.n	80092a2 <create_name+0x10e>
 80092a0:	2200      	movs	r2, #0
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	330b      	adds	r3, #11
 80092a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80092a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	0800bd94 	.word	0x0800bd94
 80092b8:	0800bc68 	.word	0x0800bc68

080092bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80092d0:	e002      	b.n	80092d8 <follow_path+0x1c>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80092de:	d0f8      	beq.n	80092d2 <follow_path+0x16>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80092e6:	d0f4      	beq.n	80092d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2200      	movs	r2, #0
 80092ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b1f      	cmp	r3, #31
 80092f4:	d80a      	bhi.n	800930c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2280      	movs	r2, #128	@ 0x80
 80092fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff fc7a 	bl	8008bfa <dir_sdi>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
 800930a:	e048      	b.n	800939e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800930c:	463b      	mov	r3, r7
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff ff3f 	bl	8009194 <create_name>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d139      	bne.n	8009394 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff fe4f 	bl	8008fc4 <dir_find>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009330:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	2b04      	cmp	r3, #4
 800933c:	d12c      	bne.n	8009398 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d127      	bne.n	8009398 <follow_path+0xdc>
 8009348:	2305      	movs	r3, #5
 800934a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800934c:	e024      	b.n	8009398 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800934e:	7afb      	ldrb	r3, [r7, #11]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d121      	bne.n	800939c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	799b      	ldrb	r3, [r3, #6]
 800935c:	f003 0310 	and.w	r3, r3, #16
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009364:	2305      	movs	r3, #5
 8009366:	75fb      	strb	r3, [r7, #23]
 8009368:	e019      	b.n	800939e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	8992      	ldrh	r2, [r2, #12]
 8009378:	fbb3 f0f2 	udiv	r0, r3, r2
 800937c:	fb00 f202 	mul.w	r2, r0, r2
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	440b      	add	r3, r1
 8009384:	4619      	mov	r1, r3
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fddd 	bl	8008f46 <ld_clust>
 800938c:	4602      	mov	r2, r0
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009392:	e7bb      	b.n	800930c <follow_path+0x50>
			if (res != FR_OK) break;
 8009394:	bf00      	nop
 8009396:	e002      	b.n	800939e <follow_path+0xe2>
				break;
 8009398:	bf00      	nop
 800939a:	e000      	b.n	800939e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800939c:	bf00      	nop
			}
		}
	}

	return res;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80093b0:	f04f 33ff 	mov.w	r3, #4294967295
 80093b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d031      	beq.n	8009422 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e002      	b.n	80093cc <get_ldnumber+0x24>
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	3301      	adds	r3, #1
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d903      	bls.n	80093dc <get_ldnumber+0x34>
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80093da:	d1f4      	bne.n	80093c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80093e2:	d11c      	bne.n	800941e <get_ldnumber+0x76>
			tp = *path;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	60fa      	str	r2, [r7, #12]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	3b30      	subs	r3, #48	@ 0x30
 80093f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	d80e      	bhi.n	800941a <get_ldnumber+0x72>
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	429a      	cmp	r2, r3
 8009402:	d10a      	bne.n	800941a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d107      	bne.n	800941a <get_ldnumber+0x72>
					vol = (int)i;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	3301      	adds	r3, #1
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	e002      	b.n	8009424 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009422:	693b      	ldr	r3, [r7, #16]
}
 8009424:	4618      	mov	r0, r3
 8009426:	371c      	adds	r7, #28
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	70da      	strb	r2, [r3, #3]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fe fff6 	bl	800843c <move_window>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <check_fs+0x2a>
 8009456:	2304      	movs	r3, #4
 8009458:	e038      	b.n	80094cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3334      	adds	r3, #52	@ 0x34
 800945e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fd3a 	bl	8007edc <ld_word>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009470:	429a      	cmp	r2, r3
 8009472:	d001      	beq.n	8009478 <check_fs+0x48>
 8009474:	2303      	movs	r3, #3
 8009476:	e029      	b.n	80094cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800947e:	2be9      	cmp	r3, #233	@ 0xe9
 8009480:	d009      	beq.n	8009496 <check_fs+0x66>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009488:	2beb      	cmp	r3, #235	@ 0xeb
 800948a:	d11e      	bne.n	80094ca <check_fs+0x9a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009492:	2b90      	cmp	r3, #144	@ 0x90
 8009494:	d119      	bne.n	80094ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3334      	adds	r3, #52	@ 0x34
 800949a:	3336      	adds	r3, #54	@ 0x36
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fd35 	bl	8007f0c <ld_dword>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80094a8:	4a0a      	ldr	r2, [pc, #40]	@ (80094d4 <check_fs+0xa4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d101      	bne.n	80094b2 <check_fs+0x82>
 80094ae:	2300      	movs	r3, #0
 80094b0:	e00c      	b.n	80094cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3334      	adds	r3, #52	@ 0x34
 80094b6:	3352      	adds	r3, #82	@ 0x52
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fd27 	bl	8007f0c <ld_dword>
 80094be:	4603      	mov	r3, r0
 80094c0:	4a05      	ldr	r2, [pc, #20]	@ (80094d8 <check_fs+0xa8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d101      	bne.n	80094ca <check_fs+0x9a>
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80094ca:	2302      	movs	r3, #2
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	00544146 	.word	0x00544146
 80094d8:	33544146 	.word	0x33544146

080094dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b096      	sub	sp, #88	@ 0x58
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff ff59 	bl	80093a8 <get_ldnumber>
 80094f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80094f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da01      	bge.n	8009502 <find_volume+0x26>
 80094fe:	230b      	movs	r3, #11
 8009500:	e262      	b.n	80099c8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009502:	4a9f      	ldr	r2, [pc, #636]	@ (8009780 <find_volume+0x2a4>)
 8009504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800950a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <find_volume+0x3a>
 8009512:	230c      	movs	r3, #12
 8009514:	e258      	b.n	80099c8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800951a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01a      	beq.n	8009562 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fc35 	bl	8007da0 <disk_status>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800953c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10c      	bne.n	8009562 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <find_volume+0x82>
 800954e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800955a:	230a      	movs	r3, #10
 800955c:	e234      	b.n	80099c8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800955e:	2300      	movs	r3, #0
 8009560:	e232      	b.n	80099c8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956a:	b2da      	uxtb	r2, r3
 800956c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe fc2d 	bl	8007dd4 <disk_initialize>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009580:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800958c:	2303      	movs	r3, #3
 800958e:	e21b      	b.n	80099c8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <find_volume+0xca>
 8009596:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80095a2:	230a      	movs	r3, #10
 80095a4:	e210      	b.n	80099c8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	7858      	ldrb	r0, [r3, #1]
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	330c      	adds	r3, #12
 80095ae:	461a      	mov	r2, r3
 80095b0:	2102      	movs	r1, #2
 80095b2:	f7fe fc75 	bl	8007ea0 <disk_ioctl>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <find_volume+0xe4>
 80095bc:	2301      	movs	r3, #1
 80095be:	e203      	b.n	80099c8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c8:	d80d      	bhi.n	80095e6 <find_volume+0x10a>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	899b      	ldrh	r3, [r3, #12]
 80095ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d2:	d308      	bcc.n	80095e6 <find_volume+0x10a>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	899b      	ldrh	r3, [r3, #12]
 80095d8:	461a      	mov	r2, r3
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	899b      	ldrh	r3, [r3, #12]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <find_volume+0x10e>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e1ee      	b.n	80099c8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80095ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80095f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095f2:	f7ff ff1d 	bl	8009430 <check_fs>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80095fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009600:	2b02      	cmp	r3, #2
 8009602:	d149      	bne.n	8009698 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009604:	2300      	movs	r3, #0
 8009606:	643b      	str	r3, [r7, #64]	@ 0x40
 8009608:	e01e      	b.n	8009648 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009618:	4413      	add	r3, r2
 800961a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	3304      	adds	r3, #4
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d006      	beq.n	8009634 <find_volume+0x158>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	3308      	adds	r3, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fc6e 	bl	8007f0c <ld_dword>
 8009630:	4602      	mov	r2, r0
 8009632:	e000      	b.n	8009636 <find_volume+0x15a>
 8009634:	2200      	movs	r2, #0
 8009636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	3358      	adds	r3, #88	@ 0x58
 800963c:	443b      	add	r3, r7
 800963e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009644:	3301      	adds	r3, #1
 8009646:	643b      	str	r3, [r7, #64]	@ 0x40
 8009648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800964a:	2b03      	cmp	r3, #3
 800964c:	d9dd      	bls.n	800960a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800964e:	2300      	movs	r3, #0
 8009650:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <find_volume+0x182>
 8009658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800965a:	3b01      	subs	r3, #1
 800965c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800965e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	3358      	adds	r3, #88	@ 0x58
 8009664:	443b      	add	r3, r7
 8009666:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800966a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800966c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <find_volume+0x1a2>
 8009672:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009674:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009676:	f7ff fedb 	bl	8009430 <check_fs>
 800967a:	4603      	mov	r3, r0
 800967c:	e000      	b.n	8009680 <find_volume+0x1a4>
 800967e:	2303      	movs	r3, #3
 8009680:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009688:	2b01      	cmp	r3, #1
 800968a:	d905      	bls.n	8009698 <find_volume+0x1bc>
 800968c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800968e:	3301      	adds	r3, #1
 8009690:	643b      	str	r3, [r7, #64]	@ 0x40
 8009692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009694:	2b03      	cmp	r3, #3
 8009696:	d9e2      	bls.n	800965e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009698:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800969c:	2b04      	cmp	r3, #4
 800969e:	d101      	bne.n	80096a4 <find_volume+0x1c8>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e191      	b.n	80099c8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d901      	bls.n	80096b0 <find_volume+0x1d4>
 80096ac:	230d      	movs	r3, #13
 80096ae:	e18b      	b.n	80099c8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	3334      	adds	r3, #52	@ 0x34
 80096b4:	330b      	adds	r3, #11
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fc10 	bl	8007edc <ld_word>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	899b      	ldrh	r3, [r3, #12]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d001      	beq.n	80096cc <find_volume+0x1f0>
 80096c8:	230d      	movs	r3, #13
 80096ca:	e17d      	b.n	80099c8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	3334      	adds	r3, #52	@ 0x34
 80096d0:	3316      	adds	r3, #22
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fc02 	bl	8007edc <ld_word>
 80096d8:	4603      	mov	r3, r0
 80096da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80096dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <find_volume+0x214>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e4:	3334      	adds	r3, #52	@ 0x34
 80096e6:	3324      	adds	r3, #36	@ 0x24
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe fc0f 	bl	8007f0c <ld_dword>
 80096ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	789b      	ldrb	r3, [r3, #2]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d005      	beq.n	8009714 <find_volume+0x238>
 8009708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970a:	789b      	ldrb	r3, [r3, #2]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d001      	beq.n	8009714 <find_volume+0x238>
 8009710:	230d      	movs	r3, #13
 8009712:	e159      	b.n	80099c8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	789b      	ldrb	r3, [r3, #2]
 8009718:	461a      	mov	r2, r3
 800971a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971c:	fb02 f303 	mul.w	r3, r2, r3
 8009720:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009728:	461a      	mov	r2, r3
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	895b      	ldrh	r3, [r3, #10]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d008      	beq.n	8009748 <find_volume+0x26c>
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	895b      	ldrh	r3, [r3, #10]
 800973a:	461a      	mov	r2, r3
 800973c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973e:	895b      	ldrh	r3, [r3, #10]
 8009740:	3b01      	subs	r3, #1
 8009742:	4013      	ands	r3, r2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <find_volume+0x270>
 8009748:	230d      	movs	r3, #13
 800974a:	e13d      	b.n	80099c8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	3334      	adds	r3, #52	@ 0x34
 8009750:	3311      	adds	r3, #17
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fbc2 	bl	8007edc <ld_word>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	891b      	ldrh	r3, [r3, #8]
 8009764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009766:	8992      	ldrh	r2, [r2, #12]
 8009768:	0952      	lsrs	r2, r2, #5
 800976a:	b292      	uxth	r2, r2
 800976c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009770:	fb01 f202 	mul.w	r2, r1, r2
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <find_volume+0x2a8>
 800977c:	230d      	movs	r3, #13
 800977e:	e123      	b.n	80099c8 <find_volume+0x4ec>
 8009780:	2000452c 	.word	0x2000452c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	3334      	adds	r3, #52	@ 0x34
 8009788:	3313      	adds	r3, #19
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fba6 	bl	8007edc <ld_word>
 8009790:	4603      	mov	r3, r0
 8009792:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <find_volume+0x2cc>
 800979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979c:	3334      	adds	r3, #52	@ 0x34
 800979e:	3320      	adds	r3, #32
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fbb3 	bl	8007f0c <ld_dword>
 80097a6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	3334      	adds	r3, #52	@ 0x34
 80097ac:	330e      	adds	r3, #14
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fb94 	bl	8007edc <ld_word>
 80097b4:	4603      	mov	r3, r0
 80097b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <find_volume+0x2e6>
 80097be:	230d      	movs	r3, #13
 80097c0:	e102      	b.n	80099c8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80097c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097c6:	4413      	add	r3, r2
 80097c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097ca:	8911      	ldrh	r1, [r2, #8]
 80097cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097ce:	8992      	ldrh	r2, [r2, #12]
 80097d0:	0952      	lsrs	r2, r2, #5
 80097d2:	b292      	uxth	r2, r2
 80097d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80097d8:	b292      	uxth	r2, r2
 80097da:	4413      	add	r3, r2
 80097dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d201      	bcs.n	80097ea <find_volume+0x30e>
 80097e6:	230d      	movs	r3, #13
 80097e8:	e0ee      	b.n	80099c8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80097ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097f2:	8952      	ldrh	r2, [r2, #10]
 80097f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80097fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <find_volume+0x328>
 8009800:	230d      	movs	r3, #13
 8009802:	e0e1      	b.n	80099c8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009804:	2303      	movs	r3, #3
 8009806:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009810:	4293      	cmp	r3, r2
 8009812:	d802      	bhi.n	800981a <find_volume+0x33e>
 8009814:	2302      	movs	r3, #2
 8009816:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009820:	4293      	cmp	r3, r2
 8009822:	d802      	bhi.n	800982a <find_volume+0x34e>
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009836:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009838:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800983a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800983c:	441a      	add	r2, r3
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009842:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	441a      	add	r2, r3
 8009848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984a:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800984c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009850:	2b03      	cmp	r3, #3
 8009852:	d11e      	bne.n	8009892 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	3334      	adds	r3, #52	@ 0x34
 8009858:	332a      	adds	r3, #42	@ 0x2a
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fb3e 	bl	8007edc <ld_word>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <find_volume+0x38e>
 8009866:	230d      	movs	r3, #13
 8009868:	e0ae      	b.n	80099c8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800986a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986c:	891b      	ldrh	r3, [r3, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <find_volume+0x39a>
 8009872:	230d      	movs	r3, #13
 8009874:	e0a8      	b.n	80099c8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009878:	3334      	adds	r3, #52	@ 0x34
 800987a:	332c      	adds	r3, #44	@ 0x2c
 800987c:	4618      	mov	r0, r3
 800987e:	f7fe fb45 	bl	8007f0c <ld_dword>
 8009882:	4602      	mov	r2, r0
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009890:	e01f      	b.n	80098d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	891b      	ldrh	r3, [r3, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <find_volume+0x3c2>
 800989a:	230d      	movs	r3, #13
 800989c:	e094      	b.n	80099c8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a4:	441a      	add	r2, r3
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d103      	bne.n	80098ba <find_volume+0x3de>
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	e00a      	b.n	80098d0 <find_volume+0x3f4>
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	699a      	ldr	r2, [r3, #24]
 80098be:	4613      	mov	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4413      	add	r3, r2
 80098c4:	085a      	lsrs	r2, r3, #1
 80098c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098d0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	69da      	ldr	r2, [r3, #28]
 80098d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d8:	899b      	ldrh	r3, [r3, #12]
 80098da:	4619      	mov	r1, r3
 80098dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098de:	440b      	add	r3, r1
 80098e0:	3b01      	subs	r3, #1
 80098e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098e4:	8989      	ldrh	r1, [r1, #12]
 80098e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d201      	bcs.n	80098f2 <find_volume+0x416>
 80098ee:	230d      	movs	r3, #13
 80098f0:	e06a      	b.n	80099c8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295
 80098f8:	615a      	str	r2, [r3, #20]
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	695a      	ldr	r2, [r3, #20]
 80098fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009900:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	2280      	movs	r2, #128	@ 0x80
 8009906:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800990c:	2b03      	cmp	r3, #3
 800990e:	d149      	bne.n	80099a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009912:	3334      	adds	r3, #52	@ 0x34
 8009914:	3330      	adds	r3, #48	@ 0x30
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fae0 	bl	8007edc <ld_word>
 800991c:	4603      	mov	r3, r0
 800991e:	2b01      	cmp	r3, #1
 8009920:	d140      	bne.n	80099a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009924:	3301      	adds	r3, #1
 8009926:	4619      	mov	r1, r3
 8009928:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800992a:	f7fe fd87 	bl	800843c <move_window>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d137      	bne.n	80099a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009936:	2200      	movs	r2, #0
 8009938:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	3334      	adds	r3, #52	@ 0x34
 800993e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe faca 	bl	8007edc <ld_word>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009950:	429a      	cmp	r2, r3
 8009952:	d127      	bne.n	80099a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	3334      	adds	r3, #52	@ 0x34
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fad7 	bl	8007f0c <ld_dword>
 800995e:	4603      	mov	r3, r0
 8009960:	4a1b      	ldr	r2, [pc, #108]	@ (80099d0 <find_volume+0x4f4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d11e      	bne.n	80099a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	3334      	adds	r3, #52	@ 0x34
 800996a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe facc 	bl	8007f0c <ld_dword>
 8009974:	4603      	mov	r3, r0
 8009976:	4a17      	ldr	r2, [pc, #92]	@ (80099d4 <find_volume+0x4f8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d113      	bne.n	80099a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800997c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997e:	3334      	adds	r3, #52	@ 0x34
 8009980:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fac1 	bl	8007f0c <ld_dword>
 800998a:	4602      	mov	r2, r0
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	3334      	adds	r3, #52	@ 0x34
 8009994:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fab7 	bl	8007f0c <ld_dword>
 800999e:	4602      	mov	r2, r0
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80099aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <find_volume+0x4fc>)
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	4b08      	ldr	r3, [pc, #32]	@ (80099d8 <find_volume+0x4fc>)
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	4b07      	ldr	r3, [pc, #28]	@ (80099d8 <find_volume+0x4fc>)
 80099ba:	881a      	ldrh	r2, [r3, #0]
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099c2:	f7fe fcd3 	bl	800836c <clear_lock>
#endif
	return FR_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3758      	adds	r7, #88	@ 0x58
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	41615252 	.word	0x41615252
 80099d4:	61417272 	.word	0x61417272
 80099d8:	20004530 	.word	0x20004530

080099dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80099e6:	2309      	movs	r3, #9
 80099e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01c      	beq.n	8009a2a <validate+0x4e>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d018      	beq.n	8009a2a <validate+0x4e>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d013      	beq.n	8009a2a <validate+0x4e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	889a      	ldrh	r2, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	88db      	ldrh	r3, [r3, #6]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d10c      	bne.n	8009a2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe f9c2 	bl	8007da0 <disk_status>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <validate+0x4e>
			res = FR_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <validate+0x5a>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	e000      	b.n	8009a38 <validate+0x5c>
 8009a36:	2300      	movs	r3, #0
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	6013      	str	r3, [r2, #0]
	return res;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a5a:	f107 0310 	add.w	r3, r7, #16
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fca2 	bl	80093a8 <get_ldnumber>
 8009a64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da01      	bge.n	8009a70 <f_mount+0x28>
 8009a6c:	230b      	movs	r3, #11
 8009a6e:	e02b      	b.n	8009ac8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a70:	4a17      	ldr	r2, [pc, #92]	@ (8009ad0 <f_mount+0x88>)
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a80:	69b8      	ldr	r0, [r7, #24]
 8009a82:	f7fe fc73 	bl	800836c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	490d      	ldr	r1, [pc, #52]	@ (8009ad0 <f_mount+0x88>)
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <f_mount+0x66>
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d001      	beq.n	8009ab2 <f_mount+0x6a>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e00a      	b.n	8009ac8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ab2:	f107 010c 	add.w	r1, r7, #12
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	2200      	movs	r2, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff fd0d 	bl	80094dc <find_volume>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	2000452c 	.word	0x2000452c

08009ad4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b098      	sub	sp, #96	@ 0x60
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <f_open+0x18>
 8009ae8:	2309      	movs	r3, #9
 8009aea:	e1b7      	b.n	8009e5c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009af2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009af4:	79fa      	ldrb	r2, [r7, #7]
 8009af6:	f107 0110 	add.w	r1, r7, #16
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fcec 	bl	80094dc <find_volume>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f040 819b 	bne.w	8009e4a <f_open+0x376>
		dj.obj.fs = fs;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	f107 0314 	add.w	r3, r7, #20
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff fbcb 	bl	80092bc <follow_path>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d118      	bne.n	8009b66 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b38:	b25b      	sxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da03      	bge.n	8009b46 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009b3e:	2306      	movs	r3, #6
 8009b40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009b44:	e00f      	b.n	8009b66 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	bf8c      	ite	hi
 8009b4c:	2301      	movhi	r3, #1
 8009b4e:	2300      	movls	r3, #0
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	461a      	mov	r2, r3
 8009b54:	f107 0314 	add.w	r3, r7, #20
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fabe 	bl	80080dc <chk_lock>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	f003 031c 	and.w	r3, r3, #28
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d07f      	beq.n	8009c70 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009b70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d017      	beq.n	8009ba8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009b78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d10e      	bne.n	8009b9e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b80:	f7fe fb08 	bl	8008194 <enq_lock>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d006      	beq.n	8009b98 <f_open+0xc4>
 8009b8a:	f107 0314 	add.w	r3, r7, #20
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fa6d 	bl	800906e <dir_register>
 8009b94:	4603      	mov	r3, r0
 8009b96:	e000      	b.n	8009b9a <f_open+0xc6>
 8009b98:	2312      	movs	r3, #18
 8009b9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	f043 0308 	orr.w	r3, r3, #8
 8009ba4:	71fb      	strb	r3, [r7, #7]
 8009ba6:	e010      	b.n	8009bca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ba8:	7ebb      	ldrb	r3, [r7, #26]
 8009baa:	f003 0311 	and.w	r3, r3, #17
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <f_open+0xe6>
					res = FR_DENIED;
 8009bb2:	2307      	movs	r3, #7
 8009bb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009bb8:	e007      	b.n	8009bca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <f_open+0xf6>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009bca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d168      	bne.n	8009ca4 <f_open+0x1d0>
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d063      	beq.n	8009ca4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009bdc:	f7fd ff74 	bl	8007ac8 <get_fattime>
 8009be0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be4:	330e      	adds	r3, #14
 8009be6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe f9cd 	bl	8007f88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf0:	3316      	adds	r3, #22
 8009bf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe f9c7 	bl	8007f88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bfc:	330b      	adds	r3, #11
 8009bfe:	2220      	movs	r2, #32
 8009c00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff f99c 	bl	8008f46 <ld_clust>
 8009c0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009c14:	2200      	movs	r2, #0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff f9b4 	bl	8008f84 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1e:	331c      	adds	r3, #28
 8009c20:	2100      	movs	r1, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe f9b0 	bl	8007f88 <st_dword>
					fs->wflag = 1;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d037      	beq.n	8009ca4 <f_open+0x1d0>
						dw = fs->winsect;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c38:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009c3a:	f107 0314 	add.w	r3, r7, #20
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fea4 	bl	8008990 <remove_chain>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d126      	bne.n	8009ca4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe fbee 	bl	800843c <move_window>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c6a:	3a01      	subs	r2, #1
 8009c6c:	611a      	str	r2, [r3, #16]
 8009c6e:	e019      	b.n	8009ca4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009c70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d115      	bne.n	8009ca4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009c78:	7ebb      	ldrb	r3, [r7, #26]
 8009c7a:	f003 0310 	and.w	r3, r3, #16
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <f_open+0x1b6>
					res = FR_NO_FILE;
 8009c82:	2304      	movs	r3, #4
 8009c84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009c88:	e00c      	b.n	8009ca4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <f_open+0x1d0>
 8009c94:	7ebb      	ldrb	r3, [r7, #26]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <f_open+0x1d0>
						res = FR_DENIED;
 8009c9e:	2307      	movs	r3, #7
 8009ca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d126      	bne.n	8009cfa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	f003 0308 	and.w	r3, r3, #8
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	bf8c      	ite	hi
 8009cd2:	2301      	movhi	r3, #1
 8009cd4:	2300      	movls	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	f107 0314 	add.w	r3, r7, #20
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fa79 	bl	80081d8 <inc_lock>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <f_open+0x226>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009cfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f040 80a3 	bne.w	8009e4a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff f91b 	bl	8008f46 <ld_clust>
 8009d10:	4602      	mov	r2, r0
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d18:	331c      	adds	r3, #28
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe f8f6 	bl	8007f0c <ld_dword>
 8009d20:	4602      	mov	r2, r0
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	88da      	ldrh	r2, [r3, #6]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	79fa      	ldrb	r2, [r7, #7]
 8009d3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3330      	adds	r3, #48	@ 0x30
 8009d56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe f960 	bl	8008022 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d06e      	beq.n	8009e4a <f_open+0x376>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d06a      	beq.n	8009e4a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	895b      	ldrh	r3, [r3, #10]
 8009d80:	461a      	mov	r2, r3
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	899b      	ldrh	r3, [r3, #12]
 8009d86:	fb02 f303 	mul.w	r3, r2, r3
 8009d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d98:	e016      	b.n	8009dc8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fc09 	bl	80085b6 <get_fat>
 8009da4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d802      	bhi.n	8009db2 <f_open+0x2de>
 8009dac:	2302      	movs	r3, #2
 8009dae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d102      	bne.n	8009dc0 <f_open+0x2ec>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <f_open+0x304>
 8009dd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d8e0      	bhi.n	8009d9a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ddc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009dde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d131      	bne.n	8009e4a <f_open+0x376>
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	899b      	ldrh	r3, [r3, #12]
 8009dea:	461a      	mov	r2, r3
 8009dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8009df2:	fb01 f202 	mul.w	r2, r1, r2
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d026      	beq.n	8009e4a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fbb9 	bl	8008578 <clust2sect>
 8009e06:	6478      	str	r0, [r7, #68]	@ 0x44
 8009e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d103      	bne.n	8009e16 <f_open+0x342>
						res = FR_INT_ERR;
 8009e0e:	2302      	movs	r3, #2
 8009e10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e14:	e019      	b.n	8009e4a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	899b      	ldrh	r3, [r3, #12]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	7858      	ldrb	r0, [r3, #1]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1a      	ldr	r2, [r3, #32]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f7fd fff1 	bl	8007e20 <disk_read>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <f_open+0x376>
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <f_open+0x384>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3760      	adds	r7, #96	@ 0x60
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08e      	sub	sp, #56	@ 0x38
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f107 0214 	add.w	r2, r7, #20
 8009e82:	4611      	mov	r1, r2
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff fda9 	bl	80099dc <validate>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009e90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d107      	bne.n	8009ea8 <f_read+0x44>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7d5b      	ldrb	r3, [r3, #21]
 8009e9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <f_read+0x4a>
 8009ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009eac:	e135      	b.n	800a11a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	7d1b      	ldrb	r3, [r3, #20]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <f_read+0x5a>
 8009eba:	2307      	movs	r3, #7
 8009ebc:	e12d      	b.n	800a11a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	f240 811e 	bls.w	800a110 <f_read+0x2ac>
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009ed8:	e11a      	b.n	800a110 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	8992      	ldrh	r2, [r2, #12]
 8009ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ee6:	fb01 f202 	mul.w	r2, r1, r2
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f040 80d5 	bne.w	800a09c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	8992      	ldrh	r2, [r2, #12]
 8009efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	8952      	ldrh	r2, [r2, #10]
 8009f02:	3a01      	subs	r2, #1
 8009f04:	4013      	ands	r3, r2
 8009f06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d12f      	bne.n	8009f6e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d103      	bne.n	8009f1e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f1c:	e013      	b.n	8009f46 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7fe fe2c 	bl	8008b8a <clmt_clust>
 8009f32:	6338      	str	r0, [r7, #48]	@ 0x30
 8009f34:	e007      	b.n	8009f46 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f7fe fb39 	bl	80085b6 <get_fat>
 8009f44:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d804      	bhi.n	8009f56 <f_read+0xf2>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	755a      	strb	r2, [r3, #21]
 8009f52:	2302      	movs	r3, #2
 8009f54:	e0e1      	b.n	800a11a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d104      	bne.n	8009f68 <f_read+0x104>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	755a      	strb	r2, [r3, #21]
 8009f64:	2301      	movs	r3, #1
 8009f66:	e0d8      	b.n	800a11a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	4619      	mov	r1, r3
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7fe fafe 	bl	8008578 <clust2sect>
 8009f7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d104      	bne.n	8009f8e <f_read+0x12a>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2202      	movs	r2, #2
 8009f88:	755a      	strb	r2, [r3, #21]
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e0c5      	b.n	800a11a <f_read+0x2b6>
			sect += csect;
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	899b      	ldrh	r3, [r3, #12]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d041      	beq.n	800a02e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fae:	4413      	add	r3, r2
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	8952      	ldrh	r2, [r2, #10]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d905      	bls.n	8009fc4 <f_read+0x160>
					cc = fs->csize - csect;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	895b      	ldrh	r3, [r3, #10]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	7858      	ldrb	r0, [r3, #1]
 8009fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009fce:	f7fd ff27 	bl	8007e20 <disk_read>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <f_read+0x17e>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	755a      	strb	r2, [r3, #21]
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e09b      	b.n	800a11a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	7d1b      	ldrb	r3, [r3, #20]
 8009fe6:	b25b      	sxtb	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	da18      	bge.n	800a01e <f_read+0x1ba>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d911      	bls.n	800a01e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a1a      	ldr	r2, [r3, #32]
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	8992      	ldrh	r2, [r2, #12]
 800a006:	fb02 f303 	mul.w	r3, r2, r3
 800a00a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a00c:	18d0      	adds	r0, r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	899b      	ldrh	r3, [r3, #12]
 800a018:	461a      	mov	r2, r3
 800a01a:	f7fd ffe1 	bl	8007fe0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	899b      	ldrh	r3, [r3, #12]
 800a022:	461a      	mov	r2, r3
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	fb02 f303 	mul.w	r3, r2, r3
 800a02a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a02c:	e05c      	b.n	800a0e8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	429a      	cmp	r2, r3
 800a036:	d02e      	beq.n	800a096 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	7d1b      	ldrb	r3, [r3, #20]
 800a03c:	b25b      	sxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	da18      	bge.n	800a074 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	7858      	ldrb	r0, [r3, #1]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1a      	ldr	r2, [r3, #32]
 800a050:	2301      	movs	r3, #1
 800a052:	f7fd ff05 	bl	8007e60 <disk_write>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <f_read+0x202>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	755a      	strb	r2, [r3, #21]
 800a062:	2301      	movs	r3, #1
 800a064:	e059      	b.n	800a11a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	7d1b      	ldrb	r3, [r3, #20]
 800a06a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	7858      	ldrb	r0, [r3, #1]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a07e:	2301      	movs	r3, #1
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	f7fd fecd 	bl	8007e20 <disk_read>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <f_read+0x232>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	755a      	strb	r2, [r3, #21]
 800a092:	2301      	movs	r3, #1
 800a094:	e041      	b.n	800a11a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	899b      	ldrh	r3, [r3, #12]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	8992      	ldrh	r2, [r2, #12]
 800a0aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0ae:	fb01 f202 	mul.w	r2, r1, r2
 800a0b2:	1a9b      	subs	r3, r3, r2
 800a0b4:	1ac3      	subs	r3, r0, r3
 800a0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a0b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d901      	bls.n	800a0c4 <f_read+0x260>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	8992      	ldrh	r2, [r2, #12]
 800a0d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0d6:	fb00 f202 	mul.w	r2, r0, r2
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	440b      	add	r3, r1
 800a0de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0e4:	f7fd ff7c 	bl	8007fe0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a0e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ec:	4413      	add	r3, r2
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	699a      	ldr	r2, [r3, #24]
 800a0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f6:	441a      	add	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	619a      	str	r2, [r3, #24]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	441a      	add	r2, r3
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f47f aee1 	bne.w	8009eda <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3738      	adds	r7, #56	@ 0x38
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b08c      	sub	sp, #48	@ 0x30
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
 800a12e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f107 0210 	add.w	r2, r7, #16
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff fc4a 	bl	80099dc <validate>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a14e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a152:	2b00      	cmp	r3, #0
 800a154:	d107      	bne.n	800a166 <f_write+0x44>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	7d5b      	ldrb	r3, [r3, #21]
 800a15a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a15e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a162:	2b00      	cmp	r3, #0
 800a164:	d002      	beq.n	800a16c <f_write+0x4a>
 800a166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a16a:	e16a      	b.n	800a442 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	7d1b      	ldrb	r3, [r3, #20]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <f_write+0x5a>
 800a178:	2307      	movs	r3, #7
 800a17a:	e162      	b.n	800a442 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	441a      	add	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	429a      	cmp	r2, r3
 800a18a:	f080 814c 	bcs.w	800a426 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	43db      	mvns	r3, r3
 800a194:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a196:	e146      	b.n	800a426 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	8992      	ldrh	r2, [r2, #12]
 800a1a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1a4:	fb01 f202 	mul.w	r2, r1, r2
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f040 80f1 	bne.w	800a392 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	8992      	ldrh	r2, [r2, #12]
 800a1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	8952      	ldrh	r2, [r2, #10]
 800a1c0:	3a01      	subs	r2, #1
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d143      	bne.n	800a254 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10c      	bne.n	800a1ee <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d11a      	bne.n	800a216 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe fc38 	bl	8008a5a <create_chain>
 800a1ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a1ec:	e013      	b.n	800a216 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d007      	beq.n	800a206 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7fe fcc4 	bl	8008b8a <clmt_clust>
 800a202:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a204:	e007      	b.n	800a216 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f7fe fc23 	bl	8008a5a <create_chain>
 800a214:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 8109 	beq.w	800a430 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	2b01      	cmp	r3, #1
 800a222:	d104      	bne.n	800a22e <f_write+0x10c>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2202      	movs	r2, #2
 800a228:	755a      	strb	r2, [r3, #21]
 800a22a:	2302      	movs	r3, #2
 800a22c:	e109      	b.n	800a442 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d104      	bne.n	800a240 <f_write+0x11e>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	755a      	strb	r2, [r3, #21]
 800a23c:	2301      	movs	r3, #1
 800a23e:	e100      	b.n	800a442 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a244:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d102      	bne.n	800a254 <f_write+0x132>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a252:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	7d1b      	ldrb	r3, [r3, #20]
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da18      	bge.n	800a290 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	7858      	ldrb	r0, [r3, #1]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a1a      	ldr	r2, [r3, #32]
 800a26c:	2301      	movs	r3, #1
 800a26e:	f7fd fdf7 	bl	8007e60 <disk_write>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d004      	beq.n	800a282 <f_write+0x160>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	755a      	strb	r2, [r3, #21]
 800a27e:	2301      	movs	r3, #1
 800a280:	e0df      	b.n	800a442 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	7d1b      	ldrb	r3, [r3, #20]
 800a286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	4619      	mov	r1, r3
 800a298:	4610      	mov	r0, r2
 800a29a:	f7fe f96d 	bl	8008578 <clust2sect>
 800a29e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d104      	bne.n	800a2b0 <f_write+0x18e>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	755a      	strb	r2, [r3, #21]
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e0c8      	b.n	800a442 <f_write+0x320>
			sect += csect;
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	899b      	ldrh	r3, [r3, #12]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d043      	beq.n	800a354 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	8952      	ldrh	r2, [r2, #10]
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d905      	bls.n	800a2e6 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	895b      	ldrh	r3, [r3, #10]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	7858      	ldrb	r0, [r3, #1]
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	69f9      	ldr	r1, [r7, #28]
 800a2f0:	f7fd fdb6 	bl	8007e60 <disk_write>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d004      	beq.n	800a304 <f_write+0x1e2>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	755a      	strb	r2, [r3, #21]
 800a300:	2301      	movs	r3, #1
 800a302:	e09e      	b.n	800a442 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6a1a      	ldr	r2, [r3, #32]
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	6a3a      	ldr	r2, [r7, #32]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d918      	bls.n	800a344 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a1a      	ldr	r2, [r3, #32]
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	8992      	ldrh	r2, [r2, #12]
 800a324:	fb02 f303 	mul.w	r3, r2, r3
 800a328:	69fa      	ldr	r2, [r7, #28]
 800a32a:	18d1      	adds	r1, r2, r3
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	899b      	ldrh	r3, [r3, #12]
 800a330:	461a      	mov	r2, r3
 800a332:	f7fd fe55 	bl	8007fe0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	7d1b      	ldrb	r3, [r3, #20]
 800a33a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	899b      	ldrh	r3, [r3, #12]
 800a348:	461a      	mov	r2, r3
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	fb02 f303 	mul.w	r3, r2, r3
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a352:	e04b      	b.n	800a3ec <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d016      	beq.n	800a38c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a366:	429a      	cmp	r2, r3
 800a368:	d210      	bcs.n	800a38c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	7858      	ldrb	r0, [r3, #1]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a374:	2301      	movs	r3, #1
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	f7fd fd52 	bl	8007e20 <disk_read>
 800a37c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	755a      	strb	r2, [r3, #21]
 800a388:	2301      	movs	r3, #1
 800a38a:	e05a      	b.n	800a442 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	899b      	ldrh	r3, [r3, #12]
 800a396:	4618      	mov	r0, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	8992      	ldrh	r2, [r2, #12]
 800a3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3a4:	fb01 f202 	mul.w	r2, r1, r2
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	1ac3      	subs	r3, r0, r3
 800a3ac:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d901      	bls.n	800a3ba <f_write+0x298>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	8992      	ldrh	r2, [r2, #12]
 800a3c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3cc:	fb00 f202 	mul.w	r2, r0, r2
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d6:	69f9      	ldr	r1, [r7, #28]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fd fe01 	bl	8007fe0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	7d1b      	ldrb	r3, [r3, #20]
 800a3e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	4413      	add	r3, r2
 800a3f2:	61fb      	str	r3, [r7, #28]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	441a      	add	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	619a      	str	r2, [r3, #24]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	429a      	cmp	r2, r3
 800a40a:	bf38      	it	cc
 800a40c:	461a      	movcc	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	60da      	str	r2, [r3, #12]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	441a      	add	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f47f aeb5 	bne.w	800a198 <f_write+0x76>
 800a42e:	e000      	b.n	800a432 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a430:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	7d1b      	ldrb	r3, [r3, #20]
 800a436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3730      	adds	r7, #48	@ 0x30
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b086      	sub	sp, #24
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f107 0208 	add.w	r2, r7, #8
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fabe 	bl	80099dc <validate>
 800a460:	4603      	mov	r3, r0
 800a462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d168      	bne.n	800a53c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7d1b      	ldrb	r3, [r3, #20]
 800a46e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a472:	2b00      	cmp	r3, #0
 800a474:	d062      	beq.n	800a53c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	7d1b      	ldrb	r3, [r3, #20]
 800a47a:	b25b      	sxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da15      	bge.n	800a4ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	7858      	ldrb	r0, [r3, #1]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1a      	ldr	r2, [r3, #32]
 800a48e:	2301      	movs	r3, #1
 800a490:	f7fd fce6 	bl	8007e60 <disk_write>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <f_sync+0x54>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e04f      	b.n	800a53e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	7d1b      	ldrb	r3, [r3, #20]
 800a4a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a4ac:	f7fd fb0c 	bl	8007ac8 <get_fattime>
 800a4b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	f7fd ffbe 	bl	800843c <move_window>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d138      	bne.n	800a53c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	330b      	adds	r3, #11
 800a4d4:	781a      	ldrb	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	330b      	adds	r3, #11
 800a4da:	f042 0220 	orr.w	r2, r2, #32
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	68f9      	ldr	r1, [r7, #12]
 800a4ee:	f7fe fd49 	bl	8008f84 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f103 021c 	add.w	r2, r3, #28
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fd fd42 	bl	8007f88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	3316      	adds	r3, #22
 800a508:	6939      	ldr	r1, [r7, #16]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd fd3c 	bl	8007f88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3312      	adds	r3, #18
 800a514:	2100      	movs	r1, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f7fd fd1b 	bl	8007f52 <st_word>
					fs->wflag = 1;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2201      	movs	r2, #1
 800a520:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	4618      	mov	r0, r3
 800a526:	f7fd ffb7 	bl	8008498 <sync_fs>
 800a52a:	4603      	mov	r3, r0
 800a52c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7d1b      	ldrb	r3, [r3, #20]
 800a532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a536:	b2da      	uxtb	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff ff7b 	bl	800a44a <f_sync>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d118      	bne.n	800a590 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f107 0208 	add.w	r2, r7, #8
 800a564:	4611      	mov	r1, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fa38 	bl	80099dc <validate>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10c      	bne.n	800a590 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fd feba 	bl	80082f4 <dec_lock>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b090      	sub	sp, #64	@ 0x40
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f107 0208 	add.w	r2, r7, #8
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff fa15 	bl	80099dc <validate>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a5b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d103      	bne.n	800a5c8 <f_lseek+0x2e>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7d5b      	ldrb	r3, [r3, #21]
 800a5c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a5c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <f_lseek+0x3c>
 800a5d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a5d4:	e201      	b.n	800a9da <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80d9 	beq.w	800a792 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d15a      	bne.n	800a69e <f_lseek+0x104>
			tbl = fp->cltbl;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	1d1a      	adds	r2, r3, #4
 800a5f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	2b00      	cmp	r3, #0
 800a606:	d03a      	beq.n	800a67e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	2300      	movs	r3, #0
 800a60e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	3302      	adds	r3, #2
 800a614:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61c:	3301      	adds	r3, #1
 800a61e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a624:	4618      	mov	r0, r3
 800a626:	f7fd ffc6 	bl	80085b6 <get_fat>
 800a62a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d804      	bhi.n	800a63c <f_lseek+0xa2>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	755a      	strb	r2, [r3, #21]
 800a638:	2302      	movs	r3, #2
 800a63a:	e1ce      	b.n	800a9da <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	d104      	bne.n	800a64e <f_lseek+0xb4>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	755a      	strb	r2, [r3, #21]
 800a64a:	2301      	movs	r3, #1
 800a64c:	e1c5      	b.n	800a9da <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3301      	adds	r3, #1
 800a652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a654:	429a      	cmp	r2, r3
 800a656:	d0de      	beq.n	800a616 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d809      	bhi.n	800a674 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	627a      	str	r2, [r7, #36]	@ 0x24
 800a666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d3c4      	bcc.n	800a608 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a684:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d803      	bhi.n	800a696 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e19f      	b.n	800a9d6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a696:	2311      	movs	r3, #17
 800a698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a69c:	e19b      	b.n	800a9d6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d902      	bls.n	800a6ae <f_lseek+0x114>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 818d 	beq.w	800a9d6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7fe fa61 	bl	8008b8a <clmt_clust>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fd ff4e 	bl	8008578 <clust2sect>
 800a6dc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <f_lseek+0x154>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	755a      	strb	r2, [r3, #21]
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e175      	b.n	800a9da <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	8992      	ldrh	r2, [r2, #12]
 800a6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	8952      	ldrh	r2, [r2, #10]
 800a6fe:	3a01      	subs	r2, #1
 800a700:	4013      	ands	r3, r2
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	4413      	add	r3, r2
 800a706:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	8992      	ldrh	r2, [r2, #12]
 800a710:	fbb3 f1f2 	udiv	r1, r3, r2
 800a714:	fb01 f202 	mul.w	r2, r1, r2
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 815b 	beq.w	800a9d6 <f_lseek+0x43c>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	429a      	cmp	r2, r3
 800a728:	f000 8155 	beq.w	800a9d6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7d1b      	ldrb	r3, [r3, #20]
 800a730:	b25b      	sxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	da18      	bge.n	800a768 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	7858      	ldrb	r0, [r3, #1]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1a      	ldr	r2, [r3, #32]
 800a744:	2301      	movs	r3, #1
 800a746:	f7fd fb8b 	bl	8007e60 <disk_write>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d004      	beq.n	800a75a <f_lseek+0x1c0>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	755a      	strb	r2, [r3, #21]
 800a756:	2301      	movs	r3, #1
 800a758:	e13f      	b.n	800a9da <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	7d1b      	ldrb	r3, [r3, #20]
 800a75e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a762:	b2da      	uxtb	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	7858      	ldrb	r0, [r3, #1]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a772:	2301      	movs	r3, #1
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	f7fd fb53 	bl	8007e20 <disk_read>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d004      	beq.n	800a78a <f_lseek+0x1f0>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	755a      	strb	r2, [r3, #21]
 800a786:	2301      	movs	r3, #1
 800a788:	e127      	b.n	800a9da <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	621a      	str	r2, [r3, #32]
 800a790:	e121      	b.n	800a9d6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d908      	bls.n	800a7ae <f_lseek+0x214>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	7d1b      	ldrb	r3, [r3, #20]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7bc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 80b5 	beq.w	800a930 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	895b      	ldrh	r3, [r3, #10]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	899b      	ldrh	r3, [r3, #12]
 800a7d0:	fb02 f303 	mul.w	r3, r2, r3
 800a7d4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01b      	beq.n	800a814 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	1e5a      	subs	r2, r3, #1
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	1e59      	subs	r1, r3, #1
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d30f      	bcc.n	800a814 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	1e5a      	subs	r2, r3, #1
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	425b      	negs	r3, r3
 800a7fc:	401a      	ands	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a812:	e022      	b.n	800a85a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d119      	bne.n	800a854 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2100      	movs	r1, #0
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe f918 	bl	8008a5a <create_chain>
 800a82a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d104      	bne.n	800a83c <f_lseek+0x2a2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2202      	movs	r2, #2
 800a836:	755a      	strb	r2, [r3, #21]
 800a838:	2302      	movs	r3, #2
 800a83a:	e0ce      	b.n	800a9da <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a842:	d104      	bne.n	800a84e <f_lseek+0x2b4>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	755a      	strb	r2, [r3, #21]
 800a84a:	2301      	movs	r3, #1
 800a84c:	e0c5      	b.n	800a9da <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a852:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a858:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d067      	beq.n	800a930 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a860:	e03a      	b.n	800a8d8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	603b      	str	r3, [r7, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699a      	ldr	r2, [r3, #24]
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	441a      	add	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7d1b      	ldrb	r3, [r3, #20]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe f8e7 	bl	8008a5a <create_chain>
 800a88c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	2b00      	cmp	r3, #0
 800a892:	d108      	bne.n	800a8a6 <f_lseek+0x30c>
							ofs = 0; break;
 800a894:	2300      	movs	r3, #0
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	e022      	b.n	800a8e0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fe89 	bl	80085b6 <get_fat>
 800a8a4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d104      	bne.n	800a8b8 <f_lseek+0x31e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	755a      	strb	r2, [r3, #21]
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e090      	b.n	800a9da <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d904      	bls.n	800a8c8 <f_lseek+0x32e>
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d304      	bcc.n	800a8d2 <f_lseek+0x338>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	755a      	strb	r2, [r3, #21]
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e083      	b.n	800a9da <f_lseek+0x440>
					fp->clust = clst;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8d6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d8c0      	bhi.n	800a862 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	441a      	add	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	899b      	ldrh	r3, [r3, #12]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8f8:	fb01 f202 	mul.w	r2, r1, r2
 800a8fc:	1a9b      	subs	r3, r3, r2
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d016      	beq.n	800a930 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a906:	4618      	mov	r0, r3
 800a908:	f7fd fe36 	bl	8008578 <clust2sect>
 800a90c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a910:	2b00      	cmp	r3, #0
 800a912:	d104      	bne.n	800a91e <f_lseek+0x384>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	755a      	strb	r2, [r3, #21]
 800a91a:	2302      	movs	r3, #2
 800a91c:	e05d      	b.n	800a9da <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	899b      	ldrh	r3, [r3, #12]
 800a922:	461a      	mov	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	fbb3 f3f2 	udiv	r3, r3, r2
 800a92a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a92c:	4413      	add	r3, r2
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	699a      	ldr	r2, [r3, #24]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d90a      	bls.n	800a952 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7d1b      	ldrb	r3, [r3, #20]
 800a948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	8992      	ldrh	r2, [r2, #12]
 800a95a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a95e:	fb01 f202 	mul.w	r2, r1, r2
 800a962:	1a9b      	subs	r3, r3, r2
 800a964:	2b00      	cmp	r3, #0
 800a966:	d036      	beq.n	800a9d6 <f_lseek+0x43c>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a96e:	429a      	cmp	r2, r3
 800a970:	d031      	beq.n	800a9d6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	7d1b      	ldrb	r3, [r3, #20]
 800a976:	b25b      	sxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	da18      	bge.n	800a9ae <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	7858      	ldrb	r0, [r3, #1]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1a      	ldr	r2, [r3, #32]
 800a98a:	2301      	movs	r3, #1
 800a98c:	f7fd fa68 	bl	8007e60 <disk_write>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <f_lseek+0x406>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	755a      	strb	r2, [r3, #21]
 800a99c:	2301      	movs	r3, #1
 800a99e:	e01c      	b.n	800a9da <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	7d1b      	ldrb	r3, [r3, #20]
 800a9a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	7858      	ldrb	r0, [r3, #1]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9bc:	f7fd fa30 	bl	8007e20 <disk_read>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <f_lseek+0x436>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	755a      	strb	r2, [r3, #21]
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e004      	b.n	800a9da <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9d4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a9d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3740      	adds	r7, #64	@ 0x40
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b090      	sub	sp, #64	@ 0x40
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a9ec:	f107 010c 	add.w	r1, r7, #12
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fd71 	bl	80094dc <find_volume>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800aa00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d11f      	bne.n	800aa48 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	f107 030c 	add.w	r3, r7, #12
 800aa0e:	4611      	mov	r1, r2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fc53 	bl	80092bc <follow_path>
 800aa16:	4603      	mov	r3, r0
 800aa18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800aa1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d111      	bne.n	800aa48 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800aa24:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800aa28:	b25b      	sxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	da03      	bge.n	800aa36 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800aa2e:	2306      	movs	r3, #6
 800aa30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aa34:	e008      	b.n	800aa48 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <f_stat+0x66>
 800aa3c:	f107 030c 	add.w	r3, r7, #12
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fb45 	bl	80090d2 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800aa48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3740      	adds	r7, #64	@ 0x40
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa62:	2301      	movs	r3, #1
 800aa64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa6a:	4b1f      	ldr	r3, [pc, #124]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa6c:	7a5b      	ldrb	r3, [r3, #9]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d131      	bne.n	800aad8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa74:	4b1c      	ldr	r3, [pc, #112]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa76:	7a5b      	ldrb	r3, [r3, #9]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa7e:	2100      	movs	r1, #0
 800aa80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa82:	4b19      	ldr	r3, [pc, #100]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa84:	7a5b      	ldrb	r3, [r3, #9]
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	4a17      	ldr	r2, [pc, #92]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa92:	4b15      	ldr	r3, [pc, #84]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa94:	7a5b      	ldrb	r3, [r3, #9]
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4b13      	ldr	r3, [pc, #76]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aa9c:	4413      	add	r3, r2
 800aa9e:	79fa      	ldrb	r2, [r7, #7]
 800aaa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aaa2:	4b11      	ldr	r3, [pc, #68]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aaa4:	7a5b      	ldrb	r3, [r3, #9]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	b2d1      	uxtb	r1, r2
 800aaac:	4a0e      	ldr	r2, [pc, #56]	@ (800aae8 <FATFS_LinkDriverEx+0x94>)
 800aaae:	7251      	strb	r1, [r2, #9]
 800aab0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aab2:	7dbb      	ldrb	r3, [r7, #22]
 800aab4:	3330      	adds	r3, #48	@ 0x30
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	3301      	adds	r3, #1
 800aac0:	223a      	movs	r2, #58	@ 0x3a
 800aac2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	3302      	adds	r3, #2
 800aac8:	222f      	movs	r2, #47	@ 0x2f
 800aaca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	3303      	adds	r3, #3
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	371c      	adds	r7, #28
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	20004554 	.word	0x20004554

0800aaec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff ffaa 	bl	800aa54 <FATFS_LinkDriverEx>
 800ab00:	4603      	mov	r3, r0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <atoi>:
 800ab0a:	220a      	movs	r2, #10
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f000 b939 	b.w	800ad84 <strtol>
	...

0800ab14 <malloc>:
 800ab14:	4b02      	ldr	r3, [pc, #8]	@ (800ab20 <malloc+0xc>)
 800ab16:	4601      	mov	r1, r0
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f000 b82d 	b.w	800ab78 <_malloc_r>
 800ab1e:	bf00      	nop
 800ab20:	20000028 	.word	0x20000028

0800ab24 <free>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	@ (800ab30 <free+0xc>)
 800ab26:	4601      	mov	r1, r0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f000 b9d3 	b.w	800aed4 <_free_r>
 800ab2e:	bf00      	nop
 800ab30:	20000028 	.word	0x20000028

0800ab34 <sbrk_aligned>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	4e0f      	ldr	r6, [pc, #60]	@ (800ab74 <sbrk_aligned+0x40>)
 800ab38:	460c      	mov	r4, r1
 800ab3a:	6831      	ldr	r1, [r6, #0]
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	b911      	cbnz	r1, 800ab46 <sbrk_aligned+0x12>
 800ab40:	f000 f98c 	bl	800ae5c <_sbrk_r>
 800ab44:	6030      	str	r0, [r6, #0]
 800ab46:	4621      	mov	r1, r4
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f000 f987 	bl	800ae5c <_sbrk_r>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	d103      	bne.n	800ab5a <sbrk_aligned+0x26>
 800ab52:	f04f 34ff 	mov.w	r4, #4294967295
 800ab56:	4620      	mov	r0, r4
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
 800ab5a:	1cc4      	adds	r4, r0, #3
 800ab5c:	f024 0403 	bic.w	r4, r4, #3
 800ab60:	42a0      	cmp	r0, r4
 800ab62:	d0f8      	beq.n	800ab56 <sbrk_aligned+0x22>
 800ab64:	1a21      	subs	r1, r4, r0
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 f978 	bl	800ae5c <_sbrk_r>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d1f2      	bne.n	800ab56 <sbrk_aligned+0x22>
 800ab70:	e7ef      	b.n	800ab52 <sbrk_aligned+0x1e>
 800ab72:	bf00      	nop
 800ab74:	20004560 	.word	0x20004560

0800ab78 <_malloc_r>:
 800ab78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab7c:	1ccd      	adds	r5, r1, #3
 800ab7e:	f025 0503 	bic.w	r5, r5, #3
 800ab82:	3508      	adds	r5, #8
 800ab84:	2d0c      	cmp	r5, #12
 800ab86:	bf38      	it	cc
 800ab88:	250c      	movcc	r5, #12
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	db01      	blt.n	800ab94 <_malloc_r+0x1c>
 800ab90:	42a9      	cmp	r1, r5
 800ab92:	d904      	bls.n	800ab9e <_malloc_r+0x26>
 800ab94:	230c      	movs	r3, #12
 800ab96:	6033      	str	r3, [r6, #0]
 800ab98:	2000      	movs	r0, #0
 800ab9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac74 <_malloc_r+0xfc>
 800aba2:	f000 f869 	bl	800ac78 <__malloc_lock>
 800aba6:	f8d8 3000 	ldr.w	r3, [r8]
 800abaa:	461c      	mov	r4, r3
 800abac:	bb44      	cbnz	r4, 800ac00 <_malloc_r+0x88>
 800abae:	4629      	mov	r1, r5
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff ffbf 	bl	800ab34 <sbrk_aligned>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	4604      	mov	r4, r0
 800abba:	d158      	bne.n	800ac6e <_malloc_r+0xf6>
 800abbc:	f8d8 4000 	ldr.w	r4, [r8]
 800abc0:	4627      	mov	r7, r4
 800abc2:	2f00      	cmp	r7, #0
 800abc4:	d143      	bne.n	800ac4e <_malloc_r+0xd6>
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d04b      	beq.n	800ac62 <_malloc_r+0xea>
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	4639      	mov	r1, r7
 800abce:	4630      	mov	r0, r6
 800abd0:	eb04 0903 	add.w	r9, r4, r3
 800abd4:	f000 f942 	bl	800ae5c <_sbrk_r>
 800abd8:	4581      	cmp	r9, r0
 800abda:	d142      	bne.n	800ac62 <_malloc_r+0xea>
 800abdc:	6821      	ldr	r1, [r4, #0]
 800abde:	1a6d      	subs	r5, r5, r1
 800abe0:	4629      	mov	r1, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ffa6 	bl	800ab34 <sbrk_aligned>
 800abe8:	3001      	adds	r0, #1
 800abea:	d03a      	beq.n	800ac62 <_malloc_r+0xea>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	442b      	add	r3, r5
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	f8d8 3000 	ldr.w	r3, [r8]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	bb62      	cbnz	r2, 800ac54 <_malloc_r+0xdc>
 800abfa:	f8c8 7000 	str.w	r7, [r8]
 800abfe:	e00f      	b.n	800ac20 <_malloc_r+0xa8>
 800ac00:	6822      	ldr	r2, [r4, #0]
 800ac02:	1b52      	subs	r2, r2, r5
 800ac04:	d420      	bmi.n	800ac48 <_malloc_r+0xd0>
 800ac06:	2a0b      	cmp	r2, #11
 800ac08:	d917      	bls.n	800ac3a <_malloc_r+0xc2>
 800ac0a:	1961      	adds	r1, r4, r5
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	6025      	str	r5, [r4, #0]
 800ac10:	bf18      	it	ne
 800ac12:	6059      	strne	r1, [r3, #4]
 800ac14:	6863      	ldr	r3, [r4, #4]
 800ac16:	bf08      	it	eq
 800ac18:	f8c8 1000 	streq.w	r1, [r8]
 800ac1c:	5162      	str	r2, [r4, r5]
 800ac1e:	604b      	str	r3, [r1, #4]
 800ac20:	4630      	mov	r0, r6
 800ac22:	f000 f82f 	bl	800ac84 <__malloc_unlock>
 800ac26:	f104 000b 	add.w	r0, r4, #11
 800ac2a:	1d23      	adds	r3, r4, #4
 800ac2c:	f020 0007 	bic.w	r0, r0, #7
 800ac30:	1ac2      	subs	r2, r0, r3
 800ac32:	bf1c      	itt	ne
 800ac34:	1a1b      	subne	r3, r3, r0
 800ac36:	50a3      	strne	r3, [r4, r2]
 800ac38:	e7af      	b.n	800ab9a <_malloc_r+0x22>
 800ac3a:	6862      	ldr	r2, [r4, #4]
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	bf0c      	ite	eq
 800ac40:	f8c8 2000 	streq.w	r2, [r8]
 800ac44:	605a      	strne	r2, [r3, #4]
 800ac46:	e7eb      	b.n	800ac20 <_malloc_r+0xa8>
 800ac48:	4623      	mov	r3, r4
 800ac4a:	6864      	ldr	r4, [r4, #4]
 800ac4c:	e7ae      	b.n	800abac <_malloc_r+0x34>
 800ac4e:	463c      	mov	r4, r7
 800ac50:	687f      	ldr	r7, [r7, #4]
 800ac52:	e7b6      	b.n	800abc2 <_malloc_r+0x4a>
 800ac54:	461a      	mov	r2, r3
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d1fb      	bne.n	800ac54 <_malloc_r+0xdc>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	6053      	str	r3, [r2, #4]
 800ac60:	e7de      	b.n	800ac20 <_malloc_r+0xa8>
 800ac62:	230c      	movs	r3, #12
 800ac64:	6033      	str	r3, [r6, #0]
 800ac66:	4630      	mov	r0, r6
 800ac68:	f000 f80c 	bl	800ac84 <__malloc_unlock>
 800ac6c:	e794      	b.n	800ab98 <_malloc_r+0x20>
 800ac6e:	6005      	str	r5, [r0, #0]
 800ac70:	e7d6      	b.n	800ac20 <_malloc_r+0xa8>
 800ac72:	bf00      	nop
 800ac74:	20004564 	.word	0x20004564

0800ac78 <__malloc_lock>:
 800ac78:	4801      	ldr	r0, [pc, #4]	@ (800ac80 <__malloc_lock+0x8>)
 800ac7a:	f000 b929 	b.w	800aed0 <__retarget_lock_acquire_recursive>
 800ac7e:	bf00      	nop
 800ac80:	200046a4 	.word	0x200046a4

0800ac84 <__malloc_unlock>:
 800ac84:	4801      	ldr	r0, [pc, #4]	@ (800ac8c <__malloc_unlock+0x8>)
 800ac86:	f000 b924 	b.w	800aed2 <__retarget_lock_release_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	200046a4 	.word	0x200046a4

0800ac90 <_strtol_l.constprop.0>:
 800ac90:	2b24      	cmp	r3, #36	@ 0x24
 800ac92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac96:	4686      	mov	lr, r0
 800ac98:	4690      	mov	r8, r2
 800ac9a:	d801      	bhi.n	800aca0 <_strtol_l.constprop.0+0x10>
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d106      	bne.n	800acae <_strtol_l.constprop.0+0x1e>
 800aca0:	f000 f8ec 	bl	800ae7c <__errno>
 800aca4:	2316      	movs	r3, #22
 800aca6:	6003      	str	r3, [r0, #0]
 800aca8:	2000      	movs	r0, #0
 800acaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acae:	4834      	ldr	r0, [pc, #208]	@ (800ad80 <_strtol_l.constprop.0+0xf0>)
 800acb0:	460d      	mov	r5, r1
 800acb2:	462a      	mov	r2, r5
 800acb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acb8:	5d06      	ldrb	r6, [r0, r4]
 800acba:	f016 0608 	ands.w	r6, r6, #8
 800acbe:	d1f8      	bne.n	800acb2 <_strtol_l.constprop.0+0x22>
 800acc0:	2c2d      	cmp	r4, #45	@ 0x2d
 800acc2:	d12d      	bne.n	800ad20 <_strtol_l.constprop.0+0x90>
 800acc4:	782c      	ldrb	r4, [r5, #0]
 800acc6:	2601      	movs	r6, #1
 800acc8:	1c95      	adds	r5, r2, #2
 800acca:	f033 0210 	bics.w	r2, r3, #16
 800acce:	d109      	bne.n	800ace4 <_strtol_l.constprop.0+0x54>
 800acd0:	2c30      	cmp	r4, #48	@ 0x30
 800acd2:	d12a      	bne.n	800ad2a <_strtol_l.constprop.0+0x9a>
 800acd4:	782a      	ldrb	r2, [r5, #0]
 800acd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acda:	2a58      	cmp	r2, #88	@ 0x58
 800acdc:	d125      	bne.n	800ad2a <_strtol_l.constprop.0+0x9a>
 800acde:	786c      	ldrb	r4, [r5, #1]
 800ace0:	2310      	movs	r3, #16
 800ace2:	3502      	adds	r5, #2
 800ace4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ace8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800acec:	2200      	movs	r2, #0
 800acee:	fbbc f9f3 	udiv	r9, ip, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	fb03 ca19 	mls	sl, r3, r9, ip
 800acf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800acfc:	2f09      	cmp	r7, #9
 800acfe:	d81b      	bhi.n	800ad38 <_strtol_l.constprop.0+0xa8>
 800ad00:	463c      	mov	r4, r7
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	dd27      	ble.n	800ad56 <_strtol_l.constprop.0+0xc6>
 800ad06:	1c57      	adds	r7, r2, #1
 800ad08:	d007      	beq.n	800ad1a <_strtol_l.constprop.0+0x8a>
 800ad0a:	4581      	cmp	r9, r0
 800ad0c:	d320      	bcc.n	800ad50 <_strtol_l.constprop.0+0xc0>
 800ad0e:	d101      	bne.n	800ad14 <_strtol_l.constprop.0+0x84>
 800ad10:	45a2      	cmp	sl, r4
 800ad12:	db1d      	blt.n	800ad50 <_strtol_l.constprop.0+0xc0>
 800ad14:	fb00 4003 	mla	r0, r0, r3, r4
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad1e:	e7eb      	b.n	800acf8 <_strtol_l.constprop.0+0x68>
 800ad20:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad22:	bf04      	itt	eq
 800ad24:	782c      	ldrbeq	r4, [r5, #0]
 800ad26:	1c95      	addeq	r5, r2, #2
 800ad28:	e7cf      	b.n	800acca <_strtol_l.constprop.0+0x3a>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1da      	bne.n	800ace4 <_strtol_l.constprop.0+0x54>
 800ad2e:	2c30      	cmp	r4, #48	@ 0x30
 800ad30:	bf0c      	ite	eq
 800ad32:	2308      	moveq	r3, #8
 800ad34:	230a      	movne	r3, #10
 800ad36:	e7d5      	b.n	800ace4 <_strtol_l.constprop.0+0x54>
 800ad38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad3c:	2f19      	cmp	r7, #25
 800ad3e:	d801      	bhi.n	800ad44 <_strtol_l.constprop.0+0xb4>
 800ad40:	3c37      	subs	r4, #55	@ 0x37
 800ad42:	e7de      	b.n	800ad02 <_strtol_l.constprop.0+0x72>
 800ad44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad48:	2f19      	cmp	r7, #25
 800ad4a:	d804      	bhi.n	800ad56 <_strtol_l.constprop.0+0xc6>
 800ad4c:	3c57      	subs	r4, #87	@ 0x57
 800ad4e:	e7d8      	b.n	800ad02 <_strtol_l.constprop.0+0x72>
 800ad50:	f04f 32ff 	mov.w	r2, #4294967295
 800ad54:	e7e1      	b.n	800ad1a <_strtol_l.constprop.0+0x8a>
 800ad56:	1c53      	adds	r3, r2, #1
 800ad58:	d108      	bne.n	800ad6c <_strtol_l.constprop.0+0xdc>
 800ad5a:	2322      	movs	r3, #34	@ 0x22
 800ad5c:	f8ce 3000 	str.w	r3, [lr]
 800ad60:	4660      	mov	r0, ip
 800ad62:	f1b8 0f00 	cmp.w	r8, #0
 800ad66:	d0a0      	beq.n	800acaa <_strtol_l.constprop.0+0x1a>
 800ad68:	1e69      	subs	r1, r5, #1
 800ad6a:	e006      	b.n	800ad7a <_strtol_l.constprop.0+0xea>
 800ad6c:	b106      	cbz	r6, 800ad70 <_strtol_l.constprop.0+0xe0>
 800ad6e:	4240      	negs	r0, r0
 800ad70:	f1b8 0f00 	cmp.w	r8, #0
 800ad74:	d099      	beq.n	800acaa <_strtol_l.constprop.0+0x1a>
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	d1f6      	bne.n	800ad68 <_strtol_l.constprop.0+0xd8>
 800ad7a:	f8c8 1000 	str.w	r1, [r8]
 800ad7e:	e794      	b.n	800acaa <_strtol_l.constprop.0+0x1a>
 800ad80:	0800be15 	.word	0x0800be15

0800ad84 <strtol>:
 800ad84:	4613      	mov	r3, r2
 800ad86:	460a      	mov	r2, r1
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4802      	ldr	r0, [pc, #8]	@ (800ad94 <strtol+0x10>)
 800ad8c:	6800      	ldr	r0, [r0, #0]
 800ad8e:	f7ff bf7f 	b.w	800ac90 <_strtol_l.constprop.0>
 800ad92:	bf00      	nop
 800ad94:	20000028 	.word	0x20000028

0800ad98 <siprintf>:
 800ad98:	b40e      	push	{r1, r2, r3}
 800ad9a:	b500      	push	{lr}
 800ad9c:	b09c      	sub	sp, #112	@ 0x70
 800ad9e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ada0:	9002      	str	r0, [sp, #8]
 800ada2:	9006      	str	r0, [sp, #24]
 800ada4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ada8:	4809      	ldr	r0, [pc, #36]	@ (800add0 <siprintf+0x38>)
 800adaa:	9107      	str	r1, [sp, #28]
 800adac:	9104      	str	r1, [sp, #16]
 800adae:	4909      	ldr	r1, [pc, #36]	@ (800add4 <siprintf+0x3c>)
 800adb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb4:	9105      	str	r1, [sp, #20]
 800adb6:	6800      	ldr	r0, [r0, #0]
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	a902      	add	r1, sp, #8
 800adbc:	f000 f930 	bl	800b020 <_svfiprintf_r>
 800adc0:	9b02      	ldr	r3, [sp, #8]
 800adc2:	2200      	movs	r2, #0
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	b01c      	add	sp, #112	@ 0x70
 800adc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adcc:	b003      	add	sp, #12
 800adce:	4770      	bx	lr
 800add0:	20000028 	.word	0x20000028
 800add4:	ffff0208 	.word	0xffff0208

0800add8 <_vsniprintf_r>:
 800add8:	b530      	push	{r4, r5, lr}
 800adda:	4614      	mov	r4, r2
 800addc:	2c00      	cmp	r4, #0
 800adde:	b09b      	sub	sp, #108	@ 0x6c
 800ade0:	4605      	mov	r5, r0
 800ade2:	461a      	mov	r2, r3
 800ade4:	da05      	bge.n	800adf2 <_vsniprintf_r+0x1a>
 800ade6:	238b      	movs	r3, #139	@ 0x8b
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	f04f 30ff 	mov.w	r0, #4294967295
 800adee:	b01b      	add	sp, #108	@ 0x6c
 800adf0:	bd30      	pop	{r4, r5, pc}
 800adf2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800adf6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800adfa:	bf14      	ite	ne
 800adfc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae00:	4623      	moveq	r3, r4
 800ae02:	9302      	str	r3, [sp, #8]
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae0a:	9100      	str	r1, [sp, #0]
 800ae0c:	9104      	str	r1, [sp, #16]
 800ae0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ae12:	4669      	mov	r1, sp
 800ae14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ae16:	f000 f903 	bl	800b020 <_svfiprintf_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	bfbc      	itt	lt
 800ae1e:	238b      	movlt	r3, #139	@ 0x8b
 800ae20:	602b      	strlt	r3, [r5, #0]
 800ae22:	2c00      	cmp	r4, #0
 800ae24:	d0e3      	beq.n	800adee <_vsniprintf_r+0x16>
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	e7df      	b.n	800adee <_vsniprintf_r+0x16>
	...

0800ae30 <vsniprintf>:
 800ae30:	b507      	push	{r0, r1, r2, lr}
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	4613      	mov	r3, r2
 800ae36:	460a      	mov	r2, r1
 800ae38:	4601      	mov	r1, r0
 800ae3a:	4803      	ldr	r0, [pc, #12]	@ (800ae48 <vsniprintf+0x18>)
 800ae3c:	6800      	ldr	r0, [r0, #0]
 800ae3e:	f7ff ffcb 	bl	800add8 <_vsniprintf_r>
 800ae42:	b003      	add	sp, #12
 800ae44:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae48:	20000028 	.word	0x20000028

0800ae4c <memset>:
 800ae4c:	4402      	add	r2, r0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d100      	bne.n	800ae56 <memset+0xa>
 800ae54:	4770      	bx	lr
 800ae56:	f803 1b01 	strb.w	r1, [r3], #1
 800ae5a:	e7f9      	b.n	800ae50 <memset+0x4>

0800ae5c <_sbrk_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d06      	ldr	r5, [pc, #24]	@ (800ae78 <_sbrk_r+0x1c>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	f7f6 fef4 	bl	8001c54 <_sbrk>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_sbrk_r+0x1a>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_sbrk_r+0x1a>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	200046a0 	.word	0x200046a0

0800ae7c <__errno>:
 800ae7c:	4b01      	ldr	r3, [pc, #4]	@ (800ae84 <__errno+0x8>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	20000028 	.word	0x20000028

0800ae88 <__libc_init_array>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	4d0d      	ldr	r5, [pc, #52]	@ (800aec0 <__libc_init_array+0x38>)
 800ae8c:	4c0d      	ldr	r4, [pc, #52]	@ (800aec4 <__libc_init_array+0x3c>)
 800ae8e:	1b64      	subs	r4, r4, r5
 800ae90:	10a4      	asrs	r4, r4, #2
 800ae92:	2600      	movs	r6, #0
 800ae94:	42a6      	cmp	r6, r4
 800ae96:	d109      	bne.n	800aeac <__libc_init_array+0x24>
 800ae98:	4d0b      	ldr	r5, [pc, #44]	@ (800aec8 <__libc_init_array+0x40>)
 800ae9a:	4c0c      	ldr	r4, [pc, #48]	@ (800aecc <__libc_init_array+0x44>)
 800ae9c:	f000 fba8 	bl	800b5f0 <_init>
 800aea0:	1b64      	subs	r4, r4, r5
 800aea2:	10a4      	asrs	r4, r4, #2
 800aea4:	2600      	movs	r6, #0
 800aea6:	42a6      	cmp	r6, r4
 800aea8:	d105      	bne.n	800aeb6 <__libc_init_array+0x2e>
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb0:	4798      	blx	r3
 800aeb2:	3601      	adds	r6, #1
 800aeb4:	e7ee      	b.n	800ae94 <__libc_init_array+0xc>
 800aeb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeba:	4798      	blx	r3
 800aebc:	3601      	adds	r6, #1
 800aebe:	e7f2      	b.n	800aea6 <__libc_init_array+0x1e>
 800aec0:	0800bf50 	.word	0x0800bf50
 800aec4:	0800bf50 	.word	0x0800bf50
 800aec8:	0800bf50 	.word	0x0800bf50
 800aecc:	0800bf54 	.word	0x0800bf54

0800aed0 <__retarget_lock_acquire_recursive>:
 800aed0:	4770      	bx	lr

0800aed2 <__retarget_lock_release_recursive>:
 800aed2:	4770      	bx	lr

0800aed4 <_free_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4605      	mov	r5, r0
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d041      	beq.n	800af60 <_free_r+0x8c>
 800aedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee0:	1f0c      	subs	r4, r1, #4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	bfb8      	it	lt
 800aee6:	18e4      	addlt	r4, r4, r3
 800aee8:	f7ff fec6 	bl	800ac78 <__malloc_lock>
 800aeec:	4a1d      	ldr	r2, [pc, #116]	@ (800af64 <_free_r+0x90>)
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	b933      	cbnz	r3, 800af00 <_free_r+0x2c>
 800aef2:	6063      	str	r3, [r4, #4]
 800aef4:	6014      	str	r4, [r2, #0]
 800aef6:	4628      	mov	r0, r5
 800aef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aefc:	f7ff bec2 	b.w	800ac84 <__malloc_unlock>
 800af00:	42a3      	cmp	r3, r4
 800af02:	d908      	bls.n	800af16 <_free_r+0x42>
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	1821      	adds	r1, r4, r0
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf01      	itttt	eq
 800af0c:	6819      	ldreq	r1, [r3, #0]
 800af0e:	685b      	ldreq	r3, [r3, #4]
 800af10:	1809      	addeq	r1, r1, r0
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	e7ed      	b.n	800aef2 <_free_r+0x1e>
 800af16:	461a      	mov	r2, r3
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	b10b      	cbz	r3, 800af20 <_free_r+0x4c>
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d9fa      	bls.n	800af16 <_free_r+0x42>
 800af20:	6811      	ldr	r1, [r2, #0]
 800af22:	1850      	adds	r0, r2, r1
 800af24:	42a0      	cmp	r0, r4
 800af26:	d10b      	bne.n	800af40 <_free_r+0x6c>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	4401      	add	r1, r0
 800af2c:	1850      	adds	r0, r2, r1
 800af2e:	4283      	cmp	r3, r0
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	d1e0      	bne.n	800aef6 <_free_r+0x22>
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	6053      	str	r3, [r2, #4]
 800af3a:	4408      	add	r0, r1
 800af3c:	6010      	str	r0, [r2, #0]
 800af3e:	e7da      	b.n	800aef6 <_free_r+0x22>
 800af40:	d902      	bls.n	800af48 <_free_r+0x74>
 800af42:	230c      	movs	r3, #12
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	e7d6      	b.n	800aef6 <_free_r+0x22>
 800af48:	6820      	ldr	r0, [r4, #0]
 800af4a:	1821      	adds	r1, r4, r0
 800af4c:	428b      	cmp	r3, r1
 800af4e:	bf04      	itt	eq
 800af50:	6819      	ldreq	r1, [r3, #0]
 800af52:	685b      	ldreq	r3, [r3, #4]
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	bf04      	itt	eq
 800af58:	1809      	addeq	r1, r1, r0
 800af5a:	6021      	streq	r1, [r4, #0]
 800af5c:	6054      	str	r4, [r2, #4]
 800af5e:	e7ca      	b.n	800aef6 <_free_r+0x22>
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	20004564 	.word	0x20004564

0800af68 <__ssputs_r>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	688e      	ldr	r6, [r1, #8]
 800af6e:	461f      	mov	r7, r3
 800af70:	42be      	cmp	r6, r7
 800af72:	680b      	ldr	r3, [r1, #0]
 800af74:	4682      	mov	sl, r0
 800af76:	460c      	mov	r4, r1
 800af78:	4690      	mov	r8, r2
 800af7a:	d82d      	bhi.n	800afd8 <__ssputs_r+0x70>
 800af7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af84:	d026      	beq.n	800afd4 <__ssputs_r+0x6c>
 800af86:	6965      	ldr	r5, [r4, #20]
 800af88:	6909      	ldr	r1, [r1, #16]
 800af8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af8e:	eba3 0901 	sub.w	r9, r3, r1
 800af92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af96:	1c7b      	adds	r3, r7, #1
 800af98:	444b      	add	r3, r9
 800af9a:	106d      	asrs	r5, r5, #1
 800af9c:	429d      	cmp	r5, r3
 800af9e:	bf38      	it	cc
 800afa0:	461d      	movcc	r5, r3
 800afa2:	0553      	lsls	r3, r2, #21
 800afa4:	d527      	bpl.n	800aff6 <__ssputs_r+0x8e>
 800afa6:	4629      	mov	r1, r5
 800afa8:	f7ff fde6 	bl	800ab78 <_malloc_r>
 800afac:	4606      	mov	r6, r0
 800afae:	b360      	cbz	r0, 800b00a <__ssputs_r+0xa2>
 800afb0:	6921      	ldr	r1, [r4, #16]
 800afb2:	464a      	mov	r2, r9
 800afb4:	f000 fad8 	bl	800b568 <memcpy>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afc2:	81a3      	strh	r3, [r4, #12]
 800afc4:	6126      	str	r6, [r4, #16]
 800afc6:	6165      	str	r5, [r4, #20]
 800afc8:	444e      	add	r6, r9
 800afca:	eba5 0509 	sub.w	r5, r5, r9
 800afce:	6026      	str	r6, [r4, #0]
 800afd0:	60a5      	str	r5, [r4, #8]
 800afd2:	463e      	mov	r6, r7
 800afd4:	42be      	cmp	r6, r7
 800afd6:	d900      	bls.n	800afda <__ssputs_r+0x72>
 800afd8:	463e      	mov	r6, r7
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	4632      	mov	r2, r6
 800afde:	4641      	mov	r1, r8
 800afe0:	f000 faa8 	bl	800b534 <memmove>
 800afe4:	68a3      	ldr	r3, [r4, #8]
 800afe6:	1b9b      	subs	r3, r3, r6
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	4433      	add	r3, r6
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	2000      	movs	r0, #0
 800aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff6:	462a      	mov	r2, r5
 800aff8:	f000 fac4 	bl	800b584 <_realloc_r>
 800affc:	4606      	mov	r6, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	d1e0      	bne.n	800afc4 <__ssputs_r+0x5c>
 800b002:	6921      	ldr	r1, [r4, #16]
 800b004:	4650      	mov	r0, sl
 800b006:	f7ff ff65 	bl	800aed4 <_free_r>
 800b00a:	230c      	movs	r3, #12
 800b00c:	f8ca 3000 	str.w	r3, [sl]
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b016:	81a3      	strh	r3, [r4, #12]
 800b018:	f04f 30ff 	mov.w	r0, #4294967295
 800b01c:	e7e9      	b.n	800aff2 <__ssputs_r+0x8a>
	...

0800b020 <_svfiprintf_r>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	4698      	mov	r8, r3
 800b026:	898b      	ldrh	r3, [r1, #12]
 800b028:	061b      	lsls	r3, r3, #24
 800b02a:	b09d      	sub	sp, #116	@ 0x74
 800b02c:	4607      	mov	r7, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	4614      	mov	r4, r2
 800b032:	d510      	bpl.n	800b056 <_svfiprintf_r+0x36>
 800b034:	690b      	ldr	r3, [r1, #16]
 800b036:	b973      	cbnz	r3, 800b056 <_svfiprintf_r+0x36>
 800b038:	2140      	movs	r1, #64	@ 0x40
 800b03a:	f7ff fd9d 	bl	800ab78 <_malloc_r>
 800b03e:	6028      	str	r0, [r5, #0]
 800b040:	6128      	str	r0, [r5, #16]
 800b042:	b930      	cbnz	r0, 800b052 <_svfiprintf_r+0x32>
 800b044:	230c      	movs	r3, #12
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	b01d      	add	sp, #116	@ 0x74
 800b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b052:	2340      	movs	r3, #64	@ 0x40
 800b054:	616b      	str	r3, [r5, #20]
 800b056:	2300      	movs	r3, #0
 800b058:	9309      	str	r3, [sp, #36]	@ 0x24
 800b05a:	2320      	movs	r3, #32
 800b05c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b060:	f8cd 800c 	str.w	r8, [sp, #12]
 800b064:	2330      	movs	r3, #48	@ 0x30
 800b066:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b204 <_svfiprintf_r+0x1e4>
 800b06a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b06e:	f04f 0901 	mov.w	r9, #1
 800b072:	4623      	mov	r3, r4
 800b074:	469a      	mov	sl, r3
 800b076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b07a:	b10a      	cbz	r2, 800b080 <_svfiprintf_r+0x60>
 800b07c:	2a25      	cmp	r2, #37	@ 0x25
 800b07e:	d1f9      	bne.n	800b074 <_svfiprintf_r+0x54>
 800b080:	ebba 0b04 	subs.w	fp, sl, r4
 800b084:	d00b      	beq.n	800b09e <_svfiprintf_r+0x7e>
 800b086:	465b      	mov	r3, fp
 800b088:	4622      	mov	r2, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7ff ff6b 	bl	800af68 <__ssputs_r>
 800b092:	3001      	adds	r0, #1
 800b094:	f000 80a7 	beq.w	800b1e6 <_svfiprintf_r+0x1c6>
 800b098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b09a:	445a      	add	r2, fp
 800b09c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b09e:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 809f 	beq.w	800b1e6 <_svfiprintf_r+0x1c6>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0b2:	f10a 0a01 	add.w	sl, sl, #1
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0c0:	4654      	mov	r4, sl
 800b0c2:	2205      	movs	r2, #5
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	484e      	ldr	r0, [pc, #312]	@ (800b204 <_svfiprintf_r+0x1e4>)
 800b0ca:	f7f5 f889 	bl	80001e0 <memchr>
 800b0ce:	9a04      	ldr	r2, [sp, #16]
 800b0d0:	b9d8      	cbnz	r0, 800b10a <_svfiprintf_r+0xea>
 800b0d2:	06d0      	lsls	r0, r2, #27
 800b0d4:	bf44      	itt	mi
 800b0d6:	2320      	movmi	r3, #32
 800b0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0dc:	0711      	lsls	r1, r2, #28
 800b0de:	bf44      	itt	mi
 800b0e0:	232b      	movmi	r3, #43	@ 0x2b
 800b0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0ec:	d015      	beq.n	800b11a <_svfiprintf_r+0xfa>
 800b0ee:	9a07      	ldr	r2, [sp, #28]
 800b0f0:	4654      	mov	r4, sl
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	f04f 0c0a 	mov.w	ip, #10
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0fe:	3b30      	subs	r3, #48	@ 0x30
 800b100:	2b09      	cmp	r3, #9
 800b102:	d94b      	bls.n	800b19c <_svfiprintf_r+0x17c>
 800b104:	b1b0      	cbz	r0, 800b134 <_svfiprintf_r+0x114>
 800b106:	9207      	str	r2, [sp, #28]
 800b108:	e014      	b.n	800b134 <_svfiprintf_r+0x114>
 800b10a:	eba0 0308 	sub.w	r3, r0, r8
 800b10e:	fa09 f303 	lsl.w	r3, r9, r3
 800b112:	4313      	orrs	r3, r2
 800b114:	9304      	str	r3, [sp, #16]
 800b116:	46a2      	mov	sl, r4
 800b118:	e7d2      	b.n	800b0c0 <_svfiprintf_r+0xa0>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	1d19      	adds	r1, r3, #4
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	9103      	str	r1, [sp, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	bfbb      	ittet	lt
 800b126:	425b      	neglt	r3, r3
 800b128:	f042 0202 	orrlt.w	r2, r2, #2
 800b12c:	9307      	strge	r3, [sp, #28]
 800b12e:	9307      	strlt	r3, [sp, #28]
 800b130:	bfb8      	it	lt
 800b132:	9204      	strlt	r2, [sp, #16]
 800b134:	7823      	ldrb	r3, [r4, #0]
 800b136:	2b2e      	cmp	r3, #46	@ 0x2e
 800b138:	d10a      	bne.n	800b150 <_svfiprintf_r+0x130>
 800b13a:	7863      	ldrb	r3, [r4, #1]
 800b13c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b13e:	d132      	bne.n	800b1a6 <_svfiprintf_r+0x186>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	9203      	str	r2, [sp, #12]
 800b148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b14c:	3402      	adds	r4, #2
 800b14e:	9305      	str	r3, [sp, #20]
 800b150:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b214 <_svfiprintf_r+0x1f4>
 800b154:	7821      	ldrb	r1, [r4, #0]
 800b156:	2203      	movs	r2, #3
 800b158:	4650      	mov	r0, sl
 800b15a:	f7f5 f841 	bl	80001e0 <memchr>
 800b15e:	b138      	cbz	r0, 800b170 <_svfiprintf_r+0x150>
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	eba0 000a 	sub.w	r0, r0, sl
 800b166:	2240      	movs	r2, #64	@ 0x40
 800b168:	4082      	lsls	r2, r0
 800b16a:	4313      	orrs	r3, r2
 800b16c:	3401      	adds	r4, #1
 800b16e:	9304      	str	r3, [sp, #16]
 800b170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b174:	4824      	ldr	r0, [pc, #144]	@ (800b208 <_svfiprintf_r+0x1e8>)
 800b176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b17a:	2206      	movs	r2, #6
 800b17c:	f7f5 f830 	bl	80001e0 <memchr>
 800b180:	2800      	cmp	r0, #0
 800b182:	d036      	beq.n	800b1f2 <_svfiprintf_r+0x1d2>
 800b184:	4b21      	ldr	r3, [pc, #132]	@ (800b20c <_svfiprintf_r+0x1ec>)
 800b186:	bb1b      	cbnz	r3, 800b1d0 <_svfiprintf_r+0x1b0>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	3307      	adds	r3, #7
 800b18c:	f023 0307 	bic.w	r3, r3, #7
 800b190:	3308      	adds	r3, #8
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b196:	4433      	add	r3, r6
 800b198:	9309      	str	r3, [sp, #36]	@ 0x24
 800b19a:	e76a      	b.n	800b072 <_svfiprintf_r+0x52>
 800b19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	e7a8      	b.n	800b0f8 <_svfiprintf_r+0xd8>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	3401      	adds	r4, #1
 800b1aa:	9305      	str	r3, [sp, #20]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f04f 0c0a 	mov.w	ip, #10
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b8:	3a30      	subs	r2, #48	@ 0x30
 800b1ba:	2a09      	cmp	r2, #9
 800b1bc:	d903      	bls.n	800b1c6 <_svfiprintf_r+0x1a6>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0c6      	beq.n	800b150 <_svfiprintf_r+0x130>
 800b1c2:	9105      	str	r1, [sp, #20]
 800b1c4:	e7c4      	b.n	800b150 <_svfiprintf_r+0x130>
 800b1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e7f0      	b.n	800b1b2 <_svfiprintf_r+0x192>
 800b1d0:	ab03      	add	r3, sp, #12
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	462a      	mov	r2, r5
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <_svfiprintf_r+0x1f0>)
 800b1d8:	a904      	add	r1, sp, #16
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f3af 8000 	nop.w
 800b1e0:	1c42      	adds	r2, r0, #1
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	d1d6      	bne.n	800b194 <_svfiprintf_r+0x174>
 800b1e6:	89ab      	ldrh	r3, [r5, #12]
 800b1e8:	065b      	lsls	r3, r3, #25
 800b1ea:	f53f af2d 	bmi.w	800b048 <_svfiprintf_r+0x28>
 800b1ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1f0:	e72c      	b.n	800b04c <_svfiprintf_r+0x2c>
 800b1f2:	ab03      	add	r3, sp, #12
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	462a      	mov	r2, r5
 800b1f8:	4b05      	ldr	r3, [pc, #20]	@ (800b210 <_svfiprintf_r+0x1f0>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f000 f879 	bl	800b2f4 <_printf_i>
 800b202:	e7ed      	b.n	800b1e0 <_svfiprintf_r+0x1c0>
 800b204:	0800bf15 	.word	0x0800bf15
 800b208:	0800bf1f 	.word	0x0800bf1f
 800b20c:	00000000 	.word	0x00000000
 800b210:	0800af69 	.word	0x0800af69
 800b214:	0800bf1b 	.word	0x0800bf1b

0800b218 <_printf_common>:
 800b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	4616      	mov	r6, r2
 800b21e:	4698      	mov	r8, r3
 800b220:	688a      	ldr	r2, [r1, #8]
 800b222:	690b      	ldr	r3, [r1, #16]
 800b224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b228:	4293      	cmp	r3, r2
 800b22a:	bfb8      	it	lt
 800b22c:	4613      	movlt	r3, r2
 800b22e:	6033      	str	r3, [r6, #0]
 800b230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b234:	4607      	mov	r7, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b10a      	cbz	r2, 800b23e <_printf_common+0x26>
 800b23a:	3301      	adds	r3, #1
 800b23c:	6033      	str	r3, [r6, #0]
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	0699      	lsls	r1, r3, #26
 800b242:	bf42      	ittt	mi
 800b244:	6833      	ldrmi	r3, [r6, #0]
 800b246:	3302      	addmi	r3, #2
 800b248:	6033      	strmi	r3, [r6, #0]
 800b24a:	6825      	ldr	r5, [r4, #0]
 800b24c:	f015 0506 	ands.w	r5, r5, #6
 800b250:	d106      	bne.n	800b260 <_printf_common+0x48>
 800b252:	f104 0a19 	add.w	sl, r4, #25
 800b256:	68e3      	ldr	r3, [r4, #12]
 800b258:	6832      	ldr	r2, [r6, #0]
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	42ab      	cmp	r3, r5
 800b25e:	dc26      	bgt.n	800b2ae <_printf_common+0x96>
 800b260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	3b00      	subs	r3, #0
 800b268:	bf18      	it	ne
 800b26a:	2301      	movne	r3, #1
 800b26c:	0692      	lsls	r2, r2, #26
 800b26e:	d42b      	bmi.n	800b2c8 <_printf_common+0xb0>
 800b270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b274:	4641      	mov	r1, r8
 800b276:	4638      	mov	r0, r7
 800b278:	47c8      	blx	r9
 800b27a:	3001      	adds	r0, #1
 800b27c:	d01e      	beq.n	800b2bc <_printf_common+0xa4>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	6922      	ldr	r2, [r4, #16]
 800b282:	f003 0306 	and.w	r3, r3, #6
 800b286:	2b04      	cmp	r3, #4
 800b288:	bf02      	ittt	eq
 800b28a:	68e5      	ldreq	r5, [r4, #12]
 800b28c:	6833      	ldreq	r3, [r6, #0]
 800b28e:	1aed      	subeq	r5, r5, r3
 800b290:	68a3      	ldr	r3, [r4, #8]
 800b292:	bf0c      	ite	eq
 800b294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b298:	2500      	movne	r5, #0
 800b29a:	4293      	cmp	r3, r2
 800b29c:	bfc4      	itt	gt
 800b29e:	1a9b      	subgt	r3, r3, r2
 800b2a0:	18ed      	addgt	r5, r5, r3
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	341a      	adds	r4, #26
 800b2a6:	42b5      	cmp	r5, r6
 800b2a8:	d11a      	bne.n	800b2e0 <_printf_common+0xc8>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e008      	b.n	800b2c0 <_printf_common+0xa8>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	4641      	mov	r1, r8
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	47c8      	blx	r9
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d103      	bne.n	800b2c4 <_printf_common+0xac>
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c4:	3501      	adds	r5, #1
 800b2c6:	e7c6      	b.n	800b256 <_printf_common+0x3e>
 800b2c8:	18e1      	adds	r1, r4, r3
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	2030      	movs	r0, #48	@ 0x30
 800b2ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2d2:	4422      	add	r2, r4
 800b2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2dc:	3302      	adds	r3, #2
 800b2de:	e7c7      	b.n	800b270 <_printf_common+0x58>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4641      	mov	r1, r8
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	47c8      	blx	r9
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d0e6      	beq.n	800b2bc <_printf_common+0xa4>
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7d9      	b.n	800b2a6 <_printf_common+0x8e>
	...

0800b2f4 <_printf_i>:
 800b2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	7e0f      	ldrb	r7, [r1, #24]
 800b2fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2fc:	2f78      	cmp	r7, #120	@ 0x78
 800b2fe:	4691      	mov	r9, r2
 800b300:	4680      	mov	r8, r0
 800b302:	460c      	mov	r4, r1
 800b304:	469a      	mov	sl, r3
 800b306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b30a:	d807      	bhi.n	800b31c <_printf_i+0x28>
 800b30c:	2f62      	cmp	r7, #98	@ 0x62
 800b30e:	d80a      	bhi.n	800b326 <_printf_i+0x32>
 800b310:	2f00      	cmp	r7, #0
 800b312:	f000 80d2 	beq.w	800b4ba <_printf_i+0x1c6>
 800b316:	2f58      	cmp	r7, #88	@ 0x58
 800b318:	f000 80b9 	beq.w	800b48e <_printf_i+0x19a>
 800b31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b324:	e03a      	b.n	800b39c <_printf_i+0xa8>
 800b326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b32a:	2b15      	cmp	r3, #21
 800b32c:	d8f6      	bhi.n	800b31c <_printf_i+0x28>
 800b32e:	a101      	add	r1, pc, #4	@ (adr r1, 800b334 <_printf_i+0x40>)
 800b330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b334:	0800b38d 	.word	0x0800b38d
 800b338:	0800b3a1 	.word	0x0800b3a1
 800b33c:	0800b31d 	.word	0x0800b31d
 800b340:	0800b31d 	.word	0x0800b31d
 800b344:	0800b31d 	.word	0x0800b31d
 800b348:	0800b31d 	.word	0x0800b31d
 800b34c:	0800b3a1 	.word	0x0800b3a1
 800b350:	0800b31d 	.word	0x0800b31d
 800b354:	0800b31d 	.word	0x0800b31d
 800b358:	0800b31d 	.word	0x0800b31d
 800b35c:	0800b31d 	.word	0x0800b31d
 800b360:	0800b4a1 	.word	0x0800b4a1
 800b364:	0800b3cb 	.word	0x0800b3cb
 800b368:	0800b45b 	.word	0x0800b45b
 800b36c:	0800b31d 	.word	0x0800b31d
 800b370:	0800b31d 	.word	0x0800b31d
 800b374:	0800b4c3 	.word	0x0800b4c3
 800b378:	0800b31d 	.word	0x0800b31d
 800b37c:	0800b3cb 	.word	0x0800b3cb
 800b380:	0800b31d 	.word	0x0800b31d
 800b384:	0800b31d 	.word	0x0800b31d
 800b388:	0800b463 	.word	0x0800b463
 800b38c:	6833      	ldr	r3, [r6, #0]
 800b38e:	1d1a      	adds	r2, r3, #4
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6032      	str	r2, [r6, #0]
 800b394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b39c:	2301      	movs	r3, #1
 800b39e:	e09d      	b.n	800b4dc <_printf_i+0x1e8>
 800b3a0:	6833      	ldr	r3, [r6, #0]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	1d19      	adds	r1, r3, #4
 800b3a6:	6031      	str	r1, [r6, #0]
 800b3a8:	0606      	lsls	r6, r0, #24
 800b3aa:	d501      	bpl.n	800b3b0 <_printf_i+0xbc>
 800b3ac:	681d      	ldr	r5, [r3, #0]
 800b3ae:	e003      	b.n	800b3b8 <_printf_i+0xc4>
 800b3b0:	0645      	lsls	r5, r0, #25
 800b3b2:	d5fb      	bpl.n	800b3ac <_printf_i+0xb8>
 800b3b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	da03      	bge.n	800b3c4 <_printf_i+0xd0>
 800b3bc:	232d      	movs	r3, #45	@ 0x2d
 800b3be:	426d      	negs	r5, r5
 800b3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c4:	4859      	ldr	r0, [pc, #356]	@ (800b52c <_printf_i+0x238>)
 800b3c6:	230a      	movs	r3, #10
 800b3c8:	e011      	b.n	800b3ee <_printf_i+0xfa>
 800b3ca:	6821      	ldr	r1, [r4, #0]
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	0608      	lsls	r0, r1, #24
 800b3d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3d4:	d402      	bmi.n	800b3dc <_printf_i+0xe8>
 800b3d6:	0649      	lsls	r1, r1, #25
 800b3d8:	bf48      	it	mi
 800b3da:	b2ad      	uxthmi	r5, r5
 800b3dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3de:	4853      	ldr	r0, [pc, #332]	@ (800b52c <_printf_i+0x238>)
 800b3e0:	6033      	str	r3, [r6, #0]
 800b3e2:	bf14      	ite	ne
 800b3e4:	230a      	movne	r3, #10
 800b3e6:	2308      	moveq	r3, #8
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3ee:	6866      	ldr	r6, [r4, #4]
 800b3f0:	60a6      	str	r6, [r4, #8]
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	bfa2      	ittt	ge
 800b3f6:	6821      	ldrge	r1, [r4, #0]
 800b3f8:	f021 0104 	bicge.w	r1, r1, #4
 800b3fc:	6021      	strge	r1, [r4, #0]
 800b3fe:	b90d      	cbnz	r5, 800b404 <_printf_i+0x110>
 800b400:	2e00      	cmp	r6, #0
 800b402:	d04b      	beq.n	800b49c <_printf_i+0x1a8>
 800b404:	4616      	mov	r6, r2
 800b406:	fbb5 f1f3 	udiv	r1, r5, r3
 800b40a:	fb03 5711 	mls	r7, r3, r1, r5
 800b40e:	5dc7      	ldrb	r7, [r0, r7]
 800b410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b414:	462f      	mov	r7, r5
 800b416:	42bb      	cmp	r3, r7
 800b418:	460d      	mov	r5, r1
 800b41a:	d9f4      	bls.n	800b406 <_printf_i+0x112>
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	d10b      	bne.n	800b438 <_printf_i+0x144>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	07df      	lsls	r7, r3, #31
 800b424:	d508      	bpl.n	800b438 <_printf_i+0x144>
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	6861      	ldr	r1, [r4, #4]
 800b42a:	4299      	cmp	r1, r3
 800b42c:	bfde      	ittt	le
 800b42e:	2330      	movle	r3, #48	@ 0x30
 800b430:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b434:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b438:	1b92      	subs	r2, r2, r6
 800b43a:	6122      	str	r2, [r4, #16]
 800b43c:	f8cd a000 	str.w	sl, [sp]
 800b440:	464b      	mov	r3, r9
 800b442:	aa03      	add	r2, sp, #12
 800b444:	4621      	mov	r1, r4
 800b446:	4640      	mov	r0, r8
 800b448:	f7ff fee6 	bl	800b218 <_printf_common>
 800b44c:	3001      	adds	r0, #1
 800b44e:	d14a      	bne.n	800b4e6 <_printf_i+0x1f2>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	b004      	add	sp, #16
 800b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	f043 0320 	orr.w	r3, r3, #32
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	4833      	ldr	r0, [pc, #204]	@ (800b530 <_printf_i+0x23c>)
 800b464:	2778      	movs	r7, #120	@ 0x78
 800b466:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	6831      	ldr	r1, [r6, #0]
 800b46e:	061f      	lsls	r7, r3, #24
 800b470:	f851 5b04 	ldr.w	r5, [r1], #4
 800b474:	d402      	bmi.n	800b47c <_printf_i+0x188>
 800b476:	065f      	lsls	r7, r3, #25
 800b478:	bf48      	it	mi
 800b47a:	b2ad      	uxthmi	r5, r5
 800b47c:	6031      	str	r1, [r6, #0]
 800b47e:	07d9      	lsls	r1, r3, #31
 800b480:	bf44      	itt	mi
 800b482:	f043 0320 	orrmi.w	r3, r3, #32
 800b486:	6023      	strmi	r3, [r4, #0]
 800b488:	b11d      	cbz	r5, 800b492 <_printf_i+0x19e>
 800b48a:	2310      	movs	r3, #16
 800b48c:	e7ac      	b.n	800b3e8 <_printf_i+0xf4>
 800b48e:	4827      	ldr	r0, [pc, #156]	@ (800b52c <_printf_i+0x238>)
 800b490:	e7e9      	b.n	800b466 <_printf_i+0x172>
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	f023 0320 	bic.w	r3, r3, #32
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	e7f6      	b.n	800b48a <_printf_i+0x196>
 800b49c:	4616      	mov	r6, r2
 800b49e:	e7bd      	b.n	800b41c <_printf_i+0x128>
 800b4a0:	6833      	ldr	r3, [r6, #0]
 800b4a2:	6825      	ldr	r5, [r4, #0]
 800b4a4:	6961      	ldr	r1, [r4, #20]
 800b4a6:	1d18      	adds	r0, r3, #4
 800b4a8:	6030      	str	r0, [r6, #0]
 800b4aa:	062e      	lsls	r6, r5, #24
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	d501      	bpl.n	800b4b4 <_printf_i+0x1c0>
 800b4b0:	6019      	str	r1, [r3, #0]
 800b4b2:	e002      	b.n	800b4ba <_printf_i+0x1c6>
 800b4b4:	0668      	lsls	r0, r5, #25
 800b4b6:	d5fb      	bpl.n	800b4b0 <_printf_i+0x1bc>
 800b4b8:	8019      	strh	r1, [r3, #0]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	6123      	str	r3, [r4, #16]
 800b4be:	4616      	mov	r6, r2
 800b4c0:	e7bc      	b.n	800b43c <_printf_i+0x148>
 800b4c2:	6833      	ldr	r3, [r6, #0]
 800b4c4:	1d1a      	adds	r2, r3, #4
 800b4c6:	6032      	str	r2, [r6, #0]
 800b4c8:	681e      	ldr	r6, [r3, #0]
 800b4ca:	6862      	ldr	r2, [r4, #4]
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7f4 fe86 	bl	80001e0 <memchr>
 800b4d4:	b108      	cbz	r0, 800b4da <_printf_i+0x1e6>
 800b4d6:	1b80      	subs	r0, r0, r6
 800b4d8:	6060      	str	r0, [r4, #4]
 800b4da:	6863      	ldr	r3, [r4, #4]
 800b4dc:	6123      	str	r3, [r4, #16]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e4:	e7aa      	b.n	800b43c <_printf_i+0x148>
 800b4e6:	6923      	ldr	r3, [r4, #16]
 800b4e8:	4632      	mov	r2, r6
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	4640      	mov	r0, r8
 800b4ee:	47d0      	blx	sl
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	d0ad      	beq.n	800b450 <_printf_i+0x15c>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	079b      	lsls	r3, r3, #30
 800b4f8:	d413      	bmi.n	800b522 <_printf_i+0x22e>
 800b4fa:	68e0      	ldr	r0, [r4, #12]
 800b4fc:	9b03      	ldr	r3, [sp, #12]
 800b4fe:	4298      	cmp	r0, r3
 800b500:	bfb8      	it	lt
 800b502:	4618      	movlt	r0, r3
 800b504:	e7a6      	b.n	800b454 <_printf_i+0x160>
 800b506:	2301      	movs	r3, #1
 800b508:	4632      	mov	r2, r6
 800b50a:	4649      	mov	r1, r9
 800b50c:	4640      	mov	r0, r8
 800b50e:	47d0      	blx	sl
 800b510:	3001      	adds	r0, #1
 800b512:	d09d      	beq.n	800b450 <_printf_i+0x15c>
 800b514:	3501      	adds	r5, #1
 800b516:	68e3      	ldr	r3, [r4, #12]
 800b518:	9903      	ldr	r1, [sp, #12]
 800b51a:	1a5b      	subs	r3, r3, r1
 800b51c:	42ab      	cmp	r3, r5
 800b51e:	dcf2      	bgt.n	800b506 <_printf_i+0x212>
 800b520:	e7eb      	b.n	800b4fa <_printf_i+0x206>
 800b522:	2500      	movs	r5, #0
 800b524:	f104 0619 	add.w	r6, r4, #25
 800b528:	e7f5      	b.n	800b516 <_printf_i+0x222>
 800b52a:	bf00      	nop
 800b52c:	0800bf26 	.word	0x0800bf26
 800b530:	0800bf37 	.word	0x0800bf37

0800b534 <memmove>:
 800b534:	4288      	cmp	r0, r1
 800b536:	b510      	push	{r4, lr}
 800b538:	eb01 0402 	add.w	r4, r1, r2
 800b53c:	d902      	bls.n	800b544 <memmove+0x10>
 800b53e:	4284      	cmp	r4, r0
 800b540:	4623      	mov	r3, r4
 800b542:	d807      	bhi.n	800b554 <memmove+0x20>
 800b544:	1e43      	subs	r3, r0, #1
 800b546:	42a1      	cmp	r1, r4
 800b548:	d008      	beq.n	800b55c <memmove+0x28>
 800b54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b552:	e7f8      	b.n	800b546 <memmove+0x12>
 800b554:	4402      	add	r2, r0
 800b556:	4601      	mov	r1, r0
 800b558:	428a      	cmp	r2, r1
 800b55a:	d100      	bne.n	800b55e <memmove+0x2a>
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b566:	e7f7      	b.n	800b558 <memmove+0x24>

0800b568 <memcpy>:
 800b568:	440a      	add	r2, r1
 800b56a:	4291      	cmp	r1, r2
 800b56c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b570:	d100      	bne.n	800b574 <memcpy+0xc>
 800b572:	4770      	bx	lr
 800b574:	b510      	push	{r4, lr}
 800b576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b57a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b57e:	4291      	cmp	r1, r2
 800b580:	d1f9      	bne.n	800b576 <memcpy+0xe>
 800b582:	bd10      	pop	{r4, pc}

0800b584 <_realloc_r>:
 800b584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b588:	4680      	mov	r8, r0
 800b58a:	4615      	mov	r5, r2
 800b58c:	460c      	mov	r4, r1
 800b58e:	b921      	cbnz	r1, 800b59a <_realloc_r+0x16>
 800b590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b594:	4611      	mov	r1, r2
 800b596:	f7ff baef 	b.w	800ab78 <_malloc_r>
 800b59a:	b92a      	cbnz	r2, 800b5a8 <_realloc_r+0x24>
 800b59c:	f7ff fc9a 	bl	800aed4 <_free_r>
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	f000 f81a 	bl	800b5e0 <_malloc_usable_size_r>
 800b5ac:	4285      	cmp	r5, r0
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	d802      	bhi.n	800b5b8 <_realloc_r+0x34>
 800b5b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b5b6:	d8f4      	bhi.n	800b5a2 <_realloc_r+0x1e>
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	f7ff fadc 	bl	800ab78 <_malloc_r>
 800b5c0:	4607      	mov	r7, r0
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0ec      	beq.n	800b5a0 <_realloc_r+0x1c>
 800b5c6:	42b5      	cmp	r5, r6
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	bf28      	it	cs
 800b5ce:	4632      	movcs	r2, r6
 800b5d0:	f7ff ffca 	bl	800b568 <memcpy>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f7ff fc7c 	bl	800aed4 <_free_r>
 800b5dc:	463c      	mov	r4, r7
 800b5de:	e7e0      	b.n	800b5a2 <_realloc_r+0x1e>

0800b5e0 <_malloc_usable_size_r>:
 800b5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e4:	1f18      	subs	r0, r3, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfbc      	itt	lt
 800b5ea:	580b      	ldrlt	r3, [r1, r0]
 800b5ec:	18c0      	addlt	r0, r0, r3
 800b5ee:	4770      	bx	lr

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr


Samay_v18_new_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f388  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000110c  0800f518  0800f518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010624  08010624  00012088  2**0
                  CONTENTS
  4 .ARM          00000008  08010624  08010624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801062c  0801062c  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801062c  0801062c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010630  08010630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08010634  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012088  2**0
                  CONTENTS
 10 .bss          00005778  20000088  20000088  00012088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005800  20005800  00012088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199fe  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e2b  00000000  00000000  0002bab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0002f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109c  00000000  00000000  00030e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a0c  00000000  00000000  00031ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e715  00000000  00000000  000578f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cf3  00000000  00000000  00076005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146cf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066c8  00000000  00000000  00146d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0014d404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f500 	.word	0x0800f500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f500 	.word	0x0800f500

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Send_Uart+0x28>)
 800058a:	f008 fb48 	bl	8008c1e <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000374 	.word	0x20000374

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b0c5      	sub	sp, #276	@ 0x114
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f003 f8bd 	bl	8003720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 faa7 	bl	8000af8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005aa:	f000 fb0f 	bl	8000bcc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fc7d 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 80005b2:	f000 fc53 	bl	8000e5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 fbfd 	bl	8000db4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ba:	f000 fc25 	bl	8000e08 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005be:	f00a f88b 	bl	800a6d8 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005c2:	f000 fbd7 	bl	8000d74 <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80005c6:	f000 fb79 	bl	8000cbc <MX_I2S2_Init>
  MX_I2S3_Init();
 80005ca:	f000 fba5 	bl	8000d18 <MX_I2S3_Init>
  MX_I2C2_Init();
 80005ce:	f000 fb47 	bl	8000c60 <MX_I2C2_Init>


  // for new_eeprom.c new_rtc.c new_uart.c
  if (I2C1_ClockConfig() != HAL_OK) {
 80005d2:	f000 fd3d 	bl	8001050 <I2C1_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <main+0x44>
          Error_Handler(); // Handle clock config failure
 80005dc:	f001 fbca 	bl	8001d74 <Error_Handler>
      }
  MX_I2C1_Init();
 80005e0:	f000 fb10 	bl	8000c04 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e8:	f003 f90c 	bl	8003804 <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 80005ec:	f001 f95a 	bl	80018a4 <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 80005f0:	f001 f92e 	bl	8001850 <CODEC_RST>

  configure_codec();
 80005f4:	f001 f8ba 	bl	800176c <configure_codec>


  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 80005f8:	4ba2      	ldr	r3, [pc, #648]	@ (8000884 <main+0x2e8>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	4ba1      	ldr	r3, [pc, #644]	@ (8000888 <main+0x2ec>)
 8000602:	4413      	add	r3, r2
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	48a0      	ldr	r0, [pc, #640]	@ (800088c <main+0x2f0>)
 800060a:	f008 fb9a 	bl	8008d42 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 800060e:	4b9d      	ldr	r3, [pc, #628]	@ (8000884 <main+0x2e8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	4b9c      	ldr	r3, [pc, #624]	@ (8000888 <main+0x2ec>)
 8000618:	4413      	add	r3, r2
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	489c      	ldr	r0, [pc, #624]	@ (8000890 <main+0x2f4>)
 8000620:	f008 fb8f 	bl	8008d42 <HAL_UART_Receive_IT>

  ret=eeprom_init();
 8000624:	f001 fbac 	bl	8001d80 <eeprom_init>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b99      	ldr	r3, [pc, #612]	@ (8000894 <main+0x2f8>)
 800062e:	701a      	strb	r2, [r3, #0]
  if(ret==HAL_OK)
 8000630:	4b98      	ldr	r3, [pc, #608]	@ (8000894 <main+0x2f8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10a      	bne.n	800064e <main+0xb2>
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom ok\n\r", 11, HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	220b      	movs	r2, #11
 800063e:	4996      	ldr	r1, [pc, #600]	@ (8000898 <main+0x2fc>)
 8000640:	4892      	ldr	r0, [pc, #584]	@ (800088c <main+0x2f0>)
 8000642:	f008 faec 	bl	8008c1e <HAL_UART_Transmit>
  	HAL_Delay(100);
 8000646:	2064      	movs	r0, #100	@ 0x64
 8000648:	f003 f8dc 	bl	8003804 <HAL_Delay>
 800064c:	e009      	b.n	8000662 <main+0xc6>
  }
  else
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom notok\n\r", 14, HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	220e      	movs	r2, #14
 8000654:	4991      	ldr	r1, [pc, #580]	@ (800089c <main+0x300>)
 8000656:	488d      	ldr	r0, [pc, #564]	@ (800088c <main+0x2f0>)
 8000658:	f008 fae1 	bl	8008c1e <HAL_UART_Transmit>
  	HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f003 f8d1 	bl	8003804 <HAL_Delay>
  }

  rtc_init(&hi2c1);
 8000662:	488f      	ldr	r0, [pc, #572]	@ (80008a0 <main+0x304>)
 8000664:	f001 fc72 	bl	8001f4c <rtc_init>

  	rtc_timedate_t timedate = {1, 1, 0, 1, 1, 01, 0xFF};
 8000668:	4a8e      	ldr	r2, [pc, #568]	@ (80008a4 <main+0x308>)
 800066a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000672:	6018      	str	r0, [r3, #0]
 8000674:	3304      	adds	r3, #4
 8000676:	8019      	strh	r1, [r3, #0]
 8000678:	3302      	adds	r3, #2
 800067a:	0c0a      	lsrs	r2, r1, #16
 800067c:	701a      	strb	r2, [r3, #0]
      ret = rtc_settime(&timedate);
 800067e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fdf2 	bl	800226c <rtc_settime>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b81      	ldr	r3, [pc, #516]	@ (8000894 <main+0x2f8>)
 800068e:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 8000690:	2064      	movs	r0, #100	@ 0x64
 8000692:	f003 f8b7 	bl	8003804 <HAL_Delay>
      if (ret == HAL_OK) {
 8000696:	4b7f      	ldr	r3, [pc, #508]	@ (8000894 <main+0x2f8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d107      	bne.n	80006ae <main+0x112>
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2211      	movs	r2, #17
 80006a4:	4980      	ldr	r1, [pc, #512]	@ (80008a8 <main+0x30c>)
 80006a6:	4879      	ldr	r0, [pc, #484]	@ (800088c <main+0x2f0>)
 80006a8:	f008 fab9 	bl	8008c1e <HAL_UART_Transmit>
 80006ac:	e006      	b.n	80006bc <main+0x120>
      } else {
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	2214      	movs	r2, #20
 80006b4:	497d      	ldr	r1, [pc, #500]	@ (80008ac <main+0x310>)
 80006b6:	4875      	ldr	r0, [pc, #468]	@ (800088c <main+0x2f0>)
 80006b8:	f008 fab1 	bl	8008c1e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(mode)
 80006bc:	4b7c      	ldr	r3, [pc, #496]	@ (80008b0 <main+0x314>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <main+0x132>
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	f000 8110 	beq.w	80008ec <main+0x350>
 80006cc:	e1e7      	b.n	8000a9e <main+0x502>

	  case 0:

		  // Check if this is the first entry into Mode 0
		  static uint8_t first_entry = 1;
		  if(first_entry)
 80006ce:	4b79      	ldr	r3, [pc, #484]	@ (80008b4 <main+0x318>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d053      	beq.n	800077e <main+0x1e2>
				  HAL_UART_Transmit(&huart3, (uint8_t*)"No config\n\r", 11, HAL_MAX_DELAY);
			  }*/

			  // Read previous configuration from EEPROM
			        char config_buffer[RX_buffersize];
			        memset(config_buffer, 0, RX_buffersize); // Clear the buffer
 80006d6:	463b      	mov	r3, r7
 80006d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00d fb00 	bl	800dce4 <memset>
			        if (eeprom_read(0x0000, (uint8_t*)config_buffer, RX_buffersize) != NULL)
 80006e4:	463b      	mov	r3, r7
 80006e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ea:	4619      	mov	r1, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	f001 fb85 	bl	8001dfc <eeprom_read>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d038      	beq.n	800076a <main+0x1ce>
			        {
			          // Check if the data is valid (not all 0xFF or empty)
			          if (strlen(config_buffer) > 0 && config_buffer[0] != 0xFF && config_buffer[0] != 0x00)
 80006f8:	463b      	mov	r3, r7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d02c      	beq.n	800075a <main+0x1be>
 8000700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2bff      	cmp	r3, #255	@ 0xff
 800070c:	d025      	beq.n	800075a <main+0x1be>
 800070e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01e      	beq.n	800075a <main+0x1be>
			          {
			            HAL_UART_Transmit(&huart3, (uint8_t*)"Restoring previous configuration: ", 33, HAL_MAX_DELAY);
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	2221      	movs	r2, #33	@ 0x21
 8000722:	4965      	ldr	r1, [pc, #404]	@ (80008b8 <main+0x31c>)
 8000724:	4859      	ldr	r0, [pc, #356]	@ (800088c <main+0x2f0>)
 8000726:	f008 fa7a 	bl	8008c1e <HAL_UART_Transmit>
			            HAL_UART_Transmit(&huart3, (uint8_t*)config_buffer, strlen(config_buffer), HAL_MAX_DELAY);
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd4f 	bl	80001d0 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	4639      	mov	r1, r7
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	4853      	ldr	r0, [pc, #332]	@ (800088c <main+0x2f0>)
 800073e:	f008 fa6e 	bl	8008c1e <HAL_UART_Transmit>
			            HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2202      	movs	r2, #2
 8000748:	495c      	ldr	r1, [pc, #368]	@ (80008bc <main+0x320>)
 800074a:	4850      	ldr	r0, [pc, #320]	@ (800088c <main+0x2f0>)
 800074c:	f008 fa67 	bl	8008c1e <HAL_UART_Transmit>

			            // Parse the configuration to restore alarms (id=2)
			            parse_and_print(config_buffer);
 8000750:	463b      	mov	r3, r7
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f812 	bl	800277c <parse_and_print>
 8000758:	e00e      	b.n	8000778 <main+0x1dc>
			          }
			          else
			          {
			            HAL_UART_Transmit(&huart3, (uint8_t*)"No valid previous configuration found\n\r", 39, HAL_MAX_DELAY);
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	2227      	movs	r2, #39	@ 0x27
 8000760:	4957      	ldr	r1, [pc, #348]	@ (80008c0 <main+0x324>)
 8000762:	484a      	ldr	r0, [pc, #296]	@ (800088c <main+0x2f0>)
 8000764:	f008 fa5b 	bl	8008c1e <HAL_UART_Transmit>
 8000768:	e006      	b.n	8000778 <main+0x1dc>
			          }
			        }
			        else
			        {
			          HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed during init\n\r", 32, HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2220      	movs	r2, #32
 8000770:	4954      	ldr	r1, [pc, #336]	@ (80008c4 <main+0x328>)
 8000772:	4846      	ldr	r0, [pc, #280]	@ (800088c <main+0x2f0>)
 8000774:	f008 fa53 	bl	8008c1e <HAL_UART_Transmit>
			        }

			  first_entry = 0; // Only run this once when entering Mode 0
 8000778:	4b4e      	ldr	r3, [pc, #312]	@ (80008b4 <main+0x318>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
		  }



	  if (alarm_triggered_flag) {
 800077e:	4b52      	ldr	r3, [pc, #328]	@ (80008c8 <main+0x32c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d05a      	beq.n	800083e <main+0x2a2>
	              handle_recording();
 8000788:	f000 fc96 	bl	80010b8 <handle_recording>

	              // Manage alarm queue (optional)
	              if (current_idx < alarm_count - 1) {
 800078c:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <main+0x330>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b4f      	ldr	r3, [pc, #316]	@ (80008d0 <main+0x334>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	429a      	cmp	r2, r3
 800079a:	da4c      	bge.n	8000836 <main+0x29a>
	                  current_idx++;
 800079c:	4b4b      	ldr	r3, [pc, #300]	@ (80008cc <main+0x330>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b49      	ldr	r3, [pc, #292]	@ (80008cc <main+0x330>)
 80007a6:	701a      	strb	r2, [r3, #0]
	                  if (rtc_setalarm(&alarm_queue[current_idx]) == HAL_OK) {
 80007a8:	4b48      	ldr	r3, [pc, #288]	@ (80008cc <main+0x330>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4613      	mov	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	4a47      	ldr	r2, [pc, #284]	@ (80008d4 <main+0x338>)
 80007b6:	4413      	add	r3, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fe2f 	bl	800241c <rtc_setalarm>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d131      	bne.n	8000828 <main+0x28c>
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 80007c4:	4b41      	ldr	r3, [pc, #260]	@ (80008cc <main+0x330>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a42      	ldr	r2, [pc, #264]	@ (80008d4 <main+0x338>)
 80007cc:	460b      	mov	r3, r1
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	1a5b      	subs	r3, r3, r1
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 80007d6:	4618      	mov	r0, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 80007d8:	4b3c      	ldr	r3, [pc, #240]	@ (80008cc <main+0x330>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	4a3d      	ldr	r2, [pc, #244]	@ (80008d4 <main+0x338>)
 80007e0:	460b      	mov	r3, r1
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	1a5b      	subs	r3, r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	3301      	adds	r3, #1
 80007ea:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 80007ec:	461c      	mov	r4, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 80007ee:	4b37      	ldr	r3, [pc, #220]	@ (80008cc <main+0x330>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <main+0x338>)
 80007f6:	460b      	mov	r3, r1
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	1a5b      	subs	r3, r3, r1
 80007fc:	4413      	add	r3, r2
 80007fe:	3302      	adds	r3, #2
 8000800:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	4623      	mov	r3, r4
 8000806:	4602      	mov	r2, r0
 8000808:	4933      	ldr	r1, [pc, #204]	@ (80008d8 <main+0x33c>)
 800080a:	4834      	ldr	r0, [pc, #208]	@ (80008dc <main+0x340>)
 800080c:	f00d f9a2 	bl	800db54 <siprintf>
	                      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000810:	4832      	ldr	r0, [pc, #200]	@ (80008dc <main+0x340>)
 8000812:	f7ff fcdd 	bl	80001d0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	492f      	ldr	r1, [pc, #188]	@ (80008dc <main+0x340>)
 8000820:	481a      	ldr	r0, [pc, #104]	@ (800088c <main+0x2f0>)
 8000822:	f008 f9fc 	bl	8008c1e <HAL_UART_Transmit>
 8000826:	e006      	b.n	8000836 <main+0x29a>
	                  } else {
	                      HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to set next alarm\n\r", 26, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	221a      	movs	r2, #26
 800082e:	492c      	ldr	r1, [pc, #176]	@ (80008e0 <main+0x344>)
 8000830:	4816      	ldr	r0, [pc, #88]	@ (800088c <main+0x2f0>)
 8000832:	f008 f9f4 	bl	8008c1e <HAL_UART_Transmit>
	                  }
	              }

	              alarm_triggered_flag = 0; // Clear the flag after handling
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <main+0x32c>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e006      	b.n	800084c <main+0x2b0>
	          } else if (is_recording) {
 800083e:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <main+0x348>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <main+0x2b0>
	              // Continue checking save_frequency even if no new alarm
	              handle_recording();
 8000848:	f000 fc36 	bl	80010b8 <handle_recording>
	          }


	  ret = rtc_gettime(&timedate);
 800084c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fd6e 	bl	8002332 <rtc_gettime>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <main+0x2f8>)
 800085c:	701a      	strb	r2, [r3, #0]
	  if (ret == HAL_OK) {
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <main+0x2f8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d008      	beq.n	8000878 <main+0x2dc>
		  sprintf(uart_buffer, "current time = %02d:%02d:%02d\n\r", timedate.hour, timedate.minute, timedate.second);
		  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
#endif
	  }
	  else {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time not ok\n\r", 21, HAL_MAX_DELAY);
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2215      	movs	r2, #21
 800086c:	491e      	ldr	r1, [pc, #120]	@ (80008e8 <main+0x34c>)
 800086e:	4807      	ldr	r0, [pc, #28]	@ (800088c <main+0x2f0>)
 8000870:	f008 f9d5 	bl	8008c1e <HAL_UART_Transmit>
		  return 1;
 8000874:	2301      	movs	r3, #1
 8000876:	e11f      	b.n	8000ab8 <main+0x51c>
	  }
	  HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087c:	f002 ffc2 	bl	8003804 <HAL_Delay>
	  break;
 8000880:	e119      	b.n	8000ab6 <main+0x51a>
 8000882:	bf00      	nop
 8000884:	2000562c 	.word	0x2000562c
 8000888:	2000552c 	.word	0x2000552c
 800088c:	20000374 	.word	0x20000374
 8000890:	20000330 	.word	0x20000330
 8000894:	200000b0 	.word	0x200000b0
 8000898:	0800f614 	.word	0x0800f614
 800089c:	0800f620 	.word	0x0800f620
 80008a0:	20000108 	.word	0x20000108
 80008a4:	0800f7b0 	.word	0x0800f7b0
 80008a8:	0800f630 	.word	0x0800f630
 80008ac:	0800f644 	.word	0x0800f644
 80008b0:	20005462 	.word	0x20005462
 80008b4:	2000001e 	.word	0x2000001e
 80008b8:	0800f65c 	.word	0x0800f65c
 80008bc:	0800f680 	.word	0x0800f680
 80008c0:	0800f684 	.word	0x0800f684
 80008c4:	0800f6ac 	.word	0x0800f6ac
 80008c8:	20005460 	.word	0x20005460
 80008cc:	2000552b 	.word	0x2000552b
 80008d0:	2000552a 	.word	0x2000552a
 80008d4:	200054c8 	.word	0x200054c8
 80008d8:	0800f6d0 	.word	0x0800f6d0
 80008dc:	20005638 	.word	0x20005638
 80008e0:	0800f6f4 	.word	0x0800f6f4
 80008e4:	20005461 	.word	0x20005461
 80008e8:	0800f710 	.word	0x0800f710

	  case 1:
		  if(datarecived)
 80008ec:	4b75      	ldr	r3, [pc, #468]	@ (8000ac4 <main+0x528>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 80de 	beq.w	8000ab4 <main+0x518>
		  	  {
		  		  //uint8_t eeprom_data[RX_buffersize];
		  		  senddata(rxbuffer, strlen(rxbuffer)); // Send received data
 80008f8:	4873      	ldr	r0, [pc, #460]	@ (8000ac8 <main+0x52c>)
 80008fa:	f7ff fc69 	bl	80001d0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	4870      	ldr	r0, [pc, #448]	@ (8000ac8 <main+0x52c>)
 8000906:	f001 fea3 	bl	8002650 <senddata>

		  		 ret=rtc_gettime(&timedate);
 800090a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fd0f 	bl	8002332 <rtc_gettime>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	4b6c      	ldr	r3, [pc, #432]	@ (8000acc <main+0x530>)
 800091a:	701a      	strb	r2, [r3, #0]
		  		        	  	                	  	            if(ret==HAL_OK)
 800091c:	4b6b      	ldr	r3, [pc, #428]	@ (8000acc <main+0x530>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d135      	bne.n	8000990 <main+0x3f4>
		  		        	  	                	  	            {
		  		        	  	                	  	          	  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8000924:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8000928:	461a      	mov	r2, r3
 800092a:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800092e:	4619      	mov	r1, r3
 8000930:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	460b      	mov	r3, r1
 8000938:	4965      	ldr	r1, [pc, #404]	@ (8000ad0 <main+0x534>)
 800093a:	4866      	ldr	r0, [pc, #408]	@ (8000ad4 <main+0x538>)
 800093c:	f00d f90a 	bl	800db54 <siprintf>
		  		        	  	                	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000940:	4864      	ldr	r0, [pc, #400]	@ (8000ad4 <main+0x538>)
 8000942:	f7ff fc45 	bl	80001d0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4961      	ldr	r1, [pc, #388]	@ (8000ad4 <main+0x538>)
 8000950:	4861      	ldr	r0, [pc, #388]	@ (8000ad8 <main+0x53c>)
 8000952:	f008 f964 	bl	8008c1e <HAL_UART_Transmit>
		  		        	  	                	  	          	  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 8000956:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800095a:	461a      	mov	r2, r3
 800095c:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 8000960:	4619      	mov	r1, r3
 8000962:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	460b      	mov	r3, r1
 800096a:	495c      	ldr	r1, [pc, #368]	@ (8000adc <main+0x540>)
 800096c:	4859      	ldr	r0, [pc, #356]	@ (8000ad4 <main+0x538>)
 800096e:	f00d f8f1 	bl	800db54 <siprintf>
		  		        	  	                	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000972:	4858      	ldr	r0, [pc, #352]	@ (8000ad4 <main+0x538>)
 8000974:	f7ff fc2c 	bl	80001d0 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	4954      	ldr	r1, [pc, #336]	@ (8000ad4 <main+0x538>)
 8000982:	4855      	ldr	r0, [pc, #340]	@ (8000ad8 <main+0x53c>)
 8000984:	f008 f94b 	bl	8008c1e <HAL_UART_Transmit>
		  		        	  	                	  	          	  HAL_Delay(100);
 8000988:	2064      	movs	r0, #100	@ 0x64
 800098a:	f002 ff3b 	bl	8003804 <HAL_Delay>
 800098e:	e009      	b.n	80009a4 <main+0x408>
		  		        	  	                	  	            }
		  		        	  	                	  	            else
		  		        	  	                	  	            {
		  		        	  	                	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	2214      	movs	r2, #20
 8000996:	4952      	ldr	r1, [pc, #328]	@ (8000ae0 <main+0x544>)
 8000998:	484f      	ldr	r0, [pc, #316]	@ (8000ad8 <main+0x53c>)
 800099a:	f008 f940 	bl	8008c1e <HAL_UART_Transmit>
		  		        	  	                	  	          	  HAL_Delay(100);
 800099e:	2064      	movs	r0, #100	@ 0x64
 80009a0:	f002 ff30 	bl	8003804 <HAL_Delay>
		  		        	  	                	  	            }

		  		        	  	                	  	      parse_and_print((char*)rxbuffer);
 80009a4:	4848      	ldr	r0, [pc, #288]	@ (8000ac8 <main+0x52c>)
 80009a6:	f001 fee9 	bl	800277c <parse_and_print>

		  		  char rxCopy[RX_buffersize];
		  		  strcpy(rxCopy, (char*)eeprom_data);*/


		  		  ret=rtc_gettime(&timedate);
 80009aa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fcbf 	bl	8002332 <rtc_gettime>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b44      	ldr	r3, [pc, #272]	@ (8000acc <main+0x530>)
 80009ba:	701a      	strb	r2, [r3, #0]
		  		  if(ret==HAL_OK)
 80009bc:	4b43      	ldr	r3, [pc, #268]	@ (8000acc <main+0x530>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d135      	bne.n	8000a30 <main+0x494>
		  		  {
		  			  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 80009c4:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80009c8:	461a      	mov	r2, r3
 80009ca:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80009ce:	4619      	mov	r1, r3
 80009d0:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	460b      	mov	r3, r1
 80009d8:	493d      	ldr	r1, [pc, #244]	@ (8000ad0 <main+0x534>)
 80009da:	483e      	ldr	r0, [pc, #248]	@ (8000ad4 <main+0x538>)
 80009dc:	f00d f8ba 	bl	800db54 <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80009e0:	483c      	ldr	r0, [pc, #240]	@ (8000ad4 <main+0x538>)
 80009e2:	f7ff fbf5 	bl	80001d0 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	4939      	ldr	r1, [pc, #228]	@ (8000ad4 <main+0x538>)
 80009f0:	4839      	ldr	r0, [pc, #228]	@ (8000ad8 <main+0x53c>)
 80009f2:	f008 f914 	bl	8008c1e <HAL_UART_Transmit>
		  			  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 80009f6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80009fa:	461a      	mov	r2, r3
 80009fc:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 8000a00:	4619      	mov	r1, r3
 8000a02:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4934      	ldr	r1, [pc, #208]	@ (8000adc <main+0x540>)
 8000a0c:	4831      	ldr	r0, [pc, #196]	@ (8000ad4 <main+0x538>)
 8000a0e:	f00d f8a1 	bl	800db54 <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000a12:	4830      	ldr	r0, [pc, #192]	@ (8000ad4 <main+0x538>)
 8000a14:	f7ff fbdc 	bl	80001d0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	492c      	ldr	r1, [pc, #176]	@ (8000ad4 <main+0x538>)
 8000a22:	482d      	ldr	r0, [pc, #180]	@ (8000ad8 <main+0x53c>)
 8000a24:	f008 f8fb 	bl	8008c1e <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	@ 0x64
 8000a2a:	f002 feeb 	bl	8003804 <HAL_Delay>
 8000a2e:	e009      	b.n	8000a44 <main+0x4a8>
		  		  }
		  		  else
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	2214      	movs	r2, #20
 8000a36:	492a      	ldr	r1, [pc, #168]	@ (8000ae0 <main+0x544>)
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <main+0x53c>)
 8000a3a:	f008 f8f0 	bl	8008c1e <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000a3e:	2064      	movs	r0, #100	@ 0x64
 8000a40:	f002 fee0 	bl	8003804 <HAL_Delay>
		  		  }

		  		  //parse_and_print((char*)rxCopy);
		  		  mode = 0; // Switch to Debug Mode after writing config
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <main+0x548>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, (uint8_t*)"Switching to Debug Mode\n\r", 25, HAL_MAX_DELAY);
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2219      	movs	r2, #25
 8000a50:	4925      	ldr	r1, [pc, #148]	@ (8000ae8 <main+0x54c>)
 8000a52:	4821      	ldr	r0, [pc, #132]	@ (8000ad8 <main+0x53c>)
 8000a54:	f008 f8e3 	bl	8008c1e <HAL_UART_Transmit>


		  		  datarecived = 0;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <main+0x528>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
		  		  rxindex = 0;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <main+0x550>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
		  		  memset(rxbuffer, 0, RX_buffersize); // Clear buffer
 8000a64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4817      	ldr	r0, [pc, #92]	@ (8000ac8 <main+0x52c>)
 8000a6c:	f00d f93a 	bl	800dce4 <memset>
		  		  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxbuffer[rxindex], 1);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <main+0x550>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <main+0x52c>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <main+0x53c>)
 8000a82:	f008 f95e 	bl	8008d42 <HAL_UART_Receive_IT>
		  		  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <main+0x550>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <main+0x52c>)
 8000a90:	4413      	add	r3, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4816      	ldr	r0, [pc, #88]	@ (8000af0 <main+0x554>)
 8000a98:	f008 f953 	bl	8008d42 <HAL_UART_Receive_IT>
		  	  }
		  break;
 8000a9c:	e00a      	b.n	8000ab4 <main+0x518>

	  default:
	          HAL_UART_Transmit(&huart3, (uint8_t*)"Invalid mode\n\r", 14, HAL_MAX_DELAY);
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	220e      	movs	r2, #14
 8000aa4:	4913      	ldr	r1, [pc, #76]	@ (8000af4 <main+0x558>)
 8000aa6:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <main+0x53c>)
 8000aa8:	f008 f8b9 	bl	8008c1e <HAL_UART_Transmit>
	          mode = 1; // Reset to config mode if something goes wrong
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <main+0x548>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
	          break;
 8000ab2:	e000      	b.n	8000ab6 <main+0x51a>
		  break;
 8000ab4:	bf00      	nop
	  switch(mode)
 8000ab6:	e601      	b.n	80006bc <main+0x120>

	  }

  /* USER CODE END 3 */
}
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000562d 	.word	0x2000562d
 8000ac8:	2000552c 	.word	0x2000552c
 8000acc:	200000b0 	.word	0x200000b0
 8000ad0:	0800f728 	.word	0x0800f728
 8000ad4:	20005638 	.word	0x20005638
 8000ad8:	20000374 	.word	0x20000374
 8000adc:	0800f748 	.word	0x0800f748
 8000ae0:	0800f76c 	.word	0x0800f76c
 8000ae4:	20005462 	.word	0x20005462
 8000ae8:	0800f784 	.word	0x0800f784
 8000aec:	2000562c 	.word	0x2000562c
 8000af0:	20000330 	.word	0x20000330
 8000af4:	0800f7a0 	.word	0x0800f7a0

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	@ 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00d f8ec 	bl	800dce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a27      	ldr	r2, [pc, #156]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 8000b6c:	23a5      	movs	r3, #165	@ 0xa5
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f006 faa1 	bl	80070c4 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f001 f8f4 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2105      	movs	r1, #5
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fd02 	bl	80075b4 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bb6:	f001 f8dd 	bl	8001d74 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	@ 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bde:	2301      	movs	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000be2:	2332      	movs	r3, #50	@ 0x32
 8000be4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f006 ff01 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000bf8:	f001 f8bc 	bl	8001d74 <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c0a:	4a13      	ldr	r2, [pc, #76]	@ (8000c58 <MX_I2C1_Init+0x54>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c10:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <MX_I2C1_Init+0x58>)
 8000c12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_I2C1_Init+0x50>)
 8000c42:	f003 fcfd 	bl	8004640 <HAL_I2C_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f001 f892 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000108 	.word	0x20000108
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	000186a0 	.word	0x000186a0

08000c60 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <MX_I2C2_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <MX_I2C2_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <MX_I2C2_Init+0x50>)
 8000c9e:	f003 fccf 	bl	8004640 <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f001 f864 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	40005800 	.word	0x40005800
 8000cb8:	000186a0 	.word	0x000186a0

08000cbc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <MX_I2S2_Init+0x58>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ccc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000ce2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2S2_Init+0x54>)
 8000cfc:	f005 fa02 	bl	8006104 <HAL_I2S_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000d06:	f001 f835 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000015c 	.word	0x2000015c
 8000d14:	40003800 	.word	0x40003800

08000d18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <MX_I2S3_Init+0x58>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d3e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000d42:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d58:	f005 f9d4 	bl	8006104 <HAL_I2S_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d62:	f001 f807 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001a4 	.word	0x200001a4
 8000d70:	40003c00 	.word	0x40003c00

08000d74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <MX_SDIO_SD_Init+0x3c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <MX_SDIO_SD_Init+0x38>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	200002ac 	.word	0x200002ac
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <MX_USART2_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dec:	f007 feca 	bl	8008b84 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 ffbd 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000330 	.word	0x20000330
 8000e04:	40004400 	.word	0x40004400

08000e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MX_USART3_UART_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_USART3_UART_Init+0x4c>)
 8000e40:	f007 fea0 	bl	8008b84 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f000 ff93 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000374 	.word	0x20000374
 8000e58:	40004800 	.word	0x40004800

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <MX_DMA_Init+0x4c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	200b      	movs	r0, #11
 8000e84:	f002 fdbd 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e88:	200b      	movs	r0, #11
 8000e8a:	f002 fdd6 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200e      	movs	r0, #14
 8000e94:	f002 fdb5 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e98:	200e      	movs	r0, #14
 8000e9a:	f002 fdce 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a5d      	ldr	r2, [pc, #372]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	4b57      	ldr	r3, [pc, #348]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a56      	ldr	r2, [pc, #344]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b54      	ldr	r3, [pc, #336]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b50      	ldr	r3, [pc, #320]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a4f      	ldr	r2, [pc, #316]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b46      	ldr	r3, [pc, #280]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b42      	ldr	r3, [pc, #264]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a41      	ldr	r2, [pc, #260]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b3f      	ldr	r3, [pc, #252]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a3a      	ldr	r2, [pc, #232]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_GPIO_Init+0x194>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2132      	movs	r1, #50	@ 0x32
 8000f6e:	4835      	ldr	r0, [pc, #212]	@ (8001044 <MX_GPIO_Init+0x198>)
 8000f70:	f003 fb34 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000f74:	2200      	movs	r2, #0
 8000f76:	f24b 0178 	movw	r1, #45176	@ 0xb078
 8000f7a:	4833      	ldr	r0, [pc, #204]	@ (8001048 <MX_GPIO_Init+0x19c>)
 8000f7c:	f003 fb2e 	bl	80045dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000f86:	4831      	ldr	r0, [pc, #196]	@ (800104c <MX_GPIO_Init+0x1a0>)
 8000f88:	f003 fb28 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4828      	ldr	r0, [pc, #160]	@ (8001044 <MX_GPIO_Init+0x198>)
 8000fa2:	f003 f967 	bl	8004274 <HAL_GPIO_Init>


  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8000fa6:	2332      	movs	r3, #50	@ 0x32
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4821      	ldr	r0, [pc, #132]	@ (8001044 <MX_GPIO_Init+0x198>)
 8000fbe:	f003 f959 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000fc2:	f24b 0378 	movw	r3, #45176	@ 0xb078
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	@ (8001048 <MX_GPIO_Init+0x19c>)
 8000fdc:	f003 f94a 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fe0:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_GPIO_Init+0x1a0>)
 8000ffa:	f003 f93b 	bl	8004274 <HAL_GPIO_Init>



  /*Configure GPIO pin : PD0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]

  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001002:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001006:	623b      	str	r3, [r7, #32]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_GPIO_Init+0x19c>)
 8001014:	f003 f92e 	bl	8004274 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2006      	movs	r0, #6
 800101e:	f002 fcf0 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001022:	2006      	movs	r0, #6
 8001024:	f002 fd09 	bl	8003a3a <HAL_NVIC_EnableIRQ>


    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2008      	movs	r0, #8
 800102e:	f002 fce8 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001032:	2008      	movs	r0, #8
 8001034:	f002 fd01 	bl	8003a3a <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	@ 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40021000 	.word	0x40021000
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40020000 	.word	0x40020000

08001050 <I2C1_ClockConfig>:

/* USER CODE BEGIN 4 */



HAL_StatusTypeDef I2C1_ClockConfig(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
    // Enable the clock for I2C1 (APB1 peripheral)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

    // Optional: Verify clock is enabled by checking the RCC register
    if (__HAL_RCC_I2C1_IS_CLK_ENABLED()) {
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <I2C1_ClockConfig+0x58>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d008      	beq.n	8001090 <I2C1_ClockConfig+0x40>
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enabled\n\r", 20, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	2214      	movs	r2, #20
 8001084:	4909      	ldr	r1, [pc, #36]	@ (80010ac <I2C1_ClockConfig+0x5c>)
 8001086:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <I2C1_ClockConfig+0x60>)
 8001088:	f007 fdc9 	bl	8008c1e <HAL_UART_Transmit>
        return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e007      	b.n	80010a0 <I2C1_ClockConfig+0x50>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enable failed\n\r", 26, HAL_MAX_DELAY);
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	221a      	movs	r2, #26
 8001096:	4907      	ldr	r1, [pc, #28]	@ (80010b4 <I2C1_ClockConfig+0x64>)
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <I2C1_ClockConfig+0x60>)
 800109a:	f007 fdc0 	bl	8008c1e <HAL_UART_Transmit>
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
    }
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	0800f7b8 	.word	0x0800f7b8
 80010b0:	20000374 	.word	0x20000374
 80010b4:	0800f7d0 	.word	0x0800f7d0

080010b8 <handle_recording>:


void handle_recording(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    if (!is_recording) {
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <handle_recording+0x6c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d119      	bne.n	80010fa <handle_recording+0x42>
        if (Start_Recording() == 0) {
 80010c6:	f000 f883 	bl	80011d0 <Start_Recording>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10d      	bne.n	80010ec <handle_recording+0x34>
            is_recording = 1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <handle_recording+0x6c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
            save_frequency = 0; // Reset save_frequency to start fresh
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <handle_recording+0x70>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)"Recording started due to alarm\n\r", 32, HAL_MAX_DELAY);
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2220      	movs	r2, #32
 80010e2:	4912      	ldr	r1, [pc, #72]	@ (800112c <handle_recording+0x74>)
 80010e4:	4812      	ldr	r0, [pc, #72]	@ (8001130 <handle_recording+0x78>)
 80010e6:	f007 fd9a 	bl	8008c1e <HAL_UART_Transmit>
 80010ea:	e006      	b.n	80010fa <handle_recording+0x42>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to start recording\n\r", 27, HAL_MAX_DELAY);
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	221b      	movs	r2, #27
 80010f2:	4910      	ldr	r1, [pc, #64]	@ (8001134 <handle_recording+0x7c>)
 80010f4:	480e      	ldr	r0, [pc, #56]	@ (8001130 <handle_recording+0x78>)
 80010f6:	f007 fd92 	bl	8008c1e <HAL_UART_Transmit>
        //sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
        //HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);


    // Check save_frequency condition
    if (is_recording && save_frequency >= 1880) {
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <handle_recording+0x6c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00c      	beq.n	800111e <handle_recording+0x66>
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <handle_recording+0x70>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f5b3 6feb 	cmp.w	r3, #1880	@ 0x758
 800110c:	db07      	blt.n	800111e <handle_recording+0x66>
        stop_recording();
 800110e:	f000 fa0b 	bl	8001528 <stop_recording>
        is_recording = 0;
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <handle_recording+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit(&huart3, (uint8_t*)"Recording stopped (save_frequency >= 1880)\n\r", 44, HAL_MAX_DELAY);
        HAL_Delay(100); // Safe in main loop context
 8001118:	2064      	movs	r0, #100	@ 0x64
 800111a:	f002 fb73 	bl	8003804 <HAL_Delay>
    }
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20005461 	.word	0x20005461
 8001128:	20005458 	.word	0x20005458
 800112c:	0800f7ec 	.word	0x0800f7ec
 8001130:	20000374 	.word	0x20000374
 8001134:	0800f810 	.word	0x0800f810

08001138 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d111      	bne.n	800116c <HAL_GPIO_EXTI_Callback+0x34>
        if (rtc_check_alarm_flag() == 1) {
 8001148:	f001 fa24 	bl	8002594 <rtc_check_alarm_flag>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d12b      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
            alarm_triggered_flag = 1; // Raise flag for main loop
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
            rtc_clearalarm();         // Clear the alarm flag
 8001158:	f001 f9fc 	bl	8002554 <rtc_clearalarm>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm interrupt triggered!\n\r", 28, HAL_MAX_DELAY);
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	221c      	movs	r2, #28
 8001162:	4915      	ldr	r1, [pc, #84]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001164:	4815      	ldr	r0, [pc, #84]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001166:	f007 fd5a 	bl	8008c1e <HAL_UART_Transmit>
                mode = 0; // Ground (low)
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
            }
        }

}
 800116a:	e01e      	b.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
    else if (GPIO_Pin == GPIO_PIN_2) { // EXTI2 for PE2
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d11b      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
            if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET) {
 8001172:	2104      	movs	r1, #4
 8001174:	4812      	ldr	r0, [pc, #72]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x88>)
 8001176:	f003 fa19 	bl	80045ac <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10a      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x5e>
                mode = 1; // VCC (high)
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 1\n\r", 28, HAL_MAX_DELAY);
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	221c      	movs	r2, #28
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800118e:	480b      	ldr	r0, [pc, #44]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001190:	f007 fd45 	bl	8008c1e <HAL_UART_Transmit>
}
 8001194:	e009      	b.n	80011aa <HAL_GPIO_EXTI_Callback+0x72>
                mode = 0; // Ground (low)
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	221c      	movs	r2, #28
 80011a2:	490a      	ldr	r1, [pc, #40]	@ (80011cc <HAL_GPIO_EXTI_Callback+0x94>)
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x84>)
 80011a6:	f007 fd3a 	bl	8008c1e <HAL_UART_Transmit>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20005460 	.word	0x20005460
 80011b8:	0800f82c 	.word	0x0800f82c
 80011bc:	20000374 	.word	0x20000374
 80011c0:	40021000 	.word	0x40021000
 80011c4:	20005462 	.word	0x20005462
 80011c8:	0800f84c 	.word	0x0800f84c
 80011cc:	0800f864 	.word	0x0800f864

080011d0 <Start_Recording>:




int Start_Recording(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    /********************************************************************************************************** SD card ***/
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // OE SD 1 and 2
 80011d6:	2201      	movs	r2, #1
 80011d8:	2108      	movs	r1, #8
 80011da:	48ae      	ldr	r0, [pc, #696]	@ (8001494 <Start_Recording+0x2c4>)
 80011dc:	f003 f9fe 	bl	80045dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	48ab      	ldr	r0, [pc, #684]	@ (8001494 <Start_Recording+0x2c4>)
 80011e6:	f003 f9f9 	bl	80045dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // OE SD 3 and 4
 80011ea:	2201      	movs	r2, #1
 80011ec:	2120      	movs	r1, #32
 80011ee:	48a9      	ldr	r0, [pc, #676]	@ (8001494 <Start_Recording+0x2c4>)
 80011f0:	f003 f9f4 	bl	80045dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2140      	movs	r1, #64	@ 0x40
 80011f8:	48a6      	ldr	r0, [pc, #664]	@ (8001494 <Start_Recording+0x2c4>)
 80011fa:	f003 f9ef 	bl	80045dc <HAL_GPIO_WritePin>

    /********************************************************************************************************** SD 1 ***/
    message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 80011fe:	49a6      	ldr	r1, [pc, #664]	@ (8001498 <Start_Recording+0x2c8>)
 8001200:	48a6      	ldr	r0, [pc, #664]	@ (800149c <Start_Recording+0x2cc>)
 8001202:	f000 fd95 	bl	8001d30 <message>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // OE Pin pulled low SD 1 and 2
 8001206:	2200      	movs	r2, #0
 8001208:	2108      	movs	r1, #8
 800120a:	48a2      	ldr	r0, [pc, #648]	@ (8001494 <Start_Recording+0x2c4>)
 800120c:	f003 f9e6 	bl	80045dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // SEL Pin pulled low SD 1
 8001210:	2200      	movs	r2, #0
 8001212:	2110      	movs	r1, #16
 8001214:	489f      	ldr	r0, [pc, #636]	@ (8001494 <Start_Recording+0x2c4>)
 8001216:	f003 f9e1 	bl	80045dc <HAL_GPIO_WritePin>

    message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 800121a:	49a1      	ldr	r1, [pc, #644]	@ (80014a0 <Start_Recording+0x2d0>)
 800121c:	489f      	ldr	r0, [pc, #636]	@ (800149c <Start_Recording+0x2cc>)
 800121e:	f000 fd87 	bl	8001d30 <message>

    fresult = f_mount(&fs_local, "/", 1);
 8001222:	2201      	movs	r2, #1
 8001224:	499f      	ldr	r1, [pc, #636]	@ (80014a4 <Start_Recording+0x2d4>)
 8001226:	48a0      	ldr	r0, [pc, #640]	@ (80014a8 <Start_Recording+0x2d8>)
 8001228:	f00b fa28 	bl	800c67c <f_mount>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b9e      	ldr	r3, [pc, #632]	@ (80014ac <Start_Recording+0x2dc>)
 8001232:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8001234:	4b9d      	ldr	r3, [pc, #628]	@ (80014ac <Start_Recording+0x2dc>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <Start_Recording+0x78>
        message("ERROR!!! in mounting SD CARD...\r\n");
 800123c:	489c      	ldr	r0, [pc, #624]	@ (80014b0 <Start_Recording+0x2e0>)
 800123e:	f000 fd77 	bl	8001d30 <message>
        return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e121      	b.n	800148c <Start_Recording+0x2bc>
    }

    History_update();
 8001248:	f000 fb50 	bl	80018ec <History_update>


    sprintf(File_name_1, "file_%d_1.wav", number);
 800124c:	4b99      	ldr	r3, [pc, #612]	@ (80014b4 <Start_Recording+0x2e4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4999      	ldr	r1, [pc, #612]	@ (80014b8 <Start_Recording+0x2e8>)
 8001254:	4899      	ldr	r0, [pc, #612]	@ (80014bc <Start_Recording+0x2ec>)
 8001256:	f00c fc7d 	bl	800db54 <siprintf>
    sprintf(File_name_2, "file_%d_2.wav", number);
 800125a:	4b96      	ldr	r3, [pc, #600]	@ (80014b4 <Start_Recording+0x2e4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4997      	ldr	r1, [pc, #604]	@ (80014c0 <Start_Recording+0x2f0>)
 8001262:	4898      	ldr	r0, [pc, #608]	@ (80014c4 <Start_Recording+0x2f4>)
 8001264:	f00c fc76 	bl	800db54 <siprintf>

    fresult = f_stat(File_name_1, &fno_local);
 8001268:	4997      	ldr	r1, [pc, #604]	@ (80014c8 <Start_Recording+0x2f8>)
 800126a:	4894      	ldr	r0, [pc, #592]	@ (80014bc <Start_Recording+0x2ec>)
 800126c:	f00c f9d3 	bl	800d616 <f_stat>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b8d      	ldr	r3, [pc, #564]	@ (80014ac <Start_Recording+0x2dc>)
 8001276:	701a      	strb	r2, [r3, #0]
    fresult = f_stat(File_name_2, &fno_local);
 8001278:	4993      	ldr	r1, [pc, #588]	@ (80014c8 <Start_Recording+0x2f8>)
 800127a:	4892      	ldr	r0, [pc, #584]	@ (80014c4 <Start_Recording+0x2f4>)
 800127c:	f00c f9cb 	bl	800d616 <f_stat>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b89      	ldr	r3, [pc, #548]	@ (80014ac <Start_Recording+0x2dc>)
 8001286:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 8001288:	4b88      	ldr	r3, [pc, #544]	@ (80014ac <Start_Recording+0x2dc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d106      	bne.n	800129e <Start_Recording+0xce>
        message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n", "FILE1.txt");
 8001290:	498e      	ldr	r1, [pc, #568]	@ (80014cc <Start_Recording+0x2fc>)
 8001292:	488f      	ldr	r0, [pc, #572]	@ (80014d0 <Start_Recording+0x300>)
 8001294:	f000 fd4c 	bl	8001d30 <message>
        return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	e0f6      	b.n	800148c <Start_Recording+0x2bc>
    } else {
        fresult = f_open(&file_1, File_name_1, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 800129e:	220b      	movs	r2, #11
 80012a0:	4986      	ldr	r1, [pc, #536]	@ (80014bc <Start_Recording+0x2ec>)
 80012a2:	488c      	ldr	r0, [pc, #560]	@ (80014d4 <Start_Recording+0x304>)
 80012a4:	f00b fa30 	bl	800c708 <f_open>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b7f      	ldr	r3, [pc, #508]	@ (80014ac <Start_Recording+0x2dc>)
 80012ae:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 80012b0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ac <Start_Recording+0x2dc>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <Start_Recording+0xfc>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 80012b8:	4b7c      	ldr	r3, [pc, #496]	@ (80014ac <Start_Recording+0x2dc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	@ (80014bc <Start_Recording+0x2ec>)
 80012be:	4619      	mov	r1, r3
 80012c0:	4885      	ldr	r0, [pc, #532]	@ (80014d8 <Start_Recording+0x308>)
 80012c2:	f000 fd35 	bl	8001d30 <message>
            return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e0df      	b.n	800148c <Start_Recording+0x2bc>
        }
        fresult = f_open(&file_2, File_name_2, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80012cc:	220b      	movs	r2, #11
 80012ce:	497d      	ldr	r1, [pc, #500]	@ (80014c4 <Start_Recording+0x2f4>)
 80012d0:	4882      	ldr	r0, [pc, #520]	@ (80014dc <Start_Recording+0x30c>)
 80012d2:	f00b fa19 	bl	800c708 <f_open>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <Start_Recording+0x2dc>)
 80012dc:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 80012de:	4b73      	ldr	r3, [pc, #460]	@ (80014ac <Start_Recording+0x2dc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <Start_Recording+0x12a>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_2);
 80012e6:	4b71      	ldr	r3, [pc, #452]	@ (80014ac <Start_Recording+0x2dc>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4a76      	ldr	r2, [pc, #472]	@ (80014c4 <Start_Recording+0x2f4>)
 80012ec:	4619      	mov	r1, r3
 80012ee:	487a      	ldr	r0, [pc, #488]	@ (80014d8 <Start_Recording+0x308>)
 80012f0:	f000 fd1e 	bl	8001d30 <message>
            return -1;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	e0c8      	b.n	800148c <Start_Recording+0x2bc>
        }
        fresult = f_close(&file_1);
 80012fa:	4876      	ldr	r0, [pc, #472]	@ (80014d4 <Start_Recording+0x304>)
 80012fc:	f00b ff3d 	bl	800d17a <f_close>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <Start_Recording+0x2dc>)
 8001306:	701a      	strb	r2, [r3, #0]
        fresult = f_close(&file_2);
 8001308:	4874      	ldr	r0, [pc, #464]	@ (80014dc <Start_Recording+0x30c>)
 800130a:	f00b ff36 	bl	800d17a <f_close>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <Start_Recording+0x2dc>)
 8001314:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult, File_name_1);
 8001316:	4b65      	ldr	r3, [pc, #404]	@ (80014ac <Start_Recording+0x2dc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <Start_Recording+0x15c>
 800131e:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <Start_Recording+0x2dc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4a66      	ldr	r2, [pc, #408]	@ (80014bc <Start_Recording+0x2ec>)
 8001324:	4619      	mov	r1, r3
 8001326:	486e      	ldr	r0, [pc, #440]	@ (80014e0 <Start_Recording+0x310>)
 8001328:	f000 fd02 	bl	8001d30 <message>
    }

    f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 800132c:	2232      	movs	r2, #50	@ 0x32
 800132e:	4963      	ldr	r1, [pc, #396]	@ (80014bc <Start_Recording+0x2ec>)
 8001330:	4868      	ldr	r0, [pc, #416]	@ (80014d4 <Start_Recording+0x304>)
 8001332:	f00b f9e9 	bl	800c708 <f_open>
    f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 8001336:	2232      	movs	r2, #50	@ 0x32
 8001338:	4962      	ldr	r1, [pc, #392]	@ (80014c4 <Start_Recording+0x2f4>)
 800133a:	4868      	ldr	r0, [pc, #416]	@ (80014dc <Start_Recording+0x30c>)
 800133c:	f00b f9e4 	bl	800c708 <f_open>

    //read_and_print_registers();

    WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8001340:	4968      	ldr	r1, [pc, #416]	@ (80014e4 <Start_Recording+0x314>)
 8001342:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8001346:	f000 fb91 	bl	8001a6c <WavProcess_EncInit>
    f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <Start_Recording+0x318>)
 800134c:	222c      	movs	r2, #44	@ 0x2c
 800134e:	4965      	ldr	r1, [pc, #404]	@ (80014e4 <Start_Recording+0x314>)
 8001350:	4860      	ldr	r0, [pc, #384]	@ (80014d4 <Start_Recording+0x304>)
 8001352:	f00b fd00 	bl	800cd56 <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 8001356:	4b64      	ldr	r3, [pc, #400]	@ (80014e8 <Start_Recording+0x318>)
 8001358:	222c      	movs	r2, #44	@ 0x2c
 800135a:	4962      	ldr	r1, [pc, #392]	@ (80014e4 <Start_Recording+0x314>)
 800135c:	485f      	ldr	r0, [pc, #380]	@ (80014dc <Start_Recording+0x30c>)
 800135e:	f00b fcfa 	bl	800cd56 <f_write>

    memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 8001362:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001366:	2100      	movs	r1, #0
 8001368:	4860      	ldr	r0, [pc, #384]	@ (80014ec <Start_Recording+0x31c>)
 800136a:	f00c fcbb 	bl	800dce4 <memset>
    memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 800136e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001372:	2100      	movs	r1, #0
 8001374:	485e      	ldr	r0, [pc, #376]	@ (80014f0 <Start_Recording+0x320>)
 8001376:	f00c fcb5 	bl	800dce4 <memset>

    message("Message: %s\r\n", "________________ Recording Started _____________\r\n");
 800137a:	495e      	ldr	r1, [pc, #376]	@ (80014f4 <Start_Recording+0x324>)
 800137c:	4847      	ldr	r0, [pc, #284]	@ (800149c <Start_Recording+0x2cc>)
 800137e:	f000 fcd7 	bl	8001d30 <message>

    // Stop any ongoing DMA
    HAL_I2S_DMAStop(&hi2s2);
 8001382:	485d      	ldr	r0, [pc, #372]	@ (80014f8 <Start_Recording+0x328>)
 8001384:	f005 f8ba 	bl	80064fc <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001388:	485c      	ldr	r0, [pc, #368]	@ (80014fc <Start_Recording+0x32c>)
 800138a:	f005 f8b7 	bl	80064fc <HAL_I2S_DMAStop>

    // Check I2S state before starting
    HAL_I2S_StateTypeDef i2s2_state = HAL_I2S_GetState(&hi2s2);
 800138e:	485a      	ldr	r0, [pc, #360]	@ (80014f8 <Start_Recording+0x328>)
 8001390:	f005 faae 	bl	80068f0 <HAL_I2S_GetState>
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
    HAL_I2S_StateTypeDef i2s3_state = HAL_I2S_GetState(&hi2s3);
 8001398:	4858      	ldr	r0, [pc, #352]	@ (80014fc <Start_Recording+0x32c>)
 800139a:	f005 faa9 	bl	80068f0 <HAL_I2S_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	71bb      	strb	r3, [r7, #6]
    sprintf(uart_buffer, "I2S2 State before start: %d\n\r", i2s2_state);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4956      	ldr	r1, [pc, #344]	@ (8001500 <Start_Recording+0x330>)
 80013a8:	4856      	ldr	r0, [pc, #344]	@ (8001504 <Start_Recording+0x334>)
 80013aa:	f00c fbd3 	bl	800db54 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013ae:	4855      	ldr	r0, [pc, #340]	@ (8001504 <Start_Recording+0x334>)
 80013b0:	f7fe ff0e 	bl	80001d0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	4951      	ldr	r1, [pc, #324]	@ (8001504 <Start_Recording+0x334>)
 80013be:	4852      	ldr	r0, [pc, #328]	@ (8001508 <Start_Recording+0x338>)
 80013c0:	f007 fc2d 	bl	8008c1e <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State before start: %d\n\r", i2s3_state);
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4950      	ldr	r1, [pc, #320]	@ (800150c <Start_Recording+0x33c>)
 80013ca:	484e      	ldr	r0, [pc, #312]	@ (8001504 <Start_Recording+0x334>)
 80013cc:	f00c fbc2 	bl	800db54 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013d0:	484c      	ldr	r0, [pc, #304]	@ (8001504 <Start_Recording+0x334>)
 80013d2:	f7fe fefd 	bl	80001d0 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	4949      	ldr	r1, [pc, #292]	@ (8001504 <Start_Recording+0x334>)
 80013e0:	4849      	ldr	r0, [pc, #292]	@ (8001508 <Start_Recording+0x338>)
 80013e2:	f007 fc1c 	bl	8008c1e <HAL_UART_Transmit>

    // Start I2S DMA
    if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80013e6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013ea:	4940      	ldr	r1, [pc, #256]	@ (80014ec <Start_Recording+0x31c>)
 80013ec:	4842      	ldr	r0, [pc, #264]	@ (80014f8 <Start_Recording+0x328>)
 80013ee:	f004 ffc9 	bl	8006384 <HAL_I2S_Receive_DMA>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01c      	beq.n	8001432 <Start_Recording+0x262>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S2 !!!!__!!__\r\n");
 80013f8:	4945      	ldr	r1, [pc, #276]	@ (8001510 <Start_Recording+0x340>)
 80013fa:	4828      	ldr	r0, [pc, #160]	@ (800149c <Start_Recording+0x2cc>)
 80013fc:	f000 fc98 	bl	8001d30 <message>
        sprintf(uart_buffer, "I2S2 Error: %d\n\r", HAL_I2S_GetError(&hi2s2));
 8001400:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <Start_Recording+0x328>)
 8001402:	f005 fa83 	bl	800690c <HAL_I2S_GetError>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4942      	ldr	r1, [pc, #264]	@ (8001514 <Start_Recording+0x344>)
 800140c:	483d      	ldr	r0, [pc, #244]	@ (8001504 <Start_Recording+0x334>)
 800140e:	f00c fba1 	bl	800db54 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001412:	483c      	ldr	r0, [pc, #240]	@ (8001504 <Start_Recording+0x334>)
 8001414:	f7fe fedc 	bl	80001d0 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	b29a      	uxth	r2, r3
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	4938      	ldr	r1, [pc, #224]	@ (8001504 <Start_Recording+0x334>)
 8001422:	4839      	ldr	r0, [pc, #228]	@ (8001508 <Start_Recording+0x338>)
 8001424:	f007 fbfb 	bl	8008c1e <HAL_UART_Transmit>
        Error_Handler();
 8001428:	f000 fca4 	bl	8001d74 <Error_Handler>
        return -1;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	e02c      	b.n	800148c <Start_Recording+0x2bc>
    }
    if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8001432:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001436:	492e      	ldr	r1, [pc, #184]	@ (80014f0 <Start_Recording+0x320>)
 8001438:	4830      	ldr	r0, [pc, #192]	@ (80014fc <Start_Recording+0x32c>)
 800143a:	f004 ffa3 	bl	8006384 <HAL_I2S_Receive_DMA>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01c      	beq.n	800147e <Start_Recording+0x2ae>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S3 !!!!__!!__\r\n");
 8001444:	4934      	ldr	r1, [pc, #208]	@ (8001518 <Start_Recording+0x348>)
 8001446:	4815      	ldr	r0, [pc, #84]	@ (800149c <Start_Recording+0x2cc>)
 8001448:	f000 fc72 	bl	8001d30 <message>
        sprintf(uart_buffer, "I2S3 Error: %d\n\r", HAL_I2S_GetError(&hi2s3));
 800144c:	482b      	ldr	r0, [pc, #172]	@ (80014fc <Start_Recording+0x32c>)
 800144e:	f005 fa5d 	bl	800690c <HAL_I2S_GetError>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4931      	ldr	r1, [pc, #196]	@ (800151c <Start_Recording+0x34c>)
 8001458:	482a      	ldr	r0, [pc, #168]	@ (8001504 <Start_Recording+0x334>)
 800145a:	f00c fb7b 	bl	800db54 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800145e:	4829      	ldr	r0, [pc, #164]	@ (8001504 <Start_Recording+0x334>)
 8001460:	f7fe feb6 	bl	80001d0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	4925      	ldr	r1, [pc, #148]	@ (8001504 <Start_Recording+0x334>)
 800146e:	4826      	ldr	r0, [pc, #152]	@ (8001508 <Start_Recording+0x338>)
 8001470:	f007 fbd5 	bl	8008c1e <HAL_UART_Transmit>
        Error_Handler();
 8001474:	f000 fc7e 	bl	8001d74 <Error_Handler>
        return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	e006      	b.n	800148c <Start_Recording+0x2bc>
    sprintf(uart_buffer, "I2S2 State after start: %d\n\r", HAL_I2S_GetState(&hi2s2));
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
    sprintf(uart_buffer, "I2S3 State after start: %d\n\r", HAL_I2S_GetState(&hi2s3));
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);\
    */
    stop_saving = 0;  // Reset stop_saving for callbacks
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <Start_Recording+0x350>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    BufferCtl.fptr = 0;  // Reset file pointer
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <Start_Recording+0x354>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]

    return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40020c00 	.word	0x40020c00
 8001498:	0800f87c 	.word	0x0800f87c
 800149c:	0800f8b4 	.word	0x0800f8b4
 80014a0:	0800f8c4 	.word	0x0800f8c4
 80014a4:	0800f918 	.word	0x0800f918
 80014a8:	20000420 	.word	0x20000420
 80014ac:	200000a4 	.word	0x200000a4
 80014b0:	0800f91c 	.word	0x0800f91c
 80014b4:	2000041c 	.word	0x2000041c
 80014b8:	0800f940 	.word	0x0800f940
 80014bc:	200034d8 	.word	0x200034d8
 80014c0:	0800f950 	.word	0x0800f950
 80014c4:	200034f8 	.word	0x200034f8
 80014c8:	200034b8 	.word	0x200034b8
 80014cc:	0800f960 	.word	0x0800f960
 80014d0:	0800f96c 	.word	0x0800f96c
 80014d4:	20001454 	.word	0x20001454
 80014d8:	0800f9a4 	.word	0x0800f9a4
 80014dc:	20002484 	.word	0x20002484
 80014e0:	0800f9cc 	.word	0x0800f9cc
 80014e4:	2000549c 	.word	0x2000549c
 80014e8:	20005498 	.word	0x20005498
 80014ec:	200044b8 	.word	0x200044b8
 80014f0:	20003518 	.word	0x20003518
 80014f4:	0800f9f0 	.word	0x0800f9f0
 80014f8:	2000015c 	.word	0x2000015c
 80014fc:	200001a4 	.word	0x200001a4
 8001500:	0800fa24 	.word	0x0800fa24
 8001504:	20005638 	.word	0x20005638
 8001508:	20000374 	.word	0x20000374
 800150c:	0800fa44 	.word	0x0800fa44
 8001510:	0800fa64 	.word	0x0800fa64
 8001514:	0800faa0 	.word	0x0800faa0
 8001518:	0800fab4 	.word	0x0800fab4
 800151c:	0800faf0 	.word	0x0800faf0
 8001520:	2000545c 	.word	0x2000545c
 8001524:	20005490 	.word	0x20005490

08001528 <stop_recording>:
int stop_recording(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    HAL_I2S_DMAStop(&hi2s2);
 800152c:	4836      	ldr	r0, [pc, #216]	@ (8001608 <stop_recording+0xe0>)
 800152e:	f004 ffe5 	bl	80064fc <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001532:	4836      	ldr	r0, [pc, #216]	@ (800160c <stop_recording+0xe4>)
 8001534:	f004 ffe2 	bl	80064fc <HAL_I2S_DMAStop>

    // Debug I2S state after stopping
    sprintf(uart_buffer, "I2S2 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s2));
 8001538:	4833      	ldr	r0, [pc, #204]	@ (8001608 <stop_recording+0xe0>)
 800153a:	f005 f9d9 	bl	80068f0 <HAL_I2S_GetState>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4933      	ldr	r1, [pc, #204]	@ (8001610 <stop_recording+0xe8>)
 8001544:	4833      	ldr	r0, [pc, #204]	@ (8001614 <stop_recording+0xec>)
 8001546:	f00c fb05 	bl	800db54 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800154a:	4832      	ldr	r0, [pc, #200]	@ (8001614 <stop_recording+0xec>)
 800154c:	f7fe fe40 	bl	80001d0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	492e      	ldr	r1, [pc, #184]	@ (8001614 <stop_recording+0xec>)
 800155a:	482f      	ldr	r0, [pc, #188]	@ (8001618 <stop_recording+0xf0>)
 800155c:	f007 fb5f 	bl	8008c1e <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s3));
 8001560:	482a      	ldr	r0, [pc, #168]	@ (800160c <stop_recording+0xe4>)
 8001562:	f005 f9c5 	bl	80068f0 <HAL_I2S_GetState>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	492c      	ldr	r1, [pc, #176]	@ (800161c <stop_recording+0xf4>)
 800156c:	4829      	ldr	r0, [pc, #164]	@ (8001614 <stop_recording+0xec>)
 800156e:	f00c faf1 	bl	800db54 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001572:	4828      	ldr	r0, [pc, #160]	@ (8001614 <stop_recording+0xec>)
 8001574:	f7fe fe2c 	bl	80001d0 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	4924      	ldr	r1, [pc, #144]	@ (8001614 <stop_recording+0xec>)
 8001582:	4825      	ldr	r0, [pc, #148]	@ (8001618 <stop_recording+0xf0>)
 8001584:	f007 fb4b 	bl	8008c1e <HAL_UART_Transmit>

    //read_and_print_registers();

    // Update WAV headers
    f_lseek(&file_1, 0);
 8001588:	2100      	movs	r1, #0
 800158a:	4825      	ldr	r0, [pc, #148]	@ (8001620 <stop_recording+0xf8>)
 800158c:	f00b fe1f 	bl	800d1ce <f_lseek>
    f_lseek(&file_2, 0);
 8001590:	2100      	movs	r1, #0
 8001592:	4824      	ldr	r0, [pc, #144]	@ (8001624 <stop_recording+0xfc>)
 8001594:	f00b fe1b 	bl	800d1ce <f_lseek>
    WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8001598:	4923      	ldr	r1, [pc, #140]	@ (8001628 <stop_recording+0x100>)
 800159a:	4824      	ldr	r0, [pc, #144]	@ (800162c <stop_recording+0x104>)
 800159c:	f000 fb7e 	bl	8001c9c <WavProcess_HeaderUpdate>
    f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <stop_recording+0x108>)
 80015a2:	222c      	movs	r2, #44	@ 0x2c
 80015a4:	4921      	ldr	r1, [pc, #132]	@ (800162c <stop_recording+0x104>)
 80015a6:	481e      	ldr	r0, [pc, #120]	@ (8001620 <stop_recording+0xf8>)
 80015a8:	f00b fbd5 	bl	800cd56 <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <stop_recording+0x108>)
 80015ae:	222c      	movs	r2, #44	@ 0x2c
 80015b0:	491e      	ldr	r1, [pc, #120]	@ (800162c <stop_recording+0x104>)
 80015b2:	481c      	ldr	r0, [pc, #112]	@ (8001624 <stop_recording+0xfc>)
 80015b4:	f00b fbcf 	bl	800cd56 <f_write>

    f_close(&file_1);
 80015b8:	4819      	ldr	r0, [pc, #100]	@ (8001620 <stop_recording+0xf8>)
 80015ba:	f00b fdde 	bl	800d17a <f_close>
    f_close(&file_2);
 80015be:	4819      	ldr	r0, [pc, #100]	@ (8001624 <stop_recording+0xfc>)
 80015c0:	f00b fddb 	bl	800d17a <f_close>

    fresult = f_mount(NULL, "/", 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	491b      	ldr	r1, [pc, #108]	@ (8001634 <stop_recording+0x10c>)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f00b f857 	bl	800c67c <f_mount>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <stop_recording+0x110>)
 80015d4:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <stop_recording+0x110>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <stop_recording+0xc2>
        message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 80015de:	4817      	ldr	r0, [pc, #92]	@ (800163c <stop_recording+0x114>)
 80015e0:	f000 fba6 	bl	8001d30 <message>
        return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	e00c      	b.n	8001604 <stop_recording+0xdc>
    }

    message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 80015ea:	4815      	ldr	r0, [pc, #84]	@ (8001640 <stop_recording+0x118>)
 80015ec:	f000 fba0 	bl	8001d30 <message>

    stop_saving = 1;  // Moved after file operations
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <stop_recording+0x11c>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    save_frequency = 0;  // Reset here is fine, but handle_recording resets it too
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <stop_recording+0x120>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

    HAL_Delay(200);  // Reduced delay, adjust if needed
 80015fc:	20c8      	movs	r0, #200	@ 0xc8
 80015fe:	f002 f901 	bl	8003804 <HAL_Delay>

    return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000015c 	.word	0x2000015c
 800160c:	200001a4 	.word	0x200001a4
 8001610:	0800fb04 	.word	0x0800fb04
 8001614:	20005638 	.word	0x20005638
 8001618:	20000374 	.word	0x20000374
 800161c:	0800fb20 	.word	0x0800fb20
 8001620:	20001454 	.word	0x20001454
 8001624:	20002484 	.word	0x20002484
 8001628:	20005464 	.word	0x20005464
 800162c:	2000549c 	.word	0x2000549c
 8001630:	20005498 	.word	0x20005498
 8001634:	0800f918 	.word	0x0800f918
 8001638:	200000a4 	.word	0x200000a4
 800163c:	0800fb3c 	.word	0x0800fb3c
 8001640:	0800fb60 	.word	0x0800fb60
 8001644:	2000545c 	.word	0x2000545c
 8001648:	20005458 	.word	0x20005458

0800164c <HAL_I2S_RxCpltCallback>:
// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <HAL_I2S_RxCpltCallback+0x74>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d12d      	bne.n	80016b8 <HAL_I2S_RxCpltCallback+0x6c>
	    if (hi2s->Instance == SPI2) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_I2S_RxCpltCallback+0x78>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10b      	bne.n	800167e <HAL_I2S_RxCpltCallback+0x32>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_I2S_RxCpltCallback+0x7c>)
 8001668:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800166c:	4917      	ldr	r1, [pc, #92]	@ (80016cc <HAL_I2S_RxCpltCallback+0x80>)
 800166e:	4818      	ldr	r0, [pc, #96]	@ (80016d0 <HAL_I2S_RxCpltCallback+0x84>)
 8001670:	f00b fb71 	bl	800cd56 <f_write>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2S_RxCpltCallback+0x32>
				Error_Handler();  // File write failed
 800167a:	f000 fb7b 	bl	8001d74 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_I2S_RxCpltCallback+0x88>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10b      	bne.n	80016a0 <HAL_I2S_RxCpltCallback+0x54>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <HAL_I2S_RxCpltCallback+0x8c>)
 800168a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800168e:	4913      	ldr	r1, [pc, #76]	@ (80016dc <HAL_I2S_RxCpltCallback+0x90>)
 8001690:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <HAL_I2S_RxCpltCallback+0x94>)
 8001692:	f00b fb60 	bl	800cd56 <f_write>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2S_RxCpltCallback+0x54>
				Error_Handler();  // File write failed
 800169c:	f000 fb6a 	bl	8001d74 <Error_Handler>
			}
		}
	    save_frequency ++;
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_I2S_RxCpltCallback+0x98>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_I2S_RxCpltCallback+0x98>)
 80016a8:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_I2S_RxCpltCallback+0x9c>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_I2S_RxCpltCallback+0x7c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <HAL_I2S_RxCpltCallback+0x9c>)
 80016b6:	6053      	str	r3, [r2, #4]
	                sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
	                HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
	            }*/

	}
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000545c 	.word	0x2000545c
 80016c4:	40003800 	.word	0x40003800
 80016c8:	200034d0 	.word	0x200034d0
 80016cc:	20004c88 	.word	0x20004c88
 80016d0:	20001454 	.word	0x20001454
 80016d4:	40003c00 	.word	0x40003c00
 80016d8:	200034d4 	.word	0x200034d4
 80016dc:	20003ce8 	.word	0x20003ce8
 80016e0:	20002484 	.word	0x20002484
 80016e4:	20005458 	.word	0x20005458
 80016e8:	20005490 	.word	0x20005490

080016ec <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d121      	bne.n	8001740 <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HAL_I2S_RxHalfCpltCallback+0x60>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8001708:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800170c:	4911      	ldr	r1, [pc, #68]	@ (8001754 <HAL_I2S_RxHalfCpltCallback+0x68>)
 800170e:	4812      	ldr	r0, [pc, #72]	@ (8001758 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8001710:	f00b fb21 	bl	800cd56 <f_write>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 800171a:	f000 fb2b 	bl	8001d74 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_I2S_RxHalfCpltCallback+0x70>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10b      	bne.n	8001740 <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_I2S_RxHalfCpltCallback+0x74>)
 800172a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800172e:	490d      	ldr	r1, [pc, #52]	@ (8001764 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8001730:	480d      	ldr	r0, [pc, #52]	@ (8001768 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8001732:	f00b fb10 	bl	800cd56 <f_write>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 800173c:	f000 fb1a 	bl	8001d74 <Error_Handler>
	    	}
	    }
	}

}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000545c 	.word	0x2000545c
 800174c:	40003800 	.word	0x40003800
 8001750:	200034d0 	.word	0x200034d0
 8001754:	200044b8 	.word	0x200044b8
 8001758:	20001454 	.word	0x20001454
 800175c:	40003c00 	.word	0x40003c00
 8001760:	200034d4 	.word	0x200034d4
 8001764:	20003518 	.word	0x20003518
 8001768:	20002484 	.word	0x20002484

0800176c <configure_codec>:

void configure_codec() {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	2205      	movs	r2, #5
 8001778:	21e2      	movs	r1, #226	@ 0xe2
 800177a:	482e      	ldr	r0, [pc, #184]	@ (8001834 <configure_codec+0xc8>)
 800177c:	f003 fee8 	bl	8005550 <HAL_I2C_IsDeviceReady>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 8001786:	492c      	ldr	r1, [pc, #176]	@ (8001838 <configure_codec+0xcc>)
 8001788:	482c      	ldr	r0, [pc, #176]	@ (800183c <configure_codec+0xd0>)
 800178a:	f000 fad1 	bl	8001d30 <message>
    }
    HAL_Delay(500);
 800178e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001792:	f002 f837 	bl	8003804 <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e023      	b.n	80017e4 <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 800179c:	4a28      	ldr	r2, [pc, #160]	@ (8001840 <configure_codec+0xd4>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 80017a8:	4a25      	ldr	r2, [pc, #148]	@ (8001840 <configure_codec+0xd4>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	1cfb      	adds	r3, r7, #3
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	21e2      	movs	r1, #226	@ 0xe2
 80017c4:	481b      	ldr	r0, [pc, #108]	@ (8001834 <configure_codec+0xc8>)
 80017c6:	f003 fba3 	bl	8004f10 <HAL_I2C_Mem_Write>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 80017d0:	491c      	ldr	r1, [pc, #112]	@ (8001844 <configure_codec+0xd8>)
 80017d2:	481a      	ldr	r0, [pc, #104]	@ (800183c <configure_codec+0xd0>)
 80017d4:	f000 faac 	bl	8001d30 <message>
        }
        HAL_Delay(100);
 80017d8:	2064      	movs	r0, #100	@ 0x64
 80017da:	f002 f813 	bl	8003804 <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b0e      	cmp	r3, #14
 80017e8:	d9d8      	bls.n	800179c <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2301      	movs	r3, #1
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	1cbb      	adds	r3, r7, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	2206      	movs	r2, #6
 80017fc:	21e2      	movs	r1, #226	@ 0xe2
 80017fe:	480d      	ldr	r0, [pc, #52]	@ (8001834 <configure_codec+0xc8>)
 8001800:	f003 fc80 	bl	8005104 <HAL_I2C_Mem_Read>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <configure_codec+0xdc>)
 8001812:	f002 fee3 	bl	80045dc <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 800181a:	200a      	movs	r0, #10
 800181c:	f001 fff2 	bl	8003804 <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 8001820:	e003      	b.n	800182a <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 8001822:	490a      	ldr	r1, [pc, #40]	@ (800184c <configure_codec+0xe0>)
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <configure_codec+0xd0>)
 8001826:	f000 fa83 	bl	8001d30 <message>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000b4 	.word	0x200000b4
 8001838:	0800fb94 	.word	0x0800fb94
 800183c:	0800f8b4 	.word	0x0800f8b4
 8001840:	20000000 	.word	0x20000000
 8001844:	0800fbc0 	.word	0x0800fbc0
 8001848:	40020c00 	.word	0x40020c00
 800184c:	0800fbec 	.word	0x0800fbec

08001850 <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 8001854:	4910      	ldr	r1, [pc, #64]	@ (8001898 <CODEC_RST+0x48>)
 8001856:	4811      	ldr	r0, [pc, #68]	@ (800189c <CODEC_RST+0x4c>)
 8001858:	f000 fa6a 	bl	8001d30 <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 800185c:	2201      	movs	r2, #1
 800185e:	2102      	movs	r1, #2
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <CODEC_RST+0x50>)
 8001862:	f002 febb 	bl	80045dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186a:	f001 ffcb 	bl	8003804 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <CODEC_RST+0x50>)
 8001874:	f002 feb2 	bl	80045dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800187c:	f001 ffc2 	bl	8003804 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2102      	movs	r1, #2
 8001884:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <CODEC_RST+0x50>)
 8001886:	f002 fea9 	bl	80045dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 800188a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188e:	f001 ffb9 	bl	8003804 <HAL_Delay>

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	0800fd00 	.word	0x0800fd00
 800189c:	0800f8b4 	.word	0x0800f8b4
 80018a0:	40021000 	.word	0x40021000

080018a4 <TS472IQT_EN>:

void TS472IQT_EN(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ae:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <TS472IQT_EN+0x40>)
 80018b0:	f002 fe94 	bl	80045dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <TS472IQT_EN+0x44>)
 80018bc:	f002 fe8e 	bl	80045dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c6:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <TS472IQT_EN+0x44>)
 80018c8:	f002 fe88 	bl	80045dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <TS472IQT_EN+0x44>)
 80018d4:	f002 fe82 	bl	80045dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	@ 0x64
 80018da:	f001 ff93 	bl	8003804 <HAL_Delay>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40020000 	.word	0x40020000

080018ec <History_update>:

    message("----------------------------------------------------------\r\n");
}

void History_update(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 80018f0:	494d      	ldr	r1, [pc, #308]	@ (8001a28 <History_update+0x13c>)
 80018f2:	484e      	ldr	r0, [pc, #312]	@ (8001a2c <History_update+0x140>)
 80018f4:	f00b fe8f 	bl	800d616 <f_stat>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <History_update+0x144>)
 80018fe:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 8001900:	4b4b      	ldr	r3, [pc, #300]	@ (8001a30 <History_update+0x144>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 8001908:	484a      	ldr	r0, [pc, #296]	@ (8001a34 <History_update+0x148>)
 800190a:	f000 fa11 	bl	8001d30 <message>
 800190e:	e01a      	b.n	8001946 <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 8001910:	4849      	ldr	r0, [pc, #292]	@ (8001a38 <History_update+0x14c>)
 8001912:	f000 fa0d 	bl	8001d30 <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001916:	220a      	movs	r2, #10
 8001918:	4944      	ldr	r1, [pc, #272]	@ (8001a2c <History_update+0x140>)
 800191a:	4848      	ldr	r0, [pc, #288]	@ (8001a3c <History_update+0x150>)
 800191c:	f00a fef4 	bl	800c708 <f_open>
		sprintf(buffer, "%d", number);
 8001920:	4b47      	ldr	r3, [pc, #284]	@ (8001a40 <History_update+0x154>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4947      	ldr	r1, [pc, #284]	@ (8001a44 <History_update+0x158>)
 8001928:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <History_update+0x15c>)
 800192a:	f00c f913 	bl	800db54 <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 800192e:	4846      	ldr	r0, [pc, #280]	@ (8001a48 <History_update+0x15c>)
 8001930:	f7fe fc4e 	bl	80001d0 <strlen>
 8001934:	4602      	mov	r2, r0
 8001936:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <History_update+0x160>)
 8001938:	4943      	ldr	r1, [pc, #268]	@ (8001a48 <History_update+0x15c>)
 800193a:	4840      	ldr	r0, [pc, #256]	@ (8001a3c <History_update+0x150>)
 800193c:	f00b fa0b 	bl	800cd56 <f_write>
		f_close(&file_1);
 8001940:	483e      	ldr	r0, [pc, #248]	@ (8001a3c <History_update+0x150>)
 8001942:	f00b fc1a 	bl	800d17a <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 8001946:	2201      	movs	r2, #1
 8001948:	4938      	ldr	r1, [pc, #224]	@ (8001a2c <History_update+0x140>)
 800194a:	483c      	ldr	r0, [pc, #240]	@ (8001a3c <History_update+0x150>)
 800194c:	f00a fedc 	bl	800c708 <f_open>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <History_update+0x164>)
 8001956:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 8001958:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <History_update+0x164>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d15e      	bne.n	8001a1e <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 8001960:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <History_update+0x168>)
 8001962:	2263      	movs	r2, #99	@ 0x63
 8001964:	4938      	ldr	r1, [pc, #224]	@ (8001a48 <History_update+0x15c>)
 8001966:	4835      	ldr	r0, [pc, #212]	@ (8001a3c <History_update+0x150>)
 8001968:	f00b f896 	bl	800ca98 <f_read>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <History_update+0x164>)
 8001972:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <History_update+0x164>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11a      	bne.n	80019b2 <History_update+0xc6>
 800197c:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <History_update+0x168>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d016      	beq.n	80019b2 <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 8001984:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <History_update+0x168>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <History_update+0x15c>)
 800198a:	2100      	movs	r1, #0
 800198c:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 800198e:	482e      	ldr	r0, [pc, #184]	@ (8001a48 <History_update+0x15c>)
 8001990:	f00b fed5 	bl	800d73e <atoi>
 8001994:	4603      	mov	r3, r0
 8001996:	4a2a      	ldr	r2, [pc, #168]	@ (8001a40 <History_update+0x154>)
 8001998:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 800199a:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <History_update+0x154>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a27      	ldr	r2, [pc, #156]	@ (8001a40 <History_update+0x154>)
 80019a2:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 80019a4:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <History_update+0x154>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	482b      	ldr	r0, [pc, #172]	@ (8001a58 <History_update+0x16c>)
 80019ac:	f000 f9c0 	bl	8001d30 <message>
 80019b0:	e002      	b.n	80019b8 <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 80019b2:	482a      	ldr	r0, [pc, #168]	@ (8001a5c <History_update+0x170>)
 80019b4:	f000 f9bc 	bl	8001d30 <message>
		}
		f_close(&file_1); // Close the file
 80019b8:	4820      	ldr	r0, [pc, #128]	@ (8001a3c <History_update+0x150>)
 80019ba:	f00b fbde 	bl	800d17a <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80019be:	220a      	movs	r2, #10
 80019c0:	491a      	ldr	r1, [pc, #104]	@ (8001a2c <History_update+0x140>)
 80019c2:	481e      	ldr	r0, [pc, #120]	@ (8001a3c <History_update+0x150>)
 80019c4:	f00a fea0 	bl	800c708 <f_open>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <History_update+0x164>)
 80019ce:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <History_update+0x164>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11e      	bne.n	8001a16 <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <History_update+0x154>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4919      	ldr	r1, [pc, #100]	@ (8001a44 <History_update+0x158>)
 80019e0:	4819      	ldr	r0, [pc, #100]	@ (8001a48 <History_update+0x15c>)
 80019e2:	f00c f8b7 	bl	800db54 <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <History_update+0x15c>)
 80019e8:	f7fe fbf2 	bl	80001d0 <strlen>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <History_update+0x160>)
 80019f0:	4915      	ldr	r1, [pc, #84]	@ (8001a48 <History_update+0x15c>)
 80019f2:	4812      	ldr	r0, [pc, #72]	@ (8001a3c <History_update+0x150>)
 80019f4:	f00b f9af 	bl	800cd56 <f_write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <History_update+0x164>)
 80019fe:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <History_update+0x164>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 8001a08:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <History_update+0x174>)
 8001a0a:	f000 f991 	bl	8001d30 <message>
			}
			f_close(&file_1); // Close the file
 8001a0e:	480b      	ldr	r0, [pc, #44]	@ (8001a3c <History_update+0x150>)
 8001a10:	f00b fbb3 	bl	800d17a <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 8001a14:	e006      	b.n	8001a24 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 8001a16:	4813      	ldr	r0, [pc, #76]	@ (8001a64 <History_update+0x178>)
 8001a18:	f000 f98a 	bl	8001d30 <message>
}
 8001a1c:	e002      	b.n	8001a24 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 8001a1e:	4812      	ldr	r0, [pc, #72]	@ (8001a68 <History_update+0x17c>)
 8001a20:	f000 f986 	bl	8001d30 <message>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200034b8 	.word	0x200034b8
 8001a2c:	0800fdc4 	.word	0x0800fdc4
 8001a30:	200000a4 	.word	0x200000a4
 8001a34:	0800fdd0 	.word	0x0800fdd0
 8001a38:	0800fdf4 	.word	0x0800fdf4
 8001a3c:	20001454 	.word	0x20001454
 8001a40:	2000041c 	.word	0x2000041c
 8001a44:	0800fe10 	.word	0x0800fe10
 8001a48:	200003b8 	.word	0x200003b8
 8001a4c:	200000ac 	.word	0x200000ac
 8001a50:	200034b4 	.word	0x200034b4
 8001a54:	200000a8 	.word	0x200000a8
 8001a58:	0800fe14 	.word	0x0800fe14
 8001a5c:	0800fe2c 	.word	0x0800fe2c
 8001a60:	0800fe48 	.word	0x0800fe48
 8001a64:	0800fe64 	.word	0x0800fe64
 8001a68:	0800fe90 	.word	0x0800fe90

08001a6c <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8001a82:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a84:	2210      	movs	r2, #16
 8001a86:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <WavProcess_EncInit+0x7c>)
 8001a8c:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a90:	222c      	movs	r2, #44	@ 0x2c
 8001a92:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a96:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 8001a98:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001a9a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001a9c:	08d2      	lsrs	r2, r2, #3
 8001a9e:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001aa6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001aae:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ab2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ab6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	fb12 f303 	smulbb	r3, r2, r3
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ac4:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 8001ac6:	4907      	ldr	r1, [pc, #28]	@ (8001ae4 <WavProcess_EncInit+0x78>)
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f000 f80f 	bl	8001aec <WavProcess_HeaderInit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <WavProcess_EncInit+0x6c>
  {
    return 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <WavProcess_EncInit+0x6e>
  }
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20005464 	.word	0x20005464
 8001ae8:	001d4c00 	.word	0x001d4c00

08001aec <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2252      	movs	r2, #82	@ 0x52
 8001afa:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	2249      	movs	r2, #73	@ 0x49
 8001b02:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	2246      	movs	r2, #70	@ 0x46
 8001b0a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	2246      	movs	r2, #70	@ 0x46
 8001b12:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3305      	adds	r3, #5
 8001b20:	224c      	movs	r2, #76	@ 0x4c
 8001b22:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3306      	adds	r3, #6
 8001b28:	221d      	movs	r2, #29
 8001b2a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3307      	adds	r3, #7
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3308      	adds	r3, #8
 8001b38:	2257      	movs	r2, #87	@ 0x57
 8001b3a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3309      	adds	r3, #9
 8001b40:	2241      	movs	r2, #65	@ 0x41
 8001b42:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330a      	adds	r3, #10
 8001b48:	2256      	movs	r2, #86	@ 0x56
 8001b4a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	330b      	adds	r3, #11
 8001b50:	2245      	movs	r2, #69	@ 0x45
 8001b52:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	330c      	adds	r3, #12
 8001b58:	2266      	movs	r2, #102	@ 0x66
 8001b5a:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	330d      	adds	r3, #13
 8001b60:	226d      	movs	r2, #109	@ 0x6d
 8001b62:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	330e      	adds	r3, #14
 8001b68:	2274      	movs	r2, #116	@ 0x74
 8001b6a:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	330f      	adds	r3, #15
 8001b70:	2220      	movs	r2, #32
 8001b72:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3310      	adds	r3, #16
 8001b78:	2210      	movs	r2, #16
 8001b7a:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3311      	adds	r3, #17
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3312      	adds	r3, #18
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3313      	adds	r3, #19
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3314      	adds	r3, #20
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3315      	adds	r3, #21
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	8ada      	ldrh	r2, [r3, #22]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3316      	adds	r3, #22
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3317      	adds	r3, #23
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	0a1a      	lsrs	r2, r3, #8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3319      	adds	r3, #25
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	0c1a      	lsrs	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	331a      	adds	r3, #26
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	0e1a      	lsrs	r2, r3, #24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	331b      	adds	r3, #27
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	331c      	adds	r3, #28
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	0a1a      	lsrs	r2, r3, #8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	331d      	adds	r3, #29
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	0c1a      	lsrs	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	331e      	adds	r3, #30
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	0e1a      	lsrs	r2, r3, #24
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	331f      	adds	r3, #31
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	8c1a      	ldrh	r2, [r3, #32]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3321      	adds	r3, #33	@ 0x21
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3322      	adds	r3, #34	@ 0x22
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3323      	adds	r3, #35	@ 0x23
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3324      	adds	r3, #36	@ 0x24
 8001c50:	2264      	movs	r2, #100	@ 0x64
 8001c52:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3325      	adds	r3, #37	@ 0x25
 8001c58:	2261      	movs	r2, #97	@ 0x61
 8001c5a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3326      	adds	r3, #38	@ 0x26
 8001c60:	2274      	movs	r2, #116	@ 0x74
 8001c62:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3327      	adds	r3, #39	@ 0x27
 8001c68:	2261      	movs	r2, #97	@ 0x61
 8001c6a:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3328      	adds	r3, #40	@ 0x28
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3329      	adds	r3, #41	@ 0x29
 8001c78:	224c      	movs	r2, #76	@ 0x4c
 8001c7a:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	332a      	adds	r3, #42	@ 0x2a
 8001c80:	221d      	movs	r2, #29
 8001c82:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	332b      	adds	r3, #43	@ 0x2b
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1a      	lsrs	r2, r3, #8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3305      	adds	r3, #5
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1a      	lsrs	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0e1a      	lsrs	r2, r3, #24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3b2c      	subs	r3, #44	@ 0x2c
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001ce4:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3328      	adds	r3, #40	@ 0x28
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0a1a      	lsrs	r2, r3, #8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3329      	adds	r3, #41	@ 0x29
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c1a      	lsrs	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	332a      	adds	r3, #42	@ 0x2a
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <WavProcess_HeaderUpdate+0x90>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0e1a      	lsrs	r2, r3, #24
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	332b      	adds	r3, #43	@ 0x2b
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20005490 	.word	0x20005490

08001d30 <message>:

void message(const char *format, ...) {
 8001d30:	b40f      	push	{r0, r1, r2, r3}
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 8001d38:	2064      	movs	r0, #100	@ 0x64
 8001d3a:	f00b fd05 	bl	800d748 <malloc>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <message+0x36>
        va_list args;
        va_start(args, format);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	2164      	movs	r1, #100	@ 0x64
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f00b ffb7 	bl	800dcc8 <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fc08 	bl	8000570 <Send_Uart>
        free(buf);      // Free the allocated memory
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f00b fcf9 	bl	800d758 <free>
    }
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d70:	b004      	add	sp, #16
 8001d72:	4770      	bx	lr

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <eeprom_init>:

#include "new_eeprom.h"


HAL_StatusTypeDef eeprom_init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, EEPROMWIRTE, 10, HAL_MAX_DELAY)!=HAL_OK)
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	220a      	movs	r2, #10
 8001d8a:	21a0      	movs	r1, #160	@ 0xa0
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <eeprom_init+0x24>)
 8001d8e:	f003 fbdf 	bl	8005550 <HAL_I2C_IsDeviceReady>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <eeprom_init+0x1c>
	{
		return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <eeprom_init+0x1e>
	}
	else
	{
		return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
	}
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000108 	.word	0x20000108

08001da8 <eeprom_write>:
	}
}


HAL_StatusTypeDef eeprom_write(uint16_t addr,uint8_t* data,uint8_t len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af04      	add	r7, sp, #16
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	4613      	mov	r3, r2
 8001db6:	717b      	strb	r3, [r7, #5]
	if(len > 128)
 8001db8:	797b      	ldrb	r3, [r7, #5]
 8001dba:	2b80      	cmp	r3, #128	@ 0x80
 8001dbc:	d901      	bls.n	8001dc2 <eeprom_write+0x1a>
	{
		return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e016      	b.n	8001df0 <eeprom_write+0x48>
	}
	else
	{
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, addr, 2, data, len, HAL_MAX_DELAY)!=HAL_OK)
 8001dc2:	797b      	ldrb	r3, [r7, #5]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	9102      	str	r1, [sp, #8]
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	21a0      	movs	r1, #160	@ 0xa0
 8001dd8:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <eeprom_write+0x50>)
 8001dda:	f003 f899 	bl	8004f10 <HAL_I2C_Mem_Write>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <eeprom_write+0x40>
		{
		return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e003      	b.n	8001df0 <eeprom_write+0x48>
		}
		HAL_Delay(10);
 8001de8:	200a      	movs	r0, #10
 8001dea:	f001 fd0b 	bl	8003804 <HAL_Delay>
		return HAL_OK;
 8001dee:	2300      	movs	r3, #0
	}
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000108 	.word	0x20000108

08001dfc <eeprom_read>:
    if (HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr, 2, buffer, len, HAL_MAX_DELAY) != HAL_OK) {
        return NULL;  // Read failed
    }
    return buffer;  // Return pointer to the provided buffer
}*/
uint8_t* eeprom_read(uint16_t addr, uint8_t* buffer, uint16_t len) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	@ 0x38
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	80fb      	strh	r3, [r7, #6]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80bb      	strh	r3, [r7, #4]
    // Removed initial check to debug I2C read
    uint16_t offset = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001e10:	e043      	b.n	8001e9a <eeprom_read+0x9e>
        uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001e12:	88ba      	ldrh	r2, [r7, #4]
 8001e14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b80      	cmp	r3, #128	@ 0x80
 8001e1a:	bfa8      	it	ge
 8001e1c:	2380      	movge	r3, #128	@ 0x80
 8001e1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr + offset, 2, buffer + offset, chunk_size, HAL_MAX_DELAY);
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e24:	4413      	add	r3, r2
 8001e26:	b299      	uxth	r1, r3
 8001e28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	21a1      	movs	r1, #161	@ 0xa1
 8001e40:	481e      	ldr	r0, [pc, #120]	@ (8001ebc <eeprom_read+0xc0>)
 8001e42:	f003 f95f 	bl	8005104 <HAL_I2C_Mem_Read>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status != HAL_OK) {
 8001e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01e      	beq.n	8001e92 <eeprom_read+0x96>
            HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read fail at offset ", 27, HAL_MAX_DELAY);
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	221b      	movs	r2, #27
 8001e5a:	4919      	ldr	r1, [pc, #100]	@ (8001ec0 <eeprom_read+0xc4>)
 8001e5c:	4819      	ldr	r0, [pc, #100]	@ (8001ec4 <eeprom_read+0xc8>)
 8001e5e:	f006 fede 	bl	8008c1e <HAL_UART_Transmit>
            char msg[20];
            sprintf(msg, "%d, status: %d\n\r", offset, status);
 8001e62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e68:	f107 000c 	add.w	r0, r7, #12
 8001e6c:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <eeprom_read+0xcc>)
 8001e6e:	f00b fe71 	bl	800db54 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe f9aa 	bl	80001d0 <strlen>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f107 010c 	add.w	r1, r7, #12
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <eeprom_read+0xc8>)
 8001e8a:	f006 fec8 	bl	8008c1e <HAL_UART_Transmit>
            return NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e00f      	b.n	8001eb2 <eeprom_read+0xb6>
        }
        offset += chunk_size;
 8001e92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e96:	4413      	add	r3, r2
 8001e98:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001e9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3b7      	bcc.n	8001e12 <eeprom_read+0x16>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read complete\n\r", 22, HAL_MAX_DELAY);
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <eeprom_read+0xd0>)
 8001eaa:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <eeprom_read+0xc8>)
 8001eac:	f006 feb7 	bl	8008c1e <HAL_UART_Transmit>
    return buffer;
 8001eb0:	683b      	ldr	r3, [r7, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000108 	.word	0x20000108
 8001ec0:	0800feb0 	.word	0x0800feb0
 8001ec4:	20000374 	.word	0x20000374
 8001ec8:	0800fecc 	.word	0x0800fecc
 8001ecc:	0800fee0 	.word	0x0800fee0

08001ed0 <decimal_to_bcd>:
rtc_timedate_t alarm_queue[MAX_ALARMS] = {0}; // Global alarm queue
uint8_t alarm_count = 0;                      // Global alarm count
uint8_t current_idx = 0;                      // Global current index


uint8_t decimal_to_bcd(uint8_t decimal) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <decimal_to_bcd+0x44>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	b258      	sxtb	r0, r3
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <decimal_to_bcd+0x44>)
 8001eee:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef2:	08d9      	lsrs	r1, r3, #3
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	b25b      	sxtb	r3, r3
 8001f02:	4303      	orrs	r3, r0
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	cccccccd 	.word	0xcccccccd

08001f18 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd) {
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2db      	uxtb	r3, r3
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <rtc_init>:
void rtc_init(I2C_HandleTypeDef *hi2c)
{// 1 check if rtc is ready
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	6078      	str	r0, [r7, #4]
	ret=HAL_I2C_IsDeviceReady(&hi2c1, slavwrite, 10, HAL_MAX_DELAY);
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	220a      	movs	r2, #10
 8001f5a:	21a2      	movs	r1, #162	@ 0xa2
 8001f5c:	4881      	ldr	r0, [pc, #516]	@ (8002164 <rtc_init+0x218>)
 8001f5e:	f003 faf7 	bl	8005550 <HAL_I2C_IsDeviceReady>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b80      	ldr	r3, [pc, #512]	@ (8002168 <rtc_init+0x21c>)
 8001f68:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <rtc_init+0x21c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d113      	bne.n	8001f9a <rtc_init+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f78:	487c      	ldr	r0, [pc, #496]	@ (800216c <rtc_init+0x220>)
 8001f7a:	f002 fb2f 	bl	80045dc <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8001f7e:	2064      	movs	r0, #100	@ 0x64
 8001f80:	f001 fc40 	bl	8003804 <HAL_Delay>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC ok\n\r", 8, HAL_MAX_DELAY);
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	2208      	movs	r2, #8
 8001f8a:	4979      	ldr	r1, [pc, #484]	@ (8002170 <rtc_init+0x224>)
 8001f8c:	4879      	ldr	r0, [pc, #484]	@ (8002174 <rtc_init+0x228>)
 8001f8e:	f006 fe46 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8001f92:	2064      	movs	r0, #100	@ 0x64
 8001f94:	f001 fc36 	bl	8003804 <HAL_Delay>
 8001f98:	e009      	b.n	8001fae <rtc_init+0x62>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC notok\n\r", 11, HAL_MAX_DELAY);
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	220b      	movs	r2, #11
 8001fa0:	4975      	ldr	r1, [pc, #468]	@ (8002178 <rtc_init+0x22c>)
 8001fa2:	4874      	ldr	r0, [pc, #464]	@ (8002174 <rtc_init+0x228>)
 8001fa4:	f006 fe3b 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8001fa8:	2064      	movs	r0, #100	@ 0x64
 8001faa:	f001 fc2b 	bl	8003804 <HAL_Delay>
	  }
	  //2 perform otp refresh Performing an OTP refresh ensures that the device operates with the correct calibration data after power-on or reset.
	  uint8_t data[2];
	  data[0]=CLKOUT_ctl;
 8001fae:	230f      	movs	r3, #15
 8001fb0:	733b      	strb	r3, [r7, #12]
	  data[1]=0x01;//set it to 1 to initiate the refresh process
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	737b      	strb	r3, [r7, #13]

	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	21a2      	movs	r1, #162	@ 0xa2
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f002 fc7f 	bl	80048c8 <HAL_I2C_Master_Transmit>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <rtc_init+0x21c>)
 8001fd0:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8001fd2:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <rtc_init+0x21c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <rtc_init+0xa4>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh ok\n\r", 20, HAL_MAX_DELAY);
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	2214      	movs	r2, #20
 8001fe0:	4966      	ldr	r1, [pc, #408]	@ (800217c <rtc_init+0x230>)
 8001fe2:	4864      	ldr	r0, [pc, #400]	@ (8002174 <rtc_init+0x228>)
 8001fe4:	f006 fe1b 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8001fe8:	2064      	movs	r0, #100	@ 0x64
 8001fea:	f001 fc0b 	bl	8003804 <HAL_Delay>
 8001fee:	e009      	b.n	8002004 <rtc_init+0xb8>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh notok\n\r", 23, HAL_MAX_DELAY);
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	2217      	movs	r2, #23
 8001ff6:	4962      	ldr	r1, [pc, #392]	@ (8002180 <rtc_init+0x234>)
 8001ff8:	485e      	ldr	r0, [pc, #376]	@ (8002174 <rtc_init+0x228>)
 8001ffa:	f006 fe10 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8001ffe:	2064      	movs	r0, #100	@ 0x64
 8002000:	f001 fc00 	bl	8003804 <HAL_Delay>
	  }

	  //3 Configure Control_1 Register (0x00) for basic settings
	  data[0]=Control_1;
 8002004:	2300      	movs	r3, #0
 8002006:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 8002008:	2300      	movs	r3, #0
 800200a:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 800200c:	f107 020c 	add.w	r2, r7, #12
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2302      	movs	r3, #2
 8002018:	21a2      	movs	r1, #162	@ 0xa2
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f002 fc54 	bl	80048c8 <HAL_I2C_Master_Transmit>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b50      	ldr	r3, [pc, #320]	@ (8002168 <rtc_init+0x21c>)
 8002026:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002028:	4b4f      	ldr	r3, [pc, #316]	@ (8002168 <rtc_init+0x21c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <rtc_init+0xfa>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 ok\n\r", 14, HAL_MAX_DELAY);
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	220e      	movs	r2, #14
 8002036:	4953      	ldr	r1, [pc, #332]	@ (8002184 <rtc_init+0x238>)
 8002038:	484e      	ldr	r0, [pc, #312]	@ (8002174 <rtc_init+0x228>)
 800203a:	f006 fdf0 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 800203e:	2064      	movs	r0, #100	@ 0x64
 8002040:	f001 fbe0 	bl	8003804 <HAL_Delay>
 8002044:	e009      	b.n	800205a <rtc_init+0x10e>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 notok\n\r", 17, HAL_MAX_DELAY);
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	2211      	movs	r2, #17
 800204c:	494e      	ldr	r1, [pc, #312]	@ (8002188 <rtc_init+0x23c>)
 800204e:	4849      	ldr	r0, [pc, #292]	@ (8002174 <rtc_init+0x228>)
 8002050:	f006 fde5 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002054:	2064      	movs	r0, #100	@ 0x64
 8002056:	f001 fbd5 	bl	8003804 <HAL_Delay>
	  }

	  //4 Configure Control_2 Register (0x01) for alarm
	  data[0]=Control_2;
 800205a:	2301      	movs	r3, #1
 800205c:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002062:	f107 020c 	add.w	r2, r7, #12
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2302      	movs	r3, #2
 800206e:	21a2      	movs	r1, #162	@ 0xa2
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f002 fc29 	bl	80048c8 <HAL_I2C_Master_Transmit>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b3b      	ldr	r3, [pc, #236]	@ (8002168 <rtc_init+0x21c>)
 800207c:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800207e:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <rtc_init+0x21c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <rtc_init+0x150>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 ok\n\r", 14, HAL_MAX_DELAY);
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	220e      	movs	r2, #14
 800208c:	493f      	ldr	r1, [pc, #252]	@ (800218c <rtc_init+0x240>)
 800208e:	4839      	ldr	r0, [pc, #228]	@ (8002174 <rtc_init+0x228>)
 8002090:	f006 fdc5 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002094:	2064      	movs	r0, #100	@ 0x64
 8002096:	f001 fbb5 	bl	8003804 <HAL_Delay>
 800209a:	e009      	b.n	80020b0 <rtc_init+0x164>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 notok\n\r", 17, HAL_MAX_DELAY);
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	2211      	movs	r2, #17
 80020a2:	493b      	ldr	r1, [pc, #236]	@ (8002190 <rtc_init+0x244>)
 80020a4:	4833      	ldr	r0, [pc, #204]	@ (8002174 <rtc_init+0x228>)
 80020a6:	f006 fdba 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020aa:	2064      	movs	r0, #100	@ 0x64
 80020ac:	f001 fbaa 	bl	8003804 <HAL_Delay>
	  }

	  //5 Configure Control_3 Register (0x02) for battery
	  data[0]=Control_3;
 80020b0:	2302      	movs	r3, #2
 80020b2:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 80020b4:	2300      	movs	r3, #0
 80020b6:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80020b8:	f107 020c 	add.w	r2, r7, #12
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2302      	movs	r3, #2
 80020c4:	21a2      	movs	r1, #162	@ 0xa2
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f002 fbfe 	bl	80048c8 <HAL_I2C_Master_Transmit>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <rtc_init+0x21c>)
 80020d2:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <rtc_init+0x21c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <rtc_init+0x1a6>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 ok\n\r", 14, HAL_MAX_DELAY);
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
 80020e0:	220e      	movs	r2, #14
 80020e2:	492c      	ldr	r1, [pc, #176]	@ (8002194 <rtc_init+0x248>)
 80020e4:	4823      	ldr	r0, [pc, #140]	@ (8002174 <rtc_init+0x228>)
 80020e6:	f006 fd9a 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020ea:	2064      	movs	r0, #100	@ 0x64
 80020ec:	f001 fb8a 	bl	8003804 <HAL_Delay>
 80020f0:	e009      	b.n	8002106 <rtc_init+0x1ba>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 notok\n\r", 17, HAL_MAX_DELAY);
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	2211      	movs	r2, #17
 80020f8:	4927      	ldr	r1, [pc, #156]	@ (8002198 <rtc_init+0x24c>)
 80020fa:	481e      	ldr	r0, [pc, #120]	@ (8002174 <rtc_init+0x228>)
 80020fc:	f006 fd8f 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002100:	2064      	movs	r0, #100	@ 0x64
 8002102:	f001 fb7f 	bl	8003804 <HAL_Delay>
	  }

	  //6 Set the CLKOUT frequency, if needed
	  data[0]=CLKOUT_ctl;
 8002106:	230f      	movs	r3, #15
 8002108:	733b      	strb	r3, [r7, #12]
	  data[1]=0x07;
 800210a:	2307      	movs	r3, #7
 800210c:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 800210e:	f107 020c 	add.w	r2, r7, #12
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2302      	movs	r3, #2
 800211a:	21a2      	movs	r1, #162	@ 0xa2
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f002 fbd3 	bl	80048c8 <HAL_I2C_Master_Transmit>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <rtc_init+0x21c>)
 8002128:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800212a:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <rtc_init+0x21c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <rtc_init+0x1fc>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout ok\n\r", 11, HAL_MAX_DELAY);
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	220b      	movs	r2, #11
 8002138:	4918      	ldr	r1, [pc, #96]	@ (800219c <rtc_init+0x250>)
 800213a:	480e      	ldr	r0, [pc, #56]	@ (8002174 <rtc_init+0x228>)
 800213c:	f006 fd6f 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002140:	2064      	movs	r0, #100	@ 0x64
 8002142:	f001 fb5f 	bl	8003804 <HAL_Delay>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
		  HAL_Delay(100);
	  }

}
 8002146:	e009      	b.n	800215c <rtc_init+0x210>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	220e      	movs	r2, #14
 800214e:	4914      	ldr	r1, [pc, #80]	@ (80021a0 <rtc_init+0x254>)
 8002150:	4808      	ldr	r0, [pc, #32]	@ (8002174 <rtc_init+0x228>)
 8002152:	f006 fd64 	bl	8008c1e <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002156:	2064      	movs	r0, #100	@ 0x64
 8002158:	f001 fb54 	bl	8003804 <HAL_Delay>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000108 	.word	0x20000108
 8002168:	200000b0 	.word	0x200000b0
 800216c:	40020c00 	.word	0x40020c00
 8002170:	0800ffc8 	.word	0x0800ffc8
 8002174:	20000374 	.word	0x20000374
 8002178:	0800ffd4 	.word	0x0800ffd4
 800217c:	0800ffe0 	.word	0x0800ffe0
 8002180:	0800fff8 	.word	0x0800fff8
 8002184:	08010010 	.word	0x08010010
 8002188:	08010020 	.word	0x08010020
 800218c:	08010034 	.word	0x08010034
 8002190:	08010044 	.word	0x08010044
 8002194:	08010058 	.word	0x08010058
 8002198:	08010068 	.word	0x08010068
 800219c:	0801007c 	.word	0x0801007c
 80021a0:	08010088 	.word	0x08010088

080021a4 <rtc_wirte>:

HAL_StatusTypeDef rtc_wirte(uint8_t reg_addr,uint8_t value)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	4603      	mov	r3, r0
 80021ac:	460a      	mov	r2, r1
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=reg_addr;
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 80021b8:	79bb      	ldrb	r3, [r7, #6]
 80021ba:	737b      	strb	r3, [r7, #13]

	ret=HAL_I2C_Master_Transmit(&hi2c1, slavwrite, data, sizeof(data), HAL_MAX_DELAY);
 80021bc:	f107 020c 	add.w	r2, r7, #12
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2302      	movs	r3, #2
 80021c8:	21a2      	movs	r1, #162	@ 0xa2
 80021ca:	480c      	ldr	r0, [pc, #48]	@ (80021fc <rtc_wirte+0x58>)
 80021cc:	f002 fb7c 	bl	80048c8 <HAL_I2C_Master_Transmit>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <rtc_wirte+0x5c>)
 80021d6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return HAL_ERROR;
	}*/
	if (ret != HAL_OK) {
 80021d8:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <rtc_wirte+0x5c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <rtc_wirte+0x4e>
	        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C write fail\n\r", 16, HAL_MAX_DELAY);
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	2210      	movs	r2, #16
 80021e6:	4907      	ldr	r1, [pc, #28]	@ (8002204 <rtc_wirte+0x60>)
 80021e8:	4807      	ldr	r0, [pc, #28]	@ (8002208 <rtc_wirte+0x64>)
 80021ea:	f006 fd18 	bl	8008c1e <HAL_UART_Transmit>
	        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <rtc_wirte+0x50>
	    }
	    return HAL_OK;
 80021f2:	2300      	movs	r3, #0

}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000108 	.word	0x20000108
 8002200:	200000b0 	.word	0x200000b0
 8002204:	08010098 	.word	0x08010098
 8002208:	20000374 	.word	0x20000374

0800220c <rtc_read>:

uint8_t rtc_read(uint8_t reg_addr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret1;
	    uint8_t value = 0xFF; // Default value in case of error
 8002216:	23ff      	movs	r3, #255	@ 0xff
 8002218:	73bb      	strb	r3, [r7, #14]

	    // Transmit the register address
	    ret1 = HAL_I2C_Master_Transmit(&hi2c1, slavwrite, &reg_addr, 1, HAL_MAX_DELAY);
 800221a:	1dfa      	adds	r2, r7, #7
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2301      	movs	r3, #1
 8002224:	21a2      	movs	r1, #162	@ 0xa2
 8002226:	4810      	ldr	r0, [pc, #64]	@ (8002268 <rtc_read+0x5c>)
 8002228:	f002 fb4e 	bl	80048c8 <HAL_I2C_Master_Transmit>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <rtc_read+0x2e>
	        return value; // Return default value if transmit fails
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	e011      	b.n	800225e <rtc_read+0x52>
	    }

	    // Receive the register value
	    ret1 = HAL_I2C_Master_Receive(&hi2c1, slaveread, &value, 1, HAL_MAX_DELAY);
 800223a:	f107 020e 	add.w	r2, r7, #14
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	21a3      	movs	r1, #163	@ 0xa3
 8002248:	4807      	ldr	r0, [pc, #28]	@ (8002268 <rtc_read+0x5c>)
 800224a:	f002 fc3b 	bl	8004ac4 <HAL_I2C_Master_Receive>
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <rtc_read+0x50>
	        return 0xFF; // Return default value if receive fails
 8002258:	23ff      	movs	r3, #255	@ 0xff
 800225a:	e000      	b.n	800225e <rtc_read+0x52>
	    }

	    return value; // Return the register value
 800225c:	7bbb      	ldrb	r3, [r7, #14]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000108 	.word	0x20000108

0800226c <rtc_settime>:

HAL_StatusTypeDef rtc_settime(const rtc_timedate_t* timedate)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	if(rtc_wirte(Seconds, decimal_to_bcd(timedate->second))!=HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	789b      	ldrb	r3, [r3, #2]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fe29 	bl	8001ed0 <decimal_to_bcd>
 800227e:	4603      	mov	r3, r0
 8002280:	4619      	mov	r1, r3
 8002282:	2003      	movs	r0, #3
 8002284:	f7ff ff8e 	bl	80021a4 <rtc_wirte>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <rtc_settime+0x26>
	{
		return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e04b      	b.n	800232a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Minutes, decimal_to_bcd(timedate->minute))!=HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe1a 	bl	8001ed0 <decimal_to_bcd>
 800229c:	4603      	mov	r3, r0
 800229e:	4619      	mov	r1, r3
 80022a0:	2004      	movs	r0, #4
 80022a2:	f7ff ff7f 	bl	80021a4 <rtc_wirte>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <rtc_settime+0x44>
	{
		return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e03c      	b.n	800232a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Hours, decimal_to_bcd(timedate->hour))!=HAL_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fe0b 	bl	8001ed0 <decimal_to_bcd>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	2005      	movs	r0, #5
 80022c0:	f7ff ff70 	bl	80021a4 <rtc_wirte>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <rtc_settime+0x62>
	{
		return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e02d      	b.n	800232a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Days, decimal_to_bcd(timedate->day))!=HAL_OK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	78db      	ldrb	r3, [r3, #3]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fdfc 	bl	8001ed0 <decimal_to_bcd>
 80022d8:	4603      	mov	r3, r0
 80022da:	4619      	mov	r1, r3
 80022dc:	2006      	movs	r0, #6
 80022de:	f7ff ff61 	bl	80021a4 <rtc_wirte>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <rtc_settime+0x80>
	{
		return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e01e      	b.n	800232a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Months, decimal_to_bcd(timedate->month))!=HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fded 	bl	8001ed0 <decimal_to_bcd>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4619      	mov	r1, r3
 80022fa:	2008      	movs	r0, #8
 80022fc:	f7ff ff52 	bl	80021a4 <rtc_wirte>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <rtc_settime+0x9e>
	{
		return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00f      	b.n	800232a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Years, decimal_to_bcd(timedate->year))!=HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	795b      	ldrb	r3, [r3, #5]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fdde 	bl	8001ed0 <decimal_to_bcd>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	2009      	movs	r0, #9
 800231a:	f7ff ff43 	bl	80021a4 <rtc_wirte>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <rtc_settime+0xbc>
	{
		return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <rtc_settime+0xbe>
	}

	return HAL_OK;
 8002328:	2300      	movs	r3, #0

}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <rtc_gettime>:

HAL_StatusTypeDef rtc_gettime(rtc_timedate_t* timedate)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp=rtc_read(Seconds);//second register
 800233a:	2003      	movs	r0, #3
 800233c:	f7ff ff66 	bl	800220c <rtc_read>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2bff      	cmp	r3, #255	@ 0xff
 8002348:	d101      	bne.n	800234e <rtc_gettime+0x1c>
	{
		return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e062      	b.n	8002414 <rtc_gettime+0xe2>
	}
	timedate->second= bcd_to_decimal(temp);
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fde1 	bl	8001f18 <bcd_to_decimal>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	709a      	strb	r2, [r3, #2]
	temp=rtc_read(Minutes);//minute register
 800235e:	2004      	movs	r0, #4
 8002360:	f7ff ff54 	bl	800220c <rtc_read>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2bff      	cmp	r3, #255	@ 0xff
 800236c:	d101      	bne.n	8002372 <rtc_gettime+0x40>
	{
		return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e050      	b.n	8002414 <rtc_gettime+0xe2>
	}
	timedate->minute= bcd_to_decimal(temp);
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fdcf 	bl	8001f18 <bcd_to_decimal>
 800237a:	4603      	mov	r3, r0
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	705a      	strb	r2, [r3, #1]
	temp=rtc_read(Hours);//hour register
 8002382:	2005      	movs	r0, #5
 8002384:	f7ff ff42 	bl	800220c <rtc_read>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2bff      	cmp	r3, #255	@ 0xff
 8002390:	d101      	bne.n	8002396 <rtc_gettime+0x64>
	{
		return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e03e      	b.n	8002414 <rtc_gettime+0xe2>
	}
	timedate->hour= bcd_to_decimal(temp);
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fdbd 	bl	8001f18 <bcd_to_decimal>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	701a      	strb	r2, [r3, #0]
	temp=rtc_read(Days);//day register
 80023a6:	2006      	movs	r0, #6
 80023a8:	f7ff ff30 	bl	800220c <rtc_read>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2bff      	cmp	r3, #255	@ 0xff
 80023b4:	d101      	bne.n	80023ba <rtc_gettime+0x88>
	{
		return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e02c      	b.n	8002414 <rtc_gettime+0xe2>
	}
	timedate->day= bcd_to_decimal(temp);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fdab 	bl	8001f18 <bcd_to_decimal>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	70da      	strb	r2, [r3, #3]
	temp=rtc_read(Months);//second register
 80023ca:	2008      	movs	r0, #8
 80023cc:	f7ff ff1e 	bl	800220c <rtc_read>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2bff      	cmp	r3, #255	@ 0xff
 80023d8:	d101      	bne.n	80023de <rtc_gettime+0xac>
	{
		return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e01a      	b.n	8002414 <rtc_gettime+0xe2>
	}
	timedate->month= bcd_to_decimal(temp);
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fd99 	bl	8001f18 <bcd_to_decimal>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	711a      	strb	r2, [r3, #4]
	temp=rtc_read(Years);//second register
 80023ee:	2009      	movs	r0, #9
 80023f0:	f7ff ff0c 	bl	800220c <rtc_read>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2bff      	cmp	r3, #255	@ 0xff
 80023fc:	d101      	bne.n	8002402 <rtc_gettime+0xd0>
	{
		return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e008      	b.n	8002414 <rtc_gettime+0xe2>
	}
	timedate->year= bcd_to_decimal(temp);
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fd87 	bl	8001f18 <bcd_to_decimal>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	715a      	strb	r2, [r3, #5]

	return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <rtc_setalarm>:


HAL_StatusTypeDef rtc_setalarm(rtc_timedate_t* timedate)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	//second alarm
	if(rtc_wirte(Second_alarm, (timedate->second==0xFF)?0x80:decimal_to_bcd(timedate->second))!=HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	789b      	ldrb	r3, [r3, #2]
 8002428:	2bff      	cmp	r3, #255	@ 0xff
 800242a:	d006      	beq.n	800243a <rtc_setalarm+0x1e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fd4d 	bl	8001ed0 <decimal_to_bcd>
 8002436:	4603      	mov	r3, r0
 8002438:	e000      	b.n	800243c <rtc_setalarm+0x20>
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	4619      	mov	r1, r3
 800243e:	200a      	movs	r0, #10
 8002440:	f7ff feb0 	bl	80021a4 <rtc_wirte>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <rtc_setalarm+0x32>
	{
		return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07a      	b.n	8002544 <rtc_setalarm+0x128>
	}
	//minute alarm
	if(rtc_wirte(Minute_alarm, (timedate->minute==0xFF)?0x80:decimal_to_bcd(timedate->minute))!=HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2bff      	cmp	r3, #255	@ 0xff
 8002454:	d006      	beq.n	8002464 <rtc_setalarm+0x48>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fd38 	bl	8001ed0 <decimal_to_bcd>
 8002460:	4603      	mov	r3, r0
 8002462:	e000      	b.n	8002466 <rtc_setalarm+0x4a>
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	4619      	mov	r1, r3
 8002468:	200b      	movs	r0, #11
 800246a:	f7ff fe9b 	bl	80021a4 <rtc_wirte>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <rtc_setalarm+0x5c>
	{
		return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e065      	b.n	8002544 <rtc_setalarm+0x128>
	}
	//hour alarm
	if(rtc_wirte(Hour_alarm, (timedate->hour==0xFF)?0x80:decimal_to_bcd(timedate->hour))!=HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2bff      	cmp	r3, #255	@ 0xff
 800247e:	d006      	beq.n	800248e <rtc_setalarm+0x72>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fd23 	bl	8001ed0 <decimal_to_bcd>
 800248a:	4603      	mov	r3, r0
 800248c:	e000      	b.n	8002490 <rtc_setalarm+0x74>
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	4619      	mov	r1, r3
 8002492:	200c      	movs	r0, #12
 8002494:	f7ff fe86 	bl	80021a4 <rtc_wirte>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <rtc_setalarm+0x86>
	{
		return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e050      	b.n	8002544 <rtc_setalarm+0x128>
	}
	//day alarm
	if(rtc_wirte(Day_alarm, (timedate->day==0xFF)?0x80:decimal_to_bcd(timedate->day))!=HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	78db      	ldrb	r3, [r3, #3]
 80024a6:	2bff      	cmp	r3, #255	@ 0xff
 80024a8:	d006      	beq.n	80024b8 <rtc_setalarm+0x9c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fd0e 	bl	8001ed0 <decimal_to_bcd>
 80024b4:	4603      	mov	r3, r0
 80024b6:	e000      	b.n	80024ba <rtc_setalarm+0x9e>
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	4619      	mov	r1, r3
 80024bc:	200d      	movs	r0, #13
 80024be:	f7ff fe71 	bl	80021a4 <rtc_wirte>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <rtc_setalarm+0xb0>
	{
		return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e03b      	b.n	8002544 <rtc_setalarm+0x128>
	}
	//week alarm
	if(rtc_wirte(Weekday_alarm, (timedate->weekday==0xFF)?0x80:decimal_to_bcd(timedate->weekday))!=HAL_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	799b      	ldrb	r3, [r3, #6]
 80024d0:	2bff      	cmp	r3, #255	@ 0xff
 80024d2:	d006      	beq.n	80024e2 <rtc_setalarm+0xc6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	799b      	ldrb	r3, [r3, #6]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fcf9 	bl	8001ed0 <decimal_to_bcd>
 80024de:	4603      	mov	r3, r0
 80024e0:	e000      	b.n	80024e4 <rtc_setalarm+0xc8>
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	4619      	mov	r1, r3
 80024e6:	200e      	movs	r0, #14
 80024e8:	f7ff fe5c 	bl	80021a4 <rtc_wirte>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <rtc_setalarm+0xda>
	{
		return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e026      	b.n	8002544 <rtc_setalarm+0x128>
	}

	uint8_t control2 = rtc_read(Control_2);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7ff fe88 	bl	800220c <rtc_read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
	    if (control2 == 0xFF) return HAL_ERROR;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2bff      	cmp	r3, #255	@ 0xff
 8002504:	d101      	bne.n	800250a <rtc_setalarm+0xee>
 8002506:	2301      	movs	r3, #1
 8002508:	e01c      	b.n	8002544 <rtc_setalarm+0x128>
	    control2 &= ~(1 << 7);  // Clear MSF
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002510:	73fb      	strb	r3, [r7, #15]
	    control2 |= (1 << 1);   // Set AIE
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	73fb      	strb	r3, [r7, #15]
	    if (rtc_wirte(Control_2, control2) != HAL_OK) return HAL_ERROR;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	4619      	mov	r1, r3
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff fe40 	bl	80021a4 <rtc_wirte>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <rtc_setalarm+0x112>
 800252a:	2301      	movs	r3, #1
 800252c:	e00a      	b.n	8002544 <rtc_setalarm+0x128>

	    HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm set complete\n\r", 20, HAL_MAX_DELAY);
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	2214      	movs	r2, #20
 8002534:	4905      	ldr	r1, [pc, #20]	@ (800254c <rtc_setalarm+0x130>)
 8002536:	4806      	ldr	r0, [pc, #24]	@ (8002550 <rtc_setalarm+0x134>)
 8002538:	f006 fb71 	bl	8008c1e <HAL_UART_Transmit>
	    read_and_transmit(Control_2);
 800253c:	2001      	movs	r0, #1
 800253e:	f000 f84f 	bl	80025e0 <read_and_transmit>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"interrupt notenabled\n\r", 22, HAL_MAX_DELAY);
		HAL_Delay(100);
	}*/
	return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	080100ac 	.word	0x080100ac
 8002550:	20000374 	.word	0x20000374

08002554 <rtc_clearalarm>:

HAL_StatusTypeDef rtc_clearalarm(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
	uint8_t control2;
	//read_and_transmit(0x01);
	control2=rtc_read(Control_2);
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff fe56 	bl	800220c <rtc_read>
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
	//read_and_transmit(0x01);
	if(control2==0xFF)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2bff      	cmp	r3, #255	@ 0xff
 8002568:	d101      	bne.n	800256e <rtc_clearalarm+0x1a>
	{
		return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00e      	b.n	800258c <rtc_clearalarm+0x38>
	}
	control2 &=~(1<<4);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f023 0310 	bic.w	r3, r3, #16
 8002574:	71fb      	strb	r3, [r7, #7]
	//control2=0x00;
	if(rtc_wirte(Control_2, control2)!=HAL_OK)
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4619      	mov	r1, r3
 800257a:	2001      	movs	r0, #1
 800257c:	f7ff fe12 	bl	80021a4 <rtc_wirte>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <rtc_clearalarm+0x36>
	{
		//read_and_transmit(0x01);
		return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <rtc_clearalarm+0x38>
	}

	return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <rtc_check_alarm_flag>:

uint8_t rtc_check_alarm_flag(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
	{
	uint8_t control2 = rtc_read(Control_2); // Read the Control_2 register
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff fe36 	bl	800220c <rtc_read>
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
	read_and_transmit(Control_2);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f000 f81b 	bl	80025e0 <read_and_transmit>
	    if (control2 == 0xFF) {
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2bff      	cmp	r3, #255	@ 0xff
 80025ae:	d108      	bne.n	80025c2 <rtc_check_alarm_flag+0x2e>
	    	HAL_UART_Transmit(&huart3, (uint8_t*)"Flag read error\n\r", 17, HAL_MAX_DELAY);
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	2211      	movs	r2, #17
 80025b6:	4908      	ldr	r1, [pc, #32]	@ (80025d8 <rtc_check_alarm_flag+0x44>)
 80025b8:	4808      	ldr	r0, [pc, #32]	@ (80025dc <rtc_check_alarm_flag+0x48>)
 80025ba:	f006 fb30 	bl	8008c1e <HAL_UART_Transmit>
	        return 0xFF; // Error occurred while reading
 80025be:	23ff      	movs	r3, #255	@ 0xff
 80025c0:	e005      	b.n	80025ce <rtc_check_alarm_flag+0x3a>
	    }

	    return (control2 & (1 << 4)) ? 1 : 0; // Return 1 if AF is set, otherwise 0
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	111b      	asrs	r3, r3, #4
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
	}
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	080100c4 	.word	0x080100c4
 80025dc:	20000374 	.word	0x20000374

080025e0 <read_and_transmit>:
    rtc_wirte(Control_2, control2);
    //read_and_transmit(Control_2);
    return HAL_OK;
}

void read_and_transmit(uint8_t reg_addr) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b090      	sub	sp, #64	@ 0x40
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
    char uart_buffer[50];
    uint8_t reg_value = rtc_read(reg_addr);
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe0d 	bl	800220c <rtc_read>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Check if the read was successful
    if (reg_value == 0xFF) {
 80025f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025fc:	2bff      	cmp	r3, #255	@ 0xff
 80025fe:	d107      	bne.n	8002610 <read_and_transmit+0x30>
        // Error handling: Send an error message over UART
        sprintf(uart_buffer, "Error reading register 0x%02X\r\n", reg_addr);
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	490f      	ldr	r1, [pc, #60]	@ (8002644 <read_and_transmit+0x64>)
 8002608:	4618      	mov	r0, r3
 800260a:	f00b faa3 	bl	800db54 <siprintf>
 800260e:	e007      	b.n	8002620 <read_and_transmit+0x40>
    } else {
        // Send the read value over UART
        sprintf(uart_buffer, "Register 0x%02X: 0x%02X\r\n", reg_addr, reg_value);
 8002610:	79fa      	ldrb	r2, [r7, #7]
 8002612:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002616:	f107 000c 	add.w	r0, r7, #12
 800261a:	490b      	ldr	r1, [pc, #44]	@ (8002648 <read_and_transmit+0x68>)
 800261c:	f00b fa9a 	bl	800db54 <siprintf>
    }

    // Transmit the message via UART3
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd fdd3 	bl	80001d0 <strlen>
 800262a:	4603      	mov	r3, r0
 800262c:	b29a      	uxth	r2, r3
 800262e:	f107 010c 	add.w	r1, r7, #12
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <read_and_transmit+0x6c>)
 8002638:	f006 faf1 	bl	8008c1e <HAL_UART_Transmit>
}
 800263c:	bf00      	nop
 800263e:	3740      	adds	r7, #64	@ 0x40
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	080100d8 	.word	0x080100d8
 8002648:	080100f8 	.word	0x080100f8
 800264c:	20000374 	.word	0x20000374

08002650 <senddata>:

char uart_buffer[50]; // Definition of uart_buffer
int id1 = 0;          // Definition of id1

void senddata(char* str,uint8_t size)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r",2, HAL_MAX_DELAY);
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	2202      	movs	r2, #2
 8002662:	4909      	ldr	r1, [pc, #36]	@ (8002688 <senddata+0x38>)
 8002664:	4809      	ldr	r0, [pc, #36]	@ (800268c <senddata+0x3c>)
 8002666:	f006 fada 	bl	8008c1e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str,size, HAL_MAX_DELAY);
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	b29a      	uxth	r2, r3
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <senddata+0x3c>)
 8002676:	f006 fad2 	bl	8008c1e <HAL_UART_Transmit>
	HAL_Delay(100);
 800267a:	2064      	movs	r0, #100	@ 0x64
 800267c:	f001 f8c2 	bl	8003804 <HAL_Delay>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	08010114 	.word	0x08010114
 800268c:	20000374 	.word	0x20000374

08002690 <HAL_UART_RxCpltCallback>:
	}

}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3 || huart->Instance == USART2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <HAL_UART_RxCpltCallback+0xcc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_UART_RxCpltCallback+0x1c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002760 <HAL_UART_RxCpltCallback+0xd0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d153      	bne.n	8002754 <HAL_UART_RxCpltCallback+0xc4>
  {
    if (rxindex < RX_buffersize - 1)
 80026ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2bff      	cmp	r3, #255	@ 0xff
 80026b4:	d00c      	beq.n	80026d0 <HAL_UART_RxCpltCallback+0x40>
    {
      rxindex++;
 80026b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b28      	ldr	r3, [pc, #160]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 80026c2:	701a      	strb	r2, [r3, #0]
    {
      rxbuffer[RX_buffersize - 1] = '\0';
      datarecived = 1;
      return;
    }
    if (rxindex >= strlen(EOP_string) && strncmp(&rxbuffer[rxindex - strlen(EOP_string)], EOP_string, strlen(EOP_string)) == 0)
 80026c4:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d921      	bls.n	8002712 <HAL_UART_RxCpltCallback+0x82>
 80026ce:	e007      	b.n	80026e0 <HAL_UART_RxCpltCallback+0x50>
      rxbuffer[RX_buffersize - 1] = '\0';
 80026d0:	4b25      	ldr	r3, [pc, #148]	@ (8002768 <HAL_UART_RxCpltCallback+0xd8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
      datarecived = 1;
 80026d8:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_UART_RxCpltCallback+0xdc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
      return;
 80026de:	e039      	b.n	8002754 <HAL_UART_RxCpltCallback+0xc4>
    if (rxindex >= strlen(EOP_string) && strncmp(&rxbuffer[rxindex - strlen(EOP_string)], EOP_string, strlen(EOP_string)) == 0)
 80026e0:	4b20      	ldr	r3, [pc, #128]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3b03      	subs	r3, #3
 80026e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002768 <HAL_UART_RxCpltCallback+0xd8>)
 80026ea:	4413      	add	r3, r2
 80026ec:	2203      	movs	r2, #3
 80026ee:	4920      	ldr	r1, [pc, #128]	@ (8002770 <HAL_UART_RxCpltCallback+0xe0>)
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00b faff 	bl	800dcf4 <strncmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_UART_RxCpltCallback+0x82>
    {
      rxbuffer[RX_buffersize - 1] = '\0';
 80026fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <HAL_UART_RxCpltCallback+0xd8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
      datarecived = 1;
 8002704:	4b19      	ldr	r3, [pc, #100]	@ (800276c <HAL_UART_RxCpltCallback+0xdc>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
      rxindex = 0;
 800270a:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
      return;
 8002710:	e020      	b.n	8002754 <HAL_UART_RxCpltCallback+0xc4>
    }

    // Restart interrupt for the specific UART instance
    if (huart->Instance == USART3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a11      	ldr	r2, [pc, #68]	@ (800275c <HAL_UART_RxCpltCallback+0xcc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d10b      	bne.n	8002734 <HAL_UART_RxCpltCallback+0xa4>
    {
      HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_UART_RxCpltCallback+0xd8>)
 8002726:	4413      	add	r3, r2
 8002728:	2201      	movs	r2, #1
 800272a:	4619      	mov	r1, r3
 800272c:	4811      	ldr	r0, [pc, #68]	@ (8002774 <HAL_UART_RxCpltCallback+0xe4>)
 800272e:	f006 fb08 	bl	8008d42 <HAL_UART_Receive_IT>
 8002732:	e00f      	b.n	8002754 <HAL_UART_RxCpltCallback+0xc4>
    }
    else if (huart->Instance == USART2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_UART_RxCpltCallback+0xd0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10a      	bne.n	8002754 <HAL_UART_RxCpltCallback+0xc4>
    {
      HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_UART_RxCpltCallback+0xd4>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_UART_RxCpltCallback+0xd8>)
 8002748:	4413      	add	r3, r2
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	480a      	ldr	r0, [pc, #40]	@ (8002778 <HAL_UART_RxCpltCallback+0xe8>)
 8002750:	f006 faf7 	bl	8008d42 <HAL_UART_Receive_IT>
    }
  }
}
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40004800 	.word	0x40004800
 8002760:	40004400 	.word	0x40004400
 8002764:	2000562c 	.word	0x2000562c
 8002768:	2000552c 	.word	0x2000552c
 800276c:	2000562d 	.word	0x2000562d
 8002770:	08010118 	.word	0x08010118
 8002774:	20000374 	.word	0x20000374
 8002778:	20000330 	.word	0x20000330

0800277c <parse_and_print>:
}*/




void parse_and_print(char *buffer) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b0d2      	sub	sp, #328	@ 0x148
 8002780:	af00      	add	r7, sp, #0
 8002782:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002786:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800278a:	6018      	str	r0, [r3, #0]
    char temp[RX_buffersize]; // Temporary buffer to hold a copy of input string
    strcpy(temp, buffer); // Copy to avoid modifying original string
 800278c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002790:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002794:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	4610      	mov	r0, r2
 800279c:	f00b fb9b 	bl	800ded6 <strcpy>


    char *token = strtok(temp, "|");
 80027a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027a4:	4942      	ldr	r1, [pc, #264]	@ (80028b0 <parse_and_print+0x134>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f00b fab6 	bl	800dd18 <strtok>
 80027ac:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    //static uint8_t alarm_count = 0;
    //static uint8_t current_idx = 0;


    // Extract and print ID
    if (token) {
 80027b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d024      	beq.n	8002802 <parse_and_print+0x86>
    	int id;
    	sscanf(token,"%d",&id);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	461a      	mov	r2, r3
 80027be:	493d      	ldr	r1, [pc, #244]	@ (80028b4 <parse_and_print+0x138>)
 80027c0:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80027c4:	f00b f9e6 	bl	800db94 <siscanf>
        sprintf(msg, "id: %d\r\n", id);
 80027c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80027cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4938      	ldr	r1, [pc, #224]	@ (80028b8 <parse_and_print+0x13c>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f00b f9bb 	bl	800db54 <siprintf>
        UART_Print(msg);
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fb2a 	bl	8002e3c <UART_Print>
        token = strtok(NULL, "|");
 80027e8:	4931      	ldr	r1, [pc, #196]	@ (80028b0 <parse_and_print+0x134>)
 80027ea:	2000      	movs	r0, #0
 80027ec:	f00b fa94 	bl	800dd18 <strtok>
 80027f0:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
        id1=id;
 80027f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80027f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2f      	ldr	r2, [pc, #188]	@ (80028bc <parse_and_print+0x140>)
 8002800:	6013      	str	r3, [r2, #0]
    }

    // Extract and print Name
    if (token) {
 8002802:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <parse_and_print+0xb4>
        sprintf(msg, "name: %s\r\n", token);
 800280a:	f107 0310 	add.w	r3, r7, #16
 800280e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002812:	492b      	ldr	r1, [pc, #172]	@ (80028c0 <parse_and_print+0x144>)
 8002814:	4618      	mov	r0, r3
 8002816:	f00b f99d 	bl	800db54 <siprintf>
        UART_Print(msg);
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fb0c 	bl	8002e3c <UART_Print>
        token = strtok(NULL, "|");
 8002824:	4922      	ldr	r1, [pc, #136]	@ (80028b0 <parse_and_print+0x134>)
 8002826:	2000      	movs	r0, #0
 8002828:	f00b fa76 	bl	800dd18 <strtok>
 800282c:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    }

    // Extract and print Location
    if (token) {
 8002830:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <parse_and_print+0xe2>
        sprintf(msg, "loc: %s\r\n", token);
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002840:	4920      	ldr	r1, [pc, #128]	@ (80028c4 <parse_and_print+0x148>)
 8002842:	4618      	mov	r0, r3
 8002844:	f00b f986 	bl	800db54 <siprintf>
        UART_Print(msg);
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f000 faf5 	bl	8002e3c <UART_Print>
        token = strtok(NULL, "|");
 8002852:	4917      	ldr	r1, [pc, #92]	@ (80028b0 <parse_and_print+0x134>)
 8002854:	2000      	movs	r0, #0
 8002856:	f00b fa5f 	bl	800dd18 <strtok>
 800285a:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    }

    switch (id1) {
 800285e:	4b17      	ldr	r3, [pc, #92]	@ (80028bc <parse_and_print+0x140>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d015      	beq.n	8002892 <parse_and_print+0x116>
 8002866:	2b03      	cmp	r3, #3
 8002868:	dc18      	bgt.n	800289c <parse_and_print+0x120>
 800286a:	2b01      	cmp	r3, #1
 800286c:	d002      	beq.n	8002874 <parse_and_print+0xf8>
 800286e:	2b02      	cmp	r3, #2
 8002870:	d005      	beq.n	800287e <parse_and_print+0x102>
 8002872:	e013      	b.n	800289c <parse_and_print+0x120>
                case 1:
                    process_id1(token);
 8002874:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8002878:	f000 f828 	bl	80028cc <process_id1>
                    break;
 800287c:	e012      	b.n	80028a4 <parse_and_print+0x128>
                case 2:
                    process_id2(token,buffer);
 800287e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002882:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 800288c:	f000 f8e4 	bl	8002a58 <process_id2>
                    break;
 8002890:	e008      	b.n	80028a4 <parse_and_print+0x128>
                case 3:
                	process_id3(token);
 8002892:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8002896:	f000 fa67 	bl	8002d68 <process_id3>
                	break;
 800289a:	e003      	b.n	80028a4 <parse_and_print+0x128>
                default:
                    UART_Print("Unknown ID\r\n");
 800289c:	480a      	ldr	r0, [pc, #40]	@ (80028c8 <parse_and_print+0x14c>)
 800289e:	f000 facd 	bl	8002e3c <UART_Print>
                    break;
 80028a2:	bf00      	nop
                //}
    //}



}
 80028a4:	bf00      	nop
 80028a6:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	0801011c 	.word	0x0801011c
 80028b4:	08010120 	.word	0x08010120
 80028b8:	08010124 	.word	0x08010124
 80028bc:	2000566c 	.word	0x2000566c
 80028c0:	08010130 	.word	0x08010130
 80028c4:	0801013c 	.word	0x0801013c
 80028c8:	08010148 	.word	0x08010148

080028cc <process_id1>:
// Function for ID 1: Parse and process time/date
void process_id1(char *token) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b098      	sub	sp, #96	@ 0x60
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
    char msg[50];

    UART_Print("time-\r\n");
 80028d4:	4851      	ldr	r0, [pc, #324]	@ (8002a1c <process_id1+0x150>)
 80028d6:	f000 fab1 	bl	8002e3c <UART_Print>
    int hh, mm, ss;
    if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 80028da:	f107 0118 	add.w	r1, r7, #24
 80028de:	f107 021c 	add.w	r2, r7, #28
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	460b      	mov	r3, r1
 80028ea:	494d      	ldr	r1, [pc, #308]	@ (8002a20 <process_id1+0x154>)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f00b f951 	bl	800db94 <siscanf>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d12f      	bne.n	8002958 <process_id1+0x8c>
        sprintf(msg, "hour: %d\r\n", hh);
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f107 0320 	add.w	r3, r7, #32
 80028fe:	4949      	ldr	r1, [pc, #292]	@ (8002a24 <process_id1+0x158>)
 8002900:	4618      	mov	r0, r3
 8002902:	f00b f927 	bl	800db54 <siprintf>
        UART_Print(msg);
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fa96 	bl	8002e3c <UART_Print>
        sprintf(msg, "min: %d\r\n", mm);
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	f107 0320 	add.w	r3, r7, #32
 8002916:	4944      	ldr	r1, [pc, #272]	@ (8002a28 <process_id1+0x15c>)
 8002918:	4618      	mov	r0, r3
 800291a:	f00b f91b 	bl	800db54 <siprintf>
        UART_Print(msg);
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa8a 	bl	8002e3c <UART_Print>
        sprintf(msg, "sec: %d\r\n", ss);
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	f107 0320 	add.w	r3, r7, #32
 800292e:	493f      	ldr	r1, [pc, #252]	@ (8002a2c <process_id1+0x160>)
 8002930:	4618      	mov	r0, r3
 8002932:	f00b f90f 	bl	800db54 <siprintf>
        UART_Print(msg);
 8002936:	f107 0320 	add.w	r3, r7, #32
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fa7e 	bl	8002e3c <UART_Print>
        timedate.hour = hh;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b3a      	ldr	r3, [pc, #232]	@ (8002a30 <process_id1+0x164>)
 8002946:	701a      	strb	r2, [r3, #0]
        timedate.minute = mm;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <process_id1+0x164>)
 800294e:	705a      	strb	r2, [r3, #1]
        timedate.second = ss;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <process_id1+0x164>)
 8002956:	709a      	strb	r2, [r3, #2]
    }
    token = strtok(NULL, "|");
 8002958:	4936      	ldr	r1, [pc, #216]	@ (8002a34 <process_id1+0x168>)
 800295a:	2000      	movs	r0, #0
 800295c:	f00b f9dc 	bl	800dd18 <strtok>
 8002960:	6078      	str	r0, [r7, #4]

    if (token) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d045      	beq.n	80029f4 <process_id1+0x128>
        UART_Print("date-\r\n");
 8002968:	4833      	ldr	r0, [pc, #204]	@ (8002a38 <process_id1+0x16c>)
 800296a:	f000 fa67 	bl	8002e3c <UART_Print>
        int month, day, year;
        if (sscanf(token, "%d/%d/%d", &month, &day, &year) == 3) {
 800296e:	f107 010c 	add.w	r1, r7, #12
 8002972:	f107 0210 	add.w	r2, r7, #16
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	492f      	ldr	r1, [pc, #188]	@ (8002a3c <process_id1+0x170>)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f00b f907 	bl	800db94 <siscanf>
 8002986:	4603      	mov	r3, r0
 8002988:	2b03      	cmp	r3, #3
 800298a:	d130      	bne.n	80029ee <process_id1+0x122>
            sprintf(msg, "month: %d\r\n", month);
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	f107 0320 	add.w	r3, r7, #32
 8002992:	492b      	ldr	r1, [pc, #172]	@ (8002a40 <process_id1+0x174>)
 8002994:	4618      	mov	r0, r3
 8002996:	f00b f8dd 	bl	800db54 <siprintf>
            UART_Print(msg);
 800299a:	f107 0320 	add.w	r3, r7, #32
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fa4c 	bl	8002e3c <UART_Print>
            sprintf(msg, "day: %d\r\n", day);
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	f107 0320 	add.w	r3, r7, #32
 80029aa:	4926      	ldr	r1, [pc, #152]	@ (8002a44 <process_id1+0x178>)
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00b f8d1 	bl	800db54 <siprintf>
            UART_Print(msg);
 80029b2:	f107 0320 	add.w	r3, r7, #32
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fa40 	bl	8002e3c <UART_Print>
            sprintf(msg, "year: %d\r\n", year);
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	f107 0320 	add.w	r3, r7, #32
 80029c2:	4921      	ldr	r1, [pc, #132]	@ (8002a48 <process_id1+0x17c>)
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00b f8c5 	bl	800db54 <siprintf>
            UART_Print(msg);
 80029ca:	f107 0320 	add.w	r3, r7, #32
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa34 	bl	8002e3c <UART_Print>
            timedate.month = month;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <process_id1+0x164>)
 80029da:	711a      	strb	r2, [r3, #4]
            timedate.day = day;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <process_id1+0x164>)
 80029e2:	70da      	strb	r2, [r3, #3]
            timedate.year = year;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <process_id1+0x164>)
 80029ea:	715a      	strb	r2, [r3, #5]
 80029ec:	e002      	b.n	80029f4 <process_id1+0x128>
        } else {
            UART_Print("Error: Invalid Date Format\r\n");
 80029ee:	4817      	ldr	r0, [pc, #92]	@ (8002a4c <process_id1+0x180>)
 80029f0:	f000 fa24 	bl	8002e3c <UART_Print>
        }
    }

    int ret = rtc_settime(&timedate);
 80029f4:	480e      	ldr	r0, [pc, #56]	@ (8002a30 <process_id1+0x164>)
 80029f6:	f7ff fc39 	bl	800226c <rtc_settime>
 80029fa:	4603      	mov	r3, r0
 80029fc:	657b      	str	r3, [r7, #84]	@ 0x54
    if (ret == 0) {
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <process_id1+0x140>
        UART_Print("rtc time set ok\n\r");
 8002a04:	4812      	ldr	r0, [pc, #72]	@ (8002a50 <process_id1+0x184>)
 8002a06:	f000 fa19 	bl	8002e3c <UART_Print>
    } else {
        UART_Print("rtc time set notok\n\r");
    }
}
 8002a0a:	e002      	b.n	8002a12 <process_id1+0x146>
        UART_Print("rtc time set notok\n\r");
 8002a0c:	4811      	ldr	r0, [pc, #68]	@ (8002a54 <process_id1+0x188>)
 8002a0e:	f000 fa15 	bl	8002e3c <UART_Print>
}
 8002a12:	bf00      	nop
 8002a14:	3758      	adds	r7, #88	@ 0x58
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	08010158 	.word	0x08010158
 8002a20:	08010160 	.word	0x08010160
 8002a24:	0801016c 	.word	0x0801016c
 8002a28:	08010178 	.word	0x08010178
 8002a2c:	08010184 	.word	0x08010184
 8002a30:	20005630 	.word	0x20005630
 8002a34:	0801011c 	.word	0x0801011c
 8002a38:	08010190 	.word	0x08010190
 8002a3c:	08010198 	.word	0x08010198
 8002a40:	080101a4 	.word	0x080101a4
 8002a44:	080101b0 	.word	0x080101b0
 8002a48:	080101bc 	.word	0x080101bc
 8002a4c:	080101c8 	.word	0x080101c8
 8002a50:	080101e8 	.word	0x080101e8
 8002a54:	080101fc 	.word	0x080101fc

08002a58 <process_id2>:

// Function for ID 2: Parse and process alarms
void process_id2(char *token,char *buffer) {
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b0d7      	sub	sp, #348	@ 0x15c
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002a62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a66:	6018      	str	r0, [r3, #0]
 8002a68:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002a6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a70:	6019      	str	r1, [r3, #0]
    char msg[50];
    int num_alarms;

    sscanf(token, "%d", &num_alarms);
 8002a72:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002a76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002a7a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a7e:	49a8      	ldr	r1, [pc, #672]	@ (8002d20 <process_id2+0x2c8>)
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	f00b f887 	bl	800db94 <siscanf>
    token = strtok(NULL, "|");
 8002a86:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002a8a:	f5a3 74a6 	sub.w	r4, r3, #332	@ 0x14c
 8002a8e:	49a5      	ldr	r1, [pc, #660]	@ (8002d24 <process_id2+0x2cc>)
 8002a90:	2000      	movs	r0, #0
 8002a92:	f00b f941 	bl	800dd18 <strtok>
 8002a96:	6020      	str	r0, [r4, #0]

    if (num_alarms > MAX_ALARMS) {
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9c:	2b0e      	cmp	r3, #14
 8002a9e:	dd03      	ble.n	8002aa8 <process_id2+0x50>
        UART_Print("Too many alarms!\n\r");
 8002aa0:	48a1      	ldr	r0, [pc, #644]	@ (8002d28 <process_id2+0x2d0>)
 8002aa2:	f000 f9cb 	bl	8002e3c <UART_Print>
 8002aa6:	e136      	b.n	8002d16 <process_id2+0x2be>
        return;
    }

    alarm_count = 0;
 8002aa8:	4ba0      	ldr	r3, [pc, #640]	@ (8002d2c <process_id2+0x2d4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
    while (token && alarm_count < num_alarms) {
 8002aae:	e090      	b.n	8002bd2 <process_id2+0x17a>
        UART_Print("time-\r\n");
 8002ab0:	489f      	ldr	r0, [pc, #636]	@ (8002d30 <process_id2+0x2d8>)
 8002ab2:	f000 f9c3 	bl	8002e3c <UART_Print>
        int hh, mm, ss;
        if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 8002ab6:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8002aba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002abe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002ac2:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8002ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	460b      	mov	r3, r1
 8002ace:	4999      	ldr	r1, [pc, #612]	@ (8002d34 <process_id2+0x2dc>)
 8002ad0:	6800      	ldr	r0, [r0, #0]
 8002ad2:	f00b f85f 	bl	800db94 <siscanf>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d171      	bne.n	8002bc0 <process_id2+0x168>
            sprintf(msg, "Alarm %d: %02d:%02d:%02d\r\n", alarm_count + 1, hh, mm, ss);
 8002adc:	4b93      	ldr	r3, [pc, #588]	@ (8002d2c <process_id2+0x2d4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	1c59      	adds	r1, r3, #1
 8002ae2:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 8002ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002aea:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002aee:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4623      	mov	r3, r4
 8002af8:	460a      	mov	r2, r1
 8002afa:	498f      	ldr	r1, [pc, #572]	@ (8002d38 <process_id2+0x2e0>)
 8002afc:	f00b f82a 	bl	800db54 <siprintf>
            UART_Print(msg);
 8002b00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f999 	bl	8002e3c <UART_Print>

            alarm_queue[alarm_count].hour = hh;
 8002b0a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002b0e:	4b87      	ldr	r3, [pc, #540]	@ (8002d2c <process_id2+0x2d4>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	b2d0      	uxtb	r0, r2
 8002b16:	4a89      	ldr	r2, [pc, #548]	@ (8002d3c <process_id2+0x2e4>)
 8002b18:	460b      	mov	r3, r1
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a5b      	subs	r3, r3, r1
 8002b1e:	4413      	add	r3, r2
 8002b20:	4602      	mov	r2, r0
 8002b22:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].minute = mm;
 8002b24:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002b28:	4b80      	ldr	r3, [pc, #512]	@ (8002d2c <process_id2+0x2d4>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	b2d0      	uxtb	r0, r2
 8002b30:	4a82      	ldr	r2, [pc, #520]	@ (8002d3c <process_id2+0x2e4>)
 8002b32:	460b      	mov	r3, r1
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a5b      	subs	r3, r3, r1
 8002b38:	4413      	add	r3, r2
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].second = ss;
 8002b40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002b44:	4b79      	ldr	r3, [pc, #484]	@ (8002d2c <process_id2+0x2d4>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	b2d0      	uxtb	r0, r2
 8002b4c:	4a7b      	ldr	r2, [pc, #492]	@ (8002d3c <process_id2+0x2e4>)
 8002b4e:	460b      	mov	r3, r1
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a5b      	subs	r3, r3, r1
 8002b54:	4413      	add	r3, r2
 8002b56:	3302      	adds	r3, #2
 8002b58:	4602      	mov	r2, r0
 8002b5a:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].day = 0xFF;
 8002b5c:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <process_id2+0x2d4>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4a76      	ldr	r2, [pc, #472]	@ (8002d3c <process_id2+0x2e4>)
 8002b64:	460b      	mov	r3, r1
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a5b      	subs	r3, r3, r1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].weekday = 0xFF;
 8002b72:	4b6e      	ldr	r3, [pc, #440]	@ (8002d2c <process_id2+0x2d4>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4a70      	ldr	r2, [pc, #448]	@ (8002d3c <process_id2+0x2e4>)
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a5b      	subs	r3, r3, r1
 8002b80:	4413      	add	r3, r2
 8002b82:	3306      	adds	r3, #6
 8002b84:	22ff      	movs	r2, #255	@ 0xff
 8002b86:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].month = 0xFF;
 8002b88:	4b68      	ldr	r3, [pc, #416]	@ (8002d2c <process_id2+0x2d4>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d3c <process_id2+0x2e4>)
 8002b90:	460b      	mov	r3, r1
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a5b      	subs	r3, r3, r1
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	22ff      	movs	r2, #255	@ 0xff
 8002b9c:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].year = 0xFF;
 8002b9e:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <process_id2+0x2d4>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4a65      	ldr	r2, [pc, #404]	@ (8002d3c <process_id2+0x2e4>)
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	1a5b      	subs	r3, r3, r1
 8002bac:	4413      	add	r3, r2
 8002bae:	3305      	adds	r3, #5
 8002bb0:	22ff      	movs	r2, #255	@ 0xff
 8002bb2:	701a      	strb	r2, [r3, #0]
            alarm_count++;
 8002bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8002d2c <process_id2+0x2d4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8002d2c <process_id2+0x2d4>)
 8002bbe:	701a      	strb	r2, [r3, #0]
        }
        token = strtok(NULL, "|");
 8002bc0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002bc4:	f5a3 74a6 	sub.w	r4, r3, #332	@ 0x14c
 8002bc8:	4956      	ldr	r1, [pc, #344]	@ (8002d24 <process_id2+0x2cc>)
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f00b f8a4 	bl	800dd18 <strtok>
 8002bd0:	6020      	str	r0, [r4, #0]
    while (token && alarm_count < num_alarms) {
 8002bd2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002bd6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <process_id2+0x198>
 8002be0:	4b52      	ldr	r3, [pc, #328]	@ (8002d2c <process_id2+0x2d4>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f6ff af60 	blt.w	8002ab0 <process_id2+0x58>
    }

    // Write to EEPROM only for id=2
        ret = eeprom_write(0x0000, (uint8_t*)buffer, strlen(buffer) + 1);
 8002bf0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002bf4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	f7fd fae9 	bl	80001d0 <strlen>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002c0a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff f8c9 	bl	8001da8 <eeprom_write>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b49      	ldr	r3, [pc, #292]	@ (8002d40 <process_id2+0x2e8>)
 8002c1c:	701a      	strb	r2, [r3, #0]
        if (ret == HAL_OK) {
 8002c1e:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <process_id2+0x2e8>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d141      	bne.n	8002caa <process_id2+0x252>
            HAL_UART_Transmit(&huart3, (uint8_t*)"write ok\n\r", 10, HAL_MAX_DELAY);
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	220a      	movs	r2, #10
 8002c2c:	4945      	ldr	r1, [pc, #276]	@ (8002d44 <process_id2+0x2ec>)
 8002c2e:	4846      	ldr	r0, [pc, #280]	@ (8002d48 <process_id2+0x2f0>)
 8002c30:	f005 fff5 	bl	8008c1e <HAL_UART_Transmit>
            HAL_Delay(100);
 8002c34:	2064      	movs	r0, #100	@ 0x64
 8002c36:	f000 fde5 	bl	8003804 <HAL_Delay>

            uint8_t eeprom_data[RX_buffersize];
            memset(eeprom_data, 0, RX_buffersize); // Clear the buffer
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f00b f84d 	bl	800dce4 <memset>
            if (eeprom_read(0x0000, eeprom_data, RX_buffersize) != NULL) {
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c52:	4619      	mov	r1, r3
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff f8d1 	bl	8001dfc <eeprom_read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01c      	beq.n	8002c9a <process_id2+0x242>
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read OK: ", 16, HAL_MAX_DELAY);
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295
 8002c64:	2210      	movs	r2, #16
 8002c66:	4939      	ldr	r1, [pc, #228]	@ (8002d4c <process_id2+0x2f4>)
 8002c68:	4837      	ldr	r0, [pc, #220]	@ (8002d48 <process_id2+0x2f0>)
 8002c6a:	f005 ffd8 	bl	8008c1e <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart3, eeprom_data, strlen((char*)eeprom_data), HAL_MAX_DELAY);
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd faac 	bl	80001d0 <strlen>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	f107 0108 	add.w	r1, r7, #8
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	4830      	ldr	r0, [pc, #192]	@ (8002d48 <process_id2+0x2f0>)
 8002c86:	f005 ffca 	bl	8008c1e <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	2202      	movs	r2, #2
 8002c90:	492f      	ldr	r1, [pc, #188]	@ (8002d50 <process_id2+0x2f8>)
 8002c92:	482d      	ldr	r0, [pc, #180]	@ (8002d48 <process_id2+0x2f0>)
 8002c94:	f005 ffc3 	bl	8008c1e <HAL_UART_Transmit>
 8002c98:	e011      	b.n	8002cbe <process_id2+0x266>
            } else {
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed\n\r", 20, HAL_MAX_DELAY);
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	2214      	movs	r2, #20
 8002ca0:	492c      	ldr	r1, [pc, #176]	@ (8002d54 <process_id2+0x2fc>)
 8002ca2:	4829      	ldr	r0, [pc, #164]	@ (8002d48 <process_id2+0x2f0>)
 8002ca4:	f005 ffbb 	bl	8008c1e <HAL_UART_Transmit>
 8002ca8:	e009      	b.n	8002cbe <process_id2+0x266>
            }
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"write notok\n\r", 13, HAL_MAX_DELAY);
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	220d      	movs	r2, #13
 8002cb0:	4929      	ldr	r1, [pc, #164]	@ (8002d58 <process_id2+0x300>)
 8002cb2:	4825      	ldr	r0, [pc, #148]	@ (8002d48 <process_id2+0x2f0>)
 8002cb4:	f005 ffb3 	bl	8008c1e <HAL_UART_Transmit>
            HAL_Delay(100);
 8002cb8:	2064      	movs	r0, #100	@ 0x64
 8002cba:	f000 fda3 	bl	8003804 <HAL_Delay>
        }

    //eeprom_store_config(token); // Store alarms in EEPROM
    UART_Print("Alarms set\n\r");
 8002cbe:	4827      	ldr	r0, [pc, #156]	@ (8002d5c <process_id2+0x304>)
 8002cc0:	f000 f8bc 	bl	8002e3c <UART_Print>

    if (alarm_count > 0) {
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <process_id2+0x2d4>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d024      	beq.n	8002d16 <process_id2+0x2be>
        int ret = rtc_setalarm(&alarm_queue[0]);
 8002ccc:	481b      	ldr	r0, [pc, #108]	@ (8002d3c <process_id2+0x2e4>)
 8002cce:	f7ff fba5 	bl	800241c <rtc_setalarm>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        if (ret == 0) {
 8002cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11a      	bne.n	8002d16 <process_id2+0x2be>
            UART_Print("First alarm set\n\r");
 8002ce0:	481f      	ldr	r0, [pc, #124]	@ (8002d60 <process_id2+0x308>)
 8002ce2:	f000 f8ab 	bl	8002e3c <UART_Print>
            if (alarm_count > 1) {
 8002ce6:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <process_id2+0x2d4>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d913      	bls.n	8002d16 <process_id2+0x2be>
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
                        alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002cee:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <process_id2+0x2e4>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
 8002cf2:	461a      	mov	r2, r3
                        alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <process_id2+0x2e4>)
 8002cf6:	785b      	ldrb	r3, [r3, #1]
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
 8002cf8:	4619      	mov	r1, r3
                        alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <process_id2+0x2e4>)
 8002cfc:	789b      	ldrb	r3, [r3, #2]
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
 8002cfe:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	460b      	mov	r3, r1
 8002d06:	4917      	ldr	r1, [pc, #92]	@ (8002d64 <process_id2+0x30c>)
 8002d08:	f00a ff24 	bl	800db54 <siprintf>
                UART_Print(msg);
 8002d0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f893 	bl	8002e3c <UART_Print>
            }
        }
    }
}
 8002d16:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08010120 	.word	0x08010120
 8002d24:	0801011c 	.word	0x0801011c
 8002d28:	08010214 	.word	0x08010214
 8002d2c:	2000552a 	.word	0x2000552a
 8002d30:	08010158 	.word	0x08010158
 8002d34:	08010160 	.word	0x08010160
 8002d38:	08010228 	.word	0x08010228
 8002d3c:	200054c8 	.word	0x200054c8
 8002d40:	200000b0 	.word	0x200000b0
 8002d44:	08010244 	.word	0x08010244
 8002d48:	20000374 	.word	0x20000374
 8002d4c:	08010250 	.word	0x08010250
 8002d50:	08010114 	.word	0x08010114
 8002d54:	08010264 	.word	0x08010264
 8002d58:	0801027c 	.word	0x0801027c
 8002d5c:	0801028c 	.word	0x0801028c
 8002d60:	0801029c 	.word	0x0801029c
 8002d64:	080102b0 	.word	0x080102b0

08002d68 <process_id3>:

void process_id3(char *token)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	printtime();
 8002d70:	f000 f804 	bl	8002d7c <printtime>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <printtime>:


void printtime(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af02      	add	r7, sp, #8
	ret=rtc_gettime(&timedate);
 8002d82:	4827      	ldr	r0, [pc, #156]	@ (8002e20 <printtime+0xa4>)
 8002d84:	f7ff fad5 	bl	8002332 <rtc_gettime>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <printtime+0xa8>)
 8002d8e:	701a      	strb	r2, [r3, #0]
	        	  	            if(ret==HAL_OK)
 8002d90:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <printtime+0xa8>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d135      	bne.n	8002e04 <printtime+0x88>
	        	  	            {
	        	  	          	  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <printtime+0xa4>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <printtime+0xa4>)
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	4619      	mov	r1, r3
 8002da4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <printtime+0xa4>)
 8002da6:	789b      	ldrb	r3, [r3, #2]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	491e      	ldr	r1, [pc, #120]	@ (8002e28 <printtime+0xac>)
 8002dae:	481f      	ldr	r0, [pc, #124]	@ (8002e2c <printtime+0xb0>)
 8002db0:	f00a fed0 	bl	800db54 <siprintf>
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002db4:	481d      	ldr	r0, [pc, #116]	@ (8002e2c <printtime+0xb0>)
 8002db6:	f7fd fa0b 	bl	80001d0 <strlen>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	491a      	ldr	r1, [pc, #104]	@ (8002e2c <printtime+0xb0>)
 8002dc4:	481a      	ldr	r0, [pc, #104]	@ (8002e30 <printtime+0xb4>)
 8002dc6:	f005 ff2a 	bl	8008c1e <HAL_UART_Transmit>
	        	  	          	  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <printtime+0xa4>)
 8002dcc:	78db      	ldrb	r3, [r3, #3]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <printtime+0xa4>)
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <printtime+0xa4>)
 8002dd8:	795b      	ldrb	r3, [r3, #5]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4915      	ldr	r1, [pc, #84]	@ (8002e34 <printtime+0xb8>)
 8002de0:	4812      	ldr	r0, [pc, #72]	@ (8002e2c <printtime+0xb0>)
 8002de2:	f00a feb7 	bl	800db54 <siprintf>
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002de6:	4811      	ldr	r0, [pc, #68]	@ (8002e2c <printtime+0xb0>)
 8002de8:	f7fd f9f2 	bl	80001d0 <strlen>
 8002dec:	4603      	mov	r3, r0
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	490d      	ldr	r1, [pc, #52]	@ (8002e2c <printtime+0xb0>)
 8002df6:	480e      	ldr	r0, [pc, #56]	@ (8002e30 <printtime+0xb4>)
 8002df8:	f005 ff11 	bl	8008c1e <HAL_UART_Transmit>
	        	  	          	  HAL_Delay(100);
 8002dfc:	2064      	movs	r0, #100	@ 0x64
 8002dfe:	f000 fd01 	bl	8003804 <HAL_Delay>
	        	  	            {
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
	        	  	          	  HAL_Delay(100);
	        	  	            }

}
 8002e02:	e009      	b.n	8002e18 <printtime+0x9c>
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	2214      	movs	r2, #20
 8002e0a:	490b      	ldr	r1, [pc, #44]	@ (8002e38 <printtime+0xbc>)
 8002e0c:	4808      	ldr	r0, [pc, #32]	@ (8002e30 <printtime+0xb4>)
 8002e0e:	f005 ff06 	bl	8008c1e <HAL_UART_Transmit>
	        	  	          	  HAL_Delay(100);
 8002e12:	2064      	movs	r0, #100	@ 0x64
 8002e14:	f000 fcf6 	bl	8003804 <HAL_Delay>
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20005630 	.word	0x20005630
 8002e24:	200000b0 	.word	0x200000b0
 8002e28:	080102c8 	.word	0x080102c8
 8002e2c:	20005638 	.word	0x20005638
 8002e30:	20000374 	.word	0x20000374
 8002e34:	080102e8 	.word	0x080102e8
 8002e38:	0801030c 	.word	0x0801030c

08002e3c <UART_Print>:
        }
    }
}*/


void UART_Print(const char *str) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd f9c3 	bl	80001d0 <strlen>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4803      	ldr	r0, [pc, #12]	@ (8002e64 <UART_Print+0x28>)
 8002e56:	f005 fee2 	bl	8008c1e <HAL_UART_Transmit>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000374 	.word	0x20000374

08002e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_MspInit+0x4c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb4 <HAL_MspInit+0x4c>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_MspInit+0x4c>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_MspInit+0x4c>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	4a08      	ldr	r2, [pc, #32]	@ (8002eb4 <HAL_MspInit+0x4c>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_MspInit+0x4c>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]

    if(hi2c->Instance==I2C1) // Add I2C1 configuration
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a32      	ldr	r2, [pc, #200]	@ (8002fa0 <HAL_I2C_MspInit+0xe8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12c      	bne.n	8002f34 <HAL_I2C_MspInit+0x7c>
    {
      /* USER CODE BEGIN I2C1_MspInit 0 */
      /* USER CODE END I2C1_MspInit 0 */

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	4a30      	ldr	r2, [pc, #192]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eea:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
      /**I2C1 GPIO Configuration
      PB6     ------> I2C1_SCL
      PB7     ------> I2C1_SDA
      */
      GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002ef6:	23c0      	movs	r3, #192	@ 0xc0
 8002ef8:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8002efa:	2312      	movs	r3, #18
 8002efc:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;     // External pull-ups required
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f02:	2303      	movs	r3, #3
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // AF4 for I2C1
 8002f06:	2304      	movs	r3, #4
 8002f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4825      	ldr	r0, [pc, #148]	@ (8002fa8 <HAL_I2C_MspInit+0xf0>)
 8002f12:	f001 f9af 	bl	8004274 <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_I2C1_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	4a21      	ldr	r2, [pc, #132]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f26:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f32:	e031      	b.n	8002f98 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	@ (8002fac <HAL_I2C_MspInit+0xf4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12c      	bne.n	8002f98 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f60:	2312      	movs	r3, #18
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	4619      	mov	r1, r3
 8002f76:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <HAL_I2C_MspInit+0xf0>)
 8002f78:	f001 f97c 	bl	8004274 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	4a07      	ldr	r2, [pc, #28]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_I2C_MspInit+0xec>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3730      	adds	r7, #48	@ 0x30
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40005400 	.word	0x40005400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	40005800 	.word	0x40005800

08002fb0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	@ 0x38
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a91      	ldr	r2, [pc, #580]	@ (8003214 <HAL_I2S_MspInit+0x264>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f040 808c 	bne.w	80030ec <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8002fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fec:	623b      	str	r3, [r7, #32]
 8002fee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	4b88      	ldr	r3, [pc, #544]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	4a87      	ldr	r2, [pc, #540]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003000:	4b85      	ldr	r3, [pc, #532]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	4b81      	ldr	r3, [pc, #516]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	4a80      	ldr	r2, [pc, #512]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	6313      	str	r3, [r2, #48]	@ 0x30
 800301c:	4b7e      	ldr	r3, [pc, #504]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003028:	2308      	movs	r3, #8
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003038:	2305      	movs	r3, #5
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	4876      	ldr	r0, [pc, #472]	@ (800321c <HAL_I2S_MspInit+0x26c>)
 8003044:	f001 f916 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003048:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800305a:	2305      	movs	r3, #5
 800305c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003062:	4619      	mov	r1, r3
 8003064:	486e      	ldr	r0, [pc, #440]	@ (8003220 <HAL_I2S_MspInit+0x270>)
 8003066:	f001 f905 	bl	8004274 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800306a:	4b6e      	ldr	r3, [pc, #440]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 800306c:	4a6e      	ldr	r2, [pc, #440]	@ (8003228 <HAL_I2S_MspInit+0x278>)
 800306e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003070:	4b6c      	ldr	r3, [pc, #432]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003076:	4b6b      	ldr	r3, [pc, #428]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800307c:	4b69      	ldr	r3, [pc, #420]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003082:	4b68      	ldr	r3, [pc, #416]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 8003084:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003088:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800308a:	4b66      	ldr	r3, [pc, #408]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 800308c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003090:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003092:	4b64      	ldr	r3, [pc, #400]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003098:	4b62      	ldr	r3, [pc, #392]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 800309a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800309e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030a0:	4b60      	ldr	r3, [pc, #384]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030a8:	2204      	movs	r2, #4
 80030aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80030ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030ae:	2203      	movs	r2, #3
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80030b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80030b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80030be:	4859      	ldr	r0, [pc, #356]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030c0:	f000 fcd6 	bl	8003a70 <HAL_DMA_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 80030ca:	f7fe fe53 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a54      	ldr	r2, [pc, #336]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030d4:	4a53      	ldr	r2, [pc, #332]	@ (8003224 <HAL_I2S_MspInit+0x274>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	2024      	movs	r0, #36	@ 0x24
 80030e0:	f000 fc8f 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030e4:	2024      	movs	r0, #36	@ 0x24
 80030e6:	f000 fca8 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030ea:	e08f      	b.n	800320c <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4e      	ldr	r2, [pc, #312]	@ (800322c <HAL_I2S_MspInit+0x27c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f040 808a 	bne.w	800320c <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	4b46      	ldr	r3, [pc, #280]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	4a45      	ldr	r2, [pc, #276]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003106:	6413      	str	r3, [r2, #64]	@ 0x40
 8003108:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	4b3f      	ldr	r3, [pc, #252]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	4a3e      	ldr	r2, [pc, #248]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6313      	str	r3, [r2, #48]	@ 0x30
 8003124:	4b3c      	ldr	r3, [pc, #240]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	4b38      	ldr	r3, [pc, #224]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	4a37      	ldr	r2, [pc, #220]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003140:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <HAL_I2S_MspInit+0x268>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800314c:	2310      	movs	r3, #16
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003150:	2302      	movs	r3, #2
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	2300      	movs	r3, #0
 800315a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800315c:	2306      	movs	r3, #6
 800315e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003164:	4619      	mov	r1, r3
 8003166:	4832      	ldr	r0, [pc, #200]	@ (8003230 <HAL_I2S_MspInit+0x280>)
 8003168:	f001 f884 	bl	8004274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800316c:	2328      	movs	r3, #40	@ 0x28
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800317c:	2306      	movs	r3, #6
 800317e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003184:	4619      	mov	r1, r3
 8003186:	4826      	ldr	r0, [pc, #152]	@ (8003220 <HAL_I2S_MspInit+0x270>)
 8003188:	f001 f874 	bl	8004274 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800318c:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 800318e:	4a2a      	ldr	r2, [pc, #168]	@ (8003238 <HAL_I2S_MspInit+0x288>)
 8003190:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8003192:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003198:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800319e:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031a4:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031aa:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031ac:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031b2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c0:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031ca:	2204      	movs	r2, #4
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031ce:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031d0:	2203      	movs	r2, #3
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031d4:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80031da:	4b16      	ldr	r3, [pc, #88]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80031e0:	4814      	ldr	r0, [pc, #80]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031e2:	f000 fc45 	bl	8003a70 <HAL_DMA_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2S_MspInit+0x240>
      Error_Handler();
 80031ec:	f7fe fdc2 	bl	8001d74 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a10      	ldr	r2, [pc, #64]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003234 <HAL_I2S_MspInit+0x284>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	2033      	movs	r0, #51	@ 0x33
 8003202:	f000 fbfe 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003206:	2033      	movs	r0, #51	@ 0x33
 8003208:	f000 fc17 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 800320c:	bf00      	nop
 800320e:	3738      	adds	r7, #56	@ 0x38
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40003800 	.word	0x40003800
 8003218:	40023800 	.word	0x40023800
 800321c:	40020800 	.word	0x40020800
 8003220:	40020400 	.word	0x40020400
 8003224:	200001ec 	.word	0x200001ec
 8003228:	40026058 	.word	0x40026058
 800322c:	40003c00 	.word	0x40003c00
 8003230:	40020000 	.word	0x40020000
 8003234:	2000024c 	.word	0x2000024c
 8003238:	40026010 	.word	0x40026010

0800323c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <HAL_SD_MspInit+0xc0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d14a      	bne.n	80032f4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	4a26      	ldr	r2, [pc, #152]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 8003268:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800326c:	6453      	str	r3, [r2, #68]	@ 0x44
 800326e:	4b24      	ldr	r3, [pc, #144]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a1f      	ldr	r2, [pc, #124]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <HAL_SD_MspInit+0xc4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80032b2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80032b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032c4:	230c      	movs	r3, #12
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	480d      	ldr	r0, [pc, #52]	@ (8003304 <HAL_SD_MspInit+0xc8>)
 80032d0:	f000 ffd0 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032d4:	2304      	movs	r3, #4
 80032d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e0:	2303      	movs	r3, #3
 80032e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032e4:	230c      	movs	r3, #12
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	@ (8003308 <HAL_SD_MspInit+0xcc>)
 80032f0:	f000 ffc0 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80032f4:	bf00      	nop
 80032f6:	3728      	adds	r7, #40	@ 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40023800 	.word	0x40023800
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00

0800330c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	@ 0x30
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3a      	ldr	r2, [pc, #232]	@ (8003414 <HAL_UART_MspInit+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d134      	bne.n	8003398 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4a38      	ldr	r2, [pc, #224]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333c:	6413      	str	r3, [r2, #64]	@ 0x40
 800333e:	4b36      	ldr	r3, [pc, #216]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003366:	230c      	movs	r3, #12
 8003368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003376:	2307      	movs	r3, #7
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	4619      	mov	r1, r3
 8003380:	4826      	ldr	r0, [pc, #152]	@ (800341c <HAL_UART_MspInit+0x110>)
 8003382:	f000 ff77 	bl	8004274 <HAL_GPIO_Init>



    /* USART2 interrupt Init */
        HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2026      	movs	r0, #38	@ 0x26
 800338c:	f000 fb39 	bl	8003a02 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003390:	2026      	movs	r0, #38	@ 0x26
 8003392:	f000 fb52 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003396:	e039      	b.n	800340c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a20      	ldr	r2, [pc, #128]	@ (8003420 <HAL_UART_MspInit+0x114>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d134      	bne.n	800340c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b2:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4a14      	ldr	r2, [pc, #80]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ce:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ec:	2307      	movs	r3, #7
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	480b      	ldr	r0, [pc, #44]	@ (8003424 <HAL_UART_MspInit+0x118>)
 80033f8:	f000 ff3c 	bl	8004274 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	2027      	movs	r0, #39	@ 0x27
 8003402:	f000 fafe 	bl	8003a02 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003406:	2027      	movs	r0, #39	@ 0x27
 8003408:	f000 fb17 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 800340c:	bf00      	nop
 800340e:	3730      	adds	r7, #48	@ 0x30
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40004400 	.word	0x40004400
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000
 8003420:	40004800 	.word	0x40004800
 8003424:	40020c00 	.word	0x40020c00

08003428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <NMI_Handler+0x4>

08003430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <HardFault_Handler+0x4>

08003438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800343c:	bf00      	nop
 800343e:	e7fd      	b.n	800343c <MemManage_Handler+0x4>

08003440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <BusFault_Handler+0x4>

08003448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <UsageFault_Handler+0x4>

08003450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800347e:	f000 f9a1 	bl	80037c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}

08003486 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void EXTI0_IRQHandler(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800348a:	2001      	movs	r0, #1
 800348c:	f001 f8c0 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003498:	2004      	movs	r0, #4
 800349a:	f001 f8b9 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80034a8:	4802      	ldr	r0, [pc, #8]	@ (80034b4 <DMA1_Stream0_IRQHandler+0x10>)
 80034aa:	f000 fc79 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000024c 	.word	0x2000024c

080034b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80034bc:	4802      	ldr	r0, [pc, #8]	@ (80034c8 <DMA1_Stream3_IRQHandler+0x10>)
 80034be:	f000 fc6f 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200001ec 	.word	0x200001ec

080034cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80034d0:	4802      	ldr	r0, [pc, #8]	@ (80034dc <SPI2_IRQHandler+0x10>)
 80034d2:	f003 f9ed 	bl	80068b0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000015c 	.word	0x2000015c

080034e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80034e4:	4802      	ldr	r0, [pc, #8]	@ (80034f0 <SPI3_IRQHandler+0x10>)
 80034e6:	f003 f9e3 	bl	80068b0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200001a4 	.word	0x200001a4

080034f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034f8:	4802      	ldr	r0, [pc, #8]	@ (8003504 <USART2_IRQHandler+0x10>)
 80034fa:	f005 fc53 	bl	8008da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000330 	.word	0x20000330

08003508 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800350c:	4802      	ldr	r0, [pc, #8]	@ (8003518 <USART3_IRQHandler+0x10>)
 800350e:	f005 fc49 	bl	8008da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000374 	.word	0x20000374

0800351c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return 1;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_kill>:

int _kill(int pid, int sig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003536:	f00a fca1 	bl	800de7c <__errno>
 800353a:	4603      	mov	r3, r0
 800353c:	2216      	movs	r2, #22
 800353e:	601a      	str	r2, [r3, #0]
  return -1;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_exit>:

void _exit (int status)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffe7 	bl	800352c <_kill>
  while (1) {}    /* Make sure we hang here */
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <_exit+0x12>

08003562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e00a      	b.n	800358a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003574:	f3af 8000 	nop.w
 8003578:	4601      	mov	r1, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60ba      	str	r2, [r7, #8]
 8003580:	b2ca      	uxtb	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	dbf0      	blt.n	8003574 <_read+0x12>
  }

  return len;
 8003592:	687b      	ldr	r3, [r7, #4]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e009      	b.n	80035c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	60ba      	str	r2, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	dbf1      	blt.n	80035ae <_write+0x12>
  }
  return len;
 80035ca:	687b      	ldr	r3, [r7, #4]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_close>:

int _close(int file)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035fc:	605a      	str	r2, [r3, #4]
  return 0;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_isatty>:

int _isatty(int file)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003614:	2301      	movs	r3, #1
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	@ (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003658:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	@ (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365e:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800366c:	f00a fc06 	bl	800de7c <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003682:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20020000 	.word	0x20020000
 800369c:	00000400 	.word	0x00000400
 80036a0:	20005670 	.word	0x20005670
 80036a4:	20005800 	.word	0x20005800

080036a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <SystemInit+0x20>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <SystemInit+0x20>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d0:	480d      	ldr	r0, [pc, #52]	@ (8003708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036d2:	490e      	ldr	r1, [pc, #56]	@ (800370c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d8:	e002      	b.n	80036e0 <LoopCopyDataInit>

080036da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036de:	3304      	adds	r3, #4

080036e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e4:	d3f9      	bcc.n	80036da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036ec:	e001      	b.n	80036f2 <LoopFillZerobss>

080036ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f0:	3204      	adds	r2, #4

080036f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f4:	d3fb      	bcc.n	80036ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036f6:	f7ff ffd7 	bl	80036a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fa:	f00a fbc5 	bl	800de88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036fe:	f7fc ff4d 	bl	800059c <main>
  bx  lr    
 8003702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800370c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003710:	08010634 	.word	0x08010634
  ldr r2, =_sbss
 8003714:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003718:	20005800 	.word	0x20005800

0800371c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC_IRQHandler>
	...

08003720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003724:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0d      	ldr	r2, [pc, #52]	@ (8003760 <HAL_Init+0x40>)
 800372a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800372e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_Init+0x40>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <HAL_Init+0x40>)
 8003736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800373a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800373c:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <HAL_Init+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a07      	ldr	r2, [pc, #28]	@ (8003760 <HAL_Init+0x40>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003748:	2003      	movs	r0, #3
 800374a:	f000 f94f 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800374e:	200f      	movs	r0, #15
 8003750:	f000 f808 	bl	8003764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003754:	f7ff fb88 	bl	8002e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00

08003764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800376c:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <HAL_InitTick+0x54>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b12      	ldr	r3, [pc, #72]	@ (80037bc <HAL_InitTick+0x58>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800377a:	fbb3 f3f1 	udiv	r3, r3, r1
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f967 	bl	8003a56 <HAL_SYSTICK_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e00e      	b.n	80037b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	d80a      	bhi.n	80037ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003798:	2200      	movs	r2, #0
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f000 f92f 	bl	8003a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037a4:	4a06      	ldr	r2, [pc, #24]	@ (80037c0 <HAL_InitTick+0x5c>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000020 	.word	0x20000020
 80037bc:	20000028 	.word	0x20000028
 80037c0:	20000024 	.word	0x20000024

080037c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_IncTick+0x20>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_IncTick+0x24>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <HAL_IncTick+0x24>)
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000028 	.word	0x20000028
 80037e8:	20005674 	.word	0x20005674

080037ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return uwTick;
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <HAL_GetTick+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20005674 	.word	0x20005674

08003804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff ffee 	bl	80037ec <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d005      	beq.n	800382a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800381e:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <HAL_Delay+0x44>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800382a:	bf00      	nop
 800382c:	f7ff ffde 	bl	80037ec <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d8f7      	bhi.n	800382c <HAL_Delay+0x28>
  {
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000028 	.word	0x20000028

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	@ (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	@ (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a14:	f7ff ff3e 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7ff ff8e 	bl	8003940 <NVIC_EncodePriority>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff5d 	bl	80038ec <__NVIC_SetPriority>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff31 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffa2 	bl	80039a8 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff feb6 	bl	80037ec <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e099      	b.n	8003bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aac:	e00f      	b.n	8003ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aae:	f7ff fe9d 	bl	80037ec <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d908      	bls.n	8003ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e078      	b.n	8003bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e8      	bne.n	8003aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_DMA_Init+0x158>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4313      	orrs	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d117      	bne.n	8003b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb01 	bl	800417c <DMA_CheckFifoParam>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fab8 	bl	8004110 <DMA_CalcBaseAndBitshift>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	223f      	movs	r2, #63	@ 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	f010803f 	.word	0xf010803f

08003bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Start_IT+0x26>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e040      	b.n	8003c74 <HAL_DMA_Start_IT+0xa8>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12f      	bne.n	8003c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa4a 	bl	80040b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	223f      	movs	r2, #63	@ 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0216 	orr.w	r2, r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e005      	b.n	8003c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7ff fdaf 	bl	80037ec <HAL_GetTick>
 8003c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e052      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0216 	bic.w	r2, r2, #22
 8003cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_DMA_Abort+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfe:	e013      	b.n	8003d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d00:	f7ff fd74 	bl	80037ec <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d90c      	bls.n	8003d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e015      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e4      	bne.n	8003d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	223f      	movs	r2, #63	@ 0x3f
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	@ 0x80
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00c      	b.n	8003d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dac:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe8 <HAL_DMA_IRQHandler+0x248>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a8e      	ldr	r2, [pc, #568]	@ (8003fec <HAL_DMA_IRQHandler+0x24c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	2208      	movs	r2, #8
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2204      	movs	r2, #4
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d043      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e01f      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e016      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0208 	bic.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	2220      	movs	r2, #32
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 808f 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8087 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	2220      	movs	r2, #32
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d136      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0216 	bic.w	r2, r2, #22
 8003f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x1da>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	223f      	movs	r2, #63	@ 0x3f
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
        }
        return;
 8003fb6:	e079      	b.n	80040ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e02c      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
 8003fe6:	bf00      	nop
 8003fe8:	20000020 	.word	0x20000020
 8003fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
 8004000:	e01e      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0210 	bic.w	r2, r2, #16
 800401e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d032      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d307      	bcc.n	8004088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f2      	bne.n	800406c <HAL_DMA_IRQHandler+0x2cc>
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e000      	b.n	80040ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80040ac:	bf00      	nop
    }
  }
}
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d108      	bne.n	80040f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040f2:	e007      	b.n	8004104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3b10      	subs	r3, #16
 8004120:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <DMA_CalcBaseAndBitshift+0x64>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800412a:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <DMA_CalcBaseAndBitshift+0x68>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d909      	bls.n	8004152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004150:	e007      	b.n	8004162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	aaaaaaab 	.word	0xaaaaaaab
 8004178:	0801038c 	.word	0x0801038c

0800417c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11f      	bne.n	80041d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d856      	bhi.n	800424a <DMA_CheckFifoParam+0xce>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <DMA_CheckFifoParam+0x28>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c7 	.word	0x080041c7
 80041ac:	080041b5 	.word	0x080041b5
 80041b0:	0800424b 	.word	0x0800424b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d046      	beq.n	800424e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e043      	b.n	800424e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ce:	d140      	bne.n	8004252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e03d      	b.n	8004252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041de:	d121      	bne.n	8004224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d837      	bhi.n	8004256 <DMA_CheckFifoParam+0xda>
 80041e6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <DMA_CheckFifoParam+0x70>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004203 	.word	0x08004203
 80041f4:	080041fd 	.word	0x080041fd
 80041f8:	08004215 	.word	0x08004215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e030      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d025      	beq.n	800425a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004212:	e022      	b.n	800425a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800421c:	d11f      	bne.n	800425e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004222:	e01c      	b.n	800425e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d903      	bls.n	8004232 <DMA_CheckFifoParam+0xb6>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d003      	beq.n	8004238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004230:	e018      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      break;
 8004236:	e015      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e00b      	b.n	8004262 <DMA_CheckFifoParam+0xe6>
      break;
 800424a:	bf00      	nop
 800424c:	e00a      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e008      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
 8004254:	e006      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;   
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004262:	bf00      	nop
    }
  } 
  
  return status; 
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e16b      	b.n	8004568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 815a 	bne.w	8004562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d005      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d130      	bne.n	8004328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d017      	beq.n	8004364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d123      	bne.n	80043b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80b4 	beq.w	8004562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b60      	ldr	r3, [pc, #384]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	4a5f      	ldr	r2, [pc, #380]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 8004404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004408:	6453      	str	r3, [r2, #68]	@ 0x44
 800440a:	4b5d      	ldr	r3, [pc, #372]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004416:	4a5b      	ldr	r2, [pc, #364]	@ (8004584 <HAL_GPIO_Init+0x310>)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	3302      	adds	r3, #2
 800441e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a52      	ldr	r2, [pc, #328]	@ (8004588 <HAL_GPIO_Init+0x314>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d02b      	beq.n	800449a <HAL_GPIO_Init+0x226>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a51      	ldr	r2, [pc, #324]	@ (800458c <HAL_GPIO_Init+0x318>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d025      	beq.n	8004496 <HAL_GPIO_Init+0x222>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a50      	ldr	r2, [pc, #320]	@ (8004590 <HAL_GPIO_Init+0x31c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01f      	beq.n	8004492 <HAL_GPIO_Init+0x21e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4f      	ldr	r2, [pc, #316]	@ (8004594 <HAL_GPIO_Init+0x320>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d019      	beq.n	800448e <HAL_GPIO_Init+0x21a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4e      	ldr	r2, [pc, #312]	@ (8004598 <HAL_GPIO_Init+0x324>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_GPIO_Init+0x216>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4d      	ldr	r2, [pc, #308]	@ (800459c <HAL_GPIO_Init+0x328>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00d      	beq.n	8004486 <HAL_GPIO_Init+0x212>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a4c      	ldr	r2, [pc, #304]	@ (80045a0 <HAL_GPIO_Init+0x32c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <HAL_GPIO_Init+0x20e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <HAL_GPIO_Init+0x330>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_GPIO_Init+0x20a>
 800447a:	2307      	movs	r3, #7
 800447c:	e00e      	b.n	800449c <HAL_GPIO_Init+0x228>
 800447e:	2308      	movs	r3, #8
 8004480:	e00c      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004482:	2306      	movs	r3, #6
 8004484:	e00a      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004486:	2305      	movs	r3, #5
 8004488:	e008      	b.n	800449c <HAL_GPIO_Init+0x228>
 800448a:	2304      	movs	r3, #4
 800448c:	e006      	b.n	800449c <HAL_GPIO_Init+0x228>
 800448e:	2303      	movs	r3, #3
 8004490:	e004      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004492:	2302      	movs	r3, #2
 8004494:	e002      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_GPIO_Init+0x228>
 800449a:	2300      	movs	r3, #0
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	f002 0203 	and.w	r2, r2, #3
 80044a2:	0092      	lsls	r2, r2, #2
 80044a4:	4093      	lsls	r3, r2
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044ac:	4935      	ldr	r1, [pc, #212]	@ (8004584 <HAL_GPIO_Init+0x310>)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	3302      	adds	r3, #2
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ba:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044de:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044e4:	4b30      	ldr	r3, [pc, #192]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004508:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004532:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004538:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800455c:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3301      	adds	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	f67f ae90 	bls.w	8004290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3724      	adds	r7, #36	@ 0x24
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	40013800 	.word	0x40013800
 8004588:	40020000 	.word	0x40020000
 800458c:	40020400 	.word	0x40020400
 8004590:	40020800 	.word	0x40020800
 8004594:	40020c00 	.word	0x40020c00
 8004598:	40021000 	.word	0x40021000
 800459c:	40021400 	.word	0x40021400
 80045a0:	40021800 	.word	0x40021800
 80045a4:	40021c00 	.word	0x40021c00
 80045a8:	40013c00 	.word	0x40013c00

080045ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e001      	b.n	80045ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
 80045e8:	4613      	mov	r3, r2
 80045ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ec:	787b      	ldrb	r3, [r7, #1]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045f8:	e003      	b.n	8004602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	041a      	lsls	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	619a      	str	r2, [r3, #24]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004626:	4a05      	ldr	r2, [pc, #20]	@ (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fd82 	bl	8001138 <HAL_GPIO_EXTI_Callback>
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40013c00 	.word	0x40013c00

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e12b      	b.n	80048aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fe fc26 	bl	8002eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	@ 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a4:	f003 f97e 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a81      	ldr	r2, [pc, #516]	@ (80048b4 <HAL_I2C_Init+0x274>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d807      	bhi.n	80046c4 <HAL_I2C_Init+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a80      	ldr	r2, [pc, #512]	@ (80048b8 <HAL_I2C_Init+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e006      	b.n	80046d2 <HAL_I2C_Init+0x92>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	@ (80048bc <HAL_I2C_Init+0x27c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0e7      	b.n	80048aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a78      	ldr	r2, [pc, #480]	@ (80048c0 <HAL_I2C_Init+0x280>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a6a      	ldr	r2, [pc, #424]	@ (80048b4 <HAL_I2C_Init+0x274>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <HAL_I2C_Init+0xd4>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	e009      	b.n	8004728 <HAL_I2C_Init+0xe8>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a69      	ldr	r2, [pc, #420]	@ (80048c4 <HAL_I2C_Init+0x284>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	3301      	adds	r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800473a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	495c      	ldr	r1, [pc, #368]	@ (80048b4 <HAL_I2C_Init+0x274>)
 8004744:	428b      	cmp	r3, r1
 8004746:	d819      	bhi.n	800477c <HAL_I2C_Init+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e59      	subs	r1, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fbb1 f3f3 	udiv	r3, r1, r3
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800475c:	400b      	ands	r3, r1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_I2C_Init+0x138>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e59      	subs	r1, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	e051      	b.n	800481c <HAL_I2C_Init+0x1dc>
 8004778:	2304      	movs	r3, #4
 800477a:	e04f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_I2C_Init+0x168>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e012      	b.n	80047ce <HAL_I2C_Init+0x18e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x196>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <HAL_I2C_Init+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e58      	subs	r0, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	440b      	add	r3, r1
 80047ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047fa:	e00f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800484a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6911      	ldr	r1, [r2, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	001e847f 	.word	0x001e847f
 80048bc:	003d08ff 	.word	0x003d08ff
 80048c0:	431bde83 	.word	0x431bde83
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	817b      	strh	r3, [r7, #10]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7fe ff86 	bl	80037ec <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	f040 80e0 	bne.w	8004ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2319      	movs	r3, #25
 80048f6:	2201      	movs	r2, #1
 80048f8:	4970      	ldr	r1, [pc, #448]	@ (8004abc <HAL_I2C_Master_Transmit+0x1f4>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f001 fa24 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
 8004908:	e0d3      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2C_Master_Transmit+0x50>
 8004914:	2302      	movs	r3, #2
 8004916:	e0cc      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d007      	beq.n	800493e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2221      	movs	r2, #33	@ 0x21
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2210      	movs	r2, #16
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	893a      	ldrh	r2, [r7, #8]
 800496e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a50      	ldr	r2, [pc, #320]	@ (8004ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800497e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 ff10 	bl	80057ac <I2C_MasterRequestWrite>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e08d      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049ac:	e066      	b.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6a39      	ldr	r1, [r7, #32]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f001 fa9e 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d107      	bne.n	80049d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06b      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d11b      	bne.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f001 fa8e 	bl	8005f76 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e01a      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d194      	bne.n	80049ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	00100002 	.word	0x00100002
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	@ 0x30
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	817b      	strh	r3, [r7, #10]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ad8:	f7fe fe88 	bl	80037ec <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	f040 820b 	bne.w	8004f02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2319      	movs	r3, #25
 8004af2:	2201      	movs	r2, #1
 8004af4:	497c      	ldr	r1, [pc, #496]	@ (8004ce8 <HAL_I2C_Master_Receive+0x224>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f001 f926 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
 8004b04:	e1fe      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_I2C_Master_Receive+0x50>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e1f7      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d007      	beq.n	8004b3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2222      	movs	r2, #34	@ 0x22
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2210      	movs	r2, #16
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	893a      	ldrh	r2, [r7, #8]
 8004b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a5c      	ldr	r2, [pc, #368]	@ (8004cec <HAL_I2C_Master_Receive+0x228>)
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b7c:	8979      	ldrh	r1, [r7, #10]
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fe94 	bl	80058b0 <I2C_MasterRequestRead>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1b8      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d113      	bne.n	8004bc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e18c      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d11b      	bne.n	8004c02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e16c      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11b      	bne.n	8004c42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	e14c      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c68:	e138      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	f200 80f1 	bhi.w	8004e56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d123      	bne.n	8004cc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 f9b9 	bl	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e139      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cc2:	e10b      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d14e      	bne.n	8004d6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4906      	ldr	r1, [pc, #24]	@ (8004cf0 <HAL_I2C_Master_Receive+0x22c>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f001 f836 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e10e      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
 8004ce6:	bf00      	nop
 8004ce8:	00100002 	.word	0x00100002
 8004cec:	ffff0000 	.word	0xffff0000
 8004cf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d68:	e0b8      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	4966      	ldr	r1, [pc, #408]	@ (8004f0c <HAL_I2C_Master_Receive+0x448>)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 ffe7 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0bf      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	494f      	ldr	r1, [pc, #316]	@ (8004f0c <HAL_I2C_Master_Receive+0x448>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 ffb9 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e091      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e54:	e042      	b.n	8004edc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f001 f8cc 	bl	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e04c      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d118      	bne.n	8004edc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f aec2 	bne.w	8004c6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
  }
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3728      	adds	r7, #40	@ 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	00010004 	.word	0x00010004

08004f10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	817b      	strh	r3, [r7, #10]
 8004f22:	460b      	mov	r3, r1
 8004f24:	813b      	strh	r3, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f2a:	f7fe fc5f 	bl	80037ec <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	f040 80d9 	bne.w	80050f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2319      	movs	r3, #25
 8004f44:	2201      	movs	r2, #1
 8004f46:	496d      	ldr	r1, [pc, #436]	@ (80050fc <HAL_I2C_Mem_Write+0x1ec>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fefd 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0cc      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x56>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0c5      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d007      	beq.n	8004f8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2221      	movs	r2, #33	@ 0x21
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2240      	movs	r2, #64	@ 0x40
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a4d      	ldr	r2, [pc, #308]	@ (8005100 <HAL_I2C_Mem_Write+0x1f0>)
 8004fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fce:	88f8      	ldrh	r0, [r7, #6]
 8004fd0:	893a      	ldrh	r2, [r7, #8]
 8004fd2:	8979      	ldrh	r1, [r7, #10]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fd34 	bl	8005a4c <I2C_RequestMemoryWrite>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d052      	beq.n	8005090 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e081      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 ff7e 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	2b04      	cmp	r3, #4
 8005004:	d107      	bne.n	8005016 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e06b      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d11b      	bne.n	8005090 <HAL_I2C_Mem_Write+0x180>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1aa      	bne.n	8004fee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 ff6a 	bl	8005f76 <I2C_WaitOnBTFFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d107      	bne.n	80050c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e016      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	00100002 	.word	0x00100002
 8005100:	ffff0000 	.word	0xffff0000

08005104 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	@ 0x30
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	817b      	strh	r3, [r7, #10]
 8005116:	460b      	mov	r3, r1
 8005118:	813b      	strh	r3, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800511e:	f7fe fb65 	bl	80037ec <HAL_GetTick>
 8005122:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b20      	cmp	r3, #32
 800512e:	f040 8208 	bne.w	8005542 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2319      	movs	r3, #25
 8005138:	2201      	movs	r2, #1
 800513a:	497b      	ldr	r1, [pc, #492]	@ (8005328 <HAL_I2C_Mem_Read+0x224>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fe03 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
 800514a:	e1fb      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_I2C_Mem_Read+0x56>
 8005156:	2302      	movs	r3, #2
 8005158:	e1f4      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d007      	beq.n	8005180 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800518e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2222      	movs	r2, #34	@ 0x22
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2240      	movs	r2, #64	@ 0x40
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a5b      	ldr	r2, [pc, #364]	@ (800532c <HAL_I2C_Mem_Read+0x228>)
 80051c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051c2:	88f8      	ldrh	r0, [r7, #6]
 80051c4:	893a      	ldrh	r2, [r7, #8]
 80051c6:	8979      	ldrh	r1, [r7, #10]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4603      	mov	r3, r0
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fcd0 	bl	8005b78 <I2C_RequestMemoryRead>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e1b0      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d113      	bne.n	8005212 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e184      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005216:	2b01      	cmp	r3, #1
 8005218:	d11b      	bne.n	8005252 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e164      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005256:	2b02      	cmp	r3, #2
 8005258:	d11b      	bne.n	8005292 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005268:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	e144      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052a8:	e138      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	f200 80f1 	bhi.w	8005496 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d123      	bne.n	8005304 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fe99 	bl	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e139      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005302:	e10b      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005308:	2b02      	cmp	r3, #2
 800530a:	d14e      	bne.n	80053aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	2200      	movs	r2, #0
 8005314:	4906      	ldr	r1, [pc, #24]	@ (8005330 <HAL_I2C_Mem_Read+0x22c>)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fd16 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e10e      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
 8005326:	bf00      	nop
 8005328:	00100002 	.word	0x00100002
 800532c:	ffff0000 	.word	0xffff0000
 8005330:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053a8:	e0b8      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	2200      	movs	r2, #0
 80053b2:	4966      	ldr	r1, [pc, #408]	@ (800554c <HAL_I2C_Mem_Read+0x448>)
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fcc7 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0bf      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540c:	2200      	movs	r2, #0
 800540e:	494f      	ldr	r1, [pc, #316]	@ (800554c <HAL_I2C_Mem_Read+0x448>)
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fc99 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e091      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005494:	e042      	b.n	800551c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005498:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fdac 	bl	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e04c      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d118      	bne.n	800551c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	f47f aec2 	bne.w	80052aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3728      	adds	r7, #40	@ 0x28
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	00010004 	.word	0x00010004

08005550 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	@ 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	460b      	mov	r3, r1
 800555e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7fe f944 	bl	80037ec <HAL_GetTick>
 8005564:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b20      	cmp	r3, #32
 8005574:	f040 8111 	bne.w	800579a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2319      	movs	r3, #25
 800557e:	2201      	movs	r2, #1
 8005580:	4988      	ldr	r1, [pc, #544]	@ (80057a4 <HAL_I2C_IsDeviceReady+0x254>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fbe0 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	e104      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_I2C_IsDeviceReady+0x50>
 800559c:	2302      	movs	r3, #2
 800559e:	e0fd      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d007      	beq.n	80055c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2224      	movs	r2, #36	@ 0x24
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a70      	ldr	r2, [pc, #448]	@ (80057a8 <HAL_I2C_IsDeviceReady+0x258>)
 80055e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fb9e 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005620:	d103      	bne.n	800562a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005628:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0b6      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800562e:	897b      	ldrh	r3, [r7, #10]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800563c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800563e:	f7fe f8d5 	bl	80037ec <HAL_GetTick>
 8005642:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b02      	cmp	r3, #2
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005668:	bf0c      	ite	eq
 800566a:	2301      	moveq	r3, #1
 800566c:	2300      	movne	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005672:	e025      	b.n	80056c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005674:	f7fe f8ba 	bl	80037ec <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <HAL_I2C_IsDeviceReady+0x13a>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d103      	bne.n	8005692 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	22a0      	movs	r2, #160	@ 0xa0
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b02      	cmp	r3, #2
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80056ca:	d005      	beq.n	80056d8 <HAL_I2C_IsDeviceReady+0x188>
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <HAL_I2C_IsDeviceReady+0x188>
 80056d2:	7dbb      	ldrb	r3, [r7, #22]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0cd      	beq.n	8005674 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d129      	bne.n	8005742 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2319      	movs	r3, #25
 800571a:	2201      	movs	r2, #1
 800571c:	4921      	ldr	r1, [pc, #132]	@ (80057a4 <HAL_I2C_IsDeviceReady+0x254>)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fb12 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e036      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e02c      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005750:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800575a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2319      	movs	r3, #25
 8005762:	2201      	movs	r2, #1
 8005764:	490f      	ldr	r1, [pc, #60]	@ (80057a4 <HAL_I2C_IsDeviceReady+0x254>)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 faee 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e012      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	3301      	adds	r3, #1
 800577a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	f4ff af32 	bcc.w	80055ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800579a:	2302      	movs	r3, #2
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	00100002 	.word	0x00100002
 80057a8:	ffff0000 	.word	0xffff0000

080057ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	460b      	mov	r3, r1
 80057ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d006      	beq.n	80057d6 <I2C_MasterRequestWrite+0x2a>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d003      	beq.n	80057d6 <I2C_MasterRequestWrite+0x2a>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057d4:	d108      	bne.n	80057e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e00b      	b.n	8005800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	2b12      	cmp	r3, #18
 80057ee:	d107      	bne.n	8005800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fa9b 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005826:	d103      	bne.n	8005830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e035      	b.n	80058a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800583c:	d108      	bne.n	8005850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	e01b      	b.n	8005888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005850:	897b      	ldrh	r3, [r7, #10]
 8005852:	11db      	asrs	r3, r3, #7
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f063 030f 	orn	r3, r3, #15
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	490e      	ldr	r1, [pc, #56]	@ (80058a8 <I2C_MasterRequestWrite+0xfc>)
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fac1 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e010      	b.n	80058a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800587e:	897b      	ldrh	r3, [r7, #10]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4907      	ldr	r1, [pc, #28]	@ (80058ac <I2C_MasterRequestWrite+0x100>)
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fab1 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	00010008 	.word	0x00010008
 80058ac:	00010002 	.word	0x00010002

080058b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	460b      	mov	r3, r1
 80058be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d006      	beq.n	80058ea <I2C_MasterRequestRead+0x3a>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d003      	beq.n	80058ea <I2C_MasterRequestRead+0x3a>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058e8:	d108      	bne.n	80058fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e00b      	b.n	8005914 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005900:	2b11      	cmp	r3, #17
 8005902:	d107      	bne.n	8005914 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa11 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800593a:	d103      	bne.n	8005944 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005942:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e079      	b.n	8005a3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005950:	d108      	bne.n	8005964 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	611a      	str	r2, [r3, #16]
 8005962:	e05f      	b.n	8005a24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	11db      	asrs	r3, r3, #7
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0306 	and.w	r3, r3, #6
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f063 030f 	orn	r3, r3, #15
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4930      	ldr	r1, [pc, #192]	@ (8005a44 <I2C_MasterRequestRead+0x194>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fa37 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e054      	b.n	8005a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4929      	ldr	r1, [pc, #164]	@ (8005a48 <I2C_MasterRequestRead+0x198>)
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa27 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e044      	b.n	8005a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f9af 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059fe:	d103      	bne.n	8005a08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a06:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e017      	b.n	8005a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a0c:	897b      	ldrh	r3, [r7, #10]
 8005a0e:	11db      	asrs	r3, r3, #7
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f003 0306 	and.w	r3, r3, #6
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f063 030e 	orn	r3, r3, #14
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4907      	ldr	r1, [pc, #28]	@ (8005a48 <I2C_MasterRequestRead+0x198>)
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f9e3 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	00010008 	.word	0x00010008
 8005a48:	00010002 	.word	0x00010002

08005a4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	817b      	strh	r3, [r7, #10]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	813b      	strh	r3, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f960 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9c:	d103      	bne.n	8005aa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e05f      	b.n	8005b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	492d      	ldr	r1, [pc, #180]	@ (8005b74 <I2C_RequestMemoryWrite+0x128>)
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f998 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e04c      	b.n	8005b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae8:	6a39      	ldr	r1, [r7, #32]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fa02 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00d      	beq.n	8005b12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d107      	bne.n	8005b0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e02b      	b.n	8005b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d105      	bne.n	8005b24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	e021      	b.n	8005b68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b24:	893b      	ldrh	r3, [r7, #8]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b34:	6a39      	ldr	r1, [r7, #32]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f9dc 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d107      	bne.n	8005b5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e005      	b.n	8005b6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5e:	893b      	ldrh	r3, [r7, #8]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	00010002 	.word	0x00010002

08005b78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	461a      	mov	r2, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	817b      	strh	r3, [r7, #10]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	813b      	strh	r3, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f8c2 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd8:	d103      	bne.n	8005be2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e0aa      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	4952      	ldr	r1, [pc, #328]	@ (8005d44 <I2C_RequestMemoryRead+0x1cc>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f8fa 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e097      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f964 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d107      	bne.n	8005c4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e076      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
 8005c5e:	e021      	b.n	8005ca4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f93e 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e050      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca6:	6a39      	ldr	r1, [r7, #32]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f923 	bl	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d107      	bne.n	8005ccc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e035      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f82b 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00d      	beq.n	8005d14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d06:	d103      	bne.n	8005d10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e013      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d14:	897b      	ldrh	r3, [r7, #10]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	4906      	ldr	r1, [pc, #24]	@ (8005d44 <I2C_RequestMemoryRead+0x1cc>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f863 	bl	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	00010002 	.word	0x00010002

08005d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d58:	e025      	b.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d60:	d021      	beq.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d62:	f7fd fd43 	bl	80037ec <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d302      	bcc.n	8005d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d116      	bne.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e023      	b.n	8005dee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10d      	bne.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	43da      	mvns	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bf0c      	ite	eq
 8005dc2:	2301      	moveq	r3, #1
 8005dc4:	2300      	movne	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	e00c      	b.n	8005de6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	43da      	mvns	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d0b6      	beq.n	8005d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
 8005e02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e04:	e051      	b.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e14:	d123      	bne.n	8005e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	f043 0204 	orr.w	r2, r3, #4
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e046      	b.n	8005eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d021      	beq.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fd fcc1 	bl	80037ec <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d116      	bne.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e020      	b.n	8005eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10c      	bne.n	8005ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	43da      	mvns	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bf14      	ite	ne
 8005ec6:	2301      	movne	r3, #1
 8005ec8:	2300      	moveq	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	e00b      	b.n	8005ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	43da      	mvns	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d18d      	bne.n	8005e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f00:	e02d      	b.n	8005f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f8ce 	bl	80060a4 <I2C_IsAcknowledgeFailed>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02d      	b.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d021      	beq.n	8005f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1a:	f7fd fc67 	bl	80037ec <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d116      	bne.n	8005f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e007      	b.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f68:	2b80      	cmp	r3, #128	@ 0x80
 8005f6a:	d1ca      	bne.n	8005f02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f82:	e02d      	b.n	8005fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f88d 	bl	80060a4 <I2C_IsAcknowledgeFailed>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e02d      	b.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d021      	beq.n	8005fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9c:	f7fd fc26 	bl	80037ec <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d116      	bne.n	8005fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e007      	b.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d1ca      	bne.n	8005f84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006004:	e042      	b.n	800608c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b10      	cmp	r3, #16
 8006012:	d119      	bne.n	8006048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0210 	mvn.w	r2, #16
 800601c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e029      	b.n	800609c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006048:	f7fd fbd0 	bl	80037ec <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d302      	bcc.n	800605e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d116      	bne.n	800608c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e007      	b.n	800609c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006096:	2b40      	cmp	r3, #64	@ 0x40
 8006098:	d1b5      	bne.n	8006006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ba:	d11b      	bne.n	80060f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	f043 0204 	orr.w	r2, r3, #4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e128      	b.n	8006368 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a90      	ldr	r2, [pc, #576]	@ (8006370 <HAL_I2S_Init+0x26c>)
 800612e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fc ff3d 	bl	8002fb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800614c:	f023 030f 	bic.w	r3, r3, #15
 8006150:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2202      	movs	r2, #2
 8006158:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d060      	beq.n	8006224 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800616a:	2310      	movs	r3, #16
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e001      	b.n	8006174 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006170:	2320      	movs	r3, #32
 8006172:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b20      	cmp	r3, #32
 800617a:	d802      	bhi.n	8006182 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006182:	2001      	movs	r0, #1
 8006184:	f001 fd18 	bl	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006188:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006192:	d125      	bne.n	80061e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	3305      	adds	r3, #5
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	e01f      	b.n	80061fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	3305      	adds	r3, #5
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e00e      	b.n	80061fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	3305      	adds	r3, #5
 80061fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4a5c      	ldr	r2, [pc, #368]	@ (8006374 <HAL_I2S_Init+0x270>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	08db      	lsrs	r3, r3, #3
 8006208:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e003      	b.n	800622c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006224:	2302      	movs	r3, #2
 8006226:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d902      	bls.n	8006238 <HAL_I2S_Init+0x134>
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2bff      	cmp	r3, #255	@ 0xff
 8006236:	d907      	bls.n	8006248 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623c:	f043 0210 	orr.w	r2, r3, #16
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e08f      	b.n	8006368 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	ea42 0103 	orr.w	r1, r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	430a      	orrs	r2, r1
 800625a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006266:	f023 030f 	bic.w	r3, r3, #15
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6851      	ldr	r1, [r2, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6892      	ldr	r2, [r2, #8]
 8006272:	4311      	orrs	r1, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	68d2      	ldr	r2, [r2, #12]
 8006278:	4311      	orrs	r1, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6992      	ldr	r2, [r2, #24]
 800627e:	430a      	orrs	r2, r1
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800628a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d161      	bne.n	8006358 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a38      	ldr	r2, [pc, #224]	@ (8006378 <HAL_I2S_Init+0x274>)
 8006298:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a37      	ldr	r2, [pc, #220]	@ (800637c <HAL_I2S_Init+0x278>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_I2S_Init+0x1a4>
 80062a4:	4b36      	ldr	r3, [pc, #216]	@ (8006380 <HAL_I2S_Init+0x27c>)
 80062a6:	e001      	b.n	80062ac <HAL_I2S_Init+0x1a8>
 80062a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	4932      	ldr	r1, [pc, #200]	@ (800637c <HAL_I2S_Init+0x278>)
 80062b4:	428a      	cmp	r2, r1
 80062b6:	d101      	bne.n	80062bc <HAL_I2S_Init+0x1b8>
 80062b8:	4a31      	ldr	r2, [pc, #196]	@ (8006380 <HAL_I2S_Init+0x27c>)
 80062ba:	e001      	b.n	80062c0 <HAL_I2S_Init+0x1bc>
 80062bc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80062c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80062c4:	f023 030f 	bic.w	r3, r3, #15
 80062c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2b      	ldr	r2, [pc, #172]	@ (800637c <HAL_I2S_Init+0x278>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d101      	bne.n	80062d8 <HAL_I2S_Init+0x1d4>
 80062d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006380 <HAL_I2S_Init+0x27c>)
 80062d6:	e001      	b.n	80062dc <HAL_I2S_Init+0x1d8>
 80062d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062dc:	2202      	movs	r2, #2
 80062de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	@ (800637c <HAL_I2S_Init+0x278>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_I2S_Init+0x1ea>
 80062ea:	4b25      	ldr	r3, [pc, #148]	@ (8006380 <HAL_I2S_Init+0x27c>)
 80062ec:	e001      	b.n	80062f2 <HAL_I2S_Init+0x1ee>
 80062ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062fe:	d003      	beq.n	8006308 <HAL_I2S_Init+0x204>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	e001      	b.n	8006314 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006310:	2300      	movs	r3, #0
 8006312:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800631e:	4313      	orrs	r3, r2
 8006320:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006328:	4313      	orrs	r3, r2
 800632a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006332:	4313      	orrs	r3, r2
 8006334:	b29a      	uxth	r2, r3
 8006336:	897b      	ldrh	r3, [r7, #10]
 8006338:	4313      	orrs	r3, r2
 800633a:	b29b      	uxth	r3, r3
 800633c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006340:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a0d      	ldr	r2, [pc, #52]	@ (800637c <HAL_I2S_Init+0x278>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d101      	bne.n	8006350 <HAL_I2S_Init+0x24c>
 800634c:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <HAL_I2S_Init+0x27c>)
 800634e:	e001      	b.n	8006354 <HAL_I2S_Init+0x250>
 8006350:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006354:	897a      	ldrh	r2, [r7, #10]
 8006356:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	08006a89 	.word	0x08006a89
 8006374:	cccccccd 	.word	0xcccccccd
 8006378:	08006c11 	.word	0x08006c11
 800637c:	40003800 	.word	0x40003800
 8006380:	40003400 	.word	0x40003400

08006384 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_I2S_Receive_DMA+0x1a>
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0a1      	b.n	80064e6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_I2S_Receive_DMA+0x2e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e099      	b.n	80064e6 <HAL_I2S_Receive_DMA+0x162>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d005      	beq.n	80063d2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
 80063d0:	e089      	b.n	80064e6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2204      	movs	r2, #4
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d002      	beq.n	80063fe <HAL_I2S_Receive_DMA+0x7a>
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d10a      	bne.n	8006414 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	865a      	strh	r2, [r3, #50]	@ 0x32
 8006412:	e005      	b.n	8006420 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006424:	4a32      	ldr	r2, [pc, #200]	@ (80064f0 <HAL_I2S_Receive_DMA+0x16c>)
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642c:	4a31      	ldr	r2, [pc, #196]	@ (80064f4 <HAL_I2S_Receive_DMA+0x170>)
 800642e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	4a30      	ldr	r2, [pc, #192]	@ (80064f8 <HAL_I2S_Receive_DMA+0x174>)
 8006436:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006446:	d10a      	bne.n	800645e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006448:	2300      	movs	r3, #0
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	4619      	mov	r1, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006474:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006476:	f7fd fba9 	bl	8003bcc <HAL_DMA_Start_IT>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00f      	beq.n	80064a0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006484:	f043 0208 	orr.w	r2, r3, #8
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e022      	b.n	80064e6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d107      	bne.n	80064be <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064bc:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	08006967 	.word	0x08006967
 80064f4:	08006925 	.word	0x08006925
 80064f8:	08006983 	.word	0x08006983

080064fc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006510:	d004      	beq.n	800651c <HAL_I2S_DMAStop+0x20>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 80d1 	bne.w	80066be <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00f      	beq.n	8006544 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	4618      	mov	r0, r3
 800652a:	f7fd fba7 	bl	8003c7c <HAL_DMA_Abort>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006538:	f043 0208 	orr.w	r2, r3, #8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006544:	2364      	movs	r3, #100	@ 0x64
 8006546:	2201      	movs	r2, #1
 8006548:	2102      	movs	r1, #2
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fb26 	bl	8006b9c <I2S_WaitFlagStateUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800656e:	2364      	movs	r3, #100	@ 0x64
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	@ 0x80
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fb11 	bl	8006b9c <I2S_WaitFlagStateUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69da      	ldr	r2, [r3, #28]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0202 	bic.w	r2, r2, #2
 80065c4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	f040 8165 	bne.w	800689e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00f      	beq.n	80065fc <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fd fb4b 	bl	8003c7c <HAL_DMA_Abort>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f0:	f043 0208 	orr.w	r2, r3, #8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a8a      	ldr	r2, [pc, #552]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d101      	bne.n	800660a <HAL_I2S_DMAStop+0x10e>
 8006606:	4b8a      	ldr	r3, [pc, #552]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 8006608:	e001      	b.n	800660e <HAL_I2S_DMAStop+0x112>
 800660a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4985      	ldr	r1, [pc, #532]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006616:	428b      	cmp	r3, r1
 8006618:	d101      	bne.n	800661e <HAL_I2S_DMAStop+0x122>
 800661a:	4b85      	ldr	r3, [pc, #532]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 800661c:	e001      	b.n	8006622 <HAL_I2S_DMAStop+0x126>
 800661e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006626:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a7e      	ldr	r2, [pc, #504]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_I2S_DMAStop+0x13e>
 8006636:	4b7e      	ldr	r3, [pc, #504]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 8006638:	e001      	b.n	800663e <HAL_I2S_DMAStop+0x142>
 800663a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a79      	ldr	r2, [pc, #484]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d101      	bne.n	8006650 <HAL_I2S_DMAStop+0x154>
 800664c:	4b78      	ldr	r3, [pc, #480]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 800664e:	e001      	b.n	8006654 <HAL_I2S_DMAStop+0x158>
 8006650:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a73      	ldr	r2, [pc, #460]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d101      	bne.n	8006668 <HAL_I2S_DMAStop+0x16c>
 8006664:	4b72      	ldr	r3, [pc, #456]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 8006666:	e001      	b.n	800666c <HAL_I2S_DMAStop+0x170>
 8006668:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	496e      	ldr	r1, [pc, #440]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006674:	428b      	cmp	r3, r1
 8006676:	d101      	bne.n	800667c <HAL_I2S_DMAStop+0x180>
 8006678:	4b6d      	ldr	r3, [pc, #436]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 800667a:	e001      	b.n	8006680 <HAL_I2S_DMAStop+0x184>
 800667c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066a6:	e0fa      	b.n	800689e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5f      	ldr	r2, [pc, #380]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_I2S_DMAStop+0x1ba>
 80066b2:	4b5f      	ldr	r3, [pc, #380]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 80066b4:	e001      	b.n	80066ba <HAL_I2S_DMAStop+0x1be>
 80066b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066ba:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066bc:	e0ef      	b.n	800689e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c6:	d005      	beq.n	80066d4 <HAL_I2S_DMAStop+0x1d8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d0:	f040 80e5 	bne.w	800689e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00f      	beq.n	80066fc <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fd facb 	bl	8003c7c <HAL_DMA_Abort>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f0:	f043 0208 	orr.w	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b05      	cmp	r3, #5
 8006706:	f040 809a 	bne.w	800683e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00f      	beq.n	8006732 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	4618      	mov	r0, r3
 8006718:	f7fd fab0 	bl	8003c7c <HAL_DMA_Abort>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	f043 0208 	orr.w	r2, r3, #8
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006732:	f7fd f85b 	bl	80037ec <HAL_GetTick>
 8006736:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006738:	e012      	b.n	8006760 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800673a:	f7fd f857 	bl	80037ec <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b64      	cmp	r3, #100	@ 0x64
 8006746:	d90b      	bls.n	8006760 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674c:	f043 0201 	orr.w	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a31      	ldr	r2, [pc, #196]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_I2S_DMAStop+0x272>
 800676a:	4b31      	ldr	r3, [pc, #196]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 800676c:	e001      	b.n	8006772 <HAL_I2S_DMAStop+0x276>
 800676e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d1de      	bne.n	800673a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800677c:	e012      	b.n	80067a4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800677e:	f7fd f835 	bl	80037ec <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b64      	cmp	r3, #100	@ 0x64
 800678a:	d90b      	bls.n	80067a4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	f043 0201 	orr.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a20      	ldr	r2, [pc, #128]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d101      	bne.n	80067b2 <HAL_I2S_DMAStop+0x2b6>
 80067ae:	4b20      	ldr	r3, [pc, #128]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 80067b0:	e001      	b.n	80067b6 <HAL_I2S_DMAStop+0x2ba>
 80067b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067bc:	2b80      	cmp	r3, #128	@ 0x80
 80067be:	d0de      	beq.n	800677e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a19      	ldr	r2, [pc, #100]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d101      	bne.n	80067ce <HAL_I2S_DMAStop+0x2d2>
 80067ca:	4b19      	ldr	r3, [pc, #100]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 80067cc:	e001      	b.n	80067d2 <HAL_I2S_DMAStop+0x2d6>
 80067ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4914      	ldr	r1, [pc, #80]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 80067da:	428b      	cmp	r3, r1
 80067dc:	d101      	bne.n	80067e2 <HAL_I2S_DMAStop+0x2e6>
 80067de:	4b14      	ldr	r3, [pc, #80]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 80067e0:	e001      	b.n	80067e6 <HAL_I2S_DMAStop+0x2ea>
 80067e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ea:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a0d      	ldr	r2, [pc, #52]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d101      	bne.n	80067fe <HAL_I2S_DMAStop+0x302>
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 80067fc:	e001      	b.n	8006802 <HAL_I2S_DMAStop+0x306>
 80067fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a07      	ldr	r2, [pc, #28]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <HAL_I2S_DMAStop+0x31a>
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 8006814:	e001      	b.n	800681a <HAL_I2S_DMAStop+0x31e>
 8006816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4902      	ldr	r1, [pc, #8]	@ (800682c <HAL_I2S_DMAStop+0x330>)
 8006822:	428b      	cmp	r3, r1
 8006824:	d106      	bne.n	8006834 <HAL_I2S_DMAStop+0x338>
 8006826:	4b02      	ldr	r3, [pc, #8]	@ (8006830 <HAL_I2S_DMAStop+0x334>)
 8006828:	e006      	b.n	8006838 <HAL_I2S_DMAStop+0x33c>
 800682a:	bf00      	nop
 800682c:	40003800 	.word	0x40003800
 8006830:	40003400 	.word	0x40003400
 8006834:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006838:	f022 0202 	bic.w	r2, r2, #2
 800683c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800684c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687c:	d10c      	bne.n	8006898 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e002      	b.n	800689e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80068a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fe:	b2db      	uxtb	r3, r3
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_I2S_GetError>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval I2S Error Code
  */
uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  return hi2s->ErrorCode;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10e      	bne.n	8006958 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7fa fe77 	bl	800164c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7fa feb9 	bl	80016ec <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0203 	bic.w	r2, r2, #3
 800699e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b8:	f043 0208 	orr.w	r2, r3, #8
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff ff8b 	bl	80068dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069da:	881a      	ldrh	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	1c9a      	adds	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10e      	bne.n	8006a22 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ff53 	bl	80068c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	b292      	uxth	r2, r2
 8006a3e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	1c9a      	adds	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10e      	bne.n	8006a80 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa fde6 	bl	800164c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d13a      	bne.n	8006b1a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d109      	bne.n	8006ac2 <I2S_IRQHandler+0x3a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b40      	cmp	r3, #64	@ 0x40
 8006aba:	d102      	bne.n	8006ac2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ffb4 	bl	8006a2a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	d126      	bne.n	8006b1a <I2S_IRQHandler+0x92>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d11f      	bne.n	8006b1a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ae8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0c:	f043 0202 	orr.w	r2, r3, #2
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff fee1 	bl	80068dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d136      	bne.n	8006b94 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d109      	bne.n	8006b44 <I2S_IRQHandler+0xbc>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3a:	2b80      	cmp	r3, #128	@ 0x80
 8006b3c:	d102      	bne.n	8006b44 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff45 	bl	80069ce <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d122      	bne.n	8006b94 <I2S_IRQHandler+0x10c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d11b      	bne.n	8006b94 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b6a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b86:	f043 0204 	orr.w	r2, r3, #4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fea4 	bl	80068dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bac:	f7fc fe1e 	bl	80037ec <HAL_GetTick>
 8006bb0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006bb2:	e018      	b.n	8006be6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d014      	beq.n	8006be6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006bbc:	f7fc fe16 	bl	80037ec <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d902      	bls.n	8006bd2 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e00f      	b.n	8006c06 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1d7      	bne.n	8006bb4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a92      	ldr	r2, [pc, #584]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d101      	bne.n	8006c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006c2a:	4b92      	ldr	r3, [pc, #584]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c2c:	e001      	b.n	8006c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a8b      	ldr	r2, [pc, #556]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d101      	bne.n	8006c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c48:	4b8a      	ldr	r3, [pc, #552]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c4a:	e001      	b.n	8006c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c5c:	d004      	beq.n	8006c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 8099 	bne.w	8006d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d107      	bne.n	8006c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f925 	bl	8006ecc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d107      	bne.n	8006c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9c8 	bl	800702c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca2:	2b40      	cmp	r3, #64	@ 0x40
 8006ca4:	d13a      	bne.n	8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d035      	beq.n	8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006cba:	4b6e      	ldr	r3, [pc, #440]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cbc:	e001      	b.n	8006cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006cbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4969      	ldr	r1, [pc, #420]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cca:	428b      	cmp	r3, r1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006cce:	4b69      	ldr	r3, [pc, #420]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cd0:	e001      	b.n	8006cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006cd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006cda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006cea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0e:	f043 0202 	orr.w	r2, r3, #2
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fde0 	bl	80068dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	f040 80c3 	bne.w	8006eae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80bd 	beq.w	8006eae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a49      	ldr	r2, [pc, #292]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d4e:	4b49      	ldr	r3, [pc, #292]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d50:	e001      	b.n	8006d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4944      	ldr	r1, [pc, #272]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d5e:	428b      	cmp	r3, r1
 8006d60:	d101      	bne.n	8006d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d62:	4b44      	ldr	r3, [pc, #272]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d64:	e001      	b.n	8006d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d70:	2300      	movs	r3, #0
 8006d72:	60bb      	str	r3, [r7, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8a:	f043 0204 	orr.w	r2, r3, #4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fda2 	bl	80068dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d98:	e089      	b.n	8006eae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d107      	bne.n	8006db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f8be 	bl	8006f30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d107      	bne.n	8006dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8fd 	bl	8006fc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d12f      	bne.n	8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d02a      	beq.n	8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006df0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d101      	bne.n	8006e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dfe:	e001      	b.n	8006e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006e00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4919      	ldr	r1, [pc, #100]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	d101      	bne.n	8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006e10:	4b18      	ldr	r3, [pc, #96]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e12:	e001      	b.n	8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006e14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2a:	f043 0202 	orr.w	r2, r3, #2
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fd52 	bl	80068dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d136      	bne.n	8006eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d031      	beq.n	8006eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a07      	ldr	r2, [pc, #28]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d101      	bne.n	8006e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e56:	4b07      	ldr	r3, [pc, #28]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e58:	e001      	b.n	8006e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4902      	ldr	r1, [pc, #8]	@ (8006e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e66:	428b      	cmp	r3, r1
 8006e68:	d106      	bne.n	8006e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e6a:	4b02      	ldr	r3, [pc, #8]	@ (8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e6c:	e006      	b.n	8006e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e6e:	bf00      	nop
 8006e70:	40003800 	.word	0x40003800
 8006e74:	40003400 	.word	0x40003400
 8006e78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fd18 	bl	80068dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eac:	e000      	b.n	8006eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006eae:	bf00      	nop
}
 8006eb0:	bf00      	nop
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	1c99      	adds	r1, r3, #2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6251      	str	r1, [r2, #36]	@ 0x24
 8006ede:	881a      	ldrh	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d113      	bne.n	8006f26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff ffc9 	bl	8006eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	1c99      	adds	r1, r3, #2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f42:	8819      	ldrh	r1, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d101      	bne.n	8006f52 <I2SEx_TxISR_I2SExt+0x22>
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8006f50:	e001      	b.n	8006f56 <I2SEx_TxISR_I2SExt+0x26>
 8006f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f56:	460a      	mov	r2, r1
 8006f58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d121      	bne.n	8006fb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a12      	ldr	r2, [pc, #72]	@ (8006fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d101      	bne.n	8006f80 <I2SEx_TxISR_I2SExt+0x50>
 8006f7c:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8006f7e:	e001      	b.n	8006f84 <I2SEx_TxISR_I2SExt+0x54>
 8006f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	490d      	ldr	r1, [pc, #52]	@ (8006fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	d101      	bne.n	8006f94 <I2SEx_TxISR_I2SExt+0x64>
 8006f90:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8006f92:	e001      	b.n	8006f98 <I2SEx_TxISR_I2SExt+0x68>
 8006f94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff ff81 	bl	8006eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40003800 	.word	0x40003800
 8006fc4:	40003400 	.word	0x40003400

08006fc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68d8      	ldr	r0, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	1c99      	adds	r1, r3, #2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006fe0:	b282      	uxth	r2, r0
 8006fe2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d113      	bne.n	8007024 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800700a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ff4a 	bl	8006eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a20      	ldr	r2, [pc, #128]	@ (80070bc <I2SEx_RxISR_I2SExt+0x90>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <I2SEx_RxISR_I2SExt+0x16>
 800703e:	4b20      	ldr	r3, [pc, #128]	@ (80070c0 <I2SEx_RxISR_I2SExt+0x94>)
 8007040:	e001      	b.n	8007046 <I2SEx_RxISR_I2SExt+0x1a>
 8007042:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007046:	68d8      	ldr	r0, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	1c99      	adds	r1, r3, #2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007052:	b282      	uxth	r2, r0
 8007054:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d121      	bne.n	80070b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a12      	ldr	r2, [pc, #72]	@ (80070bc <I2SEx_RxISR_I2SExt+0x90>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d101      	bne.n	800707c <I2SEx_RxISR_I2SExt+0x50>
 8007078:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <I2SEx_RxISR_I2SExt+0x94>)
 800707a:	e001      	b.n	8007080 <I2SEx_RxISR_I2SExt+0x54>
 800707c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	490d      	ldr	r1, [pc, #52]	@ (80070bc <I2SEx_RxISR_I2SExt+0x90>)
 8007088:	428b      	cmp	r3, r1
 800708a:	d101      	bne.n	8007090 <I2SEx_RxISR_I2SExt+0x64>
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <I2SEx_RxISR_I2SExt+0x94>)
 800708e:	e001      	b.n	8007094 <I2SEx_RxISR_I2SExt+0x68>
 8007090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007094:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007098:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff03 	bl	8006eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	40003800 	.word	0x40003800
 80070c0:	40003400 	.word	0x40003400

080070c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e267      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d075      	beq.n	80071ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070e2:	4b88      	ldr	r3, [pc, #544]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 030c 	and.w	r3, r3, #12
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d00c      	beq.n	8007108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ee:	4b85      	ldr	r3, [pc, #532]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070f6:	2b08      	cmp	r3, #8
 80070f8:	d112      	bne.n	8007120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070fa:	4b82      	ldr	r3, [pc, #520]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007106:	d10b      	bne.n	8007120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007108:	4b7e      	ldr	r3, [pc, #504]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d05b      	beq.n	80071cc <HAL_RCC_OscConfig+0x108>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d157      	bne.n	80071cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e242      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007128:	d106      	bne.n	8007138 <HAL_RCC_OscConfig+0x74>
 800712a:	4b76      	ldr	r3, [pc, #472]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a75      	ldr	r2, [pc, #468]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e01d      	b.n	8007174 <HAL_RCC_OscConfig+0xb0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007140:	d10c      	bne.n	800715c <HAL_RCC_OscConfig+0x98>
 8007142:	4b70      	ldr	r3, [pc, #448]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a6f      	ldr	r2, [pc, #444]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	4b6d      	ldr	r3, [pc, #436]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a6c      	ldr	r2, [pc, #432]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e00b      	b.n	8007174 <HAL_RCC_OscConfig+0xb0>
 800715c:	4b69      	ldr	r3, [pc, #420]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a68      	ldr	r2, [pc, #416]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4b66      	ldr	r3, [pc, #408]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a65      	ldr	r2, [pc, #404]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 800716e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d013      	beq.n	80071a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717c:	f7fc fb36 	bl	80037ec <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007184:	f7fc fb32 	bl	80037ec <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b64      	cmp	r3, #100	@ 0x64
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e207      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	4b5b      	ldr	r3, [pc, #364]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HAL_RCC_OscConfig+0xc0>
 80071a2:	e014      	b.n	80071ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a4:	f7fc fb22 	bl	80037ec <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071ac:	f7fc fb1e 	bl	80037ec <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b64      	cmp	r3, #100	@ 0x64
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e1f3      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071be:	4b51      	ldr	r3, [pc, #324]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1f0      	bne.n	80071ac <HAL_RCC_OscConfig+0xe8>
 80071ca:	e000      	b.n	80071ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d063      	beq.n	80072a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071da:	4b4a      	ldr	r3, [pc, #296]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071e6:	4b47      	ldr	r3, [pc, #284]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d11c      	bne.n	800722c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071f2:	4b44      	ldr	r3, [pc, #272]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d116      	bne.n	800722c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fe:	4b41      	ldr	r3, [pc, #260]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_RCC_OscConfig+0x152>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d001      	beq.n	8007216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e1c7      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007216:	4b3b      	ldr	r3, [pc, #236]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	4937      	ldr	r1, [pc, #220]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007226:	4313      	orrs	r3, r2
 8007228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800722a:	e03a      	b.n	80072a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d020      	beq.n	8007276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007234:	4b34      	ldr	r3, [pc, #208]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007236:	2201      	movs	r2, #1
 8007238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723a:	f7fc fad7 	bl	80037ec <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007242:	f7fc fad3 	bl	80037ec <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e1a8      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007254:	4b2b      	ldr	r3, [pc, #172]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007260:	4b28      	ldr	r3, [pc, #160]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4925      	ldr	r1, [pc, #148]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007270:	4313      	orrs	r3, r2
 8007272:	600b      	str	r3, [r1, #0]
 8007274:	e015      	b.n	80072a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007276:	4b24      	ldr	r3, [pc, #144]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727c:	f7fc fab6 	bl	80037ec <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007284:	f7fc fab2 	bl	80037ec <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e187      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007296:	4b1b      	ldr	r3, [pc, #108]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f0      	bne.n	8007284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d036      	beq.n	800731c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d016      	beq.n	80072e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b6:	4b15      	ldr	r3, [pc, #84]	@ (800730c <HAL_RCC_OscConfig+0x248>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072bc:	f7fc fa96 	bl	80037ec <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c4:	f7fc fa92 	bl	80037ec <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e167      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <HAL_RCC_OscConfig+0x240>)
 80072d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <HAL_RCC_OscConfig+0x200>
 80072e2:	e01b      	b.n	800731c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072e4:	4b09      	ldr	r3, [pc, #36]	@ (800730c <HAL_RCC_OscConfig+0x248>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ea:	f7fc fa7f 	bl	80037ec <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f0:	e00e      	b.n	8007310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072f2:	f7fc fa7b 	bl	80037ec <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d907      	bls.n	8007310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e150      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
 8007304:	40023800 	.word	0x40023800
 8007308:	42470000 	.word	0x42470000
 800730c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007310:	4b88      	ldr	r3, [pc, #544]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1ea      	bne.n	80072f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 8097 	beq.w	8007458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800732e:	4b81      	ldr	r3, [pc, #516]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10f      	bne.n	800735a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800733a:	2300      	movs	r3, #0
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	4b7d      	ldr	r3, [pc, #500]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	4a7c      	ldr	r2, [pc, #496]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007348:	6413      	str	r3, [r2, #64]	@ 0x40
 800734a:	4b7a      	ldr	r3, [pc, #488]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007352:	60bb      	str	r3, [r7, #8]
 8007354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007356:	2301      	movs	r3, #1
 8007358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735a:	4b77      	ldr	r3, [pc, #476]	@ (8007538 <HAL_RCC_OscConfig+0x474>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d118      	bne.n	8007398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007366:	4b74      	ldr	r3, [pc, #464]	@ (8007538 <HAL_RCC_OscConfig+0x474>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a73      	ldr	r2, [pc, #460]	@ (8007538 <HAL_RCC_OscConfig+0x474>)
 800736c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007372:	f7fc fa3b 	bl	80037ec <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800737a:	f7fc fa37 	bl	80037ec <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e10c      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800738c:	4b6a      	ldr	r3, [pc, #424]	@ (8007538 <HAL_RCC_OscConfig+0x474>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0f0      	beq.n	800737a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d106      	bne.n	80073ae <HAL_RCC_OscConfig+0x2ea>
 80073a0:	4b64      	ldr	r3, [pc, #400]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a4:	4a63      	ldr	r2, [pc, #396]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ac:	e01c      	b.n	80073e8 <HAL_RCC_OscConfig+0x324>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b05      	cmp	r3, #5
 80073b4:	d10c      	bne.n	80073d0 <HAL_RCC_OscConfig+0x30c>
 80073b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ba:	4a5e      	ldr	r2, [pc, #376]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073bc:	f043 0304 	orr.w	r3, r3, #4
 80073c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c2:	4b5c      	ldr	r3, [pc, #368]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c6:	4a5b      	ldr	r2, [pc, #364]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073c8:	f043 0301 	orr.w	r3, r3, #1
 80073cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ce:	e00b      	b.n	80073e8 <HAL_RCC_OscConfig+0x324>
 80073d0:	4b58      	ldr	r3, [pc, #352]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d4:	4a57      	ldr	r2, [pc, #348]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	6713      	str	r3, [r2, #112]	@ 0x70
 80073dc:	4b55      	ldr	r3, [pc, #340]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e0:	4a54      	ldr	r2, [pc, #336]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80073e2:	f023 0304 	bic.w	r3, r3, #4
 80073e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d015      	beq.n	800741c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f0:	f7fc f9fc 	bl	80037ec <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f6:	e00a      	b.n	800740e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f8:	f7fc f9f8 	bl	80037ec <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e0cb      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740e:	4b49      	ldr	r3, [pc, #292]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0ee      	beq.n	80073f8 <HAL_RCC_OscConfig+0x334>
 800741a:	e014      	b.n	8007446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741c:	f7fc f9e6 	bl	80037ec <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007422:	e00a      	b.n	800743a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007424:	f7fc f9e2 	bl	80037ec <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e0b5      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800743a:	4b3e      	ldr	r3, [pc, #248]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1ee      	bne.n	8007424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d105      	bne.n	8007458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744c:	4b39      	ldr	r3, [pc, #228]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 800744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007450:	4a38      	ldr	r2, [pc, #224]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80a1 	beq.w	80075a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007462:	4b34      	ldr	r3, [pc, #208]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b08      	cmp	r3, #8
 800746c:	d05c      	beq.n	8007528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d141      	bne.n	80074fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007476:	4b31      	ldr	r3, [pc, #196]	@ (800753c <HAL_RCC_OscConfig+0x478>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747c:	f7fc f9b6 	bl	80037ec <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007484:	f7fc f9b2 	bl	80037ec <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e087      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007496:	4b27      	ldr	r3, [pc, #156]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	019b      	lsls	r3, r3, #6
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	3b01      	subs	r3, #1
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	491b      	ldr	r1, [pc, #108]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074cc:	4b1b      	ldr	r3, [pc, #108]	@ (800753c <HAL_RCC_OscConfig+0x478>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d2:	f7fc f98b 	bl	80037ec <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d8:	e008      	b.n	80074ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074da:	f7fc f987 	bl	80037ec <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e05c      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ec:	4b11      	ldr	r3, [pc, #68]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <HAL_RCC_OscConfig+0x416>
 80074f8:	e054      	b.n	80075a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fa:	4b10      	ldr	r3, [pc, #64]	@ (800753c <HAL_RCC_OscConfig+0x478>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007500:	f7fc f974 	bl	80037ec <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007508:	f7fc f970 	bl	80037ec <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e045      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751a:	4b06      	ldr	r3, [pc, #24]	@ (8007534 <HAL_RCC_OscConfig+0x470>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1f0      	bne.n	8007508 <HAL_RCC_OscConfig+0x444>
 8007526:	e03d      	b.n	80075a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d107      	bne.n	8007540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e038      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
 8007534:	40023800 	.word	0x40023800
 8007538:	40007000 	.word	0x40007000
 800753c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007540:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <HAL_RCC_OscConfig+0x4ec>)
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d028      	beq.n	80075a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007558:	429a      	cmp	r2, r3
 800755a:	d121      	bne.n	80075a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007566:	429a      	cmp	r2, r3
 8007568:	d11a      	bne.n	80075a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007578:	4293      	cmp	r3, r2
 800757a:	d111      	bne.n	80075a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	3b01      	subs	r3, #1
 800758a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800758c:	429a      	cmp	r2, r3
 800758e:	d107      	bne.n	80075a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800759c:	429a      	cmp	r2, r3
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800

080075b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0cc      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075c8:	4b68      	ldr	r3, [pc, #416]	@ (800776c <HAL_RCC_ClockConfig+0x1b8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d90c      	bls.n	80075f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d6:	4b65      	ldr	r3, [pc, #404]	@ (800776c <HAL_RCC_ClockConfig+0x1b8>)
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075de:	4b63      	ldr	r3, [pc, #396]	@ (800776c <HAL_RCC_ClockConfig+0x1b8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d001      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0b8      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d020      	beq.n	800763e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007608:	4b59      	ldr	r3, [pc, #356]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a58      	ldr	r2, [pc, #352]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007620:	4b53      	ldr	r3, [pc, #332]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	4a52      	ldr	r2, [pc, #328]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800762a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800762c:	4b50      	ldr	r3, [pc, #320]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	494d      	ldr	r1, [pc, #308]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d044      	beq.n	80076d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d107      	bne.n	8007662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007652:	4b47      	ldr	r3, [pc, #284]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d119      	bne.n	8007692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e07f      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d003      	beq.n	8007672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800766e:	2b03      	cmp	r3, #3
 8007670:	d107      	bne.n	8007682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007672:	4b3f      	ldr	r3, [pc, #252]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e06f      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007682:	4b3b      	ldr	r3, [pc, #236]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e067      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007692:	4b37      	ldr	r3, [pc, #220]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f023 0203 	bic.w	r2, r3, #3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	4934      	ldr	r1, [pc, #208]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076a4:	f7fc f8a2 	bl	80037ec <HAL_GetTick>
 80076a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076aa:	e00a      	b.n	80076c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ac:	f7fc f89e 	bl	80037ec <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e04f      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 020c 	and.w	r2, r3, #12
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d1eb      	bne.n	80076ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076d4:	4b25      	ldr	r3, [pc, #148]	@ (800776c <HAL_RCC_ClockConfig+0x1b8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d20c      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e2:	4b22      	ldr	r3, [pc, #136]	@ (800776c <HAL_RCC_ClockConfig+0x1b8>)
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ea:	4b20      	ldr	r3, [pc, #128]	@ (800776c <HAL_RCC_ClockConfig+0x1b8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e032      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007708:	4b19      	ldr	r3, [pc, #100]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4916      	ldr	r1, [pc, #88]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007726:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	490e      	ldr	r1, [pc, #56]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800773a:	f000 f821 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 800773e:	4602      	mov	r2, r0
 8007740:	4b0b      	ldr	r3, [pc, #44]	@ (8007770 <HAL_RCC_ClockConfig+0x1bc>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	091b      	lsrs	r3, r3, #4
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	490a      	ldr	r1, [pc, #40]	@ (8007774 <HAL_RCC_ClockConfig+0x1c0>)
 800774c:	5ccb      	ldrb	r3, [r1, r3]
 800774e:	fa22 f303 	lsr.w	r3, r2, r3
 8007752:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <HAL_RCC_ClockConfig+0x1c4>)
 8007754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007756:	4b09      	ldr	r3, [pc, #36]	@ (800777c <HAL_RCC_ClockConfig+0x1c8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f7fc f802 	bl	8003764 <HAL_InitTick>

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40023c00 	.word	0x40023c00
 8007770:	40023800 	.word	0x40023800
 8007774:	08010374 	.word	0x08010374
 8007778:	20000020 	.word	0x20000020
 800777c:	20000024 	.word	0x20000024

08007780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007784:	b094      	sub	sp, #80	@ 0x50
 8007786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	647b      	str	r3, [r7, #68]	@ 0x44
 800778c:	2300      	movs	r3, #0
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007790:	2300      	movs	r3, #0
 8007792:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007798:	4b79      	ldr	r3, [pc, #484]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x200>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 030c 	and.w	r3, r3, #12
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d00d      	beq.n	80077c0 <HAL_RCC_GetSysClockFreq+0x40>
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	f200 80e1 	bhi.w	800796c <HAL_RCC_GetSysClockFreq+0x1ec>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_RCC_GetSysClockFreq+0x34>
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d003      	beq.n	80077ba <HAL_RCC_GetSysClockFreq+0x3a>
 80077b2:	e0db      	b.n	800796c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077b4:	4b73      	ldr	r3, [pc, #460]	@ (8007984 <HAL_RCC_GetSysClockFreq+0x204>)
 80077b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80077b8:	e0db      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077ba:	4b73      	ldr	r3, [pc, #460]	@ (8007988 <HAL_RCC_GetSysClockFreq+0x208>)
 80077bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077be:	e0d8      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x200>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x200>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d063      	beq.n	800789e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x200>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	099b      	lsrs	r3, r3, #6
 80077dc:	2200      	movs	r2, #0
 80077de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ea:	2300      	movs	r3, #0
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	f04f 0000 	mov.w	r0, #0
 80077fa:	f04f 0100 	mov.w	r1, #0
 80077fe:	0159      	lsls	r1, r3, #5
 8007800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007804:	0150      	lsls	r0, r2, #5
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4621      	mov	r1, r4
 800780c:	1a51      	subs	r1, r2, r1
 800780e:	6139      	str	r1, [r7, #16]
 8007810:	4629      	mov	r1, r5
 8007812:	eb63 0301 	sbc.w	r3, r3, r1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007824:	4659      	mov	r1, fp
 8007826:	018b      	lsls	r3, r1, #6
 8007828:	4651      	mov	r1, sl
 800782a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800782e:	4651      	mov	r1, sl
 8007830:	018a      	lsls	r2, r1, #6
 8007832:	4651      	mov	r1, sl
 8007834:	ebb2 0801 	subs.w	r8, r2, r1
 8007838:	4659      	mov	r1, fp
 800783a:	eb63 0901 	sbc.w	r9, r3, r1
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800784a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800784e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007852:	4690      	mov	r8, r2
 8007854:	4699      	mov	r9, r3
 8007856:	4623      	mov	r3, r4
 8007858:	eb18 0303 	adds.w	r3, r8, r3
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	462b      	mov	r3, r5
 8007860:	eb49 0303 	adc.w	r3, r9, r3
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007872:	4629      	mov	r1, r5
 8007874:	024b      	lsls	r3, r1, #9
 8007876:	4621      	mov	r1, r4
 8007878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800787c:	4621      	mov	r1, r4
 800787e:	024a      	lsls	r2, r1, #9
 8007880:	4610      	mov	r0, r2
 8007882:	4619      	mov	r1, r3
 8007884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007886:	2200      	movs	r2, #0
 8007888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800788a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800788c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007890:	f7f8 fcf6 	bl	8000280 <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4613      	mov	r3, r2
 800789a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800789c:	e058      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800789e:	4b38      	ldr	r3, [pc, #224]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x200>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	099b      	lsrs	r3, r3, #6
 80078a4:	2200      	movs	r2, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	4611      	mov	r1, r2
 80078aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078ae:	623b      	str	r3, [r7, #32]
 80078b0:	2300      	movs	r3, #0
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078b8:	4642      	mov	r2, r8
 80078ba:	464b      	mov	r3, r9
 80078bc:	f04f 0000 	mov.w	r0, #0
 80078c0:	f04f 0100 	mov.w	r1, #0
 80078c4:	0159      	lsls	r1, r3, #5
 80078c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078ca:	0150      	lsls	r0, r2, #5
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4641      	mov	r1, r8
 80078d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80078d6:	4649      	mov	r1, r9
 80078d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078f0:	ebb2 040a 	subs.w	r4, r2, sl
 80078f4:	eb63 050b 	sbc.w	r5, r3, fp
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	00eb      	lsls	r3, r5, #3
 8007902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007906:	00e2      	lsls	r2, r4, #3
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	4643      	mov	r3, r8
 800790e:	18e3      	adds	r3, r4, r3
 8007910:	603b      	str	r3, [r7, #0]
 8007912:	464b      	mov	r3, r9
 8007914:	eb45 0303 	adc.w	r3, r5, r3
 8007918:	607b      	str	r3, [r7, #4]
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007926:	4629      	mov	r1, r5
 8007928:	028b      	lsls	r3, r1, #10
 800792a:	4621      	mov	r1, r4
 800792c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007930:	4621      	mov	r1, r4
 8007932:	028a      	lsls	r2, r1, #10
 8007934:	4610      	mov	r0, r2
 8007936:	4619      	mov	r1, r3
 8007938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800793a:	2200      	movs	r2, #0
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	61fa      	str	r2, [r7, #28]
 8007940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007944:	f7f8 fc9c 	bl	8000280 <__aeabi_uldivmod>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4613      	mov	r3, r2
 800794e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007950:	4b0b      	ldr	r3, [pc, #44]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x200>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	3301      	adds	r3, #1
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800796a:	e002      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <HAL_RCC_GetSysClockFreq+0x204>)
 800796e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007974:	4618      	mov	r0, r3
 8007976:	3750      	adds	r7, #80	@ 0x50
 8007978:	46bd      	mov	sp, r7
 800797a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800797e:	bf00      	nop
 8007980:	40023800 	.word	0x40023800
 8007984:	00f42400 	.word	0x00f42400
 8007988:	007a1200 	.word	0x007a1200

0800798c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007990:	4b03      	ldr	r3, [pc, #12]	@ (80079a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007992:	681b      	ldr	r3, [r3, #0]
}
 8007994:	4618      	mov	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000020 	.word	0x20000020

080079a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079a8:	f7ff fff0 	bl	800798c <HAL_RCC_GetHCLKFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	0a9b      	lsrs	r3, r3, #10
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4903      	ldr	r1, [pc, #12]	@ (80079c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40023800 	.word	0x40023800
 80079c8:	08010384 	.word	0x08010384

080079cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079d0:	f7ff ffdc 	bl	800798c <HAL_RCC_GetHCLKFreq>
 80079d4:	4602      	mov	r2, r0
 80079d6:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	0b5b      	lsrs	r3, r3, #13
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	4903      	ldr	r1, [pc, #12]	@ (80079f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079e2:	5ccb      	ldrb	r3, [r1, r3]
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40023800 	.word	0x40023800
 80079f0:	08010384 	.word	0x08010384

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d035      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a1c:	4b62      	ldr	r3, [pc, #392]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a22:	f7fb fee3 	bl	80037ec <HAL_GetTick>
 8007a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a28:	e008      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a2a:	f7fb fedf 	bl	80037ec <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e0b0      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f0      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	019a      	lsls	r2, r3, #6
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	071b      	lsls	r3, r3, #28
 8007a54:	4955      	ldr	r1, [pc, #340]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a5c:	4b52      	ldr	r3, [pc, #328]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a62:	f7fb fec3 	bl	80037ec <HAL_GetTick>
 8007a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a6a:	f7fb febf 	bl	80037ec <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e090      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0f0      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8083 	beq.w	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b44      	ldr	r3, [pc, #272]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	4a43      	ldr	r2, [pc, #268]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007aa6:	4b41      	ldr	r3, [pc, #260]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007abc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007abe:	f7fb fe95 	bl	80037ec <HAL_GetTick>
 8007ac2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ac6:	f7fb fe91 	bl	80037ec <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e062      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ad8:	4b35      	ldr	r3, [pc, #212]	@ (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ae4:	4b31      	ldr	r3, [pc, #196]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d02f      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d028      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b02:	4b2a      	ldr	r3, [pc, #168]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b0c:	4b29      	ldr	r3, [pc, #164]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b12:	4b28      	ldr	r3, [pc, #160]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b18:	4a24      	ldr	r2, [pc, #144]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b1e:	4b23      	ldr	r3, [pc, #140]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d114      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b2a:	f7fb fe5f 	bl	80037ec <HAL_GetTick>
 8007b2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7fb fe5b 	bl	80037ec <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e02a      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b48:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0ee      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b60:	d10d      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b62:	4b12      	ldr	r3, [pc, #72]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b76:	490d      	ldr	r1, [pc, #52]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	608b      	str	r3, [r1, #8]
 8007b7c:	e005      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	4a0a      	ldr	r2, [pc, #40]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b84:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b88:	6093      	str	r3, [r2, #8]
 8007b8a:	4b08      	ldr	r3, [pc, #32]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b96:	4905      	ldr	r1, [pc, #20]	@ (8007bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	42470068 	.word	0x42470068
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	40007000 	.word	0x40007000
 8007bb4:	42470e40 	.word	0x42470e40

08007bb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d13e      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007bd6:	4b23      	ldr	r3, [pc, #140]	@ (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d12f      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bec:	4b1e      	ldr	r3, [pc, #120]	@ (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bee:	617b      	str	r3, [r7, #20]
          break;
 8007bf0:	e02f      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bfe:	d108      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c00:	4b18      	ldr	r3, [pc, #96]	@ (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c08:	4a18      	ldr	r2, [pc, #96]	@ (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e007      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c12:	4b14      	ldr	r3, [pc, #80]	@ (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c1a:	4a15      	ldr	r2, [pc, #84]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007c22:	4b10      	ldr	r3, [pc, #64]	@ (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c28:	099b      	lsrs	r3, r3, #6
 8007c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c3c:	0f1b      	lsrs	r3, r3, #28
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]
          break;
 8007c4a:	e002      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
          break;
 8007c50:	bf00      	nop
        }
      }
      break;
 8007c52:	bf00      	nop
    }
  }
  return frequency;
 8007c54:	697b      	ldr	r3, [r7, #20]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40023800 	.word	0x40023800
 8007c68:	00bb8000 	.word	0x00bb8000
 8007c6c:	007a1200 	.word	0x007a1200
 8007c70:	00f42400 	.word	0x00f42400

08007c74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e022      	b.n	8007ccc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7fb facf 	bl	800323c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f814 	bl	8007cd4 <HAL_SD_InitCard>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e00a      	b.n	8007ccc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007cd4:	b5b0      	push	{r4, r5, r7, lr}
 8007cd6:	b08e      	sub	sp, #56	@ 0x38
 8007cd8:	af04      	add	r7, sp, #16
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007cf0:	2376      	movs	r3, #118	@ 0x76
 8007cf2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681d      	ldr	r5, [r3, #0]
 8007cf8:	466c      	mov	r4, sp
 8007cfa:	f107 0314 	add.w	r3, r7, #20
 8007cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f001 ffb1 	bl	8009c74 <SDIO_Init>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e04f      	b.n	8007dc4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007d24:	4b29      	ldr	r3, [pc, #164]	@ (8007dcc <HAL_SD_InitCard+0xf8>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 ffe9 	bl	8009d06 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007d34:	4b25      	ldr	r3, [pc, #148]	@ (8007dcc <HAL_SD_InitCard+0xf8>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007d3a:	2002      	movs	r0, #2
 8007d3c:	f7fb fd62 	bl	8003804 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fe69 	bl	8008a18 <SD_PowerON>
 8007d46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e02e      	b.n	8007dc4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fd88 	bl	800887c <SD_InitCard>
 8007d6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e01b      	b.n	8007dc4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d94:	4618      	mov	r0, r3
 8007d96:	f002 f848 	bl	8009e2a <SDMMC_CmdBlockLength>
 8007d9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00f      	beq.n	8007dc2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a0a      	ldr	r2, [pc, #40]	@ (8007dd0 <HAL_SD_InitCard+0xfc>)
 8007da8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3728      	adds	r7, #40	@ 0x28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bdb0      	pop	{r4, r5, r7, pc}
 8007dcc:	422580a0 	.word	0x422580a0
 8007dd0:	004005ff 	.word	0x004005ff

08007dd4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b092      	sub	sp, #72	@ 0x48
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007de2:	f7fb fd03 	bl	80037ec <HAL_GetTick>
 8007de6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d107      	bne.n	8007e06 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e1bd      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	f040 81b0 	bne.w	8008174 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	441a      	add	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d907      	bls.n	8007e38 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e1a4      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2200      	movs	r2, #0
 8007e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d002      	beq.n	8007e56 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	025b      	lsls	r3, r3, #9
 8007e54:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	025b      	lsls	r3, r3, #9
 8007e60:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e62:	2390      	movs	r3, #144	@ 0x90
 8007e64:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e66:	2302      	movs	r3, #2
 8007e68:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f107 0214 	add.w	r2, r7, #20
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 ffa8 	bl	8009dd2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d90a      	bls.n	8007e9e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 f80c 	bl	8009eb2 <SDMMC_CmdReadMultiBlock>
 8007e9a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e9c:	e009      	b.n	8007eb2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 ffdf 	bl	8009e6e <SDMMC_CmdReadSingleBlock>
 8007eb0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d012      	beq.n	8007ede <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a7a      	ldr	r2, [pc, #488]	@ (80080a8 <HAL_SD_ReadBlocks+0x2d4>)
 8007ebe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e151      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007ee2:	e061      	b.n	8007fa8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d03c      	beq.n	8007f6c <HAL_SD_ReadBlocks+0x198>
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d039      	beq.n	8007f6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007efc:	e033      	b.n	8007f66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 fee1 	bl	8009cca <SDIO_ReadFIFO>
 8007f08:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f14:	3301      	adds	r3, #1
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f30:	3b01      	subs	r3, #1
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f40:	3301      	adds	r3, #1
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f46:	3b01      	subs	r3, #1
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f56:	3301      	adds	r3, #1
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f62:	3301      	adds	r3, #1
 8007f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	d9c8      	bls.n	8007efe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007f6c:	f7fb fc3e 	bl	80037ec <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d902      	bls.n	8007f82 <HAL_SD_ReadBlocks+0x1ae>
 8007f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d112      	bne.n	8007fa8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a48      	ldr	r2, [pc, #288]	@ (80080a8 <HAL_SD_ReadBlocks+0x2d4>)
 8007f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e0ec      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fae:	f240 332a 	movw	r3, #810	@ 0x32a
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d095      	beq.n	8007ee4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d022      	beq.n	800800c <HAL_SD_ReadBlocks+0x238>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d91f      	bls.n	800800c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d01b      	beq.n	800800c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 ffd1 	bl	8009f80 <SDMMC_CmdStopTransfer>
 8007fde:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d012      	beq.n	800800c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a2f      	ldr	r2, [pc, #188]	@ (80080a8 <HAL_SD_ReadBlocks+0x2d4>)
 8007fec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e0ba      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d012      	beq.n	8008040 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a22      	ldr	r2, [pc, #136]	@ (80080a8 <HAL_SD_ReadBlocks+0x2d4>)
 8008020:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	f043 0208 	orr.w	r2, r3, #8
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e0a0      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d012      	beq.n	8008074 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a15      	ldr	r2, [pc, #84]	@ (80080a8 <HAL_SD_ReadBlocks+0x2d4>)
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f043 0202 	orr.w	r2, r3, #2
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e086      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d063      	beq.n	800814a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a08      	ldr	r2, [pc, #32]	@ (80080a8 <HAL_SD_ReadBlocks+0x2d4>)
 8008088:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808e:	f043 0220 	orr.w	r2, r3, #32
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e06c      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
 80080a8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fe0a 	bl	8009cca <SDIO_ReadFIFO>
 80080b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080be:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c2:	3301      	adds	r3, #1
 80080c4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c8:	3b01      	subs	r3, #1
 80080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	0a1b      	lsrs	r3, r3, #8
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d8:	3301      	adds	r3, #1
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080de:	3b01      	subs	r3, #1
 80080e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ee:	3301      	adds	r3, #1
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80080f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fa:	0e1b      	lsrs	r3, r3, #24
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008100:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008104:	3301      	adds	r3, #1
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810a:	3b01      	subs	r3, #1
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800810e:	f7fb fb6d 	bl	80037ec <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800811a:	429a      	cmp	r2, r3
 800811c:	d902      	bls.n	8008124 <HAL_SD_ReadBlocks+0x350>
 800811e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008120:	2b00      	cmp	r3, #0
 8008122:	d112      	bne.n	800814a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a18      	ldr	r2, [pc, #96]	@ (800818c <HAL_SD_ReadBlocks+0x3b8>)
 800812a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e01b      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <HAL_SD_ReadBlocks+0x38a>
 8008158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1a6      	bne.n	80080ac <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008166:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e006      	b.n	8008182 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3748      	adds	r7, #72	@ 0x48
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	004005ff 	.word	0x004005ff

08008190 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b092      	sub	sp, #72	@ 0x48
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800819e:	f7fb fb25 	bl	80037ec <HAL_GetTick>
 80081a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d107      	bne.n	80081c2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e166      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	f040 8159 	bne.w	8008482 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	441a      	add	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d907      	bls.n	80081f4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e14d      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2203      	movs	r2, #3
 80081f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2200      	movs	r2, #0
 8008202:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008208:	2b01      	cmp	r3, #1
 800820a:	d002      	beq.n	8008212 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	025b      	lsls	r3, r3, #9
 8008210:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	025b      	lsls	r3, r3, #9
 800821c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800821e:	2390      	movs	r3, #144	@ 0x90
 8008220:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008226:	2300      	movs	r3, #0
 8008228:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800822a:	2301      	movs	r3, #1
 800822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f107 0218 	add.w	r2, r7, #24
 8008236:	4611      	mov	r1, r2
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fdca 	bl	8009dd2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d90a      	bls.n	800825a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fe72 	bl	8009f3a <SDMMC_CmdWriteMultiBlock>
 8008256:	6478      	str	r0, [r7, #68]	@ 0x44
 8008258:	e009      	b.n	800826e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2210      	movs	r2, #16
 800825e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008266:	4618      	mov	r0, r3
 8008268:	f001 fe45 	bl	8009ef6 <SDMMC_CmdWriteSingleBlock>
 800826c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800826e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008270:	2b00      	cmp	r3, #0
 8008272:	d012      	beq.n	800829a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a87      	ldr	r2, [pc, #540]	@ (8008498 <HAL_SD_WriteBlocks+0x308>)
 800827a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008282:	431a      	orrs	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e0fa      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800829e:	e065      	b.n	800836c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d040      	beq.n	8008330 <HAL_SD_WriteBlocks+0x1a0>
 80082ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d03d      	beq.n	8008330 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80082b4:	2300      	movs	r3, #0
 80082b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80082b8:	e037      	b.n	800832a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80082ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c2:	3301      	adds	r3, #1
 80082c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	3b01      	subs	r3, #1
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	021a      	lsls	r2, r3, #8
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082da:	3301      	adds	r3, #1
 80082dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e0:	3b01      	subs	r3, #1
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	041a      	lsls	r2, r3, #16
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	3301      	adds	r3, #1
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f8:	3b01      	subs	r3, #1
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80082fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	061a      	lsls	r2, r3, #24
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830a:	3301      	adds	r3, #1
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800830e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008310:	3b01      	subs	r3, #1
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f107 0214 	add.w	r2, r7, #20
 800831c:	4611      	mov	r1, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f001 fce0 	bl	8009ce4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008326:	3301      	adds	r3, #1
 8008328:	643b      	str	r3, [r7, #64]	@ 0x40
 800832a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800832c:	2b07      	cmp	r3, #7
 800832e:	d9c4      	bls.n	80082ba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008330:	f7fb fa5c 	bl	80037ec <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800833c:	429a      	cmp	r2, r3
 800833e:	d902      	bls.n	8008346 <HAL_SD_WriteBlocks+0x1b6>
 8008340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008342:	2b00      	cmp	r3, #0
 8008344:	d112      	bne.n	800836c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a53      	ldr	r2, [pc, #332]	@ (8008498 <HAL_SD_WriteBlocks+0x308>)
 800834c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008354:	431a      	orrs	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e091      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008372:	f240 331a 	movw	r3, #794	@ 0x31a
 8008376:	4013      	ands	r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d091      	beq.n	80082a0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008386:	2b00      	cmp	r3, #0
 8008388:	d022      	beq.n	80083d0 <HAL_SD_WriteBlocks+0x240>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d91f      	bls.n	80083d0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008394:	2b03      	cmp	r3, #3
 8008396:	d01b      	beq.n	80083d0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fdef 	bl	8009f80 <SDMMC_CmdStopTransfer>
 80083a2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80083a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d012      	beq.n	80083d0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a3a      	ldr	r2, [pc, #232]	@ (8008498 <HAL_SD_WriteBlocks+0x308>)
 80083b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083b8:	431a      	orrs	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e05f      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d6:	f003 0308 	and.w	r3, r3, #8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d012      	beq.n	8008404 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2d      	ldr	r2, [pc, #180]	@ (8008498 <HAL_SD_WriteBlocks+0x308>)
 80083e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	f043 0208 	orr.w	r2, r3, #8
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e045      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d012      	beq.n	8008438 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a20      	ldr	r2, [pc, #128]	@ (8008498 <HAL_SD_WriteBlocks+0x308>)
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	f043 0202 	orr.w	r2, r3, #2
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e02b      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b00      	cmp	r3, #0
 8008444:	d012      	beq.n	800846c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a13      	ldr	r2, [pc, #76]	@ (8008498 <HAL_SD_WriteBlocks+0x308>)
 800844c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008452:	f043 0210 	orr.w	r2, r3, #16
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e011      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008474:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	e006      	b.n	8008490 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008486:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
  }
}
 8008490:	4618      	mov	r0, r3
 8008492:	3748      	adds	r7, #72	@ 0x48
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	004005ff 	.word	0x004005ff

0800849c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084aa:	0f9b      	lsrs	r3, r3, #30
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b6:	0e9b      	lsrs	r3, r3, #26
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c8:	0e1b      	lsrs	r3, r3, #24
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e6:	0a1b      	lsrs	r3, r3, #8
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084fc:	0d1b      	lsrs	r3, r3, #20
 80084fe:	b29a      	uxth	r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008508:	0c1b      	lsrs	r3, r3, #16
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	b2da      	uxtb	r2, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800851a:	0bdb      	lsrs	r3, r3, #15
 800851c:	b2db      	uxtb	r3, r3
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	b2da      	uxtb	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800852c:	0b9b      	lsrs	r3, r3, #14
 800852e:	b2db      	uxtb	r3, r3
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	b2da      	uxtb	r2, r3
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800853e:	0b5b      	lsrs	r3, r3, #13
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008550:	0b1b      	lsrs	r3, r3, #12
 8008552:	b2db      	uxtb	r3, r3
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008568:	2b00      	cmp	r3, #0
 800856a:	d163      	bne.n	8008634 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008570:	009a      	lsls	r2, r3, #2
 8008572:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008576:	4013      	ands	r3, r2
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800857c:	0f92      	lsrs	r2, r2, #30
 800857e:	431a      	orrs	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008588:	0edb      	lsrs	r3, r3, #27
 800858a:	b2db      	uxtb	r3, r3
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	b2da      	uxtb	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800859a:	0e1b      	lsrs	r3, r3, #24
 800859c:	b2db      	uxtb	r3, r3
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ac:	0d5b      	lsrs	r3, r3, #21
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085be:	0c9b      	lsrs	r3, r3, #18
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d0:	0bdb      	lsrs	r3, r3, #15
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	7e1b      	ldrb	r3, [r3, #24]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	3302      	adds	r3, #2
 80085f4:	2201      	movs	r2, #1
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80085fe:	fb03 f202 	mul.w	r2, r3, r2
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	7a1b      	ldrb	r3, [r3, #8]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	2201      	movs	r2, #1
 8008612:	409a      	lsls	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008620:	0a52      	lsrs	r2, r2, #9
 8008622:	fb03 f202 	mul.w	r2, r3, r2
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008630:	661a      	str	r2, [r3, #96]	@ 0x60
 8008632:	e031      	b.n	8008698 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008638:	2b01      	cmp	r3, #1
 800863a:	d11d      	bne.n	8008678 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008640:	041b      	lsls	r3, r3, #16
 8008642:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	431a      	orrs	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	3301      	adds	r3, #1
 8008658:	029a      	lsls	r2, r3, #10
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800866c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	661a      	str	r2, [r3, #96]	@ 0x60
 8008676:	e00f      	b.n	8008698 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a58      	ldr	r2, [pc, #352]	@ (80087e0 <HAL_SD_GetCardCSD+0x344>)
 800867e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008684:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e09d      	b.n	80087d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800869c:	0b9b      	lsrs	r3, r3, #14
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ae:	09db      	lsrs	r3, r3, #7
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d0:	0fdb      	lsrs	r3, r3, #31
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086dc:	0f5b      	lsrs	r3, r3, #29
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	0e9b      	lsrs	r3, r3, #26
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008700:	0d9b      	lsrs	r3, r3, #22
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	b2da      	uxtb	r2, r3
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008712:	0d5b      	lsrs	r3, r3, #21
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	b2da      	uxtb	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	0bdb      	lsrs	r3, r3, #15
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008756:	0b9b      	lsrs	r3, r3, #14
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876a:	0b5b      	lsrs	r3, r3, #13
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877e:	0b1b      	lsrs	r3, r3, #12
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	b2da      	uxtb	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008792:	0a9b      	lsrs	r3, r3, #10
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	b2da      	uxtb	r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	004005ff 	.word	0x004005ff

080087e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f970 	bl	8008b34 <SD_SendStatus>
 8008854:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	0a5b      	lsrs	r3, r3, #9
 800886c:	f003 030f 	and.w	r3, r3, #15
 8008870:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008872:	693b      	ldr	r3, [r7, #16]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800887c:	b5b0      	push	{r4, r5, r7, lr}
 800887e:	b094      	sub	sp, #80	@ 0x50
 8008880:	af04      	add	r7, sp, #16
 8008882:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008884:	2301      	movs	r3, #1
 8008886:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f001 fa48 	bl	8009d22 <SDIO_GetPowerState>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008898:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800889c:	e0b8      	b.n	8008a10 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d02f      	beq.n	8008906 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fc2f 	bl	800a10e <SDMMC_CmdSendCID>
 80088b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <SD_InitCard+0x40>
    {
      return errorstate;
 80088b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ba:	e0a9      	b.n	8008a10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 fa72 	bl	8009dac <SDIO_GetResponse>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2104      	movs	r1, #4
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 fa69 	bl	8009dac <SDIO_GetResponse>
 80088da:	4602      	mov	r2, r0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2108      	movs	r1, #8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fa60 	bl	8009dac <SDIO_GetResponse>
 80088ec:	4602      	mov	r2, r0
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	210c      	movs	r1, #12
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fa57 	bl	8009dac <SDIO_GetResponse>
 80088fe:	4602      	mov	r2, r0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890a:	2b03      	cmp	r3, #3
 800890c:	d00d      	beq.n	800892a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f107 020e 	add.w	r2, r7, #14
 8008916:	4611      	mov	r1, r2
 8008918:	4618      	mov	r0, r3
 800891a:	f001 fc35 	bl	800a188 <SDMMC_CmdSetRelAdd>
 800891e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <SD_InitCard+0xae>
    {
      return errorstate;
 8008926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008928:	e072      	b.n	8008a10 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892e:	2b03      	cmp	r3, #3
 8008930:	d036      	beq.n	80089a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008932:	89fb      	ldrh	r3, [r7, #14]
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f001 fbff 	bl	800a14a <SDMMC_CmdSendCSD>
 800894c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800894e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008956:	e05b      	b.n	8008a10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2100      	movs	r1, #0
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fa24 	bl	8009dac <SDIO_GetResponse>
 8008964:	4602      	mov	r2, r0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2104      	movs	r1, #4
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fa1b 	bl	8009dac <SDIO_GetResponse>
 8008976:	4602      	mov	r2, r0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2108      	movs	r1, #8
 8008982:	4618      	mov	r0, r3
 8008984:	f001 fa12 	bl	8009dac <SDIO_GetResponse>
 8008988:	4602      	mov	r2, r0
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	210c      	movs	r1, #12
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fa09 	bl	8009dac <SDIO_GetResponse>
 800899a:	4602      	mov	r2, r0
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2104      	movs	r1, #4
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 fa00 	bl	8009dac <SDIO_GetResponse>
 80089ac:	4603      	mov	r3, r0
 80089ae:	0d1a      	lsrs	r2, r3, #20
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80089b4:	f107 0310 	add.w	r3, r7, #16
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fd6e 	bl	800849c <HAL_SD_GetCardCSD>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089ca:	e021      	b.n	8008a10 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	2200      	movs	r2, #0
 80089d8:	461c      	mov	r4, r3
 80089da:	4615      	mov	r5, r2
 80089dc:	4622      	mov	r2, r4
 80089de:	462b      	mov	r3, r5
 80089e0:	4608      	mov	r0, r1
 80089e2:	f001 faef 	bl	8009fc4 <SDMMC_CmdSelDesel>
 80089e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80089e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <SD_InitCard+0x176>
  {
    return errorstate;
 80089ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f0:	e00e      	b.n	8008a10 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681d      	ldr	r5, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	466c      	mov	r4, sp
 80089fa:	f103 0210 	add.w	r2, r3, #16
 80089fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a04:	3304      	adds	r3, #4
 8008a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f001 f933 	bl	8009c74 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3740      	adds	r7, #64	@ 0x40
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bdb0      	pop	{r4, r5, r7, pc}

08008a18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 faea 	bl	800a00a <SDMMC_CmdGoIdleState>
 8008a36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	e072      	b.n	8008b28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fafd 	bl	800a046 <SDMMC_CmdOperCond>
 8008a4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00d      	beq.n	8008a70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 fad3 	bl	800a00a <SDMMC_CmdGoIdleState>
 8008a64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	e05b      	b.n	8008b28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d137      	bne.n	8008aee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2100      	movs	r1, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fafd 	bl	800a084 <SDMMC_CmdAppCommand>
 8008a8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d02d      	beq.n	8008aee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a96:	e047      	b.n	8008b28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 faf0 	bl	800a084 <SDMMC_CmdAppCommand>
 8008aa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <SD_PowerON+0x98>
    {
      return errorstate;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	e03b      	b.n	8008b28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	491e      	ldr	r1, [pc, #120]	@ (8008b30 <SD_PowerON+0x118>)
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f001 fb06 	bl	800a0c8 <SDMMC_CmdAppOperCommand>
 8008abc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ac4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008ac8:	e02e      	b.n	8008b28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f96b 	bl	8009dac <SDIO_GetResponse>
 8008ad6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	0fdb      	lsrs	r3, r3, #31
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d101      	bne.n	8008ae4 <SD_PowerON+0xcc>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <SD_PowerON+0xce>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]

    count++;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d802      	bhi.n	8008afe <SD_PowerON+0xe6>
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0cc      	beq.n	8008a98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d902      	bls.n	8008b0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b0c:	e00c      	b.n	8008b28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008b1e:	e002      	b.n	8008b26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	c1100000 	.word	0xc1100000

08008b34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b48:	e018      	b.n	8008b7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f001 fb37 	bl	800a1ca <SDMMC_CmdSendStatus>
 8008b5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	e009      	b.n	8008b7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 f91c 	bl	8009dac <SDIO_GetResponse>
 8008b74:	4602      	mov	r2, r0
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e03f      	b.n	8008c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fa fbae 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2224      	movs	r2, #36	@ 0x24
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fddf 	bl	800978c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695a      	ldr	r2, [r3, #20]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b08a      	sub	sp, #40	@ 0x28
 8008c22:	af02      	add	r7, sp, #8
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d17c      	bne.n	8008d38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_UART_Transmit+0x2c>
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e075      	b.n	8008d3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_UART_Transmit+0x3e>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e06e      	b.n	8008d3a <HAL_UART_Transmit+0x11c>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2221      	movs	r2, #33	@ 0x21
 8008c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c72:	f7fa fdbb 	bl	80037ec <HAL_GetTick>
 8008c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	88fa      	ldrh	r2, [r7, #6]
 8008c82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c8c:	d108      	bne.n	8008ca0 <HAL_UART_Transmit+0x82>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	e003      	b.n	8008ca8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008cb0:	e02a      	b.n	8008d08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2180      	movs	r1, #128	@ 0x80
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fb1f 	bl	8009300 <UART_WaitOnFlagUntilTimeout>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e036      	b.n	8008d3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10b      	bne.n	8008cea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	61bb      	str	r3, [r7, #24]
 8008ce8:	e007      	b.n	8008cfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	3b01      	subs	r3, #1
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1cf      	bne.n	8008cb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2140      	movs	r1, #64	@ 0x40
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 faef 	bl	8009300 <UART_WaitOnFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e006      	b.n	8008d3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	e000      	b.n	8008d3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d38:	2302      	movs	r3, #2
  }
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3720      	adds	r7, #32
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d11d      	bne.n	8008d98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <HAL_UART_Receive_IT+0x26>
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e016      	b.n	8008d9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_UART_Receive_IT+0x38>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e00f      	b.n	8008d9a <HAL_UART_Receive_IT+0x58>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d88:	88fb      	ldrh	r3, [r7, #6]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fb24 	bl	80093dc <UART_Start_Receive_IT>
 8008d94:	4603      	mov	r3, r0
 8008d96:	e000      	b.n	8008d9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d98:	2302      	movs	r3, #2
  }
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b0ba      	sub	sp, #232	@ 0xe8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10f      	bne.n	8008e0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <HAL_UART_IRQHandler+0x66>
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc07 	bl	8009616 <UART_Receive_IT>
      return;
 8008e08:	e256      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80de 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x22c>
 8008e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d106      	bne.n	8008e2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80d1 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00b      	beq.n	8008e52 <HAL_UART_IRQHandler+0xae>
 8008e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <HAL_UART_IRQHandler+0xd2>
 8008e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	f043 0202 	orr.w	r2, r3, #2
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <HAL_UART_IRQHandler+0xf6>
 8008e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e92:	f043 0204 	orr.w	r2, r3, #4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <HAL_UART_IRQHandler+0x126>
 8008ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec2:	f043 0208 	orr.w	r2, r3, #8
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 81ed 	beq.w	80092ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x14e>
 8008ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fb92 	bl	8009616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b40      	cmp	r3, #64	@ 0x40
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d103      	bne.n	8008f1e <HAL_UART_IRQHandler+0x17a>
 8008f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d04f      	beq.n	8008fbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa9a 	bl	8009458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f2e:	2b40      	cmp	r3, #64	@ 0x40
 8008f30:	d141      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3314      	adds	r3, #20
 8008f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3314      	adds	r3, #20
 8008f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1d9      	bne.n	8008f32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d013      	beq.n	8008fae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8009180 <HAL_UART_IRQHandler+0x3dc>)
 8008f8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fa fee2 	bl	8003d5c <HAL_DMA_Abort_IT>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d016      	beq.n	8008fcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	e00e      	b.n	8008fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f990 	bl	80092d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e00a      	b.n	8008fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f98c 	bl	80092d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	e006      	b.n	8008fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f988 	bl	80092d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008fca:	e170      	b.n	80092ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fcc:	bf00      	nop
    return;
 8008fce:	e16e      	b.n	80092ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 814a 	bne.w	800926e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8143 	beq.w	800926e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fec:	f003 0310 	and.w	r3, r3, #16
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 813c 	beq.w	800926e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009016:	2b40      	cmp	r3, #64	@ 0x40
 8009018:	f040 80b4 	bne.w	8009184 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009028:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8140 	beq.w	80092b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800903a:	429a      	cmp	r2, r3
 800903c:	f080 8139 	bcs.w	80092b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009046:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009052:	f000 8088 	beq.w	8009166 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	330c      	adds	r3, #12
 800905c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800906c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800908e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800909a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1d9      	bne.n	8009056 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3314      	adds	r3, #20
 80090a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3314      	adds	r3, #20
 80090c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e1      	bne.n	80090a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3314      	adds	r3, #20
 80090e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009104:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009108:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e3      	bne.n	80090de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	330c      	adds	r3, #12
 800912a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009136:	f023 0310 	bic.w	r3, r3, #16
 800913a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	330c      	adds	r3, #12
 8009144:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009148:	65ba      	str	r2, [r7, #88]	@ 0x58
 800914a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800914e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e3      	bne.n	8009124 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	4618      	mov	r0, r3
 8009162:	f7fa fd8b 	bl	8003c7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800916e:	b29b      	uxth	r3, r3
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8b6 	bl	80092e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800917c:	e099      	b.n	80092b2 <HAL_UART_IRQHandler+0x50e>
 800917e:	bf00      	nop
 8009180:	0800951f 	.word	0x0800951f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800918c:	b29b      	uxth	r3, r3
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 808b 	beq.w	80092b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8086 	beq.w	80092b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	330c      	adds	r3, #12
 80091b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80091ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80091d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e3      	bne.n	80091aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3314      	adds	r3, #20
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	623b      	str	r3, [r7, #32]
   return(result);
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3314      	adds	r3, #20
 8009202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009206:	633a      	str	r2, [r7, #48]	@ 0x30
 8009208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800920c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e3      	bne.n	80091e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	60fb      	str	r3, [r7, #12]
   return(result);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0310 	bic.w	r3, r3, #16
 800923e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	330c      	adds	r3, #12
 8009248:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800924c:	61fa      	str	r2, [r7, #28]
 800924e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	69b9      	ldr	r1, [r7, #24]
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	617b      	str	r3, [r7, #20]
   return(result);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e3      	bne.n	8009228 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f83e 	bl	80092e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800926c:	e023      	b.n	80092b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800926e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <HAL_UART_IRQHandler+0x4ea>
 800927a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800927e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f95d 	bl	8009546 <UART_Transmit_IT>
    return;
 800928c:	e014      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00e      	beq.n	80092b8 <HAL_UART_IRQHandler+0x514>
 800929a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d008      	beq.n	80092b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f99d 	bl	80095e6 <UART_EndTransmit_IT>
    return;
 80092ac:	e004      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
    return;
 80092ae:	bf00      	nop
 80092b0:	e002      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
      return;
 80092b2:	bf00      	nop
 80092b4:	e000      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
      return;
 80092b6:	bf00      	nop
  }
}
 80092b8:	37e8      	adds	r7, #232	@ 0xe8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop

080092c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b090      	sub	sp, #64	@ 0x40
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009310:	e050      	b.n	80093b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d04c      	beq.n	80093b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800931a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800931c:	2b00      	cmp	r3, #0
 800931e:	d007      	beq.n	8009330 <UART_WaitOnFlagUntilTimeout+0x30>
 8009320:	f7fa fa64 	bl	80037ec <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800932c:	429a      	cmp	r2, r3
 800932e:	d241      	bcs.n	80093b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009350:	637a      	str	r2, [r7, #52]	@ 0x34
 8009352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	613b      	str	r3, [r7, #16]
   return(result);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3314      	adds	r3, #20
 8009382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009384:	623a      	str	r2, [r7, #32]
 8009386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	6a3a      	ldr	r2, [r7, #32]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	61bb      	str	r3, [r7, #24]
   return(result);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e00f      	b.n	80093d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4013      	ands	r3, r2
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	bf0c      	ite	eq
 80093c4:	2301      	moveq	r3, #1
 80093c6:	2300      	movne	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	461a      	mov	r2, r3
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d09f      	beq.n	8009312 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3740      	adds	r7, #64	@ 0x40
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	88fa      	ldrh	r2, [r7, #6]
 80093f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	88fa      	ldrh	r2, [r7, #6]
 80093fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2222      	movs	r2, #34	@ 0x22
 8009406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d007      	beq.n	800942a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009428:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695a      	ldr	r2, [r3, #20]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f042 0220 	orr.w	r2, r2, #32
 8009448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b095      	sub	sp, #84	@ 0x54
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	330c      	adds	r3, #12
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	330c      	adds	r3, #12
 800947e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009480:	643a      	str	r2, [r7, #64]	@ 0x40
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e5      	bne.n	8009460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3314      	adds	r3, #20
 800949a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f023 0301 	bic.w	r3, r3, #1
 80094aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3314      	adds	r3, #20
 80094b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e5      	bne.n	8009494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d119      	bne.n	8009504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f0:	61ba      	str	r2, [r7, #24]
 80094f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6979      	ldr	r1, [r7, #20]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	613b      	str	r3, [r7, #16]
   return(result);
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e5      	bne.n	80094d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009512:	bf00      	nop
 8009514:	3754      	adds	r7, #84	@ 0x54
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff fecb 	bl	80092d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800953e:	bf00      	nop
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b21      	cmp	r3, #33	@ 0x21
 8009558:	d13e      	bne.n	80095d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009562:	d114      	bne.n	800958e <UART_Transmit_IT+0x48>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d110      	bne.n	800958e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	1c9a      	adds	r2, r3, #2
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	621a      	str	r2, [r3, #32]
 800958c:	e008      	b.n	80095a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	1c59      	adds	r1, r3, #1
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6211      	str	r1, [r2, #32]
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	4619      	mov	r1, r3
 80095ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10f      	bne.n	80095d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80095c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e000      	b.n	80095da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095d8:	2302      	movs	r3, #2
  }
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff fe5a 	bl	80092c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b08c      	sub	sp, #48	@ 0x30
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b22      	cmp	r3, #34	@ 0x22
 8009628:	f040 80ab 	bne.w	8009782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009634:	d117      	bne.n	8009666 <UART_Receive_IT+0x50>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d113      	bne.n	8009666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009646:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	b29b      	uxth	r3, r3
 8009650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009654:	b29a      	uxth	r2, r3
 8009656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965e:	1c9a      	adds	r2, r3, #2
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	629a      	str	r2, [r3, #40]	@ 0x28
 8009664:	e026      	b.n	80096b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800966c:	2300      	movs	r3, #0
 800966e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009678:	d007      	beq.n	800968a <UART_Receive_IT+0x74>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <UART_Receive_IT+0x82>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	b2da      	uxtb	r2, r3
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	e008      	b.n	80096aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29b      	uxth	r3, r3
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4619      	mov	r1, r3
 80096c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d15a      	bne.n	800977e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0220 	bic.w	r2, r2, #32
 80096d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695a      	ldr	r2, [r3, #20]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 0201 	bic.w	r2, r2, #1
 80096f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009704:	2b01      	cmp	r3, #1
 8009706:	d135      	bne.n	8009774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	330c      	adds	r3, #12
 8009714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	613b      	str	r3, [r7, #16]
   return(result);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f023 0310 	bic.w	r3, r3, #16
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	330c      	adds	r3, #12
 800972c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800972e:	623a      	str	r2, [r7, #32]
 8009730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	69f9      	ldr	r1, [r7, #28]
 8009734:	6a3a      	ldr	r2, [r7, #32]
 8009736:	e841 2300 	strex	r3, r2, [r1]
 800973a:	61bb      	str	r3, [r7, #24]
   return(result);
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e5      	bne.n	800970e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b10      	cmp	r3, #16
 800974e:	d10a      	bne.n	8009766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff fdbb 	bl	80092e8 <HAL_UARTEx_RxEventCallback>
 8009772:	e002      	b.n	800977a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7f8 ff8b 	bl	8002690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	e002      	b.n	8009784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	e000      	b.n	8009784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009782:	2302      	movs	r3, #2
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	3730      	adds	r7, #48	@ 0x30
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800978c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009790:	b0c0      	sub	sp, #256	@ 0x100
 8009792:	af00      	add	r7, sp, #0
 8009794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80097a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a8:	68d9      	ldr	r1, [r3, #12]
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	ea40 0301 	orr.w	r3, r0, r1
 80097b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	431a      	orrs	r2, r3
 80097cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80097e4:	f021 010c 	bic.w	r1, r1, #12
 80097e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097f2:	430b      	orrs	r3, r1
 80097f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009806:	6999      	ldr	r1, [r3, #24]
 8009808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	ea40 0301 	orr.w	r3, r0, r1
 8009812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	4b8f      	ldr	r3, [pc, #572]	@ (8009a58 <UART_SetConfig+0x2cc>)
 800981c:	429a      	cmp	r2, r3
 800981e:	d005      	beq.n	800982c <UART_SetConfig+0xa0>
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	4b8d      	ldr	r3, [pc, #564]	@ (8009a5c <UART_SetConfig+0x2d0>)
 8009828:	429a      	cmp	r2, r3
 800982a:	d104      	bne.n	8009836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800982c:	f7fe f8ce 	bl	80079cc <HAL_RCC_GetPCLK2Freq>
 8009830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009834:	e003      	b.n	800983e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009836:	f7fe f8b5 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 800983a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800983e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009848:	f040 810c 	bne.w	8009a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800984c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009850:	2200      	movs	r2, #0
 8009852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800985a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800985e:	4622      	mov	r2, r4
 8009860:	462b      	mov	r3, r5
 8009862:	1891      	adds	r1, r2, r2
 8009864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009866:	415b      	adcs	r3, r3
 8009868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800986a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800986e:	4621      	mov	r1, r4
 8009870:	eb12 0801 	adds.w	r8, r2, r1
 8009874:	4629      	mov	r1, r5
 8009876:	eb43 0901 	adc.w	r9, r3, r1
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800988a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800988e:	4690      	mov	r8, r2
 8009890:	4699      	mov	r9, r3
 8009892:	4623      	mov	r3, r4
 8009894:	eb18 0303 	adds.w	r3, r8, r3
 8009898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800989c:	462b      	mov	r3, r5
 800989e:	eb49 0303 	adc.w	r3, r9, r3
 80098a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80098b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80098ba:	460b      	mov	r3, r1
 80098bc:	18db      	adds	r3, r3, r3
 80098be:	653b      	str	r3, [r7, #80]	@ 0x50
 80098c0:	4613      	mov	r3, r2
 80098c2:	eb42 0303 	adc.w	r3, r2, r3
 80098c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80098c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80098cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80098d0:	f7f6 fcd6 	bl	8000280 <__aeabi_uldivmod>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4b61      	ldr	r3, [pc, #388]	@ (8009a60 <UART_SetConfig+0x2d4>)
 80098da:	fba3 2302 	umull	r2, r3, r3, r2
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	011c      	lsls	r4, r3, #4
 80098e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098e6:	2200      	movs	r2, #0
 80098e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80098f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80098f4:	4642      	mov	r2, r8
 80098f6:	464b      	mov	r3, r9
 80098f8:	1891      	adds	r1, r2, r2
 80098fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098fc:	415b      	adcs	r3, r3
 80098fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009904:	4641      	mov	r1, r8
 8009906:	eb12 0a01 	adds.w	sl, r2, r1
 800990a:	4649      	mov	r1, r9
 800990c:	eb43 0b01 	adc.w	fp, r3, r1
 8009910:	f04f 0200 	mov.w	r2, #0
 8009914:	f04f 0300 	mov.w	r3, #0
 8009918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800991c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009924:	4692      	mov	sl, r2
 8009926:	469b      	mov	fp, r3
 8009928:	4643      	mov	r3, r8
 800992a:	eb1a 0303 	adds.w	r3, sl, r3
 800992e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009932:	464b      	mov	r3, r9
 8009934:	eb4b 0303 	adc.w	r3, fp, r3
 8009938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800993c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800994c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009950:	460b      	mov	r3, r1
 8009952:	18db      	adds	r3, r3, r3
 8009954:	643b      	str	r3, [r7, #64]	@ 0x40
 8009956:	4613      	mov	r3, r2
 8009958:	eb42 0303 	adc.w	r3, r2, r3
 800995c:	647b      	str	r3, [r7, #68]	@ 0x44
 800995e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009966:	f7f6 fc8b 	bl	8000280 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4611      	mov	r1, r2
 8009970:	4b3b      	ldr	r3, [pc, #236]	@ (8009a60 <UART_SetConfig+0x2d4>)
 8009972:	fba3 2301 	umull	r2, r3, r3, r1
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	2264      	movs	r2, #100	@ 0x64
 800997a:	fb02 f303 	mul.w	r3, r2, r3
 800997e:	1acb      	subs	r3, r1, r3
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009986:	4b36      	ldr	r3, [pc, #216]	@ (8009a60 <UART_SetConfig+0x2d4>)
 8009988:	fba3 2302 	umull	r2, r3, r3, r2
 800998c:	095b      	lsrs	r3, r3, #5
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009994:	441c      	add	r4, r3
 8009996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800999a:	2200      	movs	r2, #0
 800999c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80099a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80099a8:	4642      	mov	r2, r8
 80099aa:	464b      	mov	r3, r9
 80099ac:	1891      	adds	r1, r2, r2
 80099ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80099b0:	415b      	adcs	r3, r3
 80099b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80099b8:	4641      	mov	r1, r8
 80099ba:	1851      	adds	r1, r2, r1
 80099bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80099be:	4649      	mov	r1, r9
 80099c0:	414b      	adcs	r3, r1
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	f04f 0300 	mov.w	r3, #0
 80099cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80099d0:	4659      	mov	r1, fp
 80099d2:	00cb      	lsls	r3, r1, #3
 80099d4:	4651      	mov	r1, sl
 80099d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099da:	4651      	mov	r1, sl
 80099dc:	00ca      	lsls	r2, r1, #3
 80099de:	4610      	mov	r0, r2
 80099e0:	4619      	mov	r1, r3
 80099e2:	4603      	mov	r3, r0
 80099e4:	4642      	mov	r2, r8
 80099e6:	189b      	adds	r3, r3, r2
 80099e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099ec:	464b      	mov	r3, r9
 80099ee:	460a      	mov	r2, r1
 80099f0:	eb42 0303 	adc.w	r3, r2, r3
 80099f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	18db      	adds	r3, r3, r3
 8009a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a12:	4613      	mov	r3, r2
 8009a14:	eb42 0303 	adc.w	r3, r2, r3
 8009a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009a22:	f7f6 fc2d 	bl	8000280 <__aeabi_uldivmod>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <UART_SetConfig+0x2d4>)
 8009a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a30:	095b      	lsrs	r3, r3, #5
 8009a32:	2164      	movs	r1, #100	@ 0x64
 8009a34:	fb01 f303 	mul.w	r3, r1, r3
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	3332      	adds	r3, #50	@ 0x32
 8009a3e:	4a08      	ldr	r2, [pc, #32]	@ (8009a60 <UART_SetConfig+0x2d4>)
 8009a40:	fba2 2303 	umull	r2, r3, r2, r3
 8009a44:	095b      	lsrs	r3, r3, #5
 8009a46:	f003 0207 	and.w	r2, r3, #7
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4422      	add	r2, r4
 8009a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a54:	e106      	b.n	8009c64 <UART_SetConfig+0x4d8>
 8009a56:	bf00      	nop
 8009a58:	40011000 	.word	0x40011000
 8009a5c:	40011400 	.word	0x40011400
 8009a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a76:	4642      	mov	r2, r8
 8009a78:	464b      	mov	r3, r9
 8009a7a:	1891      	adds	r1, r2, r2
 8009a7c:	6239      	str	r1, [r7, #32]
 8009a7e:	415b      	adcs	r3, r3
 8009a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a86:	4641      	mov	r1, r8
 8009a88:	1854      	adds	r4, r2, r1
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	eb43 0501 	adc.w	r5, r3, r1
 8009a90:	f04f 0200 	mov.w	r2, #0
 8009a94:	f04f 0300 	mov.w	r3, #0
 8009a98:	00eb      	lsls	r3, r5, #3
 8009a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a9e:	00e2      	lsls	r2, r4, #3
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	461d      	mov	r5, r3
 8009aa4:	4643      	mov	r3, r8
 8009aa6:	18e3      	adds	r3, r4, r3
 8009aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009aac:	464b      	mov	r3, r9
 8009aae:	eb45 0303 	adc.w	r3, r5, r3
 8009ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ac6:	f04f 0200 	mov.w	r2, #0
 8009aca:	f04f 0300 	mov.w	r3, #0
 8009ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	008b      	lsls	r3, r1, #2
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009adc:	4621      	mov	r1, r4
 8009ade:	008a      	lsls	r2, r1, #2
 8009ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ae4:	f7f6 fbcc 	bl	8000280 <__aeabi_uldivmod>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4b60      	ldr	r3, [pc, #384]	@ (8009c70 <UART_SetConfig+0x4e4>)
 8009aee:	fba3 2302 	umull	r2, r3, r3, r2
 8009af2:	095b      	lsrs	r3, r3, #5
 8009af4:	011c      	lsls	r4, r3, #4
 8009af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009b08:	4642      	mov	r2, r8
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	1891      	adds	r1, r2, r2
 8009b0e:	61b9      	str	r1, [r7, #24]
 8009b10:	415b      	adcs	r3, r3
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b18:	4641      	mov	r1, r8
 8009b1a:	1851      	adds	r1, r2, r1
 8009b1c:	6139      	str	r1, [r7, #16]
 8009b1e:	4649      	mov	r1, r9
 8009b20:	414b      	adcs	r3, r1
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	f04f 0200 	mov.w	r2, #0
 8009b28:	f04f 0300 	mov.w	r3, #0
 8009b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b30:	4659      	mov	r1, fp
 8009b32:	00cb      	lsls	r3, r1, #3
 8009b34:	4651      	mov	r1, sl
 8009b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b3a:	4651      	mov	r1, sl
 8009b3c:	00ca      	lsls	r2, r1, #3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	4642      	mov	r2, r8
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b4c:	464b      	mov	r3, r9
 8009b4e:	460a      	mov	r2, r1
 8009b50:	eb42 0303 	adc.w	r3, r2, r3
 8009b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	f04f 0300 	mov.w	r3, #0
 8009b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b70:	4649      	mov	r1, r9
 8009b72:	008b      	lsls	r3, r1, #2
 8009b74:	4641      	mov	r1, r8
 8009b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	008a      	lsls	r2, r1, #2
 8009b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b82:	f7f6 fb7d 	bl	8000280 <__aeabi_uldivmod>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4b38      	ldr	r3, [pc, #224]	@ (8009c70 <UART_SetConfig+0x4e4>)
 8009b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	2264      	movs	r2, #100	@ 0x64
 8009b96:	fb02 f303 	mul.w	r3, r2, r3
 8009b9a:	1acb      	subs	r3, r1, r3
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	3332      	adds	r3, #50	@ 0x32
 8009ba0:	4a33      	ldr	r2, [pc, #204]	@ (8009c70 <UART_SetConfig+0x4e4>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bac:	441c      	add	r4, r3
 8009bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009bbc:	4642      	mov	r2, r8
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	1891      	adds	r1, r2, r2
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	415b      	adcs	r3, r3
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009bcc:	4641      	mov	r1, r8
 8009bce:	1851      	adds	r1, r2, r1
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	414b      	adcs	r3, r1
 8009bd6:	607b      	str	r3, [r7, #4]
 8009bd8:	f04f 0200 	mov.w	r2, #0
 8009bdc:	f04f 0300 	mov.w	r3, #0
 8009be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009be4:	4659      	mov	r1, fp
 8009be6:	00cb      	lsls	r3, r1, #3
 8009be8:	4651      	mov	r1, sl
 8009bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bee:	4651      	mov	r1, sl
 8009bf0:	00ca      	lsls	r2, r1, #3
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	4642      	mov	r2, r8
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bfe:	464b      	mov	r3, r9
 8009c00:	460a      	mov	r2, r1
 8009c02:	eb42 0303 	adc.w	r3, r2, r3
 8009c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8009c14:	f04f 0200 	mov.w	r2, #0
 8009c18:	f04f 0300 	mov.w	r3, #0
 8009c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009c20:	4649      	mov	r1, r9
 8009c22:	008b      	lsls	r3, r1, #2
 8009c24:	4641      	mov	r1, r8
 8009c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	008a      	lsls	r2, r1, #2
 8009c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c32:	f7f6 fb25 	bl	8000280 <__aeabi_uldivmod>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <UART_SetConfig+0x4e4>)
 8009c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c40:	095b      	lsrs	r3, r3, #5
 8009c42:	2164      	movs	r1, #100	@ 0x64
 8009c44:	fb01 f303 	mul.w	r3, r1, r3
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	3332      	adds	r3, #50	@ 0x32
 8009c4e:	4a08      	ldr	r2, [pc, #32]	@ (8009c70 <UART_SetConfig+0x4e4>)
 8009c50:	fba2 2303 	umull	r2, r3, r2, r3
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	f003 020f 	and.w	r2, r3, #15
 8009c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4422      	add	r2, r4
 8009c62:	609a      	str	r2, [r3, #8]
}
 8009c64:	bf00      	nop
 8009c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c70:	51eb851f 	.word	0x51eb851f

08009c74 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c74:	b084      	sub	sp, #16
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	f107 001c 	add.w	r0, r7, #28
 8009c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c8e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009c92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009c96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009c9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009c9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009cae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	b004      	add	sp, #16
 8009cc8:	4770      	bx	lr

08009cca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2203      	movs	r2, #3
 8009d12:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009d22:	b480      	push	{r7}
 8009d24:	b083      	sub	sp, #12
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0303 	and.w	r3, r3, #3
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d5c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d62:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009d78:	f023 030f 	bic.w	r3, r3, #15
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	b2db      	uxtb	r3, r3
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3314      	adds	r3, #20
 8009dba:	461a      	mov	r2, r3
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
}  
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009df8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009dfe:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009e04:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e10:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0

}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b088      	sub	sp, #32
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e38:	2310      	movs	r3, #16
 8009e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e3c:	2340      	movs	r3, #64	@ 0x40
 8009e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff ff74 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e5a:	2110      	movs	r1, #16
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f9d7 	bl	800a210 <SDMMC_GetCmdResp1>
 8009e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e64:	69fb      	ldr	r3, [r7, #28]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3720      	adds	r7, #32
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b088      	sub	sp, #32
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e7c:	2311      	movs	r3, #17
 8009e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e80:	2340      	movs	r3, #64	@ 0x40
 8009e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e84:	2300      	movs	r3, #0
 8009e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ff52 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e9e:	2111      	movs	r1, #17
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9b5 	bl	800a210 <SDMMC_GetCmdResp1>
 8009ea6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ea8:	69fb      	ldr	r3, [r7, #28]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3720      	adds	r7, #32
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b088      	sub	sp, #32
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ec0:	2312      	movs	r3, #18
 8009ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ec4:	2340      	movs	r3, #64	@ 0x40
 8009ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ed0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff ff30 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ee2:	2112      	movs	r1, #18
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f993 	bl	800a210 <SDMMC_GetCmdResp1>
 8009eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eec:	69fb      	ldr	r3, [r7, #28]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b088      	sub	sp, #32
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f04:	2318      	movs	r3, #24
 8009f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f08:	2340      	movs	r3, #64	@ 0x40
 8009f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f16:	f107 0308 	add.w	r3, r7, #8
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff ff0e 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f26:	2118      	movs	r1, #24
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f971 	bl	800a210 <SDMMC_GetCmdResp1>
 8009f2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f30:	69fb      	ldr	r3, [r7, #28]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b088      	sub	sp, #32
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f48:	2319      	movs	r3, #25
 8009f4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f4c:	2340      	movs	r3, #64	@ 0x40
 8009f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f50:	2300      	movs	r3, #0
 8009f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f5a:	f107 0308 	add.w	r3, r7, #8
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7ff feec 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f6a:	2119      	movs	r1, #25
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f94f 	bl	800a210 <SDMMC_GetCmdResp1>
 8009f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f74:	69fb      	ldr	r3, [r7, #28]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3720      	adds	r7, #32
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f90:	2340      	movs	r3, #64	@ 0x40
 8009f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f9e:	f107 0308 	add.w	r3, r7, #8
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff feca 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009faa:	4a05      	ldr	r2, [pc, #20]	@ (8009fc0 <SDMMC_CmdStopTransfer+0x40>)
 8009fac:	210c      	movs	r1, #12
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f92e 	bl	800a210 <SDMMC_GetCmdResp1>
 8009fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fb6:	69fb      	ldr	r3, [r7, #28]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	05f5e100 	.word	0x05f5e100

08009fc4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	@ 0x28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009fd4:	2307      	movs	r3, #7
 8009fd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fd8:	2340      	movs	r3, #64	@ 0x40
 8009fda:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fe4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fe6:	f107 0310 	add.w	r3, r7, #16
 8009fea:	4619      	mov	r1, r3
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff fea6 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ff6:	2107      	movs	r1, #7
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 f909 	bl	800a210 <SDMMC_GetCmdResp1>
 8009ffe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a002:	4618      	mov	r0, r3
 800a004:	3728      	adds	r7, #40	@ 0x28
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b088      	sub	sp, #32
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a01a:	2300      	movs	r3, #0
 800a01c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a026:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a028:	f107 0308 	add.w	r3, r7, #8
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7ff fe85 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fb23 	bl	800a680 <SDMMC_GetCmdError>
 800a03a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a03c:	69fb      	ldr	r3, [r7, #28]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3720      	adds	r7, #32
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b088      	sub	sp, #32
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a04e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a052:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a054:	2308      	movs	r3, #8
 800a056:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a058:	2340      	movs	r3, #64	@ 0x40
 800a05a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a05c:	2300      	movs	r3, #0
 800a05e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a064:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a066:	f107 0308 	add.w	r3, r7, #8
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff fe66 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fab6 	bl	800a5e4 <SDMMC_GetCmdResp7>
 800a078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a07a:	69fb      	ldr	r3, [r7, #28]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a092:	2337      	movs	r3, #55	@ 0x37
 800a094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a096:	2340      	movs	r3, #64	@ 0x40
 800a098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a09e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0a4:	f107 0308 	add.w	r3, r7, #8
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fe47 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a0b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0b4:	2137      	movs	r1, #55	@ 0x37
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f8aa 	bl	800a210 <SDMMC_GetCmdResp1>
 800a0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0be:	69fb      	ldr	r3, [r7, #28]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3720      	adds	r7, #32
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a0d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0de:	2329      	movs	r3, #41	@ 0x29
 800a0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0e2:	2340      	movs	r3, #64	@ 0x40
 800a0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0f0:	f107 0308 	add.w	r3, r7, #8
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff fe21 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f9bd 	bl	800a47c <SDMMC_GetCmdResp3>
 800a102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a104:	69fb      	ldr	r3, [r7, #28]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a11a:	2302      	movs	r3, #2
 800a11c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a11e:	23c0      	movs	r3, #192	@ 0xc0
 800a120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a12a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a12c:	f107 0308 	add.w	r3, r7, #8
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fe03 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f957 	bl	800a3ec <SDMMC_GetCmdResp2>
 800a13e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a140:	69fb      	ldr	r3, [r7, #28]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b088      	sub	sp, #32
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a158:	2309      	movs	r3, #9
 800a15a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a15c:	23c0      	movs	r3, #192	@ 0xc0
 800a15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a16a:	f107 0308 	add.w	r3, r7, #8
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff fde4 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f938 	bl	800a3ec <SDMMC_GetCmdResp2>
 800a17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17e:	69fb      	ldr	r3, [r7, #28]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a196:	2303      	movs	r3, #3
 800a198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a19a:	2340      	movs	r3, #64	@ 0x40
 800a19c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a8:	f107 0308 	add.w	r3, r7, #8
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fdc5 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	2103      	movs	r1, #3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f99d 	bl	800a4f8 <SDMMC_GetCmdResp6>
 800a1be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c0:	69fb      	ldr	r3, [r7, #28]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b088      	sub	sp, #32
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a1d8:	230d      	movs	r3, #13
 800a1da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1dc:	2340      	movs	r3, #64	@ 0x40
 800a1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1ea:	f107 0308 	add.w	r3, r7, #8
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fda4 	bl	8009d3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a1f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1fa:	210d      	movs	r1, #13
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f807 	bl	800a210 <SDMMC_GetCmdResp1>
 800a202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a204:	69fb      	ldr	r3, [r7, #28]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	460b      	mov	r3, r1
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a21e:	4b70      	ldr	r3, [pc, #448]	@ (800a3e0 <SDMMC_GetCmdResp1+0x1d0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a70      	ldr	r2, [pc, #448]	@ (800a3e4 <SDMMC_GetCmdResp1+0x1d4>)
 800a224:	fba2 2303 	umull	r2, r3, r2, r3
 800a228:	0a5a      	lsrs	r2, r3, #9
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	fb02 f303 	mul.w	r3, r2, r3
 800a230:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	61fa      	str	r2, [r7, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a23c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a240:	e0c9      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a246:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0ef      	beq.n	800a232 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1ea      	bne.n	800a232 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2204      	movs	r2, #4
 800a26c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a26e:	2304      	movs	r3, #4
 800a270:	e0b1      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d004      	beq.n	800a288 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a284:	2301      	movs	r3, #1
 800a286:	e0a6      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	22c5      	movs	r2, #197	@ 0xc5
 800a28c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7ff fd7f 	bl	8009d92 <SDIO_GetCommandResponse>
 800a294:	4603      	mov	r3, r0
 800a296:	461a      	mov	r2, r3
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d001      	beq.n	800a2a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e099      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fd81 	bl	8009dac <SDIO_GetResponse>
 800a2aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4b4e      	ldr	r3, [pc, #312]	@ (800a3e8 <SDMMC_GetCmdResp1+0x1d8>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e08d      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da02      	bge.n	800a2c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2c4:	e087      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2d0:	2340      	movs	r3, #64	@ 0x40
 800a2d2:	e080      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2de:	2380      	movs	r3, #128	@ 0x80
 800a2e0:	e079      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2f0:	e071      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a300:	e069      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a30c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a310:	e061      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a31c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a320:	e059      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a32c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a330:	e051      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a33c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a340:	e049      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a34c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a350:	e041      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a35c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a360:	e039      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a36c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a370:	e031      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a37c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a380:	e029      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a38c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a390:	e021      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a39c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3a0:	e019      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a3b0:	e011      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a3bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a3c0:	e009      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a3cc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a3d0:	e001      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3720      	adds	r7, #32
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000020 	.word	0x20000020
 800a3e4:	10624dd3 	.word	0x10624dd3
 800a3e8:	fdffe008 	.word	0xfdffe008

0800a3ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a474 <SDMMC_GetCmdResp2+0x88>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a478 <SDMMC_GetCmdResp2+0x8c>)
 800a3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fe:	0a5b      	lsrs	r3, r3, #9
 800a400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a404:	fb02 f303 	mul.w	r3, r2, r3
 800a408:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	1e5a      	subs	r2, r3, #1
 800a40e:	60fa      	str	r2, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a414:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a418:	e026      	b.n	800a468 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a41e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0ef      	beq.n	800a40a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1ea      	bne.n	800a40a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d004      	beq.n	800a44a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2204      	movs	r2, #4
 800a444:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a446:	2304      	movs	r3, #4
 800a448:	e00e      	b.n	800a468 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e003      	b.n	800a468 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	22c5      	movs	r2, #197	@ 0xc5
 800a464:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	20000020 	.word	0x20000020
 800a478:	10624dd3 	.word	0x10624dd3

0800a47c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a484:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f0 <SDMMC_GetCmdResp3+0x74>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a1a      	ldr	r2, [pc, #104]	@ (800a4f4 <SDMMC_GetCmdResp3+0x78>)
 800a48a:	fba2 2303 	umull	r2, r3, r2, r3
 800a48e:	0a5b      	lsrs	r3, r3, #9
 800a490:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a494:	fb02 f303 	mul.w	r3, r2, r3
 800a498:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1e5a      	subs	r2, r3, #1
 800a49e:	60fa      	str	r2, [r7, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4a8:	e01b      	b.n	800a4e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0ef      	beq.n	800a49a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1ea      	bne.n	800a49a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d004      	beq.n	800a4da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2204      	movs	r2, #4
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4d6:	2304      	movs	r3, #4
 800a4d8:	e003      	b.n	800a4e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	22c5      	movs	r2, #197	@ 0xc5
 800a4de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20000020 	.word	0x20000020
 800a4f4:	10624dd3 	.word	0x10624dd3

0800a4f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	460b      	mov	r3, r1
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a506:	4b35      	ldr	r3, [pc, #212]	@ (800a5dc <SDMMC_GetCmdResp6+0xe4>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a35      	ldr	r2, [pc, #212]	@ (800a5e0 <SDMMC_GetCmdResp6+0xe8>)
 800a50c:	fba2 2303 	umull	r2, r3, r2, r3
 800a510:	0a5b      	lsrs	r3, r3, #9
 800a512:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a516:	fb02 f303 	mul.w	r3, r2, r3
 800a51a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	1e5a      	subs	r2, r3, #1
 800a520:	61fa      	str	r2, [r7, #28]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a526:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a52a:	e052      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a530:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0ef      	beq.n	800a51c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1ea      	bne.n	800a51c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a54a:	f003 0304 	and.w	r3, r3, #4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d004      	beq.n	800a55c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2204      	movs	r2, #4
 800a556:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a558:	2304      	movs	r3, #4
 800a55a:	e03a      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2201      	movs	r2, #1
 800a56c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a56e:	2301      	movs	r3, #1
 800a570:	e02f      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fc0d 	bl	8009d92 <SDIO_GetCommandResponse>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	4293      	cmp	r3, r2
 800a580:	d001      	beq.n	800a586 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a582:	2301      	movs	r3, #1
 800a584:	e025      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	22c5      	movs	r2, #197	@ 0xc5
 800a58a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a58c:	2100      	movs	r1, #0
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fc0c 	bl	8009dac <SDIO_GetResponse>
 800a594:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	0c1b      	lsrs	r3, r3, #16
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e011      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5bc:	e009      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a5c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5cc:	e001      	b.n	800a5d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3720      	adds	r7, #32
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000020 	.word	0x20000020
 800a5e0:	10624dd3 	.word	0x10624dd3

0800a5e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5ec:	4b22      	ldr	r3, [pc, #136]	@ (800a678 <SDMMC_GetCmdResp7+0x94>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a22      	ldr	r2, [pc, #136]	@ (800a67c <SDMMC_GetCmdResp7+0x98>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	0a5b      	lsrs	r3, r3, #9
 800a5f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5fc:	fb02 f303 	mul.w	r3, r2, r3
 800a600:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	60fa      	str	r2, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d102      	bne.n	800a612 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a60c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a610:	e02c      	b.n	800a66c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a616:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0ef      	beq.n	800a602 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1ea      	bne.n	800a602 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2204      	movs	r2, #4
 800a63c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a63e:	2304      	movs	r3, #4
 800a640:	e014      	b.n	800a66c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d004      	beq.n	800a658 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a654:	2301      	movs	r3, #1
 800a656:	e009      	b.n	800a66c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2240      	movs	r2, #64	@ 0x40
 800a668:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a66a:	2300      	movs	r3, #0
  
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20000020 	.word	0x20000020
 800a67c:	10624dd3 	.word	0x10624dd3

0800a680 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a688:	4b11      	ldr	r3, [pc, #68]	@ (800a6d0 <SDMMC_GetCmdError+0x50>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a11      	ldr	r2, [pc, #68]	@ (800a6d4 <SDMMC_GetCmdError+0x54>)
 800a68e:	fba2 2303 	umull	r2, r3, r2, r3
 800a692:	0a5b      	lsrs	r3, r3, #9
 800a694:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a698:	fb02 f303 	mul.w	r3, r2, r3
 800a69c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	60fa      	str	r2, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6ac:	e009      	b.n	800a6c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0f1      	beq.n	800a69e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	22c5      	movs	r2, #197	@ 0xc5
 800a6be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	20000020 	.word	0x20000020
 800a6d4:	10624dd3 	.word	0x10624dd3

0800a6d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a6dc:	4904      	ldr	r1, [pc, #16]	@ (800a6f0 <MX_FATFS_Init+0x18>)
 800a6de:	4805      	ldr	r0, [pc, #20]	@ (800a6f4 <MX_FATFS_Init+0x1c>)
 800a6e0:	f003 f81e 	bl	800d720 <FATFS_LinkDriver>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4b03      	ldr	r3, [pc, #12]	@ (800a6f8 <MX_FATFS_Init+0x20>)
 800a6ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a6ec:	bf00      	nop
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	2000567c 	.word	0x2000567c
 800a6f4:	08010394 	.word	0x08010394
 800a6f8:	20005678 	.word	0x20005678

0800a6fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a700:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a702:	4618      	mov	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a716:	f000 f86b 	bl	800a7f0 <BSP_SD_IsDetected>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d001      	beq.n	800a724 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e005      	b.n	800a730 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a724:	4804      	ldr	r0, [pc, #16]	@ (800a738 <BSP_SD_Init+0x2c>)
 800a726:	f7fd faa5 	bl	8007c74 <HAL_SD_Init>
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a72e:	79fb      	ldrb	r3, [r7, #7]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	200002ac 	.word	0x200002ac

0800a73c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af02      	add	r7, sp, #8
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	4806      	ldr	r0, [pc, #24]	@ (800a774 <BSP_SD_ReadBlocks+0x38>)
 800a75a:	f7fd fb3b 	bl	8007dd4 <HAL_SD_ReadBlocks>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200002ac 	.word	0x200002ac

0800a778 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	4806      	ldr	r0, [pc, #24]	@ (800a7b0 <BSP_SD_WriteBlocks+0x38>)
 800a796:	f7fd fcfb 	bl	8008190 <HAL_SD_WriteBlocks>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200002ac 	.word	0x200002ac

0800a7b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7b8:	4805      	ldr	r0, [pc, #20]	@ (800a7d0 <BSP_SD_GetCardState+0x1c>)
 800a7ba:	f7fe f83f 	bl	800883c <HAL_SD_GetCardState>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	bf14      	ite	ne
 800a7c4:	2301      	movne	r3, #1
 800a7c6:	2300      	moveq	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200002ac 	.word	0x200002ac

0800a7d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4803      	ldr	r0, [pc, #12]	@ (800a7ec <BSP_SD_GetCardInfo+0x18>)
 800a7e0:	f7fe f800 	bl	80087e4 <HAL_SD_GetCardInfo>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	200002ac 	.word	0x200002ac

0800a7f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	b2db      	uxtb	r3, r3
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a816:	4b0b      	ldr	r3, [pc, #44]	@ (800a844 <SD_CheckStatus+0x38>)
 800a818:	2201      	movs	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a81c:	f7ff ffca 	bl	800a7b4 <BSP_SD_GetCardState>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d107      	bne.n	800a836 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a826:	4b07      	ldr	r3, [pc, #28]	@ (800a844 <SD_CheckStatus+0x38>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	f023 0301 	bic.w	r3, r3, #1
 800a830:	b2da      	uxtb	r2, r3
 800a832:	4b04      	ldr	r3, [pc, #16]	@ (800a844 <SD_CheckStatus+0x38>)
 800a834:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a836:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <SD_CheckStatus+0x38>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b2db      	uxtb	r3, r3
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000029 	.word	0x20000029

0800a848 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a852:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <SD_initialize+0x38>)
 800a854:	2201      	movs	r2, #1
 800a856:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a858:	f7ff ff58 	bl	800a70c <BSP_SD_Init>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d107      	bne.n	800a872 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff ffd1 	bl	800a80c <SD_CheckStatus>
 800a86a:	4603      	mov	r3, r0
 800a86c:	461a      	mov	r2, r3
 800a86e:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <SD_initialize+0x38>)
 800a870:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a872:	4b03      	ldr	r3, [pc, #12]	@ (800a880 <SD_initialize+0x38>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	b2db      	uxtb	r3, r3
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000029 	.word	0x20000029

0800a884 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff ffbb 	bl	800a80c <SD_CheckStatus>
 800a896:	4603      	mov	r3, r0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	68b8      	ldr	r0, [r7, #8]
 800a8be:	f7ff ff3d 	bl	800a73c <BSP_SD_ReadBlocks>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d107      	bne.n	800a8d8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a8c8:	bf00      	nop
 800a8ca:	f7ff ff73 	bl	800a7b4 <BSP_SD_GetCardState>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1fa      	bne.n	800a8ca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b086      	sub	sp, #24
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	68b8      	ldr	r0, [r7, #8]
 800a900:	f7ff ff3a 	bl	800a778 <BSP_SD_WriteBlocks>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d107      	bne.n	800a91a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a90a:	bf00      	nop
 800a90c:	f7ff ff52 	bl	800a7b4 <BSP_SD_GetCardState>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1fa      	bne.n	800a90c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08c      	sub	sp, #48	@ 0x30
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	603a      	str	r2, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
 800a930:	460b      	mov	r3, r1
 800a932:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a93a:	4b25      	ldr	r3, [pc, #148]	@ (800a9d0 <SD_ioctl+0xac>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <SD_ioctl+0x28>
 800a948:	2303      	movs	r3, #3
 800a94a:	e03c      	b.n	800a9c6 <SD_ioctl+0xa2>

  switch (cmd)
 800a94c:	79bb      	ldrb	r3, [r7, #6]
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d834      	bhi.n	800a9bc <SD_ioctl+0x98>
 800a952:	a201      	add	r2, pc, #4	@ (adr r2, 800a958 <SD_ioctl+0x34>)
 800a954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a958:	0800a969 	.word	0x0800a969
 800a95c:	0800a971 	.word	0x0800a971
 800a960:	0800a989 	.word	0x0800a989
 800a964:	0800a9a3 	.word	0x0800a9a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a96e:	e028      	b.n	800a9c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a970:	f107 030c 	add.w	r3, r7, #12
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff ff2d 	bl	800a7d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a986:	e01c      	b.n	800a9c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff ff21 	bl	800a7d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a994:	b29a      	uxth	r2, r3
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a9a0:	e00f      	b.n	800a9c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ff14 	bl	800a7d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ae:	0a5a      	lsrs	r2, r3, #9
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a9ba:	e002      	b.n	800a9c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a9bc:	2304      	movs	r3, #4
 800a9be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3730      	adds	r7, #48	@ 0x30
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000029 	.word	0x20000029

0800a9d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	4a08      	ldr	r2, [pc, #32]	@ (800aa04 <disk_status+0x30>)
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	79fa      	ldrb	r2, [r7, #7]
 800a9ec:	4905      	ldr	r1, [pc, #20]	@ (800aa04 <disk_status+0x30>)
 800a9ee:	440a      	add	r2, r1
 800a9f0:	7a12      	ldrb	r2, [r2, #8]
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	4798      	blx	r3
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200056a8 	.word	0x200056a8

0800aa08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	4a0d      	ldr	r2, [pc, #52]	@ (800aa50 <disk_initialize+0x48>)
 800aa1a:	5cd3      	ldrb	r3, [r2, r3]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d111      	bne.n	800aa44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	4a0b      	ldr	r2, [pc, #44]	@ (800aa50 <disk_initialize+0x48>)
 800aa24:	2101      	movs	r1, #1
 800aa26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	4a09      	ldr	r2, [pc, #36]	@ (800aa50 <disk_initialize+0x48>)
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	79fa      	ldrb	r2, [r7, #7]
 800aa36:	4906      	ldr	r1, [pc, #24]	@ (800aa50 <disk_initialize+0x48>)
 800aa38:	440a      	add	r2, r1
 800aa3a:	7a12      	ldrb	r2, [r2, #8]
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	4798      	blx	r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200056a8 	.word	0x200056a8

0800aa54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
 800aa5e:	603b      	str	r3, [r7, #0]
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	4a0a      	ldr	r2, [pc, #40]	@ (800aa90 <disk_read+0x3c>)
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	689c      	ldr	r4, [r3, #8]
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	4a07      	ldr	r2, [pc, #28]	@ (800aa90 <disk_read+0x3c>)
 800aa74:	4413      	add	r3, r2
 800aa76:	7a18      	ldrb	r0, [r3, #8]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	47a0      	blx	r4
 800aa80:	4603      	mov	r3, r0
 800aa82:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd90      	pop	{r4, r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	200056a8 	.word	0x200056a8

0800aa94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa94:	b590      	push	{r4, r7, lr}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	607a      	str	r2, [r7, #4]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	4a0a      	ldr	r2, [pc, #40]	@ (800aad0 <disk_write+0x3c>)
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68dc      	ldr	r4, [r3, #12]
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	4a07      	ldr	r2, [pc, #28]	@ (800aad0 <disk_write+0x3c>)
 800aab4:	4413      	add	r3, r2
 800aab6:	7a18      	ldrb	r0, [r3, #8]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	47a0      	blx	r4
 800aac0:	4603      	mov	r3, r0
 800aac2:	75fb      	strb	r3, [r7, #23]
  return res;
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd90      	pop	{r4, r7, pc}
 800aace:	bf00      	nop
 800aad0:	200056a8 	.word	0x200056a8

0800aad4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	603a      	str	r2, [r7, #0]
 800aade:	71fb      	strb	r3, [r7, #7]
 800aae0:	460b      	mov	r3, r1
 800aae2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aae4:	79fb      	ldrb	r3, [r7, #7]
 800aae6:	4a09      	ldr	r2, [pc, #36]	@ (800ab0c <disk_ioctl+0x38>)
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	79fa      	ldrb	r2, [r7, #7]
 800aaf2:	4906      	ldr	r1, [pc, #24]	@ (800ab0c <disk_ioctl+0x38>)
 800aaf4:	440a      	add	r2, r1
 800aaf6:	7a10      	ldrb	r0, [r2, #8]
 800aaf8:	79b9      	ldrb	r1, [r7, #6]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4798      	blx	r3
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]
  return res;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	200056a8 	.word	0x200056a8

0800ab10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ab20:	89fb      	ldrh	r3, [r7, #14]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	b21a      	sxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	b21b      	sxth	r3, r3
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	b21b      	sxth	r3, r3
 800ab30:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ab32:	89fb      	ldrh	r3, [r7, #14]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3303      	adds	r3, #3
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	021b      	lsls	r3, r3, #8
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	3202      	adds	r2, #2
 800ab58:	7812      	ldrb	r2, [r2, #0]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	3201      	adds	r2, #1
 800ab66:	7812      	ldrb	r2, [r2, #0]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
	return rv;
 800ab78:	68fb      	ldr	r3, [r7, #12]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	887a      	ldrh	r2, [r7, #2]
 800ab9a:	b2d2      	uxtb	r2, r2
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	887b      	ldrh	r3, [r7, #2]
 800aba0:	0a1b      	lsrs	r3, r3, #8
 800aba2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	607a      	str	r2, [r7, #4]
 800abaa:	887a      	ldrh	r2, [r7, #2]
 800abac:	b2d2      	uxtb	r2, r2
 800abae:	701a      	strb	r2, [r3, #0]
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	701a      	strb	r2, [r3, #0]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	0a1b      	lsrs	r3, r3, #8
 800abd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	607a      	str	r2, [r7, #4]
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	b2d2      	uxtb	r2, r2
 800abe2:	701a      	strb	r2, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	0a1b      	lsrs	r3, r3, #8
 800abe8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	b2d2      	uxtb	r2, r2
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	0a1b      	lsrs	r3, r3, #8
 800abfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	607a      	str	r2, [r7, #4]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	701a      	strb	r2, [r3, #0]
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00d      	beq.n	800ac4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	1c53      	adds	r3, r2, #1
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	1c59      	adds	r1, r3, #1
 800ac38:	6179      	str	r1, [r7, #20]
 800ac3a:	7812      	ldrb	r2, [r2, #0]
 800ac3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	607b      	str	r3, [r7, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f1      	bne.n	800ac2e <mem_cpy+0x1a>
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac56:	b480      	push	{r7}
 800ac58:	b087      	sub	sp, #28
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	617a      	str	r2, [r7, #20]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3b01      	subs	r3, #1
 800ac76:	607b      	str	r3, [r7, #4]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f3      	bne.n	800ac66 <mem_set+0x10>
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	371c      	adds	r7, #28
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac8c:	b480      	push	{r7}
 800ac8e:	b089      	sub	sp, #36	@ 0x24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	61fb      	str	r3, [r7, #28]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	1c5a      	adds	r2, r3, #1
 800aca8:	61fa      	str	r2, [r7, #28]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	4619      	mov	r1, r3
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	61ba      	str	r2, [r7, #24]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	1acb      	subs	r3, r1, r3
 800acb8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	607b      	str	r3, [r7, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <mem_cmp+0x40>
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d0eb      	beq.n	800aca4 <mem_cmp+0x18>

	return r;
 800accc:	697b      	ldr	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3724      	adds	r7, #36	@ 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ace4:	e002      	b.n	800acec <chk_chr+0x12>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3301      	adds	r3, #1
 800acea:	607b      	str	r3, [r7, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <chk_chr+0x26>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	461a      	mov	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d1f2      	bne.n	800ace6 <chk_chr+0xc>
	return *str;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	781b      	ldrb	r3, [r3, #0]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60bb      	str	r3, [r7, #8]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	e029      	b.n	800ad78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ad24:	4a27      	ldr	r2, [pc, #156]	@ (800adc4 <chk_lock+0xb4>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	4413      	add	r3, r2
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d01d      	beq.n	800ad6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad32:	4a24      	ldr	r2, [pc, #144]	@ (800adc4 <chk_lock+0xb4>)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	011b      	lsls	r3, r3, #4
 800ad38:	4413      	add	r3, r2
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d116      	bne.n	800ad72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad44:	4a1f      	ldr	r2, [pc, #124]	@ (800adc4 <chk_lock+0xb4>)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	4413      	add	r3, r2
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d10c      	bne.n	800ad72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad58:	4a1a      	ldr	r2, [pc, #104]	@ (800adc4 <chk_lock+0xb4>)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	011b      	lsls	r3, r3, #4
 800ad5e:	4413      	add	r3, r2
 800ad60:	3308      	adds	r3, #8
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d102      	bne.n	800ad72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad6c:	e007      	b.n	800ad7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3301      	adds	r3, #1
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d9d2      	bls.n	800ad24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d109      	bne.n	800ad98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d102      	bne.n	800ad90 <chk_lock+0x80>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d101      	bne.n	800ad94 <chk_lock+0x84>
 800ad90:	2300      	movs	r3, #0
 800ad92:	e010      	b.n	800adb6 <chk_lock+0xa6>
 800ad94:	2312      	movs	r3, #18
 800ad96:	e00e      	b.n	800adb6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d108      	bne.n	800adb0 <chk_lock+0xa0>
 800ad9e:	4a09      	ldr	r2, [pc, #36]	@ (800adc4 <chk_lock+0xb4>)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	4413      	add	r3, r2
 800ada6:	330c      	adds	r3, #12
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adae:	d101      	bne.n	800adb4 <chk_lock+0xa4>
 800adb0:	2310      	movs	r3, #16
 800adb2:	e000      	b.n	800adb6 <chk_lock+0xa6>
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20005688 	.word	0x20005688

0800adc8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adce:	2300      	movs	r3, #0
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	e002      	b.n	800adda <enq_lock+0x12>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	607b      	str	r3, [r7, #4]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d806      	bhi.n	800adee <enq_lock+0x26>
 800ade0:	4a09      	ldr	r2, [pc, #36]	@ (800ae08 <enq_lock+0x40>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	011b      	lsls	r3, r3, #4
 800ade6:	4413      	add	r3, r2
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1f2      	bne.n	800add4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	bf14      	ite	ne
 800adf4:	2301      	movne	r3, #1
 800adf6:	2300      	moveq	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20005688 	.word	0x20005688

0800ae0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae16:	2300      	movs	r3, #0
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	e01f      	b.n	800ae5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ae1c:	4a41      	ldr	r2, [pc, #260]	@ (800af24 <inc_lock+0x118>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	4413      	add	r3, r2
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d113      	bne.n	800ae56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ae2e:	4a3d      	ldr	r2, [pc, #244]	@ (800af24 <inc_lock+0x118>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	011b      	lsls	r3, r3, #4
 800ae34:	4413      	add	r3, r2
 800ae36:	3304      	adds	r3, #4
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d109      	bne.n	800ae56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae42:	4a38      	ldr	r2, [pc, #224]	@ (800af24 <inc_lock+0x118>)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d006      	beq.n	800ae64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d9dc      	bls.n	800ae1c <inc_lock+0x10>
 800ae62:	e000      	b.n	800ae66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d132      	bne.n	800aed2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e002      	b.n	800ae78 <inc_lock+0x6c>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3301      	adds	r3, #1
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d806      	bhi.n	800ae8c <inc_lock+0x80>
 800ae7e:	4a29      	ldr	r2, [pc, #164]	@ (800af24 <inc_lock+0x118>)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	011b      	lsls	r3, r3, #4
 800ae84:	4413      	add	r3, r2
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1f2      	bne.n	800ae72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d101      	bne.n	800ae96 <inc_lock+0x8a>
 800ae92:	2300      	movs	r3, #0
 800ae94:	e040      	b.n	800af18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	4922      	ldr	r1, [pc, #136]	@ (800af24 <inc_lock+0x118>)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	440b      	add	r3, r1
 800aea2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	491e      	ldr	r1, [pc, #120]	@ (800af24 <inc_lock+0x118>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	440b      	add	r3, r1
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	695a      	ldr	r2, [r3, #20]
 800aeb8:	491a      	ldr	r1, [pc, #104]	@ (800af24 <inc_lock+0x118>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	440b      	add	r3, r1
 800aec0:	3308      	adds	r3, #8
 800aec2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aec4:	4a17      	ldr	r2, [pc, #92]	@ (800af24 <inc_lock+0x118>)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	011b      	lsls	r3, r3, #4
 800aeca:	4413      	add	r3, r2
 800aecc:	330c      	adds	r3, #12
 800aece:	2200      	movs	r2, #0
 800aed0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d009      	beq.n	800aeec <inc_lock+0xe0>
 800aed8:	4a12      	ldr	r2, [pc, #72]	@ (800af24 <inc_lock+0x118>)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	4413      	add	r3, r2
 800aee0:	330c      	adds	r3, #12
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <inc_lock+0xe0>
 800aee8:	2300      	movs	r3, #0
 800aeea:	e015      	b.n	800af18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d108      	bne.n	800af04 <inc_lock+0xf8>
 800aef2:	4a0c      	ldr	r2, [pc, #48]	@ (800af24 <inc_lock+0x118>)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	4413      	add	r3, r2
 800aefa:	330c      	adds	r3, #12
 800aefc:	881b      	ldrh	r3, [r3, #0]
 800aefe:	3301      	adds	r3, #1
 800af00:	b29a      	uxth	r2, r3
 800af02:	e001      	b.n	800af08 <inc_lock+0xfc>
 800af04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af08:	4906      	ldr	r1, [pc, #24]	@ (800af24 <inc_lock+0x118>)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	011b      	lsls	r3, r3, #4
 800af0e:	440b      	add	r3, r1
 800af10:	330c      	adds	r3, #12
 800af12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3301      	adds	r3, #1
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	20005688 	.word	0x20005688

0800af28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3b01      	subs	r3, #1
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d825      	bhi.n	800af88 <dec_lock+0x60>
		n = Files[i].ctr;
 800af3c:	4a17      	ldr	r2, [pc, #92]	@ (800af9c <dec_lock+0x74>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	330c      	adds	r3, #12
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af4a:	89fb      	ldrh	r3, [r7, #14]
 800af4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af50:	d101      	bne.n	800af56 <dec_lock+0x2e>
 800af52:	2300      	movs	r3, #0
 800af54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af56:	89fb      	ldrh	r3, [r7, #14]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <dec_lock+0x3a>
 800af5c:	89fb      	ldrh	r3, [r7, #14]
 800af5e:	3b01      	subs	r3, #1
 800af60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af62:	4a0e      	ldr	r2, [pc, #56]	@ (800af9c <dec_lock+0x74>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	4413      	add	r3, r2
 800af6a:	330c      	adds	r3, #12
 800af6c:	89fa      	ldrh	r2, [r7, #14]
 800af6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800af70:	89fb      	ldrh	r3, [r7, #14]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d105      	bne.n	800af82 <dec_lock+0x5a>
 800af76:	4a09      	ldr	r2, [pc, #36]	@ (800af9c <dec_lock+0x74>)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	4413      	add	r3, r2
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	737b      	strb	r3, [r7, #13]
 800af86:	e001      	b.n	800af8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800af88:	2302      	movs	r3, #2
 800af8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800af8c:	7b7b      	ldrb	r3, [r7, #13]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	20005688 	.word	0x20005688

0800afa0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	e010      	b.n	800afd0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800afae:	4a0d      	ldr	r2, [pc, #52]	@ (800afe4 <clear_lock+0x44>)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	4413      	add	r3, r2
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d105      	bne.n	800afca <clear_lock+0x2a>
 800afbe:	4a09      	ldr	r2, [pc, #36]	@ (800afe4 <clear_lock+0x44>)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	4413      	add	r3, r2
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d9eb      	bls.n	800afae <clear_lock+0xe>
	}
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	20005688 	.word	0x20005688

0800afe8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	78db      	ldrb	r3, [r3, #3]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d034      	beq.n	800b066 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b000:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7858      	ldrb	r0, [r3, #1]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b00c:	2301      	movs	r3, #1
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	f7ff fd40 	bl	800aa94 <disk_write>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	73fb      	strb	r3, [r7, #15]
 800b01e:	e022      	b.n	800b066 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	1ad2      	subs	r2, r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	429a      	cmp	r2, r3
 800b034:	d217      	bcs.n	800b066 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	789b      	ldrb	r3, [r3, #2]
 800b03a:	613b      	str	r3, [r7, #16]
 800b03c:	e010      	b.n	800b060 <sync_window+0x78>
					wsect += fs->fsize;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	7858      	ldrb	r0, [r3, #1]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b052:	2301      	movs	r3, #1
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	f7ff fd1d 	bl	800aa94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d8eb      	bhi.n	800b03e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b066:	7bfb      	ldrb	r3, [r7, #15]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d01b      	beq.n	800b0c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ffad 	bl	800afe8 <sync_window>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d113      	bne.n	800b0c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	7858      	ldrb	r0, [r3, #1]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	f7ff fcd5 	bl	800aa54 <disk_read>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff ff87 	bl	800afe8 <sync_window>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d159      	bne.n	800b198 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d149      	bne.n	800b180 <sync_fs+0xb4>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d145      	bne.n	800b180 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	899b      	ldrh	r3, [r3, #12]
 800b0fe:	461a      	mov	r2, r3
 800b100:	2100      	movs	r1, #0
 800b102:	f7ff fda8 	bl	800ac56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3334      	adds	r3, #52	@ 0x34
 800b10a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b10e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff fd37 	bl	800ab86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3334      	adds	r3, #52	@ 0x34
 800b11c:	4921      	ldr	r1, [pc, #132]	@ (800b1a4 <sync_fs+0xd8>)
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fd4c 	bl	800abbc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3334      	adds	r3, #52	@ 0x34
 800b128:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b12c:	491e      	ldr	r1, [pc, #120]	@ (800b1a8 <sync_fs+0xdc>)
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fd44 	bl	800abbc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3334      	adds	r3, #52	@ 0x34
 800b138:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	4619      	mov	r1, r3
 800b142:	4610      	mov	r0, r2
 800b144:	f7ff fd3a 	bl	800abbc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3334      	adds	r3, #52	@ 0x34
 800b14c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7ff fd30 	bl	800abbc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7858      	ldrb	r0, [r3, #1]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b174:	2301      	movs	r3, #1
 800b176:	f7ff fc8d 	bl	800aa94 <disk_write>
			fs->fsi_flag = 0;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2200      	movs	r2, #0
 800b186:	2100      	movs	r1, #0
 800b188:	4618      	mov	r0, r3
 800b18a:	f7ff fca3 	bl	800aad4 <disk_ioctl>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <sync_fs+0xcc>
 800b194:	2301      	movs	r3, #1
 800b196:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	41615252 	.word	0x41615252
 800b1a8:	61417272 	.word	0x61417272

0800b1ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	3b02      	subs	r3, #2
 800b1ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	3b02      	subs	r3, #2
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d301      	bcc.n	800b1cc <clust2sect+0x20>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e008      	b.n	800b1de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	895b      	ldrh	r3, [r3, #10]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	fb03 f202 	mul.w	r2, r3, r2
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	4413      	add	r3, r2
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d904      	bls.n	800b20a <get_fat+0x20>
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d302      	bcc.n	800b210 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b20a:	2301      	movs	r3, #1
 800b20c:	617b      	str	r3, [r7, #20]
 800b20e:	e0ba      	b.n	800b386 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	f000 8082 	beq.w	800b324 <get_fat+0x13a>
 800b220:	2b03      	cmp	r3, #3
 800b222:	f300 80a6 	bgt.w	800b372 <get_fat+0x188>
 800b226:	2b01      	cmp	r3, #1
 800b228:	d002      	beq.n	800b230 <get_fat+0x46>
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d055      	beq.n	800b2da <get_fat+0xf0>
 800b22e:	e0a0      	b.n	800b372 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	085b      	lsrs	r3, r3, #1
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4413      	add	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	899b      	ldrh	r3, [r3, #12]
 800b246:	4619      	mov	r1, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b24e:	4413      	add	r3, r2
 800b250:	4619      	mov	r1, r3
 800b252:	6938      	ldr	r0, [r7, #16]
 800b254:	f7ff ff0c 	bl	800b070 <move_window>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f040 808c 	bne.w	800b378 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	60fa      	str	r2, [r7, #12]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	8992      	ldrh	r2, [r2, #12]
 800b26a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b26e:	fb01 f202 	mul.w	r2, r1, r2
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4413      	add	r3, r2
 800b278:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b27c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	899b      	ldrh	r3, [r3, #12]
 800b286:	4619      	mov	r1, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b28e:	4413      	add	r3, r2
 800b290:	4619      	mov	r1, r3
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f7ff feec 	bl	800b070 <move_window>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d16e      	bne.n	800b37c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	899b      	ldrh	r3, [r3, #12]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2aa:	fb01 f202 	mul.w	r2, r1, r2
 800b2ae:	1a9b      	subs	r3, r3, r2
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b2b8:	021b      	lsls	r3, r3, #8
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <get_fat+0xe6>
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	091b      	lsrs	r3, r3, #4
 800b2ce:	e002      	b.n	800b2d6 <get_fat+0xec>
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2d6:	617b      	str	r3, [r7, #20]
			break;
 800b2d8:	e055      	b.n	800b386 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	899b      	ldrh	r3, [r3, #12]
 800b2e2:	085b      	lsrs	r3, r3, #1
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6938      	ldr	r0, [r7, #16]
 800b2f4:	f7ff febc 	bl	800b070 <move_window>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d140      	bne.n	800b380 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	8992      	ldrh	r2, [r2, #12]
 800b30c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b310:	fb00 f202 	mul.w	r2, r0, r2
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	440b      	add	r3, r1
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fbf9 	bl	800ab10 <ld_word>
 800b31e:	4603      	mov	r3, r0
 800b320:	617b      	str	r3, [r7, #20]
			break;
 800b322:	e030      	b.n	800b386 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	899b      	ldrh	r3, [r3, #12]
 800b32c:	089b      	lsrs	r3, r3, #2
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4619      	mov	r1, r3
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	fbb3 f3f1 	udiv	r3, r3, r1
 800b338:	4413      	add	r3, r2
 800b33a:	4619      	mov	r1, r3
 800b33c:	6938      	ldr	r0, [r7, #16]
 800b33e:	f7ff fe97 	bl	800b070 <move_window>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11d      	bne.n	800b384 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	8992      	ldrh	r2, [r2, #12]
 800b356:	fbb3 f0f2 	udiv	r0, r3, r2
 800b35a:	fb00 f202 	mul.w	r2, r0, r2
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	440b      	add	r3, r1
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff fbec 	bl	800ab40 <ld_dword>
 800b368:	4603      	mov	r3, r0
 800b36a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b36e:	617b      	str	r3, [r7, #20]
			break;
 800b370:	e009      	b.n	800b386 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b372:	2301      	movs	r3, #1
 800b374:	617b      	str	r3, [r7, #20]
 800b376:	e006      	b.n	800b386 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b378:	bf00      	nop
 800b37a:	e004      	b.n	800b386 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b37c:	bf00      	nop
 800b37e:	e002      	b.n	800b386 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b380:	bf00      	nop
 800b382:	e000      	b.n	800b386 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b384:	bf00      	nop
		}
	}

	return val;
 800b386:	697b      	ldr	r3, [r7, #20]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b390:	b590      	push	{r4, r7, lr}
 800b392:	b089      	sub	sp, #36	@ 0x24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b39c:	2302      	movs	r3, #2
 800b39e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	f240 8109 	bls.w	800b5ba <put_fat+0x22a>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	f080 8103 	bcs.w	800b5ba <put_fat+0x22a>
		switch (fs->fs_type) {
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	f000 80b6 	beq.w	800b52a <put_fat+0x19a>
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	f300 80fb 	bgt.w	800b5ba <put_fat+0x22a>
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d003      	beq.n	800b3d0 <put_fat+0x40>
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	f000 8083 	beq.w	800b4d4 <put_fat+0x144>
 800b3ce:	e0f4      	b.n	800b5ba <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	61bb      	str	r3, [r7, #24]
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	085b      	lsrs	r3, r3, #1
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	4413      	add	r3, r2
 800b3dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	899b      	ldrh	r3, [r3, #12]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7ff fe3c 	bl	800b070 <move_window>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3fc:	7ffb      	ldrb	r3, [r7, #31]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f040 80d4 	bne.w	800b5ac <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	61ba      	str	r2, [r7, #24]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	8992      	ldrh	r2, [r2, #12]
 800b414:	fbb3 f0f2 	udiv	r0, r3, r2
 800b418:	fb00 f202 	mul.w	r2, r0, r2
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	440b      	add	r3, r1
 800b420:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00d      	beq.n	800b448 <put_fat+0xb8>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b25b      	sxtb	r3, r3
 800b432:	f003 030f 	and.w	r3, r3, #15
 800b436:	b25a      	sxtb	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	4313      	orrs	r3, r2
 800b442:	b25b      	sxtb	r3, r3
 800b444:	b2db      	uxtb	r3, r3
 800b446:	e001      	b.n	800b44c <put_fat+0xbc>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2201      	movs	r2, #1
 800b454:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	899b      	ldrh	r3, [r3, #12]
 800b45e:	4619      	mov	r1, r3
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	fbb3 f3f1 	udiv	r3, r3, r1
 800b466:	4413      	add	r3, r2
 800b468:	4619      	mov	r1, r3
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff fe00 	bl	800b070 <move_window>
 800b470:	4603      	mov	r3, r0
 800b472:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b474:	7ffb      	ldrb	r3, [r7, #31]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 809a 	bne.w	800b5b0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	899b      	ldrh	r3, [r3, #12]
 800b486:	461a      	mov	r2, r3
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b48e:	fb00 f202 	mul.w	r2, r0, r2
 800b492:	1a9b      	subs	r3, r3, r2
 800b494:	440b      	add	r3, r1
 800b496:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <put_fat+0x11a>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	091b      	lsrs	r3, r3, #4
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	e00e      	b.n	800b4c8 <put_fat+0x138>
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b25b      	sxtb	r3, r3
 800b4b0:	f023 030f 	bic.w	r3, r3, #15
 800b4b4:	b25a      	sxtb	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	0a1b      	lsrs	r3, r3, #8
 800b4ba:	b25b      	sxtb	r3, r3
 800b4bc:	f003 030f 	and.w	r3, r3, #15
 800b4c0:	b25b      	sxtb	r3, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	b25b      	sxtb	r3, r3
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	70da      	strb	r2, [r3, #3]
			break;
 800b4d2:	e072      	b.n	800b5ba <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	899b      	ldrh	r3, [r3, #12]
 800b4dc:	085b      	lsrs	r3, r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4e8:	4413      	add	r3, r2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f7ff fdbf 	bl	800b070 <move_window>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4f6:	7ffb      	ldrb	r3, [r7, #31]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d15b      	bne.n	800b5b4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	8992      	ldrh	r2, [r2, #12]
 800b50a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b50e:	fb00 f202 	mul.w	r2, r0, r2
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	440b      	add	r3, r1
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	b292      	uxth	r2, r2
 800b51a:	4611      	mov	r1, r2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff fb32 	bl	800ab86 <st_word>
			fs->wflag = 1;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2201      	movs	r2, #1
 800b526:	70da      	strb	r2, [r3, #3]
			break;
 800b528:	e047      	b.n	800b5ba <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	899b      	ldrh	r3, [r3, #12]
 800b532:	089b      	lsrs	r3, r3, #2
 800b534:	b29b      	uxth	r3, r3
 800b536:	4619      	mov	r1, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b53e:	4413      	add	r3, r2
 800b540:	4619      	mov	r1, r3
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff fd94 	bl	800b070 <move_window>
 800b548:	4603      	mov	r3, r0
 800b54a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b54c:	7ffb      	ldrb	r3, [r7, #31]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d132      	bne.n	800b5b8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	8992      	ldrh	r2, [r2, #12]
 800b566:	fbb3 f0f2 	udiv	r0, r3, r2
 800b56a:	fb00 f202 	mul.w	r2, r0, r2
 800b56e:	1a9b      	subs	r3, r3, r2
 800b570:	440b      	add	r3, r1
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fae4 	bl	800ab40 <ld_dword>
 800b578:	4603      	mov	r3, r0
 800b57a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b57e:	4323      	orrs	r3, r4
 800b580:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	8992      	ldrh	r2, [r2, #12]
 800b590:	fbb3 f0f2 	udiv	r0, r3, r2
 800b594:	fb00 f202 	mul.w	r2, r0, r2
 800b598:	1a9b      	subs	r3, r3, r2
 800b59a:	440b      	add	r3, r1
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fb0c 	bl	800abbc <st_dword>
			fs->wflag = 1;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	70da      	strb	r2, [r3, #3]
			break;
 800b5aa:	e006      	b.n	800b5ba <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5ac:	bf00      	nop
 800b5ae:	e004      	b.n	800b5ba <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5b0:	bf00      	nop
 800b5b2:	e002      	b.n	800b5ba <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <put_fat+0x22a>
			if (res != FR_OK) break;
 800b5b8:	bf00      	nop
		}
	}
	return res;
 800b5ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3724      	adds	r7, #36	@ 0x24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd90      	pop	{r4, r7, pc}

0800b5c4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d904      	bls.n	800b5ea <remove_chain+0x26>
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d301      	bcc.n	800b5ee <remove_chain+0x2a>
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	e04b      	b.n	800b686 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00c      	beq.n	800b60e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	69b8      	ldr	r0, [r7, #24]
 800b5fc:	f7ff fec8 	bl	800b390 <put_fat>
 800b600:	4603      	mov	r3, r0
 800b602:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b604:	7ffb      	ldrb	r3, [r7, #31]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <remove_chain+0x4a>
 800b60a:	7ffb      	ldrb	r3, [r7, #31]
 800b60c:	e03b      	b.n	800b686 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff fdea 	bl	800b1ea <get_fat>
 800b616:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d031      	beq.n	800b682 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d101      	bne.n	800b628 <remove_chain+0x64>
 800b624:	2302      	movs	r3, #2
 800b626:	e02e      	b.n	800b686 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62e:	d101      	bne.n	800b634 <remove_chain+0x70>
 800b630:	2301      	movs	r3, #1
 800b632:	e028      	b.n	800b686 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b634:	2200      	movs	r2, #0
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	69b8      	ldr	r0, [r7, #24]
 800b63a:	f7ff fea9 	bl	800b390 <put_fat>
 800b63e:	4603      	mov	r3, r0
 800b640:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b642:	7ffb      	ldrb	r3, [r7, #31]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <remove_chain+0x88>
 800b648:	7ffb      	ldrb	r3, [r7, #31]
 800b64a:	e01c      	b.n	800b686 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	695a      	ldr	r2, [r3, #20]
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	3b02      	subs	r3, #2
 800b656:	429a      	cmp	r2, r3
 800b658:	d20b      	bcs.n	800b672 <remove_chain+0xae>
			fs->free_clst++;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	791b      	ldrb	r3, [r3, #4]
 800b668:	f043 0301 	orr.w	r3, r3, #1
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d3c6      	bcc.n	800b60e <remove_chain+0x4a>
 800b680:	e000      	b.n	800b684 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b682:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b088      	sub	sp, #32
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10d      	bne.n	800b6c0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <create_chain+0x2c>
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d31b      	bcc.n	800b6f2 <create_chain+0x64>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	61bb      	str	r3, [r7, #24]
 800b6be:	e018      	b.n	800b6f2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fd91 	bl	800b1ea <get_fat>
 800b6c8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d801      	bhi.n	800b6d4 <create_chain+0x46>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e070      	b.n	800b7b6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d101      	bne.n	800b6e0 <create_chain+0x52>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	e06a      	b.n	800b7b6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d201      	bcs.n	800b6ee <create_chain+0x60>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	e063      	b.n	800b7b6 <create_chain+0x128>
		scl = clst;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	69fa      	ldr	r2, [r7, #28]
 800b702:	429a      	cmp	r2, r3
 800b704:	d307      	bcc.n	800b716 <create_chain+0x88>
				ncl = 2;
 800b706:	2302      	movs	r3, #2
 800b708:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d901      	bls.n	800b716 <create_chain+0x88>
 800b712:	2300      	movs	r3, #0
 800b714:	e04f      	b.n	800b7b6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b716:	69f9      	ldr	r1, [r7, #28]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff fd66 	bl	800b1ea <get_fat>
 800b71e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00e      	beq.n	800b744 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d003      	beq.n	800b734 <create_chain+0xa6>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d101      	bne.n	800b738 <create_chain+0xaa>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	e03e      	b.n	800b7b6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d1da      	bne.n	800b6f6 <create_chain+0x68>
 800b740:	2300      	movs	r3, #0
 800b742:	e038      	b.n	800b7b6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b744:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b746:	f04f 32ff 	mov.w	r2, #4294967295
 800b74a:	69f9      	ldr	r1, [r7, #28]
 800b74c:	6938      	ldr	r0, [r7, #16]
 800b74e:	f7ff fe1f 	bl	800b390 <put_fat>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <create_chain+0xe2>
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d006      	beq.n	800b770 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	6938      	ldr	r0, [r7, #16]
 800b768:	f7ff fe12 	bl	800b390 <put_fat>
 800b76c:	4603      	mov	r3, r0
 800b76e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d116      	bne.n	800b7a4 <create_chain+0x116>
		fs->last_clst = ncl;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	695a      	ldr	r2, [r3, #20]
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	3b02      	subs	r3, #2
 800b786:	429a      	cmp	r2, r3
 800b788:	d804      	bhi.n	800b794 <create_chain+0x106>
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	1e5a      	subs	r2, r3, #1
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	791b      	ldrb	r3, [r3, #4]
 800b798:	f043 0301 	orr.w	r3, r3, #1
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	711a      	strb	r2, [r3, #4]
 800b7a2:	e007      	b.n	800b7b4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d102      	bne.n	800b7b0 <create_chain+0x122>
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ae:	e000      	b.n	800b7b2 <create_chain+0x124>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b7b4:	69fb      	ldr	r3, [r7, #28]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b087      	sub	sp, #28
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	899b      	ldrh	r3, [r3, #12]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	8952      	ldrh	r2, [r2, #10]
 800b7e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	1d1a      	adds	r2, r3, #4
 800b7f0:	613a      	str	r2, [r7, #16]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <clmt_clust+0x42>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e010      	b.n	800b822 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	429a      	cmp	r2, r3
 800b806:	d307      	bcc.n	800b818 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	617b      	str	r3, [r7, #20]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	3304      	adds	r3, #4
 800b814:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b816:	e7e9      	b.n	800b7ec <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b818:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	4413      	add	r3, r2
}
 800b822:	4618      	mov	r0, r3
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b086      	sub	sp, #24
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b844:	d204      	bcs.n	800b850 <dir_sdi+0x22>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	f003 031f 	and.w	r3, r3, #31
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b850:	2302      	movs	r3, #2
 800b852:	e071      	b.n	800b938 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <dir_sdi+0x46>
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d902      	bls.n	800b874 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b872:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10c      	bne.n	800b894 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	095b      	lsrs	r3, r3, #5
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	8912      	ldrh	r2, [r2, #8]
 800b882:	4293      	cmp	r3, r2
 800b884:	d301      	bcc.n	800b88a <dir_sdi+0x5c>
 800b886:	2302      	movs	r3, #2
 800b888:	e056      	b.n	800b938 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	61da      	str	r2, [r3, #28]
 800b892:	e02d      	b.n	800b8f0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	895b      	ldrh	r3, [r3, #10]
 800b898:	461a      	mov	r2, r3
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	899b      	ldrh	r3, [r3, #12]
 800b89e:	fb02 f303 	mul.w	r3, r2, r3
 800b8a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8a4:	e019      	b.n	800b8da <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6979      	ldr	r1, [r7, #20]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fc9d 	bl	800b1ea <get_fat>
 800b8b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b8:	d101      	bne.n	800b8be <dir_sdi+0x90>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e03c      	b.n	800b938 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d904      	bls.n	800b8ce <dir_sdi+0xa0>
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d301      	bcc.n	800b8d2 <dir_sdi+0xa4>
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e032      	b.n	800b938 <dir_sdi+0x10a>
			ofs -= csz;
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d2e1      	bcs.n	800b8a6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b8e2:	6979      	ldr	r1, [r7, #20]
 800b8e4:	6938      	ldr	r0, [r7, #16]
 800b8e6:	f7ff fc61 	bl	800b1ac <clust2sect>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	69db      	ldr	r3, [r3, #28]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <dir_sdi+0xd4>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e01a      	b.n	800b938 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	69da      	ldr	r2, [r3, #28]
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	899b      	ldrh	r3, [r3, #12]
 800b90a:	4619      	mov	r1, r3
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b912:	441a      	add	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	899b      	ldrh	r3, [r3, #12]
 800b922:	461a      	mov	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	fbb3 f0f2 	udiv	r0, r3, r2
 800b92a:	fb00 f202 	mul.w	r2, r0, r2
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	18ca      	adds	r2, r1, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	3320      	adds	r3, #32
 800b956:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	69db      	ldr	r3, [r3, #28]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <dir_next+0x28>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b966:	d301      	bcc.n	800b96c <dir_next+0x2c>
 800b968:	2304      	movs	r3, #4
 800b96a:	e0bb      	b.n	800bae4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	899b      	ldrh	r3, [r3, #12]
 800b970:	461a      	mov	r2, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	fbb3 f1f2 	udiv	r1, r3, r2
 800b978:	fb01 f202 	mul.w	r2, r1, r2
 800b97c:	1a9b      	subs	r3, r3, r2
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f040 809d 	bne.w	800babe <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10b      	bne.n	800b9ae <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	8912      	ldrh	r2, [r2, #8]
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	f0c0 808d 	bcc.w	800babe <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	61da      	str	r2, [r3, #28]
 800b9aa:	2304      	movs	r3, #4
 800b9ac:	e09a      	b.n	800bae4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	899b      	ldrh	r3, [r3, #12]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	8952      	ldrh	r2, [r2, #10]
 800b9be:	3a01      	subs	r2, #1
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d17b      	bne.n	800babe <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	f7ff fc0b 	bl	800b1ea <get_fat>
 800b9d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d801      	bhi.n	800b9e0 <dir_next+0xa0>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	e081      	b.n	800bae4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e6:	d101      	bne.n	800b9ec <dir_next+0xac>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e07b      	b.n	800bae4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d359      	bcc.n	800baaa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d104      	bne.n	800ba06 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	61da      	str	r2, [r3, #28]
 800ba02:	2304      	movs	r3, #4
 800ba04:	e06e      	b.n	800bae4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4610      	mov	r0, r2
 800ba10:	f7ff fe3d 	bl	800b68e <create_chain>
 800ba14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <dir_next+0xe0>
 800ba1c:	2307      	movs	r3, #7
 800ba1e:	e061      	b.n	800bae4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d101      	bne.n	800ba2a <dir_next+0xea>
 800ba26:	2302      	movs	r3, #2
 800ba28:	e05c      	b.n	800bae4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba30:	d101      	bne.n	800ba36 <dir_next+0xf6>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e056      	b.n	800bae4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f7ff fad6 	bl	800afe8 <sync_window>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <dir_next+0x106>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e04e      	b.n	800bae4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	899b      	ldrh	r3, [r3, #12]
 800ba50:	461a      	mov	r2, r3
 800ba52:	2100      	movs	r1, #0
 800ba54:	f7ff f8ff 	bl	800ac56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba58:	2300      	movs	r3, #0
 800ba5a:	613b      	str	r3, [r7, #16]
 800ba5c:	6979      	ldr	r1, [r7, #20]
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff fba4 	bl	800b1ac <clust2sect>
 800ba64:	4602      	mov	r2, r0
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba6a:	e012      	b.n	800ba92 <dir_next+0x152>
						fs->wflag = 1;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff fab8 	bl	800afe8 <sync_window>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <dir_next+0x142>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e030      	b.n	800bae4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	3301      	adds	r3, #1
 800ba86:	613b      	str	r3, [r7, #16]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	895b      	ldrh	r3, [r3, #10]
 800ba96:	461a      	mov	r2, r3
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d3e6      	bcc.n	800ba6c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	1ad2      	subs	r2, r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bab0:	6979      	ldr	r1, [r7, #20]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fb7a 	bl	800b1ac <clust2sect>
 800bab8:	4602      	mov	r2, r0
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	899b      	ldrh	r3, [r3, #12]
 800bace:	461a      	mov	r2, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bad6:	fb00 f202 	mul.w	r2, r0, r2
 800bada:	1a9b      	subs	r3, r3, r2
 800badc:	18ca      	adds	r2, r1, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bafc:	2100      	movs	r1, #0
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fe95 	bl	800b82e <dir_sdi>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d12b      	bne.n	800bb66 <dir_alloc+0x7a>
		n = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	4619      	mov	r1, r3
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f7ff faa9 	bl	800b070 <move_window>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11d      	bne.n	800bb64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2be5      	cmp	r3, #229	@ 0xe5
 800bb30:	d004      	beq.n	800bb3c <dir_alloc+0x50>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d107      	bne.n	800bb4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	613b      	str	r3, [r7, #16]
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d102      	bne.n	800bb50 <dir_alloc+0x64>
 800bb4a:	e00c      	b.n	800bb66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb50:	2101      	movs	r1, #1
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff fef4 	bl	800b940 <dir_next>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d0d7      	beq.n	800bb12 <dir_alloc+0x26>
 800bb62:	e000      	b.n	800bb66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb66:	7dfb      	ldrb	r3, [r7, #23]
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d101      	bne.n	800bb70 <dir_alloc+0x84>
 800bb6c:	2307      	movs	r3, #7
 800bb6e:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	331a      	adds	r3, #26
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe ffc1 	bl	800ab10 <ld_word>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d109      	bne.n	800bbae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	3314      	adds	r3, #20
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe ffb6 	bl	800ab10 <ld_word>
 800bba4:	4603      	mov	r3, r0
 800bba6:	041b      	lsls	r3, r3, #16
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbae:	68fb      	ldr	r3, [r7, #12]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	331a      	adds	r3, #26
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	b292      	uxth	r2, r2
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe ffd9 	bl	800ab86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d109      	bne.n	800bbf0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f103 0214 	add.w	r2, r3, #20
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	0c1b      	lsrs	r3, r3, #16
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fe ffcb 	bl	800ab86 <st_word>
	}
}
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc06:	2100      	movs	r1, #0
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff fe10 	bl	800b82e <dir_sdi>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc12:	7dfb      	ldrb	r3, [r7, #23]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <dir_find+0x24>
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
 800bc1a:	e03e      	b.n	800bc9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	69db      	ldr	r3, [r3, #28]
 800bc20:	4619      	mov	r1, r3
 800bc22:	6938      	ldr	r0, [r7, #16]
 800bc24:	f7ff fa24 	bl	800b070 <move_window>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d12f      	bne.n	800bc92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <dir_find+0x4e>
 800bc40:	2304      	movs	r3, #4
 800bc42:	75fb      	strb	r3, [r7, #23]
 800bc44:	e028      	b.n	800bc98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	330b      	adds	r3, #11
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	330b      	adds	r3, #11
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <dir_find+0x86>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a18      	ldr	r0, [r3, #32]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3324      	adds	r3, #36	@ 0x24
 800bc70:	220b      	movs	r2, #11
 800bc72:	4619      	mov	r1, r3
 800bc74:	f7ff f80a 	bl	800ac8c <mem_cmp>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00b      	beq.n	800bc96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff fe5d 	bl	800b940 <dir_next>
 800bc86:	4603      	mov	r3, r0
 800bc88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0c5      	beq.n	800bc1c <dir_find+0x24>
 800bc90:	e002      	b.n	800bc98 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bc92:	bf00      	nop
 800bc94:	e000      	b.n	800bc98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc96:	bf00      	nop

	return res;
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff ff1a 	bl	800baec <dir_alloc>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d11c      	bne.n	800bcfc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	68b8      	ldr	r0, [r7, #8]
 800bcca:	f7ff f9d1 	bl	800b070 <move_window>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d111      	bne.n	800bcfc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	2220      	movs	r2, #32
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fe ffb8 	bl	800ac56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a18      	ldr	r0, [r3, #32]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3324      	adds	r3, #36	@ 0x24
 800bcee:	220b      	movs	r2, #11
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	f7fe ff8f 	bl	800ac14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2200      	movs	r2, #0
 800bd14:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d04f      	beq.n	800bdbe <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bd26:	e022      	b.n	800bd6e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a1a      	ldr	r2, [r3, #32]
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	1c59      	adds	r1, r3, #1
 800bd30:	6179      	str	r1, [r7, #20]
 800bd32:	4413      	add	r3, r2
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	2b20      	cmp	r3, #32
 800bd3c:	d016      	beq.n	800bd6c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	2b05      	cmp	r3, #5
 800bd42:	d101      	bne.n	800bd48 <get_fileinfo+0x42>
 800bd44:	23e5      	movs	r3, #229	@ 0xe5
 800bd46:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b09      	cmp	r3, #9
 800bd4c:	d106      	bne.n	800bd5c <get_fileinfo+0x56>
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	613a      	str	r2, [r7, #16]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	4413      	add	r3, r2
 800bd58:	222e      	movs	r2, #46	@ 0x2e
 800bd5a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	1c5a      	adds	r2, r3, #1
 800bd60:	613a      	str	r2, [r7, #16]
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4413      	add	r3, r2
 800bd66:	7bfa      	ldrb	r2, [r7, #15]
 800bd68:	725a      	strb	r2, [r3, #9]
 800bd6a:	e000      	b.n	800bd6e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd6c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	2b0a      	cmp	r3, #10
 800bd72:	d9d9      	bls.n	800bd28 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	4413      	add	r3, r2
 800bd7a:	3309      	adds	r3, #9
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	7ada      	ldrb	r2, [r3, #11]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	331c      	adds	r3, #28
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe fed5 	bl	800ab40 <ld_dword>
 800bd96:	4602      	mov	r2, r0
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	3316      	adds	r3, #22
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fecc 	bl	800ab40 <ld_dword>
 800bda8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	80da      	strh	r2, [r3, #6]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	809a      	strh	r2, [r3, #4]
 800bdbc:	e000      	b.n	800bdc0 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bdbe:	bf00      	nop
}
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
	...

0800bdc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3324      	adds	r3, #36	@ 0x24
 800bddc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bdde:	220b      	movs	r2, #11
 800bde0:	2120      	movs	r1, #32
 800bde2:	68b8      	ldr	r0, [r7, #8]
 800bde4:	f7fe ff37 	bl	800ac56 <mem_set>
	si = i = 0; ni = 8;
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	61fa      	str	r2, [r7, #28]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be02:	7efb      	ldrb	r3, [r7, #27]
 800be04:	2b20      	cmp	r3, #32
 800be06:	d94e      	bls.n	800bea6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800be08:	7efb      	ldrb	r3, [r7, #27]
 800be0a:	2b2f      	cmp	r3, #47	@ 0x2f
 800be0c:	d006      	beq.n	800be1c <create_name+0x54>
 800be0e:	7efb      	ldrb	r3, [r7, #27]
 800be10:	2b5c      	cmp	r3, #92	@ 0x5c
 800be12:	d110      	bne.n	800be36 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be14:	e002      	b.n	800be1c <create_name+0x54>
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	3301      	adds	r3, #1
 800be1a:	61fb      	str	r3, [r7, #28]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	4413      	add	r3, r2
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b2f      	cmp	r3, #47	@ 0x2f
 800be26:	d0f6      	beq.n	800be16 <create_name+0x4e>
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	4413      	add	r3, r2
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b5c      	cmp	r3, #92	@ 0x5c
 800be32:	d0f0      	beq.n	800be16 <create_name+0x4e>
			break;
 800be34:	e038      	b.n	800bea8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800be36:	7efb      	ldrb	r3, [r7, #27]
 800be38:	2b2e      	cmp	r3, #46	@ 0x2e
 800be3a:	d003      	beq.n	800be44 <create_name+0x7c>
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	429a      	cmp	r2, r3
 800be42:	d30c      	bcc.n	800be5e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2b0b      	cmp	r3, #11
 800be48:	d002      	beq.n	800be50 <create_name+0x88>
 800be4a:	7efb      	ldrb	r3, [r7, #27]
 800be4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800be4e:	d001      	beq.n	800be54 <create_name+0x8c>
 800be50:	2306      	movs	r3, #6
 800be52:	e044      	b.n	800bede <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800be54:	2308      	movs	r3, #8
 800be56:	613b      	str	r3, [r7, #16]
 800be58:	230b      	movs	r3, #11
 800be5a:	617b      	str	r3, [r7, #20]
			continue;
 800be5c:	e022      	b.n	800bea4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800be5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be62:	2b00      	cmp	r3, #0
 800be64:	da04      	bge.n	800be70 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be66:	7efb      	ldrb	r3, [r7, #27]
 800be68:	3b80      	subs	r3, #128	@ 0x80
 800be6a:	4a1f      	ldr	r2, [pc, #124]	@ (800bee8 <create_name+0x120>)
 800be6c:	5cd3      	ldrb	r3, [r2, r3]
 800be6e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be70:	7efb      	ldrb	r3, [r7, #27]
 800be72:	4619      	mov	r1, r3
 800be74:	481d      	ldr	r0, [pc, #116]	@ (800beec <create_name+0x124>)
 800be76:	f7fe ff30 	bl	800acda <chk_chr>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <create_name+0xbc>
 800be80:	2306      	movs	r3, #6
 800be82:	e02c      	b.n	800bede <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be84:	7efb      	ldrb	r3, [r7, #27]
 800be86:	2b60      	cmp	r3, #96	@ 0x60
 800be88:	d905      	bls.n	800be96 <create_name+0xce>
 800be8a:	7efb      	ldrb	r3, [r7, #27]
 800be8c:	2b7a      	cmp	r3, #122	@ 0x7a
 800be8e:	d802      	bhi.n	800be96 <create_name+0xce>
 800be90:	7efb      	ldrb	r3, [r7, #27]
 800be92:	3b20      	subs	r3, #32
 800be94:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	613a      	str	r2, [r7, #16]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	4413      	add	r3, r2
 800bea0:	7efa      	ldrb	r2, [r7, #27]
 800bea2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bea4:	e7a6      	b.n	800bdf4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bea6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	441a      	add	r2, r3
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <create_name+0xf4>
 800beb8:	2306      	movs	r3, #6
 800beba:	e010      	b.n	800bede <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2be5      	cmp	r3, #229	@ 0xe5
 800bec2:	d102      	bne.n	800beca <create_name+0x102>
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2205      	movs	r2, #5
 800bec8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800beca:	7efb      	ldrb	r3, [r7, #27]
 800becc:	2b20      	cmp	r3, #32
 800bece:	d801      	bhi.n	800bed4 <create_name+0x10c>
 800bed0:	2204      	movs	r2, #4
 800bed2:	e000      	b.n	800bed6 <create_name+0x10e>
 800bed4:	2200      	movs	r2, #0
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	330b      	adds	r3, #11
 800beda:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bedc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	080103a8 	.word	0x080103a8
 800beec:	08010324 	.word	0x08010324

0800bef0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bf04:	e002      	b.n	800bf0c <follow_path+0x1c>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b2f      	cmp	r3, #47	@ 0x2f
 800bf12:	d0f8      	beq.n	800bf06 <follow_path+0x16>
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b5c      	cmp	r3, #92	@ 0x5c
 800bf1a:	d0f4      	beq.n	800bf06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b1f      	cmp	r3, #31
 800bf28:	d80a      	bhi.n	800bf40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2280      	movs	r2, #128	@ 0x80
 800bf2e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bf32:	2100      	movs	r1, #0
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff fc7a 	bl	800b82e <dir_sdi>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	75fb      	strb	r3, [r7, #23]
 800bf3e:	e048      	b.n	800bfd2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf40:	463b      	mov	r3, r7
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7ff ff3f 	bl	800bdc8 <create_name>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d139      	bne.n	800bfc8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff fe4f 	bl	800bbf8 <dir_find>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bf64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00a      	beq.n	800bf82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	d12c      	bne.n	800bfcc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf72:	7afb      	ldrb	r3, [r7, #11]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d127      	bne.n	800bfcc <follow_path+0xdc>
 800bf7c:	2305      	movs	r3, #5
 800bf7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf80:	e024      	b.n	800bfcc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf82:	7afb      	ldrb	r3, [r7, #11]
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d121      	bne.n	800bfd0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	799b      	ldrb	r3, [r3, #6]
 800bf90:	f003 0310 	and.w	r3, r3, #16
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf98:	2305      	movs	r3, #5
 800bf9a:	75fb      	strb	r3, [r7, #23]
 800bf9c:	e019      	b.n	800bfd2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	8992      	ldrh	r2, [r2, #12]
 800bfac:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfb0:	fb00 f202 	mul.w	r2, r0, r2
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	440b      	add	r3, r1
 800bfb8:	4619      	mov	r1, r3
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7ff fddd 	bl	800bb7a <ld_clust>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bfc6:	e7bb      	b.n	800bf40 <follow_path+0x50>
			if (res != FR_OK) break;
 800bfc8:	bf00      	nop
 800bfca:	e002      	b.n	800bfd2 <follow_path+0xe2>
				break;
 800bfcc:	bf00      	nop
 800bfce:	e000      	b.n	800bfd2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bfd0:	bf00      	nop
			}
		}
	}

	return res;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d031      	beq.n	800c056 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	617b      	str	r3, [r7, #20]
 800bff8:	e002      	b.n	800c000 <get_ldnumber+0x24>
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	3301      	adds	r3, #1
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b20      	cmp	r3, #32
 800c006:	d903      	bls.n	800c010 <get_ldnumber+0x34>
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b3a      	cmp	r3, #58	@ 0x3a
 800c00e:	d1f4      	bne.n	800bffa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b3a      	cmp	r3, #58	@ 0x3a
 800c016:	d11c      	bne.n	800c052 <get_ldnumber+0x76>
			tp = *path;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	60fa      	str	r2, [r7, #12]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	3b30      	subs	r3, #48	@ 0x30
 800c028:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b09      	cmp	r3, #9
 800c02e:	d80e      	bhi.n	800c04e <get_ldnumber+0x72>
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	429a      	cmp	r2, r3
 800c036:	d10a      	bne.n	800c04e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d107      	bne.n	800c04e <get_ldnumber+0x72>
					vol = (int)i;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	3301      	adds	r3, #1
 800c046:	617b      	str	r3, [r7, #20]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	e002      	b.n	800c058 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c052:	2300      	movs	r3, #0
 800c054:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c056:	693b      	ldr	r3, [r7, #16]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	371c      	adds	r7, #28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	70da      	strb	r2, [r3, #3]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f04f 32ff 	mov.w	r2, #4294967295
 800c07a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7fe fff6 	bl	800b070 <move_window>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <check_fs+0x2a>
 800c08a:	2304      	movs	r3, #4
 800c08c:	e038      	b.n	800c100 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3334      	adds	r3, #52	@ 0x34
 800c092:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fd3a 	bl	800ab10 <ld_word>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d001      	beq.n	800c0ac <check_fs+0x48>
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e029      	b.n	800c100 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0b2:	2be9      	cmp	r3, #233	@ 0xe9
 800c0b4:	d009      	beq.n	800c0ca <check_fs+0x66>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0bc:	2beb      	cmp	r3, #235	@ 0xeb
 800c0be:	d11e      	bne.n	800c0fe <check_fs+0x9a>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c0c6:	2b90      	cmp	r3, #144	@ 0x90
 800c0c8:	d119      	bne.n	800c0fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3334      	adds	r3, #52	@ 0x34
 800c0ce:	3336      	adds	r3, #54	@ 0x36
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe fd35 	bl	800ab40 <ld_dword>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c0dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c108 <check_fs+0xa4>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d101      	bne.n	800c0e6 <check_fs+0x82>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e00c      	b.n	800c100 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	3334      	adds	r3, #52	@ 0x34
 800c0ea:	3352      	adds	r3, #82	@ 0x52
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fd27 	bl	800ab40 <ld_dword>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	4a05      	ldr	r2, [pc, #20]	@ (800c10c <check_fs+0xa8>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d101      	bne.n	800c0fe <check_fs+0x9a>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e000      	b.n	800c100 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c0fe:	2302      	movs	r3, #2
}
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	00544146 	.word	0x00544146
 800c10c:	33544146 	.word	0x33544146

0800c110 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b096      	sub	sp, #88	@ 0x58
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	4613      	mov	r3, r2
 800c11c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f7ff ff59 	bl	800bfdc <get_ldnumber>
 800c12a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c12e:	2b00      	cmp	r3, #0
 800c130:	da01      	bge.n	800c136 <find_volume+0x26>
 800c132:	230b      	movs	r3, #11
 800c134:	e262      	b.n	800c5fc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c136:	4a9f      	ldr	r2, [pc, #636]	@ (800c3b4 <find_volume+0x2a4>)
 800c138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	2b00      	cmp	r3, #0
 800c144:	d101      	bne.n	800c14a <find_volume+0x3a>
 800c146:	230c      	movs	r3, #12
 800c148:	e258      	b.n	800c5fc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c14e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	f023 0301 	bic.w	r3, r3, #1
 800c156:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01a      	beq.n	800c196 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c162:	785b      	ldrb	r3, [r3, #1]
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe fc35 	bl	800a9d4 <disk_status>
 800c16a:	4603      	mov	r3, r0
 800c16c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c170:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10c      	bne.n	800c196 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d007      	beq.n	800c192 <find_volume+0x82>
 800c182:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c18e:	230a      	movs	r3, #10
 800c190:	e234      	b.n	800c5fc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c192:	2300      	movs	r3, #0
 800c194:	e232      	b.n	800c5fc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a6:	785b      	ldrb	r3, [r3, #1]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fe fc2d 	bl	800aa08 <disk_initialize>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e21b      	b.n	800c5fc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c1c4:	79fb      	ldrb	r3, [r7, #7]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <find_volume+0xca>
 800c1ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c1ce:	f003 0304 	and.w	r3, r3, #4
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c1d6:	230a      	movs	r3, #10
 800c1d8:	e210      	b.n	800c5fc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1dc:	7858      	ldrb	r0, [r3, #1]
 800c1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e0:	330c      	adds	r3, #12
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	2102      	movs	r1, #2
 800c1e6:	f7fe fc75 	bl	800aad4 <disk_ioctl>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <find_volume+0xe4>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e203      	b.n	800c5fc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f6:	899b      	ldrh	r3, [r3, #12]
 800c1f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1fc:	d80d      	bhi.n	800c21a <find_volume+0x10a>
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c200:	899b      	ldrh	r3, [r3, #12]
 800c202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c206:	d308      	bcc.n	800c21a <find_volume+0x10a>
 800c208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c20a:	899b      	ldrh	r3, [r3, #12]
 800c20c:	461a      	mov	r2, r3
 800c20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c210:	899b      	ldrh	r3, [r3, #12]
 800c212:	3b01      	subs	r3, #1
 800c214:	4013      	ands	r3, r2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <find_volume+0x10e>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e1ee      	b.n	800c5fc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c222:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c226:	f7ff ff1d 	bl	800c064 <check_fs>
 800c22a:	4603      	mov	r3, r0
 800c22c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c234:	2b02      	cmp	r3, #2
 800c236:	d149      	bne.n	800c2cc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c238:	2300      	movs	r3, #0
 800c23a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c23c:	e01e      	b.n	800c27c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c240:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c246:	011b      	lsls	r3, r3, #4
 800c248:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c24c:	4413      	add	r3, r2
 800c24e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c252:	3304      	adds	r3, #4
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d006      	beq.n	800c268 <find_volume+0x158>
 800c25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25c:	3308      	adds	r3, #8
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fc6e 	bl	800ab40 <ld_dword>
 800c264:	4602      	mov	r2, r0
 800c266:	e000      	b.n	800c26a <find_volume+0x15a>
 800c268:	2200      	movs	r2, #0
 800c26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	3358      	adds	r3, #88	@ 0x58
 800c270:	443b      	add	r3, r7
 800c272:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c278:	3301      	adds	r3, #1
 800c27a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d9dd      	bls.n	800c23e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c282:	2300      	movs	r3, #0
 800c284:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <find_volume+0x182>
 800c28c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c28e:	3b01      	subs	r3, #1
 800c290:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	3358      	adds	r3, #88	@ 0x58
 800c298:	443b      	add	r3, r7
 800c29a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c29e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d005      	beq.n	800c2b2 <find_volume+0x1a2>
 800c2a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c2a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2aa:	f7ff fedb 	bl	800c064 <check_fs>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	e000      	b.n	800c2b4 <find_volume+0x1a4>
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d905      	bls.n	800c2cc <find_volume+0x1bc>
 800c2c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c8:	2b03      	cmp	r3, #3
 800c2ca:	d9e2      	bls.n	800c292 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2d0:	2b04      	cmp	r3, #4
 800c2d2:	d101      	bne.n	800c2d8 <find_volume+0x1c8>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e191      	b.n	800c5fc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c2d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d901      	bls.n	800c2e4 <find_volume+0x1d4>
 800c2e0:	230d      	movs	r3, #13
 800c2e2:	e18b      	b.n	800c5fc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e6:	3334      	adds	r3, #52	@ 0x34
 800c2e8:	330b      	adds	r3, #11
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fc10 	bl	800ab10 <ld_word>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f6:	899b      	ldrh	r3, [r3, #12]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d001      	beq.n	800c300 <find_volume+0x1f0>
 800c2fc:	230d      	movs	r3, #13
 800c2fe:	e17d      	b.n	800c5fc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	3334      	adds	r3, #52	@ 0x34
 800c304:	3316      	adds	r3, #22
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe fc02 	bl	800ab10 <ld_word>
 800c30c:	4603      	mov	r3, r0
 800c30e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <find_volume+0x214>
 800c316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c318:	3334      	adds	r3, #52	@ 0x34
 800c31a:	3324      	adds	r3, #36	@ 0x24
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe fc0f 	bl	800ab40 <ld_dword>
 800c322:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c328:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c332:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	789b      	ldrb	r3, [r3, #2]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d005      	beq.n	800c348 <find_volume+0x238>
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	789b      	ldrb	r3, [r3, #2]
 800c340:	2b02      	cmp	r3, #2
 800c342:	d001      	beq.n	800c348 <find_volume+0x238>
 800c344:	230d      	movs	r3, #13
 800c346:	e159      	b.n	800c5fc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34a:	789b      	ldrb	r3, [r3, #2]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c350:	fb02 f303 	mul.w	r3, r2, r3
 800c354:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c35c:	461a      	mov	r2, r3
 800c35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c360:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c364:	895b      	ldrh	r3, [r3, #10]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d008      	beq.n	800c37c <find_volume+0x26c>
 800c36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36c:	895b      	ldrh	r3, [r3, #10]
 800c36e:	461a      	mov	r2, r3
 800c370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c372:	895b      	ldrh	r3, [r3, #10]
 800c374:	3b01      	subs	r3, #1
 800c376:	4013      	ands	r3, r2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <find_volume+0x270>
 800c37c:	230d      	movs	r3, #13
 800c37e:	e13d      	b.n	800c5fc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	3334      	adds	r3, #52	@ 0x34
 800c384:	3311      	adds	r3, #17
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fbc2 	bl	800ab10 <ld_word>
 800c38c:	4603      	mov	r3, r0
 800c38e:	461a      	mov	r2, r3
 800c390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c392:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	891b      	ldrh	r3, [r3, #8]
 800c398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c39a:	8992      	ldrh	r2, [r2, #12]
 800c39c:	0952      	lsrs	r2, r2, #5
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3a4:	fb01 f202 	mul.w	r2, r1, r2
 800c3a8:	1a9b      	subs	r3, r3, r2
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d003      	beq.n	800c3b8 <find_volume+0x2a8>
 800c3b0:	230d      	movs	r3, #13
 800c3b2:	e123      	b.n	800c5fc <find_volume+0x4ec>
 800c3b4:	20005680 	.word	0x20005680

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ba:	3334      	adds	r3, #52	@ 0x34
 800c3bc:	3313      	adds	r3, #19
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fba6 	bl	800ab10 <ld_word>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c3c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <find_volume+0x2cc>
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d0:	3334      	adds	r3, #52	@ 0x34
 800c3d2:	3320      	adds	r3, #32
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fe fbb3 	bl	800ab40 <ld_dword>
 800c3da:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3de:	3334      	adds	r3, #52	@ 0x34
 800c3e0:	330e      	adds	r3, #14
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fb94 	bl	800ab10 <ld_word>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c3ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <find_volume+0x2e6>
 800c3f2:	230d      	movs	r3, #13
 800c3f4:	e102      	b.n	800c5fc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c3f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3fa:	4413      	add	r3, r2
 800c3fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3fe:	8911      	ldrh	r1, [r2, #8]
 800c400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c402:	8992      	ldrh	r2, [r2, #12]
 800c404:	0952      	lsrs	r2, r2, #5
 800c406:	b292      	uxth	r2, r2
 800c408:	fbb1 f2f2 	udiv	r2, r1, r2
 800c40c:	b292      	uxth	r2, r2
 800c40e:	4413      	add	r3, r2
 800c410:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	429a      	cmp	r2, r3
 800c418:	d201      	bcs.n	800c41e <find_volume+0x30e>
 800c41a:	230d      	movs	r3, #13
 800c41c:	e0ee      	b.n	800c5fc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c41e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c426:	8952      	ldrh	r2, [r2, #10]
 800c428:	fbb3 f3f2 	udiv	r3, r3, r2
 800c42c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <find_volume+0x328>
 800c434:	230d      	movs	r3, #13
 800c436:	e0e1      	b.n	800c5fc <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c438:	2303      	movs	r3, #3
 800c43a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c444:	4293      	cmp	r3, r2
 800c446:	d802      	bhi.n	800c44e <find_volume+0x33e>
 800c448:	2302      	movs	r3, #2
 800c44a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c450:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c454:	4293      	cmp	r3, r2
 800c456:	d802      	bhi.n	800c45e <find_volume+0x34e>
 800c458:	2301      	movs	r3, #1
 800c45a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	1c9a      	adds	r2, r3, #2
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c46a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c46c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c46e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c470:	441a      	add	r2, r3
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c476:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47a:	441a      	add	r2, r3
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c480:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c484:	2b03      	cmp	r3, #3
 800c486:	d11e      	bne.n	800c4c6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48a:	3334      	adds	r3, #52	@ 0x34
 800c48c:	332a      	adds	r3, #42	@ 0x2a
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fb3e 	bl	800ab10 <ld_word>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <find_volume+0x38e>
 800c49a:	230d      	movs	r3, #13
 800c49c:	e0ae      	b.n	800c5fc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a0:	891b      	ldrh	r3, [r3, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <find_volume+0x39a>
 800c4a6:	230d      	movs	r3, #13
 800c4a8:	e0a8      	b.n	800c5fc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	3334      	adds	r3, #52	@ 0x34
 800c4ae:	332c      	adds	r3, #44	@ 0x2c
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe fb45 	bl	800ab40 <ld_dword>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ba:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4c4:	e01f      	b.n	800c506 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	891b      	ldrh	r3, [r3, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <find_volume+0x3c2>
 800c4ce:	230d      	movs	r3, #13
 800c4d0:	e094      	b.n	800c5fc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4d8:	441a      	add	r2, r3
 800c4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4dc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c4de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d103      	bne.n	800c4ee <find_volume+0x3de>
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	e00a      	b.n	800c504 <find_volume+0x3f4>
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f0:	699a      	ldr	r2, [r3, #24]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	4413      	add	r3, r2
 800c4f8:	085a      	lsrs	r2, r3, #1
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c504:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c508:	69da      	ldr	r2, [r3, #28]
 800c50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50c:	899b      	ldrh	r3, [r3, #12]
 800c50e:	4619      	mov	r1, r3
 800c510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c512:	440b      	add	r3, r1
 800c514:	3b01      	subs	r3, #1
 800c516:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c518:	8989      	ldrh	r1, [r1, #12]
 800c51a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c51e:	429a      	cmp	r2, r3
 800c520:	d201      	bcs.n	800c526 <find_volume+0x416>
 800c522:	230d      	movs	r3, #13
 800c524:	e06a      	b.n	800c5fc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c528:	f04f 32ff 	mov.w	r2, #4294967295
 800c52c:	615a      	str	r2, [r3, #20]
 800c52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c530:	695a      	ldr	r2, [r3, #20]
 800c532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c534:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c538:	2280      	movs	r2, #128	@ 0x80
 800c53a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c53c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c540:	2b03      	cmp	r3, #3
 800c542:	d149      	bne.n	800c5d8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c546:	3334      	adds	r3, #52	@ 0x34
 800c548:	3330      	adds	r3, #48	@ 0x30
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fae0 	bl	800ab10 <ld_word>
 800c550:	4603      	mov	r3, r0
 800c552:	2b01      	cmp	r3, #1
 800c554:	d140      	bne.n	800c5d8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c558:	3301      	adds	r3, #1
 800c55a:	4619      	mov	r1, r3
 800c55c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c55e:	f7fe fd87 	bl	800b070 <move_window>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d137      	bne.n	800c5d8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56a:	2200      	movs	r2, #0
 800c56c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c570:	3334      	adds	r3, #52	@ 0x34
 800c572:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe faca 	bl	800ab10 <ld_word>
 800c57c:	4603      	mov	r3, r0
 800c57e:	461a      	mov	r2, r3
 800c580:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c584:	429a      	cmp	r2, r3
 800c586:	d127      	bne.n	800c5d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58a:	3334      	adds	r3, #52	@ 0x34
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fad7 	bl	800ab40 <ld_dword>
 800c592:	4603      	mov	r3, r0
 800c594:	4a1b      	ldr	r2, [pc, #108]	@ (800c604 <find_volume+0x4f4>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d11e      	bne.n	800c5d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59c:	3334      	adds	r3, #52	@ 0x34
 800c59e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe facc 	bl	800ab40 <ld_dword>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	4a17      	ldr	r2, [pc, #92]	@ (800c608 <find_volume+0x4f8>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d113      	bne.n	800c5d8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b2:	3334      	adds	r3, #52	@ 0x34
 800c5b4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fe fac1 	bl	800ab40 <ld_dword>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	3334      	adds	r3, #52	@ 0x34
 800c5c8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe fab7 	bl	800ab40 <ld_dword>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5da:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c5de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c5e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c60c <find_volume+0x4fc>)
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	4b08      	ldr	r3, [pc, #32]	@ (800c60c <find_volume+0x4fc>)
 800c5ea:	801a      	strh	r2, [r3, #0]
 800c5ec:	4b07      	ldr	r3, [pc, #28]	@ (800c60c <find_volume+0x4fc>)
 800c5ee:	881a      	ldrh	r2, [r3, #0]
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c5f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c5f6:	f7fe fcd3 	bl	800afa0 <clear_lock>
#endif
	return FR_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3758      	adds	r7, #88	@ 0x58
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	41615252 	.word	0x41615252
 800c608:	61417272 	.word	0x61417272
 800c60c:	20005684 	.word	0x20005684

0800c610 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c61a:	2309      	movs	r3, #9
 800c61c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01c      	beq.n	800c65e <validate+0x4e>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d018      	beq.n	800c65e <validate+0x4e>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d013      	beq.n	800c65e <validate+0x4e>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	889a      	ldrh	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	88db      	ldrh	r3, [r3, #6]
 800c640:	429a      	cmp	r2, r3
 800c642:	d10c      	bne.n	800c65e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	785b      	ldrb	r3, [r3, #1]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe f9c2 	bl	800a9d4 <disk_status>
 800c650:	4603      	mov	r3, r0
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <validate+0x4e>
			res = FR_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d102      	bne.n	800c66a <validate+0x5a>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	e000      	b.n	800c66c <validate+0x5c>
 800c66a:	2300      	movs	r3, #0
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	6013      	str	r3, [r2, #0]
	return res;
 800c670:	7bfb      	ldrb	r3, [r7, #15]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	4613      	mov	r3, r2
 800c688:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c68e:	f107 0310 	add.w	r3, r7, #16
 800c692:	4618      	mov	r0, r3
 800c694:	f7ff fca2 	bl	800bfdc <get_ldnumber>
 800c698:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da01      	bge.n	800c6a4 <f_mount+0x28>
 800c6a0:	230b      	movs	r3, #11
 800c6a2:	e02b      	b.n	800c6fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c6a4:	4a17      	ldr	r2, [pc, #92]	@ (800c704 <f_mount+0x88>)
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d005      	beq.n	800c6c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c6b4:	69b8      	ldr	r0, [r7, #24]
 800c6b6:	f7fe fc73 	bl	800afa0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d002      	beq.n	800c6cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	490d      	ldr	r1, [pc, #52]	@ (800c704 <f_mount+0x88>)
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <f_mount+0x66>
 800c6dc:	79fb      	ldrb	r3, [r7, #7]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d001      	beq.n	800c6e6 <f_mount+0x6a>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e00a      	b.n	800c6fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c6e6:	f107 010c 	add.w	r1, r7, #12
 800c6ea:	f107 0308 	add.w	r3, r7, #8
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff fd0d 	bl	800c110 <find_volume>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	20005680 	.word	0x20005680

0800c708 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b098      	sub	sp, #96	@ 0x60
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	4613      	mov	r3, r2
 800c714:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <f_open+0x18>
 800c71c:	2309      	movs	r3, #9
 800c71e:	e1b7      	b.n	800ca90 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c720:	79fb      	ldrb	r3, [r7, #7]
 800c722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c726:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c728:	79fa      	ldrb	r2, [r7, #7]
 800c72a:	f107 0110 	add.w	r1, r7, #16
 800c72e:	f107 0308 	add.w	r3, r7, #8
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff fcec 	bl	800c110 <find_volume>
 800c738:	4603      	mov	r3, r0
 800c73a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c73e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c742:	2b00      	cmp	r3, #0
 800c744:	f040 819b 	bne.w	800ca7e <f_open+0x376>
		dj.obj.fs = fs;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	f107 0314 	add.w	r3, r7, #20
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f7ff fbcb 	bl	800bef0 <follow_path>
 800c75a:	4603      	mov	r3, r0
 800c75c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c760:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c764:	2b00      	cmp	r3, #0
 800c766:	d118      	bne.n	800c79a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c768:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c76c:	b25b      	sxtb	r3, r3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	da03      	bge.n	800c77a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c772:	2306      	movs	r3, #6
 800c774:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c778:	e00f      	b.n	800c79a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	bf8c      	ite	hi
 800c780:	2301      	movhi	r3, #1
 800c782:	2300      	movls	r3, #0
 800c784:	b2db      	uxtb	r3, r3
 800c786:	461a      	mov	r2, r3
 800c788:	f107 0314 	add.w	r3, r7, #20
 800c78c:	4611      	mov	r1, r2
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe fabe 	bl	800ad10 <chk_lock>
 800c794:	4603      	mov	r3, r0
 800c796:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	f003 031c 	and.w	r3, r3, #28
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d07f      	beq.n	800c8a4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c7a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d017      	beq.n	800c7dc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c7ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d10e      	bne.n	800c7d2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c7b4:	f7fe fb08 	bl	800adc8 <enq_lock>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d006      	beq.n	800c7cc <f_open+0xc4>
 800c7be:	f107 0314 	add.w	r3, r7, #20
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff fa6d 	bl	800bca2 <dir_register>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	e000      	b.n	800c7ce <f_open+0xc6>
 800c7cc:	2312      	movs	r3, #18
 800c7ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	f043 0308 	orr.w	r3, r3, #8
 800c7d8:	71fb      	strb	r3, [r7, #7]
 800c7da:	e010      	b.n	800c7fe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c7dc:	7ebb      	ldrb	r3, [r7, #26]
 800c7de:	f003 0311 	and.w	r3, r3, #17
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <f_open+0xe6>
					res = FR_DENIED;
 800c7e6:	2307      	movs	r3, #7
 800c7e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c7ec:	e007      	b.n	800c7fe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <f_open+0xf6>
 800c7f8:	2308      	movs	r3, #8
 800c7fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c7fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c802:	2b00      	cmp	r3, #0
 800c804:	d168      	bne.n	800c8d8 <f_open+0x1d0>
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	f003 0308 	and.w	r3, r3, #8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d063      	beq.n	800c8d8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c810:	f7fd ff74 	bl	800a6fc <get_fattime>
 800c814:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c818:	330e      	adds	r3, #14
 800c81a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe f9cd 	bl	800abbc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c824:	3316      	adds	r3, #22
 800c826:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fe f9c7 	bl	800abbc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c830:	330b      	adds	r3, #11
 800c832:	2220      	movs	r2, #32
 800c834:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff f99c 	bl	800bb7a <ld_clust>
 800c842:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c848:	2200      	movs	r2, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff f9b4 	bl	800bbb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c852:	331c      	adds	r3, #28
 800c854:	2100      	movs	r1, #0
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe f9b0 	bl	800abbc <st_dword>
					fs->wflag = 1;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	2201      	movs	r2, #1
 800c860:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d037      	beq.n	800c8d8 <f_open+0x1d0>
						dw = fs->winsect;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c86c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c86e:	f107 0314 	add.w	r3, r7, #20
 800c872:	2200      	movs	r2, #0
 800c874:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fea4 	bl	800b5c4 <remove_chain>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c882:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c886:	2b00      	cmp	r3, #0
 800c888:	d126      	bne.n	800c8d8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe fbee 	bl	800b070 <move_window>
 800c894:	4603      	mov	r3, r0
 800c896:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c89e:	3a01      	subs	r2, #1
 800c8a0:	611a      	str	r2, [r3, #16]
 800c8a2:	e019      	b.n	800c8d8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d115      	bne.n	800c8d8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c8ac:	7ebb      	ldrb	r3, [r7, #26]
 800c8ae:	f003 0310 	and.w	r3, r3, #16
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <f_open+0x1b6>
					res = FR_NO_FILE;
 800c8b6:	2304      	movs	r3, #4
 800c8b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c8bc:	e00c      	b.n	800c8d8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c8be:	79fb      	ldrb	r3, [r7, #7]
 800c8c0:	f003 0302 	and.w	r3, r3, #2
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d007      	beq.n	800c8d8 <f_open+0x1d0>
 800c8c8:	7ebb      	ldrb	r3, [r7, #26]
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d002      	beq.n	800c8d8 <f_open+0x1d0>
						res = FR_DENIED;
 800c8d2:	2307      	movs	r3, #7
 800c8d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c8d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d126      	bne.n	800c92e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c8e0:	79fb      	ldrb	r3, [r7, #7]
 800c8e2:	f003 0308 	and.w	r3, r3, #8
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c8fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	2b01      	cmp	r3, #1
 800c904:	bf8c      	ite	hi
 800c906:	2301      	movhi	r3, #1
 800c908:	2300      	movls	r3, #0
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	461a      	mov	r2, r3
 800c90e:	f107 0314 	add.w	r3, r7, #20
 800c912:	4611      	mov	r1, r2
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fa79 	bl	800ae0c <inc_lock>
 800c91a:	4602      	mov	r2, r0
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <f_open+0x226>
 800c928:	2302      	movs	r3, #2
 800c92a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c92e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c932:	2b00      	cmp	r3, #0
 800c934:	f040 80a3 	bne.w	800ca7e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff f91b 	bl	800bb7a <ld_clust>
 800c944:	4602      	mov	r2, r0
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c94c:	331c      	adds	r3, #28
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fe f8f6 	bl	800ab40 <ld_dword>
 800c954:	4602      	mov	r2, r0
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	88da      	ldrh	r2, [r3, #6]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2200      	movs	r2, #0
 800c984:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3330      	adds	r3, #48	@ 0x30
 800c98a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe f960 	bl	800ac56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	f003 0320 	and.w	r3, r3, #32
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d06e      	beq.n	800ca7e <f_open+0x376>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d06a      	beq.n	800ca7e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	68da      	ldr	r2, [r3, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	895b      	ldrh	r3, [r3, #10]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	899b      	ldrh	r3, [r3, #12]
 800c9ba:	fb02 f303 	mul.w	r3, r2, r3
 800c9be:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9cc:	e016      	b.n	800c9fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fc09 	bl	800b1ea <get_fat>
 800c9d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c9da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d802      	bhi.n	800c9e6 <f_open+0x2de>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c9e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ec:	d102      	bne.n	800c9f4 <f_open+0x2ec>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d103      	bne.n	800ca0c <f_open+0x304>
 800ca04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d8e0      	bhi.n	800c9ce <f_open+0x2c6>
				}
				fp->clust = clst;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ca12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d131      	bne.n	800ca7e <f_open+0x376>
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	899b      	ldrh	r3, [r3, #12]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca26:	fb01 f202 	mul.w	r2, r1, r2
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d026      	beq.n	800ca7e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fe fbb9 	bl	800b1ac <clust2sect>
 800ca3a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ca3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d103      	bne.n	800ca4a <f_open+0x342>
						res = FR_INT_ERR;
 800ca42:	2302      	movs	r3, #2
 800ca44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca48:	e019      	b.n	800ca7e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	899b      	ldrh	r3, [r3, #12]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca52:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca58:	441a      	add	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	7858      	ldrb	r0, [r3, #1]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6a1a      	ldr	r2, [r3, #32]
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	f7fd fff1 	bl	800aa54 <disk_read>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <f_open+0x376>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ca7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <f_open+0x384>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3760      	adds	r7, #96	@ 0x60
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08e      	sub	sp, #56	@ 0x38
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f107 0214 	add.w	r2, r7, #20
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff fda9 	bl	800c610 <validate>
 800cabe:	4603      	mov	r3, r0
 800cac0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cac4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <f_read+0x44>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	7d5b      	ldrb	r3, [r3, #21]
 800cad0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cad4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <f_read+0x4a>
 800cadc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cae0:	e135      	b.n	800cd4e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	7d1b      	ldrb	r3, [r3, #20]
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <f_read+0x5a>
 800caee:	2307      	movs	r3, #7
 800caf0:	e12d      	b.n	800cd4e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	f240 811e 	bls.w	800cd44 <f_read+0x2ac>
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cb0c:	e11a      	b.n	800cd44 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	8992      	ldrh	r2, [r2, #12]
 800cb16:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb1a:	fb01 f202 	mul.w	r2, r1, r2
 800cb1e:	1a9b      	subs	r3, r3, r2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f040 80d5 	bne.w	800ccd0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	699b      	ldr	r3, [r3, #24]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	8992      	ldrh	r2, [r2, #12]
 800cb2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	8952      	ldrh	r2, [r2, #10]
 800cb36:	3a01      	subs	r2, #1
 800cb38:	4013      	ands	r3, r2
 800cb3a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d12f      	bne.n	800cba2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d103      	bne.n	800cb52 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb50:	e013      	b.n	800cb7a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f7fe fe2c 	bl	800b7be <clmt_clust>
 800cb66:	6338      	str	r0, [r7, #48]	@ 0x30
 800cb68:	e007      	b.n	800cb7a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	4619      	mov	r1, r3
 800cb72:	4610      	mov	r0, r2
 800cb74:	f7fe fb39 	bl	800b1ea <get_fat>
 800cb78:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d804      	bhi.n	800cb8a <f_read+0xf2>
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2202      	movs	r2, #2
 800cb84:	755a      	strb	r2, [r3, #21]
 800cb86:	2302      	movs	r3, #2
 800cb88:	e0e1      	b.n	800cd4e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb90:	d104      	bne.n	800cb9c <f_read+0x104>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2201      	movs	r2, #1
 800cb96:	755a      	strb	r2, [r3, #21]
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e0d8      	b.n	800cd4e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	69db      	ldr	r3, [r3, #28]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7fe fafe 	bl	800b1ac <clust2sect>
 800cbb0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d104      	bne.n	800cbc2 <f_read+0x12a>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	755a      	strb	r2, [r3, #21]
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e0c5      	b.n	800cd4e <f_read+0x2b6>
			sect += csect;
 800cbc2:	69ba      	ldr	r2, [r7, #24]
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	899b      	ldrh	r3, [r3, #12]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbd6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d041      	beq.n	800cc62 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cbde:	69fa      	ldr	r2, [r7, #28]
 800cbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe2:	4413      	add	r3, r2
 800cbe4:	697a      	ldr	r2, [r7, #20]
 800cbe6:	8952      	ldrh	r2, [r2, #10]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d905      	bls.n	800cbf8 <f_read+0x160>
					cc = fs->csize - csect;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	895b      	ldrh	r3, [r3, #10]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	7858      	ldrb	r0, [r3, #1]
 800cbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfe:	69ba      	ldr	r2, [r7, #24]
 800cc00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc02:	f7fd ff27 	bl	800aa54 <disk_read>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d004      	beq.n	800cc16 <f_read+0x17e>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	755a      	strb	r2, [r3, #21]
 800cc12:	2301      	movs	r3, #1
 800cc14:	e09b      	b.n	800cd4e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	7d1b      	ldrb	r3, [r3, #20]
 800cc1a:	b25b      	sxtb	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	da18      	bge.n	800cc52 <f_read+0x1ba>
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6a1a      	ldr	r2, [r3, #32]
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d911      	bls.n	800cc52 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6a1a      	ldr	r2, [r3, #32]
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	8992      	ldrh	r2, [r2, #12]
 800cc3a:	fb02 f303 	mul.w	r3, r2, r3
 800cc3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc40:	18d0      	adds	r0, r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	899b      	ldrh	r3, [r3, #12]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	f7fd ffe1 	bl	800ac14 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	899b      	ldrh	r3, [r3, #12]
 800cc56:	461a      	mov	r2, r3
 800cc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc5a:	fb02 f303 	mul.w	r3, r2, r3
 800cc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cc60:	e05c      	b.n	800cd1c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d02e      	beq.n	800ccca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
 800cc70:	b25b      	sxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	da18      	bge.n	800cca8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	7858      	ldrb	r0, [r3, #1]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6a1a      	ldr	r2, [r3, #32]
 800cc84:	2301      	movs	r3, #1
 800cc86:	f7fd ff05 	bl	800aa94 <disk_write>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d004      	beq.n	800cc9a <f_read+0x202>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2201      	movs	r2, #1
 800cc94:	755a      	strb	r2, [r3, #21]
 800cc96:	2301      	movs	r3, #1
 800cc98:	e059      	b.n	800cd4e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	7d1b      	ldrb	r3, [r3, #20]
 800cc9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	7858      	ldrb	r0, [r3, #1]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	69ba      	ldr	r2, [r7, #24]
 800ccb6:	f7fd fecd 	bl	800aa54 <disk_read>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d004      	beq.n	800ccca <f_read+0x232>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	755a      	strb	r2, [r3, #21]
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e041      	b.n	800cd4e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	69ba      	ldr	r2, [r7, #24]
 800ccce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	899b      	ldrh	r3, [r3, #12]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	8992      	ldrh	r2, [r2, #12]
 800ccde:	fbb3 f1f2 	udiv	r1, r3, r2
 800cce2:	fb01 f202 	mul.w	r2, r1, r2
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	1ac3      	subs	r3, r0, r3
 800ccea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ccec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d901      	bls.n	800ccf8 <f_read+0x260>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	699b      	ldr	r3, [r3, #24]
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	8992      	ldrh	r2, [r2, #12]
 800cd06:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd0a:	fb00 f202 	mul.w	r2, r0, r2
 800cd0e:	1a9b      	subs	r3, r3, r2
 800cd10:	440b      	add	r3, r1
 800cd12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd14:	4619      	mov	r1, r3
 800cd16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd18:	f7fd ff7c 	bl	800ac14 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cd1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd20:	4413      	add	r3, r2
 800cd22:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	699a      	ldr	r2, [r3, #24]
 800cd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2a:	441a      	add	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	619a      	str	r2, [r3, #24]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd36:	441a      	add	r2, r3
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	601a      	str	r2, [r3, #0]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f47f aee1 	bne.w	800cb0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3738      	adds	r7, #56	@ 0x38
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b08c      	sub	sp, #48	@ 0x30
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	607a      	str	r2, [r7, #4]
 800cd62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f107 0210 	add.w	r2, r7, #16
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff fc4a 	bl	800c610 <validate>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d107      	bne.n	800cd9a <f_write+0x44>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	7d5b      	ldrb	r3, [r3, #21]
 800cd8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cd92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <f_write+0x4a>
 800cd9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd9e:	e16a      	b.n	800d076 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	7d1b      	ldrb	r3, [r3, #20]
 800cda4:	f003 0302 	and.w	r3, r3, #2
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <f_write+0x5a>
 800cdac:	2307      	movs	r3, #7
 800cdae:	e162      	b.n	800d076 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	699a      	ldr	r2, [r3, #24]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	441a      	add	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	f080 814c 	bcs.w	800d05a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	43db      	mvns	r3, r3
 800cdc8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cdca:	e146      	b.n	800d05a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	8992      	ldrh	r2, [r2, #12]
 800cdd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdd8:	fb01 f202 	mul.w	r2, r1, r2
 800cddc:	1a9b      	subs	r3, r3, r2
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f040 80f1 	bne.w	800cfc6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	8992      	ldrh	r2, [r2, #12]
 800cdec:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	8952      	ldrh	r2, [r2, #10]
 800cdf4:	3a01      	subs	r2, #1
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d143      	bne.n	800ce88 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10c      	bne.n	800ce22 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ce0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d11a      	bne.n	800ce4a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2100      	movs	r1, #0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fc38 	bl	800b68e <create_chain>
 800ce1e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce20:	e013      	b.n	800ce4a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d007      	beq.n	800ce3a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f7fe fcc4 	bl	800b7be <clmt_clust>
 800ce36:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce38:	e007      	b.n	800ce4a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	4619      	mov	r1, r3
 800ce42:	4610      	mov	r0, r2
 800ce44:	f7fe fc23 	bl	800b68e <create_chain>
 800ce48:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 8109 	beq.w	800d064 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d104      	bne.n	800ce62 <f_write+0x10c>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	755a      	strb	r2, [r3, #21]
 800ce5e:	2302      	movs	r3, #2
 800ce60:	e109      	b.n	800d076 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce68:	d104      	bne.n	800ce74 <f_write+0x11e>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	755a      	strb	r2, [r3, #21]
 800ce70:	2301      	movs	r3, #1
 800ce72:	e100      	b.n	800d076 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce78:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d102      	bne.n	800ce88 <f_write+0x132>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce86:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	7d1b      	ldrb	r3, [r3, #20]
 800ce8c:	b25b      	sxtb	r3, r3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	da18      	bge.n	800cec4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	7858      	ldrb	r0, [r3, #1]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6a1a      	ldr	r2, [r3, #32]
 800cea0:	2301      	movs	r3, #1
 800cea2:	f7fd fdf7 	bl	800aa94 <disk_write>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <f_write+0x160>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	755a      	strb	r2, [r3, #21]
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e0df      	b.n	800d076 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	7d1b      	ldrb	r3, [r3, #20]
 800ceba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7fe f96d 	bl	800b1ac <clust2sect>
 800ced2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d104      	bne.n	800cee4 <f_write+0x18e>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2202      	movs	r2, #2
 800cede:	755a      	strb	r2, [r3, #21]
 800cee0:	2302      	movs	r3, #2
 800cee2:	e0c8      	b.n	800d076 <f_write+0x320>
			sect += csect;
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	4413      	add	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	899b      	ldrh	r3, [r3, #12]
 800cef0:	461a      	mov	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d043      	beq.n	800cf88 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cf00:	69ba      	ldr	r2, [r7, #24]
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	4413      	add	r3, r2
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	8952      	ldrh	r2, [r2, #10]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d905      	bls.n	800cf1a <f_write+0x1c4>
					cc = fs->csize - csect;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	895b      	ldrh	r3, [r3, #10]
 800cf12:	461a      	mov	r2, r3
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	7858      	ldrb	r0, [r3, #1]
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	69f9      	ldr	r1, [r7, #28]
 800cf24:	f7fd fdb6 	bl	800aa94 <disk_write>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d004      	beq.n	800cf38 <f_write+0x1e2>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2201      	movs	r2, #1
 800cf32:	755a      	strb	r2, [r3, #21]
 800cf34:	2301      	movs	r3, #1
 800cf36:	e09e      	b.n	800d076 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6a1a      	ldr	r2, [r3, #32]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	6a3a      	ldr	r2, [r7, #32]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d918      	bls.n	800cf78 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6a1a      	ldr	r2, [r3, #32]
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	8992      	ldrh	r2, [r2, #12]
 800cf58:	fb02 f303 	mul.w	r3, r2, r3
 800cf5c:	69fa      	ldr	r2, [r7, #28]
 800cf5e:	18d1      	adds	r1, r2, r3
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	899b      	ldrh	r3, [r3, #12]
 800cf64:	461a      	mov	r2, r3
 800cf66:	f7fd fe55 	bl	800ac14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	7d1b      	ldrb	r3, [r3, #20]
 800cf6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	899b      	ldrh	r3, [r3, #12]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
 800cf84:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cf86:	e04b      	b.n	800d020 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d016      	beq.n	800cfc0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	699a      	ldr	r2, [r3, #24]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d210      	bcs.n	800cfc0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	7858      	ldrb	r0, [r3, #1]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	697a      	ldr	r2, [r7, #20]
 800cfac:	f7fd fd52 	bl	800aa54 <disk_read>
 800cfb0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d004      	beq.n	800cfc0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	755a      	strb	r2, [r3, #21]
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e05a      	b.n	800d076 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	899b      	ldrh	r3, [r3, #12]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	8992      	ldrh	r2, [r2, #12]
 800cfd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfd8:	fb01 f202 	mul.w	r2, r1, r2
 800cfdc:	1a9b      	subs	r3, r3, r2
 800cfde:	1ac3      	subs	r3, r0, r3
 800cfe0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cfe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d901      	bls.n	800cfee <f_write+0x298>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	693a      	ldr	r2, [r7, #16]
 800cffa:	8992      	ldrh	r2, [r2, #12]
 800cffc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d000:	fb00 f202 	mul.w	r2, r0, r2
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	440b      	add	r3, r1
 800d008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d00a:	69f9      	ldr	r1, [r7, #28]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fd fe01 	bl	800ac14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	7d1b      	ldrb	r3, [r3, #20]
 800d016:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d020:	69fa      	ldr	r2, [r7, #28]
 800d022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d024:	4413      	add	r3, r2
 800d026:	61fb      	str	r3, [r7, #28]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	699a      	ldr	r2, [r3, #24]
 800d02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02e:	441a      	add	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	619a      	str	r2, [r3, #24]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	68da      	ldr	r2, [r3, #12]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	bf38      	it	cc
 800d040:	461a      	movcc	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	60da      	str	r2, [r3, #12]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04c:	441a      	add	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f47f aeb5 	bne.w	800cdcc <f_write+0x76>
 800d062:	e000      	b.n	800d066 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d064:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	7d1b      	ldrb	r3, [r3, #20]
 800d06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d06e:	b2da      	uxtb	r2, r3
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3730      	adds	r7, #48	@ 0x30
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b086      	sub	sp, #24
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f107 0208 	add.w	r2, r7, #8
 800d08c:	4611      	mov	r1, r2
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fabe 	bl	800c610 <validate>
 800d094:	4603      	mov	r3, r0
 800d096:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d168      	bne.n	800d170 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7d1b      	ldrb	r3, [r3, #20]
 800d0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d062      	beq.n	800d170 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7d1b      	ldrb	r3, [r3, #20]
 800d0ae:	b25b      	sxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	da15      	bge.n	800d0e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	7858      	ldrb	r0, [r3, #1]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1a      	ldr	r2, [r3, #32]
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	f7fd fce6 	bl	800aa94 <disk_write>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <f_sync+0x54>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e04f      	b.n	800d172 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7d1b      	ldrb	r3, [r3, #20]
 800d0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0e0:	f7fd fb0c 	bl	800a6fc <get_fattime>
 800d0e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	f7fd ffbe 	bl	800b070 <move_window>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d0f8:	7dfb      	ldrb	r3, [r7, #23]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d138      	bne.n	800d170 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d102:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	330b      	adds	r3, #11
 800d108:	781a      	ldrb	r2, [r3, #0]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	330b      	adds	r3, #11
 800d10e:	f042 0220 	orr.w	r2, r2, #32
 800d112:	b2d2      	uxtb	r2, r2
 800d114:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	461a      	mov	r2, r3
 800d120:	68f9      	ldr	r1, [r7, #12]
 800d122:	f7fe fd49 	bl	800bbb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f103 021c 	add.w	r2, r3, #28
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	4619      	mov	r1, r3
 800d132:	4610      	mov	r0, r2
 800d134:	f7fd fd42 	bl	800abbc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3316      	adds	r3, #22
 800d13c:	6939      	ldr	r1, [r7, #16]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fd fd3c 	bl	800abbc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3312      	adds	r3, #18
 800d148:	2100      	movs	r1, #0
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fd fd1b 	bl	800ab86 <st_word>
					fs->wflag = 1;
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2201      	movs	r2, #1
 800d154:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fd ffb7 	bl	800b0cc <sync_fs>
 800d15e:	4603      	mov	r3, r0
 800d160:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	7d1b      	ldrb	r3, [r3, #20]
 800d166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d170:	7dfb      	ldrb	r3, [r7, #23]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff ff7b 	bl	800d07e <f_sync>
 800d188:	4603      	mov	r3, r0
 800d18a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d118      	bne.n	800d1c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f107 0208 	add.w	r2, r7, #8
 800d198:	4611      	mov	r1, r2
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff fa38 	bl	800c610 <validate>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10c      	bne.n	800d1c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fd feba 	bl	800af28 <dec_lock>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d102      	bne.n	800d1c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b090      	sub	sp, #64	@ 0x40
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f107 0208 	add.w	r2, r7, #8
 800d1de:	4611      	mov	r1, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff fa15 	bl	800c610 <validate>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d1ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d103      	bne.n	800d1fc <f_lseek+0x2e>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7d5b      	ldrb	r3, [r3, #21]
 800d1f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d1fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <f_lseek+0x3c>
 800d204:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d208:	e201      	b.n	800d60e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 80d9 	beq.w	800d3c6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21a:	d15a      	bne.n	800d2d2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d220:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	1d1a      	adds	r2, r3, #4
 800d226:	627a      	str	r2, [r7, #36]	@ 0x24
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	2302      	movs	r3, #2
 800d22e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d03a      	beq.n	800d2b2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	613b      	str	r3, [r7, #16]
 800d240:	2300      	movs	r3, #0
 800d242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d246:	3302      	adds	r3, #2
 800d248:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d250:	3301      	adds	r3, #1
 800d252:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fd ffc6 	bl	800b1ea <get_fat>
 800d25e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d262:	2b01      	cmp	r3, #1
 800d264:	d804      	bhi.n	800d270 <f_lseek+0xa2>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2202      	movs	r2, #2
 800d26a:	755a      	strb	r2, [r3, #21]
 800d26c:	2302      	movs	r3, #2
 800d26e:	e1ce      	b.n	800d60e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d276:	d104      	bne.n	800d282 <f_lseek+0xb4>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	755a      	strb	r2, [r3, #21]
 800d27e:	2301      	movs	r3, #1
 800d280:	e1c5      	b.n	800d60e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3301      	adds	r3, #1
 800d286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d288:	429a      	cmp	r2, r3
 800d28a:	d0de      	beq.n	800d24a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d28c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	429a      	cmp	r2, r3
 800d292:	d809      	bhi.n	800d2a8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d296:	1d1a      	adds	r2, r3, #4
 800d298:	627a      	str	r2, [r7, #36]	@ 0x24
 800d29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a0:	1d1a      	adds	r2, r3, #4
 800d2a2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d3c4      	bcc.n	800d23c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2b8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d2ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d803      	bhi.n	800d2ca <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	e19f      	b.n	800d60a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d2ca:	2311      	movs	r3, #17
 800d2cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d2d0:	e19b      	b.n	800d60a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d902      	bls.n	800d2e2 <f_lseek+0x114>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f000 818d 	beq.w	800d60a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7fe fa61 	bl	800b7be <clmt_clust>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	4619      	mov	r1, r3
 800d30a:	4610      	mov	r0, r2
 800d30c:	f7fd ff4e 	bl	800b1ac <clust2sect>
 800d310:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d104      	bne.n	800d322 <f_lseek+0x154>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	755a      	strb	r2, [r3, #21]
 800d31e:	2302      	movs	r3, #2
 800d320:	e175      	b.n	800d60e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	3b01      	subs	r3, #1
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	8992      	ldrh	r2, [r2, #12]
 800d32a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	8952      	ldrh	r2, [r2, #10]
 800d332:	3a01      	subs	r2, #1
 800d334:	4013      	ands	r3, r2
 800d336:	69ba      	ldr	r2, [r7, #24]
 800d338:	4413      	add	r3, r2
 800d33a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	8992      	ldrh	r2, [r2, #12]
 800d344:	fbb3 f1f2 	udiv	r1, r3, r2
 800d348:	fb01 f202 	mul.w	r2, r1, r2
 800d34c:	1a9b      	subs	r3, r3, r2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 815b 	beq.w	800d60a <f_lseek+0x43c>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	69ba      	ldr	r2, [r7, #24]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	f000 8155 	beq.w	800d60a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	7d1b      	ldrb	r3, [r3, #20]
 800d364:	b25b      	sxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	da18      	bge.n	800d39c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	7858      	ldrb	r0, [r3, #1]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a1a      	ldr	r2, [r3, #32]
 800d378:	2301      	movs	r3, #1
 800d37a:	f7fd fb8b 	bl	800aa94 <disk_write>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d004      	beq.n	800d38e <f_lseek+0x1c0>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	755a      	strb	r2, [r3, #21]
 800d38a:	2301      	movs	r3, #1
 800d38c:	e13f      	b.n	800d60e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7d1b      	ldrb	r3, [r3, #20]
 800d392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d396:	b2da      	uxtb	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	7858      	ldrb	r0, [r3, #1]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	f7fd fb53 	bl	800aa54 <disk_read>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d004      	beq.n	800d3be <f_lseek+0x1f0>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	755a      	strb	r2, [r3, #21]
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e127      	b.n	800d60e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	621a      	str	r2, [r3, #32]
 800d3c4:	e121      	b.n	800d60a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d908      	bls.n	800d3e2 <f_lseek+0x214>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7d1b      	ldrb	r3, [r3, #20]
 800d3d4:	f003 0302 	and.w	r3, r3, #2
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	699b      	ldr	r3, [r3, #24]
 800d3e6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3f0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 80b5 	beq.w	800d564 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	895b      	ldrh	r3, [r3, #10]
 800d3fe:	461a      	mov	r2, r3
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	899b      	ldrh	r3, [r3, #12]
 800d404:	fb02 f303 	mul.w	r3, r2, r3
 800d408:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d40a:	6a3b      	ldr	r3, [r7, #32]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01b      	beq.n	800d448 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	1e5a      	subs	r2, r3, #1
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	fbb2 f2f3 	udiv	r2, r2, r3
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	1e59      	subs	r1, r3, #1
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d424:	429a      	cmp	r2, r3
 800d426:	d30f      	bcc.n	800d448 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d428:	6a3b      	ldr	r3, [r7, #32]
 800d42a:	1e5a      	subs	r2, r3, #1
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	425b      	negs	r3, r3
 800d430:	401a      	ands	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	699b      	ldr	r3, [r3, #24]
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	69db      	ldr	r3, [r3, #28]
 800d444:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d446:	e022      	b.n	800d48e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d450:	2b00      	cmp	r3, #0
 800d452:	d119      	bne.n	800d488 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe f918 	bl	800b68e <create_chain>
 800d45e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d462:	2b01      	cmp	r3, #1
 800d464:	d104      	bne.n	800d470 <f_lseek+0x2a2>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2202      	movs	r2, #2
 800d46a:	755a      	strb	r2, [r3, #21]
 800d46c:	2302      	movs	r3, #2
 800d46e:	e0ce      	b.n	800d60e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d476:	d104      	bne.n	800d482 <f_lseek+0x2b4>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	755a      	strb	r2, [r3, #21]
 800d47e:	2301      	movs	r3, #1
 800d480:	e0c5      	b.n	800d60e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d486:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d48c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	2b00      	cmp	r3, #0
 800d492:	d067      	beq.n	800d564 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d494:	e03a      	b.n	800d50c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	603b      	str	r3, [r7, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	699a      	ldr	r2, [r3, #24]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	441a      	add	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	7d1b      	ldrb	r3, [r3, #20]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00b      	beq.n	800d4ce <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe f8e7 	bl	800b68e <create_chain>
 800d4c0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d108      	bne.n	800d4da <f_lseek+0x30c>
							ofs = 0; break;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	e022      	b.n	800d514 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fd fe89 	bl	800b1ea <get_fat>
 800d4d8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d104      	bne.n	800d4ec <f_lseek+0x31e>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	755a      	strb	r2, [r3, #21]
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e090      	b.n	800d60e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d904      	bls.n	800d4fc <f_lseek+0x32e>
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d304      	bcc.n	800d506 <f_lseek+0x338>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	755a      	strb	r2, [r3, #21]
 800d502:	2302      	movs	r3, #2
 800d504:	e083      	b.n	800d60e <f_lseek+0x440>
					fp->clust = clst;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d50a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	429a      	cmp	r2, r3
 800d512:	d8c0      	bhi.n	800d496 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	699a      	ldr	r2, [r3, #24]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	441a      	add	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	899b      	ldrh	r3, [r3, #12]
 800d524:	461a      	mov	r2, r3
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	fbb3 f1f2 	udiv	r1, r3, r2
 800d52c:	fb01 f202 	mul.w	r2, r1, r2
 800d530:	1a9b      	subs	r3, r3, r2
 800d532:	2b00      	cmp	r3, #0
 800d534:	d016      	beq.n	800d564 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fd fe36 	bl	800b1ac <clust2sect>
 800d540:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d544:	2b00      	cmp	r3, #0
 800d546:	d104      	bne.n	800d552 <f_lseek+0x384>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2202      	movs	r2, #2
 800d54c:	755a      	strb	r2, [r3, #21]
 800d54e:	2302      	movs	r3, #2
 800d550:	e05d      	b.n	800d60e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	899b      	ldrh	r3, [r3, #12]
 800d556:	461a      	mov	r2, r3
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d55e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d560:	4413      	add	r3, r2
 800d562:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	699a      	ldr	r2, [r3, #24]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d90a      	bls.n	800d586 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	699a      	ldr	r2, [r3, #24]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	7d1b      	ldrb	r3, [r3, #20]
 800d57c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d580:	b2da      	uxtb	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	8992      	ldrh	r2, [r2, #12]
 800d58e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d592:	fb01 f202 	mul.w	r2, r1, r2
 800d596:	1a9b      	subs	r3, r3, r2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d036      	beq.n	800d60a <f_lseek+0x43c>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a1b      	ldr	r3, [r3, #32]
 800d5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d031      	beq.n	800d60a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7d1b      	ldrb	r3, [r3, #20]
 800d5aa:	b25b      	sxtb	r3, r3
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	da18      	bge.n	800d5e2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	7858      	ldrb	r0, [r3, #1]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a1a      	ldr	r2, [r3, #32]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	f7fd fa68 	bl	800aa94 <disk_write>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d004      	beq.n	800d5d4 <f_lseek+0x406>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	755a      	strb	r2, [r3, #21]
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e01c      	b.n	800d60e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	7d1b      	ldrb	r3, [r3, #20]
 800d5d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	7858      	ldrb	r0, [r3, #1]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5f0:	f7fd fa30 	bl	800aa54 <disk_read>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d004      	beq.n	800d604 <f_lseek+0x436>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	755a      	strb	r2, [r3, #21]
 800d600:	2301      	movs	r3, #1
 800d602:	e004      	b.n	800d60e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d608:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d60a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3740      	adds	r7, #64	@ 0x40
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b090      	sub	sp, #64	@ 0x40
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d620:	f107 010c 	add.w	r1, r7, #12
 800d624:	1d3b      	adds	r3, r7, #4
 800d626:	2200      	movs	r2, #0
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fd71 	bl	800c110 <find_volume>
 800d62e:	4603      	mov	r3, r0
 800d630:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800d634:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d11f      	bne.n	800d67c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	f107 030c 	add.w	r3, r7, #12
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fc53 	bl	800bef0 <follow_path>
 800d64a:	4603      	mov	r3, r0
 800d64c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d650:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d654:	2b00      	cmp	r3, #0
 800d656:	d111      	bne.n	800d67c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d658:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d65c:	b25b      	sxtb	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	da03      	bge.n	800d66a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d662:	2306      	movs	r3, #6
 800d664:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d668:	e008      	b.n	800d67c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d005      	beq.n	800d67c <f_stat+0x66>
 800d670:	f107 030c 	add.w	r3, r7, #12
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fb45 	bl	800bd06 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d67c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d680:	4618      	mov	r0, r3
 800d682:	3740      	adds	r7, #64	@ 0x40
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d688:	b480      	push	{r7}
 800d68a:	b087      	sub	sp, #28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	4613      	mov	r3, r2
 800d694:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d696:	2301      	movs	r3, #1
 800d698:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d69e:	4b1f      	ldr	r3, [pc, #124]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6a0:	7a5b      	ldrb	r3, [r3, #9]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d131      	bne.n	800d70c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6a8:	4b1c      	ldr	r3, [pc, #112]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6aa:	7a5b      	ldrb	r3, [r3, #9]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	4b1a      	ldr	r3, [pc, #104]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6b6:	4b19      	ldr	r3, [pc, #100]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6b8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	4a17      	ldr	r2, [pc, #92]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6c6:	4b15      	ldr	r3, [pc, #84]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6c8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	4b13      	ldr	r3, [pc, #76]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6d0:	4413      	add	r3, r2
 800d6d2:	79fa      	ldrb	r2, [r7, #7]
 800d6d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6d6:	4b11      	ldr	r3, [pc, #68]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6d8:	7a5b      	ldrb	r3, [r3, #9]
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	b2d1      	uxtb	r1, r2
 800d6e0:	4a0e      	ldr	r2, [pc, #56]	@ (800d71c <FATFS_LinkDriverEx+0x94>)
 800d6e2:	7251      	strb	r1, [r2, #9]
 800d6e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6e6:	7dbb      	ldrb	r3, [r7, #22]
 800d6e8:	3330      	adds	r3, #48	@ 0x30
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	223a      	movs	r2, #58	@ 0x3a
 800d6f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	3302      	adds	r3, #2
 800d6fc:	222f      	movs	r2, #47	@ 0x2f
 800d6fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	3303      	adds	r3, #3
 800d704:	2200      	movs	r2, #0
 800d706:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	371c      	adds	r7, #28
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	200056a8 	.word	0x200056a8

0800d720 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d72a:	2200      	movs	r2, #0
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7ff ffaa 	bl	800d688 <FATFS_LinkDriverEx>
 800d734:	4603      	mov	r3, r0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <atoi>:
 800d73e:	220a      	movs	r2, #10
 800d740:	2100      	movs	r1, #0
 800d742:	f000 b93b 	b.w	800d9bc <strtol>
	...

0800d748 <malloc>:
 800d748:	4b02      	ldr	r3, [pc, #8]	@ (800d754 <malloc+0xc>)
 800d74a:	4601      	mov	r1, r0
 800d74c:	6818      	ldr	r0, [r3, #0]
 800d74e:	f000 b82d 	b.w	800d7ac <_malloc_r>
 800d752:	bf00      	nop
 800d754:	20000038 	.word	0x20000038

0800d758 <free>:
 800d758:	4b02      	ldr	r3, [pc, #8]	@ (800d764 <free+0xc>)
 800d75a:	4601      	mov	r1, r0
 800d75c:	6818      	ldr	r0, [r3, #0]
 800d75e:	f000 bbe1 	b.w	800df24 <_free_r>
 800d762:	bf00      	nop
 800d764:	20000038 	.word	0x20000038

0800d768 <sbrk_aligned>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	4e0f      	ldr	r6, [pc, #60]	@ (800d7a8 <sbrk_aligned+0x40>)
 800d76c:	460c      	mov	r4, r1
 800d76e:	6831      	ldr	r1, [r6, #0]
 800d770:	4605      	mov	r5, r0
 800d772:	b911      	cbnz	r1, 800d77a <sbrk_aligned+0x12>
 800d774:	f000 fb60 	bl	800de38 <_sbrk_r>
 800d778:	6030      	str	r0, [r6, #0]
 800d77a:	4621      	mov	r1, r4
 800d77c:	4628      	mov	r0, r5
 800d77e:	f000 fb5b 	bl	800de38 <_sbrk_r>
 800d782:	1c43      	adds	r3, r0, #1
 800d784:	d103      	bne.n	800d78e <sbrk_aligned+0x26>
 800d786:	f04f 34ff 	mov.w	r4, #4294967295
 800d78a:	4620      	mov	r0, r4
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
 800d78e:	1cc4      	adds	r4, r0, #3
 800d790:	f024 0403 	bic.w	r4, r4, #3
 800d794:	42a0      	cmp	r0, r4
 800d796:	d0f8      	beq.n	800d78a <sbrk_aligned+0x22>
 800d798:	1a21      	subs	r1, r4, r0
 800d79a:	4628      	mov	r0, r5
 800d79c:	f000 fb4c 	bl	800de38 <_sbrk_r>
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	d1f2      	bne.n	800d78a <sbrk_aligned+0x22>
 800d7a4:	e7ef      	b.n	800d786 <sbrk_aligned+0x1e>
 800d7a6:	bf00      	nop
 800d7a8:	200056b4 	.word	0x200056b4

0800d7ac <_malloc_r>:
 800d7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b0:	1ccd      	adds	r5, r1, #3
 800d7b2:	f025 0503 	bic.w	r5, r5, #3
 800d7b6:	3508      	adds	r5, #8
 800d7b8:	2d0c      	cmp	r5, #12
 800d7ba:	bf38      	it	cc
 800d7bc:	250c      	movcc	r5, #12
 800d7be:	2d00      	cmp	r5, #0
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	db01      	blt.n	800d7c8 <_malloc_r+0x1c>
 800d7c4:	42a9      	cmp	r1, r5
 800d7c6:	d904      	bls.n	800d7d2 <_malloc_r+0x26>
 800d7c8:	230c      	movs	r3, #12
 800d7ca:	6033      	str	r3, [r6, #0]
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d8a8 <_malloc_r+0xfc>
 800d7d6:	f000 f869 	bl	800d8ac <__malloc_lock>
 800d7da:	f8d8 3000 	ldr.w	r3, [r8]
 800d7de:	461c      	mov	r4, r3
 800d7e0:	bb44      	cbnz	r4, 800d834 <_malloc_r+0x88>
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	f7ff ffbf 	bl	800d768 <sbrk_aligned>
 800d7ea:	1c43      	adds	r3, r0, #1
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	d158      	bne.n	800d8a2 <_malloc_r+0xf6>
 800d7f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d7f4:	4627      	mov	r7, r4
 800d7f6:	2f00      	cmp	r7, #0
 800d7f8:	d143      	bne.n	800d882 <_malloc_r+0xd6>
 800d7fa:	2c00      	cmp	r4, #0
 800d7fc:	d04b      	beq.n	800d896 <_malloc_r+0xea>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	4639      	mov	r1, r7
 800d802:	4630      	mov	r0, r6
 800d804:	eb04 0903 	add.w	r9, r4, r3
 800d808:	f000 fb16 	bl	800de38 <_sbrk_r>
 800d80c:	4581      	cmp	r9, r0
 800d80e:	d142      	bne.n	800d896 <_malloc_r+0xea>
 800d810:	6821      	ldr	r1, [r4, #0]
 800d812:	1a6d      	subs	r5, r5, r1
 800d814:	4629      	mov	r1, r5
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ffa6 	bl	800d768 <sbrk_aligned>
 800d81c:	3001      	adds	r0, #1
 800d81e:	d03a      	beq.n	800d896 <_malloc_r+0xea>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	442b      	add	r3, r5
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	f8d8 3000 	ldr.w	r3, [r8]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	bb62      	cbnz	r2, 800d888 <_malloc_r+0xdc>
 800d82e:	f8c8 7000 	str.w	r7, [r8]
 800d832:	e00f      	b.n	800d854 <_malloc_r+0xa8>
 800d834:	6822      	ldr	r2, [r4, #0]
 800d836:	1b52      	subs	r2, r2, r5
 800d838:	d420      	bmi.n	800d87c <_malloc_r+0xd0>
 800d83a:	2a0b      	cmp	r2, #11
 800d83c:	d917      	bls.n	800d86e <_malloc_r+0xc2>
 800d83e:	1961      	adds	r1, r4, r5
 800d840:	42a3      	cmp	r3, r4
 800d842:	6025      	str	r5, [r4, #0]
 800d844:	bf18      	it	ne
 800d846:	6059      	strne	r1, [r3, #4]
 800d848:	6863      	ldr	r3, [r4, #4]
 800d84a:	bf08      	it	eq
 800d84c:	f8c8 1000 	streq.w	r1, [r8]
 800d850:	5162      	str	r2, [r4, r5]
 800d852:	604b      	str	r3, [r1, #4]
 800d854:	4630      	mov	r0, r6
 800d856:	f000 f82f 	bl	800d8b8 <__malloc_unlock>
 800d85a:	f104 000b 	add.w	r0, r4, #11
 800d85e:	1d23      	adds	r3, r4, #4
 800d860:	f020 0007 	bic.w	r0, r0, #7
 800d864:	1ac2      	subs	r2, r0, r3
 800d866:	bf1c      	itt	ne
 800d868:	1a1b      	subne	r3, r3, r0
 800d86a:	50a3      	strne	r3, [r4, r2]
 800d86c:	e7af      	b.n	800d7ce <_malloc_r+0x22>
 800d86e:	6862      	ldr	r2, [r4, #4]
 800d870:	42a3      	cmp	r3, r4
 800d872:	bf0c      	ite	eq
 800d874:	f8c8 2000 	streq.w	r2, [r8]
 800d878:	605a      	strne	r2, [r3, #4]
 800d87a:	e7eb      	b.n	800d854 <_malloc_r+0xa8>
 800d87c:	4623      	mov	r3, r4
 800d87e:	6864      	ldr	r4, [r4, #4]
 800d880:	e7ae      	b.n	800d7e0 <_malloc_r+0x34>
 800d882:	463c      	mov	r4, r7
 800d884:	687f      	ldr	r7, [r7, #4]
 800d886:	e7b6      	b.n	800d7f6 <_malloc_r+0x4a>
 800d888:	461a      	mov	r2, r3
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	42a3      	cmp	r3, r4
 800d88e:	d1fb      	bne.n	800d888 <_malloc_r+0xdc>
 800d890:	2300      	movs	r3, #0
 800d892:	6053      	str	r3, [r2, #4]
 800d894:	e7de      	b.n	800d854 <_malloc_r+0xa8>
 800d896:	230c      	movs	r3, #12
 800d898:	6033      	str	r3, [r6, #0]
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 f80c 	bl	800d8b8 <__malloc_unlock>
 800d8a0:	e794      	b.n	800d7cc <_malloc_r+0x20>
 800d8a2:	6005      	str	r5, [r0, #0]
 800d8a4:	e7d6      	b.n	800d854 <_malloc_r+0xa8>
 800d8a6:	bf00      	nop
 800d8a8:	200056b8 	.word	0x200056b8

0800d8ac <__malloc_lock>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	@ (800d8b4 <__malloc_lock+0x8>)
 800d8ae:	f000 bb10 	b.w	800ded2 <__retarget_lock_acquire_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	200057fc 	.word	0x200057fc

0800d8b8 <__malloc_unlock>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	@ (800d8c0 <__malloc_unlock+0x8>)
 800d8ba:	f000 bb0b 	b.w	800ded4 <__retarget_lock_release_recursive>
 800d8be:	bf00      	nop
 800d8c0:	200057fc 	.word	0x200057fc

0800d8c4 <_strtol_l.constprop.0>:
 800d8c4:	2b24      	cmp	r3, #36	@ 0x24
 800d8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ca:	4686      	mov	lr, r0
 800d8cc:	4690      	mov	r8, r2
 800d8ce:	d801      	bhi.n	800d8d4 <_strtol_l.constprop.0+0x10>
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d106      	bne.n	800d8e2 <_strtol_l.constprop.0+0x1e>
 800d8d4:	f000 fad2 	bl	800de7c <__errno>
 800d8d8:	2316      	movs	r3, #22
 800d8da:	6003      	str	r3, [r0, #0]
 800d8dc:	2000      	movs	r0, #0
 800d8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e2:	4834      	ldr	r0, [pc, #208]	@ (800d9b4 <_strtol_l.constprop.0+0xf0>)
 800d8e4:	460d      	mov	r5, r1
 800d8e6:	462a      	mov	r2, r5
 800d8e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ec:	5d06      	ldrb	r6, [r0, r4]
 800d8ee:	f016 0608 	ands.w	r6, r6, #8
 800d8f2:	d1f8      	bne.n	800d8e6 <_strtol_l.constprop.0+0x22>
 800d8f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8f6:	d12d      	bne.n	800d954 <_strtol_l.constprop.0+0x90>
 800d8f8:	782c      	ldrb	r4, [r5, #0]
 800d8fa:	2601      	movs	r6, #1
 800d8fc:	1c95      	adds	r5, r2, #2
 800d8fe:	f033 0210 	bics.w	r2, r3, #16
 800d902:	d109      	bne.n	800d918 <_strtol_l.constprop.0+0x54>
 800d904:	2c30      	cmp	r4, #48	@ 0x30
 800d906:	d12a      	bne.n	800d95e <_strtol_l.constprop.0+0x9a>
 800d908:	782a      	ldrb	r2, [r5, #0]
 800d90a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d90e:	2a58      	cmp	r2, #88	@ 0x58
 800d910:	d125      	bne.n	800d95e <_strtol_l.constprop.0+0x9a>
 800d912:	786c      	ldrb	r4, [r5, #1]
 800d914:	2310      	movs	r3, #16
 800d916:	3502      	adds	r5, #2
 800d918:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d91c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d920:	2200      	movs	r2, #0
 800d922:	fbbc f9f3 	udiv	r9, ip, r3
 800d926:	4610      	mov	r0, r2
 800d928:	fb03 ca19 	mls	sl, r3, r9, ip
 800d92c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d930:	2f09      	cmp	r7, #9
 800d932:	d81b      	bhi.n	800d96c <_strtol_l.constprop.0+0xa8>
 800d934:	463c      	mov	r4, r7
 800d936:	42a3      	cmp	r3, r4
 800d938:	dd27      	ble.n	800d98a <_strtol_l.constprop.0+0xc6>
 800d93a:	1c57      	adds	r7, r2, #1
 800d93c:	d007      	beq.n	800d94e <_strtol_l.constprop.0+0x8a>
 800d93e:	4581      	cmp	r9, r0
 800d940:	d320      	bcc.n	800d984 <_strtol_l.constprop.0+0xc0>
 800d942:	d101      	bne.n	800d948 <_strtol_l.constprop.0+0x84>
 800d944:	45a2      	cmp	sl, r4
 800d946:	db1d      	blt.n	800d984 <_strtol_l.constprop.0+0xc0>
 800d948:	fb00 4003 	mla	r0, r0, r3, r4
 800d94c:	2201      	movs	r2, #1
 800d94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d952:	e7eb      	b.n	800d92c <_strtol_l.constprop.0+0x68>
 800d954:	2c2b      	cmp	r4, #43	@ 0x2b
 800d956:	bf04      	itt	eq
 800d958:	782c      	ldrbeq	r4, [r5, #0]
 800d95a:	1c95      	addeq	r5, r2, #2
 800d95c:	e7cf      	b.n	800d8fe <_strtol_l.constprop.0+0x3a>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1da      	bne.n	800d918 <_strtol_l.constprop.0+0x54>
 800d962:	2c30      	cmp	r4, #48	@ 0x30
 800d964:	bf0c      	ite	eq
 800d966:	2308      	moveq	r3, #8
 800d968:	230a      	movne	r3, #10
 800d96a:	e7d5      	b.n	800d918 <_strtol_l.constprop.0+0x54>
 800d96c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d970:	2f19      	cmp	r7, #25
 800d972:	d801      	bhi.n	800d978 <_strtol_l.constprop.0+0xb4>
 800d974:	3c37      	subs	r4, #55	@ 0x37
 800d976:	e7de      	b.n	800d936 <_strtol_l.constprop.0+0x72>
 800d978:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d97c:	2f19      	cmp	r7, #25
 800d97e:	d804      	bhi.n	800d98a <_strtol_l.constprop.0+0xc6>
 800d980:	3c57      	subs	r4, #87	@ 0x57
 800d982:	e7d8      	b.n	800d936 <_strtol_l.constprop.0+0x72>
 800d984:	f04f 32ff 	mov.w	r2, #4294967295
 800d988:	e7e1      	b.n	800d94e <_strtol_l.constprop.0+0x8a>
 800d98a:	1c53      	adds	r3, r2, #1
 800d98c:	d108      	bne.n	800d9a0 <_strtol_l.constprop.0+0xdc>
 800d98e:	2322      	movs	r3, #34	@ 0x22
 800d990:	f8ce 3000 	str.w	r3, [lr]
 800d994:	4660      	mov	r0, ip
 800d996:	f1b8 0f00 	cmp.w	r8, #0
 800d99a:	d0a0      	beq.n	800d8de <_strtol_l.constprop.0+0x1a>
 800d99c:	1e69      	subs	r1, r5, #1
 800d99e:	e006      	b.n	800d9ae <_strtol_l.constprop.0+0xea>
 800d9a0:	b106      	cbz	r6, 800d9a4 <_strtol_l.constprop.0+0xe0>
 800d9a2:	4240      	negs	r0, r0
 800d9a4:	f1b8 0f00 	cmp.w	r8, #0
 800d9a8:	d099      	beq.n	800d8de <_strtol_l.constprop.0+0x1a>
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	d1f6      	bne.n	800d99c <_strtol_l.constprop.0+0xd8>
 800d9ae:	f8c8 1000 	str.w	r1, [r8]
 800d9b2:	e794      	b.n	800d8de <_strtol_l.constprop.0+0x1a>
 800d9b4:	08010429 	.word	0x08010429

0800d9b8 <_strtol_r>:
 800d9b8:	f7ff bf84 	b.w	800d8c4 <_strtol_l.constprop.0>

0800d9bc <strtol>:
 800d9bc:	4613      	mov	r3, r2
 800d9be:	460a      	mov	r2, r1
 800d9c0:	4601      	mov	r1, r0
 800d9c2:	4802      	ldr	r0, [pc, #8]	@ (800d9cc <strtol+0x10>)
 800d9c4:	6800      	ldr	r0, [r0, #0]
 800d9c6:	f7ff bf7d 	b.w	800d8c4 <_strtol_l.constprop.0>
 800d9ca:	bf00      	nop
 800d9cc:	20000038 	.word	0x20000038

0800d9d0 <std>:
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	b510      	push	{r4, lr}
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9de:	6083      	str	r3, [r0, #8]
 800d9e0:	8181      	strh	r1, [r0, #12]
 800d9e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9e4:	81c2      	strh	r2, [r0, #14]
 800d9e6:	6183      	str	r3, [r0, #24]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	2208      	movs	r2, #8
 800d9ec:	305c      	adds	r0, #92	@ 0x5c
 800d9ee:	f000 f979 	bl	800dce4 <memset>
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800da28 <std+0x58>)
 800d9f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800da2c <std+0x5c>)
 800d9f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800da30 <std+0x60>)
 800d9fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800da34 <std+0x64>)
 800da00:	6323      	str	r3, [r4, #48]	@ 0x30
 800da02:	4b0d      	ldr	r3, [pc, #52]	@ (800da38 <std+0x68>)
 800da04:	6224      	str	r4, [r4, #32]
 800da06:	429c      	cmp	r4, r3
 800da08:	d006      	beq.n	800da18 <std+0x48>
 800da0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da0e:	4294      	cmp	r4, r2
 800da10:	d002      	beq.n	800da18 <std+0x48>
 800da12:	33d0      	adds	r3, #208	@ 0xd0
 800da14:	429c      	cmp	r4, r3
 800da16:	d105      	bne.n	800da24 <std+0x54>
 800da18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da20:	f000 ba56 	b.w	800ded0 <__retarget_lock_init_recursive>
 800da24:	bd10      	pop	{r4, pc}
 800da26:	bf00      	nop
 800da28:	0800dbe9 	.word	0x0800dbe9
 800da2c:	0800dc0f 	.word	0x0800dc0f
 800da30:	0800dc47 	.word	0x0800dc47
 800da34:	0800dc6b 	.word	0x0800dc6b
 800da38:	200056bc 	.word	0x200056bc

0800da3c <stdio_exit_handler>:
 800da3c:	4a02      	ldr	r2, [pc, #8]	@ (800da48 <stdio_exit_handler+0xc>)
 800da3e:	4903      	ldr	r1, [pc, #12]	@ (800da4c <stdio_exit_handler+0x10>)
 800da40:	4803      	ldr	r0, [pc, #12]	@ (800da50 <stdio_exit_handler+0x14>)
 800da42:	f000 b869 	b.w	800db18 <_fwalk_sglue>
 800da46:	bf00      	nop
 800da48:	2000002c 	.word	0x2000002c
 800da4c:	0800ecc1 	.word	0x0800ecc1
 800da50:	2000003c 	.word	0x2000003c

0800da54 <cleanup_stdio>:
 800da54:	6841      	ldr	r1, [r0, #4]
 800da56:	4b0c      	ldr	r3, [pc, #48]	@ (800da88 <cleanup_stdio+0x34>)
 800da58:	4299      	cmp	r1, r3
 800da5a:	b510      	push	{r4, lr}
 800da5c:	4604      	mov	r4, r0
 800da5e:	d001      	beq.n	800da64 <cleanup_stdio+0x10>
 800da60:	f001 f92e 	bl	800ecc0 <_fflush_r>
 800da64:	68a1      	ldr	r1, [r4, #8]
 800da66:	4b09      	ldr	r3, [pc, #36]	@ (800da8c <cleanup_stdio+0x38>)
 800da68:	4299      	cmp	r1, r3
 800da6a:	d002      	beq.n	800da72 <cleanup_stdio+0x1e>
 800da6c:	4620      	mov	r0, r4
 800da6e:	f001 f927 	bl	800ecc0 <_fflush_r>
 800da72:	68e1      	ldr	r1, [r4, #12]
 800da74:	4b06      	ldr	r3, [pc, #24]	@ (800da90 <cleanup_stdio+0x3c>)
 800da76:	4299      	cmp	r1, r3
 800da78:	d004      	beq.n	800da84 <cleanup_stdio+0x30>
 800da7a:	4620      	mov	r0, r4
 800da7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da80:	f001 b91e 	b.w	800ecc0 <_fflush_r>
 800da84:	bd10      	pop	{r4, pc}
 800da86:	bf00      	nop
 800da88:	200056bc 	.word	0x200056bc
 800da8c:	20005724 	.word	0x20005724
 800da90:	2000578c 	.word	0x2000578c

0800da94 <global_stdio_init.part.0>:
 800da94:	b510      	push	{r4, lr}
 800da96:	4b0b      	ldr	r3, [pc, #44]	@ (800dac4 <global_stdio_init.part.0+0x30>)
 800da98:	4c0b      	ldr	r4, [pc, #44]	@ (800dac8 <global_stdio_init.part.0+0x34>)
 800da9a:	4a0c      	ldr	r2, [pc, #48]	@ (800dacc <global_stdio_init.part.0+0x38>)
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	4620      	mov	r0, r4
 800daa0:	2200      	movs	r2, #0
 800daa2:	2104      	movs	r1, #4
 800daa4:	f7ff ff94 	bl	800d9d0 <std>
 800daa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800daac:	2201      	movs	r2, #1
 800daae:	2109      	movs	r1, #9
 800dab0:	f7ff ff8e 	bl	800d9d0 <std>
 800dab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dab8:	2202      	movs	r2, #2
 800daba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dabe:	2112      	movs	r1, #18
 800dac0:	f7ff bf86 	b.w	800d9d0 <std>
 800dac4:	200057f4 	.word	0x200057f4
 800dac8:	200056bc 	.word	0x200056bc
 800dacc:	0800da3d 	.word	0x0800da3d

0800dad0 <__sfp_lock_acquire>:
 800dad0:	4801      	ldr	r0, [pc, #4]	@ (800dad8 <__sfp_lock_acquire+0x8>)
 800dad2:	f000 b9fe 	b.w	800ded2 <__retarget_lock_acquire_recursive>
 800dad6:	bf00      	nop
 800dad8:	200057fd 	.word	0x200057fd

0800dadc <__sfp_lock_release>:
 800dadc:	4801      	ldr	r0, [pc, #4]	@ (800dae4 <__sfp_lock_release+0x8>)
 800dade:	f000 b9f9 	b.w	800ded4 <__retarget_lock_release_recursive>
 800dae2:	bf00      	nop
 800dae4:	200057fd 	.word	0x200057fd

0800dae8 <__sinit>:
 800dae8:	b510      	push	{r4, lr}
 800daea:	4604      	mov	r4, r0
 800daec:	f7ff fff0 	bl	800dad0 <__sfp_lock_acquire>
 800daf0:	6a23      	ldr	r3, [r4, #32]
 800daf2:	b11b      	cbz	r3, 800dafc <__sinit+0x14>
 800daf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daf8:	f7ff bff0 	b.w	800dadc <__sfp_lock_release>
 800dafc:	4b04      	ldr	r3, [pc, #16]	@ (800db10 <__sinit+0x28>)
 800dafe:	6223      	str	r3, [r4, #32]
 800db00:	4b04      	ldr	r3, [pc, #16]	@ (800db14 <__sinit+0x2c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1f5      	bne.n	800daf4 <__sinit+0xc>
 800db08:	f7ff ffc4 	bl	800da94 <global_stdio_init.part.0>
 800db0c:	e7f2      	b.n	800daf4 <__sinit+0xc>
 800db0e:	bf00      	nop
 800db10:	0800da55 	.word	0x0800da55
 800db14:	200057f4 	.word	0x200057f4

0800db18 <_fwalk_sglue>:
 800db18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db1c:	4607      	mov	r7, r0
 800db1e:	4688      	mov	r8, r1
 800db20:	4614      	mov	r4, r2
 800db22:	2600      	movs	r6, #0
 800db24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db28:	f1b9 0901 	subs.w	r9, r9, #1
 800db2c:	d505      	bpl.n	800db3a <_fwalk_sglue+0x22>
 800db2e:	6824      	ldr	r4, [r4, #0]
 800db30:	2c00      	cmp	r4, #0
 800db32:	d1f7      	bne.n	800db24 <_fwalk_sglue+0xc>
 800db34:	4630      	mov	r0, r6
 800db36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db3a:	89ab      	ldrh	r3, [r5, #12]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d907      	bls.n	800db50 <_fwalk_sglue+0x38>
 800db40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db44:	3301      	adds	r3, #1
 800db46:	d003      	beq.n	800db50 <_fwalk_sglue+0x38>
 800db48:	4629      	mov	r1, r5
 800db4a:	4638      	mov	r0, r7
 800db4c:	47c0      	blx	r8
 800db4e:	4306      	orrs	r6, r0
 800db50:	3568      	adds	r5, #104	@ 0x68
 800db52:	e7e9      	b.n	800db28 <_fwalk_sglue+0x10>

0800db54 <siprintf>:
 800db54:	b40e      	push	{r1, r2, r3}
 800db56:	b500      	push	{lr}
 800db58:	b09c      	sub	sp, #112	@ 0x70
 800db5a:	ab1d      	add	r3, sp, #116	@ 0x74
 800db5c:	9002      	str	r0, [sp, #8]
 800db5e:	9006      	str	r0, [sp, #24]
 800db60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db64:	4809      	ldr	r0, [pc, #36]	@ (800db8c <siprintf+0x38>)
 800db66:	9107      	str	r1, [sp, #28]
 800db68:	9104      	str	r1, [sp, #16]
 800db6a:	4909      	ldr	r1, [pc, #36]	@ (800db90 <siprintf+0x3c>)
 800db6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db70:	9105      	str	r1, [sp, #20]
 800db72:	6800      	ldr	r0, [r0, #0]
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	a902      	add	r1, sp, #8
 800db78:	f000 fa7a 	bl	800e070 <_svfiprintf_r>
 800db7c:	9b02      	ldr	r3, [sp, #8]
 800db7e:	2200      	movs	r2, #0
 800db80:	701a      	strb	r2, [r3, #0]
 800db82:	b01c      	add	sp, #112	@ 0x70
 800db84:	f85d eb04 	ldr.w	lr, [sp], #4
 800db88:	b003      	add	sp, #12
 800db8a:	4770      	bx	lr
 800db8c:	20000038 	.word	0x20000038
 800db90:	ffff0208 	.word	0xffff0208

0800db94 <siscanf>:
 800db94:	b40e      	push	{r1, r2, r3}
 800db96:	b530      	push	{r4, r5, lr}
 800db98:	b09c      	sub	sp, #112	@ 0x70
 800db9a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800db9c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800dba0:	f854 5b04 	ldr.w	r5, [r4], #4
 800dba4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800dba8:	9002      	str	r0, [sp, #8]
 800dbaa:	9006      	str	r0, [sp, #24]
 800dbac:	f7f2 fb10 	bl	80001d0 <strlen>
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe0 <siscanf+0x4c>)
 800dbb2:	9003      	str	r0, [sp, #12]
 800dbb4:	9007      	str	r0, [sp, #28]
 800dbb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbb8:	480a      	ldr	r0, [pc, #40]	@ (800dbe4 <siscanf+0x50>)
 800dbba:	9401      	str	r4, [sp, #4]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbc0:	9314      	str	r3, [sp, #80]	@ 0x50
 800dbc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbc6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbca:	462a      	mov	r2, r5
 800dbcc:	4623      	mov	r3, r4
 800dbce:	a902      	add	r1, sp, #8
 800dbd0:	6800      	ldr	r0, [r0, #0]
 800dbd2:	f000 fba1 	bl	800e318 <__ssvfiscanf_r>
 800dbd6:	b01c      	add	sp, #112	@ 0x70
 800dbd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbdc:	b003      	add	sp, #12
 800dbde:	4770      	bx	lr
 800dbe0:	0800dc0b 	.word	0x0800dc0b
 800dbe4:	20000038 	.word	0x20000038

0800dbe8 <__sread>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	460c      	mov	r4, r1
 800dbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf0:	f000 f910 	bl	800de14 <_read_r>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	bfab      	itete	ge
 800dbf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dbfa:	89a3      	ldrhlt	r3, [r4, #12]
 800dbfc:	181b      	addge	r3, r3, r0
 800dbfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc02:	bfac      	ite	ge
 800dc04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc06:	81a3      	strhlt	r3, [r4, #12]
 800dc08:	bd10      	pop	{r4, pc}

0800dc0a <__seofread>:
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	4770      	bx	lr

0800dc0e <__swrite>:
 800dc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc12:	461f      	mov	r7, r3
 800dc14:	898b      	ldrh	r3, [r1, #12]
 800dc16:	05db      	lsls	r3, r3, #23
 800dc18:	4605      	mov	r5, r0
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	4616      	mov	r6, r2
 800dc1e:	d505      	bpl.n	800dc2c <__swrite+0x1e>
 800dc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc24:	2302      	movs	r3, #2
 800dc26:	2200      	movs	r2, #0
 800dc28:	f000 f8e2 	bl	800ddf0 <_lseek_r>
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc36:	81a3      	strh	r3, [r4, #12]
 800dc38:	4632      	mov	r2, r6
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc42:	f000 b909 	b.w	800de58 <_write_r>

0800dc46 <__sseek>:
 800dc46:	b510      	push	{r4, lr}
 800dc48:	460c      	mov	r4, r1
 800dc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc4e:	f000 f8cf 	bl	800ddf0 <_lseek_r>
 800dc52:	1c43      	adds	r3, r0, #1
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	bf15      	itete	ne
 800dc58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc62:	81a3      	strheq	r3, [r4, #12]
 800dc64:	bf18      	it	ne
 800dc66:	81a3      	strhne	r3, [r4, #12]
 800dc68:	bd10      	pop	{r4, pc}

0800dc6a <__sclose>:
 800dc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc6e:	f000 b8af 	b.w	800ddd0 <_close_r>

0800dc72 <_vsniprintf_r>:
 800dc72:	b530      	push	{r4, r5, lr}
 800dc74:	4614      	mov	r4, r2
 800dc76:	2c00      	cmp	r4, #0
 800dc78:	b09b      	sub	sp, #108	@ 0x6c
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	da05      	bge.n	800dc8c <_vsniprintf_r+0x1a>
 800dc80:	238b      	movs	r3, #139	@ 0x8b
 800dc82:	6003      	str	r3, [r0, #0]
 800dc84:	f04f 30ff 	mov.w	r0, #4294967295
 800dc88:	b01b      	add	sp, #108	@ 0x6c
 800dc8a:	bd30      	pop	{r4, r5, pc}
 800dc8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc90:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dc94:	bf14      	ite	ne
 800dc96:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc9a:	4623      	moveq	r3, r4
 800dc9c:	9302      	str	r3, [sp, #8]
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dca4:	9100      	str	r1, [sp, #0]
 800dca6:	9104      	str	r1, [sp, #16]
 800dca8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dcac:	4669      	mov	r1, sp
 800dcae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dcb0:	f000 f9de 	bl	800e070 <_svfiprintf_r>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	bfbc      	itt	lt
 800dcb8:	238b      	movlt	r3, #139	@ 0x8b
 800dcba:	602b      	strlt	r3, [r5, #0]
 800dcbc:	2c00      	cmp	r4, #0
 800dcbe:	d0e3      	beq.n	800dc88 <_vsniprintf_r+0x16>
 800dcc0:	9b00      	ldr	r3, [sp, #0]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	e7df      	b.n	800dc88 <_vsniprintf_r+0x16>

0800dcc8 <vsniprintf>:
 800dcc8:	b507      	push	{r0, r1, r2, lr}
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	4613      	mov	r3, r2
 800dcce:	460a      	mov	r2, r1
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4803      	ldr	r0, [pc, #12]	@ (800dce0 <vsniprintf+0x18>)
 800dcd4:	6800      	ldr	r0, [r0, #0]
 800dcd6:	f7ff ffcc 	bl	800dc72 <_vsniprintf_r>
 800dcda:	b003      	add	sp, #12
 800dcdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dce0:	20000038 	.word	0x20000038

0800dce4 <memset>:
 800dce4:	4402      	add	r2, r0
 800dce6:	4603      	mov	r3, r0
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d100      	bne.n	800dcee <memset+0xa>
 800dcec:	4770      	bx	lr
 800dcee:	f803 1b01 	strb.w	r1, [r3], #1
 800dcf2:	e7f9      	b.n	800dce8 <memset+0x4>

0800dcf4 <strncmp>:
 800dcf4:	b510      	push	{r4, lr}
 800dcf6:	b16a      	cbz	r2, 800dd14 <strncmp+0x20>
 800dcf8:	3901      	subs	r1, #1
 800dcfa:	1884      	adds	r4, r0, r2
 800dcfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d103      	bne.n	800dd10 <strncmp+0x1c>
 800dd08:	42a0      	cmp	r0, r4
 800dd0a:	d001      	beq.n	800dd10 <strncmp+0x1c>
 800dd0c:	2a00      	cmp	r2, #0
 800dd0e:	d1f5      	bne.n	800dcfc <strncmp+0x8>
 800dd10:	1ad0      	subs	r0, r2, r3
 800dd12:	bd10      	pop	{r4, pc}
 800dd14:	4610      	mov	r0, r2
 800dd16:	e7fc      	b.n	800dd12 <strncmp+0x1e>

0800dd18 <strtok>:
 800dd18:	4b16      	ldr	r3, [pc, #88]	@ (800dd74 <strtok+0x5c>)
 800dd1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1e:	681f      	ldr	r7, [r3, #0]
 800dd20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dd22:	4605      	mov	r5, r0
 800dd24:	460e      	mov	r6, r1
 800dd26:	b9ec      	cbnz	r4, 800dd64 <strtok+0x4c>
 800dd28:	2050      	movs	r0, #80	@ 0x50
 800dd2a:	f7ff fd0d 	bl	800d748 <malloc>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	6478      	str	r0, [r7, #68]	@ 0x44
 800dd32:	b920      	cbnz	r0, 800dd3e <strtok+0x26>
 800dd34:	4b10      	ldr	r3, [pc, #64]	@ (800dd78 <strtok+0x60>)
 800dd36:	4811      	ldr	r0, [pc, #68]	@ (800dd7c <strtok+0x64>)
 800dd38:	215b      	movs	r1, #91	@ 0x5b
 800dd3a:	f000 f8d5 	bl	800dee8 <__assert_func>
 800dd3e:	e9c0 4400 	strd	r4, r4, [r0]
 800dd42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dd46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dd4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dd4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dd52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dd56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dd5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dd5e:	6184      	str	r4, [r0, #24]
 800dd60:	7704      	strb	r4, [r0, #28]
 800dd62:	6244      	str	r4, [r0, #36]	@ 0x24
 800dd64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd66:	4631      	mov	r1, r6
 800dd68:	4628      	mov	r0, r5
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd70:	f000 b806 	b.w	800dd80 <__strtok_r>
 800dd74:	20000038 	.word	0x20000038
 800dd78:	08010529 	.word	0x08010529
 800dd7c:	08010540 	.word	0x08010540

0800dd80 <__strtok_r>:
 800dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd82:	4604      	mov	r4, r0
 800dd84:	b908      	cbnz	r0, 800dd8a <__strtok_r+0xa>
 800dd86:	6814      	ldr	r4, [r2, #0]
 800dd88:	b144      	cbz	r4, 800dd9c <__strtok_r+0x1c>
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dd90:	460f      	mov	r7, r1
 800dd92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dd96:	b91e      	cbnz	r6, 800dda0 <__strtok_r+0x20>
 800dd98:	b965      	cbnz	r5, 800ddb4 <__strtok_r+0x34>
 800dd9a:	6015      	str	r5, [r2, #0]
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	e005      	b.n	800ddac <__strtok_r+0x2c>
 800dda0:	42b5      	cmp	r5, r6
 800dda2:	d1f6      	bne.n	800dd92 <__strtok_r+0x12>
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1f0      	bne.n	800dd8a <__strtok_r+0xa>
 800dda8:	6014      	str	r4, [r2, #0]
 800ddaa:	7003      	strb	r3, [r0, #0]
 800ddac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddae:	461c      	mov	r4, r3
 800ddb0:	e00c      	b.n	800ddcc <__strtok_r+0x4c>
 800ddb2:	b915      	cbnz	r5, 800ddba <__strtok_r+0x3a>
 800ddb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ddb8:	460e      	mov	r6, r1
 800ddba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ddbe:	42ab      	cmp	r3, r5
 800ddc0:	d1f7      	bne.n	800ddb2 <__strtok_r+0x32>
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d0f3      	beq.n	800ddae <__strtok_r+0x2e>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ddcc:	6014      	str	r4, [r2, #0]
 800ddce:	e7ed      	b.n	800ddac <__strtok_r+0x2c>

0800ddd0 <_close_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d06      	ldr	r5, [pc, #24]	@ (800ddec <_close_r+0x1c>)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4608      	mov	r0, r1
 800ddda:	602b      	str	r3, [r5, #0]
 800dddc:	f7f5 fbfa 	bl	80035d4 <_close>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	d102      	bne.n	800ddea <_close_r+0x1a>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	b103      	cbz	r3, 800ddea <_close_r+0x1a>
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	200057f8 	.word	0x200057f8

0800ddf0 <_lseek_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_lseek_r+0x20>)
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	4608      	mov	r0, r1
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	602a      	str	r2, [r5, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	f7f5 fc0f 	bl	8003622 <_lseek>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_lseek_r+0x1e>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_lseek_r+0x1e>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	200057f8 	.word	0x200057f8

0800de14 <_read_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d07      	ldr	r5, [pc, #28]	@ (800de34 <_read_r+0x20>)
 800de18:	4604      	mov	r4, r0
 800de1a:	4608      	mov	r0, r1
 800de1c:	4611      	mov	r1, r2
 800de1e:	2200      	movs	r2, #0
 800de20:	602a      	str	r2, [r5, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	f7f5 fb9d 	bl	8003562 <_read>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_read_r+0x1e>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_read_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	200057f8 	.word	0x200057f8

0800de38 <_sbrk_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4d06      	ldr	r5, [pc, #24]	@ (800de54 <_sbrk_r+0x1c>)
 800de3c:	2300      	movs	r3, #0
 800de3e:	4604      	mov	r4, r0
 800de40:	4608      	mov	r0, r1
 800de42:	602b      	str	r3, [r5, #0]
 800de44:	f7f5 fbfa 	bl	800363c <_sbrk>
 800de48:	1c43      	adds	r3, r0, #1
 800de4a:	d102      	bne.n	800de52 <_sbrk_r+0x1a>
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	b103      	cbz	r3, 800de52 <_sbrk_r+0x1a>
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	bd38      	pop	{r3, r4, r5, pc}
 800de54:	200057f8 	.word	0x200057f8

0800de58 <_write_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d07      	ldr	r5, [pc, #28]	@ (800de78 <_write_r+0x20>)
 800de5c:	4604      	mov	r4, r0
 800de5e:	4608      	mov	r0, r1
 800de60:	4611      	mov	r1, r2
 800de62:	2200      	movs	r2, #0
 800de64:	602a      	str	r2, [r5, #0]
 800de66:	461a      	mov	r2, r3
 800de68:	f7f5 fb98 	bl	800359c <_write>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_write_r+0x1e>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_write_r+0x1e>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	200057f8 	.word	0x200057f8

0800de7c <__errno>:
 800de7c:	4b01      	ldr	r3, [pc, #4]	@ (800de84 <__errno+0x8>)
 800de7e:	6818      	ldr	r0, [r3, #0]
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	20000038 	.word	0x20000038

0800de88 <__libc_init_array>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	4d0d      	ldr	r5, [pc, #52]	@ (800dec0 <__libc_init_array+0x38>)
 800de8c:	4c0d      	ldr	r4, [pc, #52]	@ (800dec4 <__libc_init_array+0x3c>)
 800de8e:	1b64      	subs	r4, r4, r5
 800de90:	10a4      	asrs	r4, r4, #2
 800de92:	2600      	movs	r6, #0
 800de94:	42a6      	cmp	r6, r4
 800de96:	d109      	bne.n	800deac <__libc_init_array+0x24>
 800de98:	4d0b      	ldr	r5, [pc, #44]	@ (800dec8 <__libc_init_array+0x40>)
 800de9a:	4c0c      	ldr	r4, [pc, #48]	@ (800decc <__libc_init_array+0x44>)
 800de9c:	f001 fb30 	bl	800f500 <_init>
 800dea0:	1b64      	subs	r4, r4, r5
 800dea2:	10a4      	asrs	r4, r4, #2
 800dea4:	2600      	movs	r6, #0
 800dea6:	42a6      	cmp	r6, r4
 800dea8:	d105      	bne.n	800deb6 <__libc_init_array+0x2e>
 800deaa:	bd70      	pop	{r4, r5, r6, pc}
 800deac:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb0:	4798      	blx	r3
 800deb2:	3601      	adds	r6, #1
 800deb4:	e7ee      	b.n	800de94 <__libc_init_array+0xc>
 800deb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800deba:	4798      	blx	r3
 800debc:	3601      	adds	r6, #1
 800debe:	e7f2      	b.n	800dea6 <__libc_init_array+0x1e>
 800dec0:	0801062c 	.word	0x0801062c
 800dec4:	0801062c 	.word	0x0801062c
 800dec8:	0801062c 	.word	0x0801062c
 800decc:	08010630 	.word	0x08010630

0800ded0 <__retarget_lock_init_recursive>:
 800ded0:	4770      	bx	lr

0800ded2 <__retarget_lock_acquire_recursive>:
 800ded2:	4770      	bx	lr

0800ded4 <__retarget_lock_release_recursive>:
 800ded4:	4770      	bx	lr

0800ded6 <strcpy>:
 800ded6:	4603      	mov	r3, r0
 800ded8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dedc:	f803 2b01 	strb.w	r2, [r3], #1
 800dee0:	2a00      	cmp	r2, #0
 800dee2:	d1f9      	bne.n	800ded8 <strcpy+0x2>
 800dee4:	4770      	bx	lr
	...

0800dee8 <__assert_func>:
 800dee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800deea:	4614      	mov	r4, r2
 800deec:	461a      	mov	r2, r3
 800deee:	4b09      	ldr	r3, [pc, #36]	@ (800df14 <__assert_func+0x2c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4605      	mov	r5, r0
 800def4:	68d8      	ldr	r0, [r3, #12]
 800def6:	b954      	cbnz	r4, 800df0e <__assert_func+0x26>
 800def8:	4b07      	ldr	r3, [pc, #28]	@ (800df18 <__assert_func+0x30>)
 800defa:	461c      	mov	r4, r3
 800defc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df00:	9100      	str	r1, [sp, #0]
 800df02:	462b      	mov	r3, r5
 800df04:	4905      	ldr	r1, [pc, #20]	@ (800df1c <__assert_func+0x34>)
 800df06:	f000 ff03 	bl	800ed10 <fiprintf>
 800df0a:	f000 ffae 	bl	800ee6a <abort>
 800df0e:	4b04      	ldr	r3, [pc, #16]	@ (800df20 <__assert_func+0x38>)
 800df10:	e7f4      	b.n	800defc <__assert_func+0x14>
 800df12:	bf00      	nop
 800df14:	20000038 	.word	0x20000038
 800df18:	080105d5 	.word	0x080105d5
 800df1c:	080105a7 	.word	0x080105a7
 800df20:	0801059a 	.word	0x0801059a

0800df24 <_free_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4605      	mov	r5, r0
 800df28:	2900      	cmp	r1, #0
 800df2a:	d041      	beq.n	800dfb0 <_free_r+0x8c>
 800df2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df30:	1f0c      	subs	r4, r1, #4
 800df32:	2b00      	cmp	r3, #0
 800df34:	bfb8      	it	lt
 800df36:	18e4      	addlt	r4, r4, r3
 800df38:	f7ff fcb8 	bl	800d8ac <__malloc_lock>
 800df3c:	4a1d      	ldr	r2, [pc, #116]	@ (800dfb4 <_free_r+0x90>)
 800df3e:	6813      	ldr	r3, [r2, #0]
 800df40:	b933      	cbnz	r3, 800df50 <_free_r+0x2c>
 800df42:	6063      	str	r3, [r4, #4]
 800df44:	6014      	str	r4, [r2, #0]
 800df46:	4628      	mov	r0, r5
 800df48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df4c:	f7ff bcb4 	b.w	800d8b8 <__malloc_unlock>
 800df50:	42a3      	cmp	r3, r4
 800df52:	d908      	bls.n	800df66 <_free_r+0x42>
 800df54:	6820      	ldr	r0, [r4, #0]
 800df56:	1821      	adds	r1, r4, r0
 800df58:	428b      	cmp	r3, r1
 800df5a:	bf01      	itttt	eq
 800df5c:	6819      	ldreq	r1, [r3, #0]
 800df5e:	685b      	ldreq	r3, [r3, #4]
 800df60:	1809      	addeq	r1, r1, r0
 800df62:	6021      	streq	r1, [r4, #0]
 800df64:	e7ed      	b.n	800df42 <_free_r+0x1e>
 800df66:	461a      	mov	r2, r3
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	b10b      	cbz	r3, 800df70 <_free_r+0x4c>
 800df6c:	42a3      	cmp	r3, r4
 800df6e:	d9fa      	bls.n	800df66 <_free_r+0x42>
 800df70:	6811      	ldr	r1, [r2, #0]
 800df72:	1850      	adds	r0, r2, r1
 800df74:	42a0      	cmp	r0, r4
 800df76:	d10b      	bne.n	800df90 <_free_r+0x6c>
 800df78:	6820      	ldr	r0, [r4, #0]
 800df7a:	4401      	add	r1, r0
 800df7c:	1850      	adds	r0, r2, r1
 800df7e:	4283      	cmp	r3, r0
 800df80:	6011      	str	r1, [r2, #0]
 800df82:	d1e0      	bne.n	800df46 <_free_r+0x22>
 800df84:	6818      	ldr	r0, [r3, #0]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	6053      	str	r3, [r2, #4]
 800df8a:	4408      	add	r0, r1
 800df8c:	6010      	str	r0, [r2, #0]
 800df8e:	e7da      	b.n	800df46 <_free_r+0x22>
 800df90:	d902      	bls.n	800df98 <_free_r+0x74>
 800df92:	230c      	movs	r3, #12
 800df94:	602b      	str	r3, [r5, #0]
 800df96:	e7d6      	b.n	800df46 <_free_r+0x22>
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	1821      	adds	r1, r4, r0
 800df9c:	428b      	cmp	r3, r1
 800df9e:	bf04      	itt	eq
 800dfa0:	6819      	ldreq	r1, [r3, #0]
 800dfa2:	685b      	ldreq	r3, [r3, #4]
 800dfa4:	6063      	str	r3, [r4, #4]
 800dfa6:	bf04      	itt	eq
 800dfa8:	1809      	addeq	r1, r1, r0
 800dfaa:	6021      	streq	r1, [r4, #0]
 800dfac:	6054      	str	r4, [r2, #4]
 800dfae:	e7ca      	b.n	800df46 <_free_r+0x22>
 800dfb0:	bd38      	pop	{r3, r4, r5, pc}
 800dfb2:	bf00      	nop
 800dfb4:	200056b8 	.word	0x200056b8

0800dfb8 <__ssputs_r>:
 800dfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfbc:	688e      	ldr	r6, [r1, #8]
 800dfbe:	461f      	mov	r7, r3
 800dfc0:	42be      	cmp	r6, r7
 800dfc2:	680b      	ldr	r3, [r1, #0]
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	4690      	mov	r8, r2
 800dfca:	d82d      	bhi.n	800e028 <__ssputs_r+0x70>
 800dfcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dfd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dfd4:	d026      	beq.n	800e024 <__ssputs_r+0x6c>
 800dfd6:	6965      	ldr	r5, [r4, #20]
 800dfd8:	6909      	ldr	r1, [r1, #16]
 800dfda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfde:	eba3 0901 	sub.w	r9, r3, r1
 800dfe2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfe6:	1c7b      	adds	r3, r7, #1
 800dfe8:	444b      	add	r3, r9
 800dfea:	106d      	asrs	r5, r5, #1
 800dfec:	429d      	cmp	r5, r3
 800dfee:	bf38      	it	cc
 800dff0:	461d      	movcc	r5, r3
 800dff2:	0553      	lsls	r3, r2, #21
 800dff4:	d527      	bpl.n	800e046 <__ssputs_r+0x8e>
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7ff fbd8 	bl	800d7ac <_malloc_r>
 800dffc:	4606      	mov	r6, r0
 800dffe:	b360      	cbz	r0, 800e05a <__ssputs_r+0xa2>
 800e000:	6921      	ldr	r1, [r4, #16]
 800e002:	464a      	mov	r2, r9
 800e004:	f000 ff23 	bl	800ee4e <memcpy>
 800e008:	89a3      	ldrh	r3, [r4, #12]
 800e00a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e012:	81a3      	strh	r3, [r4, #12]
 800e014:	6126      	str	r6, [r4, #16]
 800e016:	6165      	str	r5, [r4, #20]
 800e018:	444e      	add	r6, r9
 800e01a:	eba5 0509 	sub.w	r5, r5, r9
 800e01e:	6026      	str	r6, [r4, #0]
 800e020:	60a5      	str	r5, [r4, #8]
 800e022:	463e      	mov	r6, r7
 800e024:	42be      	cmp	r6, r7
 800e026:	d900      	bls.n	800e02a <__ssputs_r+0x72>
 800e028:	463e      	mov	r6, r7
 800e02a:	6820      	ldr	r0, [r4, #0]
 800e02c:	4632      	mov	r2, r6
 800e02e:	4641      	mov	r1, r8
 800e030:	f000 fef3 	bl	800ee1a <memmove>
 800e034:	68a3      	ldr	r3, [r4, #8]
 800e036:	1b9b      	subs	r3, r3, r6
 800e038:	60a3      	str	r3, [r4, #8]
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	4433      	add	r3, r6
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	2000      	movs	r0, #0
 800e042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e046:	462a      	mov	r2, r5
 800e048:	f000 ff16 	bl	800ee78 <_realloc_r>
 800e04c:	4606      	mov	r6, r0
 800e04e:	2800      	cmp	r0, #0
 800e050:	d1e0      	bne.n	800e014 <__ssputs_r+0x5c>
 800e052:	6921      	ldr	r1, [r4, #16]
 800e054:	4650      	mov	r0, sl
 800e056:	f7ff ff65 	bl	800df24 <_free_r>
 800e05a:	230c      	movs	r3, #12
 800e05c:	f8ca 3000 	str.w	r3, [sl]
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e066:	81a3      	strh	r3, [r4, #12]
 800e068:	f04f 30ff 	mov.w	r0, #4294967295
 800e06c:	e7e9      	b.n	800e042 <__ssputs_r+0x8a>
	...

0800e070 <_svfiprintf_r>:
 800e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	4698      	mov	r8, r3
 800e076:	898b      	ldrh	r3, [r1, #12]
 800e078:	061b      	lsls	r3, r3, #24
 800e07a:	b09d      	sub	sp, #116	@ 0x74
 800e07c:	4607      	mov	r7, r0
 800e07e:	460d      	mov	r5, r1
 800e080:	4614      	mov	r4, r2
 800e082:	d510      	bpl.n	800e0a6 <_svfiprintf_r+0x36>
 800e084:	690b      	ldr	r3, [r1, #16]
 800e086:	b973      	cbnz	r3, 800e0a6 <_svfiprintf_r+0x36>
 800e088:	2140      	movs	r1, #64	@ 0x40
 800e08a:	f7ff fb8f 	bl	800d7ac <_malloc_r>
 800e08e:	6028      	str	r0, [r5, #0]
 800e090:	6128      	str	r0, [r5, #16]
 800e092:	b930      	cbnz	r0, 800e0a2 <_svfiprintf_r+0x32>
 800e094:	230c      	movs	r3, #12
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	f04f 30ff 	mov.w	r0, #4294967295
 800e09c:	b01d      	add	sp, #116	@ 0x74
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	2340      	movs	r3, #64	@ 0x40
 800e0a4:	616b      	str	r3, [r5, #20]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0aa:	2320      	movs	r3, #32
 800e0ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0b4:	2330      	movs	r3, #48	@ 0x30
 800e0b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e254 <_svfiprintf_r+0x1e4>
 800e0ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0be:	f04f 0901 	mov.w	r9, #1
 800e0c2:	4623      	mov	r3, r4
 800e0c4:	469a      	mov	sl, r3
 800e0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ca:	b10a      	cbz	r2, 800e0d0 <_svfiprintf_r+0x60>
 800e0cc:	2a25      	cmp	r2, #37	@ 0x25
 800e0ce:	d1f9      	bne.n	800e0c4 <_svfiprintf_r+0x54>
 800e0d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e0d4:	d00b      	beq.n	800e0ee <_svfiprintf_r+0x7e>
 800e0d6:	465b      	mov	r3, fp
 800e0d8:	4622      	mov	r2, r4
 800e0da:	4629      	mov	r1, r5
 800e0dc:	4638      	mov	r0, r7
 800e0de:	f7ff ff6b 	bl	800dfb8 <__ssputs_r>
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f000 80a7 	beq.w	800e236 <_svfiprintf_r+0x1c6>
 800e0e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ea:	445a      	add	r2, fp
 800e0ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 809f 	beq.w	800e236 <_svfiprintf_r+0x1c6>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e102:	f10a 0a01 	add.w	sl, sl, #1
 800e106:	9304      	str	r3, [sp, #16]
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e10e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e110:	4654      	mov	r4, sl
 800e112:	2205      	movs	r2, #5
 800e114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e118:	484e      	ldr	r0, [pc, #312]	@ (800e254 <_svfiprintf_r+0x1e4>)
 800e11a:	f7f2 f861 	bl	80001e0 <memchr>
 800e11e:	9a04      	ldr	r2, [sp, #16]
 800e120:	b9d8      	cbnz	r0, 800e15a <_svfiprintf_r+0xea>
 800e122:	06d0      	lsls	r0, r2, #27
 800e124:	bf44      	itt	mi
 800e126:	2320      	movmi	r3, #32
 800e128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e12c:	0711      	lsls	r1, r2, #28
 800e12e:	bf44      	itt	mi
 800e130:	232b      	movmi	r3, #43	@ 0x2b
 800e132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e136:	f89a 3000 	ldrb.w	r3, [sl]
 800e13a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e13c:	d015      	beq.n	800e16a <_svfiprintf_r+0xfa>
 800e13e:	9a07      	ldr	r2, [sp, #28]
 800e140:	4654      	mov	r4, sl
 800e142:	2000      	movs	r0, #0
 800e144:	f04f 0c0a 	mov.w	ip, #10
 800e148:	4621      	mov	r1, r4
 800e14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e14e:	3b30      	subs	r3, #48	@ 0x30
 800e150:	2b09      	cmp	r3, #9
 800e152:	d94b      	bls.n	800e1ec <_svfiprintf_r+0x17c>
 800e154:	b1b0      	cbz	r0, 800e184 <_svfiprintf_r+0x114>
 800e156:	9207      	str	r2, [sp, #28]
 800e158:	e014      	b.n	800e184 <_svfiprintf_r+0x114>
 800e15a:	eba0 0308 	sub.w	r3, r0, r8
 800e15e:	fa09 f303 	lsl.w	r3, r9, r3
 800e162:	4313      	orrs	r3, r2
 800e164:	9304      	str	r3, [sp, #16]
 800e166:	46a2      	mov	sl, r4
 800e168:	e7d2      	b.n	800e110 <_svfiprintf_r+0xa0>
 800e16a:	9b03      	ldr	r3, [sp, #12]
 800e16c:	1d19      	adds	r1, r3, #4
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	9103      	str	r1, [sp, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	bfbb      	ittet	lt
 800e176:	425b      	neglt	r3, r3
 800e178:	f042 0202 	orrlt.w	r2, r2, #2
 800e17c:	9307      	strge	r3, [sp, #28]
 800e17e:	9307      	strlt	r3, [sp, #28]
 800e180:	bfb8      	it	lt
 800e182:	9204      	strlt	r2, [sp, #16]
 800e184:	7823      	ldrb	r3, [r4, #0]
 800e186:	2b2e      	cmp	r3, #46	@ 0x2e
 800e188:	d10a      	bne.n	800e1a0 <_svfiprintf_r+0x130>
 800e18a:	7863      	ldrb	r3, [r4, #1]
 800e18c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e18e:	d132      	bne.n	800e1f6 <_svfiprintf_r+0x186>
 800e190:	9b03      	ldr	r3, [sp, #12]
 800e192:	1d1a      	adds	r2, r3, #4
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	9203      	str	r2, [sp, #12]
 800e198:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e19c:	3402      	adds	r4, #2
 800e19e:	9305      	str	r3, [sp, #20]
 800e1a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e264 <_svfiprintf_r+0x1f4>
 800e1a4:	7821      	ldrb	r1, [r4, #0]
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	f7f2 f819 	bl	80001e0 <memchr>
 800e1ae:	b138      	cbz	r0, 800e1c0 <_svfiprintf_r+0x150>
 800e1b0:	9b04      	ldr	r3, [sp, #16]
 800e1b2:	eba0 000a 	sub.w	r0, r0, sl
 800e1b6:	2240      	movs	r2, #64	@ 0x40
 800e1b8:	4082      	lsls	r2, r0
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	3401      	adds	r4, #1
 800e1be:	9304      	str	r3, [sp, #16]
 800e1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1c4:	4824      	ldr	r0, [pc, #144]	@ (800e258 <_svfiprintf_r+0x1e8>)
 800e1c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1ca:	2206      	movs	r2, #6
 800e1cc:	f7f2 f808 	bl	80001e0 <memchr>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d036      	beq.n	800e242 <_svfiprintf_r+0x1d2>
 800e1d4:	4b21      	ldr	r3, [pc, #132]	@ (800e25c <_svfiprintf_r+0x1ec>)
 800e1d6:	bb1b      	cbnz	r3, 800e220 <_svfiprintf_r+0x1b0>
 800e1d8:	9b03      	ldr	r3, [sp, #12]
 800e1da:	3307      	adds	r3, #7
 800e1dc:	f023 0307 	bic.w	r3, r3, #7
 800e1e0:	3308      	adds	r3, #8
 800e1e2:	9303      	str	r3, [sp, #12]
 800e1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1e6:	4433      	add	r3, r6
 800e1e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ea:	e76a      	b.n	800e0c2 <_svfiprintf_r+0x52>
 800e1ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1f0:	460c      	mov	r4, r1
 800e1f2:	2001      	movs	r0, #1
 800e1f4:	e7a8      	b.n	800e148 <_svfiprintf_r+0xd8>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	3401      	adds	r4, #1
 800e1fa:	9305      	str	r3, [sp, #20]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f04f 0c0a 	mov.w	ip, #10
 800e202:	4620      	mov	r0, r4
 800e204:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e208:	3a30      	subs	r2, #48	@ 0x30
 800e20a:	2a09      	cmp	r2, #9
 800e20c:	d903      	bls.n	800e216 <_svfiprintf_r+0x1a6>
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d0c6      	beq.n	800e1a0 <_svfiprintf_r+0x130>
 800e212:	9105      	str	r1, [sp, #20]
 800e214:	e7c4      	b.n	800e1a0 <_svfiprintf_r+0x130>
 800e216:	fb0c 2101 	mla	r1, ip, r1, r2
 800e21a:	4604      	mov	r4, r0
 800e21c:	2301      	movs	r3, #1
 800e21e:	e7f0      	b.n	800e202 <_svfiprintf_r+0x192>
 800e220:	ab03      	add	r3, sp, #12
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	462a      	mov	r2, r5
 800e226:	4b0e      	ldr	r3, [pc, #56]	@ (800e260 <_svfiprintf_r+0x1f0>)
 800e228:	a904      	add	r1, sp, #16
 800e22a:	4638      	mov	r0, r7
 800e22c:	f3af 8000 	nop.w
 800e230:	1c42      	adds	r2, r0, #1
 800e232:	4606      	mov	r6, r0
 800e234:	d1d6      	bne.n	800e1e4 <_svfiprintf_r+0x174>
 800e236:	89ab      	ldrh	r3, [r5, #12]
 800e238:	065b      	lsls	r3, r3, #25
 800e23a:	f53f af2d 	bmi.w	800e098 <_svfiprintf_r+0x28>
 800e23e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e240:	e72c      	b.n	800e09c <_svfiprintf_r+0x2c>
 800e242:	ab03      	add	r3, sp, #12
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	462a      	mov	r2, r5
 800e248:	4b05      	ldr	r3, [pc, #20]	@ (800e260 <_svfiprintf_r+0x1f0>)
 800e24a:	a904      	add	r1, sp, #16
 800e24c:	4638      	mov	r0, r7
 800e24e:	f000 fa45 	bl	800e6dc <_printf_i>
 800e252:	e7ed      	b.n	800e230 <_svfiprintf_r+0x1c0>
 800e254:	080105d6 	.word	0x080105d6
 800e258:	080105e0 	.word	0x080105e0
 800e25c:	00000000 	.word	0x00000000
 800e260:	0800dfb9 	.word	0x0800dfb9
 800e264:	080105dc 	.word	0x080105dc

0800e268 <_sungetc_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	1c4b      	adds	r3, r1, #1
 800e26c:	4614      	mov	r4, r2
 800e26e:	d103      	bne.n	800e278 <_sungetc_r+0x10>
 800e270:	f04f 35ff 	mov.w	r5, #4294967295
 800e274:	4628      	mov	r0, r5
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	8993      	ldrh	r3, [r2, #12]
 800e27a:	f023 0320 	bic.w	r3, r3, #32
 800e27e:	8193      	strh	r3, [r2, #12]
 800e280:	6853      	ldr	r3, [r2, #4]
 800e282:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e284:	b2cd      	uxtb	r5, r1
 800e286:	b18a      	cbz	r2, 800e2ac <_sungetc_r+0x44>
 800e288:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e28a:	429a      	cmp	r2, r3
 800e28c:	dd08      	ble.n	800e2a0 <_sungetc_r+0x38>
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	1e5a      	subs	r2, r3, #1
 800e292:	6022      	str	r2, [r4, #0]
 800e294:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e298:	6863      	ldr	r3, [r4, #4]
 800e29a:	3301      	adds	r3, #1
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	e7e9      	b.n	800e274 <_sungetc_r+0xc>
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	f000 fd80 	bl	800eda6 <__submore>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d0f1      	beq.n	800e28e <_sungetc_r+0x26>
 800e2aa:	e7e1      	b.n	800e270 <_sungetc_r+0x8>
 800e2ac:	6921      	ldr	r1, [r4, #16]
 800e2ae:	6822      	ldr	r2, [r4, #0]
 800e2b0:	b141      	cbz	r1, 800e2c4 <_sungetc_r+0x5c>
 800e2b2:	4291      	cmp	r1, r2
 800e2b4:	d206      	bcs.n	800e2c4 <_sungetc_r+0x5c>
 800e2b6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e2ba:	42a9      	cmp	r1, r5
 800e2bc:	d102      	bne.n	800e2c4 <_sungetc_r+0x5c>
 800e2be:	3a01      	subs	r2, #1
 800e2c0:	6022      	str	r2, [r4, #0]
 800e2c2:	e7ea      	b.n	800e29a <_sungetc_r+0x32>
 800e2c4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e2c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2ce:	2303      	movs	r3, #3
 800e2d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e2d2:	4623      	mov	r3, r4
 800e2d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e7de      	b.n	800e29c <_sungetc_r+0x34>

0800e2de <__ssrefill_r>:
 800e2de:	b510      	push	{r4, lr}
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e2e4:	b169      	cbz	r1, 800e302 <__ssrefill_r+0x24>
 800e2e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2ea:	4299      	cmp	r1, r3
 800e2ec:	d001      	beq.n	800e2f2 <__ssrefill_r+0x14>
 800e2ee:	f7ff fe19 	bl	800df24 <_free_r>
 800e2f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2f4:	6063      	str	r3, [r4, #4]
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	6360      	str	r0, [r4, #52]	@ 0x34
 800e2fa:	b113      	cbz	r3, 800e302 <__ssrefill_r+0x24>
 800e2fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e2fe:	6023      	str	r3, [r4, #0]
 800e300:	bd10      	pop	{r4, pc}
 800e302:	6923      	ldr	r3, [r4, #16]
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	2300      	movs	r3, #0
 800e308:	6063      	str	r3, [r4, #4]
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	f043 0320 	orr.w	r3, r3, #32
 800e310:	81a3      	strh	r3, [r4, #12]
 800e312:	f04f 30ff 	mov.w	r0, #4294967295
 800e316:	e7f3      	b.n	800e300 <__ssrefill_r+0x22>

0800e318 <__ssvfiscanf_r>:
 800e318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e31c:	460c      	mov	r4, r1
 800e31e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e322:	2100      	movs	r1, #0
 800e324:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e328:	49a5      	ldr	r1, [pc, #660]	@ (800e5c0 <__ssvfiscanf_r+0x2a8>)
 800e32a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e32c:	f10d 0804 	add.w	r8, sp, #4
 800e330:	49a4      	ldr	r1, [pc, #656]	@ (800e5c4 <__ssvfiscanf_r+0x2ac>)
 800e332:	4fa5      	ldr	r7, [pc, #660]	@ (800e5c8 <__ssvfiscanf_r+0x2b0>)
 800e334:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e338:	4606      	mov	r6, r0
 800e33a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	7813      	ldrb	r3, [r2, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	f000 8158 	beq.w	800e5f6 <__ssvfiscanf_r+0x2de>
 800e346:	5cf9      	ldrb	r1, [r7, r3]
 800e348:	f011 0108 	ands.w	r1, r1, #8
 800e34c:	f102 0501 	add.w	r5, r2, #1
 800e350:	d019      	beq.n	800e386 <__ssvfiscanf_r+0x6e>
 800e352:	6863      	ldr	r3, [r4, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	dd0f      	ble.n	800e378 <__ssvfiscanf_r+0x60>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	781a      	ldrb	r2, [r3, #0]
 800e35c:	5cba      	ldrb	r2, [r7, r2]
 800e35e:	0712      	lsls	r2, r2, #28
 800e360:	d401      	bmi.n	800e366 <__ssvfiscanf_r+0x4e>
 800e362:	462a      	mov	r2, r5
 800e364:	e7eb      	b.n	800e33e <__ssvfiscanf_r+0x26>
 800e366:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e368:	3201      	adds	r2, #1
 800e36a:	9245      	str	r2, [sp, #276]	@ 0x114
 800e36c:	6862      	ldr	r2, [r4, #4]
 800e36e:	3301      	adds	r3, #1
 800e370:	3a01      	subs	r2, #1
 800e372:	6062      	str	r2, [r4, #4]
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	e7ec      	b.n	800e352 <__ssvfiscanf_r+0x3a>
 800e378:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e37a:	4621      	mov	r1, r4
 800e37c:	4630      	mov	r0, r6
 800e37e:	4798      	blx	r3
 800e380:	2800      	cmp	r0, #0
 800e382:	d0e9      	beq.n	800e358 <__ssvfiscanf_r+0x40>
 800e384:	e7ed      	b.n	800e362 <__ssvfiscanf_r+0x4a>
 800e386:	2b25      	cmp	r3, #37	@ 0x25
 800e388:	d012      	beq.n	800e3b0 <__ssvfiscanf_r+0x98>
 800e38a:	4699      	mov	r9, r3
 800e38c:	6863      	ldr	r3, [r4, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f340 8093 	ble.w	800e4ba <__ssvfiscanf_r+0x1a2>
 800e394:	6822      	ldr	r2, [r4, #0]
 800e396:	7813      	ldrb	r3, [r2, #0]
 800e398:	454b      	cmp	r3, r9
 800e39a:	f040 812c 	bne.w	800e5f6 <__ssvfiscanf_r+0x2de>
 800e39e:	6863      	ldr	r3, [r4, #4]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	6063      	str	r3, [r4, #4]
 800e3a4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e3a6:	3201      	adds	r2, #1
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	6022      	str	r2, [r4, #0]
 800e3ac:	9345      	str	r3, [sp, #276]	@ 0x114
 800e3ae:	e7d8      	b.n	800e362 <__ssvfiscanf_r+0x4a>
 800e3b0:	9141      	str	r1, [sp, #260]	@ 0x104
 800e3b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e3b4:	7853      	ldrb	r3, [r2, #1]
 800e3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3b8:	bf02      	ittt	eq
 800e3ba:	2310      	moveq	r3, #16
 800e3bc:	1c95      	addeq	r5, r2, #2
 800e3be:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e3c0:	220a      	movs	r2, #10
 800e3c2:	46a9      	mov	r9, r5
 800e3c4:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e3c8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e3cc:	2b09      	cmp	r3, #9
 800e3ce:	d91e      	bls.n	800e40e <__ssvfiscanf_r+0xf6>
 800e3d0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e5cc <__ssvfiscanf_r+0x2b4>
 800e3d4:	2203      	movs	r2, #3
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	f7f1 ff02 	bl	80001e0 <memchr>
 800e3dc:	b138      	cbz	r0, 800e3ee <__ssvfiscanf_r+0xd6>
 800e3de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e3e0:	eba0 000a 	sub.w	r0, r0, sl
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	4083      	lsls	r3, r0
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	9341      	str	r3, [sp, #260]	@ 0x104
 800e3ec:	464d      	mov	r5, r9
 800e3ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e3f2:	2b78      	cmp	r3, #120	@ 0x78
 800e3f4:	d806      	bhi.n	800e404 <__ssvfiscanf_r+0xec>
 800e3f6:	2b57      	cmp	r3, #87	@ 0x57
 800e3f8:	d810      	bhi.n	800e41c <__ssvfiscanf_r+0x104>
 800e3fa:	2b25      	cmp	r3, #37	@ 0x25
 800e3fc:	d0c5      	beq.n	800e38a <__ssvfiscanf_r+0x72>
 800e3fe:	d857      	bhi.n	800e4b0 <__ssvfiscanf_r+0x198>
 800e400:	2b00      	cmp	r3, #0
 800e402:	d065      	beq.n	800e4d0 <__ssvfiscanf_r+0x1b8>
 800e404:	2303      	movs	r3, #3
 800e406:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e408:	230a      	movs	r3, #10
 800e40a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e40c:	e078      	b.n	800e500 <__ssvfiscanf_r+0x1e8>
 800e40e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e410:	fb02 1103 	mla	r1, r2, r3, r1
 800e414:	3930      	subs	r1, #48	@ 0x30
 800e416:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e418:	464d      	mov	r5, r9
 800e41a:	e7d2      	b.n	800e3c2 <__ssvfiscanf_r+0xaa>
 800e41c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e420:	2a20      	cmp	r2, #32
 800e422:	d8ef      	bhi.n	800e404 <__ssvfiscanf_r+0xec>
 800e424:	a101      	add	r1, pc, #4	@ (adr r1, 800e42c <__ssvfiscanf_r+0x114>)
 800e426:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e42a:	bf00      	nop
 800e42c:	0800e4df 	.word	0x0800e4df
 800e430:	0800e405 	.word	0x0800e405
 800e434:	0800e405 	.word	0x0800e405
 800e438:	0800e539 	.word	0x0800e539
 800e43c:	0800e405 	.word	0x0800e405
 800e440:	0800e405 	.word	0x0800e405
 800e444:	0800e405 	.word	0x0800e405
 800e448:	0800e405 	.word	0x0800e405
 800e44c:	0800e405 	.word	0x0800e405
 800e450:	0800e405 	.word	0x0800e405
 800e454:	0800e405 	.word	0x0800e405
 800e458:	0800e54f 	.word	0x0800e54f
 800e45c:	0800e535 	.word	0x0800e535
 800e460:	0800e4b7 	.word	0x0800e4b7
 800e464:	0800e4b7 	.word	0x0800e4b7
 800e468:	0800e4b7 	.word	0x0800e4b7
 800e46c:	0800e405 	.word	0x0800e405
 800e470:	0800e4f1 	.word	0x0800e4f1
 800e474:	0800e405 	.word	0x0800e405
 800e478:	0800e405 	.word	0x0800e405
 800e47c:	0800e405 	.word	0x0800e405
 800e480:	0800e405 	.word	0x0800e405
 800e484:	0800e55f 	.word	0x0800e55f
 800e488:	0800e4f9 	.word	0x0800e4f9
 800e48c:	0800e4d7 	.word	0x0800e4d7
 800e490:	0800e405 	.word	0x0800e405
 800e494:	0800e405 	.word	0x0800e405
 800e498:	0800e55b 	.word	0x0800e55b
 800e49c:	0800e405 	.word	0x0800e405
 800e4a0:	0800e535 	.word	0x0800e535
 800e4a4:	0800e405 	.word	0x0800e405
 800e4a8:	0800e405 	.word	0x0800e405
 800e4ac:	0800e4df 	.word	0x0800e4df
 800e4b0:	3b45      	subs	r3, #69	@ 0x45
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d8a6      	bhi.n	800e404 <__ssvfiscanf_r+0xec>
 800e4b6:	2305      	movs	r3, #5
 800e4b8:	e021      	b.n	800e4fe <__ssvfiscanf_r+0x1e6>
 800e4ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e4bc:	4621      	mov	r1, r4
 800e4be:	4630      	mov	r0, r6
 800e4c0:	4798      	blx	r3
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	f43f af66 	beq.w	800e394 <__ssvfiscanf_r+0x7c>
 800e4c8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	f040 808b 	bne.w	800e5e6 <__ssvfiscanf_r+0x2ce>
 800e4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d4:	e08b      	b.n	800e5ee <__ssvfiscanf_r+0x2d6>
 800e4d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e4d8:	f042 0220 	orr.w	r2, r2, #32
 800e4dc:	9241      	str	r2, [sp, #260]	@ 0x104
 800e4de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e4e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4e4:	9241      	str	r2, [sp, #260]	@ 0x104
 800e4e6:	2210      	movs	r2, #16
 800e4e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e4ea:	9242      	str	r2, [sp, #264]	@ 0x108
 800e4ec:	d902      	bls.n	800e4f4 <__ssvfiscanf_r+0x1dc>
 800e4ee:	e005      	b.n	800e4fc <__ssvfiscanf_r+0x1e4>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9342      	str	r3, [sp, #264]	@ 0x108
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	e002      	b.n	800e4fe <__ssvfiscanf_r+0x1e6>
 800e4f8:	2308      	movs	r3, #8
 800e4fa:	9342      	str	r3, [sp, #264]	@ 0x108
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e500:	6863      	ldr	r3, [r4, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dd39      	ble.n	800e57a <__ssvfiscanf_r+0x262>
 800e506:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e508:	0659      	lsls	r1, r3, #25
 800e50a:	d404      	bmi.n	800e516 <__ssvfiscanf_r+0x1fe>
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	781a      	ldrb	r2, [r3, #0]
 800e510:	5cba      	ldrb	r2, [r7, r2]
 800e512:	0712      	lsls	r2, r2, #28
 800e514:	d438      	bmi.n	800e588 <__ssvfiscanf_r+0x270>
 800e516:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e518:	2b02      	cmp	r3, #2
 800e51a:	dc47      	bgt.n	800e5ac <__ssvfiscanf_r+0x294>
 800e51c:	466b      	mov	r3, sp
 800e51e:	4622      	mov	r2, r4
 800e520:	a941      	add	r1, sp, #260	@ 0x104
 800e522:	4630      	mov	r0, r6
 800e524:	f000 f9fa 	bl	800e91c <_scanf_chars>
 800e528:	2801      	cmp	r0, #1
 800e52a:	d064      	beq.n	800e5f6 <__ssvfiscanf_r+0x2de>
 800e52c:	2802      	cmp	r0, #2
 800e52e:	f47f af18 	bne.w	800e362 <__ssvfiscanf_r+0x4a>
 800e532:	e7c9      	b.n	800e4c8 <__ssvfiscanf_r+0x1b0>
 800e534:	220a      	movs	r2, #10
 800e536:	e7d7      	b.n	800e4e8 <__ssvfiscanf_r+0x1d0>
 800e538:	4629      	mov	r1, r5
 800e53a:	4640      	mov	r0, r8
 800e53c:	f000 fbfa 	bl	800ed34 <__sccl>
 800e540:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e546:	9341      	str	r3, [sp, #260]	@ 0x104
 800e548:	4605      	mov	r5, r0
 800e54a:	2301      	movs	r3, #1
 800e54c:	e7d7      	b.n	800e4fe <__ssvfiscanf_r+0x1e6>
 800e54e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e554:	9341      	str	r3, [sp, #260]	@ 0x104
 800e556:	2300      	movs	r3, #0
 800e558:	e7d1      	b.n	800e4fe <__ssvfiscanf_r+0x1e6>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e7cf      	b.n	800e4fe <__ssvfiscanf_r+0x1e6>
 800e55e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e560:	06c3      	lsls	r3, r0, #27
 800e562:	f53f aefe 	bmi.w	800e362 <__ssvfiscanf_r+0x4a>
 800e566:	9b00      	ldr	r3, [sp, #0]
 800e568:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e56a:	1d19      	adds	r1, r3, #4
 800e56c:	9100      	str	r1, [sp, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	07c0      	lsls	r0, r0, #31
 800e572:	bf4c      	ite	mi
 800e574:	801a      	strhmi	r2, [r3, #0]
 800e576:	601a      	strpl	r2, [r3, #0]
 800e578:	e6f3      	b.n	800e362 <__ssvfiscanf_r+0x4a>
 800e57a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e57c:	4621      	mov	r1, r4
 800e57e:	4630      	mov	r0, r6
 800e580:	4798      	blx	r3
 800e582:	2800      	cmp	r0, #0
 800e584:	d0bf      	beq.n	800e506 <__ssvfiscanf_r+0x1ee>
 800e586:	e79f      	b.n	800e4c8 <__ssvfiscanf_r+0x1b0>
 800e588:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e58a:	3201      	adds	r2, #1
 800e58c:	9245      	str	r2, [sp, #276]	@ 0x114
 800e58e:	6862      	ldr	r2, [r4, #4]
 800e590:	3a01      	subs	r2, #1
 800e592:	2a00      	cmp	r2, #0
 800e594:	6062      	str	r2, [r4, #4]
 800e596:	dd02      	ble.n	800e59e <__ssvfiscanf_r+0x286>
 800e598:	3301      	adds	r3, #1
 800e59a:	6023      	str	r3, [r4, #0]
 800e59c:	e7b6      	b.n	800e50c <__ssvfiscanf_r+0x1f4>
 800e59e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	4798      	blx	r3
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d0b0      	beq.n	800e50c <__ssvfiscanf_r+0x1f4>
 800e5aa:	e78d      	b.n	800e4c8 <__ssvfiscanf_r+0x1b0>
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	dc0f      	bgt.n	800e5d0 <__ssvfiscanf_r+0x2b8>
 800e5b0:	466b      	mov	r3, sp
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	a941      	add	r1, sp, #260	@ 0x104
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f000 fa0a 	bl	800e9d0 <_scanf_i>
 800e5bc:	e7b4      	b.n	800e528 <__ssvfiscanf_r+0x210>
 800e5be:	bf00      	nop
 800e5c0:	0800e269 	.word	0x0800e269
 800e5c4:	0800e2df 	.word	0x0800e2df
 800e5c8:	08010429 	.word	0x08010429
 800e5cc:	080105dc 	.word	0x080105dc
 800e5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <__ssvfiscanf_r+0x2e4>)
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f43f aec5 	beq.w	800e362 <__ssvfiscanf_r+0x4a>
 800e5d8:	466b      	mov	r3, sp
 800e5da:	4622      	mov	r2, r4
 800e5dc:	a941      	add	r1, sp, #260	@ 0x104
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f3af 8000 	nop.w
 800e5e4:	e7a0      	b.n	800e528 <__ssvfiscanf_r+0x210>
 800e5e6:	89a3      	ldrh	r3, [r4, #12]
 800e5e8:	065b      	lsls	r3, r3, #25
 800e5ea:	f53f af71 	bmi.w	800e4d0 <__ssvfiscanf_r+0x1b8>
 800e5ee:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e5f8:	e7f9      	b.n	800e5ee <__ssvfiscanf_r+0x2d6>
 800e5fa:	bf00      	nop
 800e5fc:	00000000 	.word	0x00000000

0800e600 <_printf_common>:
 800e600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e604:	4616      	mov	r6, r2
 800e606:	4698      	mov	r8, r3
 800e608:	688a      	ldr	r2, [r1, #8]
 800e60a:	690b      	ldr	r3, [r1, #16]
 800e60c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e610:	4293      	cmp	r3, r2
 800e612:	bfb8      	it	lt
 800e614:	4613      	movlt	r3, r2
 800e616:	6033      	str	r3, [r6, #0]
 800e618:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e61c:	4607      	mov	r7, r0
 800e61e:	460c      	mov	r4, r1
 800e620:	b10a      	cbz	r2, 800e626 <_printf_common+0x26>
 800e622:	3301      	adds	r3, #1
 800e624:	6033      	str	r3, [r6, #0]
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	0699      	lsls	r1, r3, #26
 800e62a:	bf42      	ittt	mi
 800e62c:	6833      	ldrmi	r3, [r6, #0]
 800e62e:	3302      	addmi	r3, #2
 800e630:	6033      	strmi	r3, [r6, #0]
 800e632:	6825      	ldr	r5, [r4, #0]
 800e634:	f015 0506 	ands.w	r5, r5, #6
 800e638:	d106      	bne.n	800e648 <_printf_common+0x48>
 800e63a:	f104 0a19 	add.w	sl, r4, #25
 800e63e:	68e3      	ldr	r3, [r4, #12]
 800e640:	6832      	ldr	r2, [r6, #0]
 800e642:	1a9b      	subs	r3, r3, r2
 800e644:	42ab      	cmp	r3, r5
 800e646:	dc26      	bgt.n	800e696 <_printf_common+0x96>
 800e648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e64c:	6822      	ldr	r2, [r4, #0]
 800e64e:	3b00      	subs	r3, #0
 800e650:	bf18      	it	ne
 800e652:	2301      	movne	r3, #1
 800e654:	0692      	lsls	r2, r2, #26
 800e656:	d42b      	bmi.n	800e6b0 <_printf_common+0xb0>
 800e658:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e65c:	4641      	mov	r1, r8
 800e65e:	4638      	mov	r0, r7
 800e660:	47c8      	blx	r9
 800e662:	3001      	adds	r0, #1
 800e664:	d01e      	beq.n	800e6a4 <_printf_common+0xa4>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	6922      	ldr	r2, [r4, #16]
 800e66a:	f003 0306 	and.w	r3, r3, #6
 800e66e:	2b04      	cmp	r3, #4
 800e670:	bf02      	ittt	eq
 800e672:	68e5      	ldreq	r5, [r4, #12]
 800e674:	6833      	ldreq	r3, [r6, #0]
 800e676:	1aed      	subeq	r5, r5, r3
 800e678:	68a3      	ldr	r3, [r4, #8]
 800e67a:	bf0c      	ite	eq
 800e67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e680:	2500      	movne	r5, #0
 800e682:	4293      	cmp	r3, r2
 800e684:	bfc4      	itt	gt
 800e686:	1a9b      	subgt	r3, r3, r2
 800e688:	18ed      	addgt	r5, r5, r3
 800e68a:	2600      	movs	r6, #0
 800e68c:	341a      	adds	r4, #26
 800e68e:	42b5      	cmp	r5, r6
 800e690:	d11a      	bne.n	800e6c8 <_printf_common+0xc8>
 800e692:	2000      	movs	r0, #0
 800e694:	e008      	b.n	800e6a8 <_printf_common+0xa8>
 800e696:	2301      	movs	r3, #1
 800e698:	4652      	mov	r2, sl
 800e69a:	4641      	mov	r1, r8
 800e69c:	4638      	mov	r0, r7
 800e69e:	47c8      	blx	r9
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	d103      	bne.n	800e6ac <_printf_common+0xac>
 800e6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ac:	3501      	adds	r5, #1
 800e6ae:	e7c6      	b.n	800e63e <_printf_common+0x3e>
 800e6b0:	18e1      	adds	r1, r4, r3
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	2030      	movs	r0, #48	@ 0x30
 800e6b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6ba:	4422      	add	r2, r4
 800e6bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6c4:	3302      	adds	r3, #2
 800e6c6:	e7c7      	b.n	800e658 <_printf_common+0x58>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4641      	mov	r1, r8
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	47c8      	blx	r9
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d0e6      	beq.n	800e6a4 <_printf_common+0xa4>
 800e6d6:	3601      	adds	r6, #1
 800e6d8:	e7d9      	b.n	800e68e <_printf_common+0x8e>
	...

0800e6dc <_printf_i>:
 800e6dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e0:	7e0f      	ldrb	r7, [r1, #24]
 800e6e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6e4:	2f78      	cmp	r7, #120	@ 0x78
 800e6e6:	4691      	mov	r9, r2
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	469a      	mov	sl, r3
 800e6ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6f2:	d807      	bhi.n	800e704 <_printf_i+0x28>
 800e6f4:	2f62      	cmp	r7, #98	@ 0x62
 800e6f6:	d80a      	bhi.n	800e70e <_printf_i+0x32>
 800e6f8:	2f00      	cmp	r7, #0
 800e6fa:	f000 80d2 	beq.w	800e8a2 <_printf_i+0x1c6>
 800e6fe:	2f58      	cmp	r7, #88	@ 0x58
 800e700:	f000 80b9 	beq.w	800e876 <_printf_i+0x19a>
 800e704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e708:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e70c:	e03a      	b.n	800e784 <_printf_i+0xa8>
 800e70e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e712:	2b15      	cmp	r3, #21
 800e714:	d8f6      	bhi.n	800e704 <_printf_i+0x28>
 800e716:	a101      	add	r1, pc, #4	@ (adr r1, 800e71c <_printf_i+0x40>)
 800e718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e71c:	0800e775 	.word	0x0800e775
 800e720:	0800e789 	.word	0x0800e789
 800e724:	0800e705 	.word	0x0800e705
 800e728:	0800e705 	.word	0x0800e705
 800e72c:	0800e705 	.word	0x0800e705
 800e730:	0800e705 	.word	0x0800e705
 800e734:	0800e789 	.word	0x0800e789
 800e738:	0800e705 	.word	0x0800e705
 800e73c:	0800e705 	.word	0x0800e705
 800e740:	0800e705 	.word	0x0800e705
 800e744:	0800e705 	.word	0x0800e705
 800e748:	0800e889 	.word	0x0800e889
 800e74c:	0800e7b3 	.word	0x0800e7b3
 800e750:	0800e843 	.word	0x0800e843
 800e754:	0800e705 	.word	0x0800e705
 800e758:	0800e705 	.word	0x0800e705
 800e75c:	0800e8ab 	.word	0x0800e8ab
 800e760:	0800e705 	.word	0x0800e705
 800e764:	0800e7b3 	.word	0x0800e7b3
 800e768:	0800e705 	.word	0x0800e705
 800e76c:	0800e705 	.word	0x0800e705
 800e770:	0800e84b 	.word	0x0800e84b
 800e774:	6833      	ldr	r3, [r6, #0]
 800e776:	1d1a      	adds	r2, r3, #4
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6032      	str	r2, [r6, #0]
 800e77c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e780:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e784:	2301      	movs	r3, #1
 800e786:	e09d      	b.n	800e8c4 <_printf_i+0x1e8>
 800e788:	6833      	ldr	r3, [r6, #0]
 800e78a:	6820      	ldr	r0, [r4, #0]
 800e78c:	1d19      	adds	r1, r3, #4
 800e78e:	6031      	str	r1, [r6, #0]
 800e790:	0606      	lsls	r6, r0, #24
 800e792:	d501      	bpl.n	800e798 <_printf_i+0xbc>
 800e794:	681d      	ldr	r5, [r3, #0]
 800e796:	e003      	b.n	800e7a0 <_printf_i+0xc4>
 800e798:	0645      	lsls	r5, r0, #25
 800e79a:	d5fb      	bpl.n	800e794 <_printf_i+0xb8>
 800e79c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7a0:	2d00      	cmp	r5, #0
 800e7a2:	da03      	bge.n	800e7ac <_printf_i+0xd0>
 800e7a4:	232d      	movs	r3, #45	@ 0x2d
 800e7a6:	426d      	negs	r5, r5
 800e7a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7ac:	4859      	ldr	r0, [pc, #356]	@ (800e914 <_printf_i+0x238>)
 800e7ae:	230a      	movs	r3, #10
 800e7b0:	e011      	b.n	800e7d6 <_printf_i+0xfa>
 800e7b2:	6821      	ldr	r1, [r4, #0]
 800e7b4:	6833      	ldr	r3, [r6, #0]
 800e7b6:	0608      	lsls	r0, r1, #24
 800e7b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7bc:	d402      	bmi.n	800e7c4 <_printf_i+0xe8>
 800e7be:	0649      	lsls	r1, r1, #25
 800e7c0:	bf48      	it	mi
 800e7c2:	b2ad      	uxthmi	r5, r5
 800e7c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7c6:	4853      	ldr	r0, [pc, #332]	@ (800e914 <_printf_i+0x238>)
 800e7c8:	6033      	str	r3, [r6, #0]
 800e7ca:	bf14      	ite	ne
 800e7cc:	230a      	movne	r3, #10
 800e7ce:	2308      	moveq	r3, #8
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7d6:	6866      	ldr	r6, [r4, #4]
 800e7d8:	60a6      	str	r6, [r4, #8]
 800e7da:	2e00      	cmp	r6, #0
 800e7dc:	bfa2      	ittt	ge
 800e7de:	6821      	ldrge	r1, [r4, #0]
 800e7e0:	f021 0104 	bicge.w	r1, r1, #4
 800e7e4:	6021      	strge	r1, [r4, #0]
 800e7e6:	b90d      	cbnz	r5, 800e7ec <_printf_i+0x110>
 800e7e8:	2e00      	cmp	r6, #0
 800e7ea:	d04b      	beq.n	800e884 <_printf_i+0x1a8>
 800e7ec:	4616      	mov	r6, r2
 800e7ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7f2:	fb03 5711 	mls	r7, r3, r1, r5
 800e7f6:	5dc7      	ldrb	r7, [r0, r7]
 800e7f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7fc:	462f      	mov	r7, r5
 800e7fe:	42bb      	cmp	r3, r7
 800e800:	460d      	mov	r5, r1
 800e802:	d9f4      	bls.n	800e7ee <_printf_i+0x112>
 800e804:	2b08      	cmp	r3, #8
 800e806:	d10b      	bne.n	800e820 <_printf_i+0x144>
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	07df      	lsls	r7, r3, #31
 800e80c:	d508      	bpl.n	800e820 <_printf_i+0x144>
 800e80e:	6923      	ldr	r3, [r4, #16]
 800e810:	6861      	ldr	r1, [r4, #4]
 800e812:	4299      	cmp	r1, r3
 800e814:	bfde      	ittt	le
 800e816:	2330      	movle	r3, #48	@ 0x30
 800e818:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e81c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e820:	1b92      	subs	r2, r2, r6
 800e822:	6122      	str	r2, [r4, #16]
 800e824:	f8cd a000 	str.w	sl, [sp]
 800e828:	464b      	mov	r3, r9
 800e82a:	aa03      	add	r2, sp, #12
 800e82c:	4621      	mov	r1, r4
 800e82e:	4640      	mov	r0, r8
 800e830:	f7ff fee6 	bl	800e600 <_printf_common>
 800e834:	3001      	adds	r0, #1
 800e836:	d14a      	bne.n	800e8ce <_printf_i+0x1f2>
 800e838:	f04f 30ff 	mov.w	r0, #4294967295
 800e83c:	b004      	add	sp, #16
 800e83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	f043 0320 	orr.w	r3, r3, #32
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	4833      	ldr	r0, [pc, #204]	@ (800e918 <_printf_i+0x23c>)
 800e84c:	2778      	movs	r7, #120	@ 0x78
 800e84e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	6831      	ldr	r1, [r6, #0]
 800e856:	061f      	lsls	r7, r3, #24
 800e858:	f851 5b04 	ldr.w	r5, [r1], #4
 800e85c:	d402      	bmi.n	800e864 <_printf_i+0x188>
 800e85e:	065f      	lsls	r7, r3, #25
 800e860:	bf48      	it	mi
 800e862:	b2ad      	uxthmi	r5, r5
 800e864:	6031      	str	r1, [r6, #0]
 800e866:	07d9      	lsls	r1, r3, #31
 800e868:	bf44      	itt	mi
 800e86a:	f043 0320 	orrmi.w	r3, r3, #32
 800e86e:	6023      	strmi	r3, [r4, #0]
 800e870:	b11d      	cbz	r5, 800e87a <_printf_i+0x19e>
 800e872:	2310      	movs	r3, #16
 800e874:	e7ac      	b.n	800e7d0 <_printf_i+0xf4>
 800e876:	4827      	ldr	r0, [pc, #156]	@ (800e914 <_printf_i+0x238>)
 800e878:	e7e9      	b.n	800e84e <_printf_i+0x172>
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	f023 0320 	bic.w	r3, r3, #32
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	e7f6      	b.n	800e872 <_printf_i+0x196>
 800e884:	4616      	mov	r6, r2
 800e886:	e7bd      	b.n	800e804 <_printf_i+0x128>
 800e888:	6833      	ldr	r3, [r6, #0]
 800e88a:	6825      	ldr	r5, [r4, #0]
 800e88c:	6961      	ldr	r1, [r4, #20]
 800e88e:	1d18      	adds	r0, r3, #4
 800e890:	6030      	str	r0, [r6, #0]
 800e892:	062e      	lsls	r6, r5, #24
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	d501      	bpl.n	800e89c <_printf_i+0x1c0>
 800e898:	6019      	str	r1, [r3, #0]
 800e89a:	e002      	b.n	800e8a2 <_printf_i+0x1c6>
 800e89c:	0668      	lsls	r0, r5, #25
 800e89e:	d5fb      	bpl.n	800e898 <_printf_i+0x1bc>
 800e8a0:	8019      	strh	r1, [r3, #0]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	6123      	str	r3, [r4, #16]
 800e8a6:	4616      	mov	r6, r2
 800e8a8:	e7bc      	b.n	800e824 <_printf_i+0x148>
 800e8aa:	6833      	ldr	r3, [r6, #0]
 800e8ac:	1d1a      	adds	r2, r3, #4
 800e8ae:	6032      	str	r2, [r6, #0]
 800e8b0:	681e      	ldr	r6, [r3, #0]
 800e8b2:	6862      	ldr	r2, [r4, #4]
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f7f1 fc92 	bl	80001e0 <memchr>
 800e8bc:	b108      	cbz	r0, 800e8c2 <_printf_i+0x1e6>
 800e8be:	1b80      	subs	r0, r0, r6
 800e8c0:	6060      	str	r0, [r4, #4]
 800e8c2:	6863      	ldr	r3, [r4, #4]
 800e8c4:	6123      	str	r3, [r4, #16]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8cc:	e7aa      	b.n	800e824 <_printf_i+0x148>
 800e8ce:	6923      	ldr	r3, [r4, #16]
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	4640      	mov	r0, r8
 800e8d6:	47d0      	blx	sl
 800e8d8:	3001      	adds	r0, #1
 800e8da:	d0ad      	beq.n	800e838 <_printf_i+0x15c>
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	079b      	lsls	r3, r3, #30
 800e8e0:	d413      	bmi.n	800e90a <_printf_i+0x22e>
 800e8e2:	68e0      	ldr	r0, [r4, #12]
 800e8e4:	9b03      	ldr	r3, [sp, #12]
 800e8e6:	4298      	cmp	r0, r3
 800e8e8:	bfb8      	it	lt
 800e8ea:	4618      	movlt	r0, r3
 800e8ec:	e7a6      	b.n	800e83c <_printf_i+0x160>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	4632      	mov	r2, r6
 800e8f2:	4649      	mov	r1, r9
 800e8f4:	4640      	mov	r0, r8
 800e8f6:	47d0      	blx	sl
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	d09d      	beq.n	800e838 <_printf_i+0x15c>
 800e8fc:	3501      	adds	r5, #1
 800e8fe:	68e3      	ldr	r3, [r4, #12]
 800e900:	9903      	ldr	r1, [sp, #12]
 800e902:	1a5b      	subs	r3, r3, r1
 800e904:	42ab      	cmp	r3, r5
 800e906:	dcf2      	bgt.n	800e8ee <_printf_i+0x212>
 800e908:	e7eb      	b.n	800e8e2 <_printf_i+0x206>
 800e90a:	2500      	movs	r5, #0
 800e90c:	f104 0619 	add.w	r6, r4, #25
 800e910:	e7f5      	b.n	800e8fe <_printf_i+0x222>
 800e912:	bf00      	nop
 800e914:	080105e7 	.word	0x080105e7
 800e918:	080105f8 	.word	0x080105f8

0800e91c <_scanf_chars>:
 800e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e920:	4615      	mov	r5, r2
 800e922:	688a      	ldr	r2, [r1, #8]
 800e924:	4680      	mov	r8, r0
 800e926:	460c      	mov	r4, r1
 800e928:	b932      	cbnz	r2, 800e938 <_scanf_chars+0x1c>
 800e92a:	698a      	ldr	r2, [r1, #24]
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	bf14      	ite	ne
 800e930:	f04f 32ff 	movne.w	r2, #4294967295
 800e934:	2201      	moveq	r2, #1
 800e936:	608a      	str	r2, [r1, #8]
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e9cc <_scanf_chars+0xb0>
 800e93e:	06d1      	lsls	r1, r2, #27
 800e940:	bf5f      	itttt	pl
 800e942:	681a      	ldrpl	r2, [r3, #0]
 800e944:	1d11      	addpl	r1, r2, #4
 800e946:	6019      	strpl	r1, [r3, #0]
 800e948:	6816      	ldrpl	r6, [r2, #0]
 800e94a:	2700      	movs	r7, #0
 800e94c:	69a0      	ldr	r0, [r4, #24]
 800e94e:	b188      	cbz	r0, 800e974 <_scanf_chars+0x58>
 800e950:	2801      	cmp	r0, #1
 800e952:	d107      	bne.n	800e964 <_scanf_chars+0x48>
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	781a      	ldrb	r2, [r3, #0]
 800e958:	6963      	ldr	r3, [r4, #20]
 800e95a:	5c9b      	ldrb	r3, [r3, r2]
 800e95c:	b953      	cbnz	r3, 800e974 <_scanf_chars+0x58>
 800e95e:	2f00      	cmp	r7, #0
 800e960:	d031      	beq.n	800e9c6 <_scanf_chars+0xaa>
 800e962:	e022      	b.n	800e9aa <_scanf_chars+0x8e>
 800e964:	2802      	cmp	r0, #2
 800e966:	d120      	bne.n	800e9aa <_scanf_chars+0x8e>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e970:	071b      	lsls	r3, r3, #28
 800e972:	d41a      	bmi.n	800e9aa <_scanf_chars+0x8e>
 800e974:	6823      	ldr	r3, [r4, #0]
 800e976:	06da      	lsls	r2, r3, #27
 800e978:	bf5e      	ittt	pl
 800e97a:	682b      	ldrpl	r3, [r5, #0]
 800e97c:	781b      	ldrbpl	r3, [r3, #0]
 800e97e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e982:	682a      	ldr	r2, [r5, #0]
 800e984:	686b      	ldr	r3, [r5, #4]
 800e986:	3201      	adds	r2, #1
 800e988:	602a      	str	r2, [r5, #0]
 800e98a:	68a2      	ldr	r2, [r4, #8]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	3a01      	subs	r2, #1
 800e990:	606b      	str	r3, [r5, #4]
 800e992:	3701      	adds	r7, #1
 800e994:	60a2      	str	r2, [r4, #8]
 800e996:	b142      	cbz	r2, 800e9aa <_scanf_chars+0x8e>
 800e998:	2b00      	cmp	r3, #0
 800e99a:	dcd7      	bgt.n	800e94c <_scanf_chars+0x30>
 800e99c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	4798      	blx	r3
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d0d0      	beq.n	800e94c <_scanf_chars+0x30>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	f013 0310 	ands.w	r3, r3, #16
 800e9b0:	d105      	bne.n	800e9be <_scanf_chars+0xa2>
 800e9b2:	68e2      	ldr	r2, [r4, #12]
 800e9b4:	3201      	adds	r2, #1
 800e9b6:	60e2      	str	r2, [r4, #12]
 800e9b8:	69a2      	ldr	r2, [r4, #24]
 800e9ba:	b102      	cbz	r2, 800e9be <_scanf_chars+0xa2>
 800e9bc:	7033      	strb	r3, [r6, #0]
 800e9be:	6923      	ldr	r3, [r4, #16]
 800e9c0:	443b      	add	r3, r7
 800e9c2:	6123      	str	r3, [r4, #16]
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ca:	bf00      	nop
 800e9cc:	08010429 	.word	0x08010429

0800e9d0 <_scanf_i>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	4698      	mov	r8, r3
 800e9d6:	4b74      	ldr	r3, [pc, #464]	@ (800eba8 <_scanf_i+0x1d8>)
 800e9d8:	460c      	mov	r4, r1
 800e9da:	4682      	mov	sl, r0
 800e9dc:	4616      	mov	r6, r2
 800e9de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9e2:	b087      	sub	sp, #28
 800e9e4:	ab03      	add	r3, sp, #12
 800e9e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e9ea:	4b70      	ldr	r3, [pc, #448]	@ (800ebac <_scanf_i+0x1dc>)
 800e9ec:	69a1      	ldr	r1, [r4, #24]
 800e9ee:	4a70      	ldr	r2, [pc, #448]	@ (800ebb0 <_scanf_i+0x1e0>)
 800e9f0:	2903      	cmp	r1, #3
 800e9f2:	bf08      	it	eq
 800e9f4:	461a      	moveq	r2, r3
 800e9f6:	68a3      	ldr	r3, [r4, #8]
 800e9f8:	9201      	str	r2, [sp, #4]
 800e9fa:	1e5a      	subs	r2, r3, #1
 800e9fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ea00:	bf88      	it	hi
 800ea02:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ea06:	4627      	mov	r7, r4
 800ea08:	bf82      	ittt	hi
 800ea0a:	eb03 0905 	addhi.w	r9, r3, r5
 800ea0e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ea12:	60a3      	strhi	r3, [r4, #8]
 800ea14:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea18:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ea1c:	bf98      	it	ls
 800ea1e:	f04f 0900 	movls.w	r9, #0
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	463d      	mov	r5, r7
 800ea26:	f04f 0b00 	mov.w	fp, #0
 800ea2a:	6831      	ldr	r1, [r6, #0]
 800ea2c:	ab03      	add	r3, sp, #12
 800ea2e:	7809      	ldrb	r1, [r1, #0]
 800ea30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ea34:	2202      	movs	r2, #2
 800ea36:	f7f1 fbd3 	bl	80001e0 <memchr>
 800ea3a:	b328      	cbz	r0, 800ea88 <_scanf_i+0xb8>
 800ea3c:	f1bb 0f01 	cmp.w	fp, #1
 800ea40:	d159      	bne.n	800eaf6 <_scanf_i+0x126>
 800ea42:	6862      	ldr	r2, [r4, #4]
 800ea44:	b92a      	cbnz	r2, 800ea52 <_scanf_i+0x82>
 800ea46:	6822      	ldr	r2, [r4, #0]
 800ea48:	2108      	movs	r1, #8
 800ea4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea4e:	6061      	str	r1, [r4, #4]
 800ea50:	6022      	str	r2, [r4, #0]
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ea58:	6022      	str	r2, [r4, #0]
 800ea5a:	68a2      	ldr	r2, [r4, #8]
 800ea5c:	1e51      	subs	r1, r2, #1
 800ea5e:	60a1      	str	r1, [r4, #8]
 800ea60:	b192      	cbz	r2, 800ea88 <_scanf_i+0xb8>
 800ea62:	6832      	ldr	r2, [r6, #0]
 800ea64:	1c51      	adds	r1, r2, #1
 800ea66:	6031      	str	r1, [r6, #0]
 800ea68:	7812      	ldrb	r2, [r2, #0]
 800ea6a:	f805 2b01 	strb.w	r2, [r5], #1
 800ea6e:	6872      	ldr	r2, [r6, #4]
 800ea70:	3a01      	subs	r2, #1
 800ea72:	2a00      	cmp	r2, #0
 800ea74:	6072      	str	r2, [r6, #4]
 800ea76:	dc07      	bgt.n	800ea88 <_scanf_i+0xb8>
 800ea78:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ea7c:	4631      	mov	r1, r6
 800ea7e:	4650      	mov	r0, sl
 800ea80:	4790      	blx	r2
 800ea82:	2800      	cmp	r0, #0
 800ea84:	f040 8085 	bne.w	800eb92 <_scanf_i+0x1c2>
 800ea88:	f10b 0b01 	add.w	fp, fp, #1
 800ea8c:	f1bb 0f03 	cmp.w	fp, #3
 800ea90:	d1cb      	bne.n	800ea2a <_scanf_i+0x5a>
 800ea92:	6863      	ldr	r3, [r4, #4]
 800ea94:	b90b      	cbnz	r3, 800ea9a <_scanf_i+0xca>
 800ea96:	230a      	movs	r3, #10
 800ea98:	6063      	str	r3, [r4, #4]
 800ea9a:	6863      	ldr	r3, [r4, #4]
 800ea9c:	4945      	ldr	r1, [pc, #276]	@ (800ebb4 <_scanf_i+0x1e4>)
 800ea9e:	6960      	ldr	r0, [r4, #20]
 800eaa0:	1ac9      	subs	r1, r1, r3
 800eaa2:	f000 f947 	bl	800ed34 <__sccl>
 800eaa6:	f04f 0b00 	mov.w	fp, #0
 800eaaa:	68a3      	ldr	r3, [r4, #8]
 800eaac:	6822      	ldr	r2, [r4, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d03d      	beq.n	800eb2e <_scanf_i+0x15e>
 800eab2:	6831      	ldr	r1, [r6, #0]
 800eab4:	6960      	ldr	r0, [r4, #20]
 800eab6:	f891 c000 	ldrb.w	ip, [r1]
 800eaba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d035      	beq.n	800eb2e <_scanf_i+0x15e>
 800eac2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800eac6:	d124      	bne.n	800eb12 <_scanf_i+0x142>
 800eac8:	0510      	lsls	r0, r2, #20
 800eaca:	d522      	bpl.n	800eb12 <_scanf_i+0x142>
 800eacc:	f10b 0b01 	add.w	fp, fp, #1
 800ead0:	f1b9 0f00 	cmp.w	r9, #0
 800ead4:	d003      	beq.n	800eade <_scanf_i+0x10e>
 800ead6:	3301      	adds	r3, #1
 800ead8:	f109 39ff 	add.w	r9, r9, #4294967295
 800eadc:	60a3      	str	r3, [r4, #8]
 800eade:	6873      	ldr	r3, [r6, #4]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	6073      	str	r3, [r6, #4]
 800eae6:	dd1b      	ble.n	800eb20 <_scanf_i+0x150>
 800eae8:	6833      	ldr	r3, [r6, #0]
 800eaea:	3301      	adds	r3, #1
 800eaec:	6033      	str	r3, [r6, #0]
 800eaee:	68a3      	ldr	r3, [r4, #8]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	60a3      	str	r3, [r4, #8]
 800eaf4:	e7d9      	b.n	800eaaa <_scanf_i+0xda>
 800eaf6:	f1bb 0f02 	cmp.w	fp, #2
 800eafa:	d1ae      	bne.n	800ea5a <_scanf_i+0x8a>
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800eb02:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800eb06:	d1bf      	bne.n	800ea88 <_scanf_i+0xb8>
 800eb08:	2110      	movs	r1, #16
 800eb0a:	6061      	str	r1, [r4, #4]
 800eb0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eb10:	e7a2      	b.n	800ea58 <_scanf_i+0x88>
 800eb12:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eb16:	6022      	str	r2, [r4, #0]
 800eb18:	780b      	ldrb	r3, [r1, #0]
 800eb1a:	f805 3b01 	strb.w	r3, [r5], #1
 800eb1e:	e7de      	b.n	800eade <_scanf_i+0x10e>
 800eb20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb24:	4631      	mov	r1, r6
 800eb26:	4650      	mov	r0, sl
 800eb28:	4798      	blx	r3
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d0df      	beq.n	800eaee <_scanf_i+0x11e>
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	05d9      	lsls	r1, r3, #23
 800eb32:	d50d      	bpl.n	800eb50 <_scanf_i+0x180>
 800eb34:	42bd      	cmp	r5, r7
 800eb36:	d909      	bls.n	800eb4c <_scanf_i+0x17c>
 800eb38:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb40:	4632      	mov	r2, r6
 800eb42:	4650      	mov	r0, sl
 800eb44:	4798      	blx	r3
 800eb46:	f105 39ff 	add.w	r9, r5, #4294967295
 800eb4a:	464d      	mov	r5, r9
 800eb4c:	42bd      	cmp	r5, r7
 800eb4e:	d028      	beq.n	800eba2 <_scanf_i+0x1d2>
 800eb50:	6822      	ldr	r2, [r4, #0]
 800eb52:	f012 0210 	ands.w	r2, r2, #16
 800eb56:	d113      	bne.n	800eb80 <_scanf_i+0x1b0>
 800eb58:	702a      	strb	r2, [r5, #0]
 800eb5a:	6863      	ldr	r3, [r4, #4]
 800eb5c:	9e01      	ldr	r6, [sp, #4]
 800eb5e:	4639      	mov	r1, r7
 800eb60:	4650      	mov	r0, sl
 800eb62:	47b0      	blx	r6
 800eb64:	f8d8 3000 	ldr.w	r3, [r8]
 800eb68:	6821      	ldr	r1, [r4, #0]
 800eb6a:	1d1a      	adds	r2, r3, #4
 800eb6c:	f8c8 2000 	str.w	r2, [r8]
 800eb70:	f011 0f20 	tst.w	r1, #32
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	d00f      	beq.n	800eb98 <_scanf_i+0x1c8>
 800eb78:	6018      	str	r0, [r3, #0]
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	60e3      	str	r3, [r4, #12]
 800eb80:	6923      	ldr	r3, [r4, #16]
 800eb82:	1bed      	subs	r5, r5, r7
 800eb84:	445d      	add	r5, fp
 800eb86:	442b      	add	r3, r5
 800eb88:	6123      	str	r3, [r4, #16]
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	b007      	add	sp, #28
 800eb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb92:	f04f 0b00 	mov.w	fp, #0
 800eb96:	e7ca      	b.n	800eb2e <_scanf_i+0x15e>
 800eb98:	07ca      	lsls	r2, r1, #31
 800eb9a:	bf4c      	ite	mi
 800eb9c:	8018      	strhmi	r0, [r3, #0]
 800eb9e:	6018      	strpl	r0, [r3, #0]
 800eba0:	e7eb      	b.n	800eb7a <_scanf_i+0x1aa>
 800eba2:	2001      	movs	r0, #1
 800eba4:	e7f2      	b.n	800eb8c <_scanf_i+0x1bc>
 800eba6:	bf00      	nop
 800eba8:	08010368 	.word	0x08010368
 800ebac:	0800d9b9 	.word	0x0800d9b9
 800ebb0:	0800efb1 	.word	0x0800efb1
 800ebb4:	08010619 	.word	0x08010619

0800ebb8 <__sflush_r>:
 800ebb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc0:	0716      	lsls	r6, r2, #28
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	d454      	bmi.n	800ec72 <__sflush_r+0xba>
 800ebc8:	684b      	ldr	r3, [r1, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	dc02      	bgt.n	800ebd4 <__sflush_r+0x1c>
 800ebce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	dd48      	ble.n	800ec66 <__sflush_r+0xae>
 800ebd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebd6:	2e00      	cmp	r6, #0
 800ebd8:	d045      	beq.n	800ec66 <__sflush_r+0xae>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ebe0:	682f      	ldr	r7, [r5, #0]
 800ebe2:	6a21      	ldr	r1, [r4, #32]
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	d030      	beq.n	800ec4a <__sflush_r+0x92>
 800ebe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	0759      	lsls	r1, r3, #29
 800ebee:	d505      	bpl.n	800ebfc <__sflush_r+0x44>
 800ebf0:	6863      	ldr	r3, [r4, #4]
 800ebf2:	1ad2      	subs	r2, r2, r3
 800ebf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ebf6:	b10b      	cbz	r3, 800ebfc <__sflush_r+0x44>
 800ebf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ebfa:	1ad2      	subs	r2, r2, r3
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec00:	6a21      	ldr	r1, [r4, #32]
 800ec02:	4628      	mov	r0, r5
 800ec04:	47b0      	blx	r6
 800ec06:	1c43      	adds	r3, r0, #1
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	d106      	bne.n	800ec1a <__sflush_r+0x62>
 800ec0c:	6829      	ldr	r1, [r5, #0]
 800ec0e:	291d      	cmp	r1, #29
 800ec10:	d82b      	bhi.n	800ec6a <__sflush_r+0xb2>
 800ec12:	4a2a      	ldr	r2, [pc, #168]	@ (800ecbc <__sflush_r+0x104>)
 800ec14:	410a      	asrs	r2, r1
 800ec16:	07d6      	lsls	r6, r2, #31
 800ec18:	d427      	bmi.n	800ec6a <__sflush_r+0xb2>
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	6062      	str	r2, [r4, #4]
 800ec1e:	04d9      	lsls	r1, r3, #19
 800ec20:	6922      	ldr	r2, [r4, #16]
 800ec22:	6022      	str	r2, [r4, #0]
 800ec24:	d504      	bpl.n	800ec30 <__sflush_r+0x78>
 800ec26:	1c42      	adds	r2, r0, #1
 800ec28:	d101      	bne.n	800ec2e <__sflush_r+0x76>
 800ec2a:	682b      	ldr	r3, [r5, #0]
 800ec2c:	b903      	cbnz	r3, 800ec30 <__sflush_r+0x78>
 800ec2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec32:	602f      	str	r7, [r5, #0]
 800ec34:	b1b9      	cbz	r1, 800ec66 <__sflush_r+0xae>
 800ec36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec3a:	4299      	cmp	r1, r3
 800ec3c:	d002      	beq.n	800ec44 <__sflush_r+0x8c>
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f7ff f970 	bl	800df24 <_free_r>
 800ec44:	2300      	movs	r3, #0
 800ec46:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec48:	e00d      	b.n	800ec66 <__sflush_r+0xae>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b0      	blx	r6
 800ec50:	4602      	mov	r2, r0
 800ec52:	1c50      	adds	r0, r2, #1
 800ec54:	d1c9      	bne.n	800ebea <__sflush_r+0x32>
 800ec56:	682b      	ldr	r3, [r5, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d0c6      	beq.n	800ebea <__sflush_r+0x32>
 800ec5c:	2b1d      	cmp	r3, #29
 800ec5e:	d001      	beq.n	800ec64 <__sflush_r+0xac>
 800ec60:	2b16      	cmp	r3, #22
 800ec62:	d11e      	bne.n	800eca2 <__sflush_r+0xea>
 800ec64:	602f      	str	r7, [r5, #0]
 800ec66:	2000      	movs	r0, #0
 800ec68:	e022      	b.n	800ecb0 <__sflush_r+0xf8>
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec6e:	b21b      	sxth	r3, r3
 800ec70:	e01b      	b.n	800ecaa <__sflush_r+0xf2>
 800ec72:	690f      	ldr	r7, [r1, #16]
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	d0f6      	beq.n	800ec66 <__sflush_r+0xae>
 800ec78:	0793      	lsls	r3, r2, #30
 800ec7a:	680e      	ldr	r6, [r1, #0]
 800ec7c:	bf08      	it	eq
 800ec7e:	694b      	ldreq	r3, [r1, #20]
 800ec80:	600f      	str	r7, [r1, #0]
 800ec82:	bf18      	it	ne
 800ec84:	2300      	movne	r3, #0
 800ec86:	eba6 0807 	sub.w	r8, r6, r7
 800ec8a:	608b      	str	r3, [r1, #8]
 800ec8c:	f1b8 0f00 	cmp.w	r8, #0
 800ec90:	dde9      	ble.n	800ec66 <__sflush_r+0xae>
 800ec92:	6a21      	ldr	r1, [r4, #32]
 800ec94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec96:	4643      	mov	r3, r8
 800ec98:	463a      	mov	r2, r7
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b0      	blx	r6
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	dc08      	bgt.n	800ecb4 <__sflush_r+0xfc>
 800eca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb4:	4407      	add	r7, r0
 800ecb6:	eba8 0800 	sub.w	r8, r8, r0
 800ecba:	e7e7      	b.n	800ec8c <__sflush_r+0xd4>
 800ecbc:	dfbffffe 	.word	0xdfbffffe

0800ecc0 <_fflush_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	690b      	ldr	r3, [r1, #16]
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	b913      	cbnz	r3, 800ecd0 <_fflush_r+0x10>
 800ecca:	2500      	movs	r5, #0
 800eccc:	4628      	mov	r0, r5
 800ecce:	bd38      	pop	{r3, r4, r5, pc}
 800ecd0:	b118      	cbz	r0, 800ecda <_fflush_r+0x1a>
 800ecd2:	6a03      	ldr	r3, [r0, #32]
 800ecd4:	b90b      	cbnz	r3, 800ecda <_fflush_r+0x1a>
 800ecd6:	f7fe ff07 	bl	800dae8 <__sinit>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d0f3      	beq.n	800ecca <_fflush_r+0xa>
 800ece2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ece4:	07d0      	lsls	r0, r2, #31
 800ece6:	d404      	bmi.n	800ecf2 <_fflush_r+0x32>
 800ece8:	0599      	lsls	r1, r3, #22
 800ecea:	d402      	bmi.n	800ecf2 <_fflush_r+0x32>
 800ecec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecee:	f7ff f8f0 	bl	800ded2 <__retarget_lock_acquire_recursive>
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f7ff ff5f 	bl	800ebb8 <__sflush_r>
 800ecfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecfc:	07da      	lsls	r2, r3, #31
 800ecfe:	4605      	mov	r5, r0
 800ed00:	d4e4      	bmi.n	800eccc <_fflush_r+0xc>
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	059b      	lsls	r3, r3, #22
 800ed06:	d4e1      	bmi.n	800eccc <_fflush_r+0xc>
 800ed08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed0a:	f7ff f8e3 	bl	800ded4 <__retarget_lock_release_recursive>
 800ed0e:	e7dd      	b.n	800eccc <_fflush_r+0xc>

0800ed10 <fiprintf>:
 800ed10:	b40e      	push	{r1, r2, r3}
 800ed12:	b503      	push	{r0, r1, lr}
 800ed14:	4601      	mov	r1, r0
 800ed16:	ab03      	add	r3, sp, #12
 800ed18:	4805      	ldr	r0, [pc, #20]	@ (800ed30 <fiprintf+0x20>)
 800ed1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed1e:	6800      	ldr	r0, [r0, #0]
 800ed20:	9301      	str	r3, [sp, #4]
 800ed22:	f000 f971 	bl	800f008 <_vfiprintf_r>
 800ed26:	b002      	add	sp, #8
 800ed28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed2c:	b003      	add	sp, #12
 800ed2e:	4770      	bx	lr
 800ed30:	20000038 	.word	0x20000038

0800ed34 <__sccl>:
 800ed34:	b570      	push	{r4, r5, r6, lr}
 800ed36:	780b      	ldrb	r3, [r1, #0]
 800ed38:	4604      	mov	r4, r0
 800ed3a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ed3c:	bf0b      	itete	eq
 800ed3e:	784b      	ldrbeq	r3, [r1, #1]
 800ed40:	1c4a      	addne	r2, r1, #1
 800ed42:	1c8a      	addeq	r2, r1, #2
 800ed44:	2100      	movne	r1, #0
 800ed46:	bf08      	it	eq
 800ed48:	2101      	moveq	r1, #1
 800ed4a:	3801      	subs	r0, #1
 800ed4c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ed50:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ed54:	42a8      	cmp	r0, r5
 800ed56:	d1fb      	bne.n	800ed50 <__sccl+0x1c>
 800ed58:	b90b      	cbnz	r3, 800ed5e <__sccl+0x2a>
 800ed5a:	1e50      	subs	r0, r2, #1
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}
 800ed5e:	f081 0101 	eor.w	r1, r1, #1
 800ed62:	54e1      	strb	r1, [r4, r3]
 800ed64:	4610      	mov	r0, r2
 800ed66:	4602      	mov	r2, r0
 800ed68:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ed6c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ed6e:	d005      	beq.n	800ed7c <__sccl+0x48>
 800ed70:	2d5d      	cmp	r5, #93	@ 0x5d
 800ed72:	d016      	beq.n	800eda2 <__sccl+0x6e>
 800ed74:	2d00      	cmp	r5, #0
 800ed76:	d0f1      	beq.n	800ed5c <__sccl+0x28>
 800ed78:	462b      	mov	r3, r5
 800ed7a:	e7f2      	b.n	800ed62 <__sccl+0x2e>
 800ed7c:	7846      	ldrb	r6, [r0, #1]
 800ed7e:	2e5d      	cmp	r6, #93	@ 0x5d
 800ed80:	d0fa      	beq.n	800ed78 <__sccl+0x44>
 800ed82:	42b3      	cmp	r3, r6
 800ed84:	dcf8      	bgt.n	800ed78 <__sccl+0x44>
 800ed86:	3002      	adds	r0, #2
 800ed88:	461a      	mov	r2, r3
 800ed8a:	3201      	adds	r2, #1
 800ed8c:	4296      	cmp	r6, r2
 800ed8e:	54a1      	strb	r1, [r4, r2]
 800ed90:	dcfb      	bgt.n	800ed8a <__sccl+0x56>
 800ed92:	1af2      	subs	r2, r6, r3
 800ed94:	3a01      	subs	r2, #1
 800ed96:	1c5d      	adds	r5, r3, #1
 800ed98:	42b3      	cmp	r3, r6
 800ed9a:	bfa8      	it	ge
 800ed9c:	2200      	movge	r2, #0
 800ed9e:	18ab      	adds	r3, r5, r2
 800eda0:	e7e1      	b.n	800ed66 <__sccl+0x32>
 800eda2:	4610      	mov	r0, r2
 800eda4:	e7da      	b.n	800ed5c <__sccl+0x28>

0800eda6 <__submore>:
 800eda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edaa:	460c      	mov	r4, r1
 800edac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800edae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edb2:	4299      	cmp	r1, r3
 800edb4:	d11d      	bne.n	800edf2 <__submore+0x4c>
 800edb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800edba:	f7fe fcf7 	bl	800d7ac <_malloc_r>
 800edbe:	b918      	cbnz	r0, 800edc8 <__submore+0x22>
 800edc0:	f04f 30ff 	mov.w	r0, #4294967295
 800edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edcc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800edce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800edd2:	6360      	str	r0, [r4, #52]	@ 0x34
 800edd4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800edd8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800eddc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ede0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ede4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ede8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800edec:	6020      	str	r0, [r4, #0]
 800edee:	2000      	movs	r0, #0
 800edf0:	e7e8      	b.n	800edc4 <__submore+0x1e>
 800edf2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800edf4:	0077      	lsls	r7, r6, #1
 800edf6:	463a      	mov	r2, r7
 800edf8:	f000 f83e 	bl	800ee78 <_realloc_r>
 800edfc:	4605      	mov	r5, r0
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d0de      	beq.n	800edc0 <__submore+0x1a>
 800ee02:	eb00 0806 	add.w	r8, r0, r6
 800ee06:	4601      	mov	r1, r0
 800ee08:	4632      	mov	r2, r6
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	f000 f81f 	bl	800ee4e <memcpy>
 800ee10:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ee14:	f8c4 8000 	str.w	r8, [r4]
 800ee18:	e7e9      	b.n	800edee <__submore+0x48>

0800ee1a <memmove>:
 800ee1a:	4288      	cmp	r0, r1
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	eb01 0402 	add.w	r4, r1, r2
 800ee22:	d902      	bls.n	800ee2a <memmove+0x10>
 800ee24:	4284      	cmp	r4, r0
 800ee26:	4623      	mov	r3, r4
 800ee28:	d807      	bhi.n	800ee3a <memmove+0x20>
 800ee2a:	1e43      	subs	r3, r0, #1
 800ee2c:	42a1      	cmp	r1, r4
 800ee2e:	d008      	beq.n	800ee42 <memmove+0x28>
 800ee30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee38:	e7f8      	b.n	800ee2c <memmove+0x12>
 800ee3a:	4402      	add	r2, r0
 800ee3c:	4601      	mov	r1, r0
 800ee3e:	428a      	cmp	r2, r1
 800ee40:	d100      	bne.n	800ee44 <memmove+0x2a>
 800ee42:	bd10      	pop	{r4, pc}
 800ee44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee4c:	e7f7      	b.n	800ee3e <memmove+0x24>

0800ee4e <memcpy>:
 800ee4e:	440a      	add	r2, r1
 800ee50:	4291      	cmp	r1, r2
 800ee52:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee56:	d100      	bne.n	800ee5a <memcpy+0xc>
 800ee58:	4770      	bx	lr
 800ee5a:	b510      	push	{r4, lr}
 800ee5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee64:	4291      	cmp	r1, r2
 800ee66:	d1f9      	bne.n	800ee5c <memcpy+0xe>
 800ee68:	bd10      	pop	{r4, pc}

0800ee6a <abort>:
 800ee6a:	b508      	push	{r3, lr}
 800ee6c:	2006      	movs	r0, #6
 800ee6e:	f000 fa9f 	bl	800f3b0 <raise>
 800ee72:	2001      	movs	r0, #1
 800ee74:	f7f4 fb6a 	bl	800354c <_exit>

0800ee78 <_realloc_r>:
 800ee78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	4615      	mov	r5, r2
 800ee80:	460c      	mov	r4, r1
 800ee82:	b921      	cbnz	r1, 800ee8e <_realloc_r+0x16>
 800ee84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee88:	4611      	mov	r1, r2
 800ee8a:	f7fe bc8f 	b.w	800d7ac <_malloc_r>
 800ee8e:	b92a      	cbnz	r2, 800ee9c <_realloc_r+0x24>
 800ee90:	f7ff f848 	bl	800df24 <_free_r>
 800ee94:	2400      	movs	r4, #0
 800ee96:	4620      	mov	r0, r4
 800ee98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee9c:	f000 faa4 	bl	800f3e8 <_malloc_usable_size_r>
 800eea0:	4285      	cmp	r5, r0
 800eea2:	4606      	mov	r6, r0
 800eea4:	d802      	bhi.n	800eeac <_realloc_r+0x34>
 800eea6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eeaa:	d8f4      	bhi.n	800ee96 <_realloc_r+0x1e>
 800eeac:	4629      	mov	r1, r5
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f7fe fc7c 	bl	800d7ac <_malloc_r>
 800eeb4:	4607      	mov	r7, r0
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d0ec      	beq.n	800ee94 <_realloc_r+0x1c>
 800eeba:	42b5      	cmp	r5, r6
 800eebc:	462a      	mov	r2, r5
 800eebe:	4621      	mov	r1, r4
 800eec0:	bf28      	it	cs
 800eec2:	4632      	movcs	r2, r6
 800eec4:	f7ff ffc3 	bl	800ee4e <memcpy>
 800eec8:	4621      	mov	r1, r4
 800eeca:	4640      	mov	r0, r8
 800eecc:	f7ff f82a 	bl	800df24 <_free_r>
 800eed0:	463c      	mov	r4, r7
 800eed2:	e7e0      	b.n	800ee96 <_realloc_r+0x1e>

0800eed4 <_strtoul_l.constprop.0>:
 800eed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eed8:	4e34      	ldr	r6, [pc, #208]	@ (800efac <_strtoul_l.constprop.0+0xd8>)
 800eeda:	4686      	mov	lr, r0
 800eedc:	460d      	mov	r5, r1
 800eede:	4628      	mov	r0, r5
 800eee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eee4:	5d37      	ldrb	r7, [r6, r4]
 800eee6:	f017 0708 	ands.w	r7, r7, #8
 800eeea:	d1f8      	bne.n	800eede <_strtoul_l.constprop.0+0xa>
 800eeec:	2c2d      	cmp	r4, #45	@ 0x2d
 800eeee:	d12f      	bne.n	800ef50 <_strtoul_l.constprop.0+0x7c>
 800eef0:	782c      	ldrb	r4, [r5, #0]
 800eef2:	2701      	movs	r7, #1
 800eef4:	1c85      	adds	r5, r0, #2
 800eef6:	f033 0010 	bics.w	r0, r3, #16
 800eefa:	d109      	bne.n	800ef10 <_strtoul_l.constprop.0+0x3c>
 800eefc:	2c30      	cmp	r4, #48	@ 0x30
 800eefe:	d12c      	bne.n	800ef5a <_strtoul_l.constprop.0+0x86>
 800ef00:	7828      	ldrb	r0, [r5, #0]
 800ef02:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ef06:	2858      	cmp	r0, #88	@ 0x58
 800ef08:	d127      	bne.n	800ef5a <_strtoul_l.constprop.0+0x86>
 800ef0a:	786c      	ldrb	r4, [r5, #1]
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	3502      	adds	r5, #2
 800ef10:	f04f 38ff 	mov.w	r8, #4294967295
 800ef14:	2600      	movs	r6, #0
 800ef16:	fbb8 f8f3 	udiv	r8, r8, r3
 800ef1a:	fb03 f908 	mul.w	r9, r3, r8
 800ef1e:	ea6f 0909 	mvn.w	r9, r9
 800ef22:	4630      	mov	r0, r6
 800ef24:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ef28:	f1bc 0f09 	cmp.w	ip, #9
 800ef2c:	d81c      	bhi.n	800ef68 <_strtoul_l.constprop.0+0x94>
 800ef2e:	4664      	mov	r4, ip
 800ef30:	42a3      	cmp	r3, r4
 800ef32:	dd2a      	ble.n	800ef8a <_strtoul_l.constprop.0+0xb6>
 800ef34:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ef38:	d007      	beq.n	800ef4a <_strtoul_l.constprop.0+0x76>
 800ef3a:	4580      	cmp	r8, r0
 800ef3c:	d322      	bcc.n	800ef84 <_strtoul_l.constprop.0+0xb0>
 800ef3e:	d101      	bne.n	800ef44 <_strtoul_l.constprop.0+0x70>
 800ef40:	45a1      	cmp	r9, r4
 800ef42:	db1f      	blt.n	800ef84 <_strtoul_l.constprop.0+0xb0>
 800ef44:	fb00 4003 	mla	r0, r0, r3, r4
 800ef48:	2601      	movs	r6, #1
 800ef4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef4e:	e7e9      	b.n	800ef24 <_strtoul_l.constprop.0+0x50>
 800ef50:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef52:	bf04      	itt	eq
 800ef54:	782c      	ldrbeq	r4, [r5, #0]
 800ef56:	1c85      	addeq	r5, r0, #2
 800ef58:	e7cd      	b.n	800eef6 <_strtoul_l.constprop.0+0x22>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1d8      	bne.n	800ef10 <_strtoul_l.constprop.0+0x3c>
 800ef5e:	2c30      	cmp	r4, #48	@ 0x30
 800ef60:	bf0c      	ite	eq
 800ef62:	2308      	moveq	r3, #8
 800ef64:	230a      	movne	r3, #10
 800ef66:	e7d3      	b.n	800ef10 <_strtoul_l.constprop.0+0x3c>
 800ef68:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ef6c:	f1bc 0f19 	cmp.w	ip, #25
 800ef70:	d801      	bhi.n	800ef76 <_strtoul_l.constprop.0+0xa2>
 800ef72:	3c37      	subs	r4, #55	@ 0x37
 800ef74:	e7dc      	b.n	800ef30 <_strtoul_l.constprop.0+0x5c>
 800ef76:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ef7a:	f1bc 0f19 	cmp.w	ip, #25
 800ef7e:	d804      	bhi.n	800ef8a <_strtoul_l.constprop.0+0xb6>
 800ef80:	3c57      	subs	r4, #87	@ 0x57
 800ef82:	e7d5      	b.n	800ef30 <_strtoul_l.constprop.0+0x5c>
 800ef84:	f04f 36ff 	mov.w	r6, #4294967295
 800ef88:	e7df      	b.n	800ef4a <_strtoul_l.constprop.0+0x76>
 800ef8a:	1c73      	adds	r3, r6, #1
 800ef8c:	d106      	bne.n	800ef9c <_strtoul_l.constprop.0+0xc8>
 800ef8e:	2322      	movs	r3, #34	@ 0x22
 800ef90:	f8ce 3000 	str.w	r3, [lr]
 800ef94:	4630      	mov	r0, r6
 800ef96:	b932      	cbnz	r2, 800efa6 <_strtoul_l.constprop.0+0xd2>
 800ef98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef9c:	b107      	cbz	r7, 800efa0 <_strtoul_l.constprop.0+0xcc>
 800ef9e:	4240      	negs	r0, r0
 800efa0:	2a00      	cmp	r2, #0
 800efa2:	d0f9      	beq.n	800ef98 <_strtoul_l.constprop.0+0xc4>
 800efa4:	b106      	cbz	r6, 800efa8 <_strtoul_l.constprop.0+0xd4>
 800efa6:	1e69      	subs	r1, r5, #1
 800efa8:	6011      	str	r1, [r2, #0]
 800efaa:	e7f5      	b.n	800ef98 <_strtoul_l.constprop.0+0xc4>
 800efac:	08010429 	.word	0x08010429

0800efb0 <_strtoul_r>:
 800efb0:	f7ff bf90 	b.w	800eed4 <_strtoul_l.constprop.0>

0800efb4 <__sfputc_r>:
 800efb4:	6893      	ldr	r3, [r2, #8]
 800efb6:	3b01      	subs	r3, #1
 800efb8:	2b00      	cmp	r3, #0
 800efba:	b410      	push	{r4}
 800efbc:	6093      	str	r3, [r2, #8]
 800efbe:	da08      	bge.n	800efd2 <__sfputc_r+0x1e>
 800efc0:	6994      	ldr	r4, [r2, #24]
 800efc2:	42a3      	cmp	r3, r4
 800efc4:	db01      	blt.n	800efca <__sfputc_r+0x16>
 800efc6:	290a      	cmp	r1, #10
 800efc8:	d103      	bne.n	800efd2 <__sfputc_r+0x1e>
 800efca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efce:	f000 b933 	b.w	800f238 <__swbuf_r>
 800efd2:	6813      	ldr	r3, [r2, #0]
 800efd4:	1c58      	adds	r0, r3, #1
 800efd6:	6010      	str	r0, [r2, #0]
 800efd8:	7019      	strb	r1, [r3, #0]
 800efda:	4608      	mov	r0, r1
 800efdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <__sfputs_r>:
 800efe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe4:	4606      	mov	r6, r0
 800efe6:	460f      	mov	r7, r1
 800efe8:	4614      	mov	r4, r2
 800efea:	18d5      	adds	r5, r2, r3
 800efec:	42ac      	cmp	r4, r5
 800efee:	d101      	bne.n	800eff4 <__sfputs_r+0x12>
 800eff0:	2000      	movs	r0, #0
 800eff2:	e007      	b.n	800f004 <__sfputs_r+0x22>
 800eff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eff8:	463a      	mov	r2, r7
 800effa:	4630      	mov	r0, r6
 800effc:	f7ff ffda 	bl	800efb4 <__sfputc_r>
 800f000:	1c43      	adds	r3, r0, #1
 800f002:	d1f3      	bne.n	800efec <__sfputs_r+0xa>
 800f004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f008 <_vfiprintf_r>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	460d      	mov	r5, r1
 800f00e:	b09d      	sub	sp, #116	@ 0x74
 800f010:	4614      	mov	r4, r2
 800f012:	4698      	mov	r8, r3
 800f014:	4606      	mov	r6, r0
 800f016:	b118      	cbz	r0, 800f020 <_vfiprintf_r+0x18>
 800f018:	6a03      	ldr	r3, [r0, #32]
 800f01a:	b90b      	cbnz	r3, 800f020 <_vfiprintf_r+0x18>
 800f01c:	f7fe fd64 	bl	800dae8 <__sinit>
 800f020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f022:	07d9      	lsls	r1, r3, #31
 800f024:	d405      	bmi.n	800f032 <_vfiprintf_r+0x2a>
 800f026:	89ab      	ldrh	r3, [r5, #12]
 800f028:	059a      	lsls	r2, r3, #22
 800f02a:	d402      	bmi.n	800f032 <_vfiprintf_r+0x2a>
 800f02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f02e:	f7fe ff50 	bl	800ded2 <__retarget_lock_acquire_recursive>
 800f032:	89ab      	ldrh	r3, [r5, #12]
 800f034:	071b      	lsls	r3, r3, #28
 800f036:	d501      	bpl.n	800f03c <_vfiprintf_r+0x34>
 800f038:	692b      	ldr	r3, [r5, #16]
 800f03a:	b99b      	cbnz	r3, 800f064 <_vfiprintf_r+0x5c>
 800f03c:	4629      	mov	r1, r5
 800f03e:	4630      	mov	r0, r6
 800f040:	f000 f938 	bl	800f2b4 <__swsetup_r>
 800f044:	b170      	cbz	r0, 800f064 <_vfiprintf_r+0x5c>
 800f046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f048:	07dc      	lsls	r4, r3, #31
 800f04a:	d504      	bpl.n	800f056 <_vfiprintf_r+0x4e>
 800f04c:	f04f 30ff 	mov.w	r0, #4294967295
 800f050:	b01d      	add	sp, #116	@ 0x74
 800f052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f056:	89ab      	ldrh	r3, [r5, #12]
 800f058:	0598      	lsls	r0, r3, #22
 800f05a:	d4f7      	bmi.n	800f04c <_vfiprintf_r+0x44>
 800f05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f05e:	f7fe ff39 	bl	800ded4 <__retarget_lock_release_recursive>
 800f062:	e7f3      	b.n	800f04c <_vfiprintf_r+0x44>
 800f064:	2300      	movs	r3, #0
 800f066:	9309      	str	r3, [sp, #36]	@ 0x24
 800f068:	2320      	movs	r3, #32
 800f06a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f072:	2330      	movs	r3, #48	@ 0x30
 800f074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f224 <_vfiprintf_r+0x21c>
 800f078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f07c:	f04f 0901 	mov.w	r9, #1
 800f080:	4623      	mov	r3, r4
 800f082:	469a      	mov	sl, r3
 800f084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f088:	b10a      	cbz	r2, 800f08e <_vfiprintf_r+0x86>
 800f08a:	2a25      	cmp	r2, #37	@ 0x25
 800f08c:	d1f9      	bne.n	800f082 <_vfiprintf_r+0x7a>
 800f08e:	ebba 0b04 	subs.w	fp, sl, r4
 800f092:	d00b      	beq.n	800f0ac <_vfiprintf_r+0xa4>
 800f094:	465b      	mov	r3, fp
 800f096:	4622      	mov	r2, r4
 800f098:	4629      	mov	r1, r5
 800f09a:	4630      	mov	r0, r6
 800f09c:	f7ff ffa1 	bl	800efe2 <__sfputs_r>
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	f000 80a7 	beq.w	800f1f4 <_vfiprintf_r+0x1ec>
 800f0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0a8:	445a      	add	r2, fp
 800f0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 809f 	beq.w	800f1f4 <_vfiprintf_r+0x1ec>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0c0:	f10a 0a01 	add.w	sl, sl, #1
 800f0c4:	9304      	str	r3, [sp, #16]
 800f0c6:	9307      	str	r3, [sp, #28]
 800f0c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0ce:	4654      	mov	r4, sl
 800f0d0:	2205      	movs	r2, #5
 800f0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d6:	4853      	ldr	r0, [pc, #332]	@ (800f224 <_vfiprintf_r+0x21c>)
 800f0d8:	f7f1 f882 	bl	80001e0 <memchr>
 800f0dc:	9a04      	ldr	r2, [sp, #16]
 800f0de:	b9d8      	cbnz	r0, 800f118 <_vfiprintf_r+0x110>
 800f0e0:	06d1      	lsls	r1, r2, #27
 800f0e2:	bf44      	itt	mi
 800f0e4:	2320      	movmi	r3, #32
 800f0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0ea:	0713      	lsls	r3, r2, #28
 800f0ec:	bf44      	itt	mi
 800f0ee:	232b      	movmi	r3, #43	@ 0x2b
 800f0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0fa:	d015      	beq.n	800f128 <_vfiprintf_r+0x120>
 800f0fc:	9a07      	ldr	r2, [sp, #28]
 800f0fe:	4654      	mov	r4, sl
 800f100:	2000      	movs	r0, #0
 800f102:	f04f 0c0a 	mov.w	ip, #10
 800f106:	4621      	mov	r1, r4
 800f108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f10c:	3b30      	subs	r3, #48	@ 0x30
 800f10e:	2b09      	cmp	r3, #9
 800f110:	d94b      	bls.n	800f1aa <_vfiprintf_r+0x1a2>
 800f112:	b1b0      	cbz	r0, 800f142 <_vfiprintf_r+0x13a>
 800f114:	9207      	str	r2, [sp, #28]
 800f116:	e014      	b.n	800f142 <_vfiprintf_r+0x13a>
 800f118:	eba0 0308 	sub.w	r3, r0, r8
 800f11c:	fa09 f303 	lsl.w	r3, r9, r3
 800f120:	4313      	orrs	r3, r2
 800f122:	9304      	str	r3, [sp, #16]
 800f124:	46a2      	mov	sl, r4
 800f126:	e7d2      	b.n	800f0ce <_vfiprintf_r+0xc6>
 800f128:	9b03      	ldr	r3, [sp, #12]
 800f12a:	1d19      	adds	r1, r3, #4
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	9103      	str	r1, [sp, #12]
 800f130:	2b00      	cmp	r3, #0
 800f132:	bfbb      	ittet	lt
 800f134:	425b      	neglt	r3, r3
 800f136:	f042 0202 	orrlt.w	r2, r2, #2
 800f13a:	9307      	strge	r3, [sp, #28]
 800f13c:	9307      	strlt	r3, [sp, #28]
 800f13e:	bfb8      	it	lt
 800f140:	9204      	strlt	r2, [sp, #16]
 800f142:	7823      	ldrb	r3, [r4, #0]
 800f144:	2b2e      	cmp	r3, #46	@ 0x2e
 800f146:	d10a      	bne.n	800f15e <_vfiprintf_r+0x156>
 800f148:	7863      	ldrb	r3, [r4, #1]
 800f14a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f14c:	d132      	bne.n	800f1b4 <_vfiprintf_r+0x1ac>
 800f14e:	9b03      	ldr	r3, [sp, #12]
 800f150:	1d1a      	adds	r2, r3, #4
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	9203      	str	r2, [sp, #12]
 800f156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f15a:	3402      	adds	r4, #2
 800f15c:	9305      	str	r3, [sp, #20]
 800f15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f234 <_vfiprintf_r+0x22c>
 800f162:	7821      	ldrb	r1, [r4, #0]
 800f164:	2203      	movs	r2, #3
 800f166:	4650      	mov	r0, sl
 800f168:	f7f1 f83a 	bl	80001e0 <memchr>
 800f16c:	b138      	cbz	r0, 800f17e <_vfiprintf_r+0x176>
 800f16e:	9b04      	ldr	r3, [sp, #16]
 800f170:	eba0 000a 	sub.w	r0, r0, sl
 800f174:	2240      	movs	r2, #64	@ 0x40
 800f176:	4082      	lsls	r2, r0
 800f178:	4313      	orrs	r3, r2
 800f17a:	3401      	adds	r4, #1
 800f17c:	9304      	str	r3, [sp, #16]
 800f17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f182:	4829      	ldr	r0, [pc, #164]	@ (800f228 <_vfiprintf_r+0x220>)
 800f184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f188:	2206      	movs	r2, #6
 800f18a:	f7f1 f829 	bl	80001e0 <memchr>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d03f      	beq.n	800f212 <_vfiprintf_r+0x20a>
 800f192:	4b26      	ldr	r3, [pc, #152]	@ (800f22c <_vfiprintf_r+0x224>)
 800f194:	bb1b      	cbnz	r3, 800f1de <_vfiprintf_r+0x1d6>
 800f196:	9b03      	ldr	r3, [sp, #12]
 800f198:	3307      	adds	r3, #7
 800f19a:	f023 0307 	bic.w	r3, r3, #7
 800f19e:	3308      	adds	r3, #8
 800f1a0:	9303      	str	r3, [sp, #12]
 800f1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a4:	443b      	add	r3, r7
 800f1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1a8:	e76a      	b.n	800f080 <_vfiprintf_r+0x78>
 800f1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	e7a8      	b.n	800f106 <_vfiprintf_r+0xfe>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	3401      	adds	r4, #1
 800f1b8:	9305      	str	r3, [sp, #20]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	f04f 0c0a 	mov.w	ip, #10
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1c6:	3a30      	subs	r2, #48	@ 0x30
 800f1c8:	2a09      	cmp	r2, #9
 800f1ca:	d903      	bls.n	800f1d4 <_vfiprintf_r+0x1cc>
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d0c6      	beq.n	800f15e <_vfiprintf_r+0x156>
 800f1d0:	9105      	str	r1, [sp, #20]
 800f1d2:	e7c4      	b.n	800f15e <_vfiprintf_r+0x156>
 800f1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1d8:	4604      	mov	r4, r0
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e7f0      	b.n	800f1c0 <_vfiprintf_r+0x1b8>
 800f1de:	ab03      	add	r3, sp, #12
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	462a      	mov	r2, r5
 800f1e4:	4b12      	ldr	r3, [pc, #72]	@ (800f230 <_vfiprintf_r+0x228>)
 800f1e6:	a904      	add	r1, sp, #16
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	f3af 8000 	nop.w
 800f1ee:	4607      	mov	r7, r0
 800f1f0:	1c78      	adds	r0, r7, #1
 800f1f2:	d1d6      	bne.n	800f1a2 <_vfiprintf_r+0x19a>
 800f1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1f6:	07d9      	lsls	r1, r3, #31
 800f1f8:	d405      	bmi.n	800f206 <_vfiprintf_r+0x1fe>
 800f1fa:	89ab      	ldrh	r3, [r5, #12]
 800f1fc:	059a      	lsls	r2, r3, #22
 800f1fe:	d402      	bmi.n	800f206 <_vfiprintf_r+0x1fe>
 800f200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f202:	f7fe fe67 	bl	800ded4 <__retarget_lock_release_recursive>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	065b      	lsls	r3, r3, #25
 800f20a:	f53f af1f 	bmi.w	800f04c <_vfiprintf_r+0x44>
 800f20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f210:	e71e      	b.n	800f050 <_vfiprintf_r+0x48>
 800f212:	ab03      	add	r3, sp, #12
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	462a      	mov	r2, r5
 800f218:	4b05      	ldr	r3, [pc, #20]	@ (800f230 <_vfiprintf_r+0x228>)
 800f21a:	a904      	add	r1, sp, #16
 800f21c:	4630      	mov	r0, r6
 800f21e:	f7ff fa5d 	bl	800e6dc <_printf_i>
 800f222:	e7e4      	b.n	800f1ee <_vfiprintf_r+0x1e6>
 800f224:	080105d6 	.word	0x080105d6
 800f228:	080105e0 	.word	0x080105e0
 800f22c:	00000000 	.word	0x00000000
 800f230:	0800efe3 	.word	0x0800efe3
 800f234:	080105dc 	.word	0x080105dc

0800f238 <__swbuf_r>:
 800f238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23a:	460e      	mov	r6, r1
 800f23c:	4614      	mov	r4, r2
 800f23e:	4605      	mov	r5, r0
 800f240:	b118      	cbz	r0, 800f24a <__swbuf_r+0x12>
 800f242:	6a03      	ldr	r3, [r0, #32]
 800f244:	b90b      	cbnz	r3, 800f24a <__swbuf_r+0x12>
 800f246:	f7fe fc4f 	bl	800dae8 <__sinit>
 800f24a:	69a3      	ldr	r3, [r4, #24]
 800f24c:	60a3      	str	r3, [r4, #8]
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	071a      	lsls	r2, r3, #28
 800f252:	d501      	bpl.n	800f258 <__swbuf_r+0x20>
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	b943      	cbnz	r3, 800f26a <__swbuf_r+0x32>
 800f258:	4621      	mov	r1, r4
 800f25a:	4628      	mov	r0, r5
 800f25c:	f000 f82a 	bl	800f2b4 <__swsetup_r>
 800f260:	b118      	cbz	r0, 800f26a <__swbuf_r+0x32>
 800f262:	f04f 37ff 	mov.w	r7, #4294967295
 800f266:	4638      	mov	r0, r7
 800f268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	6922      	ldr	r2, [r4, #16]
 800f26e:	1a98      	subs	r0, r3, r2
 800f270:	6963      	ldr	r3, [r4, #20]
 800f272:	b2f6      	uxtb	r6, r6
 800f274:	4283      	cmp	r3, r0
 800f276:	4637      	mov	r7, r6
 800f278:	dc05      	bgt.n	800f286 <__swbuf_r+0x4e>
 800f27a:	4621      	mov	r1, r4
 800f27c:	4628      	mov	r0, r5
 800f27e:	f7ff fd1f 	bl	800ecc0 <_fflush_r>
 800f282:	2800      	cmp	r0, #0
 800f284:	d1ed      	bne.n	800f262 <__swbuf_r+0x2a>
 800f286:	68a3      	ldr	r3, [r4, #8]
 800f288:	3b01      	subs	r3, #1
 800f28a:	60a3      	str	r3, [r4, #8]
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	6022      	str	r2, [r4, #0]
 800f292:	701e      	strb	r6, [r3, #0]
 800f294:	6962      	ldr	r2, [r4, #20]
 800f296:	1c43      	adds	r3, r0, #1
 800f298:	429a      	cmp	r2, r3
 800f29a:	d004      	beq.n	800f2a6 <__swbuf_r+0x6e>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	07db      	lsls	r3, r3, #31
 800f2a0:	d5e1      	bpl.n	800f266 <__swbuf_r+0x2e>
 800f2a2:	2e0a      	cmp	r6, #10
 800f2a4:	d1df      	bne.n	800f266 <__swbuf_r+0x2e>
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f7ff fd09 	bl	800ecc0 <_fflush_r>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d0d9      	beq.n	800f266 <__swbuf_r+0x2e>
 800f2b2:	e7d6      	b.n	800f262 <__swbuf_r+0x2a>

0800f2b4 <__swsetup_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4b29      	ldr	r3, [pc, #164]	@ (800f35c <__swsetup_r+0xa8>)
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	6818      	ldr	r0, [r3, #0]
 800f2bc:	460c      	mov	r4, r1
 800f2be:	b118      	cbz	r0, 800f2c8 <__swsetup_r+0x14>
 800f2c0:	6a03      	ldr	r3, [r0, #32]
 800f2c2:	b90b      	cbnz	r3, 800f2c8 <__swsetup_r+0x14>
 800f2c4:	f7fe fc10 	bl	800dae8 <__sinit>
 800f2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2cc:	0719      	lsls	r1, r3, #28
 800f2ce:	d422      	bmi.n	800f316 <__swsetup_r+0x62>
 800f2d0:	06da      	lsls	r2, r3, #27
 800f2d2:	d407      	bmi.n	800f2e4 <__swsetup_r+0x30>
 800f2d4:	2209      	movs	r2, #9
 800f2d6:	602a      	str	r2, [r5, #0]
 800f2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2dc:	81a3      	strh	r3, [r4, #12]
 800f2de:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e2:	e033      	b.n	800f34c <__swsetup_r+0x98>
 800f2e4:	0758      	lsls	r0, r3, #29
 800f2e6:	d512      	bpl.n	800f30e <__swsetup_r+0x5a>
 800f2e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ea:	b141      	cbz	r1, 800f2fe <__swsetup_r+0x4a>
 800f2ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2f0:	4299      	cmp	r1, r3
 800f2f2:	d002      	beq.n	800f2fa <__swsetup_r+0x46>
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f7fe fe15 	bl	800df24 <_free_r>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	2300      	movs	r3, #0
 800f308:	6063      	str	r3, [r4, #4]
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	6023      	str	r3, [r4, #0]
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	f043 0308 	orr.w	r3, r3, #8
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	6923      	ldr	r3, [r4, #16]
 800f318:	b94b      	cbnz	r3, 800f32e <__swsetup_r+0x7a>
 800f31a:	89a3      	ldrh	r3, [r4, #12]
 800f31c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f324:	d003      	beq.n	800f32e <__swsetup_r+0x7a>
 800f326:	4621      	mov	r1, r4
 800f328:	4628      	mov	r0, r5
 800f32a:	f000 f88b 	bl	800f444 <__smakebuf_r>
 800f32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f332:	f013 0201 	ands.w	r2, r3, #1
 800f336:	d00a      	beq.n	800f34e <__swsetup_r+0x9a>
 800f338:	2200      	movs	r2, #0
 800f33a:	60a2      	str	r2, [r4, #8]
 800f33c:	6962      	ldr	r2, [r4, #20]
 800f33e:	4252      	negs	r2, r2
 800f340:	61a2      	str	r2, [r4, #24]
 800f342:	6922      	ldr	r2, [r4, #16]
 800f344:	b942      	cbnz	r2, 800f358 <__swsetup_r+0xa4>
 800f346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f34a:	d1c5      	bne.n	800f2d8 <__swsetup_r+0x24>
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	0799      	lsls	r1, r3, #30
 800f350:	bf58      	it	pl
 800f352:	6962      	ldrpl	r2, [r4, #20]
 800f354:	60a2      	str	r2, [r4, #8]
 800f356:	e7f4      	b.n	800f342 <__swsetup_r+0x8e>
 800f358:	2000      	movs	r0, #0
 800f35a:	e7f7      	b.n	800f34c <__swsetup_r+0x98>
 800f35c:	20000038 	.word	0x20000038

0800f360 <_raise_r>:
 800f360:	291f      	cmp	r1, #31
 800f362:	b538      	push	{r3, r4, r5, lr}
 800f364:	4605      	mov	r5, r0
 800f366:	460c      	mov	r4, r1
 800f368:	d904      	bls.n	800f374 <_raise_r+0x14>
 800f36a:	2316      	movs	r3, #22
 800f36c:	6003      	str	r3, [r0, #0]
 800f36e:	f04f 30ff 	mov.w	r0, #4294967295
 800f372:	bd38      	pop	{r3, r4, r5, pc}
 800f374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f376:	b112      	cbz	r2, 800f37e <_raise_r+0x1e>
 800f378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f37c:	b94b      	cbnz	r3, 800f392 <_raise_r+0x32>
 800f37e:	4628      	mov	r0, r5
 800f380:	f000 f830 	bl	800f3e4 <_getpid_r>
 800f384:	4622      	mov	r2, r4
 800f386:	4601      	mov	r1, r0
 800f388:	4628      	mov	r0, r5
 800f38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f38e:	f000 b817 	b.w	800f3c0 <_kill_r>
 800f392:	2b01      	cmp	r3, #1
 800f394:	d00a      	beq.n	800f3ac <_raise_r+0x4c>
 800f396:	1c59      	adds	r1, r3, #1
 800f398:	d103      	bne.n	800f3a2 <_raise_r+0x42>
 800f39a:	2316      	movs	r3, #22
 800f39c:	6003      	str	r3, [r0, #0]
 800f39e:	2001      	movs	r0, #1
 800f3a0:	e7e7      	b.n	800f372 <_raise_r+0x12>
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	4798      	blx	r3
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	e7e0      	b.n	800f372 <_raise_r+0x12>

0800f3b0 <raise>:
 800f3b0:	4b02      	ldr	r3, [pc, #8]	@ (800f3bc <raise+0xc>)
 800f3b2:	4601      	mov	r1, r0
 800f3b4:	6818      	ldr	r0, [r3, #0]
 800f3b6:	f7ff bfd3 	b.w	800f360 <_raise_r>
 800f3ba:	bf00      	nop
 800f3bc:	20000038 	.word	0x20000038

0800f3c0 <_kill_r>:
 800f3c0:	b538      	push	{r3, r4, r5, lr}
 800f3c2:	4d07      	ldr	r5, [pc, #28]	@ (800f3e0 <_kill_r+0x20>)
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	4608      	mov	r0, r1
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	602b      	str	r3, [r5, #0]
 800f3ce:	f7f4 f8ad 	bl	800352c <_kill>
 800f3d2:	1c43      	adds	r3, r0, #1
 800f3d4:	d102      	bne.n	800f3dc <_kill_r+0x1c>
 800f3d6:	682b      	ldr	r3, [r5, #0]
 800f3d8:	b103      	cbz	r3, 800f3dc <_kill_r+0x1c>
 800f3da:	6023      	str	r3, [r4, #0]
 800f3dc:	bd38      	pop	{r3, r4, r5, pc}
 800f3de:	bf00      	nop
 800f3e0:	200057f8 	.word	0x200057f8

0800f3e4 <_getpid_r>:
 800f3e4:	f7f4 b89a 	b.w	800351c <_getpid>

0800f3e8 <_malloc_usable_size_r>:
 800f3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3ec:	1f18      	subs	r0, r3, #4
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bfbc      	itt	lt
 800f3f2:	580b      	ldrlt	r3, [r1, r0]
 800f3f4:	18c0      	addlt	r0, r0, r3
 800f3f6:	4770      	bx	lr

0800f3f8 <__swhatbuf_r>:
 800f3f8:	b570      	push	{r4, r5, r6, lr}
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f400:	2900      	cmp	r1, #0
 800f402:	b096      	sub	sp, #88	@ 0x58
 800f404:	4615      	mov	r5, r2
 800f406:	461e      	mov	r6, r3
 800f408:	da0d      	bge.n	800f426 <__swhatbuf_r+0x2e>
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f410:	f04f 0100 	mov.w	r1, #0
 800f414:	bf14      	ite	ne
 800f416:	2340      	movne	r3, #64	@ 0x40
 800f418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f41c:	2000      	movs	r0, #0
 800f41e:	6031      	str	r1, [r6, #0]
 800f420:	602b      	str	r3, [r5, #0]
 800f422:	b016      	add	sp, #88	@ 0x58
 800f424:	bd70      	pop	{r4, r5, r6, pc}
 800f426:	466a      	mov	r2, sp
 800f428:	f000 f848 	bl	800f4bc <_fstat_r>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	dbec      	blt.n	800f40a <__swhatbuf_r+0x12>
 800f430:	9901      	ldr	r1, [sp, #4]
 800f432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f43a:	4259      	negs	r1, r3
 800f43c:	4159      	adcs	r1, r3
 800f43e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f442:	e7eb      	b.n	800f41c <__swhatbuf_r+0x24>

0800f444 <__smakebuf_r>:
 800f444:	898b      	ldrh	r3, [r1, #12]
 800f446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f448:	079d      	lsls	r5, r3, #30
 800f44a:	4606      	mov	r6, r0
 800f44c:	460c      	mov	r4, r1
 800f44e:	d507      	bpl.n	800f460 <__smakebuf_r+0x1c>
 800f450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	6123      	str	r3, [r4, #16]
 800f458:	2301      	movs	r3, #1
 800f45a:	6163      	str	r3, [r4, #20]
 800f45c:	b003      	add	sp, #12
 800f45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f460:	ab01      	add	r3, sp, #4
 800f462:	466a      	mov	r2, sp
 800f464:	f7ff ffc8 	bl	800f3f8 <__swhatbuf_r>
 800f468:	9f00      	ldr	r7, [sp, #0]
 800f46a:	4605      	mov	r5, r0
 800f46c:	4639      	mov	r1, r7
 800f46e:	4630      	mov	r0, r6
 800f470:	f7fe f99c 	bl	800d7ac <_malloc_r>
 800f474:	b948      	cbnz	r0, 800f48a <__smakebuf_r+0x46>
 800f476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f47a:	059a      	lsls	r2, r3, #22
 800f47c:	d4ee      	bmi.n	800f45c <__smakebuf_r+0x18>
 800f47e:	f023 0303 	bic.w	r3, r3, #3
 800f482:	f043 0302 	orr.w	r3, r3, #2
 800f486:	81a3      	strh	r3, [r4, #12]
 800f488:	e7e2      	b.n	800f450 <__smakebuf_r+0xc>
 800f48a:	89a3      	ldrh	r3, [r4, #12]
 800f48c:	6020      	str	r0, [r4, #0]
 800f48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	9b01      	ldr	r3, [sp, #4]
 800f496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f49a:	b15b      	cbz	r3, 800f4b4 <__smakebuf_r+0x70>
 800f49c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f000 f81d 	bl	800f4e0 <_isatty_r>
 800f4a6:	b128      	cbz	r0, 800f4b4 <__smakebuf_r+0x70>
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	f023 0303 	bic.w	r3, r3, #3
 800f4ae:	f043 0301 	orr.w	r3, r3, #1
 800f4b2:	81a3      	strh	r3, [r4, #12]
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	431d      	orrs	r5, r3
 800f4b8:	81a5      	strh	r5, [r4, #12]
 800f4ba:	e7cf      	b.n	800f45c <__smakebuf_r+0x18>

0800f4bc <_fstat_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	4d07      	ldr	r5, [pc, #28]	@ (800f4dc <_fstat_r+0x20>)
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	4608      	mov	r0, r1
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	602b      	str	r3, [r5, #0]
 800f4ca:	f7f4 f88f 	bl	80035ec <_fstat>
 800f4ce:	1c43      	adds	r3, r0, #1
 800f4d0:	d102      	bne.n	800f4d8 <_fstat_r+0x1c>
 800f4d2:	682b      	ldr	r3, [r5, #0]
 800f4d4:	b103      	cbz	r3, 800f4d8 <_fstat_r+0x1c>
 800f4d6:	6023      	str	r3, [r4, #0]
 800f4d8:	bd38      	pop	{r3, r4, r5, pc}
 800f4da:	bf00      	nop
 800f4dc:	200057f8 	.word	0x200057f8

0800f4e0 <_isatty_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d06      	ldr	r5, [pc, #24]	@ (800f4fc <_isatty_r+0x1c>)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	4608      	mov	r0, r1
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	f7f4 f88e 	bl	800360c <_isatty>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d102      	bne.n	800f4fa <_isatty_r+0x1a>
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	b103      	cbz	r3, 800f4fa <_isatty_r+0x1a>
 800f4f8:	6023      	str	r3, [r4, #0]
 800f4fa:	bd38      	pop	{r3, r4, r5, pc}
 800f4fc:	200057f8 	.word	0x200057f8

0800f500 <_init>:
 800f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f502:	bf00      	nop
 800f504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f506:	bc08      	pop	{r3}
 800f508:	469e      	mov	lr, r3
 800f50a:	4770      	bx	lr

0800f50c <_fini>:
 800f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50e:	bf00      	nop
 800f510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f512:	bc08      	pop	{r3}
 800f514:	469e      	mov	lr, r3
 800f516:	4770      	bx	lr

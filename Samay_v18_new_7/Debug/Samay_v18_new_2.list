
Samay_v18_new_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f328  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001054  0800f4b8  0800f4b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801050c  0801050c  00012088  2**0
                  CONTENTS
  4 .ARM          00000008  0801050c  0801050c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010514  08010514  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010514  08010514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010518  08010518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801051c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012088  2**0
                  CONTENTS
 10 .bss          00005778  20000088  20000088  00012088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005800  20005800  00012088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001991a  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e11  00000000  00000000  0002b9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0002f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001082  00000000  00000000  00030d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a0c  00000000  00000000  00031daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e5b5  00000000  00000000  000577b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cab  00000000  00000000  00075d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146a16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006638  00000000  00000000  00146a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0014d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4a0 	.word	0x0800f4a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f4a0 	.word	0x0800f4a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Send_Uart+0x28>)
 800058a:	f008 fb18 	bl	8008bbe <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000374 	.word	0x20000374

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80005a2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f003 f88c 	bl	80036c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 fa8c 	bl	8000ac4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ac:	f000 faf4 	bl	8000b98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fc62 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 fc38 	bl	8000e28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 fbe2 	bl	8000d80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 fc0a 	bl	8000dd4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005c0:	f00a f85a 	bl	800a678 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005c4:	f000 fbbc 	bl	8000d40 <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80005c8:	f000 fb5e 	bl	8000c88 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005cc:	f000 fb8a 	bl	8000ce4 <MX_I2S3_Init>
  MX_I2C2_Init();
 80005d0:	f000 fb2c 	bl	8000c2c <MX_I2C2_Init>


  // for new_eeprom.c new_rtc.c new_uart.c
  if (I2C1_ClockConfig() != HAL_OK) {
 80005d4:	f000 fd22 	bl	800101c <I2C1_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x46>
          Error_Handler(); // Handle clock config failure
 80005de:	f001 fbaf 	bl	8001d40 <Error_Handler>
      }
  MX_I2C1_Init();
 80005e2:	f000 faf5 	bl	8000bd0 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f003 f8db 	bl	80037a4 <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 80005ee:	f001 f93f 	bl	8001870 <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 80005f2:	f001 f913 	bl	800181c <CODEC_RST>

  configure_codec();
 80005f6:	f001 f89f 	bl	8001738 <configure_codec>


  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 80005fa:	4bb9      	ldr	r3, [pc, #740]	@ (80008e0 <main+0x344>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	4bb8      	ldr	r3, [pc, #736]	@ (80008e4 <main+0x348>)
 8000604:	4413      	add	r3, r2
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	48b7      	ldr	r0, [pc, #732]	@ (80008e8 <main+0x34c>)
 800060c:	f008 fb69 	bl	8008ce2 <HAL_UART_Receive_IT>

  ret=eeprom_init();
 8000610:	f001 fb9c 	bl	8001d4c <eeprom_init>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4bb4      	ldr	r3, [pc, #720]	@ (80008ec <main+0x350>)
 800061a:	701a      	strb	r2, [r3, #0]
  if(ret==HAL_OK)
 800061c:	4bb3      	ldr	r3, [pc, #716]	@ (80008ec <main+0x350>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10a      	bne.n	800063a <main+0x9e>
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom ok\n\r", 11, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	220b      	movs	r2, #11
 800062a:	49b1      	ldr	r1, [pc, #708]	@ (80008f0 <main+0x354>)
 800062c:	48ae      	ldr	r0, [pc, #696]	@ (80008e8 <main+0x34c>)
 800062e:	f008 fac6 	bl	8008bbe <HAL_UART_Transmit>
  	HAL_Delay(100);
 8000632:	2064      	movs	r0, #100	@ 0x64
 8000634:	f003 f8b6 	bl	80037a4 <HAL_Delay>
 8000638:	e009      	b.n	800064e <main+0xb2>
  }
  else
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom notok\n\r", 14, HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	220e      	movs	r2, #14
 8000640:	49ac      	ldr	r1, [pc, #688]	@ (80008f4 <main+0x358>)
 8000642:	48a9      	ldr	r0, [pc, #676]	@ (80008e8 <main+0x34c>)
 8000644:	f008 fabb 	bl	8008bbe <HAL_UART_Transmit>
  	HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	@ 0x64
 800064a:	f003 f8ab 	bl	80037a4 <HAL_Delay>
  }

  rtc_init(&hi2c1);
 800064e:	48aa      	ldr	r0, [pc, #680]	@ (80008f8 <main+0x35c>)
 8000650:	f001 fd04 	bl	800205c <rtc_init>

  	rtc_timedate_t timedate = {1, 1, 0, 1, 1, 01, 0xFF};
 8000654:	4aa9      	ldr	r2, [pc, #676]	@ (80008fc <main+0x360>)
 8000656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800065a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065e:	6018      	str	r0, [r3, #0]
 8000660:	3304      	adds	r3, #4
 8000662:	8019      	strh	r1, [r3, #0]
 8000664:	3302      	adds	r3, #2
 8000666:	0c0a      	lsrs	r2, r1, #16
 8000668:	701a      	strb	r2, [r3, #0]
      ret = rtc_settime(&timedate);
 800066a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fe84 	bl	800237c <rtc_settime>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b9c      	ldr	r3, [pc, #624]	@ (80008ec <main+0x350>)
 800067a:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f003 f891 	bl	80037a4 <HAL_Delay>
      if (ret == HAL_OK) {
 8000682:	4b9a      	ldr	r3, [pc, #616]	@ (80008ec <main+0x350>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <main+0xfe>
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2211      	movs	r2, #17
 8000690:	499b      	ldr	r1, [pc, #620]	@ (8000900 <main+0x364>)
 8000692:	4895      	ldr	r0, [pc, #596]	@ (80008e8 <main+0x34c>)
 8000694:	f008 fa93 	bl	8008bbe <HAL_UART_Transmit>
 8000698:	e006      	b.n	80006a8 <main+0x10c>
      } else {
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	2214      	movs	r2, #20
 80006a0:	4998      	ldr	r1, [pc, #608]	@ (8000904 <main+0x368>)
 80006a2:	4891      	ldr	r0, [pc, #580]	@ (80008e8 <main+0x34c>)
 80006a4:	f008 fa8b 	bl	8008bbe <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(mode)
 80006a8:	4b97      	ldr	r3, [pc, #604]	@ (8000908 <main+0x36c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d003      	beq.n	80006ba <main+0x11e>
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	f000 80bd 	beq.w	8000832 <main+0x296>
 80006b8:	e1d5      	b.n	8000a66 <main+0x4ca>

	  case 0:

		  // Check if this is the first entry into Mode 0
		  static uint8_t first_entry = 1;
		  if(first_entry)
 80006ba:	4b94      	ldr	r3, [pc, #592]	@ (800090c <main+0x370>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d035      	beq.n	800072e <main+0x192>
		  {
			  char config_buffer[RX_buffersize];
			            //eeprom_read_and_print_string(&huart3, 0x0000, (uint8_t*)config_buffer, pagesize);
			  if (eeprom_read_config(config_buffer, RX_buffersize) == HAL_OK) {
 80006c2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80006c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fc2e 	bl	8001f2c <eeprom_read_config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d121      	bne.n	800071a <main+0x17e>
			            	//if(eeprom_read(0x0000, (uint8_t*)config_buffer, 256)==HAL_OK)

				  HAL_UART_Transmit(&huart3, (uint8_t*)"Restoring: ", 11, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	220b      	movs	r2, #11
 80006dc:	498c      	ldr	r1, [pc, #560]	@ (8000910 <main+0x374>)
 80006de:	4882      	ldr	r0, [pc, #520]	@ (80008e8 <main+0x34c>)
 80006e0:	f008 fa6d 	bl	8008bbe <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t*)config_buffer, strlen(config_buffer), HAL_MAX_DELAY);
 80006e4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd71 	bl	80001d0 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	487b      	ldr	r0, [pc, #492]	@ (80008e8 <main+0x34c>)
 80006fc:	f008 fa5f 	bl	8008bbe <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2202      	movs	r2, #2
 8000706:	4983      	ldr	r1, [pc, #524]	@ (8000914 <main+0x378>)
 8000708:	4877      	ldr	r0, [pc, #476]	@ (80008e8 <main+0x34c>)
 800070a:	f008 fa58 	bl	8008bbe <HAL_UART_Transmit>
				  parse_and_print(config_buffer);
 800070e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000712:	4618      	mov	r0, r3
 8000714:	f002 f89a 	bl	800284c <parse_and_print>
 8000718:	e006      	b.n	8000728 <main+0x18c>
			  } else {
				  HAL_UART_Transmit(&huart3, (uint8_t*)"No config\n\r", 11, HAL_MAX_DELAY);
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	220b      	movs	r2, #11
 8000720:	497d      	ldr	r1, [pc, #500]	@ (8000918 <main+0x37c>)
 8000722:	4871      	ldr	r0, [pc, #452]	@ (80008e8 <main+0x34c>)
 8000724:	f008 fa4b 	bl	8008bbe <HAL_UART_Transmit>
			  }
			  first_entry = 0; // Only run this once when entering Mode 0
 8000728:	4b78      	ldr	r3, [pc, #480]	@ (800090c <main+0x370>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]



	  }*/

	  if (alarm_triggered_flag) {
 800072e:	4b7b      	ldr	r3, [pc, #492]	@ (800091c <main+0x380>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d05a      	beq.n	80007ee <main+0x252>
	              handle_recording();
 8000738:	f000 fca4 	bl	8001084 <handle_recording>

	              // Manage alarm queue (optional)
	              if (current_idx < alarm_count - 1) {
 800073c:	4b78      	ldr	r3, [pc, #480]	@ (8000920 <main+0x384>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b78      	ldr	r3, [pc, #480]	@ (8000924 <main+0x388>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3b01      	subs	r3, #1
 8000748:	429a      	cmp	r2, r3
 800074a:	da4c      	bge.n	80007e6 <main+0x24a>
	                  current_idx++;
 800074c:	4b74      	ldr	r3, [pc, #464]	@ (8000920 <main+0x384>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b72      	ldr	r3, [pc, #456]	@ (8000920 <main+0x384>)
 8000756:	701a      	strb	r2, [r3, #0]
	                  if (rtc_setalarm(&alarm_queue[current_idx]) == HAL_OK) {
 8000758:	4b71      	ldr	r3, [pc, #452]	@ (8000920 <main+0x384>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	4a70      	ldr	r2, [pc, #448]	@ (8000928 <main+0x38c>)
 8000766:	4413      	add	r3, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fedf 	bl	800252c <rtc_setalarm>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d131      	bne.n	80007d8 <main+0x23c>
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 8000774:	4b6a      	ldr	r3, [pc, #424]	@ (8000920 <main+0x384>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4a6b      	ldr	r2, [pc, #428]	@ (8000928 <main+0x38c>)
 800077c:	460b      	mov	r3, r1
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	1a5b      	subs	r3, r3, r1
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 8000786:	4618      	mov	r0, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 8000788:	4b65      	ldr	r3, [pc, #404]	@ (8000920 <main+0x384>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4a66      	ldr	r2, [pc, #408]	@ (8000928 <main+0x38c>)
 8000790:	460b      	mov	r3, r1
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	1a5b      	subs	r3, r3, r1
 8000796:	4413      	add	r3, r2
 8000798:	3301      	adds	r3, #1
 800079a:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 800079c:	461c      	mov	r4, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 800079e:	4b60      	ldr	r3, [pc, #384]	@ (8000920 <main+0x384>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4a60      	ldr	r2, [pc, #384]	@ (8000928 <main+0x38c>)
 80007a6:	460b      	mov	r3, r1
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a5b      	subs	r3, r3, r1
 80007ac:	4413      	add	r3, r2
 80007ae:	3302      	adds	r3, #2
 80007b0:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4623      	mov	r3, r4
 80007b6:	4602      	mov	r2, r0
 80007b8:	495c      	ldr	r1, [pc, #368]	@ (800092c <main+0x390>)
 80007ba:	485d      	ldr	r0, [pc, #372]	@ (8000930 <main+0x394>)
 80007bc:	f00d f99a 	bl	800daf4 <siprintf>
	                      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80007c0:	485b      	ldr	r0, [pc, #364]	@ (8000930 <main+0x394>)
 80007c2:	f7ff fd05 	bl	80001d0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	4958      	ldr	r1, [pc, #352]	@ (8000930 <main+0x394>)
 80007d0:	4845      	ldr	r0, [pc, #276]	@ (80008e8 <main+0x34c>)
 80007d2:	f008 f9f4 	bl	8008bbe <HAL_UART_Transmit>
 80007d6:	e006      	b.n	80007e6 <main+0x24a>
	                  } else {
	                      HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to set next alarm\n\r", 26, HAL_MAX_DELAY);
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	221a      	movs	r2, #26
 80007de:	4955      	ldr	r1, [pc, #340]	@ (8000934 <main+0x398>)
 80007e0:	4841      	ldr	r0, [pc, #260]	@ (80008e8 <main+0x34c>)
 80007e2:	f008 f9ec 	bl	8008bbe <HAL_UART_Transmit>
	                  }
	              }

	              alarm_triggered_flag = 0; // Clear the flag after handling
 80007e6:	4b4d      	ldr	r3, [pc, #308]	@ (800091c <main+0x380>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e006      	b.n	80007fc <main+0x260>
	          } else if (is_recording) {
 80007ee:	4b52      	ldr	r3, [pc, #328]	@ (8000938 <main+0x39c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <main+0x260>
	              // Continue checking save_frequency even if no new alarm
	              handle_recording();
 80007f8:	f000 fc44 	bl	8001084 <handle_recording>
	          }


	  ret = rtc_gettime(&timedate);
 80007fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fe1e 	bl	8002442 <rtc_gettime>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <main+0x350>)
 800080c:	701a      	strb	r2, [r3, #0]
	  if (ret == HAL_OK) {
 800080e:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <main+0x350>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d008      	beq.n	8000828 <main+0x28c>
		  sprintf(uart_buffer, "current time = %02d:%02d:%02d\n\r", timedate.hour, timedate.minute, timedate.second);
		  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
#endif
	  }
	  else {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time not ok\n\r", 21, HAL_MAX_DELAY);
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	2215      	movs	r2, #21
 800081c:	4947      	ldr	r1, [pc, #284]	@ (800093c <main+0x3a0>)
 800081e:	4832      	ldr	r0, [pc, #200]	@ (80008e8 <main+0x34c>)
 8000820:	f008 f9cd 	bl	8008bbe <HAL_UART_Transmit>
		  return 1;
 8000824:	2301      	movs	r3, #1
 8000826:	e12b      	b.n	8000a80 <main+0x4e4>
	  }
	  HAL_Delay(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082c:	f002 ffba 	bl	80037a4 <HAL_Delay>
	  break;
 8000830:	e125      	b.n	8000a7e <main+0x4e2>

	  case 1:
		  if(datarecived)
 8000832:	4b43      	ldr	r3, [pc, #268]	@ (8000940 <main+0x3a4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	f000 811f 	beq.w	8000a7c <main+0x4e0>
		  	  {
		  		  uint8_t eeprom_data[RX_buffersize];
		  		  senddata(rxbuffer, strlen(rxbuffer)); // Send received data
 800083e:	4829      	ldr	r0, [pc, #164]	@ (80008e4 <main+0x348>)
 8000840:	f7ff fcc6 	bl	80001d0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	4826      	ldr	r0, [pc, #152]	@ (80008e4 <main+0x348>)
 800084c:	f001 ff88 	bl	8002760 <senddata>

		  		  ret=eeprom_write(0x0000, (uint8_t*)&rxbuffer, strlen(rxbuffer)+1);
 8000850:	4824      	ldr	r0, [pc, #144]	@ (80008e4 <main+0x348>)
 8000852:	f7ff fcbd 	bl	80001d0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3301      	adds	r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	4920      	ldr	r1, [pc, #128]	@ (80008e4 <main+0x348>)
 8000862:	2000      	movs	r0, #0
 8000864:	f001 fa86 	bl	8001d74 <eeprom_write>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <main+0x350>)
 800086e:	701a      	strb	r2, [r3, #0]
		  		  if(ret==HAL_OK)
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <main+0x350>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d171      	bne.n	800095c <main+0x3c0>
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"write ok\n\r", 10, HAL_MAX_DELAY);
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	220a      	movs	r2, #10
 800087e:	4931      	ldr	r1, [pc, #196]	@ (8000944 <main+0x3a8>)
 8000880:	4819      	ldr	r0, [pc, #100]	@ (80008e8 <main+0x34c>)
 8000882:	f008 f99c 	bl	8008bbe <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	@ 0x64
 8000888:	f002 ff8c 	bl	80037a4 <HAL_Delay>

		  			  memset(eeprom_data, 0, pagesize);  // Clear the buffer
 800088c:	463b      	mov	r3, r7
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f00d f9f6 	bl	800dc84 <memset>

		  			  if (eeprom_read(0x0000, eeprom_data, pagesize) != NULL)
 8000898:	463b      	mov	r3, r7
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	4619      	mov	r1, r3
 800089e:	2000      	movs	r0, #0
 80008a0:	f001 fa92 	bl	8001dc8 <eeprom_read>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d050      	beq.n	800094c <main+0x3b0>
		  			  {
		  				  HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read OK: ", 16, HAL_MAX_DELAY);
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2210      	movs	r2, #16
 80008b0:	4925      	ldr	r1, [pc, #148]	@ (8000948 <main+0x3ac>)
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <main+0x34c>)
 80008b4:	f008 f983 	bl	8008bbe <HAL_UART_Transmit>
		  				  HAL_UART_Transmit(&huart3, eeprom_data, strlen((char*)eeprom_data), HAL_MAX_DELAY);
 80008b8:	463b      	mov	r3, r7
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fc88 	bl	80001d0 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4639      	mov	r1, r7
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	4807      	ldr	r0, [pc, #28]	@ (80008e8 <main+0x34c>)
 80008cc:	f008 f977 	bl	8008bbe <HAL_UART_Transmit>
		  				  HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	2202      	movs	r2, #2
 80008d6:	490f      	ldr	r1, [pc, #60]	@ (8000914 <main+0x378>)
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <main+0x34c>)
 80008da:	f008 f970 	bl	8008bbe <HAL_UART_Transmit>
 80008de:	e047      	b.n	8000970 <main+0x3d4>
 80008e0:	2000562c 	.word	0x2000562c
 80008e4:	2000552c 	.word	0x2000552c
 80008e8:	20000374 	.word	0x20000374
 80008ec:	200000b0 	.word	0x200000b0
 80008f0:	0800f5b4 	.word	0x0800f5b4
 80008f4:	0800f5c0 	.word	0x0800f5c0
 80008f8:	20000108 	.word	0x20000108
 80008fc:	0800f740 	.word	0x0800f740
 8000900:	0800f5d0 	.word	0x0800f5d0
 8000904:	0800f5e4 	.word	0x0800f5e4
 8000908:	20005462 	.word	0x20005462
 800090c:	2000001e 	.word	0x2000001e
 8000910:	0800f5fc 	.word	0x0800f5fc
 8000914:	0800f608 	.word	0x0800f608
 8000918:	0800f60c 	.word	0x0800f60c
 800091c:	20005460 	.word	0x20005460
 8000920:	2000552b 	.word	0x2000552b
 8000924:	2000552a 	.word	0x2000552a
 8000928:	200054c8 	.word	0x200054c8
 800092c:	0800f618 	.word	0x0800f618
 8000930:	20005638 	.word	0x20005638
 8000934:	0800f63c 	.word	0x0800f63c
 8000938:	20005461 	.word	0x20005461
 800093c:	0800f658 	.word	0x0800f658
 8000940:	2000562d 	.word	0x2000562d
 8000944:	0800f670 	.word	0x0800f670
 8000948:	0800f67c 	.word	0x0800f67c
		  			  }
		  			  else
		  			  {
		  				  HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed\n\r", 20, HAL_MAX_DELAY);
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	2214      	movs	r2, #20
 8000952:	494e      	ldr	r1, [pc, #312]	@ (8000a8c <main+0x4f0>)
 8000954:	484e      	ldr	r0, [pc, #312]	@ (8000a90 <main+0x4f4>)
 8000956:	f008 f932 	bl	8008bbe <HAL_UART_Transmit>
 800095a:	e009      	b.n	8000970 <main+0x3d4>
		  			  }

		  		  }
		  		  else
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"write notok\n\r", 13, HAL_MAX_DELAY);
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	220d      	movs	r2, #13
 8000962:	494c      	ldr	r1, [pc, #304]	@ (8000a94 <main+0x4f8>)
 8000964:	484a      	ldr	r0, [pc, #296]	@ (8000a90 <main+0x4f4>)
 8000966:	f008 f92a 	bl	8008bbe <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 800096a:	2064      	movs	r0, #100	@ 0x64
 800096c:	f002 ff1a 	bl	80037a4 <HAL_Delay>
		  		  }

		  		  char rxCopy[RX_buffersize];
		  		  strcpy(rxCopy, (char*)eeprom_data);
 8000970:	463a      	mov	r2, r7
 8000972:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f00d fa7c 	bl	800de76 <strcpy>


		  		  ret=rtc_gettime(&timedate);
 800097e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fd5d 	bl	8002442 <rtc_gettime>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b42      	ldr	r3, [pc, #264]	@ (8000a98 <main+0x4fc>)
 800098e:	701a      	strb	r2, [r3, #0]
		  		  if(ret==HAL_OK)
 8000990:	4b41      	ldr	r3, [pc, #260]	@ (8000a98 <main+0x4fc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d135      	bne.n	8000a04 <main+0x468>
		  		  {
		  			  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8000998:	f897 3200 	ldrb.w	r3, [r7, #512]	@ 0x200
 800099c:	461a      	mov	r2, r3
 800099e:	f897 3201 	ldrb.w	r3, [r7, #513]	@ 0x201
 80009a2:	4619      	mov	r1, r3
 80009a4:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	460b      	mov	r3, r1
 80009ac:	493b      	ldr	r1, [pc, #236]	@ (8000a9c <main+0x500>)
 80009ae:	483c      	ldr	r0, [pc, #240]	@ (8000aa0 <main+0x504>)
 80009b0:	f00d f8a0 	bl	800daf4 <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80009b4:	483a      	ldr	r0, [pc, #232]	@ (8000aa0 <main+0x504>)
 80009b6:	f7ff fc0b 	bl	80001d0 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	4937      	ldr	r1, [pc, #220]	@ (8000aa0 <main+0x504>)
 80009c4:	4832      	ldr	r0, [pc, #200]	@ (8000a90 <main+0x4f4>)
 80009c6:	f008 f8fa 	bl	8008bbe <HAL_UART_Transmit>
		  			  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 80009ca:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 80009ce:	461a      	mov	r2, r3
 80009d0:	f897 3204 	ldrb.w	r3, [r7, #516]	@ 0x204
 80009d4:	4619      	mov	r1, r3
 80009d6:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	460b      	mov	r3, r1
 80009de:	4931      	ldr	r1, [pc, #196]	@ (8000aa4 <main+0x508>)
 80009e0:	482f      	ldr	r0, [pc, #188]	@ (8000aa0 <main+0x504>)
 80009e2:	f00d f887 	bl	800daf4 <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80009e6:	482e      	ldr	r0, [pc, #184]	@ (8000aa0 <main+0x504>)
 80009e8:	f7ff fbf2 	bl	80001d0 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	492a      	ldr	r1, [pc, #168]	@ (8000aa0 <main+0x504>)
 80009f6:	4826      	ldr	r0, [pc, #152]	@ (8000a90 <main+0x4f4>)
 80009f8:	f008 f8e1 	bl	8008bbe <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	@ 0x64
 80009fe:	f002 fed1 	bl	80037a4 <HAL_Delay>
 8000a02:	e009      	b.n	8000a18 <main+0x47c>
		  		  }
		  		  else
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	2214      	movs	r2, #20
 8000a0a:	4927      	ldr	r1, [pc, #156]	@ (8000aa8 <main+0x50c>)
 8000a0c:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <main+0x4f4>)
 8000a0e:	f008 f8d6 	bl	8008bbe <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	@ 0x64
 8000a14:	f002 fec6 	bl	80037a4 <HAL_Delay>
		  		  }

		  		  parse_and_print((char*)rxCopy);
 8000a18:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 ff15 	bl	800284c <parse_and_print>
		  		  mode = 0; // Switch to Debug Mode after writing config
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <main+0x510>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, (uint8_t*)"Switching to Debug Mode\n\r", 25, HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	2219      	movs	r2, #25
 8000a2e:	4920      	ldr	r1, [pc, #128]	@ (8000ab0 <main+0x514>)
 8000a30:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <main+0x4f4>)
 8000a32:	f008 f8c4 	bl	8008bbe <HAL_UART_Transmit>


		  		  datarecived = 0;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <main+0x518>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		  		  rxindex = 0;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <main+0x51c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		  		  memset(rxbuffer, 0, RX_buffersize); // Clear buffer
 8000a42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a46:	2100      	movs	r1, #0
 8000a48:	481c      	ldr	r0, [pc, #112]	@ (8000abc <main+0x520>)
 8000a4a:	f00d f91b 	bl	800dc84 <memset>
		  		  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxbuffer[rxindex], 1);
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <main+0x51c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <main+0x520>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <main+0x4f4>)
 8000a60:	f008 f93f 	bl	8008ce2 <HAL_UART_Receive_IT>
		  	  }
		  break;
 8000a64:	e00a      	b.n	8000a7c <main+0x4e0>

	  default:
	          HAL_UART_Transmit(&huart3, (uint8_t*)"Invalid mode\n\r", 14, HAL_MAX_DELAY);
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	220e      	movs	r2, #14
 8000a6c:	4914      	ldr	r1, [pc, #80]	@ (8000ac0 <main+0x524>)
 8000a6e:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <main+0x4f4>)
 8000a70:	f008 f8a5 	bl	8008bbe <HAL_UART_Transmit>
	          mode = 1; // Reset to config mode if something goes wrong
 8000a74:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <main+0x510>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
	          break;
 8000a7a:	e000      	b.n	8000a7e <main+0x4e2>
		  break;
 8000a7c:	bf00      	nop
	  switch(mode)
 8000a7e:	e613      	b.n	80006a8 <main+0x10c>
		HAL_Delay(5000);
		break;
  }*/
  /* USER CODE END 3 */
}
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	0800f690 	.word	0x0800f690
 8000a90:	20000374 	.word	0x20000374
 8000a94:	0800f6a8 	.word	0x0800f6a8
 8000a98:	200000b0 	.word	0x200000b0
 8000a9c:	0800f6b8 	.word	0x0800f6b8
 8000aa0:	20005638 	.word	0x20005638
 8000aa4:	0800f6d8 	.word	0x0800f6d8
 8000aa8:	0800f6fc 	.word	0x0800f6fc
 8000aac:	20005462 	.word	0x20005462
 8000ab0:	0800f714 	.word	0x0800f714
 8000ab4:	2000562d 	.word	0x2000562d
 8000ab8:	2000562c 	.word	0x2000562c
 8000abc:	2000552c 	.word	0x2000552c
 8000ac0:	0800f730 	.word	0x0800f730

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	@ 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00d f8d6 	bl	800dc84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a27      	ldr	r2, [pc, #156]	@ (8000b90 <SystemClock_Config+0xcc>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <SystemClock_Config+0xcc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 8000b38:	23a5      	movs	r3, #165	@ 0xa5
 8000b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fa8b 	bl	8007064 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b54:	f001 f8f4 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2105      	movs	r1, #5
 8000b76:	4618      	mov	r0, r3
 8000b78:	f006 fcec 	bl	8007554 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b82:	f001 f8dd 	bl	8001d40 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	@ 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000baa:	2301      	movs	r3, #1
 8000bac:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000bae:	2332      	movs	r3, #50	@ 0x32
 8000bb0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 feeb 	bl	8007994 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000bc4:	f001 f8bc 	bl	8001d40 <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bd6:	4a13      	ldr	r2, [pc, #76]	@ (8000c24 <MX_I2C1_Init+0x54>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bdc:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <MX_I2C1_Init+0x58>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000c0e:	f003 fce7 	bl	80045e0 <HAL_I2C_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c18:	f001 f892 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000108 	.word	0x20000108
 8000c24:	40005400 	.word	0x40005400
 8000c28:	000186a0 	.word	0x000186a0

08000c2c <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	@ (8000c80 <MX_I2C2_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <MX_I2C2_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_I2C2_Init+0x50>)
 8000c6a:	f003 fcb9 	bl	80045e0 <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f001 f864 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000b4 	.word	0x200000b4
 8000c80:	40005800 	.word	0x40005800
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <MX_I2S2_Init+0x58>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000cae:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000cb2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_I2S2_Init+0x54>)
 8000cc8:	f005 f9ec 	bl	80060a4 <HAL_I2S_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000cd2:	f001 f835 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000015c 	.word	0x2000015c
 8000ce0:	40003800 	.word	0x40003800

08000ce4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000cea:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <MX_I2S3_Init+0x58>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8000cee:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000d0a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_I2S3_Init+0x54>)
 8000d24:	f005 f9be 	bl	80060a4 <HAL_I2S_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d2e:	f001 f807 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001a4 	.word	0x200001a4
 8000d3c:	40003c00 	.word	0x40003c00

08000d40 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d46:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <MX_SDIO_SD_Init+0x3c>)
 8000d48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d62:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <MX_SDIO_SD_Init+0x38>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	200002ac 	.word	0x200002ac
 8000d7c:	40012c00 	.word	0x40012c00

08000d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <MX_USART2_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db8:	f007 feb4 	bl	8008b24 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 ffbd 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000330 	.word	0x20000330
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <MX_USART3_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000de0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_USART3_UART_Init+0x4c>)
 8000e0c:	f007 fe8a 	bl	8008b24 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e16:	f000 ff93 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000374 	.word	0x20000374
 8000e24:	40004800 	.word	0x40004800

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_DMA_Init+0x4c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a0f      	ldr	r2, [pc, #60]	@ (8000e74 <MX_DMA_Init+0x4c>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <MX_DMA_Init+0x4c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f002 fda7 	bl	80039a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e54:	200b      	movs	r0, #11
 8000e56:	f002 fdc0 	bl	80039da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200e      	movs	r0, #14
 8000e60:	f002 fd9f 	bl	80039a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e64:	200e      	movs	r0, #14
 8000e66:	f002 fdb8 	bl	80039da <HAL_NVIC_EnableIRQ>

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	4b5e      	ldr	r3, [pc, #376]	@ (800100c <MX_GPIO_Init+0x194>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a5d      	ldr	r2, [pc, #372]	@ (800100c <MX_GPIO_Init+0x194>)
 8000e98:	f043 0310 	orr.w	r3, r3, #16
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	4b57      	ldr	r3, [pc, #348]	@ (800100c <MX_GPIO_Init+0x194>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a56      	ldr	r2, [pc, #344]	@ (800100c <MX_GPIO_Init+0x194>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b54      	ldr	r3, [pc, #336]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b50      	ldr	r3, [pc, #320]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a4f      	ldr	r2, [pc, #316]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b49      	ldr	r3, [pc, #292]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a48      	ldr	r2, [pc, #288]	@ (800100c <MX_GPIO_Init+0x194>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b46      	ldr	r3, [pc, #280]	@ (800100c <MX_GPIO_Init+0x194>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b42      	ldr	r3, [pc, #264]	@ (800100c <MX_GPIO_Init+0x194>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a41      	ldr	r2, [pc, #260]	@ (800100c <MX_GPIO_Init+0x194>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800100c <MX_GPIO_Init+0x194>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <MX_GPIO_Init+0x194>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a3a      	ldr	r2, [pc, #232]	@ (800100c <MX_GPIO_Init+0x194>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <MX_GPIO_Init+0x194>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2132      	movs	r1, #50	@ 0x32
 8000f3a:	4835      	ldr	r0, [pc, #212]	@ (8001010 <MX_GPIO_Init+0x198>)
 8000f3c:	f003 fb1e 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000f40:	2200      	movs	r2, #0
 8000f42:	f24b 0178 	movw	r1, #45176	@ 0xb078
 8000f46:	4833      	ldr	r0, [pc, #204]	@ (8001014 <MX_GPIO_Init+0x19c>)
 8000f48:	f003 fb18 	bl	800457c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000f52:	4831      	ldr	r0, [pc, #196]	@ (8001018 <MX_GPIO_Init+0x1a0>)
 8000f54:	f003 fb12 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4828      	ldr	r0, [pc, #160]	@ (8001010 <MX_GPIO_Init+0x198>)
 8000f6e:	f003 f951 	bl	8004214 <HAL_GPIO_Init>


  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8000f72:	2332      	movs	r3, #50	@ 0x32
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4821      	ldr	r0, [pc, #132]	@ (8001010 <MX_GPIO_Init+0x198>)
 8000f8a:	f003 f943 	bl	8004214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8000f8e:	f24b 0378 	movw	r3, #45176	@ 0xb078
 8000f92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481b      	ldr	r0, [pc, #108]	@ (8001014 <MX_GPIO_Init+0x19c>)
 8000fa8:	f003 f934 	bl	8004214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fac:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4814      	ldr	r0, [pc, #80]	@ (8001018 <MX_GPIO_Init+0x1a0>)
 8000fc6:	f003 f925 	bl	8004214 <HAL_GPIO_Init>



  /*Configure GPIO pin : PD0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]

  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd2:	623b      	str	r3, [r7, #32]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_GPIO_Init+0x19c>)
 8000fe0:	f003 f918 	bl	8004214 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2006      	movs	r0, #6
 8000fea:	f002 fcda 	bl	80039a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fee:	2006      	movs	r0, #6
 8000ff0:	f002 fcf3 	bl	80039da <HAL_NVIC_EnableIRQ>


    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2008      	movs	r0, #8
 8000ffa:	f002 fcd2 	bl	80039a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ffe:	2008      	movs	r0, #8
 8001000:	f002 fceb 	bl	80039da <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3730      	adds	r7, #48	@ 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40021000 	.word	0x40021000
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40020000 	.word	0x40020000

0800101c <I2C1_ClockConfig>:
			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
		  }
		  HAL_Delay(1000);
}

HAL_StatusTypeDef I2C1_ClockConfig(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    // Enable the clock for I2C1 (APB1 peripheral)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <I2C1_ClockConfig+0x58>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <I2C1_ClockConfig+0x58>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <I2C1_ClockConfig+0x58>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

    // Optional: Verify clock is enabled by checking the RCC register
    if (__HAL_RCC_I2C1_IS_CLK_ENABLED()) {
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <I2C1_ClockConfig+0x58>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d008      	beq.n	800105c <I2C1_ClockConfig+0x40>
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enabled\n\r", 20, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2214      	movs	r2, #20
 8001050:	4909      	ldr	r1, [pc, #36]	@ (8001078 <I2C1_ClockConfig+0x5c>)
 8001052:	480a      	ldr	r0, [pc, #40]	@ (800107c <I2C1_ClockConfig+0x60>)
 8001054:	f007 fdb3 	bl	8008bbe <HAL_UART_Transmit>
        return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e007      	b.n	800106c <I2C1_ClockConfig+0x50>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enable failed\n\r", 26, HAL_MAX_DELAY);
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	221a      	movs	r2, #26
 8001062:	4907      	ldr	r1, [pc, #28]	@ (8001080 <I2C1_ClockConfig+0x64>)
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <I2C1_ClockConfig+0x60>)
 8001066:	f007 fdaa 	bl	8008bbe <HAL_UART_Transmit>
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
    }
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	0800f748 	.word	0x0800f748
 800107c:	20000374 	.word	0x20000374
 8001080:	0800f760 	.word	0x0800f760

08001084 <handle_recording>:
        alarm_triggered_recording_control();
    }
}*/

void handle_recording(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    if (!is_recording) {
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <handle_recording+0x6c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d119      	bne.n	80010c6 <handle_recording+0x42>
        if (Start_Recording() == 0) {
 8001092:	f000 f883 	bl	800119c <Start_Recording>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10d      	bne.n	80010b8 <handle_recording+0x34>
            is_recording = 1;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <handle_recording+0x6c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
            save_frequency = 0; // Reset save_frequency to start fresh
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <handle_recording+0x70>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)"Recording started due to alarm\n\r", 32, HAL_MAX_DELAY);
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	2220      	movs	r2, #32
 80010ae:	4912      	ldr	r1, [pc, #72]	@ (80010f8 <handle_recording+0x74>)
 80010b0:	4812      	ldr	r0, [pc, #72]	@ (80010fc <handle_recording+0x78>)
 80010b2:	f007 fd84 	bl	8008bbe <HAL_UART_Transmit>
 80010b6:	e006      	b.n	80010c6 <handle_recording+0x42>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to start recording\n\r", 27, HAL_MAX_DELAY);
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	221b      	movs	r2, #27
 80010be:	4910      	ldr	r1, [pc, #64]	@ (8001100 <handle_recording+0x7c>)
 80010c0:	480e      	ldr	r0, [pc, #56]	@ (80010fc <handle_recording+0x78>)
 80010c2:	f007 fd7c 	bl	8008bbe <HAL_UART_Transmit>
        //sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
        //HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);


    // Check save_frequency condition
    if (is_recording && save_frequency >= 1880) {
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <handle_recording+0x6c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00c      	beq.n	80010ea <handle_recording+0x66>
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <handle_recording+0x70>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f5b3 6feb 	cmp.w	r3, #1880	@ 0x758
 80010d8:	db07      	blt.n	80010ea <handle_recording+0x66>
        stop_recording();
 80010da:	f000 fa0b 	bl	80014f4 <stop_recording>
        is_recording = 0;
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <handle_recording+0x6c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit(&huart3, (uint8_t*)"Recording stopped (save_frequency >= 1880)\n\r", 44, HAL_MAX_DELAY);
        HAL_Delay(100); // Safe in main loop context
 80010e4:	2064      	movs	r0, #100	@ 0x64
 80010e6:	f002 fb5d 	bl	80037a4 <HAL_Delay>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20005461 	.word	0x20005461
 80010f4:	20005458 	.word	0x20005458
 80010f8:	0800f77c 	.word	0x0800f77c
 80010fc:	20000374 	.word	0x20000374
 8001100:	0800f7a0 	.word	0x0800f7a0

08001104 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d111      	bne.n	8001138 <HAL_GPIO_EXTI_Callback+0x34>
        if (rtc_check_alarm_flag() == 1) {
 8001114:	f001 fac6 	bl	80026a4 <rtc_check_alarm_flag>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d12b      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x72>
            alarm_triggered_flag = 1; // Raise flag for main loop
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
            rtc_clearalarm();         // Clear the alarm flag
 8001124:	f001 fa9e 	bl	8002664 <rtc_clearalarm>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm interrupt triggered!\n\r", 28, HAL_MAX_DELAY);
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	221c      	movs	r2, #28
 800112e:	4915      	ldr	r1, [pc, #84]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x80>)
 8001130:	4815      	ldr	r0, [pc, #84]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x84>)
 8001132:	f007 fd44 	bl	8008bbe <HAL_UART_Transmit>
                mode = 0; // Ground (low)
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
            }
        }

}
 8001136:	e01e      	b.n	8001176 <HAL_GPIO_EXTI_Callback+0x72>
    else if (GPIO_Pin == GPIO_PIN_2) { // EXTI2 for PE2
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	2b04      	cmp	r3, #4
 800113c:	d11b      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x72>
            if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET) {
 800113e:	2104      	movs	r1, #4
 8001140:	4812      	ldr	r0, [pc, #72]	@ (800118c <HAL_GPIO_EXTI_Callback+0x88>)
 8001142:	f003 fa03 	bl	800454c <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10a      	bne.n	8001162 <HAL_GPIO_EXTI_Callback+0x5e>
                mode = 1; // VCC (high)
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x8c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 1\n\r", 28, HAL_MAX_DELAY);
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	221c      	movs	r2, #28
 8001158:	490e      	ldr	r1, [pc, #56]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x90>)
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x84>)
 800115c:	f007 fd2f 	bl	8008bbe <HAL_UART_Transmit>
}
 8001160:	e009      	b.n	8001176 <HAL_GPIO_EXTI_Callback+0x72>
                mode = 0; // Ground (low)
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	221c      	movs	r2, #28
 800116e:	490a      	ldr	r1, [pc, #40]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x94>)
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x84>)
 8001172:	f007 fd24 	bl	8008bbe <HAL_UART_Transmit>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20005460 	.word	0x20005460
 8001184:	0800f7bc 	.word	0x0800f7bc
 8001188:	20000374 	.word	0x20000374
 800118c:	40021000 	.word	0x40021000
 8001190:	20005462 	.word	0x20005462
 8001194:	0800f7dc 	.word	0x0800f7dc
 8001198:	0800f7f4 	.word	0x0800f7f4

0800119c <Start_Recording>:

	    }

}*/
int Start_Recording(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
    /********************************************************************************************************** SD card ***/
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // OE SD 1 and 2
 80011a2:	2201      	movs	r2, #1
 80011a4:	2108      	movs	r1, #8
 80011a6:	48ae      	ldr	r0, [pc, #696]	@ (8001460 <Start_Recording+0x2c4>)
 80011a8:	f003 f9e8 	bl	800457c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2110      	movs	r1, #16
 80011b0:	48ab      	ldr	r0, [pc, #684]	@ (8001460 <Start_Recording+0x2c4>)
 80011b2:	f003 f9e3 	bl	800457c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // OE SD 3 and 4
 80011b6:	2201      	movs	r2, #1
 80011b8:	2120      	movs	r1, #32
 80011ba:	48a9      	ldr	r0, [pc, #676]	@ (8001460 <Start_Recording+0x2c4>)
 80011bc:	f003 f9de 	bl	800457c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	48a6      	ldr	r0, [pc, #664]	@ (8001460 <Start_Recording+0x2c4>)
 80011c6:	f003 f9d9 	bl	800457c <HAL_GPIO_WritePin>

    /********************************************************************************************************** SD 1 ***/
    message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 80011ca:	49a6      	ldr	r1, [pc, #664]	@ (8001464 <Start_Recording+0x2c8>)
 80011cc:	48a6      	ldr	r0, [pc, #664]	@ (8001468 <Start_Recording+0x2cc>)
 80011ce:	f000 fd95 	bl	8001cfc <message>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // OE Pin pulled low SD 1 and 2
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	48a2      	ldr	r0, [pc, #648]	@ (8001460 <Start_Recording+0x2c4>)
 80011d8:	f003 f9d0 	bl	800457c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // SEL Pin pulled low SD 1
 80011dc:	2200      	movs	r2, #0
 80011de:	2110      	movs	r1, #16
 80011e0:	489f      	ldr	r0, [pc, #636]	@ (8001460 <Start_Recording+0x2c4>)
 80011e2:	f003 f9cb 	bl	800457c <HAL_GPIO_WritePin>

    message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 80011e6:	49a1      	ldr	r1, [pc, #644]	@ (800146c <Start_Recording+0x2d0>)
 80011e8:	489f      	ldr	r0, [pc, #636]	@ (8001468 <Start_Recording+0x2cc>)
 80011ea:	f000 fd87 	bl	8001cfc <message>

    fresult = f_mount(&fs_local, "/", 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	499f      	ldr	r1, [pc, #636]	@ (8001470 <Start_Recording+0x2d4>)
 80011f2:	48a0      	ldr	r0, [pc, #640]	@ (8001474 <Start_Recording+0x2d8>)
 80011f4:	f00b fa12 	bl	800c61c <f_mount>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b9e      	ldr	r3, [pc, #632]	@ (8001478 <Start_Recording+0x2dc>)
 80011fe:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8001200:	4b9d      	ldr	r3, [pc, #628]	@ (8001478 <Start_Recording+0x2dc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <Start_Recording+0x78>
        message("ERROR!!! in mounting SD CARD...\r\n");
 8001208:	489c      	ldr	r0, [pc, #624]	@ (800147c <Start_Recording+0x2e0>)
 800120a:	f000 fd77 	bl	8001cfc <message>
        return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e121      	b.n	8001458 <Start_Recording+0x2bc>
    }

    History_update();
 8001214:	f000 fb50 	bl	80018b8 <History_update>


    sprintf(File_name_1, "file_%d_1.wav", number);
 8001218:	4b99      	ldr	r3, [pc, #612]	@ (8001480 <Start_Recording+0x2e4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4999      	ldr	r1, [pc, #612]	@ (8001484 <Start_Recording+0x2e8>)
 8001220:	4899      	ldr	r0, [pc, #612]	@ (8001488 <Start_Recording+0x2ec>)
 8001222:	f00c fc67 	bl	800daf4 <siprintf>
    sprintf(File_name_2, "file_%d_2.wav", number);
 8001226:	4b96      	ldr	r3, [pc, #600]	@ (8001480 <Start_Recording+0x2e4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4997      	ldr	r1, [pc, #604]	@ (800148c <Start_Recording+0x2f0>)
 800122e:	4898      	ldr	r0, [pc, #608]	@ (8001490 <Start_Recording+0x2f4>)
 8001230:	f00c fc60 	bl	800daf4 <siprintf>

    fresult = f_stat(File_name_1, &fno_local);
 8001234:	4997      	ldr	r1, [pc, #604]	@ (8001494 <Start_Recording+0x2f8>)
 8001236:	4894      	ldr	r0, [pc, #592]	@ (8001488 <Start_Recording+0x2ec>)
 8001238:	f00c f9bd 	bl	800d5b6 <f_stat>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b8d      	ldr	r3, [pc, #564]	@ (8001478 <Start_Recording+0x2dc>)
 8001242:	701a      	strb	r2, [r3, #0]
    fresult = f_stat(File_name_2, &fno_local);
 8001244:	4993      	ldr	r1, [pc, #588]	@ (8001494 <Start_Recording+0x2f8>)
 8001246:	4892      	ldr	r0, [pc, #584]	@ (8001490 <Start_Recording+0x2f4>)
 8001248:	f00c f9b5 	bl	800d5b6 <f_stat>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b89      	ldr	r3, [pc, #548]	@ (8001478 <Start_Recording+0x2dc>)
 8001252:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 8001254:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <Start_Recording+0x2dc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <Start_Recording+0xce>
        message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n", "FILE1.txt");
 800125c:	498e      	ldr	r1, [pc, #568]	@ (8001498 <Start_Recording+0x2fc>)
 800125e:	488f      	ldr	r0, [pc, #572]	@ (800149c <Start_Recording+0x300>)
 8001260:	f000 fd4c 	bl	8001cfc <message>
        return -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	e0f6      	b.n	8001458 <Start_Recording+0x2bc>
    } else {
        fresult = f_open(&file_1, File_name_1, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 800126a:	220b      	movs	r2, #11
 800126c:	4986      	ldr	r1, [pc, #536]	@ (8001488 <Start_Recording+0x2ec>)
 800126e:	488c      	ldr	r0, [pc, #560]	@ (80014a0 <Start_Recording+0x304>)
 8001270:	f00b fa1a 	bl	800c6a8 <f_open>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <Start_Recording+0x2dc>)
 800127a:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 800127c:	4b7e      	ldr	r3, [pc, #504]	@ (8001478 <Start_Recording+0x2dc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <Start_Recording+0xfc>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 8001284:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <Start_Recording+0x2dc>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4a7f      	ldr	r2, [pc, #508]	@ (8001488 <Start_Recording+0x2ec>)
 800128a:	4619      	mov	r1, r3
 800128c:	4885      	ldr	r0, [pc, #532]	@ (80014a4 <Start_Recording+0x308>)
 800128e:	f000 fd35 	bl	8001cfc <message>
            return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e0df      	b.n	8001458 <Start_Recording+0x2bc>
        }
        fresult = f_open(&file_2, File_name_2, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001298:	220b      	movs	r2, #11
 800129a:	497d      	ldr	r1, [pc, #500]	@ (8001490 <Start_Recording+0x2f4>)
 800129c:	4882      	ldr	r0, [pc, #520]	@ (80014a8 <Start_Recording+0x30c>)
 800129e:	f00b fa03 	bl	800c6a8 <f_open>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b74      	ldr	r3, [pc, #464]	@ (8001478 <Start_Recording+0x2dc>)
 80012a8:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 80012aa:	4b73      	ldr	r3, [pc, #460]	@ (8001478 <Start_Recording+0x2dc>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Start_Recording+0x12a>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_2);
 80012b2:	4b71      	ldr	r3, [pc, #452]	@ (8001478 <Start_Recording+0x2dc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4a76      	ldr	r2, [pc, #472]	@ (8001490 <Start_Recording+0x2f4>)
 80012b8:	4619      	mov	r1, r3
 80012ba:	487a      	ldr	r0, [pc, #488]	@ (80014a4 <Start_Recording+0x308>)
 80012bc:	f000 fd1e 	bl	8001cfc <message>
            return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e0c8      	b.n	8001458 <Start_Recording+0x2bc>
        }
        fresult = f_close(&file_1);
 80012c6:	4876      	ldr	r0, [pc, #472]	@ (80014a0 <Start_Recording+0x304>)
 80012c8:	f00b ff27 	bl	800d11a <f_close>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <Start_Recording+0x2dc>)
 80012d2:	701a      	strb	r2, [r3, #0]
        fresult = f_close(&file_2);
 80012d4:	4874      	ldr	r0, [pc, #464]	@ (80014a8 <Start_Recording+0x30c>)
 80012d6:	f00b ff20 	bl	800d11a <f_close>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b66      	ldr	r3, [pc, #408]	@ (8001478 <Start_Recording+0x2dc>)
 80012e0:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult, File_name_1);
 80012e2:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <Start_Recording+0x2dc>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <Start_Recording+0x15c>
 80012ea:	4b63      	ldr	r3, [pc, #396]	@ (8001478 <Start_Recording+0x2dc>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4a66      	ldr	r2, [pc, #408]	@ (8001488 <Start_Recording+0x2ec>)
 80012f0:	4619      	mov	r1, r3
 80012f2:	486e      	ldr	r0, [pc, #440]	@ (80014ac <Start_Recording+0x310>)
 80012f4:	f000 fd02 	bl	8001cfc <message>
    }

    f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 80012f8:	2232      	movs	r2, #50	@ 0x32
 80012fa:	4963      	ldr	r1, [pc, #396]	@ (8001488 <Start_Recording+0x2ec>)
 80012fc:	4868      	ldr	r0, [pc, #416]	@ (80014a0 <Start_Recording+0x304>)
 80012fe:	f00b f9d3 	bl	800c6a8 <f_open>
    f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 8001302:	2232      	movs	r2, #50	@ 0x32
 8001304:	4962      	ldr	r1, [pc, #392]	@ (8001490 <Start_Recording+0x2f4>)
 8001306:	4868      	ldr	r0, [pc, #416]	@ (80014a8 <Start_Recording+0x30c>)
 8001308:	f00b f9ce 	bl	800c6a8 <f_open>

    //read_and_print_registers();

    WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800130c:	4968      	ldr	r1, [pc, #416]	@ (80014b0 <Start_Recording+0x314>)
 800130e:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8001312:	f000 fb91 	bl	8001a38 <WavProcess_EncInit>
    f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 8001316:	4b67      	ldr	r3, [pc, #412]	@ (80014b4 <Start_Recording+0x318>)
 8001318:	222c      	movs	r2, #44	@ 0x2c
 800131a:	4965      	ldr	r1, [pc, #404]	@ (80014b0 <Start_Recording+0x314>)
 800131c:	4860      	ldr	r0, [pc, #384]	@ (80014a0 <Start_Recording+0x304>)
 800131e:	f00b fcea 	bl	800ccf6 <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 8001322:	4b64      	ldr	r3, [pc, #400]	@ (80014b4 <Start_Recording+0x318>)
 8001324:	222c      	movs	r2, #44	@ 0x2c
 8001326:	4962      	ldr	r1, [pc, #392]	@ (80014b0 <Start_Recording+0x314>)
 8001328:	485f      	ldr	r0, [pc, #380]	@ (80014a8 <Start_Recording+0x30c>)
 800132a:	f00b fce4 	bl	800ccf6 <f_write>

    memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 800132e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001332:	2100      	movs	r1, #0
 8001334:	4860      	ldr	r0, [pc, #384]	@ (80014b8 <Start_Recording+0x31c>)
 8001336:	f00c fca5 	bl	800dc84 <memset>
    memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 800133a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800133e:	2100      	movs	r1, #0
 8001340:	485e      	ldr	r0, [pc, #376]	@ (80014bc <Start_Recording+0x320>)
 8001342:	f00c fc9f 	bl	800dc84 <memset>

    message("Message: %s\r\n", "________________ Recording Started _____________\r\n");
 8001346:	495e      	ldr	r1, [pc, #376]	@ (80014c0 <Start_Recording+0x324>)
 8001348:	4847      	ldr	r0, [pc, #284]	@ (8001468 <Start_Recording+0x2cc>)
 800134a:	f000 fcd7 	bl	8001cfc <message>

    // Stop any ongoing DMA
    HAL_I2S_DMAStop(&hi2s2);
 800134e:	485d      	ldr	r0, [pc, #372]	@ (80014c4 <Start_Recording+0x328>)
 8001350:	f005 f8a4 	bl	800649c <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001354:	485c      	ldr	r0, [pc, #368]	@ (80014c8 <Start_Recording+0x32c>)
 8001356:	f005 f8a1 	bl	800649c <HAL_I2S_DMAStop>

    // Check I2S state before starting
    HAL_I2S_StateTypeDef i2s2_state = HAL_I2S_GetState(&hi2s2);
 800135a:	485a      	ldr	r0, [pc, #360]	@ (80014c4 <Start_Recording+0x328>)
 800135c:	f005 fa98 	bl	8006890 <HAL_I2S_GetState>
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
    HAL_I2S_StateTypeDef i2s3_state = HAL_I2S_GetState(&hi2s3);
 8001364:	4858      	ldr	r0, [pc, #352]	@ (80014c8 <Start_Recording+0x32c>)
 8001366:	f005 fa93 	bl	8006890 <HAL_I2S_GetState>
 800136a:	4603      	mov	r3, r0
 800136c:	71bb      	strb	r3, [r7, #6]
    sprintf(uart_buffer, "I2S2 State before start: %d\n\r", i2s2_state);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	461a      	mov	r2, r3
 8001372:	4956      	ldr	r1, [pc, #344]	@ (80014cc <Start_Recording+0x330>)
 8001374:	4856      	ldr	r0, [pc, #344]	@ (80014d0 <Start_Recording+0x334>)
 8001376:	f00c fbbd 	bl	800daf4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800137a:	4855      	ldr	r0, [pc, #340]	@ (80014d0 <Start_Recording+0x334>)
 800137c:	f7fe ff28 	bl	80001d0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	4951      	ldr	r1, [pc, #324]	@ (80014d0 <Start_Recording+0x334>)
 800138a:	4852      	ldr	r0, [pc, #328]	@ (80014d4 <Start_Recording+0x338>)
 800138c:	f007 fc17 	bl	8008bbe <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State before start: %d\n\r", i2s3_state);
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	461a      	mov	r2, r3
 8001394:	4950      	ldr	r1, [pc, #320]	@ (80014d8 <Start_Recording+0x33c>)
 8001396:	484e      	ldr	r0, [pc, #312]	@ (80014d0 <Start_Recording+0x334>)
 8001398:	f00c fbac 	bl	800daf4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800139c:	484c      	ldr	r0, [pc, #304]	@ (80014d0 <Start_Recording+0x334>)
 800139e:	f7fe ff17 	bl	80001d0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	4949      	ldr	r1, [pc, #292]	@ (80014d0 <Start_Recording+0x334>)
 80013ac:	4849      	ldr	r0, [pc, #292]	@ (80014d4 <Start_Recording+0x338>)
 80013ae:	f007 fc06 	bl	8008bbe <HAL_UART_Transmit>

    // Start I2S DMA
    if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80013b2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013b6:	4940      	ldr	r1, [pc, #256]	@ (80014b8 <Start_Recording+0x31c>)
 80013b8:	4842      	ldr	r0, [pc, #264]	@ (80014c4 <Start_Recording+0x328>)
 80013ba:	f004 ffb3 	bl	8006324 <HAL_I2S_Receive_DMA>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01c      	beq.n	80013fe <Start_Recording+0x262>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S2 !!!!__!!__\r\n");
 80013c4:	4945      	ldr	r1, [pc, #276]	@ (80014dc <Start_Recording+0x340>)
 80013c6:	4828      	ldr	r0, [pc, #160]	@ (8001468 <Start_Recording+0x2cc>)
 80013c8:	f000 fc98 	bl	8001cfc <message>
        sprintf(uart_buffer, "I2S2 Error: %d\n\r", HAL_I2S_GetError(&hi2s2));
 80013cc:	483d      	ldr	r0, [pc, #244]	@ (80014c4 <Start_Recording+0x328>)
 80013ce:	f005 fa6d 	bl	80068ac <HAL_I2S_GetError>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4942      	ldr	r1, [pc, #264]	@ (80014e0 <Start_Recording+0x344>)
 80013d8:	483d      	ldr	r0, [pc, #244]	@ (80014d0 <Start_Recording+0x334>)
 80013da:	f00c fb8b 	bl	800daf4 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013de:	483c      	ldr	r0, [pc, #240]	@ (80014d0 <Start_Recording+0x334>)
 80013e0:	f7fe fef6 	bl	80001d0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	4938      	ldr	r1, [pc, #224]	@ (80014d0 <Start_Recording+0x334>)
 80013ee:	4839      	ldr	r0, [pc, #228]	@ (80014d4 <Start_Recording+0x338>)
 80013f0:	f007 fbe5 	bl	8008bbe <HAL_UART_Transmit>
        Error_Handler();
 80013f4:	f000 fca4 	bl	8001d40 <Error_Handler>
        return -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	e02c      	b.n	8001458 <Start_Recording+0x2bc>
    }
    if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80013fe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001402:	492e      	ldr	r1, [pc, #184]	@ (80014bc <Start_Recording+0x320>)
 8001404:	4830      	ldr	r0, [pc, #192]	@ (80014c8 <Start_Recording+0x32c>)
 8001406:	f004 ff8d 	bl	8006324 <HAL_I2S_Receive_DMA>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01c      	beq.n	800144a <Start_Recording+0x2ae>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S3 !!!!__!!__\r\n");
 8001410:	4934      	ldr	r1, [pc, #208]	@ (80014e4 <Start_Recording+0x348>)
 8001412:	4815      	ldr	r0, [pc, #84]	@ (8001468 <Start_Recording+0x2cc>)
 8001414:	f000 fc72 	bl	8001cfc <message>
        sprintf(uart_buffer, "I2S3 Error: %d\n\r", HAL_I2S_GetError(&hi2s3));
 8001418:	482b      	ldr	r0, [pc, #172]	@ (80014c8 <Start_Recording+0x32c>)
 800141a:	f005 fa47 	bl	80068ac <HAL_I2S_GetError>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4931      	ldr	r1, [pc, #196]	@ (80014e8 <Start_Recording+0x34c>)
 8001424:	482a      	ldr	r0, [pc, #168]	@ (80014d0 <Start_Recording+0x334>)
 8001426:	f00c fb65 	bl	800daf4 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800142a:	4829      	ldr	r0, [pc, #164]	@ (80014d0 <Start_Recording+0x334>)
 800142c:	f7fe fed0 	bl	80001d0 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	4925      	ldr	r1, [pc, #148]	@ (80014d0 <Start_Recording+0x334>)
 800143a:	4826      	ldr	r0, [pc, #152]	@ (80014d4 <Start_Recording+0x338>)
 800143c:	f007 fbbf 	bl	8008bbe <HAL_UART_Transmit>
        Error_Handler();
 8001440:	f000 fc7e 	bl	8001d40 <Error_Handler>
        return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	e006      	b.n	8001458 <Start_Recording+0x2bc>
    sprintf(uart_buffer, "I2S2 State after start: %d\n\r", HAL_I2S_GetState(&hi2s2));
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
    sprintf(uart_buffer, "I2S3 State after start: %d\n\r", HAL_I2S_GetState(&hi2s3));
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);\
    */
    stop_saving = 0;  // Reset stop_saving for callbacks
 800144a:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <Start_Recording+0x350>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
    BufferCtl.fptr = 0;  // Reset file pointer
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <Start_Recording+0x354>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]

    return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40020c00 	.word	0x40020c00
 8001464:	0800f80c 	.word	0x0800f80c
 8001468:	0800f844 	.word	0x0800f844
 800146c:	0800f854 	.word	0x0800f854
 8001470:	0800f8a8 	.word	0x0800f8a8
 8001474:	20000420 	.word	0x20000420
 8001478:	200000a4 	.word	0x200000a4
 800147c:	0800f8ac 	.word	0x0800f8ac
 8001480:	2000041c 	.word	0x2000041c
 8001484:	0800f8d0 	.word	0x0800f8d0
 8001488:	200034d8 	.word	0x200034d8
 800148c:	0800f8e0 	.word	0x0800f8e0
 8001490:	200034f8 	.word	0x200034f8
 8001494:	200034b8 	.word	0x200034b8
 8001498:	0800f8f0 	.word	0x0800f8f0
 800149c:	0800f8fc 	.word	0x0800f8fc
 80014a0:	20001454 	.word	0x20001454
 80014a4:	0800f934 	.word	0x0800f934
 80014a8:	20002484 	.word	0x20002484
 80014ac:	0800f95c 	.word	0x0800f95c
 80014b0:	2000549c 	.word	0x2000549c
 80014b4:	20005498 	.word	0x20005498
 80014b8:	200044b8 	.word	0x200044b8
 80014bc:	20003518 	.word	0x20003518
 80014c0:	0800f980 	.word	0x0800f980
 80014c4:	2000015c 	.word	0x2000015c
 80014c8:	200001a4 	.word	0x200001a4
 80014cc:	0800f9b4 	.word	0x0800f9b4
 80014d0:	20005638 	.word	0x20005638
 80014d4:	20000374 	.word	0x20000374
 80014d8:	0800f9d4 	.word	0x0800f9d4
 80014dc:	0800f9f4 	.word	0x0800f9f4
 80014e0:	0800fa30 	.word	0x0800fa30
 80014e4:	0800fa44 	.word	0x0800fa44
 80014e8:	0800fa80 	.word	0x0800fa80
 80014ec:	2000545c 	.word	0x2000545c
 80014f0:	20005490 	.word	0x20005490

080014f4 <stop_recording>:
int stop_recording(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    HAL_I2S_DMAStop(&hi2s2);
 80014f8:	4836      	ldr	r0, [pc, #216]	@ (80015d4 <stop_recording+0xe0>)
 80014fa:	f004 ffcf 	bl	800649c <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 80014fe:	4836      	ldr	r0, [pc, #216]	@ (80015d8 <stop_recording+0xe4>)
 8001500:	f004 ffcc 	bl	800649c <HAL_I2S_DMAStop>

    // Debug I2S state after stopping
    sprintf(uart_buffer, "I2S2 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s2));
 8001504:	4833      	ldr	r0, [pc, #204]	@ (80015d4 <stop_recording+0xe0>)
 8001506:	f005 f9c3 	bl	8006890 <HAL_I2S_GetState>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4933      	ldr	r1, [pc, #204]	@ (80015dc <stop_recording+0xe8>)
 8001510:	4833      	ldr	r0, [pc, #204]	@ (80015e0 <stop_recording+0xec>)
 8001512:	f00c faef 	bl	800daf4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001516:	4832      	ldr	r0, [pc, #200]	@ (80015e0 <stop_recording+0xec>)
 8001518:	f7fe fe5a 	bl	80001d0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	492e      	ldr	r1, [pc, #184]	@ (80015e0 <stop_recording+0xec>)
 8001526:	482f      	ldr	r0, [pc, #188]	@ (80015e4 <stop_recording+0xf0>)
 8001528:	f007 fb49 	bl	8008bbe <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s3));
 800152c:	482a      	ldr	r0, [pc, #168]	@ (80015d8 <stop_recording+0xe4>)
 800152e:	f005 f9af 	bl	8006890 <HAL_I2S_GetState>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	492c      	ldr	r1, [pc, #176]	@ (80015e8 <stop_recording+0xf4>)
 8001538:	4829      	ldr	r0, [pc, #164]	@ (80015e0 <stop_recording+0xec>)
 800153a:	f00c fadb 	bl	800daf4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800153e:	4828      	ldr	r0, [pc, #160]	@ (80015e0 <stop_recording+0xec>)
 8001540:	f7fe fe46 	bl	80001d0 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4924      	ldr	r1, [pc, #144]	@ (80015e0 <stop_recording+0xec>)
 800154e:	4825      	ldr	r0, [pc, #148]	@ (80015e4 <stop_recording+0xf0>)
 8001550:	f007 fb35 	bl	8008bbe <HAL_UART_Transmit>

    //read_and_print_registers();

    // Update WAV headers
    f_lseek(&file_1, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	4825      	ldr	r0, [pc, #148]	@ (80015ec <stop_recording+0xf8>)
 8001558:	f00b fe09 	bl	800d16e <f_lseek>
    f_lseek(&file_2, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <stop_recording+0xfc>)
 8001560:	f00b fe05 	bl	800d16e <f_lseek>
    WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8001564:	4923      	ldr	r1, [pc, #140]	@ (80015f4 <stop_recording+0x100>)
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <stop_recording+0x104>)
 8001568:	f000 fb7e 	bl	8001c68 <WavProcess_HeaderUpdate>
    f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <stop_recording+0x108>)
 800156e:	222c      	movs	r2, #44	@ 0x2c
 8001570:	4921      	ldr	r1, [pc, #132]	@ (80015f8 <stop_recording+0x104>)
 8001572:	481e      	ldr	r0, [pc, #120]	@ (80015ec <stop_recording+0xf8>)
 8001574:	f00b fbbf 	bl	800ccf6 <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <stop_recording+0x108>)
 800157a:	222c      	movs	r2, #44	@ 0x2c
 800157c:	491e      	ldr	r1, [pc, #120]	@ (80015f8 <stop_recording+0x104>)
 800157e:	481c      	ldr	r0, [pc, #112]	@ (80015f0 <stop_recording+0xfc>)
 8001580:	f00b fbb9 	bl	800ccf6 <f_write>

    f_close(&file_1);
 8001584:	4819      	ldr	r0, [pc, #100]	@ (80015ec <stop_recording+0xf8>)
 8001586:	f00b fdc8 	bl	800d11a <f_close>
    f_close(&file_2);
 800158a:	4819      	ldr	r0, [pc, #100]	@ (80015f0 <stop_recording+0xfc>)
 800158c:	f00b fdc5 	bl	800d11a <f_close>

    fresult = f_mount(NULL, "/", 1);
 8001590:	2201      	movs	r2, #1
 8001592:	491b      	ldr	r1, [pc, #108]	@ (8001600 <stop_recording+0x10c>)
 8001594:	2000      	movs	r0, #0
 8001596:	f00b f841 	bl	800c61c <f_mount>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <stop_recording+0x110>)
 80015a0:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <stop_recording+0x110>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <stop_recording+0xc2>
        message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 80015aa:	4817      	ldr	r0, [pc, #92]	@ (8001608 <stop_recording+0x114>)
 80015ac:	f000 fba6 	bl	8001cfc <message>
        return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	e00c      	b.n	80015d0 <stop_recording+0xdc>
    }

    message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 80015b6:	4815      	ldr	r0, [pc, #84]	@ (800160c <stop_recording+0x118>)
 80015b8:	f000 fba0 	bl	8001cfc <message>

    stop_saving = 1;  // Moved after file operations
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <stop_recording+0x11c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    save_frequency = 0;  // Reset here is fine, but handle_recording resets it too
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <stop_recording+0x120>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

    HAL_Delay(200);  // Reduced delay, adjust if needed
 80015c8:	20c8      	movs	r0, #200	@ 0xc8
 80015ca:	f002 f8eb 	bl	80037a4 <HAL_Delay>

    return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000015c 	.word	0x2000015c
 80015d8:	200001a4 	.word	0x200001a4
 80015dc:	0800fa94 	.word	0x0800fa94
 80015e0:	20005638 	.word	0x20005638
 80015e4:	20000374 	.word	0x20000374
 80015e8:	0800fab0 	.word	0x0800fab0
 80015ec:	20001454 	.word	0x20001454
 80015f0:	20002484 	.word	0x20002484
 80015f4:	20005464 	.word	0x20005464
 80015f8:	2000549c 	.word	0x2000549c
 80015fc:	20005498 	.word	0x20005498
 8001600:	0800f8a8 	.word	0x0800f8a8
 8001604:	200000a4 	.word	0x200000a4
 8001608:	0800facc 	.word	0x0800facc
 800160c:	0800faf0 	.word	0x0800faf0
 8001610:	2000545c 	.word	0x2000545c
 8001614:	20005458 	.word	0x20005458

08001618 <HAL_I2S_RxCpltCallback>:
// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_I2S_RxCpltCallback+0x74>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d12d      	bne.n	8001684 <HAL_I2S_RxCpltCallback+0x6c>
	    if (hi2s->Instance == SPI2) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a18      	ldr	r2, [pc, #96]	@ (8001690 <HAL_I2S_RxCpltCallback+0x78>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10b      	bne.n	800164a <HAL_I2S_RxCpltCallback+0x32>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_I2S_RxCpltCallback+0x7c>)
 8001634:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001638:	4917      	ldr	r1, [pc, #92]	@ (8001698 <HAL_I2S_RxCpltCallback+0x80>)
 800163a:	4818      	ldr	r0, [pc, #96]	@ (800169c <HAL_I2S_RxCpltCallback+0x84>)
 800163c:	f00b fb5b 	bl	800ccf6 <f_write>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2S_RxCpltCallback+0x32>
				Error_Handler();  // File write failed
 8001646:	f000 fb7b 	bl	8001d40 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a14      	ldr	r2, [pc, #80]	@ (80016a0 <HAL_I2S_RxCpltCallback+0x88>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d10b      	bne.n	800166c <HAL_I2S_RxCpltCallback+0x54>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_I2S_RxCpltCallback+0x8c>)
 8001656:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800165a:	4913      	ldr	r1, [pc, #76]	@ (80016a8 <HAL_I2S_RxCpltCallback+0x90>)
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <HAL_I2S_RxCpltCallback+0x94>)
 800165e:	f00b fb4a 	bl	800ccf6 <f_write>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2S_RxCpltCallback+0x54>
				Error_Handler();  // File write failed
 8001668:	f000 fb6a 	bl	8001d40 <Error_Handler>
			}
		}
	    save_frequency ++;
 800166c:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <HAL_I2S_RxCpltCallback+0x98>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <HAL_I2S_RxCpltCallback+0x98>)
 8001674:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_I2S_RxCpltCallback+0x9c>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_I2S_RxCpltCallback+0x7c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a0c      	ldr	r2, [pc, #48]	@ (80016b4 <HAL_I2S_RxCpltCallback+0x9c>)
 8001682:	6053      	str	r3, [r2, #4]
	                sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
	                HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
	            }*/

	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000545c 	.word	0x2000545c
 8001690:	40003800 	.word	0x40003800
 8001694:	200034d0 	.word	0x200034d0
 8001698:	20004c88 	.word	0x20004c88
 800169c:	20001454 	.word	0x20001454
 80016a0:	40003c00 	.word	0x40003c00
 80016a4:	200034d4 	.word	0x200034d4
 80016a8:	20003ce8 	.word	0x20003ce8
 80016ac:	20002484 	.word	0x20002484
 80016b0:	20005458 	.word	0x20005458
 80016b4:	20005490 	.word	0x20005490

080016b8 <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d121      	bne.n	800170c <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <HAL_I2S_RxHalfCpltCallback+0x60>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10b      	bne.n	80016ea <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_I2S_RxHalfCpltCallback+0x64>)
 80016d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80016d8:	4911      	ldr	r1, [pc, #68]	@ (8001720 <HAL_I2S_RxHalfCpltCallback+0x68>)
 80016da:	4812      	ldr	r0, [pc, #72]	@ (8001724 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 80016dc:	f00b fb0b 	bl	800ccf6 <f_write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 80016e6:	f000 fb2b 	bl	8001d40 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <HAL_I2S_RxHalfCpltCallback+0x70>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d10b      	bne.n	800170c <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_I2S_RxHalfCpltCallback+0x74>)
 80016f6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <HAL_I2S_RxHalfCpltCallback+0x78>)
 80016fc:	480d      	ldr	r0, [pc, #52]	@ (8001734 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 80016fe:	f00b fafa 	bl	800ccf6 <f_write>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 8001708:	f000 fb1a 	bl	8001d40 <Error_Handler>
	    	}
	    }
	}

}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000545c 	.word	0x2000545c
 8001718:	40003800 	.word	0x40003800
 800171c:	200034d0 	.word	0x200034d0
 8001720:	200044b8 	.word	0x200044b8
 8001724:	20001454 	.word	0x20001454
 8001728:	40003c00 	.word	0x40003c00
 800172c:	200034d4 	.word	0x200034d4
 8001730:	20003518 	.word	0x20003518
 8001734:	20002484 	.word	0x20002484

08001738 <configure_codec>:

void configure_codec() {
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 800173e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001742:	2205      	movs	r2, #5
 8001744:	21e2      	movs	r1, #226	@ 0xe2
 8001746:	482e      	ldr	r0, [pc, #184]	@ (8001800 <configure_codec+0xc8>)
 8001748:	f003 fed2 	bl	80054f0 <HAL_I2C_IsDeviceReady>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 8001752:	492c      	ldr	r1, [pc, #176]	@ (8001804 <configure_codec+0xcc>)
 8001754:	482c      	ldr	r0, [pc, #176]	@ (8001808 <configure_codec+0xd0>)
 8001756:	f000 fad1 	bl	8001cfc <message>
    }
    HAL_Delay(500);
 800175a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800175e:	f002 f821 	bl	80037a4 <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	e023      	b.n	80017b0 <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 8001768:	4a28      	ldr	r2, [pc, #160]	@ (800180c <configure_codec+0xd4>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 8001774:	4a25      	ldr	r2, [pc, #148]	@ (800180c <configure_codec+0xd4>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800177c:	461a      	mov	r2, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	1cfb      	adds	r3, r7, #3
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	21e2      	movs	r1, #226	@ 0xe2
 8001790:	481b      	ldr	r0, [pc, #108]	@ (8001800 <configure_codec+0xc8>)
 8001792:	f003 fb8d 	bl	8004eb0 <HAL_I2C_Mem_Write>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 800179c:	491c      	ldr	r1, [pc, #112]	@ (8001810 <configure_codec+0xd8>)
 800179e:	481a      	ldr	r0, [pc, #104]	@ (8001808 <configure_codec+0xd0>)
 80017a0:	f000 faac 	bl	8001cfc <message>
        }
        HAL_Delay(100);
 80017a4:	2064      	movs	r0, #100	@ 0x64
 80017a6:	f001 fffd 	bl	80037a4 <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3301      	adds	r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b0e      	cmp	r3, #14
 80017b4:	d9d8      	bls.n	8001768 <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2301      	movs	r3, #1
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	1cbb      	adds	r3, r7, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	2206      	movs	r2, #6
 80017c8:	21e2      	movs	r1, #226	@ 0xe2
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <configure_codec+0xc8>)
 80017cc:	f003 fc6a 	bl	80050a4 <HAL_I2C_Mem_Read>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10b      	bne.n	80017ee <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <configure_codec+0xdc>)
 80017de:	f002 fecd 	bl	800457c <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f001 ffdc 	bl	80037a4 <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 80017ec:	e003      	b.n	80017f6 <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 80017ee:	490a      	ldr	r1, [pc, #40]	@ (8001818 <configure_codec+0xe0>)
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <configure_codec+0xd0>)
 80017f2:	f000 fa83 	bl	8001cfc <message>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200000b4 	.word	0x200000b4
 8001804:	0800fb24 	.word	0x0800fb24
 8001808:	0800f844 	.word	0x0800f844
 800180c:	20000000 	.word	0x20000000
 8001810:	0800fb50 	.word	0x0800fb50
 8001814:	40020c00 	.word	0x40020c00
 8001818:	0800fb7c 	.word	0x0800fb7c

0800181c <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 8001820:	4910      	ldr	r1, [pc, #64]	@ (8001864 <CODEC_RST+0x48>)
 8001822:	4811      	ldr	r0, [pc, #68]	@ (8001868 <CODEC_RST+0x4c>)
 8001824:	f000 fa6a 	bl	8001cfc <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 8001828:	2201      	movs	r2, #1
 800182a:	2102      	movs	r1, #2
 800182c:	480f      	ldr	r0, [pc, #60]	@ (800186c <CODEC_RST+0x50>)
 800182e:	f002 fea5 	bl	800457c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001832:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001836:	f001 ffb5 	bl	80037a4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2102      	movs	r1, #2
 800183e:	480b      	ldr	r0, [pc, #44]	@ (800186c <CODEC_RST+0x50>)
 8001840:	f002 fe9c 	bl	800457c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001848:	f001 ffac 	bl	80037a4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2102      	movs	r1, #2
 8001850:	4806      	ldr	r0, [pc, #24]	@ (800186c <CODEC_RST+0x50>)
 8001852:	f002 fe93 	bl	800457c <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 8001856:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800185a:	f001 ffa3 	bl	80037a4 <HAL_Delay>

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0800fc90 	.word	0x0800fc90
 8001868:	0800f844 	.word	0x0800f844
 800186c:	40021000 	.word	0x40021000

08001870 <TS472IQT_EN>:

void TS472IQT_EN(void){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187a:	480d      	ldr	r0, [pc, #52]	@ (80018b0 <TS472IQT_EN+0x40>)
 800187c:	f002 fe7e 	bl	800457c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001886:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <TS472IQT_EN+0x44>)
 8001888:	f002 fe78 	bl	800457c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001892:	4808      	ldr	r0, [pc, #32]	@ (80018b4 <TS472IQT_EN+0x44>)
 8001894:	f002 fe72 	bl	800457c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800189e:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <TS472IQT_EN+0x44>)
 80018a0:	f002 fe6c 	bl	800457c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80018a4:	2064      	movs	r0, #100	@ 0x64
 80018a6:	f001 ff7d 	bl	80037a4 <HAL_Delay>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40020000 	.word	0x40020000

080018b8 <History_update>:

    message("----------------------------------------------------------\r\n");
}

void History_update(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 80018bc:	494d      	ldr	r1, [pc, #308]	@ (80019f4 <History_update+0x13c>)
 80018be:	484e      	ldr	r0, [pc, #312]	@ (80019f8 <History_update+0x140>)
 80018c0:	f00b fe79 	bl	800d5b6 <f_stat>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <History_update+0x144>)
 80018ca:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 80018cc:	4b4b      	ldr	r3, [pc, #300]	@ (80019fc <History_update+0x144>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 80018d4:	484a      	ldr	r0, [pc, #296]	@ (8001a00 <History_update+0x148>)
 80018d6:	f000 fa11 	bl	8001cfc <message>
 80018da:	e01a      	b.n	8001912 <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 80018dc:	4849      	ldr	r0, [pc, #292]	@ (8001a04 <History_update+0x14c>)
 80018de:	f000 fa0d 	bl	8001cfc <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80018e2:	220a      	movs	r2, #10
 80018e4:	4944      	ldr	r1, [pc, #272]	@ (80019f8 <History_update+0x140>)
 80018e6:	4848      	ldr	r0, [pc, #288]	@ (8001a08 <History_update+0x150>)
 80018e8:	f00a fede 	bl	800c6a8 <f_open>
		sprintf(buffer, "%d", number);
 80018ec:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <History_update+0x154>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4947      	ldr	r1, [pc, #284]	@ (8001a10 <History_update+0x158>)
 80018f4:	4847      	ldr	r0, [pc, #284]	@ (8001a14 <History_update+0x15c>)
 80018f6:	f00c f8fd 	bl	800daf4 <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 80018fa:	4846      	ldr	r0, [pc, #280]	@ (8001a14 <History_update+0x15c>)
 80018fc:	f7fe fc68 	bl	80001d0 <strlen>
 8001900:	4602      	mov	r2, r0
 8001902:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <History_update+0x160>)
 8001904:	4943      	ldr	r1, [pc, #268]	@ (8001a14 <History_update+0x15c>)
 8001906:	4840      	ldr	r0, [pc, #256]	@ (8001a08 <History_update+0x150>)
 8001908:	f00b f9f5 	bl	800ccf6 <f_write>
		f_close(&file_1);
 800190c:	483e      	ldr	r0, [pc, #248]	@ (8001a08 <History_update+0x150>)
 800190e:	f00b fc04 	bl	800d11a <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 8001912:	2201      	movs	r2, #1
 8001914:	4938      	ldr	r1, [pc, #224]	@ (80019f8 <History_update+0x140>)
 8001916:	483c      	ldr	r0, [pc, #240]	@ (8001a08 <History_update+0x150>)
 8001918:	f00a fec6 	bl	800c6a8 <f_open>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <History_update+0x164>)
 8001922:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 8001924:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <History_update+0x164>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d15e      	bne.n	80019ea <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 800192c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a20 <History_update+0x168>)
 800192e:	2263      	movs	r2, #99	@ 0x63
 8001930:	4938      	ldr	r1, [pc, #224]	@ (8001a14 <History_update+0x15c>)
 8001932:	4835      	ldr	r0, [pc, #212]	@ (8001a08 <History_update+0x150>)
 8001934:	f00b f880 	bl	800ca38 <f_read>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b37      	ldr	r3, [pc, #220]	@ (8001a1c <History_update+0x164>)
 800193e:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <History_update+0x164>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11a      	bne.n	800197e <History_update+0xc6>
 8001948:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <History_update+0x168>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d016      	beq.n	800197e <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <History_update+0x168>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2f      	ldr	r2, [pc, #188]	@ (8001a14 <History_update+0x15c>)
 8001956:	2100      	movs	r1, #0
 8001958:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 800195a:	482e      	ldr	r0, [pc, #184]	@ (8001a14 <History_update+0x15c>)
 800195c:	f00b febf 	bl	800d6de <atoi>
 8001960:	4603      	mov	r3, r0
 8001962:	4a2a      	ldr	r2, [pc, #168]	@ (8001a0c <History_update+0x154>)
 8001964:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <History_update+0x154>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <History_update+0x154>)
 800196e:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <History_update+0x154>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	482b      	ldr	r0, [pc, #172]	@ (8001a24 <History_update+0x16c>)
 8001978:	f000 f9c0 	bl	8001cfc <message>
 800197c:	e002      	b.n	8001984 <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 800197e:	482a      	ldr	r0, [pc, #168]	@ (8001a28 <History_update+0x170>)
 8001980:	f000 f9bc 	bl	8001cfc <message>
		}
		f_close(&file_1); // Close the file
 8001984:	4820      	ldr	r0, [pc, #128]	@ (8001a08 <History_update+0x150>)
 8001986:	f00b fbc8 	bl	800d11a <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800198a:	220a      	movs	r2, #10
 800198c:	491a      	ldr	r1, [pc, #104]	@ (80019f8 <History_update+0x140>)
 800198e:	481e      	ldr	r0, [pc, #120]	@ (8001a08 <History_update+0x150>)
 8001990:	f00a fe8a 	bl	800c6a8 <f_open>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <History_update+0x164>)
 800199a:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <History_update+0x164>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11e      	bne.n	80019e2 <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <History_update+0x154>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4919      	ldr	r1, [pc, #100]	@ (8001a10 <History_update+0x158>)
 80019ac:	4819      	ldr	r0, [pc, #100]	@ (8001a14 <History_update+0x15c>)
 80019ae:	f00c f8a1 	bl	800daf4 <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 80019b2:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <History_update+0x15c>)
 80019b4:	f7fe fc0c 	bl	80001d0 <strlen>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <History_update+0x160>)
 80019bc:	4915      	ldr	r1, [pc, #84]	@ (8001a14 <History_update+0x15c>)
 80019be:	4812      	ldr	r0, [pc, #72]	@ (8001a08 <History_update+0x150>)
 80019c0:	f00b f999 	bl	800ccf6 <f_write>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <History_update+0x164>)
 80019ca:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <History_update+0x164>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 80019d4:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <History_update+0x174>)
 80019d6:	f000 f991 	bl	8001cfc <message>
			}
			f_close(&file_1); // Close the file
 80019da:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <History_update+0x150>)
 80019dc:	f00b fb9d 	bl	800d11a <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 80019e0:	e006      	b.n	80019f0 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 80019e2:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <History_update+0x178>)
 80019e4:	f000 f98a 	bl	8001cfc <message>
}
 80019e8:	e002      	b.n	80019f0 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 80019ea:	4812      	ldr	r0, [pc, #72]	@ (8001a34 <History_update+0x17c>)
 80019ec:	f000 f986 	bl	8001cfc <message>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200034b8 	.word	0x200034b8
 80019f8:	0800fd54 	.word	0x0800fd54
 80019fc:	200000a4 	.word	0x200000a4
 8001a00:	0800fd60 	.word	0x0800fd60
 8001a04:	0800fd84 	.word	0x0800fd84
 8001a08:	20001454 	.word	0x20001454
 8001a0c:	2000041c 	.word	0x2000041c
 8001a10:	0800fda0 	.word	0x0800fda0
 8001a14:	200003b8 	.word	0x200003b8
 8001a18:	200000ac 	.word	0x200000ac
 8001a1c:	200034b4 	.word	0x200034b4
 8001a20:	200000a8 	.word	0x200000a8
 8001a24:	0800fda4 	.word	0x0800fda4
 8001a28:	0800fdbc 	.word	0x0800fdbc
 8001a2c:	0800fdd8 	.word	0x0800fdd8
 8001a30:	0800fdf4 	.word	0x0800fdf4
 8001a34:	0800fe20 	.word	0x0800fe20

08001a38 <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8001a42:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a50:	2210      	movs	r2, #16
 8001a52:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a56:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <WavProcess_EncInit+0x7c>)
 8001a58:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a5c:	222c      	movs	r2, #44	@ 0x2c
 8001a5e:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a62:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 8001a64:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a66:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001a68:	08d2      	lsrs	r2, r2, #3
 8001a6a:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 8001a70:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a72:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a7a:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a7e:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a82:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	fb12 f303 	smulbb	r3, r2, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a90:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 8001a92:	4907      	ldr	r1, [pc, #28]	@ (8001ab0 <WavProcess_EncInit+0x78>)
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f000 f80f 	bl	8001ab8 <WavProcess_HeaderInit>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <WavProcess_EncInit+0x6c>
  {
    return 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <WavProcess_EncInit+0x6e>
  }
  return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20005464 	.word	0x20005464
 8001ab4:	001d4c00 	.word	0x001d4c00

08001ab8 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2252      	movs	r2, #82	@ 0x52
 8001ac6:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3301      	adds	r3, #1
 8001acc:	2249      	movs	r2, #73	@ 0x49
 8001ace:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	2246      	movs	r2, #70	@ 0x46
 8001ad6:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3303      	adds	r3, #3
 8001adc:	2246      	movs	r2, #70	@ 0x46
 8001ade:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3305      	adds	r3, #5
 8001aec:	224c      	movs	r2, #76	@ 0x4c
 8001aee:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3306      	adds	r3, #6
 8001af4:	221d      	movs	r2, #29
 8001af6:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3307      	adds	r3, #7
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3308      	adds	r3, #8
 8001b04:	2257      	movs	r2, #87	@ 0x57
 8001b06:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3309      	adds	r3, #9
 8001b0c:	2241      	movs	r2, #65	@ 0x41
 8001b0e:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	330a      	adds	r3, #10
 8001b14:	2256      	movs	r2, #86	@ 0x56
 8001b16:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	330b      	adds	r3, #11
 8001b1c:	2245      	movs	r2, #69	@ 0x45
 8001b1e:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	330c      	adds	r3, #12
 8001b24:	2266      	movs	r2, #102	@ 0x66
 8001b26:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	330d      	adds	r3, #13
 8001b2c:	226d      	movs	r2, #109	@ 0x6d
 8001b2e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	330e      	adds	r3, #14
 8001b34:	2274      	movs	r2, #116	@ 0x74
 8001b36:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	330f      	adds	r3, #15
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3310      	adds	r3, #16
 8001b44:	2210      	movs	r2, #16
 8001b46:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3311      	adds	r3, #17
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3312      	adds	r3, #18
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3313      	adds	r3, #19
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3314      	adds	r3, #20
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3315      	adds	r3, #21
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	8ada      	ldrh	r2, [r3, #22]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3316      	adds	r3, #22
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3317      	adds	r3, #23
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	0a1a      	lsrs	r2, r3, #8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3319      	adds	r3, #25
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	0c1a      	lsrs	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	331a      	adds	r3, #26
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	0e1a      	lsrs	r2, r3, #24
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	331b      	adds	r3, #27
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	331c      	adds	r3, #28
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	0a1a      	lsrs	r2, r3, #8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	331d      	adds	r3, #29
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	0c1a      	lsrs	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	331e      	adds	r3, #30
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	0e1a      	lsrs	r2, r3, #24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	331f      	adds	r3, #31
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	8c1a      	ldrh	r2, [r3, #32]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3320      	adds	r3, #32
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3321      	adds	r3, #33	@ 0x21
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3322      	adds	r3, #34	@ 0x22
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3323      	adds	r3, #35	@ 0x23
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3324      	adds	r3, #36	@ 0x24
 8001c1c:	2264      	movs	r2, #100	@ 0x64
 8001c1e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3325      	adds	r3, #37	@ 0x25
 8001c24:	2261      	movs	r2, #97	@ 0x61
 8001c26:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3326      	adds	r3, #38	@ 0x26
 8001c2c:	2274      	movs	r2, #116	@ 0x74
 8001c2e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3327      	adds	r3, #39	@ 0x27
 8001c34:	2261      	movs	r2, #97	@ 0x61
 8001c36:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3328      	adds	r3, #40	@ 0x28
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3329      	adds	r3, #41	@ 0x29
 8001c44:	224c      	movs	r2, #76	@ 0x4c
 8001c46:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	332a      	adds	r3, #42	@ 0x2a
 8001c4c:	221d      	movs	r2, #29
 8001c4e:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	332b      	adds	r3, #43	@ 0x2b
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	0a1a      	lsrs	r2, r3, #8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3305      	adds	r3, #5
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0c1a      	lsrs	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3306      	adds	r3, #6
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0e1a      	lsrs	r2, r3, #24
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	3b2c      	subs	r3, #44	@ 0x2c
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001cb0:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3328      	adds	r3, #40	@ 0x28
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0a1a      	lsrs	r2, r3, #8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3329      	adds	r3, #41	@ 0x29
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1a      	lsrs	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	332a      	adds	r3, #42	@ 0x2a
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <WavProcess_HeaderUpdate+0x90>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0e1a      	lsrs	r2, r3, #24
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	332b      	adds	r3, #43	@ 0x2b
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20005490 	.word	0x20005490

08001cfc <message>:

void message(const char *format, ...) {
 8001cfc:	b40f      	push	{r0, r1, r2, r3}
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 8001d04:	2064      	movs	r0, #100	@ 0x64
 8001d06:	f00b fcef 	bl	800d6e8 <malloc>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00e      	beq.n	8001d32 <message+0x36>
        va_list args;
        va_start(args, format);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	2164      	movs	r1, #100	@ 0x64
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f00b ffa1 	bl	800dc68 <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fc22 	bl	8000570 <Send_Uart>
        free(buf);      // Free the allocated memory
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f00b fce3 	bl	800d6f8 <free>
    }
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d3c:	b004      	add	sp, #16
 8001d3e:	4770      	bx	lr

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <Error_Handler+0x8>

08001d4c <eeprom_init>:

#include "new_eeprom.h"


HAL_StatusTypeDef eeprom_init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, EEPROMWIRTE, 10, HAL_MAX_DELAY)!=HAL_OK)
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	220a      	movs	r2, #10
 8001d56:	21a0      	movs	r1, #160	@ 0xa0
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <eeprom_init+0x24>)
 8001d5a:	f003 fbc9 	bl	80054f0 <HAL_I2C_IsDeviceReady>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <eeprom_init+0x1c>
	{
		return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <eeprom_init+0x1e>
	}
	else
	{
		return HAL_OK;
 8001d68:	2300      	movs	r3, #0
	}
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000108 	.word	0x20000108

08001d74 <eeprom_write>:
	}
}


HAL_StatusTypeDef eeprom_write(uint16_t addr,uint8_t* data,uint8_t len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	717b      	strb	r3, [r7, #5]
	if(len > 128)
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	2b80      	cmp	r3, #128	@ 0x80
 8001d88:	d901      	bls.n	8001d8e <eeprom_write+0x1a>
	{
		return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e016      	b.n	8001dbc <eeprom_write+0x48>
	}
	else
	{
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, addr, 2, data, len, HAL_MAX_DELAY)!=HAL_OK)
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	21a0      	movs	r1, #160	@ 0xa0
 8001da4:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <eeprom_write+0x50>)
 8001da6:	f003 f883 	bl	8004eb0 <HAL_I2C_Mem_Write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <eeprom_write+0x40>
		{
		return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e003      	b.n	8001dbc <eeprom_write+0x48>
		}
		HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f001 fcf5 	bl	80037a4 <HAL_Delay>
		return HAL_OK;
 8001dba:	2300      	movs	r3, #0
	}
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000108 	.word	0x20000108

08001dc8 <eeprom_read>:
    if (HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr, 2, buffer, len, HAL_MAX_DELAY) != HAL_OK) {
        return NULL;  // Read failed
    }
    return buffer;  // Return pointer to the provided buffer
}*/
uint8_t* eeprom_read(uint16_t addr, uint8_t* buffer, uint16_t len) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	@ 0x38
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	80fb      	strh	r3, [r7, #6]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80bb      	strh	r3, [r7, #4]
    // Removed initial check to debug I2C read
    uint16_t offset = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001ddc:	e043      	b.n	8001e66 <eeprom_read+0x9e>
        uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001dde:	88ba      	ldrh	r2, [r7, #4]
 8001de0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b80      	cmp	r3, #128	@ 0x80
 8001de6:	bfa8      	it	ge
 8001de8:	2380      	movge	r3, #128	@ 0x80
 8001dea:	84bb      	strh	r3, [r7, #36]	@ 0x24
        HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr + offset, 2, buffer + offset, chunk_size, HAL_MAX_DELAY);
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001df0:	4413      	add	r3, r2
 8001df2:	b299      	uxth	r1, r3
 8001df4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfe:	9202      	str	r2, [sp, #8]
 8001e00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	460a      	mov	r2, r1
 8001e0a:	21a1      	movs	r1, #161	@ 0xa1
 8001e0c:	481e      	ldr	r0, [pc, #120]	@ (8001e88 <eeprom_read+0xc0>)
 8001e0e:	f003 f949 	bl	80050a4 <HAL_I2C_Mem_Read>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status != HAL_OK) {
 8001e18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01e      	beq.n	8001e5e <eeprom_read+0x96>
            HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read fail at offset ", 27, HAL_MAX_DELAY);
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	221b      	movs	r2, #27
 8001e26:	4919      	ldr	r1, [pc, #100]	@ (8001e8c <eeprom_read+0xc4>)
 8001e28:	4819      	ldr	r0, [pc, #100]	@ (8001e90 <eeprom_read+0xc8>)
 8001e2a:	f006 fec8 	bl	8008bbe <HAL_UART_Transmit>
            char msg[20];
            sprintf(msg, "%d, status: %d\n\r", offset, status);
 8001e2e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e34:	f107 000c 	add.w	r0, r7, #12
 8001e38:	4916      	ldr	r1, [pc, #88]	@ (8001e94 <eeprom_read+0xcc>)
 8001e3a:	f00b fe5b 	bl	800daf4 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe f9c4 	bl	80001d0 <strlen>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f107 010c 	add.w	r1, r7, #12
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	480e      	ldr	r0, [pc, #56]	@ (8001e90 <eeprom_read+0xc8>)
 8001e56:	f006 feb2 	bl	8008bbe <HAL_UART_Transmit>
            return NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e00f      	b.n	8001e7e <eeprom_read+0xb6>
        }
        offset += chunk_size;
 8001e5e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e62:	4413      	add	r3, r2
 8001e64:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8001e66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e68:	88bb      	ldrh	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3b7      	bcc.n	8001dde <eeprom_read+0x16>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read complete\n\r", 22, HAL_MAX_DELAY);
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	2216      	movs	r2, #22
 8001e74:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <eeprom_read+0xd0>)
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <eeprom_read+0xc8>)
 8001e78:	f006 fea1 	bl	8008bbe <HAL_UART_Transmit>
    return buffer;
 8001e7c:	683b      	ldr	r3, [r7, #0]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3728      	adds	r7, #40	@ 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000108 	.word	0x20000108
 8001e8c:	0800fe40 	.word	0x0800fe40
 8001e90:	20000374 	.word	0x20000374
 8001e94:	0800fe5c 	.word	0x0800fe5c
 8001e98:	0800fe70 	.word	0x0800fe70

08001e9c <eeprom_store_config>:
    HAL_UART_Transmit(huart, (uint8_t*)"String read from EEPROM: ", 25, HAL_MAX_DELAY);
    HAL_UART_Transmit(huart, buffer, len, HAL_MAX_DELAY);
    HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef eeprom_store_config(const char* config) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(config) + 1;
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7fe f993 	bl	80001d0 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	81bb      	strh	r3, [r7, #12]
    if (len > EEPROMSIZE)
    	{
    	HAL_UART_Transmit(&huart3, (uint8_t*)"Config too long\n\r", 17, HAL_MAX_DELAY);
    	return HAL_ERROR;
    	}
    	uint16_t offset = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	81fb      	strh	r3, [r7, #14]
        while (offset < len) {
 8001eb6:	e029      	b.n	8001f0c <eeprom_store_config+0x70>
            uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8001eb8:	89ba      	ldrh	r2, [r7, #12]
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b80      	cmp	r3, #128	@ 0x80
 8001ec0:	bfa8      	it	ge
 8001ec2:	2380      	movge	r3, #128	@ 0x80
 8001ec4:	817b      	strh	r3, [r7, #10]
            if (HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, ALARM_CONFIG_ADDR + offset, 2, (uint8_t*)(config + offset), chunk_size, HAL_MAX_DELAY) != HAL_OK) {
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	89f9      	ldrh	r1, [r7, #14]
 8001ece:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed2:	9202      	str	r2, [sp, #8]
 8001ed4:	897a      	ldrh	r2, [r7, #10]
 8001ed6:	9201      	str	r2, [sp, #4]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2302      	movs	r3, #2
 8001edc:	460a      	mov	r2, r1
 8001ede:	21a0      	movs	r1, #160	@ 0xa0
 8001ee0:	480f      	ldr	r0, [pc, #60]	@ (8001f20 <eeprom_store_config+0x84>)
 8001ee2:	f002 ffe5 	bl	8004eb0 <HAL_I2C_Mem_Write>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <eeprom_store_config+0x62>
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM write fail\n\r", 19, HAL_MAX_DELAY);
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	2213      	movs	r2, #19
 8001ef2:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <eeprom_store_config+0x88>)
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <eeprom_store_config+0x8c>)
 8001ef6:	f006 fe62 	bl	8008bbe <HAL_UART_Transmit>
                return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00b      	b.n	8001f16 <eeprom_store_config+0x7a>
            }
            HAL_Delay(10);  // EEPROM write cycle delay
 8001efe:	200a      	movs	r0, #10
 8001f00:	f001 fc50 	bl	80037a4 <HAL_Delay>
            offset += chunk_size;
 8001f04:	89fa      	ldrh	r2, [r7, #14]
 8001f06:	897b      	ldrh	r3, [r7, #10]
 8001f08:	4413      	add	r3, r2
 8001f0a:	81fb      	strh	r3, [r7, #14]
        while (offset < len) {
 8001f0c:	89fa      	ldrh	r2, [r7, #14]
 8001f0e:	89bb      	ldrh	r3, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d3d1      	bcc.n	8001eb8 <eeprom_store_config+0x1c>
        }
        return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000108 	.word	0x20000108
 8001f24:	0800fedc 	.word	0x0800fedc
 8001f28:	20000374 	.word	0x20000374

08001f2c <eeprom_read_config>:
        buffer[max_len - 1] = '\0';
        return HAL_OK;
    }
    return HAL_ERROR;
}*/
HAL_StatusTypeDef eeprom_read_config(char* buffer, uint16_t max_len) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
    const uint16_t read_size = 256;  // Read 2 pages
 8001f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3c:	81fb      	strh	r3, [r7, #14]
    if (max_len < read_size) {
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	89fb      	ldrh	r3, [r7, #14]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d208      	bcs.n	8001f58 <eeprom_read_config+0x2c>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Buffer too small for 2 pages\n\r", 30, HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	221e      	movs	r2, #30
 8001f4c:	491f      	ldr	r1, [pc, #124]	@ (8001fcc <eeprom_read_config+0xa0>)
 8001f4e:	4820      	ldr	r0, [pc, #128]	@ (8001fd0 <eeprom_read_config+0xa4>)
 8001f50:	f006 fe35 	bl	8008bbe <HAL_UART_Transmit>
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e034      	b.n	8001fc2 <eeprom_read_config+0x96>
    }
    if (eeprom_read(ALARM_CONFIG_ADDR, (uint8_t*)buffer, read_size) != NULL) {
 8001f58:	89fb      	ldrh	r3, [r7, #14]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff ff32 	bl	8001dc8 <eeprom_read>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d023      	beq.n	8001fb2 <eeprom_read_config+0x86>
        buffer[read_size - 1] = '\0';
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
        if (strlen(buffer) > 0 && buffer[0] != 0xFF && buffer[0] != 0x00) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <eeprom_read_config+0x74>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2bff      	cmp	r3, #255	@ 0xff
 8001f84:	d00c      	beq.n	8001fa0 <eeprom_read_config+0x74>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <eeprom_read_config+0x74>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Config read success (256 bytes)\n\r", 33, HAL_MAX_DELAY);
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	2221      	movs	r2, #33	@ 0x21
 8001f94:	490f      	ldr	r1, [pc, #60]	@ (8001fd4 <eeprom_read_config+0xa8>)
 8001f96:	480e      	ldr	r0, [pc, #56]	@ (8001fd0 <eeprom_read_config+0xa4>)
 8001f98:	f006 fe11 	bl	8008bbe <HAL_UART_Transmit>
            return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e010      	b.n	8001fc2 <eeprom_read_config+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Config empty or invalid\n\r", 25, HAL_MAX_DELAY);
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	2219      	movs	r2, #25
 8001fa6:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <eeprom_read_config+0xac>)
 8001fa8:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <eeprom_read_config+0xa4>)
 8001faa:	f006 fe08 	bl	8008bbe <HAL_UART_Transmit>
            return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <eeprom_read_config+0x96>
        }
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read config fail\n\r", 25, HAL_MAX_DELAY);
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	2219      	movs	r2, #25
 8001fb8:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <eeprom_read_config+0xb0>)
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <eeprom_read_config+0xa4>)
 8001fbc:	f006 fdff 	bl	8008bbe <HAL_UART_Transmit>
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	0800fef0 	.word	0x0800fef0
 8001fd0:	20000374 	.word	0x20000374
 8001fd4:	0800ff10 	.word	0x0800ff10
 8001fd8:	0800ff34 	.word	0x0800ff34
 8001fdc:	0800ff50 	.word	0x0800ff50

08001fe0 <decimal_to_bcd>:
rtc_timedate_t alarm_queue[MAX_ALARMS] = {0}; // Global alarm queue
uint8_t alarm_count = 0;                      // Global alarm count
uint8_t current_idx = 0;                      // Global current index


uint8_t decimal_to_bcd(uint8_t decimal) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <decimal_to_bcd+0x44>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	b258      	sxtb	r0, r3
 8001ffa:	79fa      	ldrb	r2, [r7, #7]
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <decimal_to_bcd+0x44>)
 8001ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8002002:	08d9      	lsrs	r1, r3, #3
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	b25b      	sxtb	r3, r3
 8002012:	4303      	orrs	r3, r0
 8002014:	b25b      	sxtb	r3, r3
 8002016:	b2db      	uxtb	r3, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	cccccccd 	.word	0xcccccccd

08002028 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4413      	add	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	b2db      	uxtb	r3, r3
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <rtc_init>:
void rtc_init(I2C_HandleTypeDef *hi2c)
{// 1 check if rtc is ready
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	6078      	str	r0, [r7, #4]
	ret=HAL_I2C_IsDeviceReady(&hi2c1, slavwrite, 10, HAL_MAX_DELAY);
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	220a      	movs	r2, #10
 800206a:	21a2      	movs	r1, #162	@ 0xa2
 800206c:	4881      	ldr	r0, [pc, #516]	@ (8002274 <rtc_init+0x218>)
 800206e:	f003 fa3f 	bl	80054f0 <HAL_I2C_IsDeviceReady>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	4b80      	ldr	r3, [pc, #512]	@ (8002278 <rtc_init+0x21c>)
 8002078:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800207a:	4b7f      	ldr	r3, [pc, #508]	@ (8002278 <rtc_init+0x21c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d113      	bne.n	80020aa <rtc_init+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002088:	487c      	ldr	r0, [pc, #496]	@ (800227c <rtc_init+0x220>)
 800208a:	f002 fa77 	bl	800457c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 800208e:	2064      	movs	r0, #100	@ 0x64
 8002090:	f001 fb88 	bl	80037a4 <HAL_Delay>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC ok\n\r", 8, HAL_MAX_DELAY);
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	2208      	movs	r2, #8
 800209a:	4979      	ldr	r1, [pc, #484]	@ (8002280 <rtc_init+0x224>)
 800209c:	4879      	ldr	r0, [pc, #484]	@ (8002284 <rtc_init+0x228>)
 800209e:	f006 fd8e 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020a2:	2064      	movs	r0, #100	@ 0x64
 80020a4:	f001 fb7e 	bl	80037a4 <HAL_Delay>
 80020a8:	e009      	b.n	80020be <rtc_init+0x62>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC notok\n\r", 11, HAL_MAX_DELAY);
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	220b      	movs	r2, #11
 80020b0:	4975      	ldr	r1, [pc, #468]	@ (8002288 <rtc_init+0x22c>)
 80020b2:	4874      	ldr	r0, [pc, #464]	@ (8002284 <rtc_init+0x228>)
 80020b4:	f006 fd83 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020b8:	2064      	movs	r0, #100	@ 0x64
 80020ba:	f001 fb73 	bl	80037a4 <HAL_Delay>
	  }
	  //2 perform otp refresh Performing an OTP refresh ensures that the device operates with the correct calibration data after power-on or reset.
	  uint8_t data[2];
	  data[0]=CLKOUT_ctl;
 80020be:	230f      	movs	r3, #15
 80020c0:	733b      	strb	r3, [r7, #12]
	  data[1]=0x01;//set it to 1 to initiate the refresh process
 80020c2:	2301      	movs	r3, #1
 80020c4:	737b      	strb	r3, [r7, #13]

	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2302      	movs	r3, #2
 80020d2:	21a2      	movs	r1, #162	@ 0xa2
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f002 fbc7 	bl	8004868 <HAL_I2C_Master_Transmit>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4b66      	ldr	r3, [pc, #408]	@ (8002278 <rtc_init+0x21c>)
 80020e0:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80020e2:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <rtc_init+0x21c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <rtc_init+0xa4>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh ok\n\r", 20, HAL_MAX_DELAY);
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	2214      	movs	r2, #20
 80020f0:	4966      	ldr	r1, [pc, #408]	@ (800228c <rtc_init+0x230>)
 80020f2:	4864      	ldr	r0, [pc, #400]	@ (8002284 <rtc_init+0x228>)
 80020f4:	f006 fd63 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 80020f8:	2064      	movs	r0, #100	@ 0x64
 80020fa:	f001 fb53 	bl	80037a4 <HAL_Delay>
 80020fe:	e009      	b.n	8002114 <rtc_init+0xb8>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh notok\n\r", 23, HAL_MAX_DELAY);
 8002100:	f04f 33ff 	mov.w	r3, #4294967295
 8002104:	2217      	movs	r2, #23
 8002106:	4962      	ldr	r1, [pc, #392]	@ (8002290 <rtc_init+0x234>)
 8002108:	485e      	ldr	r0, [pc, #376]	@ (8002284 <rtc_init+0x228>)
 800210a:	f006 fd58 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 800210e:	2064      	movs	r0, #100	@ 0x64
 8002110:	f001 fb48 	bl	80037a4 <HAL_Delay>
	  }

	  //3 Configure Control_1 Register (0x00) for basic settings
	  data[0]=Control_1;
 8002114:	2300      	movs	r3, #0
 8002116:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 8002118:	2300      	movs	r3, #0
 800211a:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 800211c:	f107 020c 	add.w	r2, r7, #12
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2302      	movs	r3, #2
 8002128:	21a2      	movs	r1, #162	@ 0xa2
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f002 fb9c 	bl	8004868 <HAL_I2C_Master_Transmit>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	4b50      	ldr	r3, [pc, #320]	@ (8002278 <rtc_init+0x21c>)
 8002136:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002138:	4b4f      	ldr	r3, [pc, #316]	@ (8002278 <rtc_init+0x21c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <rtc_init+0xfa>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 ok\n\r", 14, HAL_MAX_DELAY);
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
 8002144:	220e      	movs	r2, #14
 8002146:	4953      	ldr	r1, [pc, #332]	@ (8002294 <rtc_init+0x238>)
 8002148:	484e      	ldr	r0, [pc, #312]	@ (8002284 <rtc_init+0x228>)
 800214a:	f006 fd38 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 800214e:	2064      	movs	r0, #100	@ 0x64
 8002150:	f001 fb28 	bl	80037a4 <HAL_Delay>
 8002154:	e009      	b.n	800216a <rtc_init+0x10e>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 notok\n\r", 17, HAL_MAX_DELAY);
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	2211      	movs	r2, #17
 800215c:	494e      	ldr	r1, [pc, #312]	@ (8002298 <rtc_init+0x23c>)
 800215e:	4849      	ldr	r0, [pc, #292]	@ (8002284 <rtc_init+0x228>)
 8002160:	f006 fd2d 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002164:	2064      	movs	r0, #100	@ 0x64
 8002166:	f001 fb1d 	bl	80037a4 <HAL_Delay>
	  }

	  //4 Configure Control_2 Register (0x01) for alarm
	  data[0]=Control_2;
 800216a:	2301      	movs	r3, #1
 800216c:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 800216e:	2300      	movs	r3, #0
 8002170:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2302      	movs	r3, #2
 800217e:	21a2      	movs	r1, #162	@ 0xa2
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f002 fb71 	bl	8004868 <HAL_I2C_Master_Transmit>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <rtc_init+0x21c>)
 800218c:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800218e:	4b3a      	ldr	r3, [pc, #232]	@ (8002278 <rtc_init+0x21c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <rtc_init+0x150>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 ok\n\r", 14, HAL_MAX_DELAY);
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	220e      	movs	r2, #14
 800219c:	493f      	ldr	r1, [pc, #252]	@ (800229c <rtc_init+0x240>)
 800219e:	4839      	ldr	r0, [pc, #228]	@ (8002284 <rtc_init+0x228>)
 80021a0:	f006 fd0d 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021a4:	2064      	movs	r0, #100	@ 0x64
 80021a6:	f001 fafd 	bl	80037a4 <HAL_Delay>
 80021aa:	e009      	b.n	80021c0 <rtc_init+0x164>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 notok\n\r", 17, HAL_MAX_DELAY);
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	2211      	movs	r2, #17
 80021b2:	493b      	ldr	r1, [pc, #236]	@ (80022a0 <rtc_init+0x244>)
 80021b4:	4833      	ldr	r0, [pc, #204]	@ (8002284 <rtc_init+0x228>)
 80021b6:	f006 fd02 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021ba:	2064      	movs	r0, #100	@ 0x64
 80021bc:	f001 faf2 	bl	80037a4 <HAL_Delay>
	  }

	  //5 Configure Control_3 Register (0x02) for battery
	  data[0]=Control_3;
 80021c0:	2302      	movs	r3, #2
 80021c2:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 80021c4:	2300      	movs	r3, #0
 80021c6:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 80021c8:	f107 020c 	add.w	r2, r7, #12
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2302      	movs	r3, #2
 80021d4:	21a2      	movs	r1, #162	@ 0xa2
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f002 fb46 	bl	8004868 <HAL_I2C_Master_Transmit>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <rtc_init+0x21c>)
 80021e2:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 80021e4:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <rtc_init+0x21c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <rtc_init+0x1a6>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 ok\n\r", 14, HAL_MAX_DELAY);
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
 80021f0:	220e      	movs	r2, #14
 80021f2:	492c      	ldr	r1, [pc, #176]	@ (80022a4 <rtc_init+0x248>)
 80021f4:	4823      	ldr	r0, [pc, #140]	@ (8002284 <rtc_init+0x228>)
 80021f6:	f006 fce2 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 80021fa:	2064      	movs	r0, #100	@ 0x64
 80021fc:	f001 fad2 	bl	80037a4 <HAL_Delay>
 8002200:	e009      	b.n	8002216 <rtc_init+0x1ba>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 notok\n\r", 17, HAL_MAX_DELAY);
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	2211      	movs	r2, #17
 8002208:	4927      	ldr	r1, [pc, #156]	@ (80022a8 <rtc_init+0x24c>)
 800220a:	481e      	ldr	r0, [pc, #120]	@ (8002284 <rtc_init+0x228>)
 800220c:	f006 fcd7 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002210:	2064      	movs	r0, #100	@ 0x64
 8002212:	f001 fac7 	bl	80037a4 <HAL_Delay>
	  }

	  //6 Set the CLKOUT frequency, if needed
	  data[0]=CLKOUT_ctl;
 8002216:	230f      	movs	r3, #15
 8002218:	733b      	strb	r3, [r7, #12]
	  data[1]=0x07;
 800221a:	2307      	movs	r3, #7
 800221c:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 800221e:	f107 020c 	add.w	r2, r7, #12
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2302      	movs	r3, #2
 800222a:	21a2      	movs	r1, #162	@ 0xa2
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f002 fb1b 	bl	8004868 <HAL_I2C_Master_Transmit>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <rtc_init+0x21c>)
 8002238:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 800223a:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <rtc_init+0x21c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <rtc_init+0x1fc>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout ok\n\r", 11, HAL_MAX_DELAY);
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	220b      	movs	r2, #11
 8002248:	4918      	ldr	r1, [pc, #96]	@ (80022ac <rtc_init+0x250>)
 800224a:	480e      	ldr	r0, [pc, #56]	@ (8002284 <rtc_init+0x228>)
 800224c:	f006 fcb7 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002250:	2064      	movs	r0, #100	@ 0x64
 8002252:	f001 faa7 	bl	80037a4 <HAL_Delay>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
		  HAL_Delay(100);
	  }

}
 8002256:	e009      	b.n	800226c <rtc_init+0x210>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	220e      	movs	r2, #14
 800225e:	4914      	ldr	r1, [pc, #80]	@ (80022b0 <rtc_init+0x254>)
 8002260:	4808      	ldr	r0, [pc, #32]	@ (8002284 <rtc_init+0x228>)
 8002262:	f006 fcac 	bl	8008bbe <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002266:	2064      	movs	r0, #100	@ 0x64
 8002268:	f001 fa9c 	bl	80037a4 <HAL_Delay>
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000108 	.word	0x20000108
 8002278:	200000b0 	.word	0x200000b0
 800227c:	40020c00 	.word	0x40020c00
 8002280:	0800ff6c 	.word	0x0800ff6c
 8002284:	20000374 	.word	0x20000374
 8002288:	0800ff78 	.word	0x0800ff78
 800228c:	0800ff84 	.word	0x0800ff84
 8002290:	0800ff9c 	.word	0x0800ff9c
 8002294:	0800ffb4 	.word	0x0800ffb4
 8002298:	0800ffc4 	.word	0x0800ffc4
 800229c:	0800ffd8 	.word	0x0800ffd8
 80022a0:	0800ffe8 	.word	0x0800ffe8
 80022a4:	0800fffc 	.word	0x0800fffc
 80022a8:	0801000c 	.word	0x0801000c
 80022ac:	08010020 	.word	0x08010020
 80022b0:	0801002c 	.word	0x0801002c

080022b4 <rtc_wirte>:

HAL_StatusTypeDef rtc_wirte(uint8_t reg_addr,uint8_t value)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	4603      	mov	r3, r0
 80022bc:	460a      	mov	r2, r1
 80022be:	71fb      	strb	r3, [r7, #7]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=reg_addr;
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 80022c8:	79bb      	ldrb	r3, [r7, #6]
 80022ca:	737b      	strb	r3, [r7, #13]

	ret=HAL_I2C_Master_Transmit(&hi2c1, slavwrite, data, sizeof(data), HAL_MAX_DELAY);
 80022cc:	f107 020c 	add.w	r2, r7, #12
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2302      	movs	r3, #2
 80022d8:	21a2      	movs	r1, #162	@ 0xa2
 80022da:	480c      	ldr	r0, [pc, #48]	@ (800230c <rtc_wirte+0x58>)
 80022dc:	f002 fac4 	bl	8004868 <HAL_I2C_Master_Transmit>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <rtc_wirte+0x5c>)
 80022e6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return HAL_ERROR;
	}*/
	if (ret != HAL_OK) {
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <rtc_wirte+0x5c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <rtc_wirte+0x4e>
	        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C write fail\n\r", 16, HAL_MAX_DELAY);
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	2210      	movs	r2, #16
 80022f6:	4907      	ldr	r1, [pc, #28]	@ (8002314 <rtc_wirte+0x60>)
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <rtc_wirte+0x64>)
 80022fa:	f006 fc60 	bl	8008bbe <HAL_UART_Transmit>
	        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <rtc_wirte+0x50>
	    }
	    return HAL_OK;
 8002302:	2300      	movs	r3, #0

}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000108 	.word	0x20000108
 8002310:	200000b0 	.word	0x200000b0
 8002314:	0801003c 	.word	0x0801003c
 8002318:	20000374 	.word	0x20000374

0800231c <rtc_read>:

uint8_t rtc_read(uint8_t reg_addr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af02      	add	r7, sp, #8
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret1;
	    uint8_t value = 0xFF; // Default value in case of error
 8002326:	23ff      	movs	r3, #255	@ 0xff
 8002328:	73bb      	strb	r3, [r7, #14]

	    // Transmit the register address
	    ret1 = HAL_I2C_Master_Transmit(&hi2c1, slavwrite, &reg_addr, 1, HAL_MAX_DELAY);
 800232a:	1dfa      	adds	r2, r7, #7
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	21a2      	movs	r1, #162	@ 0xa2
 8002336:	4810      	ldr	r0, [pc, #64]	@ (8002378 <rtc_read+0x5c>)
 8002338:	f002 fa96 	bl	8004868 <HAL_I2C_Master_Transmit>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <rtc_read+0x2e>
	        return value; // Return default value if transmit fails
 8002346:	7bbb      	ldrb	r3, [r7, #14]
 8002348:	e011      	b.n	800236e <rtc_read+0x52>
	    }

	    // Receive the register value
	    ret1 = HAL_I2C_Master_Receive(&hi2c1, slaveread, &value, 1, HAL_MAX_DELAY);
 800234a:	f107 020e 	add.w	r2, r7, #14
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2301      	movs	r3, #1
 8002356:	21a3      	movs	r1, #163	@ 0xa3
 8002358:	4807      	ldr	r0, [pc, #28]	@ (8002378 <rtc_read+0x5c>)
 800235a:	f002 fb83 	bl	8004a64 <HAL_I2C_Master_Receive>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <rtc_read+0x50>
	        return 0xFF; // Return default value if receive fails
 8002368:	23ff      	movs	r3, #255	@ 0xff
 800236a:	e000      	b.n	800236e <rtc_read+0x52>
	    }

	    return value; // Return the register value
 800236c:	7bbb      	ldrb	r3, [r7, #14]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000108 	.word	0x20000108

0800237c <rtc_settime>:

HAL_StatusTypeDef rtc_settime(const rtc_timedate_t* timedate)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	if(rtc_wirte(Seconds, decimal_to_bcd(timedate->second))!=HAL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	789b      	ldrb	r3, [r3, #2]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe29 	bl	8001fe0 <decimal_to_bcd>
 800238e:	4603      	mov	r3, r0
 8002390:	4619      	mov	r1, r3
 8002392:	2003      	movs	r0, #3
 8002394:	f7ff ff8e 	bl	80022b4 <rtc_wirte>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <rtc_settime+0x26>
	{
		return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e04b      	b.n	800243a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Minutes, decimal_to_bcd(timedate->minute))!=HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fe1a 	bl	8001fe0 <decimal_to_bcd>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4619      	mov	r1, r3
 80023b0:	2004      	movs	r0, #4
 80023b2:	f7ff ff7f 	bl	80022b4 <rtc_wirte>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <rtc_settime+0x44>
	{
		return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e03c      	b.n	800243a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Hours, decimal_to_bcd(timedate->hour))!=HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe0b 	bl	8001fe0 <decimal_to_bcd>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	2005      	movs	r0, #5
 80023d0:	f7ff ff70 	bl	80022b4 <rtc_wirte>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <rtc_settime+0x62>
	{
		return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e02d      	b.n	800243a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Days, decimal_to_bcd(timedate->day))!=HAL_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	78db      	ldrb	r3, [r3, #3]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fdfc 	bl	8001fe0 <decimal_to_bcd>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	2006      	movs	r0, #6
 80023ee:	f7ff ff61 	bl	80022b4 <rtc_wirte>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <rtc_settime+0x80>
	{
		return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e01e      	b.n	800243a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Months, decimal_to_bcd(timedate->month))!=HAL_OK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	791b      	ldrb	r3, [r3, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fded 	bl	8001fe0 <decimal_to_bcd>
 8002406:	4603      	mov	r3, r0
 8002408:	4619      	mov	r1, r3
 800240a:	2008      	movs	r0, #8
 800240c:	f7ff ff52 	bl	80022b4 <rtc_wirte>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <rtc_settime+0x9e>
	{
		return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Years, decimal_to_bcd(timedate->year))!=HAL_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	795b      	ldrb	r3, [r3, #5]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fdde 	bl	8001fe0 <decimal_to_bcd>
 8002424:	4603      	mov	r3, r0
 8002426:	4619      	mov	r1, r3
 8002428:	2009      	movs	r0, #9
 800242a:	f7ff ff43 	bl	80022b4 <rtc_wirte>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <rtc_settime+0xbc>
	{
		return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <rtc_settime+0xbe>
	}

	return HAL_OK;
 8002438:	2300      	movs	r3, #0

}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <rtc_gettime>:

HAL_StatusTypeDef rtc_gettime(rtc_timedate_t* timedate)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp=rtc_read(Seconds);//second register
 800244a:	2003      	movs	r0, #3
 800244c:	f7ff ff66 	bl	800231c <rtc_read>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2bff      	cmp	r3, #255	@ 0xff
 8002458:	d101      	bne.n	800245e <rtc_gettime+0x1c>
	{
		return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e062      	b.n	8002524 <rtc_gettime+0xe2>
	}
	timedate->second= bcd_to_decimal(temp);
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fde1 	bl	8002028 <bcd_to_decimal>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	709a      	strb	r2, [r3, #2]
	temp=rtc_read(Minutes);//minute register
 800246e:	2004      	movs	r0, #4
 8002470:	f7ff ff54 	bl	800231c <rtc_read>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d101      	bne.n	8002482 <rtc_gettime+0x40>
	{
		return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e050      	b.n	8002524 <rtc_gettime+0xe2>
	}
	timedate->minute= bcd_to_decimal(temp);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fdcf 	bl	8002028 <bcd_to_decimal>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	705a      	strb	r2, [r3, #1]
	temp=rtc_read(Hours);//hour register
 8002492:	2005      	movs	r0, #5
 8002494:	f7ff ff42 	bl	800231c <rtc_read>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2bff      	cmp	r3, #255	@ 0xff
 80024a0:	d101      	bne.n	80024a6 <rtc_gettime+0x64>
	{
		return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e03e      	b.n	8002524 <rtc_gettime+0xe2>
	}
	timedate->hour= bcd_to_decimal(temp);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fdbd 	bl	8002028 <bcd_to_decimal>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	701a      	strb	r2, [r3, #0]
	temp=rtc_read(Days);//day register
 80024b6:	2006      	movs	r0, #6
 80024b8:	f7ff ff30 	bl	800231c <rtc_read>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2bff      	cmp	r3, #255	@ 0xff
 80024c4:	d101      	bne.n	80024ca <rtc_gettime+0x88>
	{
		return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e02c      	b.n	8002524 <rtc_gettime+0xe2>
	}
	timedate->day= bcd_to_decimal(temp);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fdab 	bl	8002028 <bcd_to_decimal>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	70da      	strb	r2, [r3, #3]
	temp=rtc_read(Months);//second register
 80024da:	2008      	movs	r0, #8
 80024dc:	f7ff ff1e 	bl	800231c <rtc_read>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2bff      	cmp	r3, #255	@ 0xff
 80024e8:	d101      	bne.n	80024ee <rtc_gettime+0xac>
	{
		return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01a      	b.n	8002524 <rtc_gettime+0xe2>
	}
	timedate->month= bcd_to_decimal(temp);
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fd99 	bl	8002028 <bcd_to_decimal>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	711a      	strb	r2, [r3, #4]
	temp=rtc_read(Years);//second register
 80024fe:	2009      	movs	r0, #9
 8002500:	f7ff ff0c 	bl	800231c <rtc_read>
 8002504:	4603      	mov	r3, r0
 8002506:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2bff      	cmp	r3, #255	@ 0xff
 800250c:	d101      	bne.n	8002512 <rtc_gettime+0xd0>
	{
		return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e008      	b.n	8002524 <rtc_gettime+0xe2>
	}
	timedate->year= bcd_to_decimal(temp);
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fd87 	bl	8002028 <bcd_to_decimal>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	715a      	strb	r2, [r3, #5]

	return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <rtc_setalarm>:


HAL_StatusTypeDef rtc_setalarm(rtc_timedate_t* timedate)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	//second alarm
	if(rtc_wirte(Second_alarm, (timedate->second==0xFF)?0x80:decimal_to_bcd(timedate->second))!=HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	789b      	ldrb	r3, [r3, #2]
 8002538:	2bff      	cmp	r3, #255	@ 0xff
 800253a:	d006      	beq.n	800254a <rtc_setalarm+0x1e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	789b      	ldrb	r3, [r3, #2]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fd4d 	bl	8001fe0 <decimal_to_bcd>
 8002546:	4603      	mov	r3, r0
 8002548:	e000      	b.n	800254c <rtc_setalarm+0x20>
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	4619      	mov	r1, r3
 800254e:	200a      	movs	r0, #10
 8002550:	f7ff feb0 	bl	80022b4 <rtc_wirte>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <rtc_setalarm+0x32>
	{
		return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07a      	b.n	8002654 <rtc_setalarm+0x128>
	}
	//minute alarm
	if(rtc_wirte(Minute_alarm, (timedate->minute==0xFF)?0x80:decimal_to_bcd(timedate->minute))!=HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	2bff      	cmp	r3, #255	@ 0xff
 8002564:	d006      	beq.n	8002574 <rtc_setalarm+0x48>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fd38 	bl	8001fe0 <decimal_to_bcd>
 8002570:	4603      	mov	r3, r0
 8002572:	e000      	b.n	8002576 <rtc_setalarm+0x4a>
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	4619      	mov	r1, r3
 8002578:	200b      	movs	r0, #11
 800257a:	f7ff fe9b 	bl	80022b4 <rtc_wirte>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <rtc_setalarm+0x5c>
	{
		return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e065      	b.n	8002654 <rtc_setalarm+0x128>
	}
	//hour alarm
	if(rtc_wirte(Hour_alarm, (timedate->hour==0xFF)?0x80:decimal_to_bcd(timedate->hour))!=HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2bff      	cmp	r3, #255	@ 0xff
 800258e:	d006      	beq.n	800259e <rtc_setalarm+0x72>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fd23 	bl	8001fe0 <decimal_to_bcd>
 800259a:	4603      	mov	r3, r0
 800259c:	e000      	b.n	80025a0 <rtc_setalarm+0x74>
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	4619      	mov	r1, r3
 80025a2:	200c      	movs	r0, #12
 80025a4:	f7ff fe86 	bl	80022b4 <rtc_wirte>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <rtc_setalarm+0x86>
	{
		return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e050      	b.n	8002654 <rtc_setalarm+0x128>
	}
	//day alarm
	if(rtc_wirte(Day_alarm, (timedate->day==0xFF)?0x80:decimal_to_bcd(timedate->day))!=HAL_OK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	78db      	ldrb	r3, [r3, #3]
 80025b6:	2bff      	cmp	r3, #255	@ 0xff
 80025b8:	d006      	beq.n	80025c8 <rtc_setalarm+0x9c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	78db      	ldrb	r3, [r3, #3]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fd0e 	bl	8001fe0 <decimal_to_bcd>
 80025c4:	4603      	mov	r3, r0
 80025c6:	e000      	b.n	80025ca <rtc_setalarm+0x9e>
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	4619      	mov	r1, r3
 80025cc:	200d      	movs	r0, #13
 80025ce:	f7ff fe71 	bl	80022b4 <rtc_wirte>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <rtc_setalarm+0xb0>
	{
		return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e03b      	b.n	8002654 <rtc_setalarm+0x128>
	}
	//week alarm
	if(rtc_wirte(Weekday_alarm, (timedate->weekday==0xFF)?0x80:decimal_to_bcd(timedate->weekday))!=HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	799b      	ldrb	r3, [r3, #6]
 80025e0:	2bff      	cmp	r3, #255	@ 0xff
 80025e2:	d006      	beq.n	80025f2 <rtc_setalarm+0xc6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	799b      	ldrb	r3, [r3, #6]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fcf9 	bl	8001fe0 <decimal_to_bcd>
 80025ee:	4603      	mov	r3, r0
 80025f0:	e000      	b.n	80025f4 <rtc_setalarm+0xc8>
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	4619      	mov	r1, r3
 80025f6:	200e      	movs	r0, #14
 80025f8:	f7ff fe5c 	bl	80022b4 <rtc_wirte>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <rtc_setalarm+0xda>
	{
		return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e026      	b.n	8002654 <rtc_setalarm+0x128>
	}

	uint8_t control2 = rtc_read(Control_2);
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff fe88 	bl	800231c <rtc_read>
 800260c:	4603      	mov	r3, r0
 800260e:	73fb      	strb	r3, [r7, #15]
	    if (control2 == 0xFF) return HAL_ERROR;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2bff      	cmp	r3, #255	@ 0xff
 8002614:	d101      	bne.n	800261a <rtc_setalarm+0xee>
 8002616:	2301      	movs	r3, #1
 8002618:	e01c      	b.n	8002654 <rtc_setalarm+0x128>
	    control2 &= ~(1 << 7);  // Clear MSF
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002620:	73fb      	strb	r3, [r7, #15]
	    control2 |= (1 << 1);   // Set AIE
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	73fb      	strb	r3, [r7, #15]
	    if (rtc_wirte(Control_2, control2) != HAL_OK) return HAL_ERROR;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	4619      	mov	r1, r3
 800262e:	2001      	movs	r0, #1
 8002630:	f7ff fe40 	bl	80022b4 <rtc_wirte>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <rtc_setalarm+0x112>
 800263a:	2301      	movs	r3, #1
 800263c:	e00a      	b.n	8002654 <rtc_setalarm+0x128>

	    HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm set complete\n\r", 20, HAL_MAX_DELAY);
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	2214      	movs	r2, #20
 8002644:	4905      	ldr	r1, [pc, #20]	@ (800265c <rtc_setalarm+0x130>)
 8002646:	4806      	ldr	r0, [pc, #24]	@ (8002660 <rtc_setalarm+0x134>)
 8002648:	f006 fab9 	bl	8008bbe <HAL_UART_Transmit>
	    read_and_transmit(Control_2);
 800264c:	2001      	movs	r0, #1
 800264e:	f000 f84f 	bl	80026f0 <read_and_transmit>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"interrupt notenabled\n\r", 22, HAL_MAX_DELAY);
		HAL_Delay(100);
	}*/
	return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	08010050 	.word	0x08010050
 8002660:	20000374 	.word	0x20000374

08002664 <rtc_clearalarm>:

HAL_StatusTypeDef rtc_clearalarm(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
	uint8_t control2;
	//read_and_transmit(0x01);
	control2=rtc_read(Control_2);
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff fe56 	bl	800231c <rtc_read>
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
	//read_and_transmit(0x01);
	if(control2==0xFF)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2bff      	cmp	r3, #255	@ 0xff
 8002678:	d101      	bne.n	800267e <rtc_clearalarm+0x1a>
	{
		return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e00e      	b.n	800269c <rtc_clearalarm+0x38>
	}
	control2 &=~(1<<4);
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f023 0310 	bic.w	r3, r3, #16
 8002684:	71fb      	strb	r3, [r7, #7]
	//control2=0x00;
	if(rtc_wirte(Control_2, control2)!=HAL_OK)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	4619      	mov	r1, r3
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff fe12 	bl	80022b4 <rtc_wirte>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <rtc_clearalarm+0x36>
	{
		//read_and_transmit(0x01);
		return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <rtc_clearalarm+0x38>
	}

	return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <rtc_check_alarm_flag>:

uint8_t rtc_check_alarm_flag(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	{
	uint8_t control2 = rtc_read(Control_2); // Read the Control_2 register
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7ff fe36 	bl	800231c <rtc_read>
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
	read_and_transmit(Control_2);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f000 f81b 	bl	80026f0 <read_and_transmit>
	    if (control2 == 0xFF) {
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2bff      	cmp	r3, #255	@ 0xff
 80026be:	d108      	bne.n	80026d2 <rtc_check_alarm_flag+0x2e>
	    	HAL_UART_Transmit(&huart3, (uint8_t*)"Flag read error\n\r", 17, HAL_MAX_DELAY);
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	2211      	movs	r2, #17
 80026c6:	4908      	ldr	r1, [pc, #32]	@ (80026e8 <rtc_check_alarm_flag+0x44>)
 80026c8:	4808      	ldr	r0, [pc, #32]	@ (80026ec <rtc_check_alarm_flag+0x48>)
 80026ca:	f006 fa78 	bl	8008bbe <HAL_UART_Transmit>
	        return 0xFF; // Error occurred while reading
 80026ce:	23ff      	movs	r3, #255	@ 0xff
 80026d0:	e005      	b.n	80026de <rtc_check_alarm_flag+0x3a>
	    }

	    return (control2 & (1 << 4)) ? 1 : 0; // Return 1 if AF is set, otherwise 0
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	111b      	asrs	r3, r3, #4
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
	}
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	08010068 	.word	0x08010068
 80026ec:	20000374 	.word	0x20000374

080026f0 <read_and_transmit>:
    rtc_wirte(Control_2, control2);
    //read_and_transmit(Control_2);
    return HAL_OK;
}

void read_and_transmit(uint8_t reg_addr) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b090      	sub	sp, #64	@ 0x40
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
    char uart_buffer[50];
    uint8_t reg_value = rtc_read(reg_addr);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe0d 	bl	800231c <rtc_read>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Check if the read was successful
    if (reg_value == 0xFF) {
 8002708:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800270c:	2bff      	cmp	r3, #255	@ 0xff
 800270e:	d107      	bne.n	8002720 <read_and_transmit+0x30>
        // Error handling: Send an error message over UART
        sprintf(uart_buffer, "Error reading register 0x%02X\r\n", reg_addr);
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	490f      	ldr	r1, [pc, #60]	@ (8002754 <read_and_transmit+0x64>)
 8002718:	4618      	mov	r0, r3
 800271a:	f00b f9eb 	bl	800daf4 <siprintf>
 800271e:	e007      	b.n	8002730 <read_and_transmit+0x40>
    } else {
        // Send the read value over UART
        sprintf(uart_buffer, "Register 0x%02X: 0x%02X\r\n", reg_addr, reg_value);
 8002720:	79fa      	ldrb	r2, [r7, #7]
 8002722:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002726:	f107 000c 	add.w	r0, r7, #12
 800272a:	490b      	ldr	r1, [pc, #44]	@ (8002758 <read_and_transmit+0x68>)
 800272c:	f00b f9e2 	bl	800daf4 <siprintf>
    }

    // Transmit the message via UART3
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fd4b 	bl	80001d0 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	f107 010c 	add.w	r1, r7, #12
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <read_and_transmit+0x6c>)
 8002748:	f006 fa39 	bl	8008bbe <HAL_UART_Transmit>
}
 800274c:	bf00      	nop
 800274e:	3740      	adds	r7, #64	@ 0x40
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	0801007c 	.word	0x0801007c
 8002758:	0801009c 	.word	0x0801009c
 800275c:	20000374 	.word	0x20000374

08002760 <senddata>:

char uart_buffer[50]; // Definition of uart_buffer
int id1 = 0;          // Definition of id1

void senddata(char* str,uint8_t size)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r",2, HAL_MAX_DELAY);
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	2202      	movs	r2, #2
 8002772:	4909      	ldr	r1, [pc, #36]	@ (8002798 <senddata+0x38>)
 8002774:	4809      	ldr	r0, [pc, #36]	@ (800279c <senddata+0x3c>)
 8002776:	f006 fa22 	bl	8008bbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str,size, HAL_MAX_DELAY);
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	b29a      	uxth	r2, r3
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4805      	ldr	r0, [pc, #20]	@ (800279c <senddata+0x3c>)
 8002786:	f006 fa1a 	bl	8008bbe <HAL_UART_Transmit>
	HAL_Delay(100);
 800278a:	2064      	movs	r0, #100	@ 0x64
 800278c:	f001 f80a 	bl	80037a4 <HAL_Delay>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	080100b8 	.word	0x080100b8
 800279c:	20000374 	.word	0x20000374

080027a0 <HAL_UART_RxCpltCallback>:
	return rxdata1;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a21      	ldr	r2, [pc, #132]	@ (8002834 <HAL_UART_RxCpltCallback+0x94>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d13d      	bne.n	800282e <HAL_UART_RxCpltCallback+0x8e>
	{
		if(rxindex<RX_buffersize-1)
 80027b2:	4b21      	ldr	r3, [pc, #132]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2bff      	cmp	r3, #255	@ 0xff
 80027ba:	d00c      	beq.n	80027d6 <HAL_UART_RxCpltCallback+0x36>
		{
			rxindex++;
 80027bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 80027c8:	701a      	strb	r2, [r3, #0]
		{
			rxbuffer[RX_buffersize-1]='\0';
			datarecived=1;
			return;
		}
		if(rxindex>=strlen(EOP_string)&&strncmp(&rxbuffer[rxindex-strlen(EOP_string)],EOP_string,strlen(EOP_string))==0)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d921      	bls.n	8002818 <HAL_UART_RxCpltCallback+0x78>
 80027d4:	e007      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x46>
			rxbuffer[RX_buffersize-1]='\0';
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_UART_RxCpltCallback+0x9c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
			datarecived=1;
 80027de:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <HAL_UART_RxCpltCallback+0xa0>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
			return;
 80027e4:	e023      	b.n	800282e <HAL_UART_RxCpltCallback+0x8e>
		if(rxindex>=strlen(EOP_string)&&strncmp(&rxbuffer[rxindex-strlen(EOP_string)],EOP_string,strlen(EOP_string))==0)
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3b03      	subs	r3, #3
 80027ee:	4a13      	ldr	r2, [pc, #76]	@ (800283c <HAL_UART_RxCpltCallback+0x9c>)
 80027f0:	4413      	add	r3, r2
 80027f2:	2203      	movs	r2, #3
 80027f4:	4913      	ldr	r1, [pc, #76]	@ (8002844 <HAL_UART_RxCpltCallback+0xa4>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00b fa4c 	bl	800dc94 <strncmp>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_UART_RxCpltCallback+0x78>
		{
			rxbuffer[RX_buffersize-1]='\0';
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_UART_RxCpltCallback+0x9c>)
 8002804:	2200      	movs	r2, #0
 8002806:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
			datarecived=1;
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <HAL_UART_RxCpltCallback+0xa0>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
			rxindex=0;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]

			return;
 8002816:	e00a      	b.n	800282e <HAL_UART_RxCpltCallback+0x8e>
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 8002818:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <HAL_UART_RxCpltCallback+0x98>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_UART_RxCpltCallback+0x9c>)
 8002822:	4413      	add	r3, r2
 8002824:	2201      	movs	r2, #1
 8002826:	4619      	mov	r1, r3
 8002828:	4807      	ldr	r0, [pc, #28]	@ (8002848 <HAL_UART_RxCpltCallback+0xa8>)
 800282a:	f006 fa5a 	bl	8008ce2 <HAL_UART_Receive_IT>
	}

}
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40004800 	.word	0x40004800
 8002838:	2000562c 	.word	0x2000562c
 800283c:	2000552c 	.word	0x2000552c
 8002840:	2000562d 	.word	0x2000562d
 8002844:	080100bc 	.word	0x080100bc
 8002848:	20000374 	.word	0x20000374

0800284c <parse_and_print>:
}*/




void parse_and_print(char *buffer) {
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b0df      	sub	sp, #380	@ 0x17c
 8002850:	af02      	add	r7, sp, #8
 8002852:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002856:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800285a:	6018      	str	r0, [r3, #0]
    char temp[RX_buffersize]; // Temporary buffer to hold a copy of input string
    strcpy(temp, buffer); // Copy to avoid modifying original string
 800285c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002860:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002864:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	4610      	mov	r0, r2
 800286c:	f00b fb03 	bl	800de76 <strcpy>


    char *token = strtok(temp, "|");
 8002870:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002874:	49bf      	ldr	r1, [pc, #764]	@ (8002b74 <parse_and_print+0x328>)
 8002876:	4618      	mov	r0, r3
 8002878:	f00b fa1e 	bl	800dcb8 <strtok>
 800287c:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    //static uint8_t alarm_count = 0;
    //static uint8_t current_idx = 0;


    // Extract and print ID
    if (token) {
 8002880:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d024      	beq.n	80028d2 <parse_and_print+0x86>
    	int id;
    	sscanf(token,"%d",&id);
 8002888:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800288c:	461a      	mov	r2, r3
 800288e:	49ba      	ldr	r1, [pc, #744]	@ (8002b78 <parse_and_print+0x32c>)
 8002890:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002894:	f00b f94e 	bl	800db34 <siscanf>
        sprintf(msg, "id: %d\r\n", id);
 8002898:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800289c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028a6:	49b5      	ldr	r1, [pc, #724]	@ (8002b7c <parse_and_print+0x330>)
 80028a8:	4618      	mov	r0, r3
 80028aa:	f00b f923 	bl	800daf4 <siprintf>
        UART_Print(msg);
 80028ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 faa4 	bl	8002e00 <UART_Print>
        token = strtok(NULL, "|");
 80028b8:	49ae      	ldr	r1, [pc, #696]	@ (8002b74 <parse_and_print+0x328>)
 80028ba:	2000      	movs	r0, #0
 80028bc:	f00b f9fc 	bl	800dcb8 <strtok>
 80028c0:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
        id1=id;
 80028c4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80028c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4aac      	ldr	r2, [pc, #688]	@ (8002b80 <parse_and_print+0x334>)
 80028d0:	6013      	str	r3, [r2, #0]
    }

    // Extract and print Name
    if (token) {
 80028d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <parse_and_print+0xb4>
        sprintf(msg, "name: %s\r\n", token);
 80028da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028de:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80028e2:	49a8      	ldr	r1, [pc, #672]	@ (8002b84 <parse_and_print+0x338>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00b f905 	bl	800daf4 <siprintf>
        UART_Print(msg);
 80028ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa86 	bl	8002e00 <UART_Print>
        token = strtok(NULL, "|");
 80028f4:	499f      	ldr	r1, [pc, #636]	@ (8002b74 <parse_and_print+0x328>)
 80028f6:	2000      	movs	r0, #0
 80028f8:	f00b f9de 	bl	800dcb8 <strtok>
 80028fc:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }

    // Extract and print Location
    if (token) {
 8002900:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d012      	beq.n	800292e <parse_and_print+0xe2>
        sprintf(msg, "loc: %s\r\n", token);
 8002908:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800290c:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002910:	499d      	ldr	r1, [pc, #628]	@ (8002b88 <parse_and_print+0x33c>)
 8002912:	4618      	mov	r0, r3
 8002914:	f00b f8ee 	bl	800daf4 <siprintf>
        UART_Print(msg);
 8002918:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fa6f 	bl	8002e00 <UART_Print>
        token = strtok(NULL, "|");
 8002922:	4994      	ldr	r1, [pc, #592]	@ (8002b74 <parse_and_print+0x328>)
 8002924:	2000      	movs	r0, #0
 8002926:	f00b f9c7 	bl	800dcb8 <strtok>
 800292a:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }
    if(id1==1)
 800292e:	4b94      	ldr	r3, [pc, #592]	@ (8002b80 <parse_and_print+0x334>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 80ef 	bne.w	8002b16 <parse_and_print+0x2ca>
    {
    // Extract and print Time (hh:mm:ss)
    if (token) {
 8002938:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d060      	beq.n	8002a02 <parse_and_print+0x1b6>
        UART_Print("time-\r\n");
 8002940:	4892      	ldr	r0, [pc, #584]	@ (8002b8c <parse_and_print+0x340>)
 8002942:	f000 fa5d 	bl	8002e00 <UART_Print>
        int hh, mm, ss;
        if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 8002946:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800294a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800294e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	460b      	mov	r3, r1
 8002956:	498e      	ldr	r1, [pc, #568]	@ (8002b90 <parse_and_print+0x344>)
 8002958:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 800295c:	f00b f8ea 	bl	800db34 <siscanf>
 8002960:	4603      	mov	r3, r0
 8002962:	2b03      	cmp	r3, #3
 8002964:	d147      	bne.n	80029f6 <parse_and_print+0x1aa>
            sprintf(msg, "hour: %d\r\n", hh);
 8002966:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800296a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002974:	4987      	ldr	r1, [pc, #540]	@ (8002b94 <parse_and_print+0x348>)
 8002976:	4618      	mov	r0, r3
 8002978:	f00b f8bc 	bl	800daf4 <siprintf>
            UART_Print(msg);
 800297c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fa3d 	bl	8002e00 <UART_Print>
            sprintf(msg, "min: %d\r\n", mm);
 8002986:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800298a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002994:	4980      	ldr	r1, [pc, #512]	@ (8002b98 <parse_and_print+0x34c>)
 8002996:	4618      	mov	r0, r3
 8002998:	f00b f8ac 	bl	800daf4 <siprintf>
            UART_Print(msg);
 800299c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fa2d 	bl	8002e00 <UART_Print>
            sprintf(msg, "sec: %d\r\n", ss);
 80029a6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029aa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029b4:	4979      	ldr	r1, [pc, #484]	@ (8002b9c <parse_and_print+0x350>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f00b f89c 	bl	800daf4 <siprintf>
            UART_Print(msg);
 80029bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fa1d 	bl	8002e00 <UART_Print>
            timedate.hour=hh;
 80029c6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b73      	ldr	r3, [pc, #460]	@ (8002ba0 <parse_and_print+0x354>)
 80029d4:	701a      	strb	r2, [r3, #0]
            timedate.minute=mm;
 80029d6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba0 <parse_and_print+0x354>)
 80029e4:	705a      	strb	r2, [r3, #1]
            timedate.second=ss;
 80029e6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80029ea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba0 <parse_and_print+0x354>)
 80029f4:	709a      	strb	r2, [r3, #2]
        }
        token = strtok(NULL, "|");
 80029f6:	495f      	ldr	r1, [pc, #380]	@ (8002b74 <parse_and_print+0x328>)
 80029f8:	2000      	movs	r0, #0
 80029fa:	f00b f95d 	bl	800dcb8 <strtok>
 80029fe:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }

    // Extract and print Date (mm/dd/yyyy)
    if (token) {
 8002a02:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d064      	beq.n	8002ad4 <parse_and_print+0x288>
        UART_Print("date-\r\n");
 8002a0a:	4866      	ldr	r0, [pc, #408]	@ (8002ba4 <parse_and_print+0x358>)
 8002a0c:	f000 f9f8 	bl	8002e00 <UART_Print>
        int month, day, year;
        if (sscanf(token, "%d/%d/%d", &month, &day, &year) == 3) {
 8002a10:	f107 0120 	add.w	r1, r7, #32
 8002a14:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4961      	ldr	r1, [pc, #388]	@ (8002ba8 <parse_and_print+0x35c>)
 8002a22:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002a26:	f00b f885 	bl	800db34 <siscanf>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d148      	bne.n	8002ac2 <parse_and_print+0x276>
            sprintf(msg, "month: %d\r\n", month);
 8002a30:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a34:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a3e:	495b      	ldr	r1, [pc, #364]	@ (8002bac <parse_and_print+0x360>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00b f857 	bl	800daf4 <siprintf>
            UART_Print(msg);
 8002a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f9d8 	bl	8002e00 <UART_Print>
            sprintf(msg, "day: %d\r\n", day);
 8002a50:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a5e:	4954      	ldr	r1, [pc, #336]	@ (8002bb0 <parse_and_print+0x364>)
 8002a60:	4618      	mov	r0, r3
 8002a62:	f00b f847 	bl	800daf4 <siprintf>
            UART_Print(msg);
 8002a66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f9c8 	bl	8002e00 <UART_Print>
            sprintf(msg, "year: %d\r\n", year);
 8002a70:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a74:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a7e:	494d      	ldr	r1, [pc, #308]	@ (8002bb4 <parse_and_print+0x368>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00b f837 	bl	800daf4 <siprintf>
            UART_Print(msg);
 8002a86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f9b8 	bl	8002e00 <UART_Print>
            timedate.month=month;
 8002a90:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002a94:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b40      	ldr	r3, [pc, #256]	@ (8002ba0 <parse_and_print+0x354>)
 8002a9e:	711a      	strb	r2, [r3, #4]
            timedate.day=day;
 8002aa0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002aa4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba0 <parse_and_print+0x354>)
 8002aae:	70da      	strb	r2, [r3, #3]
            timedate.year=year;
 8002ab0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ab4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b38      	ldr	r3, [pc, #224]	@ (8002ba0 <parse_and_print+0x354>)
 8002abe:	715a      	strb	r2, [r3, #5]
 8002ac0:	e002      	b.n	8002ac8 <parse_and_print+0x27c>
        } else {
            UART_Print("Error: Invalid Date Format\r\n");
 8002ac2:	483d      	ldr	r0, [pc, #244]	@ (8002bb8 <parse_and_print+0x36c>)
 8002ac4:	f000 f99c 	bl	8002e00 <UART_Print>
        }
        token = strtok(NULL, "|");
 8002ac8:	492a      	ldr	r1, [pc, #168]	@ (8002b74 <parse_and_print+0x328>)
 8002aca:	2000      	movs	r0, #0
 8002acc:	f00b f8f4 	bl	800dcb8 <strtok>
 8002ad0:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    }
    ret=rtc_settime(&timedate);
 8002ad4:	4832      	ldr	r0, [pc, #200]	@ (8002ba0 <parse_and_print+0x354>)
 8002ad6:	f7ff fc51 	bl	800237c <rtc_settime>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <parse_and_print+0x370>)
 8002ae0:	701a      	strb	r2, [r3, #0]
    	if(ret==HAL_OK)
 8002ae2:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <parse_and_print+0x370>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <parse_and_print+0x2b4>
    	{
    		HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	2211      	movs	r2, #17
 8002af0:	4933      	ldr	r1, [pc, #204]	@ (8002bc0 <parse_and_print+0x374>)
 8002af2:	4834      	ldr	r0, [pc, #208]	@ (8002bc4 <parse_and_print+0x378>)
 8002af4:	f006 f863 	bl	8008bbe <HAL_UART_Transmit>
    		HAL_Delay(100);
 8002af8:	2064      	movs	r0, #100	@ 0x64
 8002afa:	f000 fe53 	bl	80037a4 <HAL_Delay>
 8002afe:	e162      	b.n	8002dc6 <parse_and_print+0x57a>
    	}
    	else
    	{
    		HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	2214      	movs	r2, #20
 8002b06:	4930      	ldr	r1, [pc, #192]	@ (8002bc8 <parse_and_print+0x37c>)
 8002b08:	482e      	ldr	r0, [pc, #184]	@ (8002bc4 <parse_and_print+0x378>)
 8002b0a:	f006 f858 	bl	8008bbe <HAL_UART_Transmit>
    		HAL_Delay(100);
 8002b0e:	2064      	movs	r0, #100	@ 0x64
 8002b10:	f000 fe48 	bl	80037a4 <HAL_Delay>
 8002b14:	e157      	b.n	8002dc6 <parse_and_print+0x57a>
    	          {
    	        	  HAL_UART_Transmit(&huart3, (uint8_t*)"alarm notset\n\r", 14, HAL_MAX_DELAY);
    	        	  HAL_Delay(100);
    	          }
    }*/
    else if (id1 == 2) {
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <parse_and_print+0x334>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	f040 8153 	bne.w	8002dc6 <parse_and_print+0x57a>
            if (token) {
 8002b20:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 814e 	beq.w	8002dc6 <parse_and_print+0x57a>

            	int num_alarms;
            	sscanf(token, "%d", &num_alarms);
 8002b2a:	f107 0318 	add.w	r3, r7, #24
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4911      	ldr	r1, [pc, #68]	@ (8002b78 <parse_and_print+0x32c>)
 8002b32:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002b36:	f00a fffd 	bl	800db34 <siscanf>
            	token = strtok(NULL, "|");
 8002b3a:	490e      	ldr	r1, [pc, #56]	@ (8002b74 <parse_and_print+0x328>)
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f00b f8bb 	bl	800dcb8 <strtok>
 8002b42:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c


            	if (num_alarms > MAX_ALARMS) {
 8002b46:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b4a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b0e      	cmp	r3, #14
 8002b52:	dd07      	ble.n	8002b64 <parse_and_print+0x318>
            		HAL_UART_Transmit(&huart3, (uint8_t*)"Too many!\n\r", 11, HAL_MAX_DELAY);
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	220b      	movs	r2, #11
 8002b5a:	491c      	ldr	r1, [pc, #112]	@ (8002bcc <parse_and_print+0x380>)
 8002b5c:	4819      	ldr	r0, [pc, #100]	@ (8002bc4 <parse_and_print+0x378>)
 8002b5e:	f006 f82e 	bl	8008bbe <HAL_UART_Transmit>
 8002b62:	e130      	b.n	8002dc6 <parse_and_print+0x57a>
            		return;
            	        }
            	alarm_count = 0;
 8002b64:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <parse_and_print+0x384>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
            	current_idx = 0;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <parse_and_print+0x388>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
            	while (token && alarm_count < num_alarms)
 8002b70:	e0d9      	b.n	8002d26 <parse_and_print+0x4da>
 8002b72:	bf00      	nop
 8002b74:	080100c0 	.word	0x080100c0
 8002b78:	080100c4 	.word	0x080100c4
 8002b7c:	080100c8 	.word	0x080100c8
 8002b80:	2000566c 	.word	0x2000566c
 8002b84:	080100d4 	.word	0x080100d4
 8002b88:	080100e0 	.word	0x080100e0
 8002b8c:	080100ec 	.word	0x080100ec
 8002b90:	080100f4 	.word	0x080100f4
 8002b94:	08010100 	.word	0x08010100
 8002b98:	0801010c 	.word	0x0801010c
 8002b9c:	08010118 	.word	0x08010118
 8002ba0:	20005630 	.word	0x20005630
 8002ba4:	08010124 	.word	0x08010124
 8002ba8:	0801012c 	.word	0x0801012c
 8002bac:	08010138 	.word	0x08010138
 8002bb0:	08010144 	.word	0x08010144
 8002bb4:	08010150 	.word	0x08010150
 8002bb8:	0801015c 	.word	0x0801015c
 8002bbc:	200000b0 	.word	0x200000b0
 8002bc0:	0801017c 	.word	0x0801017c
 8002bc4:	20000374 	.word	0x20000374
 8002bc8:	08010190 	.word	0x08010190
 8002bcc:	080101a8 	.word	0x080101a8
 8002bd0:	2000552a 	.word	0x2000552a
 8002bd4:	2000552b 	.word	0x2000552b
            	{


                UART_Print("time-\r\n");
 8002bd8:	487d      	ldr	r0, [pc, #500]	@ (8002dd0 <parse_and_print+0x584>)
 8002bda:	f000 f911 	bl	8002e00 <UART_Print>
                int hh, mm, ss;
                if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 8002bde:	f107 0110 	add.w	r1, r7, #16
 8002be2:	f107 0214 	add.w	r2, r7, #20
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	460b      	mov	r3, r1
 8002bee:	4979      	ldr	r1, [pc, #484]	@ (8002dd4 <parse_and_print+0x588>)
 8002bf0:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002bf4:	f00a ff9e 	bl	800db34 <siscanf>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	f040 808d 	bne.w	8002d1a <parse_and_print+0x4ce>
                    timedate.day = 0xFF;    // Disable day
                    timedate.weekday = 0xFF; // Disable weekday
                    timedate.month = 0xFF;  // Optional: Disable month
                    timedate.year = 0xFF;   // Optional: Disable year*/

                	sprintf(msg, "Alarm %d: %02d:%02d:%02d\r\n", alarm_count + 1, hh, mm, ss);
 8002c00:	4b75      	ldr	r3, [pc, #468]	@ (8002dd8 <parse_and_print+0x58c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	1c59      	adds	r1, r3, #1
 8002c06:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c0a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002c0e:	681c      	ldr	r4, [r3, #0]
 8002c10:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c14:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8002c1e:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	460a      	mov	r2, r1
 8002c30:	496a      	ldr	r1, [pc, #424]	@ (8002ddc <parse_and_print+0x590>)
 8002c32:	f00a ff5f 	bl	800daf4 <siprintf>
                	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fac8 	bl	80001d0 <strlen>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	4864      	ldr	r0, [pc, #400]	@ (8002de0 <parse_and_print+0x594>)
 8002c4e:	f005 ffb6 	bl	8008bbe <HAL_UART_Transmit>
                	alarm_queue[alarm_count].hour = hh;
 8002c52:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c56:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd8 <parse_and_print+0x58c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	b2d0      	uxtb	r0, r2
 8002c64:	4a5f      	ldr	r2, [pc, #380]	@ (8002de4 <parse_and_print+0x598>)
 8002c66:	460b      	mov	r3, r1
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a5b      	subs	r3, r3, r1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4602      	mov	r2, r0
 8002c70:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].minute = mm;
 8002c72:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c76:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b56      	ldr	r3, [pc, #344]	@ (8002dd8 <parse_and_print+0x58c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	b2d0      	uxtb	r0, r2
 8002c84:	4a57      	ldr	r2, [pc, #348]	@ (8002de4 <parse_and_print+0x598>)
 8002c86:	460b      	mov	r3, r1
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	1a5b      	subs	r3, r3, r1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3301      	adds	r3, #1
 8002c90:	4602      	mov	r2, r0
 8002c92:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].second = ss;
 8002c94:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c98:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd8 <parse_and_print+0x58c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	b2d0      	uxtb	r0, r2
 8002ca6:	4a4f      	ldr	r2, [pc, #316]	@ (8002de4 <parse_and_print+0x598>)
 8002ca8:	460b      	mov	r3, r1
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a5b      	subs	r3, r3, r1
 8002cae:	4413      	add	r3, r2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].day = 0xFF;
 8002cb6:	4b48      	ldr	r3, [pc, #288]	@ (8002dd8 <parse_and_print+0x58c>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4a49      	ldr	r2, [pc, #292]	@ (8002de4 <parse_and_print+0x598>)
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a5b      	subs	r3, r3, r1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	22ff      	movs	r2, #255	@ 0xff
 8002cca:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].weekday = 0xFF;
 8002ccc:	4b42      	ldr	r3, [pc, #264]	@ (8002dd8 <parse_and_print+0x58c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4a44      	ldr	r2, [pc, #272]	@ (8002de4 <parse_and_print+0x598>)
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a5b      	subs	r3, r3, r1
 8002cda:	4413      	add	r3, r2
 8002cdc:	3306      	adds	r3, #6
 8002cde:	22ff      	movs	r2, #255	@ 0xff
 8002ce0:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].month = 0xFF;
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <parse_and_print+0x58c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8002de4 <parse_and_print+0x598>)
 8002cea:	460b      	mov	r3, r1
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	22ff      	movs	r2, #255	@ 0xff
 8002cf6:	701a      	strb	r2, [r3, #0]
                	alarm_queue[alarm_count].year = 0xFF;
 8002cf8:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <parse_and_print+0x58c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4a39      	ldr	r2, [pc, #228]	@ (8002de4 <parse_and_print+0x598>)
 8002d00:	460b      	mov	r3, r1
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a5b      	subs	r3, r3, r1
 8002d06:	4413      	add	r3, r2
 8002d08:	3305      	adds	r3, #5
 8002d0a:	22ff      	movs	r2, #255	@ 0xff
 8002d0c:	701a      	strb	r2, [r3, #0]
                	alarm_count++;
 8002d0e:	4b32      	ldr	r3, [pc, #200]	@ (8002dd8 <parse_and_print+0x58c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b30      	ldr	r3, [pc, #192]	@ (8002dd8 <parse_and_print+0x58c>)
 8002d18:	701a      	strb	r2, [r3, #0]

                }
                token = strtok(NULL, "|");
 8002d1a:	4933      	ldr	r1, [pc, #204]	@ (8002de8 <parse_and_print+0x59c>)
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f00a ffcb 	bl	800dcb8 <strtok>
 8002d22:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
            	while (token && alarm_count < num_alarms)
 8002d26:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <parse_and_print+0x4f8>
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <parse_and_print+0x58c>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d38:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f6ff af4a 	blt.w	8002bd8 <parse_and_print+0x38c>
            }

            	eeprom_store_config(buffer);
 8002d44:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d48:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f7ff f8a5 	bl	8001e9c <eeprom_store_config>
            	HAL_UART_Transmit(&huart3, (uint8_t*)"Alarms set\n\r", 12, HAL_MAX_DELAY);
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	220c      	movs	r2, #12
 8002d58:	4924      	ldr	r1, [pc, #144]	@ (8002dec <parse_and_print+0x5a0>)
 8002d5a:	4821      	ldr	r0, [pc, #132]	@ (8002de0 <parse_and_print+0x594>)
 8002d5c:	f005 ff2f 	bl	8008bbe <HAL_UART_Transmit>

            	if (alarm_count > 0) {
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <parse_and_print+0x58c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02e      	beq.n	8002dc6 <parse_and_print+0x57a>
            	            ret = rtc_setalarm(&alarm_queue[0]);
 8002d68:	481e      	ldr	r0, [pc, #120]	@ (8002de4 <parse_and_print+0x598>)
 8002d6a:	f7ff fbdf 	bl	800252c <rtc_setalarm>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <parse_and_print+0x5a4>)
 8002d74:	701a      	strb	r2, [r3, #0]
            	            if (ret == HAL_OK) {
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <parse_and_print+0x5a4>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d123      	bne.n	8002dc6 <parse_and_print+0x57a>
            	                HAL_UART_Transmit(&huart3, (uint8_t*)"First alarm set\n\r", 17, HAL_MAX_DELAY);
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	2211      	movs	r2, #17
 8002d84:	491b      	ldr	r1, [pc, #108]	@ (8002df4 <parse_and_print+0x5a8>)
 8002d86:	4816      	ldr	r0, [pc, #88]	@ (8002de0 <parse_and_print+0x594>)
 8002d88:	f005 ff19 	bl	8008bbe <HAL_UART_Transmit>
            	                if (alarm_count > 1) {
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <parse_and_print+0x58c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d918      	bls.n	8002dc6 <parse_and_print+0x57a>
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <parse_and_print+0x598>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002d98:	461a      	mov	r2, r3
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002d9a:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <parse_and_print+0x598>)
 8002d9c:	785b      	ldrb	r3, [r3, #1]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002d9e:	4619      	mov	r1, r3
            	                            alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 8002da0:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <parse_and_print+0x598>)
 8002da2:	789b      	ldrb	r3, [r3, #2]
            	                    sprintf(uart_buffer, "Next: %02d:%02d:%02d\n\r",
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	460b      	mov	r3, r1
 8002da8:	4913      	ldr	r1, [pc, #76]	@ (8002df8 <parse_and_print+0x5ac>)
 8002daa:	4814      	ldr	r0, [pc, #80]	@ (8002dfc <parse_and_print+0x5b0>)
 8002dac:	f00a fea2 	bl	800daf4 <siprintf>
            	                    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002db0:	4812      	ldr	r0, [pc, #72]	@ (8002dfc <parse_and_print+0x5b0>)
 8002db2:	f7fd fa0d 	bl	80001d0 <strlen>
 8002db6:	4603      	mov	r3, r0
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	490f      	ldr	r1, [pc, #60]	@ (8002dfc <parse_and_print+0x5b0>)
 8002dc0:	4807      	ldr	r0, [pc, #28]	@ (8002de0 <parse_and_print+0x594>)
 8002dc2:	f005 fefc 	bl	8008bbe <HAL_UART_Transmit>
                }
    }



}
 8002dc6:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	080100ec 	.word	0x080100ec
 8002dd4:	080100f4 	.word	0x080100f4
 8002dd8:	2000552a 	.word	0x2000552a
 8002ddc:	080101b4 	.word	0x080101b4
 8002de0:	20000374 	.word	0x20000374
 8002de4:	200054c8 	.word	0x200054c8
 8002de8:	080100c0 	.word	0x080100c0
 8002dec:	080101d0 	.word	0x080101d0
 8002df0:	200000b0 	.word	0x200000b0
 8002df4:	080101e0 	.word	0x080101e0
 8002df8:	080101f4 	.word	0x080101f4
 8002dfc:	20005638 	.word	0x20005638

08002e00 <UART_Print>:


void UART_Print(const char *str) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fd f9e1 	bl	80001d0 <strlen>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <UART_Print+0x28>)
 8002e1a:	f005 fed0 	bl	8008bbe <HAL_UART_Transmit>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000374 	.word	0x20000374

08002e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <HAL_MspInit+0x4c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e78 <HAL_MspInit+0x4c>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <HAL_MspInit+0x4c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <HAL_MspInit+0x4c>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	4a08      	ldr	r2, [pc, #32]	@ (8002e78 <HAL_MspInit+0x4c>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_MspInit+0x4c>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08c      	sub	sp, #48	@ 0x30
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]

    if(hi2c->Instance==I2C1) // Add I2C1 configuration
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a32      	ldr	r2, [pc, #200]	@ (8002f64 <HAL_I2C_MspInit+0xe8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d12c      	bne.n	8002ef8 <HAL_I2C_MspInit+0x7c>
    {
      /* USER CODE BEGIN I2C1_MspInit 0 */
      /* USER CODE END I2C1_MspInit 0 */

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	4a30      	ldr	r2, [pc, #192]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eae:	4b2e      	ldr	r3, [pc, #184]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
      /**I2C1 GPIO Configuration
      PB6     ------> I2C1_SCL
      PB7     ------> I2C1_SDA
      */
      GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002eba:	23c0      	movs	r3, #192	@ 0xc0
 8002ebc:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8002ebe:	2312      	movs	r3, #18
 8002ec0:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;     // External pull-ups required
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // AF4 for I2C1
 8002eca:	2304      	movs	r3, #4
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4825      	ldr	r0, [pc, #148]	@ (8002f6c <HAL_I2C_MspInit+0xf0>)
 8002ed6:	f001 f99d 	bl	8004214 <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_I2C1_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	4b22      	ldr	r3, [pc, #136]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4a21      	ldr	r2, [pc, #132]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002ee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eea:	4b1f      	ldr	r3, [pc, #124]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ef6:	e031      	b.n	8002f5c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <HAL_I2C_MspInit+0xf4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12c      	bne.n	8002f5c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f24:	2312      	movs	r3, #18
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f30:	2304      	movs	r3, #4
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <HAL_I2C_MspInit+0xf0>)
 8002f3c:	f001 f96a 	bl	8004214 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002f4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_I2C_MspInit+0xec>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3730      	adds	r7, #48	@ 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40005800 	.word	0x40005800

08002f74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	@ 0x38
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a91      	ldr	r2, [pc, #580]	@ (80031d8 <HAL_I2S_MspInit+0x264>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f040 808c 	bne.w	80030b0 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	4a8e      	ldr	r2, [pc, #568]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	4b88      	ldr	r3, [pc, #544]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	4a87      	ldr	r2, [pc, #540]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc4:	4b85      	ldr	r3, [pc, #532]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	4b81      	ldr	r3, [pc, #516]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	4a80      	ldr	r2, [pc, #512]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fda:	f043 0302 	orr.w	r3, r3, #2
 8002fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe0:	4b7e      	ldr	r3, [pc, #504]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fec:	2308      	movs	r3, #8
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ffc:	2305      	movs	r3, #5
 8002ffe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003004:	4619      	mov	r1, r3
 8003006:	4876      	ldr	r0, [pc, #472]	@ (80031e0 <HAL_I2S_MspInit+0x26c>)
 8003008:	f001 f904 	bl	8004214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800300c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800301e:	2305      	movs	r3, #5
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	486e      	ldr	r0, [pc, #440]	@ (80031e4 <HAL_I2S_MspInit+0x270>)
 800302a:	f001 f8f3 	bl	8004214 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800302e:	4b6e      	ldr	r3, [pc, #440]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003030:	4a6e      	ldr	r2, [pc, #440]	@ (80031ec <HAL_I2S_MspInit+0x278>)
 8003032:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003034:	4b6c      	ldr	r3, [pc, #432]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003036:	2200      	movs	r2, #0
 8003038:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800303a:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003040:	4b69      	ldr	r3, [pc, #420]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003046:	4b68      	ldr	r3, [pc, #416]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003048:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800304c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800304e:	4b66      	ldr	r3, [pc, #408]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003050:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003054:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003056:	4b64      	ldr	r3, [pc, #400]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800305c:	4b62      	ldr	r3, [pc, #392]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 800305e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003062:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003064:	4b60      	ldr	r3, [pc, #384]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800306a:	4b5f      	ldr	r3, [pc, #380]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 800306c:	2204      	movs	r2, #4
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003070:	4b5d      	ldr	r3, [pc, #372]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003072:	2203      	movs	r2, #3
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003076:	4b5c      	ldr	r3, [pc, #368]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003078:	2200      	movs	r2, #0
 800307a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800307c:	4b5a      	ldr	r3, [pc, #360]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003082:	4859      	ldr	r0, [pc, #356]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003084:	f000 fcc4 	bl	8003a10 <HAL_DMA_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 800308e:	f7fe fe57 	bl	8001d40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a54      	ldr	r2, [pc, #336]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 8003096:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003098:	4a53      	ldr	r2, [pc, #332]	@ (80031e8 <HAL_I2S_MspInit+0x274>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	2024      	movs	r0, #36	@ 0x24
 80030a4:	f000 fc7d 	bl	80039a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030a8:	2024      	movs	r0, #36	@ 0x24
 80030aa:	f000 fc96 	bl	80039da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030ae:	e08f      	b.n	80031d0 <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a4e      	ldr	r2, [pc, #312]	@ (80031f0 <HAL_I2S_MspInit+0x27c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	f040 808a 	bne.w	80031d0 <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	4b46      	ldr	r3, [pc, #280]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	4a45      	ldr	r2, [pc, #276]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80030cc:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	4a3e      	ldr	r2, [pc, #248]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e8:	4b3c      	ldr	r3, [pc, #240]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	4a37      	ldr	r2, [pc, #220]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	6313      	str	r3, [r2, #48]	@ 0x30
 8003104:	4b35      	ldr	r3, [pc, #212]	@ (80031dc <HAL_I2S_MspInit+0x268>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003110:	2310      	movs	r3, #16
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003120:	2306      	movs	r3, #6
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4832      	ldr	r0, [pc, #200]	@ (80031f4 <HAL_I2S_MspInit+0x280>)
 800312c:	f001 f872 	bl	8004214 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003130:	2328      	movs	r3, #40	@ 0x28
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003140:	2306      	movs	r3, #6
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003148:	4619      	mov	r1, r3
 800314a:	4826      	ldr	r0, [pc, #152]	@ (80031e4 <HAL_I2S_MspInit+0x270>)
 800314c:	f001 f862 	bl	8004214 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8003150:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003152:	4a2a      	ldr	r2, [pc, #168]	@ (80031fc <HAL_I2S_MspInit+0x288>)
 8003154:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8003156:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315c:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003162:	4b25      	ldr	r3, [pc, #148]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003168:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 800316a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800316e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003170:	4b21      	ldr	r3, [pc, #132]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003176:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003178:	4b1f      	ldr	r3, [pc, #124]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800317e:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003184:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800318c:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 800318e:	2204      	movs	r2, #4
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003192:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 8003194:	2203      	movs	r2, #3
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003198:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 800319a:	2200      	movs	r2, #0
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800319e:	4b16      	ldr	r3, [pc, #88]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80031a4:	4814      	ldr	r0, [pc, #80]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 80031a6:	f000 fc33 	bl	8003a10 <HAL_DMA_Init>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2S_MspInit+0x240>
      Error_Handler();
 80031b0:	f7fe fdc6 	bl	8001d40 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a10      	ldr	r2, [pc, #64]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 80031b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031ba:	4a0f      	ldr	r2, [pc, #60]	@ (80031f8 <HAL_I2S_MspInit+0x284>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	2033      	movs	r0, #51	@ 0x33
 80031c6:	f000 fbec 	bl	80039a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80031ca:	2033      	movs	r0, #51	@ 0x33
 80031cc:	f000 fc05 	bl	80039da <HAL_NVIC_EnableIRQ>
}
 80031d0:	bf00      	nop
 80031d2:	3738      	adds	r7, #56	@ 0x38
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40003800 	.word	0x40003800
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020400 	.word	0x40020400
 80031e8:	200001ec 	.word	0x200001ec
 80031ec:	40026058 	.word	0x40026058
 80031f0:	40003c00 	.word	0x40003c00
 80031f4:	40020000 	.word	0x40020000
 80031f8:	2000024c 	.word	0x2000024c
 80031fc:	40026010 	.word	0x40026010

08003200 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	@ 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a28      	ldr	r2, [pc, #160]	@ (80032c0 <HAL_SD_MspInit+0xc0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d14a      	bne.n	80032b8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 800322c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003230:	6453      	str	r3, [r2, #68]	@ 0x44
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	6313      	str	r3, [r2, #48]	@ 0x30
 800326a:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <HAL_SD_MspInit+0xc4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003276:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003288:	230c      	movs	r3, #12
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	480d      	ldr	r0, [pc, #52]	@ (80032c8 <HAL_SD_MspInit+0xc8>)
 8003294:	f000 ffbe 	bl	8004214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003298:	2304      	movs	r3, #4
 800329a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032a8:	230c      	movs	r3, #12
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4619      	mov	r1, r3
 80032b2:	4806      	ldr	r0, [pc, #24]	@ (80032cc <HAL_SD_MspInit+0xcc>)
 80032b4:	f000 ffae 	bl	8004214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80032b8:	bf00      	nop
 80032ba:	3728      	adds	r7, #40	@ 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020800 	.word	0x40020800
 80032cc:	40020c00 	.word	0x40020c00

080032d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08c      	sub	sp, #48	@ 0x30
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a36      	ldr	r2, [pc, #216]	@ (80033c8 <HAL_UART_MspInit+0xf8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d12c      	bne.n	800334c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	4b35      	ldr	r3, [pc, #212]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a34      	ldr	r2, [pc, #208]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	4b2e      	ldr	r3, [pc, #184]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a2d      	ldr	r2, [pc, #180]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800332a:	230c      	movs	r3, #12
 800332c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800333a:	2307      	movs	r3, #7
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	4619      	mov	r1, r3
 8003344:	4822      	ldr	r0, [pc, #136]	@ (80033d0 <HAL_UART_MspInit+0x100>)
 8003346:	f000 ff65 	bl	8004214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800334a:	e039      	b.n	80033c0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a20      	ldr	r2, [pc, #128]	@ (80033d4 <HAL_UART_MspInit+0x104>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d134      	bne.n	80033c0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b1c      	ldr	r3, [pc, #112]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a1b      	ldr	r2, [pc, #108]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b19      	ldr	r3, [pc, #100]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 800337c:	f043 0308 	orr.w	r3, r3, #8
 8003380:	6313      	str	r3, [r2, #48]	@ 0x30
 8003382:	4b12      	ldr	r3, [pc, #72]	@ (80033cc <HAL_UART_MspInit+0xfc>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800338e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033a0:	2307      	movs	r3, #7
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	4619      	mov	r1, r3
 80033aa:	480b      	ldr	r0, [pc, #44]	@ (80033d8 <HAL_UART_MspInit+0x108>)
 80033ac:	f000 ff32 	bl	8004214 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2027      	movs	r0, #39	@ 0x27
 80033b6:	f000 faf4 	bl	80039a2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 80033ba:	2027      	movs	r0, #39	@ 0x27
 80033bc:	f000 fb0d 	bl	80039da <HAL_NVIC_EnableIRQ>
}
 80033c0:	bf00      	nop
 80033c2:	3730      	adds	r7, #48	@ 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40020000 	.word	0x40020000
 80033d4:	40004800 	.word	0x40004800
 80033d8:	40020c00 	.word	0x40020c00

080033dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <NMI_Handler+0x4>

080033e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <HardFault_Handler+0x4>

080033ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <MemManage_Handler+0x4>

080033f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <BusFault_Handler+0x4>

080033fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <UsageFault_Handler+0x4>

08003404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003432:	f000 f997 	bl	8003764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}

0800343a <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void EXTI0_IRQHandler(void)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800343e:	2001      	movs	r0, #1
 8003440:	f001 f8b6 	bl	80045b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}

08003448 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800344c:	2004      	movs	r0, #4
 800344e:	f001 f8af 	bl	80045b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <DMA1_Stream0_IRQHandler+0x10>)
 800345e:	f000 fc6f 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000024c 	.word	0x2000024c

0800346c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003470:	4802      	ldr	r0, [pc, #8]	@ (800347c <DMA1_Stream3_IRQHandler+0x10>)
 8003472:	f000 fc65 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200001ec 	.word	0x200001ec

08003480 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8003484:	4802      	ldr	r0, [pc, #8]	@ (8003490 <SPI2_IRQHandler+0x10>)
 8003486:	f003 f9e3 	bl	8006850 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000015c 	.word	0x2000015c

08003494 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8003498:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <SPI3_IRQHandler+0x10>)
 800349a:	f003 f9d9 	bl	8006850 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200001a4 	.word	0x200001a4

080034a8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <USART3_IRQHandler+0x10>)
 80034ae:	f005 fc49 	bl	8008d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000374 	.word	0x20000374

080034bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return 1;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_kill>:

int _kill(int pid, int sig)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034d6:	f00a fca1 	bl	800de1c <__errno>
 80034da:	4603      	mov	r3, r0
 80034dc:	2216      	movs	r2, #22
 80034de:	601a      	str	r2, [r3, #0]
  return -1;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_exit>:

void _exit (int status)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ffe7 	bl	80034cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <_exit+0x12>

08003502 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e00a      	b.n	800352a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003514:	f3af 8000 	nop.w
 8003518:	4601      	mov	r1, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	60ba      	str	r2, [r7, #8]
 8003520:	b2ca      	uxtb	r2, r1
 8003522:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	dbf0      	blt.n	8003514 <_read+0x12>
  }

  return len;
 8003532:	687b      	ldr	r3, [r7, #4]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e009      	b.n	8003562 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	60ba      	str	r2, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3301      	adds	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	dbf1      	blt.n	800354e <_write+0x12>
  }
  return len;
 800356a:	687b      	ldr	r3, [r7, #4]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_close>:

int _close(int file)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800359c:	605a      	str	r2, [r3, #4]
  return 0;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_isatty>:

int _isatty(int file)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e4:	4a14      	ldr	r2, [pc, #80]	@ (8003638 <_sbrk+0x5c>)
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <_sbrk+0x60>)
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f0:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <_sbrk+0x64>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	@ (8003644 <_sbrk+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fe:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800360c:	f00a fc06 	bl	800de1c <__errno>
 8003610:	4603      	mov	r3, r0
 8003612:	220c      	movs	r2, #12
 8003614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e009      	b.n	8003630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800361c:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003622:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <_sbrk+0x64>)
 800362c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20020000 	.word	0x20020000
 800363c:	00000400 	.word	0x00000400
 8003640:	20005670 	.word	0x20005670
 8003644:	20005800 	.word	0x20005800

08003648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <SystemInit+0x20>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <SystemInit+0x20>)
 8003654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800366c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003670:	480d      	ldr	r0, [pc, #52]	@ (80036a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003672:	490e      	ldr	r1, [pc, #56]	@ (80036ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003674:	4a0e      	ldr	r2, [pc, #56]	@ (80036b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a0b      	ldr	r2, [pc, #44]	@ (80036b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003688:	4c0b      	ldr	r4, [pc, #44]	@ (80036b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003696:	f7ff ffd7 	bl	8003648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800369a:	f00a fbc5 	bl	800de28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369e:	f7fc ff7d 	bl	800059c <main>
  bx  lr    
 80036a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ac:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80036b0:	0801051c 	.word	0x0801051c
  ldr r2, =_sbss
 80036b4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80036b8:	20005800 	.word	0x20005800

080036bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036bc:	e7fe      	b.n	80036bc <ADC_IRQHandler>
	...

080036c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003700 <HAL_Init+0x40>)
 80036ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003700 <HAL_Init+0x40>)
 80036d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036dc:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a07      	ldr	r2, [pc, #28]	@ (8003700 <HAL_Init+0x40>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f000 f94f 	bl	800398c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ee:	200f      	movs	r0, #15
 80036f0:	f000 f808 	bl	8003704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f4:	f7ff fb9a 	bl	8002e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00

08003704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800370c:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_InitTick+0x54>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_InitTick+0x58>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371a:	fbb3 f3f1 	udiv	r3, r3, r1
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f967 	bl	80039f6 <HAL_SYSTICK_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e00e      	b.n	8003750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d80a      	bhi.n	800374e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003738:	2200      	movs	r2, #0
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f000 f92f 	bl	80039a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003744:	4a06      	ldr	r2, [pc, #24]	@ (8003760 <HAL_InitTick+0x5c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000020 	.word	0x20000020
 800375c:	20000028 	.word	0x20000028
 8003760:	20000024 	.word	0x20000024

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	@ (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000028 	.word	0x20000028
 8003788:	20005674 	.word	0x20005674

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	@ (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20005674 	.word	0x20005674

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d005      	beq.n	80037ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <HAL_Delay+0x44>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ca:	bf00      	nop
 80037cc:	f7ff ffde 	bl	800378c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <HAL_Delay+0x28>
  {
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000028 	.word	0x20000028

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	@ (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	@ (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	@ (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	@ (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	@ 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003958:	d301      	bcc.n	800395e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800395a:	2301      	movs	r3, #1
 800395c:	e00f      	b.n	800397e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <SysTick_Config+0x40>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3b01      	subs	r3, #1
 8003964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003966:	210f      	movs	r1, #15
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	f7ff ff8e 	bl	800388c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <SysTick_Config+0x40>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003976:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <SysTick_Config+0x40>)
 8003978:	2207      	movs	r2, #7
 800397a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	e000e010 	.word	0xe000e010

0800398c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff29 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b4:	f7ff ff3e 	bl	8003834 <__NVIC_GetPriorityGrouping>
 80039b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	6978      	ldr	r0, [r7, #20]
 80039c0:	f7ff ff8e 	bl	80038e0 <NVIC_EncodePriority>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff5d 	bl	800388c <__NVIC_SetPriority>
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff31 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ffa2 	bl	8003948 <SysTick_Config>
 8003a04:	4603      	mov	r3, r0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a1c:	f7ff feb6 	bl	800378c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e099      	b.n	8003b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4c:	e00f      	b.n	8003a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a4e:	f7ff fe9d 	bl	800378c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d908      	bls.n	8003a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e078      	b.n	8003b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e8      	bne.n	8003a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4b38      	ldr	r3, [pc, #224]	@ (8003b68 <HAL_DMA_Init+0x158>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d107      	bne.n	8003ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0307 	bic.w	r3, r3, #7
 8003aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d117      	bne.n	8003b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fb01 	bl	800411c <DMA_CheckFifoParam>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2240      	movs	r2, #64	@ 0x40
 8003b24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e016      	b.n	8003b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fab8 	bl	80040b0 <DMA_CalcBaseAndBitshift>
 8003b40:	4603      	mov	r3, r0
 8003b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	223f      	movs	r2, #63	@ 0x3f
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	f010803f 	.word	0xf010803f

08003b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_DMA_Start_IT+0x26>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e040      	b.n	8003c14 <HAL_DMA_Start_IT+0xa8>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d12f      	bne.n	8003c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fa4a 	bl	8004054 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	223f      	movs	r2, #63	@ 0x3f
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0216 	orr.w	r2, r2, #22
 8003bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e005      	b.n	8003c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c2a:	f7ff fdaf 	bl	800378c <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d008      	beq.n	8003c4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	@ 0x80
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e052      	b.n	8003cf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0216 	bic.w	r2, r2, #22
 8003c5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <HAL_DMA_Abort+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0208 	bic.w	r2, r2, #8
 8003c8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9e:	e013      	b.n	8003cc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca0:	f7ff fd74 	bl	800378c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d90c      	bls.n	8003cc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e015      	b.n	8003cf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e4      	bne.n	8003ca0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	223f      	movs	r2, #63	@ 0x3f
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	@ 0x80
 8003d14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00c      	b.n	8003d34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d4c:	4b8e      	ldr	r3, [pc, #568]	@ (8003f88 <HAL_DMA_IRQHandler+0x248>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a8e      	ldr	r2, [pc, #568]	@ (8003f8c <HAL_DMA_IRQHandler+0x24c>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	2208      	movs	r2, #8
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	f043 0202 	orr.w	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	2204      	movs	r2, #4
 8003de8:	409a      	lsls	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d012      	beq.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d043      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03c      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d024      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e01f      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
 8003e80:	e016      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0208 	bic.w	r2, r2, #8
 8003e9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 808f 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8087 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d136      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0216 	bic.w	r2, r2, #22
 8003ef8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_DMA_IRQHandler+0x1da>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0208 	bic.w	r2, r2, #8
 8003f28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2e:	223f      	movs	r2, #63	@ 0x3f
 8003f30:	409a      	lsls	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d07e      	beq.n	800404c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
        }
        return;
 8003f56:	e079      	b.n	800404c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d031      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e02c      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
 8003f86:	bf00      	nop
 8003f88:	20000020 	.word	0x20000020
 8003f8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d023      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
 8003fa0:	e01e      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10f      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0210 	bic.w	r2, r2, #16
 8003fbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d032      	beq.n	800404e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2205      	movs	r2, #5
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3301      	adds	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	d307      	bcc.n	8004028 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f2      	bne.n	800400c <HAL_DMA_IRQHandler+0x2cc>
 8004026:	e000      	b.n	800402a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004028:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
 800404a:	e000      	b.n	800404e <HAL_DMA_IRQHandler+0x30e>
        return;
 800404c:	bf00      	nop
    }
  }
}
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004070:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	d108      	bne.n	8004094 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004092:	e007      	b.n	80040a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3b10      	subs	r3, #16
 80040c0:	4a14      	ldr	r2, [pc, #80]	@ (8004114 <DMA_CalcBaseAndBitshift+0x64>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ca:	4a13      	ldr	r2, [pc, #76]	@ (8004118 <DMA_CalcBaseAndBitshift+0x68>)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d909      	bls.n	80040f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80040f0:	e007      	b.n	8004102 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	aaaaaaab 	.word	0xaaaaaaab
 8004118:	08010274 	.word	0x08010274

0800411c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11f      	bne.n	8004176 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d856      	bhi.n	80041ea <DMA_CheckFifoParam+0xce>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <DMA_CheckFifoParam+0x28>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	08004167 	.word	0x08004167
 800414c:	08004155 	.word	0x08004155
 8004150:	080041eb 	.word	0x080041eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d046      	beq.n	80041ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004164:	e043      	b.n	80041ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800416e:	d140      	bne.n	80041f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004174:	e03d      	b.n	80041f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417e:	d121      	bne.n	80041c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d837      	bhi.n	80041f6 <DMA_CheckFifoParam+0xda>
 8004186:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <DMA_CheckFifoParam+0x70>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041a3 	.word	0x080041a3
 8004194:	0800419d 	.word	0x0800419d
 8004198:	080041b5 	.word	0x080041b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      break;
 80041a0:	e030      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d025      	beq.n	80041fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e022      	b.n	80041fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041bc:	d11f      	bne.n	80041fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041c2:	e01c      	b.n	80041fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d903      	bls.n	80041d2 <DMA_CheckFifoParam+0xb6>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d003      	beq.n	80041d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041d0:	e018      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      break;
 80041d6:	e015      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e00b      	b.n	8004202 <DMA_CheckFifoParam+0xe6>
      break;
 80041ea:	bf00      	nop
 80041ec:	e00a      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041ee:	bf00      	nop
 80041f0:	e008      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e006      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e004      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;   
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <DMA_CheckFifoParam+0xe8>
      break;
 8004202:	bf00      	nop
    }
  } 
  
  return status; 
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop

08004214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e16b      	b.n	8004508 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004230:	2201      	movs	r2, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	f040 815a 	bne.w	8004502 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d005      	beq.n	8004266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004262:	2b02      	cmp	r3, #2
 8004264:	d130      	bne.n	80042c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d017      	beq.n	8004304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d123      	bne.n	8004358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0203 	and.w	r2, r3, #3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80b4 	beq.w	8004502 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	4b60      	ldr	r3, [pc, #384]	@ (8004520 <HAL_GPIO_Init+0x30c>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a2:	4a5f      	ldr	r2, [pc, #380]	@ (8004520 <HAL_GPIO_Init+0x30c>)
 80043a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004520 <HAL_GPIO_Init+0x30c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004524 <HAL_GPIO_Init+0x310>)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_GPIO_Init+0x314>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02b      	beq.n	800443a <HAL_GPIO_Init+0x226>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a51      	ldr	r2, [pc, #324]	@ (800452c <HAL_GPIO_Init+0x318>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d025      	beq.n	8004436 <HAL_GPIO_Init+0x222>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a50      	ldr	r2, [pc, #320]	@ (8004530 <HAL_GPIO_Init+0x31c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01f      	beq.n	8004432 <HAL_GPIO_Init+0x21e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004534 <HAL_GPIO_Init+0x320>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d019      	beq.n	800442e <HAL_GPIO_Init+0x21a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004538 <HAL_GPIO_Init+0x324>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_GPIO_Init+0x216>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a4d      	ldr	r2, [pc, #308]	@ (800453c <HAL_GPIO_Init+0x328>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00d      	beq.n	8004426 <HAL_GPIO_Init+0x212>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4c      	ldr	r2, [pc, #304]	@ (8004540 <HAL_GPIO_Init+0x32c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <HAL_GPIO_Init+0x20e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4b      	ldr	r2, [pc, #300]	@ (8004544 <HAL_GPIO_Init+0x330>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_GPIO_Init+0x20a>
 800441a:	2307      	movs	r3, #7
 800441c:	e00e      	b.n	800443c <HAL_GPIO_Init+0x228>
 800441e:	2308      	movs	r3, #8
 8004420:	e00c      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004422:	2306      	movs	r3, #6
 8004424:	e00a      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004426:	2305      	movs	r3, #5
 8004428:	e008      	b.n	800443c <HAL_GPIO_Init+0x228>
 800442a:	2304      	movs	r3, #4
 800442c:	e006      	b.n	800443c <HAL_GPIO_Init+0x228>
 800442e:	2303      	movs	r3, #3
 8004430:	e004      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004432:	2302      	movs	r3, #2
 8004434:	e002      	b.n	800443c <HAL_GPIO_Init+0x228>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_GPIO_Init+0x228>
 800443a:	2300      	movs	r3, #0
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	f002 0203 	and.w	r2, r2, #3
 8004442:	0092      	lsls	r2, r2, #2
 8004444:	4093      	lsls	r3, r2
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800444c:	4935      	ldr	r1, [pc, #212]	@ (8004524 <HAL_GPIO_Init+0x310>)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	3302      	adds	r3, #2
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445a:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <HAL_GPIO_Init+0x334>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447e:	4a32      	ldr	r2, [pc, #200]	@ (8004548 <HAL_GPIO_Init+0x334>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004484:	4b30      	ldr	r3, [pc, #192]	@ (8004548 <HAL_GPIO_Init+0x334>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a8:	4a27      	ldr	r2, [pc, #156]	@ (8004548 <HAL_GPIO_Init+0x334>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ae:	4b26      	ldr	r3, [pc, #152]	@ (8004548 <HAL_GPIO_Init+0x334>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004548 <HAL_GPIO_Init+0x334>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_GPIO_Init+0x334>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044fc:	4a12      	ldr	r2, [pc, #72]	@ (8004548 <HAL_GPIO_Init+0x334>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3301      	adds	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	f67f ae90 	bls.w	8004230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3724      	adds	r7, #36	@ 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	40013800 	.word	0x40013800
 8004528:	40020000 	.word	0x40020000
 800452c:	40020400 	.word	0x40020400
 8004530:	40020800 	.word	0x40020800
 8004534:	40020c00 	.word	0x40020c00
 8004538:	40021000 	.word	0x40021000
 800453c:	40021400 	.word	0x40021400
 8004540:	40021800 	.word	0x40021800
 8004544:	40021c00 	.word	0x40021c00
 8004548:	40013c00 	.word	0x40013c00

0800454c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	e001      	b.n	800456e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ba:	4b08      	ldr	r3, [pc, #32]	@ (80045dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d006      	beq.n	80045d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045c6:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fd98 	bl	8001104 <HAL_GPIO_EXTI_Callback>
  }
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40013c00 	.word	0x40013c00

080045e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e12b      	b.n	800484a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe fc38 	bl	8002e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	@ 0x24
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004644:	f003 f97e 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8004648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a81      	ldr	r2, [pc, #516]	@ (8004854 <HAL_I2C_Init+0x274>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d807      	bhi.n	8004664 <HAL_I2C_Init+0x84>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a80      	ldr	r2, [pc, #512]	@ (8004858 <HAL_I2C_Init+0x278>)
 8004658:	4293      	cmp	r3, r2
 800465a:	bf94      	ite	ls
 800465c:	2301      	movls	r3, #1
 800465e:	2300      	movhi	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e006      	b.n	8004672 <HAL_I2C_Init+0x92>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a7d      	ldr	r2, [pc, #500]	@ (800485c <HAL_I2C_Init+0x27c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	bf94      	ite	ls
 800466c:	2301      	movls	r3, #1
 800466e:	2300      	movhi	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0e7      	b.n	800484a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a78      	ldr	r2, [pc, #480]	@ (8004860 <HAL_I2C_Init+0x280>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	0c9b      	lsrs	r3, r3, #18
 8004684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004854 <HAL_I2C_Init+0x274>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d802      	bhi.n	80046b4 <HAL_I2C_Init+0xd4>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3301      	adds	r3, #1
 80046b2:	e009      	b.n	80046c8 <HAL_I2C_Init+0xe8>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	4a69      	ldr	r2, [pc, #420]	@ (8004864 <HAL_I2C_Init+0x284>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	3301      	adds	r3, #1
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	495c      	ldr	r1, [pc, #368]	@ (8004854 <HAL_I2C_Init+0x274>)
 80046e4:	428b      	cmp	r3, r1
 80046e6:	d819      	bhi.n	800471c <HAL_I2C_Init+0x13c>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1e59      	subs	r1, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f6:	1c59      	adds	r1, r3, #1
 80046f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046fc:	400b      	ands	r3, r1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_I2C_Init+0x138>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1e59      	subs	r1, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004716:	e051      	b.n	80047bc <HAL_I2C_Init+0x1dc>
 8004718:	2304      	movs	r3, #4
 800471a:	e04f      	b.n	80047bc <HAL_I2C_Init+0x1dc>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d111      	bne.n	8004748 <HAL_I2C_Init+0x168>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e58      	subs	r0, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	440b      	add	r3, r1
 8004732:	fbb0 f3f3 	udiv	r3, r0, r3
 8004736:	3301      	adds	r3, #1
 8004738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e012      	b.n	800476e <HAL_I2C_Init+0x18e>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e58      	subs	r0, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	0099      	lsls	r1, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	fbb0 f3f3 	udiv	r3, r0, r3
 800475e:	3301      	adds	r3, #1
 8004760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Init+0x196>
 8004772:	2301      	movs	r3, #1
 8004774:	e022      	b.n	80047bc <HAL_I2C_Init+0x1dc>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10e      	bne.n	800479c <HAL_I2C_Init+0x1bc>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1e58      	subs	r0, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	440b      	add	r3, r1
 800478c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004790:	3301      	adds	r3, #1
 8004792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800479a:	e00f      	b.n	80047bc <HAL_I2C_Init+0x1dc>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1e58      	subs	r0, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	0099      	lsls	r1, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b2:	3301      	adds	r3, #1
 80047b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	6809      	ldr	r1, [r1, #0]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6911      	ldr	r1, [r2, #16]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68d2      	ldr	r2, [r2, #12]
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	000186a0 	.word	0x000186a0
 8004858:	001e847f 	.word	0x001e847f
 800485c:	003d08ff 	.word	0x003d08ff
 8004860:	431bde83 	.word	0x431bde83
 8004864:	10624dd3 	.word	0x10624dd3

08004868 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	461a      	mov	r2, r3
 8004874:	460b      	mov	r3, r1
 8004876:	817b      	strh	r3, [r7, #10]
 8004878:	4613      	mov	r3, r2
 800487a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800487c:	f7fe ff86 	bl	800378c <HAL_GetTick>
 8004880:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b20      	cmp	r3, #32
 800488c:	f040 80e0 	bne.w	8004a50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2319      	movs	r3, #25
 8004896:	2201      	movs	r2, #1
 8004898:	4970      	ldr	r1, [pc, #448]	@ (8004a5c <HAL_I2C_Master_Transmit+0x1f4>)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f001 fa24 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048a6:	2302      	movs	r3, #2
 80048a8:	e0d3      	b.n	8004a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_I2C_Master_Transmit+0x50>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0cc      	b.n	8004a52 <HAL_I2C_Master_Transmit+0x1ea>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d007      	beq.n	80048de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2221      	movs	r2, #33	@ 0x21
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2210      	movs	r2, #16
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	893a      	ldrh	r2, [r7, #8]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a50      	ldr	r2, [pc, #320]	@ (8004a60 <HAL_I2C_Master_Transmit+0x1f8>)
 800491e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004920:	8979      	ldrh	r1, [r7, #10]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 ff10 	bl	800574c <I2C_MasterRequestWrite>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e08d      	b.n	8004a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800494c:	e066      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	6a39      	ldr	r1, [r7, #32]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f001 fa9e 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	2b04      	cmp	r3, #4
 8004964:	d107      	bne.n	8004976 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e06b      	b.n	8004a52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d11b      	bne.n	80049f0 <HAL_I2C_Master_Transmit+0x188>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	6a39      	ldr	r1, [r7, #32]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f001 fa8e 	bl	8005f16 <I2C_WaitOnBTFFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d107      	bne.n	8004a18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e01a      	b.n	8004a52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d194      	bne.n	800494e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	00100002 	.word	0x00100002
 8004a60:	ffff0000 	.word	0xffff0000

08004a64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	@ 0x30
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	460b      	mov	r3, r1
 8004a72:	817b      	strh	r3, [r7, #10]
 8004a74:	4613      	mov	r3, r2
 8004a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7fe fe88 	bl	800378c <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	f040 820b 	bne.w	8004ea2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2319      	movs	r3, #25
 8004a92:	2201      	movs	r2, #1
 8004a94:	497c      	ldr	r1, [pc, #496]	@ (8004c88 <HAL_I2C_Master_Receive+0x224>)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f001 f926 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e1fe      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_I2C_Master_Receive+0x50>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e1f7      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d007      	beq.n	8004ada <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2222      	movs	r2, #34	@ 0x22
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2210      	movs	r2, #16
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	893a      	ldrh	r2, [r7, #8]
 8004b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a5c      	ldr	r2, [pc, #368]	@ (8004c8c <HAL_I2C_Master_Receive+0x228>)
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b1c:	8979      	ldrh	r1, [r7, #10]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fe94 	bl	8005850 <I2C_MasterRequestRead>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1b8      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d113      	bne.n	8004b62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e18c      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d11b      	bne.n	8004ba2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e16c      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d11b      	bne.n	8004be2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	e14c      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c08:	e138      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	f200 80f1 	bhi.w	8004df6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d123      	bne.n	8004c64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f001 f9b9 	bl	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e139      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c62:	e10b      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d14e      	bne.n	8004d0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	2200      	movs	r2, #0
 8004c74:	4906      	ldr	r1, [pc, #24]	@ (8004c90 <HAL_I2C_Master_Receive+0x22c>)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f001 f836 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e10e      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
 8004c86:	bf00      	nop
 8004c88:	00100002 	.word	0x00100002
 8004c8c:	ffff0000 	.word	0xffff0000
 8004c90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d08:	e0b8      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	4966      	ldr	r1, [pc, #408]	@ (8004eac <HAL_I2C_Master_Receive+0x448>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 ffe7 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0bf      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	494f      	ldr	r1, [pc, #316]	@ (8004eac <HAL_I2C_Master_Receive+0x448>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 ffb9 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e091      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004df4:	e042      	b.n	8004e7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f001 f8cc 	bl	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04c      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d118      	bne.n	8004e7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f aec2 	bne.w	8004c0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	@ 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010004 	.word	0x00010004

08004eb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eca:	f7fe fc5f 	bl	800378c <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 80d9 	bne.w	8005090 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2319      	movs	r3, #25
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	496d      	ldr	r1, [pc, #436]	@ (800509c <HAL_I2C_Mem_Write+0x1ec>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fefd 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0cc      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Mem_Write+0x56>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0c5      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d007      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2221      	movs	r2, #33	@ 0x21
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2240      	movs	r2, #64	@ 0x40
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80050a0 <HAL_I2C_Mem_Write+0x1f0>)
 8004f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f6e:	88f8      	ldrh	r0, [r7, #6]
 8004f70:	893a      	ldrh	r2, [r7, #8]
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fd34 	bl	80059ec <I2C_RequestMemoryWrite>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d052      	beq.n	8005030 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e081      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 ff7e 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d107      	bne.n	8004fb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e06b      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d11b      	bne.n	8005030 <HAL_I2C_Mem_Write+0x180>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d017      	beq.n	8005030 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1aa      	bne.n	8004f8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 ff6a 	bl	8005f16 <I2C_WaitOnBTFFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	2b04      	cmp	r3, #4
 800504e:	d107      	bne.n	8005060 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e016      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	00100002 	.word	0x00100002
 80050a0:	ffff0000 	.word	0xffff0000

080050a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	@ 0x30
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	817b      	strh	r3, [r7, #10]
 80050b6:	460b      	mov	r3, r1
 80050b8:	813b      	strh	r3, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050be:	f7fe fb65 	bl	800378c <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	f040 8208 	bne.w	80054e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2319      	movs	r3, #25
 80050d8:	2201      	movs	r2, #1
 80050da:	497b      	ldr	r1, [pc, #492]	@ (80052c8 <HAL_I2C_Mem_Read+0x224>)
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fe03 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
 80050ea:	e1fb      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_I2C_Mem_Read+0x56>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e1f4      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d007      	beq.n	8005120 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800512e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2222      	movs	r2, #34	@ 0x22
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2240      	movs	r2, #64	@ 0x40
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a5b      	ldr	r2, [pc, #364]	@ (80052cc <HAL_I2C_Mem_Read+0x228>)
 8005160:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005162:	88f8      	ldrh	r0, [r7, #6]
 8005164:	893a      	ldrh	r2, [r7, #8]
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4603      	mov	r3, r0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fcd0 	bl	8005b18 <I2C_RequestMemoryRead>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e1b0      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d113      	bne.n	80051b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	2300      	movs	r3, #0
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e184      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d11b      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e164      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d11b      	bne.n	8005232 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005208:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	e144      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005248:	e138      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	2b03      	cmp	r3, #3
 8005250:	f200 80f1 	bhi.w	8005436 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005258:	2b01      	cmp	r3, #1
 800525a:	d123      	bne.n	80052a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fe99 	bl	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e139      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052a2:	e10b      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d14e      	bne.n	800534a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b2:	2200      	movs	r2, #0
 80052b4:	4906      	ldr	r1, [pc, #24]	@ (80052d0 <HAL_I2C_Mem_Read+0x22c>)
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fd16 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e10e      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
 80052c6:	bf00      	nop
 80052c8:	00100002 	.word	0x00100002
 80052cc:	ffff0000 	.word	0xffff0000
 80052d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005348:	e0b8      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	2200      	movs	r2, #0
 8005352:	4966      	ldr	r1, [pc, #408]	@ (80054ec <HAL_I2C_Mem_Read+0x448>)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fcc7 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0bf      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	2200      	movs	r2, #0
 80053ae:	494f      	ldr	r1, [pc, #316]	@ (80054ec <HAL_I2C_Mem_Read+0x448>)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fc99 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e091      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005434:	e042      	b.n	80054bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fdac 	bl	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e04c      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d118      	bne.n	80054bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f47f aec2 	bne.w	800524a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
  }
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3728      	adds	r7, #40	@ 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	00010004 	.word	0x00010004

080054f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	@ 0x28
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	460b      	mov	r3, r1
 80054fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005500:	f7fe f944 	bl	800378c <HAL_GetTick>
 8005504:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	f040 8111 	bne.w	800573a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2319      	movs	r3, #25
 800551e:	2201      	movs	r2, #1
 8005520:	4988      	ldr	r1, [pc, #544]	@ (8005744 <HAL_I2C_IsDeviceReady+0x254>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fbe0 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	e104      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_I2C_IsDeviceReady+0x50>
 800553c:	2302      	movs	r3, #2
 800553e:	e0fd      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d007      	beq.n	8005566 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2224      	movs	r2, #36	@ 0x24
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a70      	ldr	r2, [pc, #448]	@ (8005748 <HAL_I2C_IsDeviceReady+0x258>)
 8005588:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005598:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fb9e 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c0:	d103      	bne.n	80055ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055c8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0b6      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80055de:	f7fe f8d5 	bl	800378c <HAL_GetTick>
 80055e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005612:	e025      	b.n	8005660 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7fe f8ba 	bl	800378c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <HAL_I2C_IsDeviceReady+0x13a>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	22a0      	movs	r2, #160	@ 0xa0
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2ba0      	cmp	r3, #160	@ 0xa0
 800566a:	d005      	beq.n	8005678 <HAL_I2C_IsDeviceReady+0x188>
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <HAL_I2C_IsDeviceReady+0x188>
 8005672:	7dbb      	ldrb	r3, [r7, #22]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0cd      	beq.n	8005614 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d129      	bne.n	80056e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800569c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2319      	movs	r3, #25
 80056ba:	2201      	movs	r2, #1
 80056bc:	4921      	ldr	r1, [pc, #132]	@ (8005744 <HAL_I2C_IsDeviceReady+0x254>)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fb12 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e036      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	e02c      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2319      	movs	r3, #25
 8005702:	2201      	movs	r2, #1
 8005704:	490f      	ldr	r1, [pc, #60]	@ (8005744 <HAL_I2C_IsDeviceReady+0x254>)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 faee 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e012      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3301      	adds	r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	f4ff af32 	bcc.w	800558a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	00100002 	.word	0x00100002
 8005748:	ffff0000 	.word	0xffff0000

0800574c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	460b      	mov	r3, r1
 800575a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d006      	beq.n	8005776 <I2C_MasterRequestWrite+0x2a>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d003      	beq.n	8005776 <I2C_MasterRequestWrite+0x2a>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005774:	d108      	bne.n	8005788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e00b      	b.n	80057a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	2b12      	cmp	r3, #18
 800578e:	d107      	bne.n	80057a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800579e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fa9b 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00d      	beq.n	80057d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c6:	d103      	bne.n	80057d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e035      	b.n	8005840 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057dc:	d108      	bne.n	80057f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057de:	897b      	ldrh	r3, [r7, #10]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057ec:	611a      	str	r2, [r3, #16]
 80057ee:	e01b      	b.n	8005828 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057f0:	897b      	ldrh	r3, [r7, #10]
 80057f2:	11db      	asrs	r3, r3, #7
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 0306 	and.w	r3, r3, #6
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f063 030f 	orn	r3, r3, #15
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	490e      	ldr	r1, [pc, #56]	@ (8005848 <I2C_MasterRequestWrite+0xfc>)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fac1 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e010      	b.n	8005840 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4907      	ldr	r1, [pc, #28]	@ (800584c <I2C_MasterRequestWrite+0x100>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fab1 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	00010008 	.word	0x00010008
 800584c:	00010002 	.word	0x00010002

08005850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	460b      	mov	r3, r1
 800585e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d006      	beq.n	800588a <I2C_MasterRequestRead+0x3a>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d003      	beq.n	800588a <I2C_MasterRequestRead+0x3a>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005888:	d108      	bne.n	800589c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e00b      	b.n	80058b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	2b11      	cmp	r3, #17
 80058a2:	d107      	bne.n	80058b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fa11 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058da:	d103      	bne.n	80058e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e079      	b.n	80059dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058f0:	d108      	bne.n	8005904 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	611a      	str	r2, [r3, #16]
 8005902:	e05f      	b.n	80059c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005904:	897b      	ldrh	r3, [r7, #10]
 8005906:	11db      	asrs	r3, r3, #7
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f003 0306 	and.w	r3, r3, #6
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f063 030f 	orn	r3, r3, #15
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4930      	ldr	r1, [pc, #192]	@ (80059e4 <I2C_MasterRequestRead+0x194>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa37 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e054      	b.n	80059dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005932:	897b      	ldrh	r3, [r7, #10]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	4929      	ldr	r1, [pc, #164]	@ (80059e8 <I2C_MasterRequestRead+0x198>)
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fa27 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e044      	b.n	80059dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005976:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f9af 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00d      	beq.n	80059ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800599e:	d103      	bne.n	80059a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e017      	b.n	80059dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	11db      	asrs	r3, r3, #7
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 0306 	and.w	r3, r3, #6
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f063 030e 	orn	r3, r3, #14
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4907      	ldr	r1, [pc, #28]	@ (80059e8 <I2C_MasterRequestRead+0x198>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f9e3 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	00010008 	.word	0x00010008
 80059e8:	00010002 	.word	0x00010002

080059ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	817b      	strh	r3, [r7, #10]
 80059fe:	460b      	mov	r3, r1
 8005a00:	813b      	strh	r3, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 f960 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a3c:	d103      	bne.n	8005a46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e05f      	b.n	8005b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a4a:	897b      	ldrh	r3, [r7, #10]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	492d      	ldr	r1, [pc, #180]	@ (8005b14 <I2C_RequestMemoryWrite+0x128>)
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f998 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e04c      	b.n	8005b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a88:	6a39      	ldr	r1, [r7, #32]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 fa02 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d107      	bne.n	8005aae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e02b      	b.n	8005b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d105      	bne.n	8005ac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab8:	893b      	ldrh	r3, [r7, #8]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	611a      	str	r2, [r3, #16]
 8005ac2:	e021      	b.n	8005b08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ac4:	893b      	ldrh	r3, [r7, #8]
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad4:	6a39      	ldr	r1, [r7, #32]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f9dc 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00d      	beq.n	8005afe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d107      	bne.n	8005afa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e005      	b.n	8005b0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005afe:	893b      	ldrh	r3, [r7, #8]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	00010002 	.word	0x00010002

08005b18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	817b      	strh	r3, [r7, #10]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	813b      	strh	r3, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f8c2 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b78:	d103      	bne.n	8005b82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0aa      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b86:	897b      	ldrh	r3, [r7, #10]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	4952      	ldr	r1, [pc, #328]	@ (8005ce4 <I2C_RequestMemoryRead+0x1cc>)
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f8fa 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e097      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc4:	6a39      	ldr	r1, [r7, #32]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f964 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d107      	bne.n	8005bea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e076      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf4:	893b      	ldrh	r3, [r7, #8]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	611a      	str	r2, [r3, #16]
 8005bfe:	e021      	b.n	8005c44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c10:	6a39      	ldr	r1, [r7, #32]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f93e 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d107      	bne.n	8005c36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e050      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c3a:	893b      	ldrh	r3, [r7, #8]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c46:	6a39      	ldr	r1, [r7, #32]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f923 	bl	8005e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00d      	beq.n	8005c70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d107      	bne.n	8005c6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e035      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f82b 	bl	8005ce8 <I2C_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca6:	d103      	bne.n	8005cb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e013      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cb4:	897b      	ldrh	r3, [r7, #10]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	6a3a      	ldr	r2, [r7, #32]
 8005cc8:	4906      	ldr	r1, [pc, #24]	@ (8005ce4 <I2C_RequestMemoryRead+0x1cc>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f863 	bl	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	00010002 	.word	0x00010002

08005ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf8:	e025      	b.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d021      	beq.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d02:	f7fd fd43 	bl	800378c <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f043 0220 	orr.w	r2, r3, #32
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e023      	b.n	8005d8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	0c1b      	lsrs	r3, r3, #16
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10d      	bne.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	43da      	mvns	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	e00c      	b.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4013      	ands	r3, r2
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	2300      	movne	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d0b6      	beq.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005da4:	e051      	b.n	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db4:	d123      	bne.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	f043 0204 	orr.w	r2, r3, #4
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e046      	b.n	8005e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d021      	beq.n	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e06:	f7fd fcc1 	bl	800378c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d116      	bne.n	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e020      	b.n	8005e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10c      	bne.n	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	43da      	mvns	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bf14      	ite	ne
 8005e66:	2301      	movne	r3, #1
 8005e68:	2300      	moveq	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	e00b      	b.n	8005e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	43da      	mvns	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d18d      	bne.n	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ea0:	e02d      	b.n	8005efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f8ce 	bl	8006044 <I2C_IsAcknowledgeFailed>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e02d      	b.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d021      	beq.n	8005efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fd fc67 	bl	800378c <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d116      	bne.n	8005efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e007      	b.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f08:	2b80      	cmp	r3, #128	@ 0x80
 8005f0a:	d1ca      	bne.n	8005ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f22:	e02d      	b.n	8005f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f88d 	bl	8006044 <I2C_IsAcknowledgeFailed>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e02d      	b.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d021      	beq.n	8005f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fd fc26 	bl	800378c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d116      	bne.n	8005f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e007      	b.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d1ca      	bne.n	8005f24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fa4:	e042      	b.n	800602c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d119      	bne.n	8005fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0210 	mvn.w	r2, #16
 8005fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e029      	b.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe8:	f7fd fbd0 	bl	800378c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d116      	bne.n	800602c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e007      	b.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d1b5      	bne.n	8005fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605a:	d11b      	bne.n	8006094 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006064:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	f043 0204 	orr.w	r2, r3, #4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e128      	b.n	8006308 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a90      	ldr	r2, [pc, #576]	@ (8006310 <HAL_I2S_Init+0x26c>)
 80060ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fc ff4f 	bl	8002f74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80060ec:	f023 030f 	bic.w	r3, r3, #15
 80060f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2202      	movs	r2, #2
 80060f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d060      	beq.n	80061c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800610a:	2310      	movs	r3, #16
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e001      	b.n	8006114 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006110:	2320      	movs	r3, #32
 8006112:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b20      	cmp	r3, #32
 800611a:	d802      	bhi.n	8006122 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006122:	2001      	movs	r0, #1
 8006124:	f001 fd18 	bl	8007b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8006128:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006132:	d125      	bne.n	8006180 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d010      	beq.n	800615e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	fbb2 f2f3 	udiv	r2, r2, r3
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	3305      	adds	r3, #5
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	e01f      	b.n	800619e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	fbb2 f2f3 	udiv	r2, r2, r3
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	fbb2 f3f3 	udiv	r3, r2, r3
 800617a:	3305      	adds	r3, #5
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e00e      	b.n	800619e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	fbb2 f2f3 	udiv	r2, r2, r3
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	461a      	mov	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	fbb2 f3f3 	udiv	r3, r2, r3
 800619a:	3305      	adds	r3, #5
 800619c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4a5c      	ldr	r2, [pc, #368]	@ (8006314 <HAL_I2S_Init+0x270>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e003      	b.n	80061cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80061c4:	2302      	movs	r3, #2
 80061c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d902      	bls.n	80061d8 <HAL_I2S_Init+0x134>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2bff      	cmp	r3, #255	@ 0xff
 80061d6:	d907      	bls.n	80061e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061dc:	f043 0210 	orr.w	r2, r3, #16
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e08f      	b.n	8006308 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	ea42 0103 	orr.w	r1, r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006206:	f023 030f 	bic.w	r3, r3, #15
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6851      	ldr	r1, [r2, #4]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6892      	ldr	r2, [r2, #8]
 8006212:	4311      	orrs	r1, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68d2      	ldr	r2, [r2, #12]
 8006218:	4311      	orrs	r1, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6992      	ldr	r2, [r2, #24]
 800621e:	430a      	orrs	r2, r1
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d161      	bne.n	80062f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a38      	ldr	r2, [pc, #224]	@ (8006318 <HAL_I2S_Init+0x274>)
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a37      	ldr	r2, [pc, #220]	@ (800631c <HAL_I2S_Init+0x278>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <HAL_I2S_Init+0x1a4>
 8006244:	4b36      	ldr	r3, [pc, #216]	@ (8006320 <HAL_I2S_Init+0x27c>)
 8006246:	e001      	b.n	800624c <HAL_I2S_Init+0x1a8>
 8006248:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	4932      	ldr	r1, [pc, #200]	@ (800631c <HAL_I2S_Init+0x278>)
 8006254:	428a      	cmp	r2, r1
 8006256:	d101      	bne.n	800625c <HAL_I2S_Init+0x1b8>
 8006258:	4a31      	ldr	r2, [pc, #196]	@ (8006320 <HAL_I2S_Init+0x27c>)
 800625a:	e001      	b.n	8006260 <HAL_I2S_Init+0x1bc>
 800625c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006260:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006264:	f023 030f 	bic.w	r3, r3, #15
 8006268:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <HAL_I2S_Init+0x278>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_I2S_Init+0x1d4>
 8006274:	4b2a      	ldr	r3, [pc, #168]	@ (8006320 <HAL_I2S_Init+0x27c>)
 8006276:	e001      	b.n	800627c <HAL_I2S_Init+0x1d8>
 8006278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800627c:	2202      	movs	r2, #2
 800627e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a25      	ldr	r2, [pc, #148]	@ (800631c <HAL_I2S_Init+0x278>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <HAL_I2S_Init+0x1ea>
 800628a:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_I2S_Init+0x27c>)
 800628c:	e001      	b.n	8006292 <HAL_I2S_Init+0x1ee>
 800628e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629e:	d003      	beq.n	80062a8 <HAL_I2S_Init+0x204>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80062a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	e001      	b.n	80062b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062be:	4313      	orrs	r3, r2
 80062c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062d2:	4313      	orrs	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	897b      	ldrh	r3, [r7, #10]
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a0d      	ldr	r2, [pc, #52]	@ (800631c <HAL_I2S_Init+0x278>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d101      	bne.n	80062f0 <HAL_I2S_Init+0x24c>
 80062ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <HAL_I2S_Init+0x27c>)
 80062ee:	e001      	b.n	80062f4 <HAL_I2S_Init+0x250>
 80062f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062f4:	897a      	ldrh	r2, [r7, #10]
 80062f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3720      	adds	r7, #32
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	08006a29 	.word	0x08006a29
 8006314:	cccccccd 	.word	0xcccccccd
 8006318:	08006bb1 	.word	0x08006bb1
 800631c:	40003800 	.word	0x40003800
 8006320:	40003400 	.word	0x40003400

08006324 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_I2S_Receive_DMA+0x1a>
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0a1      	b.n	8006486 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_I2S_Receive_DMA+0x2e>
 800634e:	2302      	movs	r3, #2
 8006350:	e099      	b.n	8006486 <HAL_I2S_Receive_DMA+0x162>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d005      	beq.n	8006372 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
 8006370:	e089      	b.n	8006486 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2204      	movs	r2, #4
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d002      	beq.n	800639e <HAL_I2S_Receive_DMA+0x7a>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b05      	cmp	r3, #5
 800639c:	d10a      	bne.n	80063b4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	865a      	strh	r2, [r3, #50]	@ 0x32
 80063b2:	e005      	b.n	80063c0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	88fa      	ldrh	r2, [r7, #6]
 80063b8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c4:	4a32      	ldr	r2, [pc, #200]	@ (8006490 <HAL_I2S_Receive_DMA+0x16c>)
 80063c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	4a31      	ldr	r2, [pc, #196]	@ (8006494 <HAL_I2S_Receive_DMA+0x170>)
 80063ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d4:	4a30      	ldr	r2, [pc, #192]	@ (8006498 <HAL_I2S_Receive_DMA+0x174>)
 80063d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e6:	d10a      	bne.n	80063fe <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	4619      	mov	r1, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006414:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006416:	f7fd fba9 	bl	8003b6c <HAL_DMA_Start_IT>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	f043 0208 	orr.w	r2, r3, #8
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e022      	b.n	8006486 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800645c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d107      	bne.n	800647c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	08006907 	.word	0x08006907
 8006494:	080068c5 	.word	0x080068c5
 8006498:	08006923 	.word	0x08006923

0800649c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b0:	d004      	beq.n	80064bc <HAL_I2S_DMAStop+0x20>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f040 80d1 	bne.w	800665e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00f      	beq.n	80064e4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fd fba7 	bl	8003c1c <HAL_DMA_Abort>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d8:	f043 0208 	orr.w	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80064e4:	2364      	movs	r3, #100	@ 0x64
 80064e6:	2201      	movs	r2, #1
 80064e8:	2102      	movs	r1, #2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb26 	bl	8006b3c <I2S_WaitFlagStateUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fa:	f043 0201 	orr.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800650e:	2364      	movs	r3, #100	@ 0x64
 8006510:	2200      	movs	r2, #0
 8006512:	2180      	movs	r1, #128	@ 0x80
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fb11 	bl	8006b3c <I2S_WaitFlagStateUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006524:	f043 0201 	orr.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006546:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0202 	bic.w	r2, r2, #2
 8006564:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b05      	cmp	r3, #5
 8006570:	f040 8165 	bne.w	800683e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00f      	beq.n	800659c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006580:	4618      	mov	r0, r3
 8006582:	f7fd fb4b 	bl	8003c1c <HAL_DMA_Abort>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006590:	f043 0208 	orr.w	r2, r3, #8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a8a      	ldr	r2, [pc, #552]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <HAL_I2S_DMAStop+0x10e>
 80065a6:	4b8a      	ldr	r3, [pc, #552]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 80065a8:	e001      	b.n	80065ae <HAL_I2S_DMAStop+0x112>
 80065aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4985      	ldr	r1, [pc, #532]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 80065b6:	428b      	cmp	r3, r1
 80065b8:	d101      	bne.n	80065be <HAL_I2S_DMAStop+0x122>
 80065ba:	4b85      	ldr	r3, [pc, #532]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 80065bc:	e001      	b.n	80065c2 <HAL_I2S_DMAStop+0x126>
 80065be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a7e      	ldr	r2, [pc, #504]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <HAL_I2S_DMAStop+0x13e>
 80065d6:	4b7e      	ldr	r3, [pc, #504]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 80065d8:	e001      	b.n	80065de <HAL_I2S_DMAStop+0x142>
 80065da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a79      	ldr	r2, [pc, #484]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <HAL_I2S_DMAStop+0x154>
 80065ec:	4b78      	ldr	r3, [pc, #480]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 80065ee:	e001      	b.n	80065f4 <HAL_I2S_DMAStop+0x158>
 80065f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d101      	bne.n	8006608 <HAL_I2S_DMAStop+0x16c>
 8006604:	4b72      	ldr	r3, [pc, #456]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 8006606:	e001      	b.n	800660c <HAL_I2S_DMAStop+0x170>
 8006608:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	496e      	ldr	r1, [pc, #440]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 8006614:	428b      	cmp	r3, r1
 8006616:	d101      	bne.n	800661c <HAL_I2S_DMAStop+0x180>
 8006618:	4b6d      	ldr	r3, [pc, #436]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 800661a:	e001      	b.n	8006620 <HAL_I2S_DMAStop+0x184>
 800661c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006646:	e0fa      	b.n	800683e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5f      	ldr	r2, [pc, #380]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <HAL_I2S_DMAStop+0x1ba>
 8006652:	4b5f      	ldr	r3, [pc, #380]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 8006654:	e001      	b.n	800665a <HAL_I2S_DMAStop+0x1be>
 8006656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800665a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800665c:	e0ef      	b.n	800683e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006666:	d005      	beq.n	8006674 <HAL_I2S_DMAStop+0x1d8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006670:	f040 80e5 	bne.w	800683e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00f      	beq.n	800669c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	4618      	mov	r0, r3
 8006682:	f7fd facb 	bl	8003c1c <HAL_DMA_Abort>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006690:	f043 0208 	orr.w	r2, r3, #8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	f040 809a 	bne.w	80067de <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00f      	beq.n	80066d2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd fab0 	bl	8003c1c <HAL_DMA_Abort>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	f043 0208 	orr.w	r2, r3, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80066d2:	f7fd f85b 	bl	800378c <HAL_GetTick>
 80066d6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80066d8:	e012      	b.n	8006700 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80066da:	f7fd f857 	bl	800378c <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b64      	cmp	r3, #100	@ 0x64
 80066e6:	d90b      	bls.n	8006700 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	f043 0201 	orr.w	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a31      	ldr	r2, [pc, #196]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_I2S_DMAStop+0x272>
 800670a:	4b31      	ldr	r3, [pc, #196]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 800670c:	e001      	b.n	8006712 <HAL_I2S_DMAStop+0x276>
 800670e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d1de      	bne.n	80066da <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800671c:	e012      	b.n	8006744 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800671e:	f7fd f835 	bl	800378c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b64      	cmp	r3, #100	@ 0x64
 800672a:	d90b      	bls.n	8006744 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006730:	f043 0201 	orr.w	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a20      	ldr	r2, [pc, #128]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d101      	bne.n	8006752 <HAL_I2S_DMAStop+0x2b6>
 800674e:	4b20      	ldr	r3, [pc, #128]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 8006750:	e001      	b.n	8006756 <HAL_I2S_DMAStop+0x2ba>
 8006752:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800675c:	2b80      	cmp	r3, #128	@ 0x80
 800675e:	d0de      	beq.n	800671e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a19      	ldr	r2, [pc, #100]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_I2S_DMAStop+0x2d2>
 800676a:	4b19      	ldr	r3, [pc, #100]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 800676c:	e001      	b.n	8006772 <HAL_I2S_DMAStop+0x2d6>
 800676e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4914      	ldr	r1, [pc, #80]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 800677a:	428b      	cmp	r3, r1
 800677c:	d101      	bne.n	8006782 <HAL_I2S_DMAStop+0x2e6>
 800677e:	4b14      	ldr	r3, [pc, #80]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 8006780:	e001      	b.n	8006786 <HAL_I2S_DMAStop+0x2ea>
 8006782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800678a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a0d      	ldr	r2, [pc, #52]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d101      	bne.n	800679e <HAL_I2S_DMAStop+0x302>
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 800679c:	e001      	b.n	80067a2 <HAL_I2S_DMAStop+0x306>
 800679e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a07      	ldr	r2, [pc, #28]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d101      	bne.n	80067b6 <HAL_I2S_DMAStop+0x31a>
 80067b2:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 80067b4:	e001      	b.n	80067ba <HAL_I2S_DMAStop+0x31e>
 80067b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4902      	ldr	r1, [pc, #8]	@ (80067cc <HAL_I2S_DMAStop+0x330>)
 80067c2:	428b      	cmp	r3, r1
 80067c4:	d106      	bne.n	80067d4 <HAL_I2S_DMAStop+0x338>
 80067c6:	4b02      	ldr	r3, [pc, #8]	@ (80067d0 <HAL_I2S_DMAStop+0x334>)
 80067c8:	e006      	b.n	80067d8 <HAL_I2S_DMAStop+0x33c>
 80067ca:	bf00      	nop
 80067cc:	40003800 	.word	0x40003800
 80067d0:	40003400 	.word	0x40003400
 80067d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067d8:	f022 0202 	bic.w	r2, r2, #2
 80067dc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ec:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800681c:	d10c      	bne.n	8006838 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e002      	b.n	800683e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8006846:	7ffb      	ldrb	r3, [r7, #31]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3720      	adds	r7, #32
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800689e:	b2db      	uxtb	r3, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_I2S_GetError>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval I2S Error Code
  */
uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return hi2s->ErrorCode;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10e      	bne.n	80068f8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0201 	bic.w	r2, r2, #1
 80068e8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7fa fe8d 	bl	8001618 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7fa fecf 	bl	80016b8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0203 	bic.w	r2, r2, #3
 800693e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006958:	f043 0208 	orr.w	r2, r3, #8
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff ff8b 	bl	800687c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10e      	bne.n	80069c2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff53 	bl	8006868 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069dc:	b292      	uxth	r2, r2
 80069de:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10e      	bne.n	8006a20 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fa fdfc 	bl	8001618 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d13a      	bne.n	8006aba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d109      	bne.n	8006a62 <I2S_IRQHandler+0x3a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d102      	bne.n	8006a62 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ffb4 	bl	80069ca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a68:	2b40      	cmp	r3, #64	@ 0x40
 8006a6a:	d126      	bne.n	8006aba <I2S_IRQHandler+0x92>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d11f      	bne.n	8006aba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a88:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aac:	f043 0202 	orr.w	r2, r3, #2
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff fee1 	bl	800687c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d136      	bne.n	8006b34 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d109      	bne.n	8006ae4 <I2S_IRQHandler+0xbc>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b80      	cmp	r3, #128	@ 0x80
 8006adc:	d102      	bne.n	8006ae4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff ff45 	bl	800696e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d122      	bne.n	8006b34 <I2S_IRQHandler+0x10c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d11b      	bne.n	8006b34 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b0a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b26:	f043 0204 	orr.w	r2, r3, #4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fea4 	bl	800687c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b34:	bf00      	nop
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b4c:	f7fc fe1e 	bl	800378c <HAL_GetTick>
 8006b50:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006b52:	e018      	b.n	8006b86 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d014      	beq.n	8006b86 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006b5c:	f7fc fe16 	bl	800378c <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d902      	bls.n	8006b72 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e00f      	b.n	8006ba6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1d7      	bne.n	8006b54 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a92      	ldr	r2, [pc, #584]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006bca:	4b92      	ldr	r3, [pc, #584]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bcc:	e001      	b.n	8006bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006bce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a8b      	ldr	r2, [pc, #556]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d101      	bne.n	8006bec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006be8:	4b8a      	ldr	r3, [pc, #552]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bea:	e001      	b.n	8006bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006bec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bfc:	d004      	beq.n	8006c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 8099 	bne.w	8006d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d107      	bne.n	8006c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f925 	bl	8006e6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f9c8 	bl	8006fcc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b40      	cmp	r3, #64	@ 0x40
 8006c44:	d13a      	bne.n	8006cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d035      	beq.n	8006cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a6e      	ldr	r2, [pc, #440]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c5c:	e001      	b.n	8006c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006c5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4969      	ldr	r1, [pc, #420]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c6a:	428b      	cmp	r3, r1
 8006c6c:	d101      	bne.n	8006c72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006c6e:	4b69      	ldr	r3, [pc, #420]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c70:	e001      	b.n	8006c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006c72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cae:	f043 0202 	orr.w	r2, r3, #2
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fde0 	bl	800687c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	f040 80c3 	bne.w	8006e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80bd 	beq.w	8006e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ce2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a49      	ldr	r2, [pc, #292]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006cee:	4b49      	ldr	r3, [pc, #292]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cf0:	e001      	b.n	8006cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006cf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4944      	ldr	r1, [pc, #272]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cfe:	428b      	cmp	r3, r1
 8006d00:	d101      	bne.n	8006d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d02:	4b44      	ldr	r3, [pc, #272]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d04:	e001      	b.n	8006d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d10:	2300      	movs	r3, #0
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]
 8006d1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2a:	f043 0204 	orr.w	r2, r3, #4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fda2 	bl	800687c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d38:	e089      	b.n	8006e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d107      	bne.n	8006d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f8be 	bl	8006ed0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d107      	bne.n	8006d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f8fd 	bl	8006f68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d74:	2b40      	cmp	r3, #64	@ 0x40
 8006d76:	d12f      	bne.n	8006dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d02a      	beq.n	8006dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1e      	ldr	r2, [pc, #120]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d101      	bne.n	8006da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d9e:	e001      	b.n	8006da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006da0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4919      	ldr	r1, [pc, #100]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dac:	428b      	cmp	r3, r1
 8006dae:	d101      	bne.n	8006db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006db0:	4b18      	ldr	r3, [pc, #96]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006db2:	e001      	b.n	8006db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006db4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006db8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006dbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	f043 0202 	orr.w	r2, r3, #2
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fd52 	bl	800687c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d136      	bne.n	8006e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d031      	beq.n	8006e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a07      	ldr	r2, [pc, #28]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006df8:	e001      	b.n	8006dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006dfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4902      	ldr	r1, [pc, #8]	@ (8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e06:	428b      	cmp	r3, r1
 8006e08:	d106      	bne.n	8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e0a:	4b02      	ldr	r3, [pc, #8]	@ (8006e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e0c:	e006      	b.n	8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e0e:	bf00      	nop
 8006e10:	40003800 	.word	0x40003800
 8006e14:	40003400 	.word	0x40003400
 8006e18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3e:	f043 0204 	orr.w	r2, r3, #4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff fd18 	bl	800687c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e4c:	e000      	b.n	8006e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e4e:	bf00      	nop
}
 8006e50:	bf00      	nop
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	1c99      	adds	r1, r3, #2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d113      	bne.n	8006ec6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006eac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ffc9 	bl	8006e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	1c99      	adds	r1, r3, #2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6251      	str	r1, [r2, #36]	@ 0x24
 8006ee2:	8819      	ldrh	r1, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <I2SEx_TxISR_I2SExt+0x90>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d101      	bne.n	8006ef2 <I2SEx_TxISR_I2SExt+0x22>
 8006eee:	4b1d      	ldr	r3, [pc, #116]	@ (8006f64 <I2SEx_TxISR_I2SExt+0x94>)
 8006ef0:	e001      	b.n	8006ef6 <I2SEx_TxISR_I2SExt+0x26>
 8006ef2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d121      	bne.n	8006f56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a12      	ldr	r2, [pc, #72]	@ (8006f60 <I2SEx_TxISR_I2SExt+0x90>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <I2SEx_TxISR_I2SExt+0x50>
 8006f1c:	4b11      	ldr	r3, [pc, #68]	@ (8006f64 <I2SEx_TxISR_I2SExt+0x94>)
 8006f1e:	e001      	b.n	8006f24 <I2SEx_TxISR_I2SExt+0x54>
 8006f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	490d      	ldr	r1, [pc, #52]	@ (8006f60 <I2SEx_TxISR_I2SExt+0x90>)
 8006f2c:	428b      	cmp	r3, r1
 8006f2e:	d101      	bne.n	8006f34 <I2SEx_TxISR_I2SExt+0x64>
 8006f30:	4b0c      	ldr	r3, [pc, #48]	@ (8006f64 <I2SEx_TxISR_I2SExt+0x94>)
 8006f32:	e001      	b.n	8006f38 <I2SEx_TxISR_I2SExt+0x68>
 8006f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff ff81 	bl	8006e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40003800 	.word	0x40003800
 8006f64:	40003400 	.word	0x40003400

08006f68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68d8      	ldr	r0, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	1c99      	adds	r1, r3, #2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006f80:	b282      	uxth	r2, r0
 8006f82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d113      	bne.n	8006fc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006faa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff4a 	bl	8006e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a20      	ldr	r2, [pc, #128]	@ (800705c <I2SEx_RxISR_I2SExt+0x90>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d101      	bne.n	8006fe2 <I2SEx_RxISR_I2SExt+0x16>
 8006fde:	4b20      	ldr	r3, [pc, #128]	@ (8007060 <I2SEx_RxISR_I2SExt+0x94>)
 8006fe0:	e001      	b.n	8006fe6 <I2SEx_RxISR_I2SExt+0x1a>
 8006fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fe6:	68d8      	ldr	r0, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	1c99      	adds	r1, r3, #2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006ff2:	b282      	uxth	r2, r0
 8006ff4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d121      	bne.n	8007052 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a12      	ldr	r2, [pc, #72]	@ (800705c <I2SEx_RxISR_I2SExt+0x90>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d101      	bne.n	800701c <I2SEx_RxISR_I2SExt+0x50>
 8007018:	4b11      	ldr	r3, [pc, #68]	@ (8007060 <I2SEx_RxISR_I2SExt+0x94>)
 800701a:	e001      	b.n	8007020 <I2SEx_RxISR_I2SExt+0x54>
 800701c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	490d      	ldr	r1, [pc, #52]	@ (800705c <I2SEx_RxISR_I2SExt+0x90>)
 8007028:	428b      	cmp	r3, r1
 800702a:	d101      	bne.n	8007030 <I2SEx_RxISR_I2SExt+0x64>
 800702c:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <I2SEx_RxISR_I2SExt+0x94>)
 800702e:	e001      	b.n	8007034 <I2SEx_RxISR_I2SExt+0x68>
 8007030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007034:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007038:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d106      	bne.n	8007052 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff ff03 	bl	8006e58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40003800 	.word	0x40003800
 8007060:	40003400 	.word	0x40003400

08007064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e267      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d075      	beq.n	800716e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007082:	4b88      	ldr	r3, [pc, #544]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b04      	cmp	r3, #4
 800708c:	d00c      	beq.n	80070a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800708e:	4b85      	ldr	r3, [pc, #532]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007096:	2b08      	cmp	r3, #8
 8007098:	d112      	bne.n	80070c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800709a:	4b82      	ldr	r3, [pc, #520]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a8:	4b7e      	ldr	r3, [pc, #504]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d05b      	beq.n	800716c <HAL_RCC_OscConfig+0x108>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d157      	bne.n	800716c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e242      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c8:	d106      	bne.n	80070d8 <HAL_RCC_OscConfig+0x74>
 80070ca:	4b76      	ldr	r3, [pc, #472]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a75      	ldr	r2, [pc, #468]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e01d      	b.n	8007114 <HAL_RCC_OscConfig+0xb0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070e0:	d10c      	bne.n	80070fc <HAL_RCC_OscConfig+0x98>
 80070e2:	4b70      	ldr	r3, [pc, #448]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6f      	ldr	r2, [pc, #444]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4b6d      	ldr	r3, [pc, #436]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a6c      	ldr	r2, [pc, #432]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e00b      	b.n	8007114 <HAL_RCC_OscConfig+0xb0>
 80070fc:	4b69      	ldr	r3, [pc, #420]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a68      	ldr	r2, [pc, #416]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a65      	ldr	r2, [pc, #404]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800710e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fc fb36 	bl	800378c <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007124:	f7fc fb32 	bl	800378c <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b64      	cmp	r3, #100	@ 0x64
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e207      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007136:	4b5b      	ldr	r3, [pc, #364]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0xc0>
 8007142:	e014      	b.n	800716e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fc fb22 	bl	800378c <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800714c:	f7fc fb1e 	bl	800378c <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	@ 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e1f3      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800715e:	4b51      	ldr	r3, [pc, #324]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0xe8>
 800716a:	e000      	b.n	800716e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d063      	beq.n	8007242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800717a:	4b4a      	ldr	r3, [pc, #296]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007186:	4b47      	ldr	r3, [pc, #284]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800718e:	2b08      	cmp	r3, #8
 8007190:	d11c      	bne.n	80071cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007192:	4b44      	ldr	r3, [pc, #272]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d116      	bne.n	80071cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800719e:	4b41      	ldr	r3, [pc, #260]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_RCC_OscConfig+0x152>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d001      	beq.n	80071b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e1c7      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b6:	4b3b      	ldr	r3, [pc, #236]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4937      	ldr	r1, [pc, #220]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ca:	e03a      	b.n	8007242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d020      	beq.n	8007216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d4:	4b34      	ldr	r3, [pc, #208]	@ (80072a8 <HAL_RCC_OscConfig+0x244>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fc fad7 	bl	800378c <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071e2:	f7fc fad3 	bl	800378c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e1a8      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f4:	4b2b      	ldr	r3, [pc, #172]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007200:	4b28      	ldr	r3, [pc, #160]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	4925      	ldr	r1, [pc, #148]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007210:	4313      	orrs	r3, r2
 8007212:	600b      	str	r3, [r1, #0]
 8007214:	e015      	b.n	8007242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007216:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <HAL_RCC_OscConfig+0x244>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fc fab6 	bl	800378c <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007224:	f7fc fab2 	bl	800378c <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e187      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007236:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d036      	beq.n	80072bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007256:	4b15      	ldr	r3, [pc, #84]	@ (80072ac <HAL_RCC_OscConfig+0x248>)
 8007258:	2201      	movs	r2, #1
 800725a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725c:	f7fc fa96 	bl	800378c <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007264:	f7fc fa92 	bl	800378c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e167      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0x200>
 8007282:	e01b      	b.n	80072bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007284:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <HAL_RCC_OscConfig+0x248>)
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728a:	f7fc fa7f 	bl	800378c <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007290:	e00e      	b.n	80072b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007292:	f7fc fa7b 	bl	800378c <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d907      	bls.n	80072b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e150      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
 80072a4:	40023800 	.word	0x40023800
 80072a8:	42470000 	.word	0x42470000
 80072ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b0:	4b88      	ldr	r3, [pc, #544]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ea      	bne.n	8007292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8097 	beq.w	80073f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ce:	4b81      	ldr	r3, [pc, #516]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10f      	bne.n	80072fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	4b7d      	ldr	r3, [pc, #500]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	4a7c      	ldr	r2, [pc, #496]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ea:	4b7a      	ldr	r3, [pc, #488]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072fa:	4b77      	ldr	r3, [pc, #476]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d118      	bne.n	8007338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007306:	4b74      	ldr	r3, [pc, #464]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a73      	ldr	r2, [pc, #460]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007312:	f7fc fa3b 	bl	800378c <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007318:	e008      	b.n	800732c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731a:	f7fc fa37 	bl	800378c <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e10c      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800732c:	4b6a      	ldr	r3, [pc, #424]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d106      	bne.n	800734e <HAL_RCC_OscConfig+0x2ea>
 8007340:	4b64      	ldr	r3, [pc, #400]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007344:	4a63      	ldr	r2, [pc, #396]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	@ 0x70
 800734c:	e01c      	b.n	8007388 <HAL_RCC_OscConfig+0x324>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b05      	cmp	r3, #5
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0x30c>
 8007356:	4b5f      	ldr	r3, [pc, #380]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	4a5e      	ldr	r2, [pc, #376]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 800735c:	f043 0304 	orr.w	r3, r3, #4
 8007360:	6713      	str	r3, [r2, #112]	@ 0x70
 8007362:	4b5c      	ldr	r3, [pc, #368]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007366:	4a5b      	ldr	r2, [pc, #364]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6713      	str	r3, [r2, #112]	@ 0x70
 800736e:	e00b      	b.n	8007388 <HAL_RCC_OscConfig+0x324>
 8007370:	4b58      	ldr	r3, [pc, #352]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007374:	4a57      	ldr	r2, [pc, #348]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	6713      	str	r3, [r2, #112]	@ 0x70
 800737c:	4b55      	ldr	r3, [pc, #340]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007380:	4a54      	ldr	r2, [pc, #336]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007382:	f023 0304 	bic.w	r3, r3, #4
 8007386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d015      	beq.n	80073bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007390:	f7fc f9fc 	bl	800378c <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007396:	e00a      	b.n	80073ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007398:	f7fc f9f8 	bl	800378c <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e0cb      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ae:	4b49      	ldr	r3, [pc, #292]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0ee      	beq.n	8007398 <HAL_RCC_OscConfig+0x334>
 80073ba:	e014      	b.n	80073e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073bc:	f7fc f9e6 	bl	800378c <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073c2:	e00a      	b.n	80073da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073c4:	f7fc f9e2 	bl	800378c <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e0b5      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073da:	4b3e      	ldr	r3, [pc, #248]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1ee      	bne.n	80073c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d105      	bne.n	80073f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ec:	4b39      	ldr	r3, [pc, #228]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	4a38      	ldr	r2, [pc, #224]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80a1 	beq.w	8007544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007402:	4b34      	ldr	r3, [pc, #208]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
 800740a:	2b08      	cmp	r3, #8
 800740c:	d05c      	beq.n	80074c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d141      	bne.n	800749a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007416:	4b31      	ldr	r3, [pc, #196]	@ (80074dc <HAL_RCC_OscConfig+0x478>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800741c:	f7fc f9b6 	bl	800378c <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007424:	f7fc f9b2 	bl	800378c <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e087      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007436:	4b27      	ldr	r3, [pc, #156]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	019b      	lsls	r3, r3, #6
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	3b01      	subs	r3, #1
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	061b      	lsls	r3, r3, #24
 8007466:	491b      	ldr	r1, [pc, #108]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007468:	4313      	orrs	r3, r2
 800746a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800746c:	4b1b      	ldr	r3, [pc, #108]	@ (80074dc <HAL_RCC_OscConfig+0x478>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007472:	f7fc f98b 	bl	800378c <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800747a:	f7fc f987 	bl	800378c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e05c      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800748c:	4b11      	ldr	r3, [pc, #68]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x416>
 8007498:	e054      	b.n	8007544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749a:	4b10      	ldr	r3, [pc, #64]	@ (80074dc <HAL_RCC_OscConfig+0x478>)
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fc f974 	bl	800378c <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a8:	f7fc f970 	bl	800378c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e045      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ba:	4b06      	ldr	r3, [pc, #24]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x444>
 80074c6:	e03d      	b.n	8007544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d107      	bne.n	80074e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e038      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40007000 	.word	0x40007000
 80074dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007550 <HAL_RCC_OscConfig+0x4ec>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d028      	beq.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d121      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d11a      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007510:	4013      	ands	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007518:	4293      	cmp	r3, r2
 800751a:	d111      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	3b01      	subs	r3, #1
 800752a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800752c:	429a      	cmp	r2, r3
 800752e:	d107      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40023800 	.word	0x40023800

08007554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0cc      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007568:	4b68      	ldr	r3, [pc, #416]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d90c      	bls.n	8007590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b65      	ldr	r3, [pc, #404]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b63      	ldr	r3, [pc, #396]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0b8      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d020      	beq.n	80075de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075a8:	4b59      	ldr	r3, [pc, #356]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	4a58      	ldr	r2, [pc, #352]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c0:	4b53      	ldr	r3, [pc, #332]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4a52      	ldr	r2, [pc, #328]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075cc:	4b50      	ldr	r3, [pc, #320]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	494d      	ldr	r1, [pc, #308]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d044      	beq.n	8007674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d107      	bne.n	8007602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	4b47      	ldr	r3, [pc, #284]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d119      	bne.n	8007632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e07f      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d003      	beq.n	8007612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800760e:	2b03      	cmp	r3, #3
 8007610:	d107      	bne.n	8007622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007612:	4b3f      	ldr	r3, [pc, #252]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e06f      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007622:	4b3b      	ldr	r3, [pc, #236]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e067      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007632:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f023 0203 	bic.w	r2, r3, #3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	4934      	ldr	r1, [pc, #208]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007640:	4313      	orrs	r3, r2
 8007642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007644:	f7fc f8a2 	bl	800378c <HAL_GetTick>
 8007648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800764a:	e00a      	b.n	8007662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800764c:	f7fc f89e 	bl	800378c <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e04f      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007662:	4b2b      	ldr	r3, [pc, #172]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 020c 	and.w	r2, r3, #12
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	429a      	cmp	r2, r3
 8007672:	d1eb      	bne.n	800764c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007674:	4b25      	ldr	r3, [pc, #148]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d20c      	bcs.n	800769c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007682:	4b22      	ldr	r3, [pc, #136]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800768a:	4b20      	ldr	r3, [pc, #128]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d001      	beq.n	800769c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e032      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076a8:	4b19      	ldr	r3, [pc, #100]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4916      	ldr	r1, [pc, #88]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076c6:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	490e      	ldr	r1, [pc, #56]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076da:	f000 f821 	bl	8007720 <HAL_RCC_GetSysClockFreq>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	490a      	ldr	r1, [pc, #40]	@ (8007714 <HAL_RCC_ClockConfig+0x1c0>)
 80076ec:	5ccb      	ldrb	r3, [r1, r3]
 80076ee:	fa22 f303 	lsr.w	r3, r2, r3
 80076f2:	4a09      	ldr	r2, [pc, #36]	@ (8007718 <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076f6:	4b09      	ldr	r3, [pc, #36]	@ (800771c <HAL_RCC_ClockConfig+0x1c8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fc f802 	bl	8003704 <HAL_InitTick>

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40023c00 	.word	0x40023c00
 8007710:	40023800 	.word	0x40023800
 8007714:	0801025c 	.word	0x0801025c
 8007718:	20000020 	.word	0x20000020
 800771c:	20000024 	.word	0x20000024

08007720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007724:	b094      	sub	sp, #80	@ 0x50
 8007726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	647b      	str	r3, [r7, #68]	@ 0x44
 800772c:	2300      	movs	r3, #0
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007730:	2300      	movs	r3, #0
 8007732:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007738:	4b79      	ldr	r3, [pc, #484]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 030c 	and.w	r3, r3, #12
 8007740:	2b08      	cmp	r3, #8
 8007742:	d00d      	beq.n	8007760 <HAL_RCC_GetSysClockFreq+0x40>
 8007744:	2b08      	cmp	r3, #8
 8007746:	f200 80e1 	bhi.w	800790c <HAL_RCC_GetSysClockFreq+0x1ec>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_RCC_GetSysClockFreq+0x34>
 800774e:	2b04      	cmp	r3, #4
 8007750:	d003      	beq.n	800775a <HAL_RCC_GetSysClockFreq+0x3a>
 8007752:	e0db      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007754:	4b73      	ldr	r3, [pc, #460]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x204>)
 8007756:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007758:	e0db      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800775a:	4b73      	ldr	r3, [pc, #460]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x208>)
 800775c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800775e:	e0d8      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007760:	4b6f      	ldr	r3, [pc, #444]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007768:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800776a:	4b6d      	ldr	r3, [pc, #436]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d063      	beq.n	800783e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007776:	4b6a      	ldr	r3, [pc, #424]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	099b      	lsrs	r3, r3, #6
 800777c:	2200      	movs	r2, #0
 800777e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007780:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30
 800778a:	2300      	movs	r3, #0
 800778c:	637b      	str	r3, [r7, #52]	@ 0x34
 800778e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	f04f 0000 	mov.w	r0, #0
 800779a:	f04f 0100 	mov.w	r1, #0
 800779e:	0159      	lsls	r1, r3, #5
 80077a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077a4:	0150      	lsls	r0, r2, #5
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4621      	mov	r1, r4
 80077ac:	1a51      	subs	r1, r2, r1
 80077ae:	6139      	str	r1, [r7, #16]
 80077b0:	4629      	mov	r1, r5
 80077b2:	eb63 0301 	sbc.w	r3, r3, r1
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077c4:	4659      	mov	r1, fp
 80077c6:	018b      	lsls	r3, r1, #6
 80077c8:	4651      	mov	r1, sl
 80077ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077ce:	4651      	mov	r1, sl
 80077d0:	018a      	lsls	r2, r1, #6
 80077d2:	4651      	mov	r1, sl
 80077d4:	ebb2 0801 	subs.w	r8, r2, r1
 80077d8:	4659      	mov	r1, fp
 80077da:	eb63 0901 	sbc.w	r9, r3, r1
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	f04f 0300 	mov.w	r3, #0
 80077e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f2:	4690      	mov	r8, r2
 80077f4:	4699      	mov	r9, r3
 80077f6:	4623      	mov	r3, r4
 80077f8:	eb18 0303 	adds.w	r3, r8, r3
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	462b      	mov	r3, r5
 8007800:	eb49 0303 	adc.w	r3, r9, r3
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007812:	4629      	mov	r1, r5
 8007814:	024b      	lsls	r3, r1, #9
 8007816:	4621      	mov	r1, r4
 8007818:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800781c:	4621      	mov	r1, r4
 800781e:	024a      	lsls	r2, r1, #9
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007826:	2200      	movs	r2, #0
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800782a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800782c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007830:	f7f8 fd26 	bl	8000280 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4613      	mov	r3, r2
 800783a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800783c:	e058      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800783e:	4b38      	ldr	r3, [pc, #224]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	099b      	lsrs	r3, r3, #6
 8007844:	2200      	movs	r2, #0
 8007846:	4618      	mov	r0, r3
 8007848:	4611      	mov	r1, r2
 800784a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800784e:	623b      	str	r3, [r7, #32]
 8007850:	2300      	movs	r3, #0
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
 8007854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	f04f 0000 	mov.w	r0, #0
 8007860:	f04f 0100 	mov.w	r1, #0
 8007864:	0159      	lsls	r1, r3, #5
 8007866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800786a:	0150      	lsls	r0, r2, #5
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4641      	mov	r1, r8
 8007872:	ebb2 0a01 	subs.w	sl, r2, r1
 8007876:	4649      	mov	r1, r9
 8007878:	eb63 0b01 	sbc.w	fp, r3, r1
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800788c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007890:	ebb2 040a 	subs.w	r4, r2, sl
 8007894:	eb63 050b 	sbc.w	r5, r3, fp
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	00eb      	lsls	r3, r5, #3
 80078a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078a6:	00e2      	lsls	r2, r4, #3
 80078a8:	4614      	mov	r4, r2
 80078aa:	461d      	mov	r5, r3
 80078ac:	4643      	mov	r3, r8
 80078ae:	18e3      	adds	r3, r4, r3
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	464b      	mov	r3, r9
 80078b4:	eb45 0303 	adc.w	r3, r5, r3
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	f04f 0200 	mov.w	r2, #0
 80078be:	f04f 0300 	mov.w	r3, #0
 80078c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078c6:	4629      	mov	r1, r5
 80078c8:	028b      	lsls	r3, r1, #10
 80078ca:	4621      	mov	r1, r4
 80078cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d0:	4621      	mov	r1, r4
 80078d2:	028a      	lsls	r2, r1, #10
 80078d4:	4610      	mov	r0, r2
 80078d6:	4619      	mov	r1, r3
 80078d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078da:	2200      	movs	r2, #0
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	61fa      	str	r2, [r7, #28]
 80078e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e4:	f7f8 fccc 	bl	8000280 <__aeabi_uldivmod>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4613      	mov	r3, r2
 80078ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	3301      	adds	r3, #1
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007900:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007904:	fbb2 f3f3 	udiv	r3, r2, r3
 8007908:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800790a:	e002      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x204>)
 800790e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007914:	4618      	mov	r0, r3
 8007916:	3750      	adds	r7, #80	@ 0x50
 8007918:	46bd      	mov	sp, r7
 800791a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800791e:	bf00      	nop
 8007920:	40023800 	.word	0x40023800
 8007924:	00f42400 	.word	0x00f42400
 8007928:	007a1200 	.word	0x007a1200

0800792c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b03      	ldr	r3, [pc, #12]	@ (8007940 <HAL_RCC_GetHCLKFreq+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000020 	.word	0x20000020

08007944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007948:	f7ff fff0 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4903      	ldr	r1, [pc, #12]	@ (8007968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	0801026c 	.word	0x0801026c

0800796c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007970:	f7ff ffdc 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b05      	ldr	r3, [pc, #20]	@ (800798c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4903      	ldr	r1, [pc, #12]	@ (8007990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	0801026c 	.word	0x0801026c

08007994 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d035      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079bc:	4b62      	ldr	r3, [pc, #392]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079c2:	f7fb fee3 	bl	800378c <HAL_GetTick>
 80079c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079c8:	e008      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079ca:	f7fb fedf 	bl	800378c <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e0b0      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079dc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	019a      	lsls	r2, r3, #6
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	071b      	lsls	r3, r3, #28
 80079f4:	4955      	ldr	r1, [pc, #340]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079fc:	4b52      	ldr	r3, [pc, #328]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a02:	f7fb fec3 	bl	800378c <HAL_GetTick>
 8007a06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a08:	e008      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a0a:	f7fb febf 	bl	800378c <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e090      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0f0      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8083 	beq.w	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	4b44      	ldr	r3, [pc, #272]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	4a43      	ldr	r2, [pc, #268]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a46:	4b41      	ldr	r3, [pc, #260]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a52:	4b3f      	ldr	r3, [pc, #252]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a3e      	ldr	r2, [pc, #248]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a5e:	f7fb fe95 	bl	800378c <HAL_GetTick>
 8007a62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a64:	e008      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a66:	f7fb fe91 	bl	800378c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e062      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a78:	4b35      	ldr	r3, [pc, #212]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a84:	4b31      	ldr	r3, [pc, #196]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d02f      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d028      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aac:	4b29      	ldr	r3, [pc, #164]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab2:	4b28      	ldr	r3, [pc, #160]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ab8:	4a24      	ldr	r2, [pc, #144]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007abe:	4b23      	ldr	r3, [pc, #140]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d114      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007aca:	f7fb fe5f 	bl	800378c <HAL_GetTick>
 8007ace:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad0:	e00a      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad2:	f7fb fe5b 	bl	800378c <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e02a      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae8:	4b18      	ldr	r3, [pc, #96]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0ee      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b00:	d10d      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b02:	4b12      	ldr	r3, [pc, #72]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b16:	490d      	ldr	r1, [pc, #52]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	608b      	str	r3, [r1, #8]
 8007b1c:	e005      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b28:	6093      	str	r3, [r2, #8]
 8007b2a:	4b08      	ldr	r3, [pc, #32]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b36:	4905      	ldr	r1, [pc, #20]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	42470068 	.word	0x42470068
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	40007000 	.word	0x40007000
 8007b54:	42470e40 	.word	0x42470e40

08007b58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d13e      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007b76:	4b23      	ldr	r3, [pc, #140]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d12f      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b8e:	617b      	str	r3, [r7, #20]
          break;
 8007b90:	e02f      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b92:	4b1c      	ldr	r3, [pc, #112]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b9e:	d108      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ba0:	4b18      	ldr	r3, [pc, #96]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ba8:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	e007      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bb2:	4b14      	ldr	r3, [pc, #80]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bba:	4a15      	ldr	r2, [pc, #84]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007bc2:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc8:	099b      	lsrs	r3, r3, #6
 8007bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bdc:	0f1b      	lsrs	r3, r3, #28
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be8:	617b      	str	r3, [r7, #20]
          break;
 8007bea:	e002      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]
          break;
 8007bf0:	bf00      	nop
        }
      }
      break;
 8007bf2:	bf00      	nop
    }
  }
  return frequency;
 8007bf4:	697b      	ldr	r3, [r7, #20]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40023800 	.word	0x40023800
 8007c08:	00bb8000 	.word	0x00bb8000
 8007c0c:	007a1200 	.word	0x007a1200
 8007c10:	00f42400 	.word	0x00f42400

08007c14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e022      	b.n	8007c6c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7fb fae1 	bl	8003200 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2203      	movs	r2, #3
 8007c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f814 	bl	8007c74 <HAL_SD_InitCard>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e00a      	b.n	8007c6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c74:	b5b0      	push	{r4, r5, r7, lr}
 8007c76:	b08e      	sub	sp, #56	@ 0x38
 8007c78:	af04      	add	r7, sp, #16
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007c90:	2376      	movs	r3, #118	@ 0x76
 8007c92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681d      	ldr	r5, [r3, #0]
 8007c98:	466c      	mov	r4, sp
 8007c9a:	f107 0314 	add.w	r3, r7, #20
 8007c9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ca6:	f107 0308 	add.w	r3, r7, #8
 8007caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cac:	4628      	mov	r0, r5
 8007cae:	f001 ffb1 	bl	8009c14 <SDIO_Init>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e04f      	b.n	8007d64 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007cc4:	4b29      	ldr	r3, [pc, #164]	@ (8007d6c <HAL_SD_InitCard+0xf8>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 ffe9 	bl	8009ca6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007cd4:	4b25      	ldr	r3, [pc, #148]	@ (8007d6c <HAL_SD_InitCard+0xf8>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007cda:	2002      	movs	r0, #2
 8007cdc:	f7fb fd62 	bl	80037a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fe69 	bl	80089b8 <SD_PowerON>
 8007ce6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00b      	beq.n	8007d06 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e02e      	b.n	8007d64 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fd88 	bl	800881c <SD_InitCard>
 8007d0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e01b      	b.n	8007d64 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d34:	4618      	mov	r0, r3
 8007d36:	f002 f848 	bl	8009dca <SDMMC_CmdBlockLength>
 8007d3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00f      	beq.n	8007d62 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a0a      	ldr	r2, [pc, #40]	@ (8007d70 <HAL_SD_InitCard+0xfc>)
 8007d48:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3728      	adds	r7, #40	@ 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d6c:	422580a0 	.word	0x422580a0
 8007d70:	004005ff 	.word	0x004005ff

08007d74 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b092      	sub	sp, #72	@ 0x48
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d82:	f7fb fd03 	bl	800378c <HAL_GetTick>
 8007d86:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d107      	bne.n	8007da6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e1bd      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	f040 81b0 	bne.w	8008114 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	441a      	add	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d907      	bls.n	8007dd8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e1a4      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2200      	movs	r2, #0
 8007de6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d002      	beq.n	8007df6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	025b      	lsls	r3, r3, #9
 8007df4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	025b      	lsls	r3, r3, #9
 8007e00:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e02:	2390      	movs	r3, #144	@ 0x90
 8007e04:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e06:	2302      	movs	r3, #2
 8007e08:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f107 0214 	add.w	r2, r7, #20
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 ffa8 	bl	8009d72 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d90a      	bls.n	8007e3e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 f80c 	bl	8009e52 <SDMMC_CmdReadMultiBlock>
 8007e3a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007e3c:	e009      	b.n	8007e52 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 ffdf 	bl	8009e0e <SDMMC_CmdReadSingleBlock>
 8007e50:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a7a      	ldr	r2, [pc, #488]	@ (8008048 <HAL_SD_ReadBlocks+0x2d4>)
 8007e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e66:	431a      	orrs	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e151      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007e82:	e061      	b.n	8007f48 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d03c      	beq.n	8007f0c <HAL_SD_ReadBlocks+0x198>
 8007e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d039      	beq.n	8007f0c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007e98:	2300      	movs	r3, #0
 8007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9c:	e033      	b.n	8007f06 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 fee1 	bl	8009c6a <SDIO_ReadFIFO>
 8007ea8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eca:	3301      	adds	r3, #1
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	0c1b      	lsrs	r3, r3, #16
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007edc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	0e1b      	lsrs	r3, r3, #24
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007efc:	3b01      	subs	r3, #1
 8007efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f02:	3301      	adds	r3, #1
 8007f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f08:	2b07      	cmp	r3, #7
 8007f0a:	d9c8      	bls.n	8007e9e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007f0c:	f7fb fc3e 	bl	800378c <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d902      	bls.n	8007f22 <HAL_SD_ReadBlocks+0x1ae>
 8007f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d112      	bne.n	8007f48 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a48      	ldr	r2, [pc, #288]	@ (8008048 <HAL_SD_ReadBlocks+0x2d4>)
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e0ec      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f4e:	f240 332a 	movw	r3, #810	@ 0x32a
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d095      	beq.n	8007e84 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d022      	beq.n	8007fac <HAL_SD_ReadBlocks+0x238>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d91f      	bls.n	8007fac <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d01b      	beq.n	8007fac <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 ffd1 	bl	8009f20 <SDMMC_CmdStopTransfer>
 8007f7e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d012      	beq.n	8007fac <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8008048 <HAL_SD_ReadBlocks+0x2d4>)
 8007f8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0ba      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb2:	f003 0308 	and.w	r3, r3, #8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d012      	beq.n	8007fe0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a22      	ldr	r2, [pc, #136]	@ (8008048 <HAL_SD_ReadBlocks+0x2d4>)
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	f043 0208 	orr.w	r2, r3, #8
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0a0      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d012      	beq.n	8008014 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <HAL_SD_ReadBlocks+0x2d4>)
 8007ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffa:	f043 0202 	orr.w	r2, r3, #2
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e086      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d063      	beq.n	80080ea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a08      	ldr	r2, [pc, #32]	@ (8008048 <HAL_SD_ReadBlocks+0x2d4>)
 8008028:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	f043 0220 	orr.w	r2, r3, #32
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e06c      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
 8008048:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fe0a 	bl	8009c6a <SDIO_ReadFIFO>
 8008056:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	b2da      	uxtb	r2, r3
 800805c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	3301      	adds	r3, #1
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008068:	3b01      	subs	r3, #1
 800806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	b2da      	uxtb	r2, r3
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008074:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008078:	3301      	adds	r3, #1
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800807c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807e:	3b01      	subs	r3, #1
 8008080:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008084:	0c1b      	lsrs	r3, r3, #16
 8008086:	b2da      	uxtb	r2, r3
 8008088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800808c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808e:	3301      	adds	r3, #1
 8008090:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008094:	3b01      	subs	r3, #1
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809a:	0e1b      	lsrs	r3, r3, #24
 800809c:	b2da      	uxtb	r2, r3
 800809e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80080a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a4:	3301      	adds	r3, #1
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80080a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080aa:	3b01      	subs	r3, #1
 80080ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80080ae:	f7fb fb6d 	bl	800378c <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d902      	bls.n	80080c4 <HAL_SD_ReadBlocks+0x350>
 80080be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d112      	bne.n	80080ea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	@ (800812c <HAL_SD_ReadBlocks+0x3b8>)
 80080ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e01b      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_SD_ReadBlocks+0x38a>
 80080f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1a6      	bne.n	800804c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008106:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	e006      	b.n	8008122 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3748      	adds	r7, #72	@ 0x48
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	004005ff 	.word	0x004005ff

08008130 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b092      	sub	sp, #72	@ 0x48
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800813e:	f7fb fb25 	bl	800378c <HAL_GetTick>
 8008142:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d107      	bne.n	8008162 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008156:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e166      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b01      	cmp	r3, #1
 800816c:	f040 8159 	bne.w	8008422 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	441a      	add	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008180:	429a      	cmp	r2, r3
 8008182:	d907      	bls.n	8008194 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008188:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e14d      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2203      	movs	r2, #3
 8008198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2200      	movs	r2, #0
 80081a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d002      	beq.n	80081b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ae:	025b      	lsls	r3, r3, #9
 80081b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081b2:	f04f 33ff 	mov.w	r3, #4294967295
 80081b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	025b      	lsls	r3, r3, #9
 80081bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80081be:	2390      	movs	r3, #144	@ 0x90
 80081c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f107 0218 	add.w	r2, r7, #24
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 fdca 	bl	8009d72 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d90a      	bls.n	80081fa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fe72 	bl	8009eda <SDMMC_CmdWriteMultiBlock>
 80081f6:	6478      	str	r0, [r7, #68]	@ 0x44
 80081f8:	e009      	b.n	800820e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2210      	movs	r2, #16
 80081fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fe45 	bl	8009e96 <SDMMC_CmdWriteSingleBlock>
 800820c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800820e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008210:	2b00      	cmp	r3, #0
 8008212:	d012      	beq.n	800823a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a87      	ldr	r2, [pc, #540]	@ (8008438 <HAL_SD_WriteBlocks+0x308>)
 800821a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008222:	431a      	orrs	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e0fa      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800823e:	e065      	b.n	800830c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d040      	beq.n	80082d0 <HAL_SD_WriteBlocks+0x1a0>
 800824e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d03d      	beq.n	80082d0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008254:	2300      	movs	r3, #0
 8008256:	643b      	str	r3, [r7, #64]	@ 0x40
 8008258:	e037      	b.n	80082ca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800825a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	3301      	adds	r3, #1
 8008264:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008268:	3b01      	subs	r3, #1
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800826c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	021a      	lsls	r2, r3, #8
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	3301      	adds	r3, #1
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800827e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008280:	3b01      	subs	r3, #1
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	041a      	lsls	r2, r3, #16
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	3301      	adds	r3, #1
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008298:	3b01      	subs	r3, #1
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	061a      	lsls	r2, r3, #24
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	3301      	adds	r3, #1
 80082ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b0:	3b01      	subs	r3, #1
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f107 0214 	add.w	r2, r7, #20
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fce0 	bl	8009c84 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80082c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082c6:	3301      	adds	r3, #1
 80082c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082cc:	2b07      	cmp	r3, #7
 80082ce:	d9c4      	bls.n	800825a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80082d0:	f7fb fa5c 	bl	800378c <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082dc:	429a      	cmp	r2, r3
 80082de:	d902      	bls.n	80082e6 <HAL_SD_WriteBlocks+0x1b6>
 80082e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d112      	bne.n	800830c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a53      	ldr	r2, [pc, #332]	@ (8008438 <HAL_SD_WriteBlocks+0x308>)
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f4:	431a      	orrs	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e091      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008312:	f240 331a 	movw	r3, #794	@ 0x31a
 8008316:	4013      	ands	r3, r2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d091      	beq.n	8008240 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d022      	beq.n	8008370 <HAL_SD_WriteBlocks+0x240>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d91f      	bls.n	8008370 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008334:	2b03      	cmp	r3, #3
 8008336:	d01b      	beq.n	8008370 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fdef 	bl	8009f20 <SDMMC_CmdStopTransfer>
 8008342:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008346:	2b00      	cmp	r3, #0
 8008348:	d012      	beq.n	8008370 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a3a      	ldr	r2, [pc, #232]	@ (8008438 <HAL_SD_WriteBlocks+0x308>)
 8008350:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008358:	431a      	orrs	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e05f      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d012      	beq.n	80083a4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a2d      	ldr	r2, [pc, #180]	@ (8008438 <HAL_SD_WriteBlocks+0x308>)
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	f043 0208 	orr.w	r2, r3, #8
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e045      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d012      	beq.n	80083d8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a20      	ldr	r2, [pc, #128]	@ (8008438 <HAL_SD_WriteBlocks+0x308>)
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083be:	f043 0202 	orr.w	r2, r3, #2
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e02b      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d012      	beq.n	800840c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a13      	ldr	r2, [pc, #76]	@ (8008438 <HAL_SD_WriteBlocks+0x308>)
 80083ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f2:	f043 0210 	orr.w	r2, r3, #16
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e011      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e006      	b.n	8008430 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008426:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3748      	adds	r7, #72	@ 0x48
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	004005ff 	.word	0x004005ff

0800843c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800844a:	0f9b      	lsrs	r3, r3, #30
 800844c:	b2da      	uxtb	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008456:	0e9b      	lsrs	r3, r3, #26
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	b2da      	uxtb	r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008468:	0e1b      	lsrs	r3, r3, #24
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	b2da      	uxtb	r2, r3
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	b2da      	uxtb	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008486:	0a1b      	lsrs	r3, r3, #8
 8008488:	b2da      	uxtb	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800849c:	0d1b      	lsrs	r3, r3, #20
 800849e:	b29a      	uxth	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084a8:	0c1b      	lsrs	r3, r3, #16
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ba:	0bdb      	lsrs	r3, r3, #15
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084cc:	0b9b      	lsrs	r3, r3, #14
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084de:	0b5b      	lsrs	r3, r3, #13
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084f0:	0b1b      	lsrs	r3, r3, #12
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2200      	movs	r2, #0
 8008502:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008508:	2b00      	cmp	r3, #0
 800850a:	d163      	bne.n	80085d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008510:	009a      	lsls	r2, r3, #2
 8008512:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008516:	4013      	ands	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800851c:	0f92      	lsrs	r2, r2, #30
 800851e:	431a      	orrs	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008528:	0edb      	lsrs	r3, r3, #27
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	b2da      	uxtb	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853a:	0e1b      	lsrs	r3, r3, #24
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	b2da      	uxtb	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854c:	0d5b      	lsrs	r3, r3, #21
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	b2da      	uxtb	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855e:	0c9b      	lsrs	r3, r3, #18
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	b2da      	uxtb	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008570:	0bdb      	lsrs	r3, r3, #15
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	b2da      	uxtb	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	7e1b      	ldrb	r3, [r3, #24]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	3302      	adds	r3, #2
 8008594:	2201      	movs	r2, #1
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800859e:	fb03 f202 	mul.w	r2, r3, r2
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	7a1b      	ldrb	r3, [r3, #8]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2201      	movs	r2, #1
 80085b2:	409a      	lsls	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80085c0:	0a52      	lsrs	r2, r2, #9
 80085c2:	fb03 f202 	mul.w	r2, r3, r2
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80085d2:	e031      	b.n	8008638 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d11d      	bne.n	8008618 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ea:	0c1b      	lsrs	r3, r3, #16
 80085ec:	431a      	orrs	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	3301      	adds	r3, #1
 80085f8:	029a      	lsls	r2, r3, #10
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800860c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	661a      	str	r2, [r3, #96]	@ 0x60
 8008616:	e00f      	b.n	8008638 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a58      	ldr	r2, [pc, #352]	@ (8008780 <HAL_SD_GetCardCSD+0x344>)
 800861e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008624:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e09d      	b.n	8008774 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800863c:	0b9b      	lsrs	r3, r3, #14
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	b2da      	uxtb	r2, r3
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864e:	09db      	lsrs	r3, r3, #7
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008656:	b2da      	uxtb	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008666:	b2da      	uxtb	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008670:	0fdb      	lsrs	r3, r3, #31
 8008672:	b2da      	uxtb	r2, r3
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867c:	0f5b      	lsrs	r3, r3, #29
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	b2da      	uxtb	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	0e9b      	lsrs	r3, r3, #26
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	b2da      	uxtb	r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a0:	0d9b      	lsrs	r3, r3, #22
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	f003 030f 	and.w	r3, r3, #15
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b2:	0d5b      	lsrs	r3, r3, #21
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ce:	0c1b      	lsrs	r3, r3, #16
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	0bdb      	lsrs	r3, r3, #15
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f6:	0b9b      	lsrs	r3, r3, #14
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800870a:	0b5b      	lsrs	r3, r3, #13
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	b2da      	uxtb	r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871e:	0b1b      	lsrs	r3, r3, #12
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008732:	0a9b      	lsrs	r3, r3, #10
 8008734:	b2db      	uxtb	r3, r3
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	b2da      	uxtb	r2, r3
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	b2da      	uxtb	r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	b2db      	uxtb	r3, r3
 800875e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008762:	b2da      	uxtb	r2, r3
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	004005ff 	.word	0x004005ff

08008784 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80087e8:	f107 030c 	add.w	r3, r7, #12
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f970 	bl	8008ad4 <SD_SendStatus>
 80087f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0a5b      	lsrs	r3, r3, #9
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008812:	693b      	ldr	r3, [r7, #16]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800881c:	b5b0      	push	{r4, r5, r7, lr}
 800881e:	b094      	sub	sp, #80	@ 0x50
 8008820:	af04      	add	r7, sp, #16
 8008822:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008824:	2301      	movs	r3, #1
 8008826:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fa48 	bl	8009cc2 <SDIO_GetPowerState>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008838:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800883c:	e0b8      	b.n	80089b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008842:	2b03      	cmp	r3, #3
 8008844:	d02f      	beq.n	80088a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fc2f 	bl	800a0ae <SDMMC_CmdSendCID>
 8008850:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <SD_InitCard+0x40>
    {
      return errorstate;
 8008858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885a:	e0a9      	b.n	80089b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f001 fa72 	bl	8009d4c <SDIO_GetResponse>
 8008868:	4602      	mov	r2, r0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2104      	movs	r1, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f001 fa69 	bl	8009d4c <SDIO_GetResponse>
 800887a:	4602      	mov	r2, r0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2108      	movs	r1, #8
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fa60 	bl	8009d4c <SDIO_GetResponse>
 800888c:	4602      	mov	r2, r0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	210c      	movs	r1, #12
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fa57 	bl	8009d4c <SDIO_GetResponse>
 800889e:	4602      	mov	r2, r0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d00d      	beq.n	80088ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f107 020e 	add.w	r2, r7, #14
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fc35 	bl	800a128 <SDMMC_CmdSetRelAdd>
 80088be:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <SD_InitCard+0xae>
    {
      return errorstate;
 80088c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c8:	e072      	b.n	80089b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d036      	beq.n	8008940 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80088d2:	89fb      	ldrh	r3, [r7, #14]
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e2:	041b      	lsls	r3, r3, #16
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f001 fbff 	bl	800a0ea <SDMMC_CmdSendCSD>
 80088ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80088f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f6:	e05b      	b.n	80089b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fa24 	bl	8009d4c <SDIO_GetResponse>
 8008904:	4602      	mov	r2, r0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2104      	movs	r1, #4
 8008910:	4618      	mov	r0, r3
 8008912:	f001 fa1b 	bl	8009d4c <SDIO_GetResponse>
 8008916:	4602      	mov	r2, r0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2108      	movs	r1, #8
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fa12 	bl	8009d4c <SDIO_GetResponse>
 8008928:	4602      	mov	r2, r0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	210c      	movs	r1, #12
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fa09 	bl	8009d4c <SDIO_GetResponse>
 800893a:	4602      	mov	r2, r0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2104      	movs	r1, #4
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fa00 	bl	8009d4c <SDIO_GetResponse>
 800894c:	4603      	mov	r3, r0
 800894e:	0d1a      	lsrs	r2, r3, #20
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fd6e 	bl	800843c <HAL_SD_GetCardCSD>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008966:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800896a:	e021      	b.n	80089b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6819      	ldr	r1, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	2200      	movs	r2, #0
 8008978:	461c      	mov	r4, r3
 800897a:	4615      	mov	r5, r2
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	4608      	mov	r0, r1
 8008982:	f001 faef 	bl	8009f64 <SDMMC_CmdSelDesel>
 8008986:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <SD_InitCard+0x176>
  {
    return errorstate;
 800898e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008990:	e00e      	b.n	80089b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681d      	ldr	r5, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	466c      	mov	r4, sp
 800899a:	f103 0210 	add.w	r2, r3, #16
 800899e:	ca07      	ldmia	r2, {r0, r1, r2}
 80089a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089a4:	3304      	adds	r3, #4
 80089a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089a8:	4628      	mov	r0, r5
 80089aa:	f001 f933 	bl	8009c14 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3740      	adds	r7, #64	@ 0x40
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bdb0      	pop	{r4, r5, r7, pc}

080089b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	2300      	movs	r3, #0
 80089ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 faea 	bl	8009faa <SDMMC_CmdGoIdleState>
 80089d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	e072      	b.n	8008ac8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fafd 	bl	8009fe6 <SDMMC_CmdOperCond>
 80089ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00d      	beq.n	8008a10 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 fad3 	bl	8009faa <SDMMC_CmdGoIdleState>
 8008a04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	e05b      	b.n	8008ac8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d137      	bne.n	8008a8e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 fafd 	bl	800a024 <SDMMC_CmdAppCommand>
 8008a2a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d02d      	beq.n	8008a8e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a36:	e047      	b.n	8008ac8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 faf0 	bl	800a024 <SDMMC_CmdAppCommand>
 8008a44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	e03b      	b.n	8008ac8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	491e      	ldr	r1, [pc, #120]	@ (8008ad0 <SD_PowerON+0x118>)
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 fb06 	bl	800a068 <SDMMC_CmdAppOperCommand>
 8008a5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a68:	e02e      	b.n	8008ac8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 f96b 	bl	8009d4c <SDIO_GetResponse>
 8008a76:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	0fdb      	lsrs	r3, r3, #31
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <SD_PowerON+0xcc>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <SD_PowerON+0xce>
 8008a84:	2300      	movs	r3, #0
 8008a86:	613b      	str	r3, [r7, #16]

    count++;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d802      	bhi.n	8008a9e <SD_PowerON+0xe6>
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0cc      	beq.n	8008a38 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d902      	bls.n	8008aae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008aa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008aac:	e00c      	b.n	8008ac8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	645a      	str	r2, [r3, #68]	@ 0x44
 8008abe:	e002      	b.n	8008ac6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	c1100000 	.word	0xc1100000

08008ad4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ae4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ae8:	e018      	b.n	8008b1c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af2:	041b      	lsls	r3, r3, #16
 8008af4:	4619      	mov	r1, r3
 8008af6:	4610      	mov	r0, r2
 8008af8:	f001 fb37 	bl	800a16a <SDMMC_CmdSendStatus>
 8008afc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	e009      	b.n	8008b1c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 f91c 	bl	8009d4c <SDIO_GetResponse>
 8008b14:	4602      	mov	r2, r0
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e03f      	b.n	8008bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fa fbc0 	bl	80032d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2224      	movs	r2, #36	@ 0x24
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fddf 	bl	800972c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691a      	ldr	r2, [r3, #16]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b08a      	sub	sp, #40	@ 0x28
 8008bc2:	af02      	add	r7, sp, #8
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d17c      	bne.n	8008cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <HAL_UART_Transmit+0x2c>
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e075      	b.n	8008cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_UART_Transmit+0x3e>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e06e      	b.n	8008cda <HAL_UART_Transmit+0x11c>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2221      	movs	r2, #33	@ 0x21
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c12:	f7fa fdbb 	bl	800378c <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	88fa      	ldrh	r2, [r7, #6]
 8008c1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	88fa      	ldrh	r2, [r7, #6]
 8008c22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c2c:	d108      	bne.n	8008c40 <HAL_UART_Transmit+0x82>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	e003      	b.n	8008c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008c50:	e02a      	b.n	8008ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2180      	movs	r1, #128	@ 0x80
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fb1f 	bl	80092a0 <UART_WaitOnFlagUntilTimeout>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e036      	b.n	8008cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	3302      	adds	r3, #2
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	e007      	b.n	8008c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	3301      	adds	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1cf      	bne.n	8008c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2140      	movs	r1, #64	@ 0x40
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 faef 	bl	80092a0 <UART_WaitOnFlagUntilTimeout>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e006      	b.n	8008cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e000      	b.n	8008cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008cd8:	2302      	movs	r3, #2
  }
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	4613      	mov	r3, r2
 8008cee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d11d      	bne.n	8008d38 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <HAL_UART_Receive_IT+0x26>
 8008d02:	88fb      	ldrh	r3, [r7, #6]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e016      	b.n	8008d3a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_UART_Receive_IT+0x38>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e00f      	b.n	8008d3a <HAL_UART_Receive_IT+0x58>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d28:	88fb      	ldrh	r3, [r7, #6]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 fb24 	bl	800937c <UART_Start_Receive_IT>
 8008d34:	4603      	mov	r3, r0
 8008d36:	e000      	b.n	8008d3a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d38:	2302      	movs	r3, #2
  }
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b0ba      	sub	sp, #232	@ 0xe8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d7a:	f003 030f 	and.w	r3, r3, #15
 8008d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10f      	bne.n	8008daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <HAL_UART_IRQHandler+0x66>
 8008d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fc07 	bl	80095b6 <UART_Receive_IT>
      return;
 8008da8:	e256      	b.n	8009258 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80de 	beq.w	8008f70 <HAL_UART_IRQHandler+0x22c>
 8008db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d106      	bne.n	8008dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 80d1 	beq.w	8008f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <HAL_UART_IRQHandler+0xae>
 8008dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	f043 0201 	orr.w	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00b      	beq.n	8008e16 <HAL_UART_IRQHandler+0xd2>
 8008dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	f043 0202 	orr.w	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <HAL_UART_IRQHandler+0xf6>
 8008e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d005      	beq.n	8008e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e32:	f043 0204 	orr.w	r2, r3, #4
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d011      	beq.n	8008e6a <HAL_UART_IRQHandler+0x126>
 8008e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d105      	bne.n	8008e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	f043 0208 	orr.w	r2, r3, #8
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 81ed 	beq.w	800924e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e78:	f003 0320 	and.w	r3, r3, #32
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d008      	beq.n	8008e92 <HAL_UART_IRQHandler+0x14e>
 8008e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fb92 	bl	80095b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e9c:	2b40      	cmp	r3, #64	@ 0x40
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2301      	moveq	r3, #1
 8008ea2:	2300      	movne	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d103      	bne.n	8008ebe <HAL_UART_IRQHandler+0x17a>
 8008eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d04f      	beq.n	8008f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fa9a 	bl	80093f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ece:	2b40      	cmp	r3, #64	@ 0x40
 8008ed0:	d141      	bne.n	8008f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3314      	adds	r3, #20
 8008ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3314      	adds	r3, #20
 8008efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008efe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1d9      	bne.n	8008ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d013      	beq.n	8008f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8009120 <HAL_UART_IRQHandler+0x3dc>)
 8008f2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fa fee2 	bl	8003cfc <HAL_DMA_Abort_IT>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d016      	beq.n	8008f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4c:	e00e      	b.n	8008f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f990 	bl	8009274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f54:	e00a      	b.n	8008f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f98c 	bl	8009274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5c:	e006      	b.n	8008f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f988 	bl	8009274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008f6a:	e170      	b.n	800924e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6c:	bf00      	nop
    return;
 8008f6e:	e16e      	b.n	800924e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	f040 814a 	bne.w	800920e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f7e:	f003 0310 	and.w	r3, r3, #16
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8143 	beq.w	800920e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 813c 	beq.w	800920e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb6:	2b40      	cmp	r3, #64	@ 0x40
 8008fb8:	f040 80b4 	bne.w	8009124 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8140 	beq.w	8009252 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	f080 8139 	bcs.w	8009252 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff2:	f000 8088 	beq.w	8009106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800900c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	330c      	adds	r3, #12
 800901e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009022:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800902e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800903a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1d9      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3314      	adds	r3, #20
 8009048:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3314      	adds	r3, #20
 8009062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009066:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800906a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800906e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e1      	bne.n	8009042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3314      	adds	r3, #20
 8009084:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800908e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e3      	bne.n	800907e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090d6:	f023 0310 	bic.w	r3, r3, #16
 80090da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	330c      	adds	r3, #12
 80090e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80090e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e3      	bne.n	80090c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009100:	4618      	mov	r0, r3
 8009102:	f7fa fd8b 	bl	8003c1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800910e:	b29b      	uxth	r3, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	b29b      	uxth	r3, r3
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f8b6 	bl	8009288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800911c:	e099      	b.n	8009252 <HAL_UART_IRQHandler+0x50e>
 800911e:	bf00      	nop
 8009120:	080094bf 	.word	0x080094bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800912c:	b29b      	uxth	r3, r3
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 808b 	beq.w	8009256 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8086 	beq.w	8009256 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800915a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	330c      	adds	r3, #12
 800916a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800916e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800917c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e3      	bne.n	800914a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3314      	adds	r3, #20
 8009188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	623b      	str	r3, [r7, #32]
   return(result);
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3314      	adds	r3, #20
 80091a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e3      	bne.n	8009182 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2220      	movs	r2, #32
 80091be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	330c      	adds	r3, #12
 80091ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0310 	bic.w	r3, r3, #16
 80091de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	330c      	adds	r3, #12
 80091e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80091ec:	61fa      	str	r2, [r7, #28]
 80091ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	69b9      	ldr	r1, [r7, #24]
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	617b      	str	r3, [r7, #20]
   return(result);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e3      	bne.n	80091c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f83e 	bl	8009288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800920c:	e023      	b.n	8009256 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800920e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <HAL_UART_IRQHandler+0x4ea>
 800921a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800921e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f95d 	bl	80094e6 <UART_Transmit_IT>
    return;
 800922c:	e014      	b.n	8009258 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <HAL_UART_IRQHandler+0x514>
 800923a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800923e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009242:	2b00      	cmp	r3, #0
 8009244:	d008      	beq.n	8009258 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f99d 	bl	8009586 <UART_EndTransmit_IT>
    return;
 800924c:	e004      	b.n	8009258 <HAL_UART_IRQHandler+0x514>
    return;
 800924e:	bf00      	nop
 8009250:	e002      	b.n	8009258 <HAL_UART_IRQHandler+0x514>
      return;
 8009252:	bf00      	nop
 8009254:	e000      	b.n	8009258 <HAL_UART_IRQHandler+0x514>
      return;
 8009256:	bf00      	nop
  }
}
 8009258:	37e8      	adds	r7, #232	@ 0xe8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop

08009260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b090      	sub	sp, #64	@ 0x40
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4613      	mov	r3, r2
 80092ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b0:	e050      	b.n	8009354 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d04c      	beq.n	8009354 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80092c0:	f7fa fa64 	bl	800378c <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d241      	bcs.n	8009354 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	330c      	adds	r3, #12
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	330c      	adds	r3, #12
 80092ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80092f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e5      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3314      	adds	r3, #20
 800930a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	613b      	str	r3, [r7, #16]
   return(result);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f023 0301 	bic.w	r3, r3, #1
 800931a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3314      	adds	r3, #20
 8009322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009324:	623a      	str	r2, [r7, #32]
 8009326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	69f9      	ldr	r1, [r7, #28]
 800932a:	6a3a      	ldr	r2, [r7, #32]
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	61bb      	str	r3, [r7, #24]
   return(result);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e5      	bne.n	8009304 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2220      	movs	r2, #32
 8009344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e00f      	b.n	8009374 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	4013      	ands	r3, r2
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	429a      	cmp	r2, r3
 8009362:	bf0c      	ite	eq
 8009364:	2301      	moveq	r3, #1
 8009366:	2300      	movne	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	429a      	cmp	r2, r3
 8009370:	d09f      	beq.n	80092b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3740      	adds	r7, #64	@ 0x40
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	88fa      	ldrh	r2, [r7, #6]
 8009394:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	88fa      	ldrh	r2, [r7, #6]
 800939a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2222      	movs	r2, #34	@ 0x22
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	695a      	ldr	r2, [r3, #20]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0201 	orr.w	r2, r2, #1
 80093d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68da      	ldr	r2, [r3, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0220 	orr.w	r2, r2, #32
 80093e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b095      	sub	sp, #84	@ 0x54
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	330c      	adds	r3, #12
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940a:	e853 3f00 	ldrex	r3, [r3]
 800940e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	330c      	adds	r3, #12
 800941e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009420:	643a      	str	r2, [r7, #64]	@ 0x40
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009426:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e5      	bne.n	8009400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3314      	adds	r3, #20
 800943a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	61fb      	str	r3, [r7, #28]
   return(result);
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3314      	adds	r3, #20
 8009452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800945a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e5      	bne.n	8009434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946c:	2b01      	cmp	r3, #1
 800946e:	d119      	bne.n	80094a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	330c      	adds	r3, #12
 8009476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f023 0310 	bic.w	r3, r3, #16
 8009486:	647b      	str	r3, [r7, #68]	@ 0x44
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330c      	adds	r3, #12
 800948e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009490:	61ba      	str	r2, [r7, #24]
 8009492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6979      	ldr	r1, [r7, #20]
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	613b      	str	r3, [r7, #16]
   return(result);
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e5      	bne.n	8009470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094b2:	bf00      	nop
 80094b4:	3754      	adds	r7, #84	@ 0x54
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff fecb 	bl	8009274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b085      	sub	sp, #20
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b21      	cmp	r3, #33	@ 0x21
 80094f8:	d13e      	bne.n	8009578 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009502:	d114      	bne.n	800952e <UART_Transmit_IT+0x48>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d110      	bne.n	800952e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009520:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	1c9a      	adds	r2, r3, #2
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	621a      	str	r2, [r3, #32]
 800952c:	e008      	b.n	8009540 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	1c59      	adds	r1, r3, #1
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	6211      	str	r1, [r2, #32]
 8009538:	781a      	ldrb	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	4619      	mov	r1, r3
 800954e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10f      	bne.n	8009574 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009562:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009572:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e000      	b.n	800957a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68da      	ldr	r2, [r3, #12]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800959c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fe5a 	bl	8009260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b08c      	sub	sp, #48	@ 0x30
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b22      	cmp	r3, #34	@ 0x22
 80095c8:	f040 80ab 	bne.w	8009722 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095d4:	d117      	bne.n	8009606 <UART_Receive_IT+0x50>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d113      	bne.n	8009606 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fe:	1c9a      	adds	r2, r3, #2
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	629a      	str	r2, [r3, #40]	@ 0x28
 8009604:	e026      	b.n	8009654 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009618:	d007      	beq.n	800962a <UART_Receive_IT+0x74>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10a      	bne.n	8009638 <UART_Receive_IT+0x82>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	b2da      	uxtb	r2, r3
 8009632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	e008      	b.n	800964a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009644:	b2da      	uxtb	r2, r3
 8009646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009658:	b29b      	uxth	r3, r3
 800965a:	3b01      	subs	r3, #1
 800965c:	b29b      	uxth	r3, r3
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4619      	mov	r1, r3
 8009662:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009664:	2b00      	cmp	r3, #0
 8009666:	d15a      	bne.n	800971e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0220 	bic.w	r2, r2, #32
 8009676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695a      	ldr	r2, [r3, #20]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0201 	bic.w	r2, r2, #1
 8009696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2220      	movs	r2, #32
 800969c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d135      	bne.n	8009714 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	330c      	adds	r3, #12
 80096b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	613b      	str	r3, [r7, #16]
   return(result);
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f023 0310 	bic.w	r3, r3, #16
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	330c      	adds	r3, #12
 80096cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ce:	623a      	str	r2, [r7, #32]
 80096d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	69f9      	ldr	r1, [r7, #28]
 80096d4:	6a3a      	ldr	r2, [r7, #32]
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	61bb      	str	r3, [r7, #24]
   return(result);
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e5      	bne.n	80096ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0310 	and.w	r3, r3, #16
 80096ec:	2b10      	cmp	r3, #16
 80096ee:	d10a      	bne.n	8009706 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7ff fdbb 	bl	8009288 <HAL_UARTEx_RxEventCallback>
 8009712:	e002      	b.n	800971a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7f9 f843 	bl	80027a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	e002      	b.n	8009724 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e000      	b.n	8009724 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009722:	2302      	movs	r3, #2
  }
}
 8009724:	4618      	mov	r0, r3
 8009726:	3730      	adds	r7, #48	@ 0x30
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800972c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009730:	b0c0      	sub	sp, #256	@ 0x100
 8009732:	af00      	add	r7, sp, #0
 8009734:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009748:	68d9      	ldr	r1, [r3, #12]
 800974a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	ea40 0301 	orr.w	r3, r0, r1
 8009754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	431a      	orrs	r2, r3
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	431a      	orrs	r2, r3
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009784:	f021 010c 	bic.w	r1, r1, #12
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009792:	430b      	orrs	r3, r1
 8009794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a6:	6999      	ldr	r1, [r3, #24]
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	ea40 0301 	orr.w	r3, r0, r1
 80097b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4b8f      	ldr	r3, [pc, #572]	@ (80099f8 <UART_SetConfig+0x2cc>)
 80097bc:	429a      	cmp	r2, r3
 80097be:	d005      	beq.n	80097cc <UART_SetConfig+0xa0>
 80097c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	4b8d      	ldr	r3, [pc, #564]	@ (80099fc <UART_SetConfig+0x2d0>)
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d104      	bne.n	80097d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097cc:	f7fe f8ce 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 80097d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80097d4:	e003      	b.n	80097de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097d6:	f7fe f8b5 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 80097da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097e8:	f040 810c 	bne.w	8009a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80097fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80097fe:	4622      	mov	r2, r4
 8009800:	462b      	mov	r3, r5
 8009802:	1891      	adds	r1, r2, r2
 8009804:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009806:	415b      	adcs	r3, r3
 8009808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800980a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800980e:	4621      	mov	r1, r4
 8009810:	eb12 0801 	adds.w	r8, r2, r1
 8009814:	4629      	mov	r1, r5
 8009816:	eb43 0901 	adc.w	r9, r3, r1
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800982a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800982e:	4690      	mov	r8, r2
 8009830:	4699      	mov	r9, r3
 8009832:	4623      	mov	r3, r4
 8009834:	eb18 0303 	adds.w	r3, r8, r3
 8009838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800983c:	462b      	mov	r3, r5
 800983e:	eb49 0303 	adc.w	r3, r9, r3
 8009842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009852:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800985a:	460b      	mov	r3, r1
 800985c:	18db      	adds	r3, r3, r3
 800985e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009860:	4613      	mov	r3, r2
 8009862:	eb42 0303 	adc.w	r3, r2, r3
 8009866:	657b      	str	r3, [r7, #84]	@ 0x54
 8009868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800986c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009870:	f7f6 fd06 	bl	8000280 <__aeabi_uldivmod>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4b61      	ldr	r3, [pc, #388]	@ (8009a00 <UART_SetConfig+0x2d4>)
 800987a:	fba3 2302 	umull	r2, r3, r3, r2
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	011c      	lsls	r4, r3, #4
 8009882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009886:	2200      	movs	r2, #0
 8009888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800988c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009894:	4642      	mov	r2, r8
 8009896:	464b      	mov	r3, r9
 8009898:	1891      	adds	r1, r2, r2
 800989a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800989c:	415b      	adcs	r3, r3
 800989e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098a4:	4641      	mov	r1, r8
 80098a6:	eb12 0a01 	adds.w	sl, r2, r1
 80098aa:	4649      	mov	r1, r9
 80098ac:	eb43 0b01 	adc.w	fp, r3, r1
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098c4:	4692      	mov	sl, r2
 80098c6:	469b      	mov	fp, r3
 80098c8:	4643      	mov	r3, r8
 80098ca:	eb1a 0303 	adds.w	r3, sl, r3
 80098ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098d2:	464b      	mov	r3, r9
 80098d4:	eb4b 0303 	adc.w	r3, fp, r3
 80098d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80098ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098f0:	460b      	mov	r3, r1
 80098f2:	18db      	adds	r3, r3, r3
 80098f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80098f6:	4613      	mov	r3, r2
 80098f8:	eb42 0303 	adc.w	r3, r2, r3
 80098fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80098fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009906:	f7f6 fcbb 	bl	8000280 <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4611      	mov	r1, r2
 8009910:	4b3b      	ldr	r3, [pc, #236]	@ (8009a00 <UART_SetConfig+0x2d4>)
 8009912:	fba3 2301 	umull	r2, r3, r3, r1
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	2264      	movs	r2, #100	@ 0x64
 800991a:	fb02 f303 	mul.w	r3, r2, r3
 800991e:	1acb      	subs	r3, r1, r3
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009926:	4b36      	ldr	r3, [pc, #216]	@ (8009a00 <UART_SetConfig+0x2d4>)
 8009928:	fba3 2302 	umull	r2, r3, r3, r2
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009934:	441c      	add	r4, r3
 8009936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800993a:	2200      	movs	r2, #0
 800993c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009940:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009948:	4642      	mov	r2, r8
 800994a:	464b      	mov	r3, r9
 800994c:	1891      	adds	r1, r2, r2
 800994e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009950:	415b      	adcs	r3, r3
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009958:	4641      	mov	r1, r8
 800995a:	1851      	adds	r1, r2, r1
 800995c:	6339      	str	r1, [r7, #48]	@ 0x30
 800995e:	4649      	mov	r1, r9
 8009960:	414b      	adcs	r3, r1
 8009962:	637b      	str	r3, [r7, #52]	@ 0x34
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009970:	4659      	mov	r1, fp
 8009972:	00cb      	lsls	r3, r1, #3
 8009974:	4651      	mov	r1, sl
 8009976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800997a:	4651      	mov	r1, sl
 800997c:	00ca      	lsls	r2, r1, #3
 800997e:	4610      	mov	r0, r2
 8009980:	4619      	mov	r1, r3
 8009982:	4603      	mov	r3, r0
 8009984:	4642      	mov	r2, r8
 8009986:	189b      	adds	r3, r3, r2
 8009988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800998c:	464b      	mov	r3, r9
 800998e:	460a      	mov	r2, r1
 8009990:	eb42 0303 	adc.w	r3, r2, r3
 8009994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80099a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099ac:	460b      	mov	r3, r1
 80099ae:	18db      	adds	r3, r3, r3
 80099b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099b2:	4613      	mov	r3, r2
 80099b4:	eb42 0303 	adc.w	r3, r2, r3
 80099b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099c2:	f7f6 fc5d 	bl	8000280 <__aeabi_uldivmod>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009a00 <UART_SetConfig+0x2d4>)
 80099cc:	fba3 1302 	umull	r1, r3, r3, r2
 80099d0:	095b      	lsrs	r3, r3, #5
 80099d2:	2164      	movs	r1, #100	@ 0x64
 80099d4:	fb01 f303 	mul.w	r3, r1, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	3332      	adds	r3, #50	@ 0x32
 80099de:	4a08      	ldr	r2, [pc, #32]	@ (8009a00 <UART_SetConfig+0x2d4>)
 80099e0:	fba2 2303 	umull	r2, r3, r2, r3
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	f003 0207 	and.w	r2, r3, #7
 80099ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4422      	add	r2, r4
 80099f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099f4:	e106      	b.n	8009c04 <UART_SetConfig+0x4d8>
 80099f6:	bf00      	nop
 80099f8:	40011000 	.word	0x40011000
 80099fc:	40011400 	.word	0x40011400
 8009a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a16:	4642      	mov	r2, r8
 8009a18:	464b      	mov	r3, r9
 8009a1a:	1891      	adds	r1, r2, r2
 8009a1c:	6239      	str	r1, [r7, #32]
 8009a1e:	415b      	adcs	r3, r3
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a26:	4641      	mov	r1, r8
 8009a28:	1854      	adds	r4, r2, r1
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	eb43 0501 	adc.w	r5, r3, r1
 8009a30:	f04f 0200 	mov.w	r2, #0
 8009a34:	f04f 0300 	mov.w	r3, #0
 8009a38:	00eb      	lsls	r3, r5, #3
 8009a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a3e:	00e2      	lsls	r2, r4, #3
 8009a40:	4614      	mov	r4, r2
 8009a42:	461d      	mov	r5, r3
 8009a44:	4643      	mov	r3, r8
 8009a46:	18e3      	adds	r3, r4, r3
 8009a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	eb45 0303 	adc.w	r3, r5, r3
 8009a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	f04f 0300 	mov.w	r3, #0
 8009a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a72:	4629      	mov	r1, r5
 8009a74:	008b      	lsls	r3, r1, #2
 8009a76:	4621      	mov	r1, r4
 8009a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	008a      	lsls	r2, r1, #2
 8009a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a84:	f7f6 fbfc 	bl	8000280 <__aeabi_uldivmod>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4b60      	ldr	r3, [pc, #384]	@ (8009c10 <UART_SetConfig+0x4e4>)
 8009a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a92:	095b      	lsrs	r3, r3, #5
 8009a94:	011c      	lsls	r4, r3, #4
 8009a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009aa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	464b      	mov	r3, r9
 8009aac:	1891      	adds	r1, r2, r2
 8009aae:	61b9      	str	r1, [r7, #24]
 8009ab0:	415b      	adcs	r3, r3
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ab8:	4641      	mov	r1, r8
 8009aba:	1851      	adds	r1, r2, r1
 8009abc:	6139      	str	r1, [r7, #16]
 8009abe:	4649      	mov	r1, r9
 8009ac0:	414b      	adcs	r3, r1
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	00cb      	lsls	r3, r1, #3
 8009ad4:	4651      	mov	r1, sl
 8009ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ada:	4651      	mov	r1, sl
 8009adc:	00ca      	lsls	r2, r1, #3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009aec:	464b      	mov	r3, r9
 8009aee:	460a      	mov	r2, r1
 8009af0:	eb42 0303 	adc.w	r3, r2, r3
 8009af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	f04f 0300 	mov.w	r3, #0
 8009b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b10:	4649      	mov	r1, r9
 8009b12:	008b      	lsls	r3, r1, #2
 8009b14:	4641      	mov	r1, r8
 8009b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b1a:	4641      	mov	r1, r8
 8009b1c:	008a      	lsls	r2, r1, #2
 8009b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b22:	f7f6 fbad 	bl	8000280 <__aeabi_uldivmod>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4b38      	ldr	r3, [pc, #224]	@ (8009c10 <UART_SetConfig+0x4e4>)
 8009b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	2264      	movs	r2, #100	@ 0x64
 8009b36:	fb02 f303 	mul.w	r3, r2, r3
 8009b3a:	1acb      	subs	r3, r1, r3
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	3332      	adds	r3, #50	@ 0x32
 8009b40:	4a33      	ldr	r2, [pc, #204]	@ (8009c10 <UART_SetConfig+0x4e4>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b4c:	441c      	add	r4, r3
 8009b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b52:	2200      	movs	r2, #0
 8009b54:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b56:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	1891      	adds	r1, r2, r2
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	415b      	adcs	r3, r3
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b6c:	4641      	mov	r1, r8
 8009b6e:	1851      	adds	r1, r2, r1
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	4649      	mov	r1, r9
 8009b74:	414b      	adcs	r3, r1
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	f04f 0200 	mov.w	r2, #0
 8009b7c:	f04f 0300 	mov.w	r3, #0
 8009b80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b84:	4659      	mov	r1, fp
 8009b86:	00cb      	lsls	r3, r1, #3
 8009b88:	4651      	mov	r1, sl
 8009b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b8e:	4651      	mov	r1, sl
 8009b90:	00ca      	lsls	r2, r1, #3
 8009b92:	4610      	mov	r0, r2
 8009b94:	4619      	mov	r1, r3
 8009b96:	4603      	mov	r3, r0
 8009b98:	4642      	mov	r2, r8
 8009b9a:	189b      	adds	r3, r3, r2
 8009b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	eb42 0303 	adc.w	r3, r2, r3
 8009ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009bb4:	f04f 0200 	mov.w	r2, #0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	008b      	lsls	r3, r1, #2
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bca:	4641      	mov	r1, r8
 8009bcc:	008a      	lsls	r2, r1, #2
 8009bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009bd2:	f7f6 fb55 	bl	8000280 <__aeabi_uldivmod>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	4b0d      	ldr	r3, [pc, #52]	@ (8009c10 <UART_SetConfig+0x4e4>)
 8009bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	2164      	movs	r1, #100	@ 0x64
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	3332      	adds	r3, #50	@ 0x32
 8009bee:	4a08      	ldr	r2, [pc, #32]	@ (8009c10 <UART_SetConfig+0x4e4>)
 8009bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf4:	095b      	lsrs	r3, r3, #5
 8009bf6:	f003 020f 	and.w	r2, r3, #15
 8009bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4422      	add	r2, r4
 8009c02:	609a      	str	r2, [r3, #8]
}
 8009c04:	bf00      	nop
 8009c06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c10:	51eb851f 	.word	0x51eb851f

08009c14 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c14:	b084      	sub	sp, #16
 8009c16:	b480      	push	{r7}
 8009c18:	b085      	sub	sp, #20
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	f107 001c 	add.w	r0, r7, #28
 8009c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c2e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009c32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009c36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009c3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009c3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009c4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	431a      	orrs	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	b004      	add	sp, #16
 8009c68:	4770      	bx	lr

08009c6a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2203      	movs	r2, #3
 8009cb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0303 	and.w	r3, r3, #3
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cfc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d02:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009d18:	f023 030f 	bic.w	r3, r3, #15
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	b2db      	uxtb	r3, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3314      	adds	r3, #20
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	4413      	add	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
}  
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d98:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009d9e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009da4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0

}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b088      	sub	sp, #32
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009dd8:	2310      	movs	r3, #16
 8009dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ddc:	2340      	movs	r3, #64	@ 0x40
 8009dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009de0:	2300      	movs	r3, #0
 8009de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009de8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff ff74 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dfa:	2110      	movs	r1, #16
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f9d7 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e04:	69fb      	ldr	r3, [r7, #28]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e1c:	2311      	movs	r3, #17
 8009e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e20:	2340      	movs	r3, #64	@ 0x40
 8009e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff ff52 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e3e:	2111      	movs	r1, #17
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f9b5 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e48:	69fb      	ldr	r3, [r7, #28]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3720      	adds	r7, #32
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b088      	sub	sp, #32
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e60:	2312      	movs	r3, #18
 8009e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e64:	2340      	movs	r3, #64	@ 0x40
 8009e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e72:	f107 0308 	add.w	r3, r7, #8
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff ff30 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e82:	2112      	movs	r1, #18
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f993 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b088      	sub	sp, #32
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ea4:	2318      	movs	r3, #24
 8009ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ea8:	2340      	movs	r3, #64	@ 0x40
 8009eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff ff0e 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ec6:	2118      	movs	r1, #24
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f971 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b088      	sub	sp, #32
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009ee8:	2319      	movs	r3, #25
 8009eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eec:	2340      	movs	r3, #64	@ 0x40
 8009eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff feec 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f0a:	2119      	movs	r1, #25
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f94f 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f14:	69fb      	ldr	r3, [r7, #28]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3720      	adds	r7, #32
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f30:	2340      	movs	r3, #64	@ 0x40
 8009f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f3e:	f107 0308 	add.w	r3, r7, #8
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff feca 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009f4a:	4a05      	ldr	r2, [pc, #20]	@ (8009f60 <SDMMC_CmdStopTransfer+0x40>)
 8009f4c:	210c      	movs	r1, #12
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f92e 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f56:	69fb      	ldr	r3, [r7, #28]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	05f5e100 	.word	0x05f5e100

08009f64 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08a      	sub	sp, #40	@ 0x28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f74:	2307      	movs	r3, #7
 8009f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f78:	2340      	movs	r3, #64	@ 0x40
 8009f7a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f84:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f86:	f107 0310 	add.w	r3, r7, #16
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fea6 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f96:	2107      	movs	r1, #7
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 f909 	bl	800a1b0 <SDMMC_GetCmdResp1>
 8009f9e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3728      	adds	r7, #40	@ 0x28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b088      	sub	sp, #32
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fc8:	f107 0308 	add.w	r3, r7, #8
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff fe85 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fb23 	bl	800a620 <SDMMC_GetCmdError>
 8009fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b088      	sub	sp, #32
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009fee:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009ff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ff8:	2340      	movs	r3, #64	@ 0x40
 8009ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a004:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff fe66 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fab6 	bl	800a584 <SDMMC_GetCmdResp7>
 800a018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a01a:	69fb      	ldr	r3, [r7, #28]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a032:	2337      	movs	r3, #55	@ 0x37
 800a034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a036:	2340      	movs	r3, #64	@ 0x40
 800a038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a03e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a042:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a044:	f107 0308 	add.w	r3, r7, #8
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff fe47 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a050:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a054:	2137      	movs	r1, #55	@ 0x37
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f8aa 	bl	800a1b0 <SDMMC_GetCmdResp1>
 800a05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a05e:	69fb      	ldr	r3, [r7, #28]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3720      	adds	r7, #32
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a07c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a07e:	2329      	movs	r3, #41	@ 0x29
 800a080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a082:	2340      	movs	r3, #64	@ 0x40
 800a084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a08a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a08e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a090:	f107 0308 	add.w	r3, r7, #8
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff fe21 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f9bd 	bl	800a41c <SDMMC_GetCmdResp3>
 800a0a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0a4:	69fb      	ldr	r3, [r7, #28]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b088      	sub	sp, #32
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a0be:	23c0      	movs	r3, #192	@ 0xc0
 800a0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0cc:	f107 0308 	add.w	r3, r7, #8
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff fe03 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f957 	bl	800a38c <SDMMC_GetCmdResp2>
 800a0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0e0:	69fb      	ldr	r3, [r7, #28]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a0f8:	2309      	movs	r3, #9
 800a0fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a0fc:	23c0      	movs	r3, #192	@ 0xc0
 800a0fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a108:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a10a:	f107 0308 	add.w	r3, r7, #8
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fde4 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f938 	bl	800a38c <SDMMC_GetCmdResp2>
 800a11c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a11e:	69fb      	ldr	r3, [r7, #28]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a136:	2303      	movs	r3, #3
 800a138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a13a:	2340      	movs	r3, #64	@ 0x40
 800a13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a13e:	2300      	movs	r3, #0
 800a140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a146:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a148:	f107 0308 	add.w	r3, r7, #8
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7ff fdc5 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	2103      	movs	r1, #3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f99d 	bl	800a498 <SDMMC_GetCmdResp6>
 800a15e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a160:	69fb      	ldr	r3, [r7, #28]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b088      	sub	sp, #32
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a178:	230d      	movs	r3, #13
 800a17a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a17c:	2340      	movs	r3, #64	@ 0x40
 800a17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a188:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a18a:	f107 0308 	add.w	r3, r7, #8
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fda4 	bl	8009cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a19a:	210d      	movs	r1, #13
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f807 	bl	800a1b0 <SDMMC_GetCmdResp1>
 800a1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3720      	adds	r7, #32
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a1be:	4b70      	ldr	r3, [pc, #448]	@ (800a380 <SDMMC_GetCmdResp1+0x1d0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a70      	ldr	r2, [pc, #448]	@ (800a384 <SDMMC_GetCmdResp1+0x1d4>)
 800a1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c8:	0a5a      	lsrs	r2, r3, #9
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	fb02 f303 	mul.w	r3, r2, r3
 800a1d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	1e5a      	subs	r2, r3, #1
 800a1d6:	61fa      	str	r2, [r7, #28]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d102      	bne.n	800a1e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1e0:	e0c9      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d0ef      	beq.n	800a1d2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1ea      	bne.n	800a1d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b00      	cmp	r3, #0
 800a206:	d004      	beq.n	800a212 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2204      	movs	r2, #4
 800a20c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a20e:	2304      	movs	r3, #4
 800a210:	e0b1      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d004      	beq.n	800a228 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a224:	2301      	movs	r3, #1
 800a226:	e0a6      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	22c5      	movs	r2, #197	@ 0xc5
 800a22c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff fd7f 	bl	8009d32 <SDIO_GetCommandResponse>
 800a234:	4603      	mov	r3, r0
 800a236:	461a      	mov	r2, r3
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d001      	beq.n	800a242 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a23e:	2301      	movs	r3, #1
 800a240:	e099      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a242:	2100      	movs	r1, #0
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff fd81 	bl	8009d4c <SDIO_GetResponse>
 800a24a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	4b4e      	ldr	r3, [pc, #312]	@ (800a388 <SDMMC_GetCmdResp1+0x1d8>)
 800a250:	4013      	ands	r3, r2
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a256:	2300      	movs	r3, #0
 800a258:	e08d      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da02      	bge.n	800a266 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a264:	e087      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a270:	2340      	movs	r3, #64	@ 0x40
 800a272:	e080      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a27e:	2380      	movs	r3, #128	@ 0x80
 800a280:	e079      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a28c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a290:	e071      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a29c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2a0:	e069      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a2ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2b0:	e061      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2c0:	e059      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2d0:	e051      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a2e0:	e049      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a2f0:	e041      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a300:	e039      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a30c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a310:	e031      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a31c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a320:	e029      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a32c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a330:	e021      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a33c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a340:	e019      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a34c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a350:	e011      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a35c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a360:	e009      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f003 0308 	and.w	r3, r3, #8
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a36c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a370:	e001      	b.n	800a376 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a376:	4618      	mov	r0, r3
 800a378:	3720      	adds	r7, #32
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000020 	.word	0x20000020
 800a384:	10624dd3 	.word	0x10624dd3
 800a388:	fdffe008 	.word	0xfdffe008

0800a38c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a394:	4b1f      	ldr	r3, [pc, #124]	@ (800a414 <SDMMC_GetCmdResp2+0x88>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1f      	ldr	r2, [pc, #124]	@ (800a418 <SDMMC_GetCmdResp2+0x8c>)
 800a39a:	fba2 2303 	umull	r2, r3, r2, r3
 800a39e:	0a5b      	lsrs	r3, r3, #9
 800a3a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3a4:	fb02 f303 	mul.w	r3, r2, r3
 800a3a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1e5a      	subs	r2, r3, #1
 800a3ae:	60fa      	str	r2, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d102      	bne.n	800a3ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3b8:	e026      	b.n	800a408 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0ef      	beq.n	800a3aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1ea      	bne.n	800a3aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3e6:	2304      	movs	r3, #4
 800a3e8:	e00e      	b.n	800a408 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d004      	beq.n	800a400 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e003      	b.n	800a408 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	22c5      	movs	r2, #197	@ 0xc5
 800a404:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	20000020 	.word	0x20000020
 800a418:	10624dd3 	.word	0x10624dd3

0800a41c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a424:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <SDMMC_GetCmdResp3+0x74>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1a      	ldr	r2, [pc, #104]	@ (800a494 <SDMMC_GetCmdResp3+0x78>)
 800a42a:	fba2 2303 	umull	r2, r3, r2, r3
 800a42e:	0a5b      	lsrs	r3, r3, #9
 800a430:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a434:	fb02 f303 	mul.w	r3, r2, r3
 800a438:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	1e5a      	subs	r2, r3, #1
 800a43e:	60fa      	str	r2, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a444:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a448:	e01b      	b.n	800a482 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0ef      	beq.n	800a43a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ea      	bne.n	800a43a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2204      	movs	r2, #4
 800a474:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a476:	2304      	movs	r3, #4
 800a478:	e003      	b.n	800a482 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	22c5      	movs	r2, #197	@ 0xc5
 800a47e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20000020 	.word	0x20000020
 800a494:	10624dd3 	.word	0x10624dd3

0800a498 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4a6:	4b35      	ldr	r3, [pc, #212]	@ (800a57c <SDMMC_GetCmdResp6+0xe4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a35      	ldr	r2, [pc, #212]	@ (800a580 <SDMMC_GetCmdResp6+0xe8>)
 800a4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b0:	0a5b      	lsrs	r3, r3, #9
 800a4b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	1e5a      	subs	r2, r3, #1
 800a4c0:	61fa      	str	r2, [r7, #28]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4ca:	e052      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0ef      	beq.n	800a4bc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1ea      	bne.n	800a4bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	e03a      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	d004      	beq.n	800a512 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a50e:	2301      	movs	r3, #1
 800a510:	e02f      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f7ff fc0d 	bl	8009d32 <SDIO_GetCommandResponse>
 800a518:	4603      	mov	r3, r0
 800a51a:	461a      	mov	r2, r3
 800a51c:	7afb      	ldrb	r3, [r7, #11]
 800a51e:	4293      	cmp	r3, r2
 800a520:	d001      	beq.n	800a526 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a522:	2301      	movs	r3, #1
 800a524:	e025      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	22c5      	movs	r2, #197	@ 0xc5
 800a52a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a52c:	2100      	movs	r1, #0
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7ff fc0c 	bl	8009d4c <SDIO_GetResponse>
 800a534:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d106      	bne.n	800a54e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e011      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a55c:	e009      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a56c:	e001      	b.n	800a572 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a56e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a572:	4618      	mov	r0, r3
 800a574:	3720      	adds	r7, #32
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000020 	.word	0x20000020
 800a580:	10624dd3 	.word	0x10624dd3

0800a584 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a58c:	4b22      	ldr	r3, [pc, #136]	@ (800a618 <SDMMC_GetCmdResp7+0x94>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a22      	ldr	r2, [pc, #136]	@ (800a61c <SDMMC_GetCmdResp7+0x98>)
 800a592:	fba2 2303 	umull	r2, r3, r2, r3
 800a596:	0a5b      	lsrs	r3, r3, #9
 800a598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a59c:	fb02 f303 	mul.w	r3, r2, r3
 800a5a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	1e5a      	subs	r2, r3, #1
 800a5a6:	60fa      	str	r2, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5b0:	e02c      	b.n	800a60c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0ef      	beq.n	800a5a2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1ea      	bne.n	800a5a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2204      	movs	r2, #4
 800a5dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5de:	2304      	movs	r3, #4
 800a5e0:	e014      	b.n	800a60c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d004      	beq.n	800a5f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e009      	b.n	800a60c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2240      	movs	r2, #64	@ 0x40
 800a608:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a60a:	2300      	movs	r3, #0
  
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	20000020 	.word	0x20000020
 800a61c:	10624dd3 	.word	0x10624dd3

0800a620 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a628:	4b11      	ldr	r3, [pc, #68]	@ (800a670 <SDMMC_GetCmdError+0x50>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a11      	ldr	r2, [pc, #68]	@ (800a674 <SDMMC_GetCmdError+0x54>)
 800a62e:	fba2 2303 	umull	r2, r3, r2, r3
 800a632:	0a5b      	lsrs	r3, r3, #9
 800a634:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a638:	fb02 f303 	mul.w	r3, r2, r3
 800a63c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	60fa      	str	r2, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a64c:	e009      	b.n	800a662 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0f1      	beq.n	800a63e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	22c5      	movs	r2, #197	@ 0xc5
 800a65e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	20000020 	.word	0x20000020
 800a674:	10624dd3 	.word	0x10624dd3

0800a678 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a67c:	4904      	ldr	r1, [pc, #16]	@ (800a690 <MX_FATFS_Init+0x18>)
 800a67e:	4805      	ldr	r0, [pc, #20]	@ (800a694 <MX_FATFS_Init+0x1c>)
 800a680:	f003 f81e 	bl	800d6c0 <FATFS_LinkDriver>
 800a684:	4603      	mov	r3, r0
 800a686:	461a      	mov	r2, r3
 800a688:	4b03      	ldr	r3, [pc, #12]	@ (800a698 <MX_FATFS_Init+0x20>)
 800a68a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a68c:	bf00      	nop
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	2000567c 	.word	0x2000567c
 800a694:	0801027c 	.word	0x0801027c
 800a698:	20005678 	.word	0x20005678

0800a69c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a6a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a6b6:	f000 f86b 	bl	800a790 <BSP_SD_IsDetected>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d001      	beq.n	800a6c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e005      	b.n	800a6d0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a6c4:	4804      	ldr	r0, [pc, #16]	@ (800a6d8 <BSP_SD_Init+0x2c>)
 800a6c6:	f7fd faa5 	bl	8007c14 <HAL_SD_Init>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	200002ac 	.word	0x200002ac

0800a6dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b088      	sub	sp, #32
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	4806      	ldr	r0, [pc, #24]	@ (800a714 <BSP_SD_ReadBlocks+0x38>)
 800a6fa:	f7fd fb3b 	bl	8007d74 <HAL_SD_ReadBlocks>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	200002ac 	.word	0x200002ac

0800a718 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	4806      	ldr	r0, [pc, #24]	@ (800a750 <BSP_SD_WriteBlocks+0x38>)
 800a736:	f7fd fcfb 	bl	8008130 <HAL_SD_WriteBlocks>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a744:	7dfb      	ldrb	r3, [r7, #23]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	200002ac 	.word	0x200002ac

0800a754 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a758:	4805      	ldr	r0, [pc, #20]	@ (800a770 <BSP_SD_GetCardState+0x1c>)
 800a75a:	f7fe f83f 	bl	80087dc <HAL_SD_GetCardState>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b04      	cmp	r3, #4
 800a762:	bf14      	ite	ne
 800a764:	2301      	movne	r3, #1
 800a766:	2300      	moveq	r3, #0
 800a768:	b2db      	uxtb	r3, r3
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	200002ac 	.word	0x200002ac

0800a774 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4803      	ldr	r0, [pc, #12]	@ (800a78c <BSP_SD_GetCardInfo+0x18>)
 800a780:	f7fe f800 	bl	8008784 <HAL_SD_GetCardInfo>
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	200002ac 	.word	0x200002ac

0800a790 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a796:	2301      	movs	r3, #1
 800a798:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	b2db      	uxtb	r3, r3
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
	...

0800a7ac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e4 <SD_CheckStatus+0x38>)
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a7bc:	f7ff ffca 	bl	800a754 <BSP_SD_GetCardState>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d107      	bne.n	800a7d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a7c6:	4b07      	ldr	r3, [pc, #28]	@ (800a7e4 <SD_CheckStatus+0x38>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f023 0301 	bic.w	r3, r3, #1
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	4b04      	ldr	r3, [pc, #16]	@ (800a7e4 <SD_CheckStatus+0x38>)
 800a7d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a7d6:	4b03      	ldr	r3, [pc, #12]	@ (800a7e4 <SD_CheckStatus+0x38>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	b2db      	uxtb	r3, r3
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20000029 	.word	0x20000029

0800a7e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <SD_initialize+0x38>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a7f8:	f7ff ff58 	bl	800a6ac <BSP_SD_Init>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d107      	bne.n	800a812 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff ffd1 	bl	800a7ac <SD_CheckStatus>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	4b04      	ldr	r3, [pc, #16]	@ (800a820 <SD_initialize+0x38>)
 800a810:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a812:	4b03      	ldr	r3, [pc, #12]	@ (800a820 <SD_initialize+0x38>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b2db      	uxtb	r3, r3
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20000029 	.word	0x20000029

0800a824 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff ffbb 	bl	800a7ac <SD_CheckStatus>
 800a836:	4603      	mov	r3, r0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f7ff ff3d 	bl	800a6dc <BSP_SD_ReadBlocks>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d107      	bne.n	800a878 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a868:	bf00      	nop
 800a86a:	f7ff ff73 	bl	800a754 <BSP_SD_GetCardState>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1fa      	bne.n	800a86a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a878:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b086      	sub	sp, #24
 800a886:	af00      	add	r7, sp, #0
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a896:	f04f 33ff 	mov.w	r3, #4294967295
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	68b8      	ldr	r0, [r7, #8]
 800a8a0:	f7ff ff3a 	bl	800a718 <BSP_SD_WriteBlocks>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d107      	bne.n	800a8ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a8aa:	bf00      	nop
 800a8ac:	f7ff ff52 	bl	800a754 <BSP_SD_GetCardState>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1fa      	bne.n	800a8ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08c      	sub	sp, #48	@ 0x30
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	603a      	str	r2, [r7, #0]
 800a8ce:	71fb      	strb	r3, [r7, #7]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a8da:	4b25      	ldr	r3, [pc, #148]	@ (800a970 <SD_ioctl+0xac>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <SD_ioctl+0x28>
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e03c      	b.n	800a966 <SD_ioctl+0xa2>

  switch (cmd)
 800a8ec:	79bb      	ldrb	r3, [r7, #6]
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d834      	bhi.n	800a95c <SD_ioctl+0x98>
 800a8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f8 <SD_ioctl+0x34>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a911 	.word	0x0800a911
 800a900:	0800a929 	.word	0x0800a929
 800a904:	0800a943 	.word	0x0800a943
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a90e:	e028      	b.n	800a962 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a910:	f107 030c 	add.w	r3, r7, #12
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff ff2d 	bl	800a774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a91a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a926:	e01c      	b.n	800a962 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a928:	f107 030c 	add.w	r3, r7, #12
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff ff21 	bl	800a774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a934:	b29a      	uxth	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a940:	e00f      	b.n	800a962 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a942:	f107 030c 	add.w	r3, r7, #12
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff ff14 	bl	800a774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94e:	0a5a      	lsrs	r2, r3, #9
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a95a:	e002      	b.n	800a962 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a95c:	2304      	movs	r3, #4
 800a95e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a966:	4618      	mov	r0, r3
 800a968:	3730      	adds	r7, #48	@ 0x30
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20000029 	.word	0x20000029

0800a974 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	4a08      	ldr	r2, [pc, #32]	@ (800a9a4 <disk_status+0x30>)
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	79fa      	ldrb	r2, [r7, #7]
 800a98c:	4905      	ldr	r1, [pc, #20]	@ (800a9a4 <disk_status+0x30>)
 800a98e:	440a      	add	r2, r1
 800a990:	7a12      	ldrb	r2, [r2, #8]
 800a992:	4610      	mov	r0, r2
 800a994:	4798      	blx	r3
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	200056a8 	.word	0x200056a8

0800a9a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a9f0 <disk_initialize+0x48>)
 800a9ba:	5cd3      	ldrb	r3, [r2, r3]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d111      	bne.n	800a9e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a9c0:	79fb      	ldrb	r3, [r7, #7]
 800a9c2:	4a0b      	ldr	r2, [pc, #44]	@ (800a9f0 <disk_initialize+0x48>)
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	4a09      	ldr	r2, [pc, #36]	@ (800a9f0 <disk_initialize+0x48>)
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	79fa      	ldrb	r2, [r7, #7]
 800a9d6:	4906      	ldr	r1, [pc, #24]	@ (800a9f0 <disk_initialize+0x48>)
 800a9d8:	440a      	add	r2, r1
 800a9da:	7a12      	ldrb	r2, [r2, #8]
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200056a8 	.word	0x200056a8

0800a9f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	4a0a      	ldr	r2, [pc, #40]	@ (800aa30 <disk_read+0x3c>)
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	689c      	ldr	r4, [r3, #8]
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	4a07      	ldr	r2, [pc, #28]	@ (800aa30 <disk_read+0x3c>)
 800aa14:	4413      	add	r3, r2
 800aa16:	7a18      	ldrb	r0, [r3, #8]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	68b9      	ldr	r1, [r7, #8]
 800aa1e:	47a0      	blx	r4
 800aa20:	4603      	mov	r3, r0
 800aa22:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd90      	pop	{r4, r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200056a8 	.word	0x200056a8

0800aa34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa34:	b590      	push	{r4, r7, lr}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	4a0a      	ldr	r2, [pc, #40]	@ (800aa70 <disk_write+0x3c>)
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	68dc      	ldr	r4, [r3, #12]
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	4a07      	ldr	r2, [pc, #28]	@ (800aa70 <disk_write+0x3c>)
 800aa54:	4413      	add	r3, r2
 800aa56:	7a18      	ldrb	r0, [r3, #8]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	68b9      	ldr	r1, [r7, #8]
 800aa5e:	47a0      	blx	r4
 800aa60:	4603      	mov	r3, r0
 800aa62:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd90      	pop	{r4, r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200056a8 	.word	0x200056a8

0800aa74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	603a      	str	r2, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
 800aa80:	460b      	mov	r3, r1
 800aa82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa84:	79fb      	ldrb	r3, [r7, #7]
 800aa86:	4a09      	ldr	r2, [pc, #36]	@ (800aaac <disk_ioctl+0x38>)
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	79fa      	ldrb	r2, [r7, #7]
 800aa92:	4906      	ldr	r1, [pc, #24]	@ (800aaac <disk_ioctl+0x38>)
 800aa94:	440a      	add	r2, r1
 800aa96:	7a10      	ldrb	r0, [r2, #8]
 800aa98:	79b9      	ldrb	r1, [r7, #6]
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  return res;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	200056a8 	.word	0x200056a8

0800aab0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3301      	adds	r3, #1
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	b21a      	sxth	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	b21b      	sxth	r3, r3
 800aacc:	4313      	orrs	r3, r2
 800aace:	b21b      	sxth	r3, r3
 800aad0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aad2:	89fb      	ldrh	r3, [r7, #14]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3303      	adds	r3, #3
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	021b      	lsls	r3, r3, #8
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	3202      	adds	r2, #2
 800aaf8:	7812      	ldrb	r2, [r2, #0]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	3201      	adds	r2, #1
 800ab06:	7812      	ldrb	r2, [r2, #0]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	7812      	ldrb	r2, [r2, #0]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
	return rv;
 800ab18:	68fb      	ldr	r3, [r7, #12]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	887a      	ldrh	r2, [r7, #2]
 800ab3a:	b2d2      	uxtb	r2, r2
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	887b      	ldrh	r3, [r7, #2]
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	887a      	ldrh	r2, [r7, #2]
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	701a      	strb	r2, [r3, #0]
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	b2d2      	uxtb	r2, r2
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	0a1b      	lsrs	r3, r3, #8
 800ab76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	b2d2      	uxtb	r2, r2
 800ab82:	701a      	strb	r2, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	0a1b      	lsrs	r3, r3, #8
 800ab88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	b2d2      	uxtb	r2, r2
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	0a1b      	lsrs	r3, r3, #8
 800ab9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	607a      	str	r2, [r7, #4]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00d      	beq.n	800abea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	1c53      	adds	r3, r2, #1
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	1c59      	adds	r1, r3, #1
 800abd8:	6179      	str	r1, [r7, #20]
 800abda:	7812      	ldrb	r2, [r2, #0]
 800abdc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	607b      	str	r3, [r7, #4]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1f1      	bne.n	800abce <mem_cpy+0x1a>
	}
}
 800abea:	bf00      	nop
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800abf6:	b480      	push	{r7}
 800abf8:	b087      	sub	sp, #28
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	617a      	str	r2, [r7, #20]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	b2d2      	uxtb	r2, r2
 800ac10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	607b      	str	r3, [r7, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1f3      	bne.n	800ac06 <mem_set+0x10>
}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac2c:	b480      	push	{r7}
 800ac2e:	b089      	sub	sp, #36	@ 0x24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	61fa      	str	r2, [r7, #28]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	61ba      	str	r2, [r7, #24]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	1acb      	subs	r3, r1, r3
 800ac58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	607b      	str	r3, [r7, #4]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <mem_cmp+0x40>
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0eb      	beq.n	800ac44 <mem_cmp+0x18>

	return r;
 800ac6c:	697b      	ldr	r3, [r7, #20]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3724      	adds	r7, #36	@ 0x24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac84:	e002      	b.n	800ac8c <chk_chr+0x12>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <chk_chr+0x26>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d1f2      	bne.n	800ac86 <chk_chr+0xc>
	return *str;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	781b      	ldrb	r3, [r3, #0]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acba:	2300      	movs	r3, #0
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	e029      	b.n	800ad18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800acc4:	4a27      	ldr	r2, [pc, #156]	@ (800ad64 <chk_lock+0xb4>)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	011b      	lsls	r3, r3, #4
 800acca:	4413      	add	r3, r2
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d01d      	beq.n	800ad0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acd2:	4a24      	ldr	r2, [pc, #144]	@ (800ad64 <chk_lock+0xb4>)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	4413      	add	r3, r2
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d116      	bne.n	800ad12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ace4:	4a1f      	ldr	r2, [pc, #124]	@ (800ad64 <chk_lock+0xb4>)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	4413      	add	r3, r2
 800acec:	3304      	adds	r3, #4
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d10c      	bne.n	800ad12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acf8:	4a1a      	ldr	r2, [pc, #104]	@ (800ad64 <chk_lock+0xb4>)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	011b      	lsls	r3, r3, #4
 800acfe:	4413      	add	r3, r2
 800ad00:	3308      	adds	r3, #8
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d102      	bne.n	800ad12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad0c:	e007      	b.n	800ad1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3301      	adds	r3, #1
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d9d2      	bls.n	800acc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d109      	bne.n	800ad38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d102      	bne.n	800ad30 <chk_lock+0x80>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d101      	bne.n	800ad34 <chk_lock+0x84>
 800ad30:	2300      	movs	r3, #0
 800ad32:	e010      	b.n	800ad56 <chk_lock+0xa6>
 800ad34:	2312      	movs	r3, #18
 800ad36:	e00e      	b.n	800ad56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d108      	bne.n	800ad50 <chk_lock+0xa0>
 800ad3e:	4a09      	ldr	r2, [pc, #36]	@ (800ad64 <chk_lock+0xb4>)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	011b      	lsls	r3, r3, #4
 800ad44:	4413      	add	r3, r2
 800ad46:	330c      	adds	r3, #12
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad4e:	d101      	bne.n	800ad54 <chk_lock+0xa4>
 800ad50:	2310      	movs	r3, #16
 800ad52:	e000      	b.n	800ad56 <chk_lock+0xa6>
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20005688 	.word	0x20005688

0800ad68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	e002      	b.n	800ad7a <enq_lock+0x12>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3301      	adds	r3, #1
 800ad78:	607b      	str	r3, [r7, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d806      	bhi.n	800ad8e <enq_lock+0x26>
 800ad80:	4a09      	ldr	r2, [pc, #36]	@ (800ada8 <enq_lock+0x40>)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	4413      	add	r3, r2
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f2      	bne.n	800ad74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	bf14      	ite	ne
 800ad94:	2301      	movne	r3, #1
 800ad96:	2300      	moveq	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20005688 	.word	0x20005688

0800adac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]
 800adba:	e01f      	b.n	800adfc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800adbc:	4a41      	ldr	r2, [pc, #260]	@ (800aec4 <inc_lock+0x118>)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	4413      	add	r3, r2
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d113      	bne.n	800adf6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800adce:	4a3d      	ldr	r2, [pc, #244]	@ (800aec4 <inc_lock+0x118>)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	4413      	add	r3, r2
 800add6:	3304      	adds	r3, #4
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800adde:	429a      	cmp	r2, r3
 800ade0:	d109      	bne.n	800adf6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ade2:	4a38      	ldr	r2, [pc, #224]	@ (800aec4 <inc_lock+0x118>)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	4413      	add	r3, r2
 800adea:	3308      	adds	r3, #8
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d006      	beq.n	800ae04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3301      	adds	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d9dc      	bls.n	800adbc <inc_lock+0x10>
 800ae02:	e000      	b.n	800ae06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d132      	bne.n	800ae72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e002      	b.n	800ae18 <inc_lock+0x6c>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3301      	adds	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d806      	bhi.n	800ae2c <inc_lock+0x80>
 800ae1e:	4a29      	ldr	r2, [pc, #164]	@ (800aec4 <inc_lock+0x118>)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	011b      	lsls	r3, r3, #4
 800ae24:	4413      	add	r3, r2
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1f2      	bne.n	800ae12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d101      	bne.n	800ae36 <inc_lock+0x8a>
 800ae32:	2300      	movs	r3, #0
 800ae34:	e040      	b.n	800aeb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	4922      	ldr	r1, [pc, #136]	@ (800aec4 <inc_lock+0x118>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	011b      	lsls	r3, r3, #4
 800ae40:	440b      	add	r3, r1
 800ae42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	491e      	ldr	r1, [pc, #120]	@ (800aec4 <inc_lock+0x118>)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	440b      	add	r3, r1
 800ae50:	3304      	adds	r3, #4
 800ae52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	695a      	ldr	r2, [r3, #20]
 800ae58:	491a      	ldr	r1, [pc, #104]	@ (800aec4 <inc_lock+0x118>)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	440b      	add	r3, r1
 800ae60:	3308      	adds	r3, #8
 800ae62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae64:	4a17      	ldr	r2, [pc, #92]	@ (800aec4 <inc_lock+0x118>)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	4413      	add	r3, r2
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	2200      	movs	r2, #0
 800ae70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d009      	beq.n	800ae8c <inc_lock+0xe0>
 800ae78:	4a12      	ldr	r2, [pc, #72]	@ (800aec4 <inc_lock+0x118>)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	011b      	lsls	r3, r3, #4
 800ae7e:	4413      	add	r3, r2
 800ae80:	330c      	adds	r3, #12
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <inc_lock+0xe0>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e015      	b.n	800aeb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d108      	bne.n	800aea4 <inc_lock+0xf8>
 800ae92:	4a0c      	ldr	r2, [pc, #48]	@ (800aec4 <inc_lock+0x118>)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	011b      	lsls	r3, r3, #4
 800ae98:	4413      	add	r3, r2
 800ae9a:	330c      	adds	r3, #12
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	e001      	b.n	800aea8 <inc_lock+0xfc>
 800aea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aea8:	4906      	ldr	r1, [pc, #24]	@ (800aec4 <inc_lock+0x118>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	440b      	add	r3, r1
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3301      	adds	r3, #1
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20005688 	.word	0x20005688

0800aec8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d825      	bhi.n	800af28 <dec_lock+0x60>
		n = Files[i].ctr;
 800aedc:	4a17      	ldr	r2, [pc, #92]	@ (800af3c <dec_lock+0x74>)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	4413      	add	r3, r2
 800aee4:	330c      	adds	r3, #12
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aeea:	89fb      	ldrh	r3, [r7, #14]
 800aeec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aef0:	d101      	bne.n	800aef6 <dec_lock+0x2e>
 800aef2:	2300      	movs	r3, #0
 800aef4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aef6:	89fb      	ldrh	r3, [r7, #14]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <dec_lock+0x3a>
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	3b01      	subs	r3, #1
 800af00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af02:	4a0e      	ldr	r2, [pc, #56]	@ (800af3c <dec_lock+0x74>)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	4413      	add	r3, r2
 800af0a:	330c      	adds	r3, #12
 800af0c:	89fa      	ldrh	r2, [r7, #14]
 800af0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800af10:	89fb      	ldrh	r3, [r7, #14]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d105      	bne.n	800af22 <dec_lock+0x5a>
 800af16:	4a09      	ldr	r2, [pc, #36]	@ (800af3c <dec_lock+0x74>)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	4413      	add	r3, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	737b      	strb	r3, [r7, #13]
 800af26:	e001      	b.n	800af2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800af28:	2302      	movs	r3, #2
 800af2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800af2c:	7b7b      	ldrb	r3, [r7, #13]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	20005688 	.word	0x20005688

0800af40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e010      	b.n	800af70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af4e:	4a0d      	ldr	r2, [pc, #52]	@ (800af84 <clear_lock+0x44>)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	011b      	lsls	r3, r3, #4
 800af54:	4413      	add	r3, r2
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d105      	bne.n	800af6a <clear_lock+0x2a>
 800af5e:	4a09      	ldr	r2, [pc, #36]	@ (800af84 <clear_lock+0x44>)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	4413      	add	r3, r2
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d9eb      	bls.n	800af4e <clear_lock+0xe>
	}
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	20005688 	.word	0x20005688

0800af88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	78db      	ldrb	r3, [r3, #3]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d034      	beq.n	800b006 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7858      	ldrb	r0, [r3, #1]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800afac:	2301      	movs	r3, #1
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	f7ff fd40 	bl	800aa34 <disk_write>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800afba:	2301      	movs	r3, #1
 800afbc:	73fb      	strb	r3, [r7, #15]
 800afbe:	e022      	b.n	800b006 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	1ad2      	subs	r2, r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d217      	bcs.n	800b006 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	789b      	ldrb	r3, [r3, #2]
 800afda:	613b      	str	r3, [r7, #16]
 800afdc:	e010      	b.n	800b000 <sync_window+0x78>
					wsect += fs->fsize;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	4413      	add	r3, r2
 800afe6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7858      	ldrb	r0, [r3, #1]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800aff2:	2301      	movs	r3, #1
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	f7ff fd1d 	bl	800aa34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	3b01      	subs	r3, #1
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d8eb      	bhi.n	800afde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b006:	7bfb      	ldrb	r3, [r7, #15]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d01b      	beq.n	800b060 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff ffad 	bl	800af88 <sync_window>
 800b02e:	4603      	mov	r3, r0
 800b030:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d113      	bne.n	800b060 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	7858      	ldrb	r0, [r3, #1]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b042:	2301      	movs	r3, #1
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	f7ff fcd5 	bl	800a9f4 <disk_read>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d004      	beq.n	800b05a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b050:	f04f 33ff 	mov.w	r3, #4294967295
 800b054:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b056:	2301      	movs	r3, #1
 800b058:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b060:	7bfb      	ldrb	r3, [r7, #15]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff ff87 	bl	800af88 <sync_window>
 800b07a:	4603      	mov	r3, r0
 800b07c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d159      	bne.n	800b138 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d149      	bne.n	800b120 <sync_fs+0xb4>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	791b      	ldrb	r3, [r3, #4]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d145      	bne.n	800b120 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	899b      	ldrh	r3, [r3, #12]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	f7ff fda8 	bl	800abf6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3334      	adds	r3, #52	@ 0x34
 800b0aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b0ae:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fd37 	bl	800ab26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3334      	adds	r3, #52	@ 0x34
 800b0bc:	4921      	ldr	r1, [pc, #132]	@ (800b144 <sync_fs+0xd8>)
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff fd4c 	bl	800ab5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3334      	adds	r3, #52	@ 0x34
 800b0c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b0cc:	491e      	ldr	r1, [pc, #120]	@ (800b148 <sync_fs+0xdc>)
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff fd44 	bl	800ab5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3334      	adds	r3, #52	@ 0x34
 800b0d8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	f7ff fd3a 	bl	800ab5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3334      	adds	r3, #52	@ 0x34
 800b0ec:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f7ff fd30 	bl	800ab5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7858      	ldrb	r0, [r3, #1]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b114:	2301      	movs	r3, #1
 800b116:	f7ff fc8d 	bl	800aa34 <disk_write>
			fs->fsi_flag = 0;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	2200      	movs	r2, #0
 800b126:	2100      	movs	r1, #0
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff fca3 	bl	800aa74 <disk_ioctl>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <sync_fs+0xcc>
 800b134:	2301      	movs	r3, #1
 800b136:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	41615252 	.word	0x41615252
 800b148:	61417272 	.word	0x61417272

0800b14c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	3b02      	subs	r3, #2
 800b15a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	3b02      	subs	r3, #2
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d301      	bcc.n	800b16c <clust2sect+0x20>
 800b168:	2300      	movs	r3, #0
 800b16a:	e008      	b.n	800b17e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	895b      	ldrh	r3, [r3, #10]
 800b170:	461a      	mov	r2, r3
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	fb03 f202 	mul.w	r2, r3, r2
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17c:	4413      	add	r3, r2
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b086      	sub	sp, #24
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d904      	bls.n	800b1aa <get_fat+0x20>
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d302      	bcc.n	800b1b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	617b      	str	r3, [r7, #20]
 800b1ae:	e0ba      	b.n	800b326 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	f000 8082 	beq.w	800b2c4 <get_fat+0x13a>
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	f300 80a6 	bgt.w	800b312 <get_fat+0x188>
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d002      	beq.n	800b1d0 <get_fat+0x46>
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d055      	beq.n	800b27a <get_fat+0xf0>
 800b1ce:	e0a0      	b.n	800b312 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	085b      	lsrs	r3, r3, #1
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4413      	add	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	899b      	ldrh	r3, [r3, #12]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6938      	ldr	r0, [r7, #16]
 800b1f4:	f7ff ff0c 	bl	800b010 <move_window>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f040 808c 	bne.w	800b318 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	60fa      	str	r2, [r7, #12]
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	8992      	ldrh	r2, [r2, #12]
 800b20a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b20e:	fb01 f202 	mul.w	r2, r1, r2
 800b212:	1a9b      	subs	r3, r3, r2
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	4413      	add	r3, r2
 800b218:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b21c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	899b      	ldrh	r3, [r3, #12]
 800b226:	4619      	mov	r1, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b22e:	4413      	add	r3, r2
 800b230:	4619      	mov	r1, r3
 800b232:	6938      	ldr	r0, [r7, #16]
 800b234:	f7ff feec 	bl	800b010 <move_window>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d16e      	bne.n	800b31c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	899b      	ldrh	r3, [r3, #12]
 800b242:	461a      	mov	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	fbb3 f1f2 	udiv	r1, r3, r2
 800b24a:	fb01 f202 	mul.w	r2, r1, r2
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4413      	add	r3, r2
 800b254:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b258:	021b      	lsls	r3, r3, #8
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <get_fat+0xe6>
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	091b      	lsrs	r3, r3, #4
 800b26e:	e002      	b.n	800b276 <get_fat+0xec>
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b276:	617b      	str	r3, [r7, #20]
			break;
 800b278:	e055      	b.n	800b326 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	899b      	ldrh	r3, [r3, #12]
 800b282:	085b      	lsrs	r3, r3, #1
 800b284:	b29b      	uxth	r3, r3
 800b286:	4619      	mov	r1, r3
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b28e:	4413      	add	r3, r2
 800b290:	4619      	mov	r1, r3
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f7ff febc 	bl	800b010 <move_window>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d140      	bne.n	800b320 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	8992      	ldrh	r2, [r2, #12]
 800b2ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2b0:	fb00 f202 	mul.w	r2, r0, r2
 800b2b4:	1a9b      	subs	r3, r3, r2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7ff fbf9 	bl	800aab0 <ld_word>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	617b      	str	r3, [r7, #20]
			break;
 800b2c2:	e030      	b.n	800b326 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	899b      	ldrh	r3, [r3, #12]
 800b2cc:	089b      	lsrs	r3, r3, #2
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2d8:	4413      	add	r3, r2
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6938      	ldr	r0, [r7, #16]
 800b2de:	f7ff fe97 	bl	800b010 <move_window>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d11d      	bne.n	800b324 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	8992      	ldrh	r2, [r2, #12]
 800b2f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2fa:	fb00 f202 	mul.w	r2, r0, r2
 800b2fe:	1a9b      	subs	r3, r3, r2
 800b300:	440b      	add	r3, r1
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff fbec 	bl	800aae0 <ld_dword>
 800b308:	4603      	mov	r3, r0
 800b30a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b30e:	617b      	str	r3, [r7, #20]
			break;
 800b310:	e009      	b.n	800b326 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b312:	2301      	movs	r3, #1
 800b314:	617b      	str	r3, [r7, #20]
 800b316:	e006      	b.n	800b326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b318:	bf00      	nop
 800b31a:	e004      	b.n	800b326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b31c:	bf00      	nop
 800b31e:	e002      	b.n	800b326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b320:	bf00      	nop
 800b322:	e000      	b.n	800b326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b324:	bf00      	nop
		}
	}

	return val;
 800b326:	697b      	ldr	r3, [r7, #20]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b089      	sub	sp, #36	@ 0x24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b33c:	2302      	movs	r3, #2
 800b33e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b01      	cmp	r3, #1
 800b344:	f240 8109 	bls.w	800b55a <put_fat+0x22a>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	f080 8103 	bcs.w	800b55a <put_fat+0x22a>
		switch (fs->fs_type) {
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b03      	cmp	r3, #3
 800b35a:	f000 80b6 	beq.w	800b4ca <put_fat+0x19a>
 800b35e:	2b03      	cmp	r3, #3
 800b360:	f300 80fb 	bgt.w	800b55a <put_fat+0x22a>
 800b364:	2b01      	cmp	r3, #1
 800b366:	d003      	beq.n	800b370 <put_fat+0x40>
 800b368:	2b02      	cmp	r3, #2
 800b36a:	f000 8083 	beq.w	800b474 <put_fat+0x144>
 800b36e:	e0f4      	b.n	800b55a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	085b      	lsrs	r3, r3, #1
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	4413      	add	r3, r2
 800b37c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	899b      	ldrh	r3, [r3, #12]
 800b386:	4619      	mov	r1, r3
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b38e:	4413      	add	r3, r2
 800b390:	4619      	mov	r1, r3
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fe3c 	bl	800b010 <move_window>
 800b398:	4603      	mov	r3, r0
 800b39a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b39c:	7ffb      	ldrb	r3, [r7, #31]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f040 80d4 	bne.w	800b54c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	61ba      	str	r2, [r7, #24]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	8992      	ldrh	r2, [r2, #12]
 800b3b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3b8:	fb00 f202 	mul.w	r2, r0, r2
 800b3bc:	1a9b      	subs	r3, r3, r2
 800b3be:	440b      	add	r3, r1
 800b3c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00d      	beq.n	800b3e8 <put_fat+0xb8>
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	b25b      	sxtb	r3, r3
 800b3d2:	f003 030f 	and.w	r3, r3, #15
 800b3d6:	b25a      	sxtb	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	b25b      	sxtb	r3, r3
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	b25b      	sxtb	r3, r3
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	e001      	b.n	800b3ec <put_fat+0xbc>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	899b      	ldrh	r3, [r3, #12]
 800b3fe:	4619      	mov	r1, r3
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	fbb3 f3f1 	udiv	r3, r3, r1
 800b406:	4413      	add	r3, r2
 800b408:	4619      	mov	r1, r3
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fe00 	bl	800b010 <move_window>
 800b410:	4603      	mov	r3, r0
 800b412:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b414:	7ffb      	ldrb	r3, [r7, #31]
 800b416:	2b00      	cmp	r3, #0
 800b418:	f040 809a 	bne.w	800b550 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	899b      	ldrh	r3, [r3, #12]
 800b426:	461a      	mov	r2, r3
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b42e:	fb00 f202 	mul.w	r2, r0, r2
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	440b      	add	r3, r1
 800b436:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <put_fat+0x11a>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	091b      	lsrs	r3, r3, #4
 800b446:	b2db      	uxtb	r3, r3
 800b448:	e00e      	b.n	800b468 <put_fat+0x138>
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	b25b      	sxtb	r3, r3
 800b450:	f023 030f 	bic.w	r3, r3, #15
 800b454:	b25a      	sxtb	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	0a1b      	lsrs	r3, r3, #8
 800b45a:	b25b      	sxtb	r3, r3
 800b45c:	f003 030f 	and.w	r3, r3, #15
 800b460:	b25b      	sxtb	r3, r3
 800b462:	4313      	orrs	r3, r2
 800b464:	b25b      	sxtb	r3, r3
 800b466:	b2db      	uxtb	r3, r3
 800b468:	697a      	ldr	r2, [r7, #20]
 800b46a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2201      	movs	r2, #1
 800b470:	70da      	strb	r2, [r3, #3]
			break;
 800b472:	e072      	b.n	800b55a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	899b      	ldrh	r3, [r3, #12]
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	b29b      	uxth	r3, r3
 800b480:	4619      	mov	r1, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	fbb3 f3f1 	udiv	r3, r3, r1
 800b488:	4413      	add	r3, r2
 800b48a:	4619      	mov	r1, r3
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7ff fdbf 	bl	800b010 <move_window>
 800b492:	4603      	mov	r3, r0
 800b494:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b496:	7ffb      	ldrb	r3, [r7, #31]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d15b      	bne.n	800b554 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	8992      	ldrh	r2, [r2, #12]
 800b4aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4ae:	fb00 f202 	mul.w	r2, r0, r2
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	b292      	uxth	r2, r2
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff fb32 	bl	800ab26 <st_word>
			fs->wflag = 1;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	70da      	strb	r2, [r3, #3]
			break;
 800b4c8:	e047      	b.n	800b55a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	899b      	ldrh	r3, [r3, #12]
 800b4d2:	089b      	lsrs	r3, r3, #2
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4de:	4413      	add	r3, r2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7ff fd94 	bl	800b010 <move_window>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ec:	7ffb      	ldrb	r3, [r7, #31]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d132      	bne.n	800b558 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	8992      	ldrh	r2, [r2, #12]
 800b506:	fbb3 f0f2 	udiv	r0, r3, r2
 800b50a:	fb00 f202 	mul.w	r2, r0, r2
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	440b      	add	r3, r1
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff fae4 	bl	800aae0 <ld_dword>
 800b518:	4603      	mov	r3, r0
 800b51a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b51e:	4323      	orrs	r3, r4
 800b520:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	8992      	ldrh	r2, [r2, #12]
 800b530:	fbb3 f0f2 	udiv	r0, r3, r2
 800b534:	fb00 f202 	mul.w	r2, r0, r2
 800b538:	1a9b      	subs	r3, r3, r2
 800b53a:	440b      	add	r3, r1
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff fb0c 	bl	800ab5c <st_dword>
			fs->wflag = 1;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	70da      	strb	r2, [r3, #3]
			break;
 800b54a:	e006      	b.n	800b55a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b54c:	bf00      	nop
 800b54e:	e004      	b.n	800b55a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b550:	bf00      	nop
 800b552:	e002      	b.n	800b55a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b554:	bf00      	nop
 800b556:	e000      	b.n	800b55a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b558:	bf00      	nop
		}
	}
	return res;
 800b55a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3724      	adds	r7, #36	@ 0x24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd90      	pop	{r4, r7, pc}

0800b564 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d904      	bls.n	800b58a <remove_chain+0x26>
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	429a      	cmp	r2, r3
 800b588:	d301      	bcc.n	800b58e <remove_chain+0x2a>
 800b58a:	2302      	movs	r3, #2
 800b58c:	e04b      	b.n	800b626 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00c      	beq.n	800b5ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b594:	f04f 32ff 	mov.w	r2, #4294967295
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	69b8      	ldr	r0, [r7, #24]
 800b59c:	f7ff fec8 	bl	800b330 <put_fat>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b5a4:	7ffb      	ldrb	r3, [r7, #31]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <remove_chain+0x4a>
 800b5aa:	7ffb      	ldrb	r3, [r7, #31]
 800b5ac:	e03b      	b.n	800b626 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7ff fdea 	bl	800b18a <get_fat>
 800b5b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d031      	beq.n	800b622 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d101      	bne.n	800b5c8 <remove_chain+0x64>
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	e02e      	b.n	800b626 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	d101      	bne.n	800b5d4 <remove_chain+0x70>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e028      	b.n	800b626 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	68b9      	ldr	r1, [r7, #8]
 800b5d8:	69b8      	ldr	r0, [r7, #24]
 800b5da:	f7ff fea9 	bl	800b330 <put_fat>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5e2:	7ffb      	ldrb	r3, [r7, #31]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <remove_chain+0x88>
 800b5e8:	7ffb      	ldrb	r3, [r7, #31]
 800b5ea:	e01c      	b.n	800b626 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	695a      	ldr	r2, [r3, #20]
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	3b02      	subs	r3, #2
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d20b      	bcs.n	800b612 <remove_chain+0xae>
			fs->free_clst++;
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	791b      	ldrb	r3, [r3, #4]
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d3c6      	bcc.n	800b5ae <remove_chain+0x4a>
 800b620:	e000      	b.n	800b624 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b622:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3720      	adds	r7, #32
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b088      	sub	sp, #32
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10d      	bne.n	800b660 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d004      	beq.n	800b65a <create_chain+0x2c>
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	69ba      	ldr	r2, [r7, #24]
 800b656:	429a      	cmp	r2, r3
 800b658:	d31b      	bcc.n	800b692 <create_chain+0x64>
 800b65a:	2301      	movs	r3, #1
 800b65c:	61bb      	str	r3, [r7, #24]
 800b65e:	e018      	b.n	800b692 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff fd91 	bl	800b18a <get_fat>
 800b668:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d801      	bhi.n	800b674 <create_chain+0x46>
 800b670:	2301      	movs	r3, #1
 800b672:	e070      	b.n	800b756 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d101      	bne.n	800b680 <create_chain+0x52>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	e06a      	b.n	800b756 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	429a      	cmp	r2, r3
 800b688:	d201      	bcs.n	800b68e <create_chain+0x60>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	e063      	b.n	800b756 <create_chain+0x128>
		scl = clst;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	3301      	adds	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	69fa      	ldr	r2, [r7, #28]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d307      	bcc.n	800b6b6 <create_chain+0x88>
				ncl = 2;
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d901      	bls.n	800b6b6 <create_chain+0x88>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e04f      	b.n	800b756 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6b6:	69f9      	ldr	r1, [r7, #28]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff fd66 	bl	800b18a <get_fat>
 800b6be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00e      	beq.n	800b6e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d003      	beq.n	800b6d4 <create_chain+0xa6>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d2:	d101      	bne.n	800b6d8 <create_chain+0xaa>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	e03e      	b.n	800b756 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d1da      	bne.n	800b696 <create_chain+0x68>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e038      	b.n	800b756 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	69f9      	ldr	r1, [r7, #28]
 800b6ec:	6938      	ldr	r0, [r7, #16]
 800b6ee:	f7ff fe1f 	bl	800b330 <put_fat>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d109      	bne.n	800b710 <create_chain+0xe2>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d006      	beq.n	800b710 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6938      	ldr	r0, [r7, #16]
 800b708:	f7ff fe12 	bl	800b330 <put_fat>
 800b70c:	4603      	mov	r3, r0
 800b70e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d116      	bne.n	800b744 <create_chain+0x116>
		fs->last_clst = ncl;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	69fa      	ldr	r2, [r7, #28]
 800b71a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	695a      	ldr	r2, [r3, #20]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	3b02      	subs	r3, #2
 800b726:	429a      	cmp	r2, r3
 800b728:	d804      	bhi.n	800b734 <create_chain+0x106>
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	1e5a      	subs	r2, r3, #1
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	791b      	ldrb	r3, [r3, #4]
 800b738:	f043 0301 	orr.w	r3, r3, #1
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	711a      	strb	r2, [r3, #4]
 800b742:	e007      	b.n	800b754 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b744:	7dfb      	ldrb	r3, [r7, #23]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d102      	bne.n	800b750 <create_chain+0x122>
 800b74a:	f04f 33ff 	mov.w	r3, #4294967295
 800b74e:	e000      	b.n	800b752 <create_chain+0x124>
 800b750:	2301      	movs	r3, #1
 800b752:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b754:	69fb      	ldr	r3, [r7, #28]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b75e:	b480      	push	{r7}
 800b760:	b087      	sub	sp, #28
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b772:	3304      	adds	r3, #4
 800b774:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	899b      	ldrh	r3, [r3, #12]
 800b77a:	461a      	mov	r2, r3
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	8952      	ldrh	r2, [r2, #10]
 800b786:	fbb3 f3f2 	udiv	r3, r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	613a      	str	r2, [r7, #16]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <clmt_clust+0x42>
 800b79c:	2300      	movs	r3, #0
 800b79e:	e010      	b.n	800b7c2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d307      	bcc.n	800b7b8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7b6:	e7e9      	b.n	800b78c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b7b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	4413      	add	r3, r2
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	371c      	adds	r7, #28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b086      	sub	sp, #24
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7e4:	d204      	bcs.n	800b7f0 <dir_sdi+0x22>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	f003 031f 	and.w	r3, r3, #31
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	e071      	b.n	800b8d8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <dir_sdi+0x46>
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d902      	bls.n	800b814 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b812:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10c      	bne.n	800b834 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	095b      	lsrs	r3, r3, #5
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	8912      	ldrh	r2, [r2, #8]
 800b822:	4293      	cmp	r3, r2
 800b824:	d301      	bcc.n	800b82a <dir_sdi+0x5c>
 800b826:	2302      	movs	r3, #2
 800b828:	e056      	b.n	800b8d8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	61da      	str	r2, [r3, #28]
 800b832:	e02d      	b.n	800b890 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	895b      	ldrh	r3, [r3, #10]
 800b838:	461a      	mov	r2, r3
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	899b      	ldrh	r3, [r3, #12]
 800b83e:	fb02 f303 	mul.w	r3, r2, r3
 800b842:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b844:	e019      	b.n	800b87a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6979      	ldr	r1, [r7, #20]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fc9d 	bl	800b18a <get_fat>
 800b850:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d101      	bne.n	800b85e <dir_sdi+0x90>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e03c      	b.n	800b8d8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d904      	bls.n	800b86e <dir_sdi+0xa0>
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d301      	bcc.n	800b872 <dir_sdi+0xa4>
 800b86e:	2302      	movs	r3, #2
 800b870:	e032      	b.n	800b8d8 <dir_sdi+0x10a>
			ofs -= csz;
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d2e1      	bcs.n	800b846 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b882:	6979      	ldr	r1, [r7, #20]
 800b884:	6938      	ldr	r0, [r7, #16]
 800b886:	f7ff fc61 	bl	800b14c <clust2sect>
 800b88a:	4602      	mov	r2, r0
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <dir_sdi+0xd4>
 800b89e:	2302      	movs	r3, #2
 800b8a0:	e01a      	b.n	800b8d8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	69da      	ldr	r2, [r3, #28]
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	899b      	ldrh	r3, [r3, #12]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8b2:	441a      	add	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	899b      	ldrh	r3, [r3, #12]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8ca:	fb00 f202 	mul.w	r2, r0, r2
 800b8ce:	1a9b      	subs	r3, r3, r2
 800b8d0:	18ca      	adds	r2, r1, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	3320      	adds	r3, #32
 800b8f6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <dir_next+0x28>
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b906:	d301      	bcc.n	800b90c <dir_next+0x2c>
 800b908:	2304      	movs	r3, #4
 800b90a:	e0bb      	b.n	800ba84 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	899b      	ldrh	r3, [r3, #12]
 800b910:	461a      	mov	r2, r3
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	fbb3 f1f2 	udiv	r1, r3, r2
 800b918:	fb01 f202 	mul.w	r2, r1, r2
 800b91c:	1a9b      	subs	r3, r3, r2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f040 809d 	bne.w	800ba5e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10b      	bne.n	800b94e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	095b      	lsrs	r3, r3, #5
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	8912      	ldrh	r2, [r2, #8]
 800b93e:	4293      	cmp	r3, r2
 800b940:	f0c0 808d 	bcc.w	800ba5e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	61da      	str	r2, [r3, #28]
 800b94a:	2304      	movs	r3, #4
 800b94c:	e09a      	b.n	800ba84 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	899b      	ldrh	r3, [r3, #12]
 800b952:	461a      	mov	r2, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	fbb3 f3f2 	udiv	r3, r3, r2
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	8952      	ldrh	r2, [r2, #10]
 800b95e:	3a01      	subs	r2, #1
 800b960:	4013      	ands	r3, r2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d17b      	bne.n	800ba5e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	4619      	mov	r1, r3
 800b96e:	4610      	mov	r0, r2
 800b970:	f7ff fc0b 	bl	800b18a <get_fat>
 800b974:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d801      	bhi.n	800b980 <dir_next+0xa0>
 800b97c:	2302      	movs	r3, #2
 800b97e:	e081      	b.n	800ba84 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b986:	d101      	bne.n	800b98c <dir_next+0xac>
 800b988:	2301      	movs	r3, #1
 800b98a:	e07b      	b.n	800ba84 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	429a      	cmp	r2, r3
 800b994:	d359      	bcc.n	800ba4a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d104      	bne.n	800b9a6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	61da      	str	r2, [r3, #28]
 800b9a2:	2304      	movs	r3, #4
 800b9a4:	e06e      	b.n	800ba84 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7ff fe3d 	bl	800b62e <create_chain>
 800b9b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <dir_next+0xe0>
 800b9bc:	2307      	movs	r3, #7
 800b9be:	e061      	b.n	800ba84 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <dir_next+0xea>
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e05c      	b.n	800ba84 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d0:	d101      	bne.n	800b9d6 <dir_next+0xf6>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e056      	b.n	800ba84 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff fad6 	bl	800af88 <sync_window>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <dir_next+0x106>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e04e      	b.n	800ba84 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	899b      	ldrh	r3, [r3, #12]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	f7ff f8ff 	bl	800abf6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	613b      	str	r3, [r7, #16]
 800b9fc:	6979      	ldr	r1, [r7, #20]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff fba4 	bl	800b14c <clust2sect>
 800ba04:	4602      	mov	r2, r0
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba0a:	e012      	b.n	800ba32 <dir_next+0x152>
						fs->wflag = 1;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff fab8 	bl	800af88 <sync_window>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <dir_next+0x142>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e030      	b.n	800ba84 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	3301      	adds	r3, #1
 800ba26:	613b      	str	r3, [r7, #16]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	895b      	ldrh	r3, [r3, #10]
 800ba36:	461a      	mov	r2, r3
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d3e6      	bcc.n	800ba0c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	1ad2      	subs	r2, r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba50:	6979      	ldr	r1, [r7, #20]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fb7a 	bl	800b14c <clust2sect>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	899b      	ldrh	r3, [r3, #12]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba76:	fb00 f202 	mul.w	r2, r0, r2
 800ba7a:	1a9b      	subs	r3, r3, r2
 800ba7c:	18ca      	adds	r2, r1, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff fe95 	bl	800b7ce <dir_sdi>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d12b      	bne.n	800bb06 <dir_alloc+0x7a>
		n = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	4619      	mov	r1, r3
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff faa9 	bl	800b010 <move_window>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11d      	bne.n	800bb04 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2be5      	cmp	r3, #229	@ 0xe5
 800bad0:	d004      	beq.n	800badc <dir_alloc+0x50>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d107      	bne.n	800baec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d102      	bne.n	800baf0 <dir_alloc+0x64>
 800baea:	e00c      	b.n	800bb06 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800baf0:	2101      	movs	r1, #1
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff fef4 	bl	800b8e0 <dir_next>
 800baf8:	4603      	mov	r3, r0
 800bafa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0d7      	beq.n	800bab2 <dir_alloc+0x26>
 800bb02:	e000      	b.n	800bb06 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	d101      	bne.n	800bb10 <dir_alloc+0x84>
 800bb0c:	2307      	movs	r3, #7
 800bb0e:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	331a      	adds	r3, #26
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fe ffc1 	bl	800aab0 <ld_word>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d109      	bne.n	800bb4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe ffb6 	bl	800aab0 <ld_word>
 800bb44:	4603      	mov	r3, r0
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	331a      	adds	r3, #26
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	b292      	uxth	r2, r2
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fe ffd9 	bl	800ab26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d109      	bne.n	800bb90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f103 0214 	add.w	r2, r3, #20
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	0c1b      	lsrs	r3, r3, #16
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fe ffcb 	bl	800ab26 <st_word>
	}
}
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bba6:	2100      	movs	r1, #0
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fe10 	bl	800b7ce <dir_sdi>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <dir_find+0x24>
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	e03e      	b.n	800bc3a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6938      	ldr	r0, [r7, #16]
 800bbc4:	f7ff fa24 	bl	800b010 <move_window>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d12f      	bne.n	800bc32 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <dir_find+0x4e>
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	75fb      	strb	r3, [r7, #23]
 800bbe4:	e028      	b.n	800bc38 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	330b      	adds	r3, #11
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	330b      	adds	r3, #11
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 0308 	and.w	r3, r3, #8
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <dir_find+0x86>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a18      	ldr	r0, [r3, #32]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3324      	adds	r3, #36	@ 0x24
 800bc10:	220b      	movs	r2, #11
 800bc12:	4619      	mov	r1, r3
 800bc14:	f7ff f80a 	bl	800ac2c <mem_cmp>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00b      	beq.n	800bc36 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bc1e:	2100      	movs	r1, #0
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff fe5d 	bl	800b8e0 <dir_next>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0c5      	beq.n	800bbbc <dir_find+0x24>
 800bc30:	e002      	b.n	800bc38 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bc32:	bf00      	nop
 800bc34:	e000      	b.n	800bc38 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc36:	bf00      	nop

	return res;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bc50:	2101      	movs	r1, #1
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff ff1a 	bl	800ba8c <dir_alloc>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d11c      	bne.n	800bc9c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	4619      	mov	r1, r3
 800bc68:	68b8      	ldr	r0, [r7, #8]
 800bc6a:	f7ff f9d1 	bl	800b010 <move_window>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d111      	bne.n	800bc9c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fe ffb8 	bl	800abf6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a18      	ldr	r0, [r3, #32]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3324      	adds	r3, #36	@ 0x24
 800bc8e:	220b      	movs	r2, #11
 800bc90:	4619      	mov	r1, r3
 800bc92:	f7fe ff8f 	bl	800abb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d04f      	beq.n	800bd5e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800bcc6:	e022      	b.n	800bd0e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a1a      	ldr	r2, [r3, #32]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	1c59      	adds	r1, r3, #1
 800bcd0:	6179      	str	r1, [r7, #20]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	2b20      	cmp	r3, #32
 800bcdc:	d016      	beq.n	800bd0c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
 800bce0:	2b05      	cmp	r3, #5
 800bce2:	d101      	bne.n	800bce8 <get_fileinfo+0x42>
 800bce4:	23e5      	movs	r3, #229	@ 0xe5
 800bce6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2b09      	cmp	r3, #9
 800bcec:	d106      	bne.n	800bcfc <get_fileinfo+0x56>
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	613a      	str	r2, [r7, #16]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	222e      	movs	r2, #46	@ 0x2e
 800bcfa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	613a      	str	r2, [r7, #16]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	4413      	add	r3, r2
 800bd06:	7bfa      	ldrb	r2, [r7, #15]
 800bd08:	725a      	strb	r2, [r3, #9]
 800bd0a:	e000      	b.n	800bd0e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd0c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	2b0a      	cmp	r3, #10
 800bd12:	d9d9      	bls.n	800bcc8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800bd14:	683a      	ldr	r2, [r7, #0]
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	4413      	add	r3, r2
 800bd1a:	3309      	adds	r3, #9
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	7ada      	ldrb	r2, [r3, #11]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	331c      	adds	r3, #28
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fe fed5 	bl	800aae0 <ld_dword>
 800bd36:	4602      	mov	r2, r0
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	3316      	adds	r3, #22
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fecc 	bl	800aae0 <ld_dword>
 800bd48:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	80da      	strh	r2, [r3, #6]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	0c1b      	lsrs	r3, r3, #16
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	809a      	strh	r2, [r3, #4]
 800bd5c:	e000      	b.n	800bd60 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bd5e:	bf00      	nop
}
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3324      	adds	r3, #36	@ 0x24
 800bd7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd7e:	220b      	movs	r2, #11
 800bd80:	2120      	movs	r1, #32
 800bd82:	68b8      	ldr	r0, [r7, #8]
 800bd84:	f7fe ff37 	bl	800abf6 <mem_set>
	si = i = 0; ni = 8;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	61fb      	str	r3, [r7, #28]
 800bd90:	2308      	movs	r3, #8
 800bd92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	61fa      	str	r2, [r7, #28]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bda2:	7efb      	ldrb	r3, [r7, #27]
 800bda4:	2b20      	cmp	r3, #32
 800bda6:	d94e      	bls.n	800be46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bda8:	7efb      	ldrb	r3, [r7, #27]
 800bdaa:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdac:	d006      	beq.n	800bdbc <create_name+0x54>
 800bdae:	7efb      	ldrb	r3, [r7, #27]
 800bdb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bdb2:	d110      	bne.n	800bdd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdb4:	e002      	b.n	800bdbc <create_name+0x54>
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	61fb      	str	r3, [r7, #28]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdc6:	d0f6      	beq.n	800bdb6 <create_name+0x4e>
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	4413      	add	r3, r2
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bdd2:	d0f0      	beq.n	800bdb6 <create_name+0x4e>
			break;
 800bdd4:	e038      	b.n	800be48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdd6:	7efb      	ldrb	r3, [r7, #27]
 800bdd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdda:	d003      	beq.n	800bde4 <create_name+0x7c>
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d30c      	bcc.n	800bdfe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2b0b      	cmp	r3, #11
 800bde8:	d002      	beq.n	800bdf0 <create_name+0x88>
 800bdea:	7efb      	ldrb	r3, [r7, #27]
 800bdec:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdee:	d001      	beq.n	800bdf4 <create_name+0x8c>
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	e044      	b.n	800be7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bdf4:	2308      	movs	r3, #8
 800bdf6:	613b      	str	r3, [r7, #16]
 800bdf8:	230b      	movs	r3, #11
 800bdfa:	617b      	str	r3, [r7, #20]
			continue;
 800bdfc:	e022      	b.n	800be44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bdfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be02:	2b00      	cmp	r3, #0
 800be04:	da04      	bge.n	800be10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be06:	7efb      	ldrb	r3, [r7, #27]
 800be08:	3b80      	subs	r3, #128	@ 0x80
 800be0a:	4a1f      	ldr	r2, [pc, #124]	@ (800be88 <create_name+0x120>)
 800be0c:	5cd3      	ldrb	r3, [r2, r3]
 800be0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be10:	7efb      	ldrb	r3, [r7, #27]
 800be12:	4619      	mov	r1, r3
 800be14:	481d      	ldr	r0, [pc, #116]	@ (800be8c <create_name+0x124>)
 800be16:	f7fe ff30 	bl	800ac7a <chk_chr>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <create_name+0xbc>
 800be20:	2306      	movs	r3, #6
 800be22:	e02c      	b.n	800be7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be24:	7efb      	ldrb	r3, [r7, #27]
 800be26:	2b60      	cmp	r3, #96	@ 0x60
 800be28:	d905      	bls.n	800be36 <create_name+0xce>
 800be2a:	7efb      	ldrb	r3, [r7, #27]
 800be2c:	2b7a      	cmp	r3, #122	@ 0x7a
 800be2e:	d802      	bhi.n	800be36 <create_name+0xce>
 800be30:	7efb      	ldrb	r3, [r7, #27]
 800be32:	3b20      	subs	r3, #32
 800be34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	613a      	str	r2, [r7, #16]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	4413      	add	r3, r2
 800be40:	7efa      	ldrb	r2, [r7, #27]
 800be42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be44:	e7a6      	b.n	800bd94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	441a      	add	r2, r3
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <create_name+0xf4>
 800be58:	2306      	movs	r3, #6
 800be5a:	e010      	b.n	800be7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2be5      	cmp	r3, #229	@ 0xe5
 800be62:	d102      	bne.n	800be6a <create_name+0x102>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2205      	movs	r2, #5
 800be68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be6a:	7efb      	ldrb	r3, [r7, #27]
 800be6c:	2b20      	cmp	r3, #32
 800be6e:	d801      	bhi.n	800be74 <create_name+0x10c>
 800be70:	2204      	movs	r2, #4
 800be72:	e000      	b.n	800be76 <create_name+0x10e>
 800be74:	2200      	movs	r2, #0
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	330b      	adds	r3, #11
 800be7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3720      	adds	r7, #32
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	08010290 	.word	0x08010290
 800be8c:	0801020c 	.word	0x0801020c

0800be90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bea4:	e002      	b.n	800beac <follow_path+0x1c>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b2f      	cmp	r3, #47	@ 0x2f
 800beb2:	d0f8      	beq.n	800bea6 <follow_path+0x16>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b5c      	cmp	r3, #92	@ 0x5c
 800beba:	d0f4      	beq.n	800bea6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	2200      	movs	r2, #0
 800bec0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b1f      	cmp	r3, #31
 800bec8:	d80a      	bhi.n	800bee0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2280      	movs	r2, #128	@ 0x80
 800bece:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bed2:	2100      	movs	r1, #0
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff fc7a 	bl	800b7ce <dir_sdi>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]
 800bede:	e048      	b.n	800bf72 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bee0:	463b      	mov	r3, r7
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff ff3f 	bl	800bd68 <create_name>
 800beea:	4603      	mov	r3, r0
 800beec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d139      	bne.n	800bf68 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff fe4f 	bl	800bb98 <dir_find>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bf04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d12c      	bne.n	800bf6c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf12:	7afb      	ldrb	r3, [r7, #11]
 800bf14:	f003 0304 	and.w	r3, r3, #4
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d127      	bne.n	800bf6c <follow_path+0xdc>
 800bf1c:	2305      	movs	r3, #5
 800bf1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf20:	e024      	b.n	800bf6c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf22:	7afb      	ldrb	r3, [r7, #11]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d121      	bne.n	800bf70 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	799b      	ldrb	r3, [r3, #6]
 800bf30:	f003 0310 	and.w	r3, r3, #16
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf38:	2305      	movs	r3, #5
 800bf3a:	75fb      	strb	r3, [r7, #23]
 800bf3c:	e019      	b.n	800bf72 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	8992      	ldrh	r2, [r2, #12]
 800bf4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf50:	fb00 f202 	mul.w	r2, r0, r2
 800bf54:	1a9b      	subs	r3, r3, r2
 800bf56:	440b      	add	r3, r1
 800bf58:	4619      	mov	r1, r3
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff fddd 	bl	800bb1a <ld_clust>
 800bf60:	4602      	mov	r2, r0
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf66:	e7bb      	b.n	800bee0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf68:	bf00      	nop
 800bf6a:	e002      	b.n	800bf72 <follow_path+0xe2>
				break;
 800bf6c:	bf00      	nop
 800bf6e:	e000      	b.n	800bf72 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf70:	bf00      	nop
			}
		}
	}

	return res;
 800bf72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf84:	f04f 33ff 	mov.w	r3, #4294967295
 800bf88:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d031      	beq.n	800bff6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e002      	b.n	800bfa0 <get_ldnumber+0x24>
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	617b      	str	r3, [r7, #20]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	d903      	bls.n	800bfb0 <get_ldnumber+0x34>
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b3a      	cmp	r3, #58	@ 0x3a
 800bfae:	d1f4      	bne.n	800bf9a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bfb6:	d11c      	bne.n	800bff2 <get_ldnumber+0x76>
			tp = *path;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	60fa      	str	r2, [r7, #12]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	3b30      	subs	r3, #48	@ 0x30
 800bfc8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2b09      	cmp	r3, #9
 800bfce:	d80e      	bhi.n	800bfee <get_ldnumber+0x72>
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d10a      	bne.n	800bfee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d107      	bne.n	800bfee <get_ldnumber+0x72>
					vol = (int)i;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	e002      	b.n	800bff8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bff6:	693b      	ldr	r3, [r7, #16]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	371c      	adds	r7, #28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	70da      	strb	r2, [r3, #3]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f04f 32ff 	mov.w	r2, #4294967295
 800c01a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7fe fff6 	bl	800b010 <move_window>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <check_fs+0x2a>
 800c02a:	2304      	movs	r3, #4
 800c02c:	e038      	b.n	800c0a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3334      	adds	r3, #52	@ 0x34
 800c032:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fd3a 	bl	800aab0 <ld_word>
 800c03c:	4603      	mov	r3, r0
 800c03e:	461a      	mov	r2, r3
 800c040:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c044:	429a      	cmp	r2, r3
 800c046:	d001      	beq.n	800c04c <check_fs+0x48>
 800c048:	2303      	movs	r3, #3
 800c04a:	e029      	b.n	800c0a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c052:	2be9      	cmp	r3, #233	@ 0xe9
 800c054:	d009      	beq.n	800c06a <check_fs+0x66>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c05c:	2beb      	cmp	r3, #235	@ 0xeb
 800c05e:	d11e      	bne.n	800c09e <check_fs+0x9a>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c066:	2b90      	cmp	r3, #144	@ 0x90
 800c068:	d119      	bne.n	800c09e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3334      	adds	r3, #52	@ 0x34
 800c06e:	3336      	adds	r3, #54	@ 0x36
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fd35 	bl	800aae0 <ld_dword>
 800c076:	4603      	mov	r3, r0
 800c078:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c07c:	4a0a      	ldr	r2, [pc, #40]	@ (800c0a8 <check_fs+0xa4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d101      	bne.n	800c086 <check_fs+0x82>
 800c082:	2300      	movs	r3, #0
 800c084:	e00c      	b.n	800c0a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3334      	adds	r3, #52	@ 0x34
 800c08a:	3352      	adds	r3, #82	@ 0x52
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe fd27 	bl	800aae0 <ld_dword>
 800c092:	4603      	mov	r3, r0
 800c094:	4a05      	ldr	r2, [pc, #20]	@ (800c0ac <check_fs+0xa8>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d101      	bne.n	800c09e <check_fs+0x9a>
 800c09a:	2300      	movs	r3, #0
 800c09c:	e000      	b.n	800c0a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c09e:	2302      	movs	r3, #2
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	00544146 	.word	0x00544146
 800c0ac:	33544146 	.word	0x33544146

0800c0b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b096      	sub	sp, #88	@ 0x58
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff ff59 	bl	800bf7c <get_ldnumber>
 800c0ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	da01      	bge.n	800c0d6 <find_volume+0x26>
 800c0d2:	230b      	movs	r3, #11
 800c0d4:	e262      	b.n	800c59c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0d6:	4a9f      	ldr	r2, [pc, #636]	@ (800c354 <find_volume+0x2a4>)
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0de:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <find_volume+0x3a>
 800c0e6:	230c      	movs	r3, #12
 800c0e8:	e258      	b.n	800c59c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	f023 0301 	bic.w	r3, r3, #1
 800c0f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d01a      	beq.n	800c136 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c102:	785b      	ldrb	r3, [r3, #1]
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe fc35 	bl	800a974 <disk_status>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10c      	bne.n	800c136 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c11c:	79fb      	ldrb	r3, [r7, #7]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d007      	beq.n	800c132 <find_volume+0x82>
 800c122:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c126:	f003 0304 	and.w	r3, r3, #4
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c12e:	230a      	movs	r3, #10
 800c130:	e234      	b.n	800c59c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c132:	2300      	movs	r3, #0
 800c134:	e232      	b.n	800c59c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	785b      	ldrb	r3, [r3, #1]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fe fc2d 	bl	800a9a8 <disk_initialize>
 800c14e:	4603      	mov	r3, r0
 800c150:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c154:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c160:	2303      	movs	r3, #3
 800c162:	e21b      	b.n	800c59c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d007      	beq.n	800c17a <find_volume+0xca>
 800c16a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c16e:	f003 0304 	and.w	r3, r3, #4
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c176:	230a      	movs	r3, #10
 800c178:	e210      	b.n	800c59c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17c:	7858      	ldrb	r0, [r3, #1]
 800c17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c180:	330c      	adds	r3, #12
 800c182:	461a      	mov	r2, r3
 800c184:	2102      	movs	r1, #2
 800c186:	f7fe fc75 	bl	800aa74 <disk_ioctl>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d001      	beq.n	800c194 <find_volume+0xe4>
 800c190:	2301      	movs	r3, #1
 800c192:	e203      	b.n	800c59c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c196:	899b      	ldrh	r3, [r3, #12]
 800c198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c19c:	d80d      	bhi.n	800c1ba <find_volume+0x10a>
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	899b      	ldrh	r3, [r3, #12]
 800c1a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a6:	d308      	bcc.n	800c1ba <find_volume+0x10a>
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1aa:	899b      	ldrh	r3, [r3, #12]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b0:	899b      	ldrh	r3, [r3, #12]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d001      	beq.n	800c1be <find_volume+0x10e>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e1ee      	b.n	800c59c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c1c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1c6:	f7ff ff1d 	bl	800c004 <check_fs>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c1d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d149      	bne.n	800c26c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1d8:	2300      	movs	r3, #0
 800c1da:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1dc:	e01e      	b.n	800c21c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c1e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1e6:	011b      	lsls	r3, r3, #4
 800c1e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c1ec:	4413      	add	r3, r2
 800c1ee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d006      	beq.n	800c208 <find_volume+0x158>
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fc:	3308      	adds	r3, #8
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fc6e 	bl	800aae0 <ld_dword>
 800c204:	4602      	mov	r2, r0
 800c206:	e000      	b.n	800c20a <find_volume+0x15a>
 800c208:	2200      	movs	r2, #0
 800c20a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	3358      	adds	r3, #88	@ 0x58
 800c210:	443b      	add	r3, r7
 800c212:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c218:	3301      	adds	r3, #1
 800c21a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d9dd      	bls.n	800c1de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c222:	2300      	movs	r3, #0
 800c224:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <find_volume+0x182>
 800c22c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c22e:	3b01      	subs	r3, #1
 800c230:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	3358      	adds	r3, #88	@ 0x58
 800c238:	443b      	add	r3, r7
 800c23a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c23e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c242:	2b00      	cmp	r3, #0
 800c244:	d005      	beq.n	800c252 <find_volume+0x1a2>
 800c246:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c248:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c24a:	f7ff fedb 	bl	800c004 <check_fs>
 800c24e:	4603      	mov	r3, r0
 800c250:	e000      	b.n	800c254 <find_volume+0x1a4>
 800c252:	2303      	movs	r3, #3
 800c254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c258:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d905      	bls.n	800c26c <find_volume+0x1bc>
 800c260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c262:	3301      	adds	r3, #1
 800c264:	643b      	str	r3, [r7, #64]	@ 0x40
 800c266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c268:	2b03      	cmp	r3, #3
 800c26a:	d9e2      	bls.n	800c232 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c26c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c270:	2b04      	cmp	r3, #4
 800c272:	d101      	bne.n	800c278 <find_volume+0x1c8>
 800c274:	2301      	movs	r3, #1
 800c276:	e191      	b.n	800c59c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c278:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d901      	bls.n	800c284 <find_volume+0x1d4>
 800c280:	230d      	movs	r3, #13
 800c282:	e18b      	b.n	800c59c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c286:	3334      	adds	r3, #52	@ 0x34
 800c288:	330b      	adds	r3, #11
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe fc10 	bl	800aab0 <ld_word>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	899b      	ldrh	r3, [r3, #12]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d001      	beq.n	800c2a0 <find_volume+0x1f0>
 800c29c:	230d      	movs	r3, #13
 800c29e:	e17d      	b.n	800c59c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a2:	3334      	adds	r3, #52	@ 0x34
 800c2a4:	3316      	adds	r3, #22
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe fc02 	bl	800aab0 <ld_word>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c2b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d106      	bne.n	800c2c4 <find_volume+0x214>
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b8:	3334      	adds	r3, #52	@ 0x34
 800c2ba:	3324      	adds	r3, #36	@ 0x24
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe fc0f 	bl	800aae0 <ld_dword>
 800c2c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2c8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2cc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d6:	789b      	ldrb	r3, [r3, #2]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d005      	beq.n	800c2e8 <find_volume+0x238>
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2de:	789b      	ldrb	r3, [r3, #2]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d001      	beq.n	800c2e8 <find_volume+0x238>
 800c2e4:	230d      	movs	r3, #13
 800c2e6:	e159      	b.n	800c59c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ea:	789b      	ldrb	r3, [r3, #2]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2f0:	fb02 f303 	mul.w	r3, r2, r3
 800c2f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c300:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c304:	895b      	ldrh	r3, [r3, #10]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d008      	beq.n	800c31c <find_volume+0x26c>
 800c30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30c:	895b      	ldrh	r3, [r3, #10]
 800c30e:	461a      	mov	r2, r3
 800c310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c312:	895b      	ldrh	r3, [r3, #10]
 800c314:	3b01      	subs	r3, #1
 800c316:	4013      	ands	r3, r2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <find_volume+0x270>
 800c31c:	230d      	movs	r3, #13
 800c31e:	e13d      	b.n	800c59c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c322:	3334      	adds	r3, #52	@ 0x34
 800c324:	3311      	adds	r3, #17
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe fbc2 	bl	800aab0 <ld_word>
 800c32c:	4603      	mov	r3, r0
 800c32e:	461a      	mov	r2, r3
 800c330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c332:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	891b      	ldrh	r3, [r3, #8]
 800c338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c33a:	8992      	ldrh	r2, [r2, #12]
 800c33c:	0952      	lsrs	r2, r2, #5
 800c33e:	b292      	uxth	r2, r2
 800c340:	fbb3 f1f2 	udiv	r1, r3, r2
 800c344:	fb01 f202 	mul.w	r2, r1, r2
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d003      	beq.n	800c358 <find_volume+0x2a8>
 800c350:	230d      	movs	r3, #13
 800c352:	e123      	b.n	800c59c <find_volume+0x4ec>
 800c354:	20005680 	.word	0x20005680

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35a:	3334      	adds	r3, #52	@ 0x34
 800c35c:	3313      	adds	r3, #19
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fba6 	bl	800aab0 <ld_word>
 800c364:	4603      	mov	r3, r0
 800c366:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <find_volume+0x2cc>
 800c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c370:	3334      	adds	r3, #52	@ 0x34
 800c372:	3320      	adds	r3, #32
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe fbb3 	bl	800aae0 <ld_dword>
 800c37a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37e:	3334      	adds	r3, #52	@ 0x34
 800c380:	330e      	adds	r3, #14
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe fb94 	bl	800aab0 <ld_word>
 800c388:	4603      	mov	r3, r0
 800c38a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c38c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <find_volume+0x2e6>
 800c392:	230d      	movs	r3, #13
 800c394:	e102      	b.n	800c59c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c396:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c39a:	4413      	add	r3, r2
 800c39c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c39e:	8911      	ldrh	r1, [r2, #8]
 800c3a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3a2:	8992      	ldrh	r2, [r2, #12]
 800c3a4:	0952      	lsrs	r2, r2, #5
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	fbb1 f2f2 	udiv	r2, r1, r2
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	4413      	add	r3, r2
 800c3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c3b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d201      	bcs.n	800c3be <find_volume+0x30e>
 800c3ba:	230d      	movs	r3, #13
 800c3bc:	e0ee      	b.n	800c59c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c3be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3c6:	8952      	ldrh	r2, [r2, #10]
 800c3c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3cc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d101      	bne.n	800c3d8 <find_volume+0x328>
 800c3d4:	230d      	movs	r3, #13
 800c3d6:	e0e1      	b.n	800c59c <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d802      	bhi.n	800c3ee <find_volume+0x33e>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d802      	bhi.n	800c3fe <find_volume+0x34e>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c400:	1c9a      	adds	r2, r3, #2
 800c402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c404:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c40a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c40c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c40e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c410:	441a      	add	r2, r3
 800c412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c414:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c416:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	441a      	add	r2, r3
 800c41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41e:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c420:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c424:	2b03      	cmp	r3, #3
 800c426:	d11e      	bne.n	800c466 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42a:	3334      	adds	r3, #52	@ 0x34
 800c42c:	332a      	adds	r3, #42	@ 0x2a
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe fb3e 	bl	800aab0 <ld_word>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <find_volume+0x38e>
 800c43a:	230d      	movs	r3, #13
 800c43c:	e0ae      	b.n	800c59c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c440:	891b      	ldrh	r3, [r3, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <find_volume+0x39a>
 800c446:	230d      	movs	r3, #13
 800c448:	e0a8      	b.n	800c59c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44c:	3334      	adds	r3, #52	@ 0x34
 800c44e:	332c      	adds	r3, #44	@ 0x2c
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe fb45 	bl	800aae0 <ld_dword>
 800c456:	4602      	mov	r2, r0
 800c458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	647b      	str	r3, [r7, #68]	@ 0x44
 800c464:	e01f      	b.n	800c4a6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	891b      	ldrh	r3, [r3, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <find_volume+0x3c2>
 800c46e:	230d      	movs	r3, #13
 800c470:	e094      	b.n	800c59c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c478:	441a      	add	r2, r3
 800c47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c47e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c482:	2b02      	cmp	r3, #2
 800c484:	d103      	bne.n	800c48e <find_volume+0x3de>
 800c486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c488:	699b      	ldr	r3, [r3, #24]
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	e00a      	b.n	800c4a4 <find_volume+0x3f4>
 800c48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c490:	699a      	ldr	r2, [r3, #24]
 800c492:	4613      	mov	r3, r2
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	4413      	add	r3, r2
 800c498:	085a      	lsrs	r2, r3, #1
 800c49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c4a4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a8:	69da      	ldr	r2, [r3, #28]
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	899b      	ldrh	r3, [r3, #12]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c4b8:	8989      	ldrh	r1, [r1, #12]
 800c4ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d201      	bcs.n	800c4c6 <find_volume+0x416>
 800c4c2:	230d      	movs	r3, #13
 800c4c4:	e06a      	b.n	800c59c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4cc:	615a      	str	r2, [r3, #20]
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d0:	695a      	ldr	r2, [r3, #20]
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d8:	2280      	movs	r2, #128	@ 0x80
 800c4da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d149      	bne.n	800c578 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	3334      	adds	r3, #52	@ 0x34
 800c4e8:	3330      	adds	r3, #48	@ 0x30
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fae0 	bl	800aab0 <ld_word>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d140      	bne.n	800c578 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c4f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4fe:	f7fe fd87 	bl	800b010 <move_window>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d137      	bne.n	800c578 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50a:	2200      	movs	r2, #0
 800c50c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c510:	3334      	adds	r3, #52	@ 0x34
 800c512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe faca 	bl	800aab0 <ld_word>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c524:	429a      	cmp	r2, r3
 800c526:	d127      	bne.n	800c578 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52a:	3334      	adds	r3, #52	@ 0x34
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fad7 	bl	800aae0 <ld_dword>
 800c532:	4603      	mov	r3, r0
 800c534:	4a1b      	ldr	r2, [pc, #108]	@ (800c5a4 <find_volume+0x4f4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d11e      	bne.n	800c578 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53c:	3334      	adds	r3, #52	@ 0x34
 800c53e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c542:	4618      	mov	r0, r3
 800c544:	f7fe facc 	bl	800aae0 <ld_dword>
 800c548:	4603      	mov	r3, r0
 800c54a:	4a17      	ldr	r2, [pc, #92]	@ (800c5a8 <find_volume+0x4f8>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d113      	bne.n	800c578 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c552:	3334      	adds	r3, #52	@ 0x34
 800c554:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe fac1 	bl	800aae0 <ld_dword>
 800c55e:	4602      	mov	r2, r0
 800c560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c562:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c566:	3334      	adds	r3, #52	@ 0x34
 800c568:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fe fab7 	bl	800aae0 <ld_dword>
 800c572:	4602      	mov	r2, r0
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c57e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c580:	4b0a      	ldr	r3, [pc, #40]	@ (800c5ac <find_volume+0x4fc>)
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	3301      	adds	r3, #1
 800c586:	b29a      	uxth	r2, r3
 800c588:	4b08      	ldr	r3, [pc, #32]	@ (800c5ac <find_volume+0x4fc>)
 800c58a:	801a      	strh	r2, [r3, #0]
 800c58c:	4b07      	ldr	r3, [pc, #28]	@ (800c5ac <find_volume+0x4fc>)
 800c58e:	881a      	ldrh	r2, [r3, #0]
 800c590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c592:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c594:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c596:	f7fe fcd3 	bl	800af40 <clear_lock>
#endif
	return FR_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3758      	adds	r7, #88	@ 0x58
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	41615252 	.word	0x41615252
 800c5a8:	61417272 	.word	0x61417272
 800c5ac:	20005684 	.word	0x20005684

0800c5b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c5ba:	2309      	movs	r3, #9
 800c5bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d01c      	beq.n	800c5fe <validate+0x4e>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d018      	beq.n	800c5fe <validate+0x4e>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d013      	beq.n	800c5fe <validate+0x4e>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	889a      	ldrh	r2, [r3, #4]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	88db      	ldrh	r3, [r3, #6]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d10c      	bne.n	800c5fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	785b      	ldrb	r3, [r3, #1]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe f9c2 	bl	800a974 <disk_status>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f003 0301 	and.w	r3, r3, #1
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <validate+0x4e>
			res = FR_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <validate+0x5a>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	e000      	b.n	800c60c <validate+0x5c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	6013      	str	r3, [r2, #0]
	return res;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c62e:	f107 0310 	add.w	r3, r7, #16
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fca2 	bl	800bf7c <get_ldnumber>
 800c638:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	da01      	bge.n	800c644 <f_mount+0x28>
 800c640:	230b      	movs	r3, #11
 800c642:	e02b      	b.n	800c69c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c644:	4a17      	ldr	r2, [pc, #92]	@ (800c6a4 <f_mount+0x88>)
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c64c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c654:	69b8      	ldr	r0, [r7, #24]
 800c656:	f7fe fc73 	bl	800af40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	490d      	ldr	r1, [pc, #52]	@ (800c6a4 <f_mount+0x88>)
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <f_mount+0x66>
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d001      	beq.n	800c686 <f_mount+0x6a>
 800c682:	2300      	movs	r3, #0
 800c684:	e00a      	b.n	800c69c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c686:	f107 010c 	add.w	r1, r7, #12
 800c68a:	f107 0308 	add.w	r3, r7, #8
 800c68e:	2200      	movs	r2, #0
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff fd0d 	bl	800c0b0 <find_volume>
 800c696:	4603      	mov	r3, r0
 800c698:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20005680 	.word	0x20005680

0800c6a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b098      	sub	sp, #96	@ 0x60
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <f_open+0x18>
 800c6bc:	2309      	movs	r3, #9
 800c6be:	e1b7      	b.n	800ca30 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c6c8:	79fa      	ldrb	r2, [r7, #7]
 800c6ca:	f107 0110 	add.w	r1, r7, #16
 800c6ce:	f107 0308 	add.w	r3, r7, #8
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff fcec 	bl	800c0b0 <find_volume>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c6de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f040 819b 	bne.w	800ca1e <f_open+0x376>
		dj.obj.fs = fs;
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	f107 0314 	add.w	r3, r7, #20
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff fbcb 	bl	800be90 <follow_path>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c700:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c704:	2b00      	cmp	r3, #0
 800c706:	d118      	bne.n	800c73a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c708:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	da03      	bge.n	800c71a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c712:	2306      	movs	r3, #6
 800c714:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c718:	e00f      	b.n	800c73a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	bf8c      	ite	hi
 800c720:	2301      	movhi	r3, #1
 800c722:	2300      	movls	r3, #0
 800c724:	b2db      	uxtb	r3, r3
 800c726:	461a      	mov	r2, r3
 800c728:	f107 0314 	add.w	r3, r7, #20
 800c72c:	4611      	mov	r1, r2
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fe fabe 	bl	800acb0 <chk_lock>
 800c734:	4603      	mov	r3, r0
 800c736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	f003 031c 	and.w	r3, r3, #28
 800c740:	2b00      	cmp	r3, #0
 800c742:	d07f      	beq.n	800c844 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d017      	beq.n	800c77c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c74c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c750:	2b04      	cmp	r3, #4
 800c752:	d10e      	bne.n	800c772 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c754:	f7fe fb08 	bl	800ad68 <enq_lock>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d006      	beq.n	800c76c <f_open+0xc4>
 800c75e:	f107 0314 	add.w	r3, r7, #20
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fa6d 	bl	800bc42 <dir_register>
 800c768:	4603      	mov	r3, r0
 800c76a:	e000      	b.n	800c76e <f_open+0xc6>
 800c76c:	2312      	movs	r3, #18
 800c76e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	f043 0308 	orr.w	r3, r3, #8
 800c778:	71fb      	strb	r3, [r7, #7]
 800c77a:	e010      	b.n	800c79e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c77c:	7ebb      	ldrb	r3, [r7, #26]
 800c77e:	f003 0311 	and.w	r3, r3, #17
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <f_open+0xe6>
					res = FR_DENIED;
 800c786:	2307      	movs	r3, #7
 800c788:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c78c:	e007      	b.n	800c79e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c78e:	79fb      	ldrb	r3, [r7, #7]
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <f_open+0xf6>
 800c798:	2308      	movs	r3, #8
 800c79a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c79e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d168      	bne.n	800c878 <f_open+0x1d0>
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	f003 0308 	and.w	r3, r3, #8
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d063      	beq.n	800c878 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c7b0:	f7fd ff74 	bl	800a69c <get_fattime>
 800c7b4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b8:	330e      	adds	r3, #14
 800c7ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe f9cd 	bl	800ab5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c4:	3316      	adds	r3, #22
 800c7c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe f9c7 	bl	800ab5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d0:	330b      	adds	r3, #11
 800c7d2:	2220      	movs	r2, #32
 800c7d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7da:	4611      	mov	r1, r2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff f99c 	bl	800bb1a <ld_clust>
 800c7e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff f9b4 	bl	800bb58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f2:	331c      	adds	r3, #28
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f9b0 	bl	800ab5c <st_dword>
					fs->wflag = 1;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2201      	movs	r2, #1
 800c800:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d037      	beq.n	800c878 <f_open+0x1d0>
						dw = fs->winsect;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c80c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c80e:	f107 0314 	add.w	r3, r7, #20
 800c812:	2200      	movs	r2, #0
 800c814:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe fea4 	bl	800b564 <remove_chain>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c822:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c826:	2b00      	cmp	r3, #0
 800c828:	d126      	bne.n	800c878 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fbee 	bl	800b010 <move_window>
 800c834:	4603      	mov	r3, r0
 800c836:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c83e:	3a01      	subs	r2, #1
 800c840:	611a      	str	r2, [r3, #16]
 800c842:	e019      	b.n	800c878 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d115      	bne.n	800c878 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c84c:	7ebb      	ldrb	r3, [r7, #26]
 800c84e:	f003 0310 	and.w	r3, r3, #16
 800c852:	2b00      	cmp	r3, #0
 800c854:	d003      	beq.n	800c85e <f_open+0x1b6>
					res = FR_NO_FILE;
 800c856:	2304      	movs	r3, #4
 800c858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c85c:	e00c      	b.n	800c878 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	d007      	beq.n	800c878 <f_open+0x1d0>
 800c868:	7ebb      	ldrb	r3, [r7, #26]
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <f_open+0x1d0>
						res = FR_DENIED;
 800c872:	2307      	movs	r3, #7
 800c874:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c878:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d126      	bne.n	800c8ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	f003 0308 	and.w	r3, r3, #8
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c88a:	79fb      	ldrb	r3, [r7, #7]
 800c88c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c890:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c89a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	bf8c      	ite	hi
 800c8a6:	2301      	movhi	r3, #1
 800c8a8:	2300      	movls	r3, #0
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	f107 0314 	add.w	r3, r7, #20
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe fa79 	bl	800adac <inc_lock>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <f_open+0x226>
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f040 80a3 	bne.w	800ca1e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff f91b 	bl	800bb1a <ld_clust>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ec:	331c      	adds	r3, #28
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fe f8f6 	bl	800aae0 <ld_dword>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	88da      	ldrh	r2, [r3, #6]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	79fa      	ldrb	r2, [r7, #7]
 800c912:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3330      	adds	r3, #48	@ 0x30
 800c92a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c92e:	2100      	movs	r1, #0
 800c930:	4618      	mov	r0, r3
 800c932:	f7fe f960 	bl	800abf6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c936:	79fb      	ldrb	r3, [r7, #7]
 800c938:	f003 0320 	and.w	r3, r3, #32
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d06e      	beq.n	800ca1e <f_open+0x376>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d06a      	beq.n	800ca1e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	68da      	ldr	r2, [r3, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	895b      	ldrh	r3, [r3, #10]
 800c954:	461a      	mov	r2, r3
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	899b      	ldrh	r3, [r3, #12]
 800c95a:	fb02 f303 	mul.w	r3, r2, r3
 800c95e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c96c:	e016      	b.n	800c99c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fc09 	bl	800b18a <get_fat>
 800c978:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c97a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d802      	bhi.n	800c986 <f_open+0x2de>
 800c980:	2302      	movs	r3, #2
 800c982:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98c:	d102      	bne.n	800c994 <f_open+0x2ec>
 800c98e:	2301      	movs	r3, #1
 800c990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c994:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c99c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d103      	bne.n	800c9ac <f_open+0x304>
 800c9a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d8e0      	bhi.n	800c96e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d131      	bne.n	800ca1e <f_open+0x376>
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	899b      	ldrh	r3, [r3, #12]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9c6:	fb01 f202 	mul.w	r2, r1, r2
 800c9ca:	1a9b      	subs	r3, r3, r2
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d026      	beq.n	800ca1e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe fbb9 	bl	800b14c <clust2sect>
 800c9da:	6478      	str	r0, [r7, #68]	@ 0x44
 800c9dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d103      	bne.n	800c9ea <f_open+0x342>
						res = FR_INT_ERR;
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c9e8:	e019      	b.n	800ca1e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	899b      	ldrh	r3, [r3, #12]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9f8:	441a      	add	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	7858      	ldrb	r0, [r3, #1]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6a1a      	ldr	r2, [r3, #32]
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	f7fd fff1 	bl	800a9f4 <disk_read>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <f_open+0x376>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ca1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <f_open+0x384>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3760      	adds	r7, #96	@ 0x60
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08e      	sub	sp, #56	@ 0x38
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f107 0214 	add.w	r2, r7, #20
 800ca56:	4611      	mov	r1, r2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff fda9 	bl	800c5b0 <validate>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d107      	bne.n	800ca7c <f_read+0x44>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	7d5b      	ldrb	r3, [r3, #21]
 800ca70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ca74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <f_read+0x4a>
 800ca7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca80:	e135      	b.n	800ccee <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7d1b      	ldrb	r3, [r3, #20]
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <f_read+0x5a>
 800ca8e:	2307      	movs	r3, #7
 800ca90:	e12d      	b.n	800ccee <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	f240 811e 	bls.w	800cce4 <f_read+0x2ac>
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800caac:	e11a      	b.n	800cce4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	8992      	ldrh	r2, [r2, #12]
 800cab6:	fbb3 f1f2 	udiv	r1, r3, r2
 800caba:	fb01 f202 	mul.w	r2, r1, r2
 800cabe:	1a9b      	subs	r3, r3, r2
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f040 80d5 	bne.w	800cc70 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	8992      	ldrh	r2, [r2, #12]
 800cace:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	8952      	ldrh	r2, [r2, #10]
 800cad6:	3a01      	subs	r2, #1
 800cad8:	4013      	ands	r3, r2
 800cada:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d12f      	bne.n	800cb42 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	633b      	str	r3, [r7, #48]	@ 0x30
 800caf0:	e013      	b.n	800cb1a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d007      	beq.n	800cb0a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	4619      	mov	r1, r3
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f7fe fe2c 	bl	800b75e <clmt_clust>
 800cb06:	6338      	str	r0, [r7, #48]	@ 0x30
 800cb08:	e007      	b.n	800cb1a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	69db      	ldr	r3, [r3, #28]
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f7fe fb39 	bl	800b18a <get_fat>
 800cb18:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d804      	bhi.n	800cb2a <f_read+0xf2>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2202      	movs	r2, #2
 800cb24:	755a      	strb	r2, [r3, #21]
 800cb26:	2302      	movs	r3, #2
 800cb28:	e0e1      	b.n	800ccee <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb30:	d104      	bne.n	800cb3c <f_read+0x104>
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2201      	movs	r2, #1
 800cb36:	755a      	strb	r2, [r3, #21]
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e0d8      	b.n	800ccee <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	69db      	ldr	r3, [r3, #28]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	f7fe fafe 	bl	800b14c <clust2sect>
 800cb50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d104      	bne.n	800cb62 <f_read+0x12a>
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	755a      	strb	r2, [r3, #21]
 800cb5e:	2302      	movs	r3, #2
 800cb60:	e0c5      	b.n	800ccee <f_read+0x2b6>
			sect += csect;
 800cb62:	69ba      	ldr	r2, [r7, #24]
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	4413      	add	r3, r2
 800cb68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	899b      	ldrh	r3, [r3, #12]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb76:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d041      	beq.n	800cc02 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb7e:	69fa      	ldr	r2, [r7, #28]
 800cb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb82:	4413      	add	r3, r2
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	8952      	ldrh	r2, [r2, #10]
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d905      	bls.n	800cb98 <f_read+0x160>
					cc = fs->csize - csect;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	895b      	ldrh	r3, [r3, #10]
 800cb90:	461a      	mov	r2, r3
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	7858      	ldrb	r0, [r3, #1]
 800cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cba2:	f7fd ff27 	bl	800a9f4 <disk_read>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d004      	beq.n	800cbb6 <f_read+0x17e>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	755a      	strb	r2, [r3, #21]
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e09b      	b.n	800ccee <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	7d1b      	ldrb	r3, [r3, #20]
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	da18      	bge.n	800cbf2 <f_read+0x1ba>
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6a1a      	ldr	r2, [r3, #32]
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d911      	bls.n	800cbf2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a1a      	ldr	r2, [r3, #32]
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	8992      	ldrh	r2, [r2, #12]
 800cbda:	fb02 f303 	mul.w	r3, r2, r3
 800cbde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbe0:	18d0      	adds	r0, r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	899b      	ldrh	r3, [r3, #12]
 800cbec:	461a      	mov	r2, r3
 800cbee:	f7fd ffe1 	bl	800abb4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	899b      	ldrh	r3, [r3, #12]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	fb02 f303 	mul.w	r3, r2, r3
 800cbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cc00:	e05c      	b.n	800ccbc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d02e      	beq.n	800cc6a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	7d1b      	ldrb	r3, [r3, #20]
 800cc10:	b25b      	sxtb	r3, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da18      	bge.n	800cc48 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	7858      	ldrb	r0, [r3, #1]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6a1a      	ldr	r2, [r3, #32]
 800cc24:	2301      	movs	r3, #1
 800cc26:	f7fd ff05 	bl	800aa34 <disk_write>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <f_read+0x202>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2201      	movs	r2, #1
 800cc34:	755a      	strb	r2, [r3, #21]
 800cc36:	2301      	movs	r3, #1
 800cc38:	e059      	b.n	800ccee <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	7d1b      	ldrb	r3, [r3, #20]
 800cc3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	7858      	ldrb	r0, [r3, #1]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc52:	2301      	movs	r3, #1
 800cc54:	69ba      	ldr	r2, [r7, #24]
 800cc56:	f7fd fecd 	bl	800a9f4 <disk_read>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d004      	beq.n	800cc6a <f_read+0x232>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2201      	movs	r2, #1
 800cc64:	755a      	strb	r2, [r3, #21]
 800cc66:	2301      	movs	r3, #1
 800cc68:	e041      	b.n	800ccee <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	69ba      	ldr	r2, [r7, #24]
 800cc6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	899b      	ldrh	r3, [r3, #12]
 800cc74:	4618      	mov	r0, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	8992      	ldrh	r2, [r2, #12]
 800cc7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc82:	fb01 f202 	mul.w	r2, r1, r2
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	1ac3      	subs	r3, r0, r3
 800cc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cc8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d901      	bls.n	800cc98 <f_read+0x260>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	8992      	ldrh	r2, [r2, #12]
 800cca6:	fbb3 f0f2 	udiv	r0, r3, r2
 800ccaa:	fb00 f202 	mul.w	r2, r0, r2
 800ccae:	1a9b      	subs	r3, r3, r2
 800ccb0:	440b      	add	r3, r1
 800ccb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ccb8:	f7fd ff7c 	bl	800abb4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ccbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc0:	4413      	add	r3, r2
 800ccc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccca:	441a      	add	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	619a      	str	r2, [r3, #24]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	441a      	add	r2, r3
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f47f aee1 	bne.w	800caae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3738      	adds	r7, #56	@ 0x38
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b08c      	sub	sp, #48	@ 0x30
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
 800cd02:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f107 0210 	add.w	r2, r7, #16
 800cd14:	4611      	mov	r1, r2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff fc4a 	bl	800c5b0 <validate>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d107      	bne.n	800cd3a <f_write+0x44>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	7d5b      	ldrb	r3, [r3, #21]
 800cd2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cd32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <f_write+0x4a>
 800cd3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd3e:	e16a      	b.n	800d016 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	7d1b      	ldrb	r3, [r3, #20]
 800cd44:	f003 0302 	and.w	r3, r3, #2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <f_write+0x5a>
 800cd4c:	2307      	movs	r3, #7
 800cd4e:	e162      	b.n	800d016 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	699a      	ldr	r2, [r3, #24]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	441a      	add	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	f080 814c 	bcs.w	800cffa <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	43db      	mvns	r3, r3
 800cd68:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cd6a:	e146      	b.n	800cffa <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	693a      	ldr	r2, [r7, #16]
 800cd72:	8992      	ldrh	r2, [r2, #12]
 800cd74:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd78:	fb01 f202 	mul.w	r2, r1, r2
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f040 80f1 	bne.w	800cf66 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	8992      	ldrh	r2, [r2, #12]
 800cd8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	8952      	ldrh	r2, [r2, #10]
 800cd94:	3a01      	subs	r2, #1
 800cd96:	4013      	ands	r3, r2
 800cd98:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d143      	bne.n	800ce28 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10c      	bne.n	800cdc2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d11a      	bne.n	800cdea <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe fc38 	bl	800b62e <create_chain>
 800cdbe:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cdc0:	e013      	b.n	800cdea <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d007      	beq.n	800cdda <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7fe fcc4 	bl	800b75e <clmt_clust>
 800cdd6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cdd8:	e007      	b.n	800cdea <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	69db      	ldr	r3, [r3, #28]
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f7fe fc23 	bl	800b62e <create_chain>
 800cde8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 8109 	beq.w	800d004 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d104      	bne.n	800ce02 <f_write+0x10c>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2202      	movs	r2, #2
 800cdfc:	755a      	strb	r2, [r3, #21]
 800cdfe:	2302      	movs	r3, #2
 800ce00:	e109      	b.n	800d016 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce08:	d104      	bne.n	800ce14 <f_write+0x11e>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	755a      	strb	r2, [r3, #21]
 800ce10:	2301      	movs	r3, #1
 800ce12:	e100      	b.n	800d016 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d102      	bne.n	800ce28 <f_write+0x132>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	7d1b      	ldrb	r3, [r3, #20]
 800ce2c:	b25b      	sxtb	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	da18      	bge.n	800ce64 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	7858      	ldrb	r0, [r3, #1]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6a1a      	ldr	r2, [r3, #32]
 800ce40:	2301      	movs	r3, #1
 800ce42:	f7fd fdf7 	bl	800aa34 <disk_write>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d004      	beq.n	800ce56 <f_write+0x160>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	755a      	strb	r2, [r3, #21]
 800ce52:	2301      	movs	r3, #1
 800ce54:	e0df      	b.n	800d016 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	7d1b      	ldrb	r3, [r3, #20]
 800ce5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	f7fe f96d 	bl	800b14c <clust2sect>
 800ce72:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d104      	bne.n	800ce84 <f_write+0x18e>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	755a      	strb	r2, [r3, #21]
 800ce80:	2302      	movs	r3, #2
 800ce82:	e0c8      	b.n	800d016 <f_write+0x320>
			sect += csect;
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	4413      	add	r3, r2
 800ce8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	899b      	ldrh	r3, [r3, #12]
 800ce90:	461a      	mov	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce98:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d043      	beq.n	800cf28 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	4413      	add	r3, r2
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	8952      	ldrh	r2, [r2, #10]
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d905      	bls.n	800ceba <f_write+0x1c4>
					cc = fs->csize - csect;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	895b      	ldrh	r3, [r3, #10]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	7858      	ldrb	r0, [r3, #1]
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	69f9      	ldr	r1, [r7, #28]
 800cec4:	f7fd fdb6 	bl	800aa34 <disk_write>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d004      	beq.n	800ced8 <f_write+0x1e2>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	755a      	strb	r2, [r3, #21]
 800ced4:	2301      	movs	r3, #1
 800ced6:	e09e      	b.n	800d016 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6a1a      	ldr	r2, [r3, #32]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	6a3a      	ldr	r2, [r7, #32]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d918      	bls.n	800cf18 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a1a      	ldr	r2, [r3, #32]
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	8992      	ldrh	r2, [r2, #12]
 800cef8:	fb02 f303 	mul.w	r3, r2, r3
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	18d1      	adds	r1, r2, r3
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	899b      	ldrh	r3, [r3, #12]
 800cf04:	461a      	mov	r2, r3
 800cf06:	f7fd fe55 	bl	800abb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	7d1b      	ldrb	r3, [r3, #20]
 800cf0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	899b      	ldrh	r3, [r3, #12]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	fb02 f303 	mul.w	r3, r2, r3
 800cf24:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cf26:	e04b      	b.n	800cfc0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d016      	beq.n	800cf60 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	699a      	ldr	r2, [r3, #24]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d210      	bcs.n	800cf60 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	7858      	ldrb	r0, [r3, #1]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf48:	2301      	movs	r3, #1
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	f7fd fd52 	bl	800a9f4 <disk_read>
 800cf50:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d004      	beq.n	800cf60 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	755a      	strb	r2, [r3, #21]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e05a      	b.n	800d016 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	899b      	ldrh	r3, [r3, #12]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	8992      	ldrh	r2, [r2, #12]
 800cf74:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf78:	fb01 f202 	mul.w	r2, r1, r2
 800cf7c:	1a9b      	subs	r3, r3, r2
 800cf7e:	1ac3      	subs	r3, r0, r3
 800cf80:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cf82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d901      	bls.n	800cf8e <f_write+0x298>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	8992      	ldrh	r2, [r2, #12]
 800cf9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfa0:	fb00 f202 	mul.w	r2, r0, r2
 800cfa4:	1a9b      	subs	r3, r3, r2
 800cfa6:	440b      	add	r3, r1
 800cfa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfaa:	69f9      	ldr	r1, [r7, #28]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fd fe01 	bl	800abb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	7d1b      	ldrb	r3, [r3, #20]
 800cfb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cfc0:	69fa      	ldr	r2, [r7, #28]
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc4:	4413      	add	r3, r2
 800cfc6:	61fb      	str	r3, [r7, #28]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	699a      	ldr	r2, [r3, #24]
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfce:	441a      	add	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	619a      	str	r2, [r3, #24]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	68da      	ldr	r2, [r3, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	bf38      	it	cc
 800cfe0:	461a      	movcc	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	60da      	str	r2, [r3, #12]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	441a      	add	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f47f aeb5 	bne.w	800cd6c <f_write+0x76>
 800d002:	e000      	b.n	800d006 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d004:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	7d1b      	ldrb	r3, [r3, #20]
 800d00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3730      	adds	r7, #48	@ 0x30
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f107 0208 	add.w	r2, r7, #8
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff fabe 	bl	800c5b0 <validate>
 800d034:	4603      	mov	r3, r0
 800d036:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d038:	7dfb      	ldrb	r3, [r7, #23]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d168      	bne.n	800d110 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	7d1b      	ldrb	r3, [r3, #20]
 800d042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d046:	2b00      	cmp	r3, #0
 800d048:	d062      	beq.n	800d110 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	7d1b      	ldrb	r3, [r3, #20]
 800d04e:	b25b      	sxtb	r3, r3
 800d050:	2b00      	cmp	r3, #0
 800d052:	da15      	bge.n	800d080 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	7858      	ldrb	r0, [r3, #1]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1a      	ldr	r2, [r3, #32]
 800d062:	2301      	movs	r3, #1
 800d064:	f7fd fce6 	bl	800aa34 <disk_write>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <f_sync+0x54>
 800d06e:	2301      	movs	r3, #1
 800d070:	e04f      	b.n	800d112 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7d1b      	ldrb	r3, [r3, #20]
 800d076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d080:	f7fd fb0c 	bl	800a69c <get_fattime>
 800d084:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08c:	4619      	mov	r1, r3
 800d08e:	4610      	mov	r0, r2
 800d090:	f7fd ffbe 	bl	800b010 <move_window>
 800d094:	4603      	mov	r3, r0
 800d096:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d138      	bne.n	800d110 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	330b      	adds	r3, #11
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	330b      	adds	r3, #11
 800d0ae:	f042 0220 	orr.w	r2, r2, #32
 800d0b2:	b2d2      	uxtb	r2, r2
 800d0b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6818      	ldr	r0, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	68f9      	ldr	r1, [r7, #12]
 800d0c2:	f7fe fd49 	bl	800bb58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f103 021c 	add.w	r2, r3, #28
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f7fd fd42 	bl	800ab5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3316      	adds	r3, #22
 800d0dc:	6939      	ldr	r1, [r7, #16]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fd fd3c 	bl	800ab5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	3312      	adds	r3, #18
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fd fd1b 	bl	800ab26 <st_word>
					fs->wflag = 1;
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fd ffb7 	bl	800b06c <sync_fs>
 800d0fe:	4603      	mov	r3, r0
 800d100:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7d1b      	ldrb	r3, [r3, #20]
 800d106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d110:	7dfb      	ldrb	r3, [r7, #23]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff ff7b 	bl	800d01e <f_sync>
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d118      	bne.n	800d164 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f107 0208 	add.w	r2, r7, #8
 800d138:	4611      	mov	r1, r2
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7ff fa38 	bl	800c5b0 <validate>
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10c      	bne.n	800d164 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fd feba 	bl	800aec8 <dec_lock>
 800d154:	4603      	mov	r3, r0
 800d156:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d102      	bne.n	800d164 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b090      	sub	sp, #64	@ 0x40
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f107 0208 	add.w	r2, r7, #8
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fa15 	bl	800c5b0 <validate>
 800d186:	4603      	mov	r3, r0
 800d188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d18c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d190:	2b00      	cmp	r3, #0
 800d192:	d103      	bne.n	800d19c <f_lseek+0x2e>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7d5b      	ldrb	r3, [r3, #21]
 800d198:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d19c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <f_lseek+0x3c>
 800d1a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d1a8:	e201      	b.n	800d5ae <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 80d9 	beq.w	800d366 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ba:	d15a      	bne.n	800d272 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c4:	1d1a      	adds	r2, r3, #4
 800d1c6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	2302      	movs	r3, #2
 800d1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d03a      	beq.n	800d252 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1de:	613b      	str	r3, [r7, #16]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e6:	3302      	adds	r3, #2
 800d1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fd ffc6 	bl	800b18a <get_fat>
 800d1fe:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d202:	2b01      	cmp	r3, #1
 800d204:	d804      	bhi.n	800d210 <f_lseek+0xa2>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2202      	movs	r2, #2
 800d20a:	755a      	strb	r2, [r3, #21]
 800d20c:	2302      	movs	r3, #2
 800d20e:	e1ce      	b.n	800d5ae <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d216:	d104      	bne.n	800d222 <f_lseek+0xb4>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	755a      	strb	r2, [r3, #21]
 800d21e:	2301      	movs	r3, #1
 800d220:	e1c5      	b.n	800d5ae <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3301      	adds	r3, #1
 800d226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d228:	429a      	cmp	r2, r3
 800d22a:	d0de      	beq.n	800d1ea <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d22c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	429a      	cmp	r2, r3
 800d232:	d809      	bhi.n	800d248 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d236:	1d1a      	adds	r2, r3, #4
 800d238:	627a      	str	r2, [r7, #36]	@ 0x24
 800d23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	1d1a      	adds	r2, r3, #4
 800d242:	627a      	str	r2, [r7, #36]	@ 0x24
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d24e:	429a      	cmp	r2, r3
 800d250:	d3c4      	bcc.n	800d1dc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d258:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d25a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d803      	bhi.n	800d26a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d264:	2200      	movs	r2, #0
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	e19f      	b.n	800d5aa <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d26a:	2311      	movs	r3, #17
 800d26c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d270:	e19b      	b.n	800d5aa <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d902      	bls.n	800d282 <f_lseek+0x114>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 818d 	beq.w	800d5aa <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	3b01      	subs	r3, #1
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7fe fa61 	bl	800b75e <clmt_clust>
 800d29c:	4602      	mov	r2, r0
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	69db      	ldr	r3, [r3, #28]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fd ff4e 	bl	800b14c <clust2sect>
 800d2b0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d104      	bne.n	800d2c2 <f_lseek+0x154>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	755a      	strb	r2, [r3, #21]
 800d2be:	2302      	movs	r3, #2
 800d2c0:	e175      	b.n	800d5ae <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	8992      	ldrh	r2, [r2, #12]
 800d2ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	8952      	ldrh	r2, [r2, #10]
 800d2d2:	3a01      	subs	r2, #1
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	69ba      	ldr	r2, [r7, #24]
 800d2d8:	4413      	add	r3, r2
 800d2da:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	8992      	ldrh	r2, [r2, #12]
 800d2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2e8:	fb01 f202 	mul.w	r2, r1, r2
 800d2ec:	1a9b      	subs	r3, r3, r2
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 815b 	beq.w	800d5aa <f_lseek+0x43c>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a1b      	ldr	r3, [r3, #32]
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	f000 8155 	beq.w	800d5aa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	b25b      	sxtb	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	da18      	bge.n	800d33c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	7858      	ldrb	r0, [r3, #1]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a1a      	ldr	r2, [r3, #32]
 800d318:	2301      	movs	r3, #1
 800d31a:	f7fd fb8b 	bl	800aa34 <disk_write>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d004      	beq.n	800d32e <f_lseek+0x1c0>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	755a      	strb	r2, [r3, #21]
 800d32a:	2301      	movs	r3, #1
 800d32c:	e13f      	b.n	800d5ae <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7d1b      	ldrb	r3, [r3, #20]
 800d332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d336:	b2da      	uxtb	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	7858      	ldrb	r0, [r3, #1]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d346:	2301      	movs	r3, #1
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	f7fd fb53 	bl	800a9f4 <disk_read>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d004      	beq.n	800d35e <f_lseek+0x1f0>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	755a      	strb	r2, [r3, #21]
 800d35a:	2301      	movs	r3, #1
 800d35c:	e127      	b.n	800d5ae <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	621a      	str	r2, [r3, #32]
 800d364:	e121      	b.n	800d5aa <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d908      	bls.n	800d382 <f_lseek+0x214>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7d1b      	ldrb	r3, [r3, #20]
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d390:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	f000 80b5 	beq.w	800d504 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	895b      	ldrh	r3, [r3, #10]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	899b      	ldrh	r3, [r3, #12]
 800d3a4:	fb02 f303 	mul.w	r3, r2, r3
 800d3a8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d01b      	beq.n	800d3e8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	1e5a      	subs	r2, r3, #1
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	1e59      	subs	r1, r3, #1
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d30f      	bcc.n	800d3e8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	1e5a      	subs	r2, r3, #1
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	425b      	negs	r3, r3
 800d3d0:	401a      	ands	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3e6:	e022      	b.n	800d42e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d119      	bne.n	800d428 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe f918 	bl	800b62e <create_chain>
 800d3fe:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d402:	2b01      	cmp	r3, #1
 800d404:	d104      	bne.n	800d410 <f_lseek+0x2a2>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2202      	movs	r2, #2
 800d40a:	755a      	strb	r2, [r3, #21]
 800d40c:	2302      	movs	r3, #2
 800d40e:	e0ce      	b.n	800d5ae <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d416:	d104      	bne.n	800d422 <f_lseek+0x2b4>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	755a      	strb	r2, [r3, #21]
 800d41e:	2301      	movs	r3, #1
 800d420:	e0c5      	b.n	800d5ae <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d426:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d42c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d430:	2b00      	cmp	r3, #0
 800d432:	d067      	beq.n	800d504 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d434:	e03a      	b.n	800d4ac <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	603b      	str	r3, [r7, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	699a      	ldr	r2, [r3, #24]
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	441a      	add	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7d1b      	ldrb	r3, [r3, #20]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00b      	beq.n	800d46e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe f8e7 	bl	800b62e <create_chain>
 800d460:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d464:	2b00      	cmp	r3, #0
 800d466:	d108      	bne.n	800d47a <f_lseek+0x30c>
							ofs = 0; break;
 800d468:	2300      	movs	r3, #0
 800d46a:	603b      	str	r3, [r7, #0]
 800d46c:	e022      	b.n	800d4b4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d472:	4618      	mov	r0, r3
 800d474:	f7fd fe89 	bl	800b18a <get_fat>
 800d478:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d480:	d104      	bne.n	800d48c <f_lseek+0x31e>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	755a      	strb	r2, [r3, #21]
 800d488:	2301      	movs	r3, #1
 800d48a:	e090      	b.n	800d5ae <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d904      	bls.n	800d49c <f_lseek+0x32e>
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d498:	429a      	cmp	r2, r3
 800d49a:	d304      	bcc.n	800d4a6 <f_lseek+0x338>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2202      	movs	r2, #2
 800d4a0:	755a      	strb	r2, [r3, #21]
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	e083      	b.n	800d5ae <f_lseek+0x440>
					fp->clust = clst;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4aa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d8c0      	bhi.n	800d436 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	699a      	ldr	r2, [r3, #24]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	441a      	add	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	899b      	ldrh	r3, [r3, #12]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4cc:	fb01 f202 	mul.w	r2, r1, r2
 800d4d0:	1a9b      	subs	r3, r3, r2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d016      	beq.n	800d504 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fd fe36 	bl	800b14c <clust2sect>
 800d4e0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d104      	bne.n	800d4f2 <f_lseek+0x384>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	755a      	strb	r2, [r3, #21]
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e05d      	b.n	800d5ae <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	899b      	ldrh	r3, [r3, #12]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d500:	4413      	add	r3, r2
 800d502:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	699a      	ldr	r2, [r3, #24]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d90a      	bls.n	800d526 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	699a      	ldr	r2, [r3, #24]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	7d1b      	ldrb	r3, [r3, #20]
 800d51c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d520:	b2da      	uxtb	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	8992      	ldrh	r2, [r2, #12]
 800d52e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d532:	fb01 f202 	mul.w	r2, r1, r2
 800d536:	1a9b      	subs	r3, r3, r2
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d036      	beq.n	800d5aa <f_lseek+0x43c>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a1b      	ldr	r3, [r3, #32]
 800d540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d542:	429a      	cmp	r2, r3
 800d544:	d031      	beq.n	800d5aa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	7d1b      	ldrb	r3, [r3, #20]
 800d54a:	b25b      	sxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	da18      	bge.n	800d582 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	7858      	ldrb	r0, [r3, #1]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a1a      	ldr	r2, [r3, #32]
 800d55e:	2301      	movs	r3, #1
 800d560:	f7fd fa68 	bl	800aa34 <disk_write>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d004      	beq.n	800d574 <f_lseek+0x406>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	755a      	strb	r2, [r3, #21]
 800d570:	2301      	movs	r3, #1
 800d572:	e01c      	b.n	800d5ae <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7d1b      	ldrb	r3, [r3, #20]
 800d578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	7858      	ldrb	r0, [r3, #1]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d58c:	2301      	movs	r3, #1
 800d58e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d590:	f7fd fa30 	bl	800a9f4 <disk_read>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d004      	beq.n	800d5a4 <f_lseek+0x436>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2201      	movs	r2, #1
 800d59e:	755a      	strb	r2, [r3, #21]
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e004      	b.n	800d5ae <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5a8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d5aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3740      	adds	r7, #64	@ 0x40
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b090      	sub	sp, #64	@ 0x40
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
 800d5be:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d5c0:	f107 010c 	add.w	r1, r7, #12
 800d5c4:	1d3b      	adds	r3, r7, #4
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe fd71 	bl	800c0b0 <find_volume>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800d5d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d11f      	bne.n	800d61c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	f107 030c 	add.w	r3, r7, #12
 800d5e2:	4611      	mov	r1, r2
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fc53 	bl	800be90 <follow_path>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d5f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d111      	bne.n	800d61c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d5f8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d5fc:	b25b      	sxtb	r3, r3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	da03      	bge.n	800d60a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d602:	2306      	movs	r3, #6
 800d604:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d608:	e008      	b.n	800d61c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d005      	beq.n	800d61c <f_stat+0x66>
 800d610:	f107 030c 	add.w	r3, r7, #12
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fb45 	bl	800bca6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d61c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d620:	4618      	mov	r0, r3
 800d622:	3740      	adds	r7, #64	@ 0x40
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d628:	b480      	push	{r7}
 800d62a:	b087      	sub	sp, #28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	4613      	mov	r3, r2
 800d634:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d636:	2301      	movs	r3, #1
 800d638:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d63e:	4b1f      	ldr	r3, [pc, #124]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d640:	7a5b      	ldrb	r3, [r3, #9]
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	d131      	bne.n	800d6ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d648:	4b1c      	ldr	r3, [pc, #112]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d64a:	7a5b      	ldrb	r3, [r3, #9]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	461a      	mov	r2, r3
 800d650:	4b1a      	ldr	r3, [pc, #104]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d652:	2100      	movs	r1, #0
 800d654:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d656:	4b19      	ldr	r3, [pc, #100]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d658:	7a5b      	ldrb	r3, [r3, #9]
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	4a17      	ldr	r2, [pc, #92]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d666:	4b15      	ldr	r3, [pc, #84]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d668:	7a5b      	ldrb	r3, [r3, #9]
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	461a      	mov	r2, r3
 800d66e:	4b13      	ldr	r3, [pc, #76]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d670:	4413      	add	r3, r2
 800d672:	79fa      	ldrb	r2, [r7, #7]
 800d674:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d676:	4b11      	ldr	r3, [pc, #68]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d678:	7a5b      	ldrb	r3, [r3, #9]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	b2d1      	uxtb	r1, r2
 800d680:	4a0e      	ldr	r2, [pc, #56]	@ (800d6bc <FATFS_LinkDriverEx+0x94>)
 800d682:	7251      	strb	r1, [r2, #9]
 800d684:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d686:	7dbb      	ldrb	r3, [r7, #22]
 800d688:	3330      	adds	r3, #48	@ 0x30
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	3301      	adds	r3, #1
 800d694:	223a      	movs	r2, #58	@ 0x3a
 800d696:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	3302      	adds	r3, #2
 800d69c:	222f      	movs	r2, #47	@ 0x2f
 800d69e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	3303      	adds	r3, #3
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	371c      	adds	r7, #28
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	200056a8 	.word	0x200056a8

0800d6c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff ffaa 	bl	800d628 <FATFS_LinkDriverEx>
 800d6d4:	4603      	mov	r3, r0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <atoi>:
 800d6de:	220a      	movs	r2, #10
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	f000 b93b 	b.w	800d95c <strtol>
	...

0800d6e8 <malloc>:
 800d6e8:	4b02      	ldr	r3, [pc, #8]	@ (800d6f4 <malloc+0xc>)
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	f000 b82d 	b.w	800d74c <_malloc_r>
 800d6f2:	bf00      	nop
 800d6f4:	20000038 	.word	0x20000038

0800d6f8 <free>:
 800d6f8:	4b02      	ldr	r3, [pc, #8]	@ (800d704 <free+0xc>)
 800d6fa:	4601      	mov	r1, r0
 800d6fc:	6818      	ldr	r0, [r3, #0]
 800d6fe:	f000 bbe1 	b.w	800dec4 <_free_r>
 800d702:	bf00      	nop
 800d704:	20000038 	.word	0x20000038

0800d708 <sbrk_aligned>:
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	4e0f      	ldr	r6, [pc, #60]	@ (800d748 <sbrk_aligned+0x40>)
 800d70c:	460c      	mov	r4, r1
 800d70e:	6831      	ldr	r1, [r6, #0]
 800d710:	4605      	mov	r5, r0
 800d712:	b911      	cbnz	r1, 800d71a <sbrk_aligned+0x12>
 800d714:	f000 fb60 	bl	800ddd8 <_sbrk_r>
 800d718:	6030      	str	r0, [r6, #0]
 800d71a:	4621      	mov	r1, r4
 800d71c:	4628      	mov	r0, r5
 800d71e:	f000 fb5b 	bl	800ddd8 <_sbrk_r>
 800d722:	1c43      	adds	r3, r0, #1
 800d724:	d103      	bne.n	800d72e <sbrk_aligned+0x26>
 800d726:	f04f 34ff 	mov.w	r4, #4294967295
 800d72a:	4620      	mov	r0, r4
 800d72c:	bd70      	pop	{r4, r5, r6, pc}
 800d72e:	1cc4      	adds	r4, r0, #3
 800d730:	f024 0403 	bic.w	r4, r4, #3
 800d734:	42a0      	cmp	r0, r4
 800d736:	d0f8      	beq.n	800d72a <sbrk_aligned+0x22>
 800d738:	1a21      	subs	r1, r4, r0
 800d73a:	4628      	mov	r0, r5
 800d73c:	f000 fb4c 	bl	800ddd8 <_sbrk_r>
 800d740:	3001      	adds	r0, #1
 800d742:	d1f2      	bne.n	800d72a <sbrk_aligned+0x22>
 800d744:	e7ef      	b.n	800d726 <sbrk_aligned+0x1e>
 800d746:	bf00      	nop
 800d748:	200056b4 	.word	0x200056b4

0800d74c <_malloc_r>:
 800d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d750:	1ccd      	adds	r5, r1, #3
 800d752:	f025 0503 	bic.w	r5, r5, #3
 800d756:	3508      	adds	r5, #8
 800d758:	2d0c      	cmp	r5, #12
 800d75a:	bf38      	it	cc
 800d75c:	250c      	movcc	r5, #12
 800d75e:	2d00      	cmp	r5, #0
 800d760:	4606      	mov	r6, r0
 800d762:	db01      	blt.n	800d768 <_malloc_r+0x1c>
 800d764:	42a9      	cmp	r1, r5
 800d766:	d904      	bls.n	800d772 <_malloc_r+0x26>
 800d768:	230c      	movs	r3, #12
 800d76a:	6033      	str	r3, [r6, #0]
 800d76c:	2000      	movs	r0, #0
 800d76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d848 <_malloc_r+0xfc>
 800d776:	f000 f869 	bl	800d84c <__malloc_lock>
 800d77a:	f8d8 3000 	ldr.w	r3, [r8]
 800d77e:	461c      	mov	r4, r3
 800d780:	bb44      	cbnz	r4, 800d7d4 <_malloc_r+0x88>
 800d782:	4629      	mov	r1, r5
 800d784:	4630      	mov	r0, r6
 800d786:	f7ff ffbf 	bl	800d708 <sbrk_aligned>
 800d78a:	1c43      	adds	r3, r0, #1
 800d78c:	4604      	mov	r4, r0
 800d78e:	d158      	bne.n	800d842 <_malloc_r+0xf6>
 800d790:	f8d8 4000 	ldr.w	r4, [r8]
 800d794:	4627      	mov	r7, r4
 800d796:	2f00      	cmp	r7, #0
 800d798:	d143      	bne.n	800d822 <_malloc_r+0xd6>
 800d79a:	2c00      	cmp	r4, #0
 800d79c:	d04b      	beq.n	800d836 <_malloc_r+0xea>
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	eb04 0903 	add.w	r9, r4, r3
 800d7a8:	f000 fb16 	bl	800ddd8 <_sbrk_r>
 800d7ac:	4581      	cmp	r9, r0
 800d7ae:	d142      	bne.n	800d836 <_malloc_r+0xea>
 800d7b0:	6821      	ldr	r1, [r4, #0]
 800d7b2:	1a6d      	subs	r5, r5, r1
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f7ff ffa6 	bl	800d708 <sbrk_aligned>
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d03a      	beq.n	800d836 <_malloc_r+0xea>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	442b      	add	r3, r5
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	bb62      	cbnz	r2, 800d828 <_malloc_r+0xdc>
 800d7ce:	f8c8 7000 	str.w	r7, [r8]
 800d7d2:	e00f      	b.n	800d7f4 <_malloc_r+0xa8>
 800d7d4:	6822      	ldr	r2, [r4, #0]
 800d7d6:	1b52      	subs	r2, r2, r5
 800d7d8:	d420      	bmi.n	800d81c <_malloc_r+0xd0>
 800d7da:	2a0b      	cmp	r2, #11
 800d7dc:	d917      	bls.n	800d80e <_malloc_r+0xc2>
 800d7de:	1961      	adds	r1, r4, r5
 800d7e0:	42a3      	cmp	r3, r4
 800d7e2:	6025      	str	r5, [r4, #0]
 800d7e4:	bf18      	it	ne
 800d7e6:	6059      	strne	r1, [r3, #4]
 800d7e8:	6863      	ldr	r3, [r4, #4]
 800d7ea:	bf08      	it	eq
 800d7ec:	f8c8 1000 	streq.w	r1, [r8]
 800d7f0:	5162      	str	r2, [r4, r5]
 800d7f2:	604b      	str	r3, [r1, #4]
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f000 f82f 	bl	800d858 <__malloc_unlock>
 800d7fa:	f104 000b 	add.w	r0, r4, #11
 800d7fe:	1d23      	adds	r3, r4, #4
 800d800:	f020 0007 	bic.w	r0, r0, #7
 800d804:	1ac2      	subs	r2, r0, r3
 800d806:	bf1c      	itt	ne
 800d808:	1a1b      	subne	r3, r3, r0
 800d80a:	50a3      	strne	r3, [r4, r2]
 800d80c:	e7af      	b.n	800d76e <_malloc_r+0x22>
 800d80e:	6862      	ldr	r2, [r4, #4]
 800d810:	42a3      	cmp	r3, r4
 800d812:	bf0c      	ite	eq
 800d814:	f8c8 2000 	streq.w	r2, [r8]
 800d818:	605a      	strne	r2, [r3, #4]
 800d81a:	e7eb      	b.n	800d7f4 <_malloc_r+0xa8>
 800d81c:	4623      	mov	r3, r4
 800d81e:	6864      	ldr	r4, [r4, #4]
 800d820:	e7ae      	b.n	800d780 <_malloc_r+0x34>
 800d822:	463c      	mov	r4, r7
 800d824:	687f      	ldr	r7, [r7, #4]
 800d826:	e7b6      	b.n	800d796 <_malloc_r+0x4a>
 800d828:	461a      	mov	r2, r3
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d1fb      	bne.n	800d828 <_malloc_r+0xdc>
 800d830:	2300      	movs	r3, #0
 800d832:	6053      	str	r3, [r2, #4]
 800d834:	e7de      	b.n	800d7f4 <_malloc_r+0xa8>
 800d836:	230c      	movs	r3, #12
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	4630      	mov	r0, r6
 800d83c:	f000 f80c 	bl	800d858 <__malloc_unlock>
 800d840:	e794      	b.n	800d76c <_malloc_r+0x20>
 800d842:	6005      	str	r5, [r0, #0]
 800d844:	e7d6      	b.n	800d7f4 <_malloc_r+0xa8>
 800d846:	bf00      	nop
 800d848:	200056b8 	.word	0x200056b8

0800d84c <__malloc_lock>:
 800d84c:	4801      	ldr	r0, [pc, #4]	@ (800d854 <__malloc_lock+0x8>)
 800d84e:	f000 bb10 	b.w	800de72 <__retarget_lock_acquire_recursive>
 800d852:	bf00      	nop
 800d854:	200057fc 	.word	0x200057fc

0800d858 <__malloc_unlock>:
 800d858:	4801      	ldr	r0, [pc, #4]	@ (800d860 <__malloc_unlock+0x8>)
 800d85a:	f000 bb0b 	b.w	800de74 <__retarget_lock_release_recursive>
 800d85e:	bf00      	nop
 800d860:	200057fc 	.word	0x200057fc

0800d864 <_strtol_l.constprop.0>:
 800d864:	2b24      	cmp	r3, #36	@ 0x24
 800d866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d86a:	4686      	mov	lr, r0
 800d86c:	4690      	mov	r8, r2
 800d86e:	d801      	bhi.n	800d874 <_strtol_l.constprop.0+0x10>
 800d870:	2b01      	cmp	r3, #1
 800d872:	d106      	bne.n	800d882 <_strtol_l.constprop.0+0x1e>
 800d874:	f000 fad2 	bl	800de1c <__errno>
 800d878:	2316      	movs	r3, #22
 800d87a:	6003      	str	r3, [r0, #0]
 800d87c:	2000      	movs	r0, #0
 800d87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d882:	4834      	ldr	r0, [pc, #208]	@ (800d954 <_strtol_l.constprop.0+0xf0>)
 800d884:	460d      	mov	r5, r1
 800d886:	462a      	mov	r2, r5
 800d888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d88c:	5d06      	ldrb	r6, [r0, r4]
 800d88e:	f016 0608 	ands.w	r6, r6, #8
 800d892:	d1f8      	bne.n	800d886 <_strtol_l.constprop.0+0x22>
 800d894:	2c2d      	cmp	r4, #45	@ 0x2d
 800d896:	d12d      	bne.n	800d8f4 <_strtol_l.constprop.0+0x90>
 800d898:	782c      	ldrb	r4, [r5, #0]
 800d89a:	2601      	movs	r6, #1
 800d89c:	1c95      	adds	r5, r2, #2
 800d89e:	f033 0210 	bics.w	r2, r3, #16
 800d8a2:	d109      	bne.n	800d8b8 <_strtol_l.constprop.0+0x54>
 800d8a4:	2c30      	cmp	r4, #48	@ 0x30
 800d8a6:	d12a      	bne.n	800d8fe <_strtol_l.constprop.0+0x9a>
 800d8a8:	782a      	ldrb	r2, [r5, #0]
 800d8aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8ae:	2a58      	cmp	r2, #88	@ 0x58
 800d8b0:	d125      	bne.n	800d8fe <_strtol_l.constprop.0+0x9a>
 800d8b2:	786c      	ldrb	r4, [r5, #1]
 800d8b4:	2310      	movs	r3, #16
 800d8b6:	3502      	adds	r5, #2
 800d8b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	fbbc f9f3 	udiv	r9, ip, r3
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8d0:	2f09      	cmp	r7, #9
 800d8d2:	d81b      	bhi.n	800d90c <_strtol_l.constprop.0+0xa8>
 800d8d4:	463c      	mov	r4, r7
 800d8d6:	42a3      	cmp	r3, r4
 800d8d8:	dd27      	ble.n	800d92a <_strtol_l.constprop.0+0xc6>
 800d8da:	1c57      	adds	r7, r2, #1
 800d8dc:	d007      	beq.n	800d8ee <_strtol_l.constprop.0+0x8a>
 800d8de:	4581      	cmp	r9, r0
 800d8e0:	d320      	bcc.n	800d924 <_strtol_l.constprop.0+0xc0>
 800d8e2:	d101      	bne.n	800d8e8 <_strtol_l.constprop.0+0x84>
 800d8e4:	45a2      	cmp	sl, r4
 800d8e6:	db1d      	blt.n	800d924 <_strtol_l.constprop.0+0xc0>
 800d8e8:	fb00 4003 	mla	r0, r0, r3, r4
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8f2:	e7eb      	b.n	800d8cc <_strtol_l.constprop.0+0x68>
 800d8f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8f6:	bf04      	itt	eq
 800d8f8:	782c      	ldrbeq	r4, [r5, #0]
 800d8fa:	1c95      	addeq	r5, r2, #2
 800d8fc:	e7cf      	b.n	800d89e <_strtol_l.constprop.0+0x3a>
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1da      	bne.n	800d8b8 <_strtol_l.constprop.0+0x54>
 800d902:	2c30      	cmp	r4, #48	@ 0x30
 800d904:	bf0c      	ite	eq
 800d906:	2308      	moveq	r3, #8
 800d908:	230a      	movne	r3, #10
 800d90a:	e7d5      	b.n	800d8b8 <_strtol_l.constprop.0+0x54>
 800d90c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d910:	2f19      	cmp	r7, #25
 800d912:	d801      	bhi.n	800d918 <_strtol_l.constprop.0+0xb4>
 800d914:	3c37      	subs	r4, #55	@ 0x37
 800d916:	e7de      	b.n	800d8d6 <_strtol_l.constprop.0+0x72>
 800d918:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d91c:	2f19      	cmp	r7, #25
 800d91e:	d804      	bhi.n	800d92a <_strtol_l.constprop.0+0xc6>
 800d920:	3c57      	subs	r4, #87	@ 0x57
 800d922:	e7d8      	b.n	800d8d6 <_strtol_l.constprop.0+0x72>
 800d924:	f04f 32ff 	mov.w	r2, #4294967295
 800d928:	e7e1      	b.n	800d8ee <_strtol_l.constprop.0+0x8a>
 800d92a:	1c53      	adds	r3, r2, #1
 800d92c:	d108      	bne.n	800d940 <_strtol_l.constprop.0+0xdc>
 800d92e:	2322      	movs	r3, #34	@ 0x22
 800d930:	f8ce 3000 	str.w	r3, [lr]
 800d934:	4660      	mov	r0, ip
 800d936:	f1b8 0f00 	cmp.w	r8, #0
 800d93a:	d0a0      	beq.n	800d87e <_strtol_l.constprop.0+0x1a>
 800d93c:	1e69      	subs	r1, r5, #1
 800d93e:	e006      	b.n	800d94e <_strtol_l.constprop.0+0xea>
 800d940:	b106      	cbz	r6, 800d944 <_strtol_l.constprop.0+0xe0>
 800d942:	4240      	negs	r0, r0
 800d944:	f1b8 0f00 	cmp.w	r8, #0
 800d948:	d099      	beq.n	800d87e <_strtol_l.constprop.0+0x1a>
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	d1f6      	bne.n	800d93c <_strtol_l.constprop.0+0xd8>
 800d94e:	f8c8 1000 	str.w	r1, [r8]
 800d952:	e794      	b.n	800d87e <_strtol_l.constprop.0+0x1a>
 800d954:	08010311 	.word	0x08010311

0800d958 <_strtol_r>:
 800d958:	f7ff bf84 	b.w	800d864 <_strtol_l.constprop.0>

0800d95c <strtol>:
 800d95c:	4613      	mov	r3, r2
 800d95e:	460a      	mov	r2, r1
 800d960:	4601      	mov	r1, r0
 800d962:	4802      	ldr	r0, [pc, #8]	@ (800d96c <strtol+0x10>)
 800d964:	6800      	ldr	r0, [r0, #0]
 800d966:	f7ff bf7d 	b.w	800d864 <_strtol_l.constprop.0>
 800d96a:	bf00      	nop
 800d96c:	20000038 	.word	0x20000038

0800d970 <std>:
 800d970:	2300      	movs	r3, #0
 800d972:	b510      	push	{r4, lr}
 800d974:	4604      	mov	r4, r0
 800d976:	e9c0 3300 	strd	r3, r3, [r0]
 800d97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d97e:	6083      	str	r3, [r0, #8]
 800d980:	8181      	strh	r1, [r0, #12]
 800d982:	6643      	str	r3, [r0, #100]	@ 0x64
 800d984:	81c2      	strh	r2, [r0, #14]
 800d986:	6183      	str	r3, [r0, #24]
 800d988:	4619      	mov	r1, r3
 800d98a:	2208      	movs	r2, #8
 800d98c:	305c      	adds	r0, #92	@ 0x5c
 800d98e:	f000 f979 	bl	800dc84 <memset>
 800d992:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c8 <std+0x58>)
 800d994:	6263      	str	r3, [r4, #36]	@ 0x24
 800d996:	4b0d      	ldr	r3, [pc, #52]	@ (800d9cc <std+0x5c>)
 800d998:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d99a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d0 <std+0x60>)
 800d99c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d99e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <std+0x64>)
 800d9a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d8 <std+0x68>)
 800d9a4:	6224      	str	r4, [r4, #32]
 800d9a6:	429c      	cmp	r4, r3
 800d9a8:	d006      	beq.n	800d9b8 <std+0x48>
 800d9aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9ae:	4294      	cmp	r4, r2
 800d9b0:	d002      	beq.n	800d9b8 <std+0x48>
 800d9b2:	33d0      	adds	r3, #208	@ 0xd0
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	d105      	bne.n	800d9c4 <std+0x54>
 800d9b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c0:	f000 ba56 	b.w	800de70 <__retarget_lock_init_recursive>
 800d9c4:	bd10      	pop	{r4, pc}
 800d9c6:	bf00      	nop
 800d9c8:	0800db89 	.word	0x0800db89
 800d9cc:	0800dbaf 	.word	0x0800dbaf
 800d9d0:	0800dbe7 	.word	0x0800dbe7
 800d9d4:	0800dc0b 	.word	0x0800dc0b
 800d9d8:	200056bc 	.word	0x200056bc

0800d9dc <stdio_exit_handler>:
 800d9dc:	4a02      	ldr	r2, [pc, #8]	@ (800d9e8 <stdio_exit_handler+0xc>)
 800d9de:	4903      	ldr	r1, [pc, #12]	@ (800d9ec <stdio_exit_handler+0x10>)
 800d9e0:	4803      	ldr	r0, [pc, #12]	@ (800d9f0 <stdio_exit_handler+0x14>)
 800d9e2:	f000 b869 	b.w	800dab8 <_fwalk_sglue>
 800d9e6:	bf00      	nop
 800d9e8:	2000002c 	.word	0x2000002c
 800d9ec:	0800ec61 	.word	0x0800ec61
 800d9f0:	2000003c 	.word	0x2000003c

0800d9f4 <cleanup_stdio>:
 800d9f4:	6841      	ldr	r1, [r0, #4]
 800d9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800da28 <cleanup_stdio+0x34>)
 800d9f8:	4299      	cmp	r1, r3
 800d9fa:	b510      	push	{r4, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	d001      	beq.n	800da04 <cleanup_stdio+0x10>
 800da00:	f001 f92e 	bl	800ec60 <_fflush_r>
 800da04:	68a1      	ldr	r1, [r4, #8]
 800da06:	4b09      	ldr	r3, [pc, #36]	@ (800da2c <cleanup_stdio+0x38>)
 800da08:	4299      	cmp	r1, r3
 800da0a:	d002      	beq.n	800da12 <cleanup_stdio+0x1e>
 800da0c:	4620      	mov	r0, r4
 800da0e:	f001 f927 	bl	800ec60 <_fflush_r>
 800da12:	68e1      	ldr	r1, [r4, #12]
 800da14:	4b06      	ldr	r3, [pc, #24]	@ (800da30 <cleanup_stdio+0x3c>)
 800da16:	4299      	cmp	r1, r3
 800da18:	d004      	beq.n	800da24 <cleanup_stdio+0x30>
 800da1a:	4620      	mov	r0, r4
 800da1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da20:	f001 b91e 	b.w	800ec60 <_fflush_r>
 800da24:	bd10      	pop	{r4, pc}
 800da26:	bf00      	nop
 800da28:	200056bc 	.word	0x200056bc
 800da2c:	20005724 	.word	0x20005724
 800da30:	2000578c 	.word	0x2000578c

0800da34 <global_stdio_init.part.0>:
 800da34:	b510      	push	{r4, lr}
 800da36:	4b0b      	ldr	r3, [pc, #44]	@ (800da64 <global_stdio_init.part.0+0x30>)
 800da38:	4c0b      	ldr	r4, [pc, #44]	@ (800da68 <global_stdio_init.part.0+0x34>)
 800da3a:	4a0c      	ldr	r2, [pc, #48]	@ (800da6c <global_stdio_init.part.0+0x38>)
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	4620      	mov	r0, r4
 800da40:	2200      	movs	r2, #0
 800da42:	2104      	movs	r1, #4
 800da44:	f7ff ff94 	bl	800d970 <std>
 800da48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da4c:	2201      	movs	r2, #1
 800da4e:	2109      	movs	r1, #9
 800da50:	f7ff ff8e 	bl	800d970 <std>
 800da54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da58:	2202      	movs	r2, #2
 800da5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da5e:	2112      	movs	r1, #18
 800da60:	f7ff bf86 	b.w	800d970 <std>
 800da64:	200057f4 	.word	0x200057f4
 800da68:	200056bc 	.word	0x200056bc
 800da6c:	0800d9dd 	.word	0x0800d9dd

0800da70 <__sfp_lock_acquire>:
 800da70:	4801      	ldr	r0, [pc, #4]	@ (800da78 <__sfp_lock_acquire+0x8>)
 800da72:	f000 b9fe 	b.w	800de72 <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	200057fd 	.word	0x200057fd

0800da7c <__sfp_lock_release>:
 800da7c:	4801      	ldr	r0, [pc, #4]	@ (800da84 <__sfp_lock_release+0x8>)
 800da7e:	f000 b9f9 	b.w	800de74 <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	200057fd 	.word	0x200057fd

0800da88 <__sinit>:
 800da88:	b510      	push	{r4, lr}
 800da8a:	4604      	mov	r4, r0
 800da8c:	f7ff fff0 	bl	800da70 <__sfp_lock_acquire>
 800da90:	6a23      	ldr	r3, [r4, #32]
 800da92:	b11b      	cbz	r3, 800da9c <__sinit+0x14>
 800da94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da98:	f7ff bff0 	b.w	800da7c <__sfp_lock_release>
 800da9c:	4b04      	ldr	r3, [pc, #16]	@ (800dab0 <__sinit+0x28>)
 800da9e:	6223      	str	r3, [r4, #32]
 800daa0:	4b04      	ldr	r3, [pc, #16]	@ (800dab4 <__sinit+0x2c>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1f5      	bne.n	800da94 <__sinit+0xc>
 800daa8:	f7ff ffc4 	bl	800da34 <global_stdio_init.part.0>
 800daac:	e7f2      	b.n	800da94 <__sinit+0xc>
 800daae:	bf00      	nop
 800dab0:	0800d9f5 	.word	0x0800d9f5
 800dab4:	200057f4 	.word	0x200057f4

0800dab8 <_fwalk_sglue>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	4607      	mov	r7, r0
 800dabe:	4688      	mov	r8, r1
 800dac0:	4614      	mov	r4, r2
 800dac2:	2600      	movs	r6, #0
 800dac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dac8:	f1b9 0901 	subs.w	r9, r9, #1
 800dacc:	d505      	bpl.n	800dada <_fwalk_sglue+0x22>
 800dace:	6824      	ldr	r4, [r4, #0]
 800dad0:	2c00      	cmp	r4, #0
 800dad2:	d1f7      	bne.n	800dac4 <_fwalk_sglue+0xc>
 800dad4:	4630      	mov	r0, r6
 800dad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dada:	89ab      	ldrh	r3, [r5, #12]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d907      	bls.n	800daf0 <_fwalk_sglue+0x38>
 800dae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dae4:	3301      	adds	r3, #1
 800dae6:	d003      	beq.n	800daf0 <_fwalk_sglue+0x38>
 800dae8:	4629      	mov	r1, r5
 800daea:	4638      	mov	r0, r7
 800daec:	47c0      	blx	r8
 800daee:	4306      	orrs	r6, r0
 800daf0:	3568      	adds	r5, #104	@ 0x68
 800daf2:	e7e9      	b.n	800dac8 <_fwalk_sglue+0x10>

0800daf4 <siprintf>:
 800daf4:	b40e      	push	{r1, r2, r3}
 800daf6:	b500      	push	{lr}
 800daf8:	b09c      	sub	sp, #112	@ 0x70
 800dafa:	ab1d      	add	r3, sp, #116	@ 0x74
 800dafc:	9002      	str	r0, [sp, #8]
 800dafe:	9006      	str	r0, [sp, #24]
 800db00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db04:	4809      	ldr	r0, [pc, #36]	@ (800db2c <siprintf+0x38>)
 800db06:	9107      	str	r1, [sp, #28]
 800db08:	9104      	str	r1, [sp, #16]
 800db0a:	4909      	ldr	r1, [pc, #36]	@ (800db30 <siprintf+0x3c>)
 800db0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db10:	9105      	str	r1, [sp, #20]
 800db12:	6800      	ldr	r0, [r0, #0]
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	a902      	add	r1, sp, #8
 800db18:	f000 fa7a 	bl	800e010 <_svfiprintf_r>
 800db1c:	9b02      	ldr	r3, [sp, #8]
 800db1e:	2200      	movs	r2, #0
 800db20:	701a      	strb	r2, [r3, #0]
 800db22:	b01c      	add	sp, #112	@ 0x70
 800db24:	f85d eb04 	ldr.w	lr, [sp], #4
 800db28:	b003      	add	sp, #12
 800db2a:	4770      	bx	lr
 800db2c:	20000038 	.word	0x20000038
 800db30:	ffff0208 	.word	0xffff0208

0800db34 <siscanf>:
 800db34:	b40e      	push	{r1, r2, r3}
 800db36:	b530      	push	{r4, r5, lr}
 800db38:	b09c      	sub	sp, #112	@ 0x70
 800db3a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800db3c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800db40:	f854 5b04 	ldr.w	r5, [r4], #4
 800db44:	f8ad 2014 	strh.w	r2, [sp, #20]
 800db48:	9002      	str	r0, [sp, #8]
 800db4a:	9006      	str	r0, [sp, #24]
 800db4c:	f7f2 fb40 	bl	80001d0 <strlen>
 800db50:	4b0b      	ldr	r3, [pc, #44]	@ (800db80 <siscanf+0x4c>)
 800db52:	9003      	str	r0, [sp, #12]
 800db54:	9007      	str	r0, [sp, #28]
 800db56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db58:	480a      	ldr	r0, [pc, #40]	@ (800db84 <siscanf+0x50>)
 800db5a:	9401      	str	r4, [sp, #4]
 800db5c:	2300      	movs	r3, #0
 800db5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db60:	9314      	str	r3, [sp, #80]	@ 0x50
 800db62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db66:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db6a:	462a      	mov	r2, r5
 800db6c:	4623      	mov	r3, r4
 800db6e:	a902      	add	r1, sp, #8
 800db70:	6800      	ldr	r0, [r0, #0]
 800db72:	f000 fba1 	bl	800e2b8 <__ssvfiscanf_r>
 800db76:	b01c      	add	sp, #112	@ 0x70
 800db78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db7c:	b003      	add	sp, #12
 800db7e:	4770      	bx	lr
 800db80:	0800dbab 	.word	0x0800dbab
 800db84:	20000038 	.word	0x20000038

0800db88 <__sread>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	460c      	mov	r4, r1
 800db8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db90:	f000 f910 	bl	800ddb4 <_read_r>
 800db94:	2800      	cmp	r0, #0
 800db96:	bfab      	itete	ge
 800db98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db9a:	89a3      	ldrhlt	r3, [r4, #12]
 800db9c:	181b      	addge	r3, r3, r0
 800db9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dba2:	bfac      	ite	ge
 800dba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dba6:	81a3      	strhlt	r3, [r4, #12]
 800dba8:	bd10      	pop	{r4, pc}

0800dbaa <__seofread>:
 800dbaa:	2000      	movs	r0, #0
 800dbac:	4770      	bx	lr

0800dbae <__swrite>:
 800dbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb2:	461f      	mov	r7, r3
 800dbb4:	898b      	ldrh	r3, [r1, #12]
 800dbb6:	05db      	lsls	r3, r3, #23
 800dbb8:	4605      	mov	r5, r0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	4616      	mov	r6, r2
 800dbbe:	d505      	bpl.n	800dbcc <__swrite+0x1e>
 800dbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f000 f8e2 	bl	800dd90 <_lseek_r>
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	4632      	mov	r2, r6
 800dbda:	463b      	mov	r3, r7
 800dbdc:	4628      	mov	r0, r5
 800dbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe2:	f000 b909 	b.w	800ddf8 <_write_r>

0800dbe6 <__sseek>:
 800dbe6:	b510      	push	{r4, lr}
 800dbe8:	460c      	mov	r4, r1
 800dbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbee:	f000 f8cf 	bl	800dd90 <_lseek_r>
 800dbf2:	1c43      	adds	r3, r0, #1
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	bf15      	itete	ne
 800dbf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc02:	81a3      	strheq	r3, [r4, #12]
 800dc04:	bf18      	it	ne
 800dc06:	81a3      	strhne	r3, [r4, #12]
 800dc08:	bd10      	pop	{r4, pc}

0800dc0a <__sclose>:
 800dc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0e:	f000 b8af 	b.w	800dd70 <_close_r>

0800dc12 <_vsniprintf_r>:
 800dc12:	b530      	push	{r4, r5, lr}
 800dc14:	4614      	mov	r4, r2
 800dc16:	2c00      	cmp	r4, #0
 800dc18:	b09b      	sub	sp, #108	@ 0x6c
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	da05      	bge.n	800dc2c <_vsniprintf_r+0x1a>
 800dc20:	238b      	movs	r3, #139	@ 0x8b
 800dc22:	6003      	str	r3, [r0, #0]
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	b01b      	add	sp, #108	@ 0x6c
 800dc2a:	bd30      	pop	{r4, r5, pc}
 800dc2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc30:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dc34:	bf14      	ite	ne
 800dc36:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc3a:	4623      	moveq	r3, r4
 800dc3c:	9302      	str	r3, [sp, #8]
 800dc3e:	9305      	str	r3, [sp, #20]
 800dc40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc44:	9100      	str	r1, [sp, #0]
 800dc46:	9104      	str	r1, [sp, #16]
 800dc48:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dc4c:	4669      	mov	r1, sp
 800dc4e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dc50:	f000 f9de 	bl	800e010 <_svfiprintf_r>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	bfbc      	itt	lt
 800dc58:	238b      	movlt	r3, #139	@ 0x8b
 800dc5a:	602b      	strlt	r3, [r5, #0]
 800dc5c:	2c00      	cmp	r4, #0
 800dc5e:	d0e3      	beq.n	800dc28 <_vsniprintf_r+0x16>
 800dc60:	9b00      	ldr	r3, [sp, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	701a      	strb	r2, [r3, #0]
 800dc66:	e7df      	b.n	800dc28 <_vsniprintf_r+0x16>

0800dc68 <vsniprintf>:
 800dc68:	b507      	push	{r0, r1, r2, lr}
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	460a      	mov	r2, r1
 800dc70:	4601      	mov	r1, r0
 800dc72:	4803      	ldr	r0, [pc, #12]	@ (800dc80 <vsniprintf+0x18>)
 800dc74:	6800      	ldr	r0, [r0, #0]
 800dc76:	f7ff ffcc 	bl	800dc12 <_vsniprintf_r>
 800dc7a:	b003      	add	sp, #12
 800dc7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc80:	20000038 	.word	0x20000038

0800dc84 <memset>:
 800dc84:	4402      	add	r2, r0
 800dc86:	4603      	mov	r3, r0
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d100      	bne.n	800dc8e <memset+0xa>
 800dc8c:	4770      	bx	lr
 800dc8e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc92:	e7f9      	b.n	800dc88 <memset+0x4>

0800dc94 <strncmp>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	b16a      	cbz	r2, 800dcb4 <strncmp+0x20>
 800dc98:	3901      	subs	r1, #1
 800dc9a:	1884      	adds	r4, r0, r2
 800dc9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dca0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d103      	bne.n	800dcb0 <strncmp+0x1c>
 800dca8:	42a0      	cmp	r0, r4
 800dcaa:	d001      	beq.n	800dcb0 <strncmp+0x1c>
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	d1f5      	bne.n	800dc9c <strncmp+0x8>
 800dcb0:	1ad0      	subs	r0, r2, r3
 800dcb2:	bd10      	pop	{r4, pc}
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	e7fc      	b.n	800dcb2 <strncmp+0x1e>

0800dcb8 <strtok>:
 800dcb8:	4b16      	ldr	r3, [pc, #88]	@ (800dd14 <strtok+0x5c>)
 800dcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbe:	681f      	ldr	r7, [r3, #0]
 800dcc0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	460e      	mov	r6, r1
 800dcc6:	b9ec      	cbnz	r4, 800dd04 <strtok+0x4c>
 800dcc8:	2050      	movs	r0, #80	@ 0x50
 800dcca:	f7ff fd0d 	bl	800d6e8 <malloc>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	6478      	str	r0, [r7, #68]	@ 0x44
 800dcd2:	b920      	cbnz	r0, 800dcde <strtok+0x26>
 800dcd4:	4b10      	ldr	r3, [pc, #64]	@ (800dd18 <strtok+0x60>)
 800dcd6:	4811      	ldr	r0, [pc, #68]	@ (800dd1c <strtok+0x64>)
 800dcd8:	215b      	movs	r1, #91	@ 0x5b
 800dcda:	f000 f8d5 	bl	800de88 <__assert_func>
 800dcde:	e9c0 4400 	strd	r4, r4, [r0]
 800dce2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dce6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dcea:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dcee:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dcf2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dcf6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dcfa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dcfe:	6184      	str	r4, [r0, #24]
 800dd00:	7704      	strb	r4, [r0, #28]
 800dd02:	6244      	str	r4, [r0, #36]	@ 0x24
 800dd04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd06:	4631      	mov	r1, r6
 800dd08:	4628      	mov	r0, r5
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd10:	f000 b806 	b.w	800dd20 <__strtok_r>
 800dd14:	20000038 	.word	0x20000038
 800dd18:	08010411 	.word	0x08010411
 800dd1c:	08010428 	.word	0x08010428

0800dd20 <__strtok_r>:
 800dd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd22:	4604      	mov	r4, r0
 800dd24:	b908      	cbnz	r0, 800dd2a <__strtok_r+0xa>
 800dd26:	6814      	ldr	r4, [r2, #0]
 800dd28:	b144      	cbz	r4, 800dd3c <__strtok_r+0x1c>
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dd30:	460f      	mov	r7, r1
 800dd32:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dd36:	b91e      	cbnz	r6, 800dd40 <__strtok_r+0x20>
 800dd38:	b965      	cbnz	r5, 800dd54 <__strtok_r+0x34>
 800dd3a:	6015      	str	r5, [r2, #0]
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	e005      	b.n	800dd4c <__strtok_r+0x2c>
 800dd40:	42b5      	cmp	r5, r6
 800dd42:	d1f6      	bne.n	800dd32 <__strtok_r+0x12>
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d1f0      	bne.n	800dd2a <__strtok_r+0xa>
 800dd48:	6014      	str	r4, [r2, #0]
 800dd4a:	7003      	strb	r3, [r0, #0]
 800dd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd4e:	461c      	mov	r4, r3
 800dd50:	e00c      	b.n	800dd6c <__strtok_r+0x4c>
 800dd52:	b915      	cbnz	r5, 800dd5a <__strtok_r+0x3a>
 800dd54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd58:	460e      	mov	r6, r1
 800dd5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dd5e:	42ab      	cmp	r3, r5
 800dd60:	d1f7      	bne.n	800dd52 <__strtok_r+0x32>
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d0f3      	beq.n	800dd4e <__strtok_r+0x2e>
 800dd66:	2300      	movs	r3, #0
 800dd68:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dd6c:	6014      	str	r4, [r2, #0]
 800dd6e:	e7ed      	b.n	800dd4c <__strtok_r+0x2c>

0800dd70 <_close_r>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	4d06      	ldr	r5, [pc, #24]	@ (800dd8c <_close_r+0x1c>)
 800dd74:	2300      	movs	r3, #0
 800dd76:	4604      	mov	r4, r0
 800dd78:	4608      	mov	r0, r1
 800dd7a:	602b      	str	r3, [r5, #0]
 800dd7c:	f7f5 fbfa 	bl	8003574 <_close>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_close_r+0x1a>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_close_r+0x1a>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	200057f8 	.word	0x200057f8

0800dd90 <_lseek_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	@ (800ddb0 <_lseek_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f5 fc0f 	bl	80035c2 <_lseek>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_lseek_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_lseek_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	200057f8 	.word	0x200057f8

0800ddb4 <_read_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d07      	ldr	r5, [pc, #28]	@ (800ddd4 <_read_r+0x20>)
 800ddb8:	4604      	mov	r4, r0
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	602a      	str	r2, [r5, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f7f5 fb9d 	bl	8003502 <_read>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_read_r+0x1e>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_read_r+0x1e>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	200057f8 	.word	0x200057f8

0800ddd8 <_sbrk_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d06      	ldr	r5, [pc, #24]	@ (800ddf4 <_sbrk_r+0x1c>)
 800dddc:	2300      	movs	r3, #0
 800ddde:	4604      	mov	r4, r0
 800dde0:	4608      	mov	r0, r1
 800dde2:	602b      	str	r3, [r5, #0]
 800dde4:	f7f5 fbfa 	bl	80035dc <_sbrk>
 800dde8:	1c43      	adds	r3, r0, #1
 800ddea:	d102      	bne.n	800ddf2 <_sbrk_r+0x1a>
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	b103      	cbz	r3, 800ddf2 <_sbrk_r+0x1a>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	200057f8 	.word	0x200057f8

0800ddf8 <_write_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4d07      	ldr	r5, [pc, #28]	@ (800de18 <_write_r+0x20>)
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	4608      	mov	r0, r1
 800de00:	4611      	mov	r1, r2
 800de02:	2200      	movs	r2, #0
 800de04:	602a      	str	r2, [r5, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	f7f5 fb98 	bl	800353c <_write>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_write_r+0x1e>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_write_r+0x1e>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	200057f8 	.word	0x200057f8

0800de1c <__errno>:
 800de1c:	4b01      	ldr	r3, [pc, #4]	@ (800de24 <__errno+0x8>)
 800de1e:	6818      	ldr	r0, [r3, #0]
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	20000038 	.word	0x20000038

0800de28 <__libc_init_array>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	4d0d      	ldr	r5, [pc, #52]	@ (800de60 <__libc_init_array+0x38>)
 800de2c:	4c0d      	ldr	r4, [pc, #52]	@ (800de64 <__libc_init_array+0x3c>)
 800de2e:	1b64      	subs	r4, r4, r5
 800de30:	10a4      	asrs	r4, r4, #2
 800de32:	2600      	movs	r6, #0
 800de34:	42a6      	cmp	r6, r4
 800de36:	d109      	bne.n	800de4c <__libc_init_array+0x24>
 800de38:	4d0b      	ldr	r5, [pc, #44]	@ (800de68 <__libc_init_array+0x40>)
 800de3a:	4c0c      	ldr	r4, [pc, #48]	@ (800de6c <__libc_init_array+0x44>)
 800de3c:	f001 fb30 	bl	800f4a0 <_init>
 800de40:	1b64      	subs	r4, r4, r5
 800de42:	10a4      	asrs	r4, r4, #2
 800de44:	2600      	movs	r6, #0
 800de46:	42a6      	cmp	r6, r4
 800de48:	d105      	bne.n	800de56 <__libc_init_array+0x2e>
 800de4a:	bd70      	pop	{r4, r5, r6, pc}
 800de4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de50:	4798      	blx	r3
 800de52:	3601      	adds	r6, #1
 800de54:	e7ee      	b.n	800de34 <__libc_init_array+0xc>
 800de56:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5a:	4798      	blx	r3
 800de5c:	3601      	adds	r6, #1
 800de5e:	e7f2      	b.n	800de46 <__libc_init_array+0x1e>
 800de60:	08010514 	.word	0x08010514
 800de64:	08010514 	.word	0x08010514
 800de68:	08010514 	.word	0x08010514
 800de6c:	08010518 	.word	0x08010518

0800de70 <__retarget_lock_init_recursive>:
 800de70:	4770      	bx	lr

0800de72 <__retarget_lock_acquire_recursive>:
 800de72:	4770      	bx	lr

0800de74 <__retarget_lock_release_recursive>:
 800de74:	4770      	bx	lr

0800de76 <strcpy>:
 800de76:	4603      	mov	r3, r0
 800de78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de7c:	f803 2b01 	strb.w	r2, [r3], #1
 800de80:	2a00      	cmp	r2, #0
 800de82:	d1f9      	bne.n	800de78 <strcpy+0x2>
 800de84:	4770      	bx	lr
	...

0800de88 <__assert_func>:
 800de88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de8a:	4614      	mov	r4, r2
 800de8c:	461a      	mov	r2, r3
 800de8e:	4b09      	ldr	r3, [pc, #36]	@ (800deb4 <__assert_func+0x2c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4605      	mov	r5, r0
 800de94:	68d8      	ldr	r0, [r3, #12]
 800de96:	b954      	cbnz	r4, 800deae <__assert_func+0x26>
 800de98:	4b07      	ldr	r3, [pc, #28]	@ (800deb8 <__assert_func+0x30>)
 800de9a:	461c      	mov	r4, r3
 800de9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dea0:	9100      	str	r1, [sp, #0]
 800dea2:	462b      	mov	r3, r5
 800dea4:	4905      	ldr	r1, [pc, #20]	@ (800debc <__assert_func+0x34>)
 800dea6:	f000 ff03 	bl	800ecb0 <fiprintf>
 800deaa:	f000 ffae 	bl	800ee0a <abort>
 800deae:	4b04      	ldr	r3, [pc, #16]	@ (800dec0 <__assert_func+0x38>)
 800deb0:	e7f4      	b.n	800de9c <__assert_func+0x14>
 800deb2:	bf00      	nop
 800deb4:	20000038 	.word	0x20000038
 800deb8:	080104bd 	.word	0x080104bd
 800debc:	0801048f 	.word	0x0801048f
 800dec0:	08010482 	.word	0x08010482

0800dec4 <_free_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4605      	mov	r5, r0
 800dec8:	2900      	cmp	r1, #0
 800deca:	d041      	beq.n	800df50 <_free_r+0x8c>
 800decc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded0:	1f0c      	subs	r4, r1, #4
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bfb8      	it	lt
 800ded6:	18e4      	addlt	r4, r4, r3
 800ded8:	f7ff fcb8 	bl	800d84c <__malloc_lock>
 800dedc:	4a1d      	ldr	r2, [pc, #116]	@ (800df54 <_free_r+0x90>)
 800dede:	6813      	ldr	r3, [r2, #0]
 800dee0:	b933      	cbnz	r3, 800def0 <_free_r+0x2c>
 800dee2:	6063      	str	r3, [r4, #4]
 800dee4:	6014      	str	r4, [r2, #0]
 800dee6:	4628      	mov	r0, r5
 800dee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deec:	f7ff bcb4 	b.w	800d858 <__malloc_unlock>
 800def0:	42a3      	cmp	r3, r4
 800def2:	d908      	bls.n	800df06 <_free_r+0x42>
 800def4:	6820      	ldr	r0, [r4, #0]
 800def6:	1821      	adds	r1, r4, r0
 800def8:	428b      	cmp	r3, r1
 800defa:	bf01      	itttt	eq
 800defc:	6819      	ldreq	r1, [r3, #0]
 800defe:	685b      	ldreq	r3, [r3, #4]
 800df00:	1809      	addeq	r1, r1, r0
 800df02:	6021      	streq	r1, [r4, #0]
 800df04:	e7ed      	b.n	800dee2 <_free_r+0x1e>
 800df06:	461a      	mov	r2, r3
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	b10b      	cbz	r3, 800df10 <_free_r+0x4c>
 800df0c:	42a3      	cmp	r3, r4
 800df0e:	d9fa      	bls.n	800df06 <_free_r+0x42>
 800df10:	6811      	ldr	r1, [r2, #0]
 800df12:	1850      	adds	r0, r2, r1
 800df14:	42a0      	cmp	r0, r4
 800df16:	d10b      	bne.n	800df30 <_free_r+0x6c>
 800df18:	6820      	ldr	r0, [r4, #0]
 800df1a:	4401      	add	r1, r0
 800df1c:	1850      	adds	r0, r2, r1
 800df1e:	4283      	cmp	r3, r0
 800df20:	6011      	str	r1, [r2, #0]
 800df22:	d1e0      	bne.n	800dee6 <_free_r+0x22>
 800df24:	6818      	ldr	r0, [r3, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	6053      	str	r3, [r2, #4]
 800df2a:	4408      	add	r0, r1
 800df2c:	6010      	str	r0, [r2, #0]
 800df2e:	e7da      	b.n	800dee6 <_free_r+0x22>
 800df30:	d902      	bls.n	800df38 <_free_r+0x74>
 800df32:	230c      	movs	r3, #12
 800df34:	602b      	str	r3, [r5, #0]
 800df36:	e7d6      	b.n	800dee6 <_free_r+0x22>
 800df38:	6820      	ldr	r0, [r4, #0]
 800df3a:	1821      	adds	r1, r4, r0
 800df3c:	428b      	cmp	r3, r1
 800df3e:	bf04      	itt	eq
 800df40:	6819      	ldreq	r1, [r3, #0]
 800df42:	685b      	ldreq	r3, [r3, #4]
 800df44:	6063      	str	r3, [r4, #4]
 800df46:	bf04      	itt	eq
 800df48:	1809      	addeq	r1, r1, r0
 800df4a:	6021      	streq	r1, [r4, #0]
 800df4c:	6054      	str	r4, [r2, #4]
 800df4e:	e7ca      	b.n	800dee6 <_free_r+0x22>
 800df50:	bd38      	pop	{r3, r4, r5, pc}
 800df52:	bf00      	nop
 800df54:	200056b8 	.word	0x200056b8

0800df58 <__ssputs_r>:
 800df58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df5c:	688e      	ldr	r6, [r1, #8]
 800df5e:	461f      	mov	r7, r3
 800df60:	42be      	cmp	r6, r7
 800df62:	680b      	ldr	r3, [r1, #0]
 800df64:	4682      	mov	sl, r0
 800df66:	460c      	mov	r4, r1
 800df68:	4690      	mov	r8, r2
 800df6a:	d82d      	bhi.n	800dfc8 <__ssputs_r+0x70>
 800df6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df74:	d026      	beq.n	800dfc4 <__ssputs_r+0x6c>
 800df76:	6965      	ldr	r5, [r4, #20]
 800df78:	6909      	ldr	r1, [r1, #16]
 800df7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df7e:	eba3 0901 	sub.w	r9, r3, r1
 800df82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df86:	1c7b      	adds	r3, r7, #1
 800df88:	444b      	add	r3, r9
 800df8a:	106d      	asrs	r5, r5, #1
 800df8c:	429d      	cmp	r5, r3
 800df8e:	bf38      	it	cc
 800df90:	461d      	movcc	r5, r3
 800df92:	0553      	lsls	r3, r2, #21
 800df94:	d527      	bpl.n	800dfe6 <__ssputs_r+0x8e>
 800df96:	4629      	mov	r1, r5
 800df98:	f7ff fbd8 	bl	800d74c <_malloc_r>
 800df9c:	4606      	mov	r6, r0
 800df9e:	b360      	cbz	r0, 800dffa <__ssputs_r+0xa2>
 800dfa0:	6921      	ldr	r1, [r4, #16]
 800dfa2:	464a      	mov	r2, r9
 800dfa4:	f000 ff23 	bl	800edee <memcpy>
 800dfa8:	89a3      	ldrh	r3, [r4, #12]
 800dfaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfb2:	81a3      	strh	r3, [r4, #12]
 800dfb4:	6126      	str	r6, [r4, #16]
 800dfb6:	6165      	str	r5, [r4, #20]
 800dfb8:	444e      	add	r6, r9
 800dfba:	eba5 0509 	sub.w	r5, r5, r9
 800dfbe:	6026      	str	r6, [r4, #0]
 800dfc0:	60a5      	str	r5, [r4, #8]
 800dfc2:	463e      	mov	r6, r7
 800dfc4:	42be      	cmp	r6, r7
 800dfc6:	d900      	bls.n	800dfca <__ssputs_r+0x72>
 800dfc8:	463e      	mov	r6, r7
 800dfca:	6820      	ldr	r0, [r4, #0]
 800dfcc:	4632      	mov	r2, r6
 800dfce:	4641      	mov	r1, r8
 800dfd0:	f000 fef3 	bl	800edba <memmove>
 800dfd4:	68a3      	ldr	r3, [r4, #8]
 800dfd6:	1b9b      	subs	r3, r3, r6
 800dfd8:	60a3      	str	r3, [r4, #8]
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	4433      	add	r3, r6
 800dfde:	6023      	str	r3, [r4, #0]
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe6:	462a      	mov	r2, r5
 800dfe8:	f000 ff16 	bl	800ee18 <_realloc_r>
 800dfec:	4606      	mov	r6, r0
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d1e0      	bne.n	800dfb4 <__ssputs_r+0x5c>
 800dff2:	6921      	ldr	r1, [r4, #16]
 800dff4:	4650      	mov	r0, sl
 800dff6:	f7ff ff65 	bl	800dec4 <_free_r>
 800dffa:	230c      	movs	r3, #12
 800dffc:	f8ca 3000 	str.w	r3, [sl]
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e006:	81a3      	strh	r3, [r4, #12]
 800e008:	f04f 30ff 	mov.w	r0, #4294967295
 800e00c:	e7e9      	b.n	800dfe2 <__ssputs_r+0x8a>
	...

0800e010 <_svfiprintf_r>:
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	4698      	mov	r8, r3
 800e016:	898b      	ldrh	r3, [r1, #12]
 800e018:	061b      	lsls	r3, r3, #24
 800e01a:	b09d      	sub	sp, #116	@ 0x74
 800e01c:	4607      	mov	r7, r0
 800e01e:	460d      	mov	r5, r1
 800e020:	4614      	mov	r4, r2
 800e022:	d510      	bpl.n	800e046 <_svfiprintf_r+0x36>
 800e024:	690b      	ldr	r3, [r1, #16]
 800e026:	b973      	cbnz	r3, 800e046 <_svfiprintf_r+0x36>
 800e028:	2140      	movs	r1, #64	@ 0x40
 800e02a:	f7ff fb8f 	bl	800d74c <_malloc_r>
 800e02e:	6028      	str	r0, [r5, #0]
 800e030:	6128      	str	r0, [r5, #16]
 800e032:	b930      	cbnz	r0, 800e042 <_svfiprintf_r+0x32>
 800e034:	230c      	movs	r3, #12
 800e036:	603b      	str	r3, [r7, #0]
 800e038:	f04f 30ff 	mov.w	r0, #4294967295
 800e03c:	b01d      	add	sp, #116	@ 0x74
 800e03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e042:	2340      	movs	r3, #64	@ 0x40
 800e044:	616b      	str	r3, [r5, #20]
 800e046:	2300      	movs	r3, #0
 800e048:	9309      	str	r3, [sp, #36]	@ 0x24
 800e04a:	2320      	movs	r3, #32
 800e04c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e050:	f8cd 800c 	str.w	r8, [sp, #12]
 800e054:	2330      	movs	r3, #48	@ 0x30
 800e056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e1f4 <_svfiprintf_r+0x1e4>
 800e05a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e05e:	f04f 0901 	mov.w	r9, #1
 800e062:	4623      	mov	r3, r4
 800e064:	469a      	mov	sl, r3
 800e066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e06a:	b10a      	cbz	r2, 800e070 <_svfiprintf_r+0x60>
 800e06c:	2a25      	cmp	r2, #37	@ 0x25
 800e06e:	d1f9      	bne.n	800e064 <_svfiprintf_r+0x54>
 800e070:	ebba 0b04 	subs.w	fp, sl, r4
 800e074:	d00b      	beq.n	800e08e <_svfiprintf_r+0x7e>
 800e076:	465b      	mov	r3, fp
 800e078:	4622      	mov	r2, r4
 800e07a:	4629      	mov	r1, r5
 800e07c:	4638      	mov	r0, r7
 800e07e:	f7ff ff6b 	bl	800df58 <__ssputs_r>
 800e082:	3001      	adds	r0, #1
 800e084:	f000 80a7 	beq.w	800e1d6 <_svfiprintf_r+0x1c6>
 800e088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e08a:	445a      	add	r2, fp
 800e08c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e08e:	f89a 3000 	ldrb.w	r3, [sl]
 800e092:	2b00      	cmp	r3, #0
 800e094:	f000 809f 	beq.w	800e1d6 <_svfiprintf_r+0x1c6>
 800e098:	2300      	movs	r3, #0
 800e09a:	f04f 32ff 	mov.w	r2, #4294967295
 800e09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0a2:	f10a 0a01 	add.w	sl, sl, #1
 800e0a6:	9304      	str	r3, [sp, #16]
 800e0a8:	9307      	str	r3, [sp, #28]
 800e0aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0b0:	4654      	mov	r4, sl
 800e0b2:	2205      	movs	r2, #5
 800e0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b8:	484e      	ldr	r0, [pc, #312]	@ (800e1f4 <_svfiprintf_r+0x1e4>)
 800e0ba:	f7f2 f891 	bl	80001e0 <memchr>
 800e0be:	9a04      	ldr	r2, [sp, #16]
 800e0c0:	b9d8      	cbnz	r0, 800e0fa <_svfiprintf_r+0xea>
 800e0c2:	06d0      	lsls	r0, r2, #27
 800e0c4:	bf44      	itt	mi
 800e0c6:	2320      	movmi	r3, #32
 800e0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0cc:	0711      	lsls	r1, r2, #28
 800e0ce:	bf44      	itt	mi
 800e0d0:	232b      	movmi	r3, #43	@ 0x2b
 800e0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0dc:	d015      	beq.n	800e10a <_svfiprintf_r+0xfa>
 800e0de:	9a07      	ldr	r2, [sp, #28]
 800e0e0:	4654      	mov	r4, sl
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	f04f 0c0a 	mov.w	ip, #10
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0ee:	3b30      	subs	r3, #48	@ 0x30
 800e0f0:	2b09      	cmp	r3, #9
 800e0f2:	d94b      	bls.n	800e18c <_svfiprintf_r+0x17c>
 800e0f4:	b1b0      	cbz	r0, 800e124 <_svfiprintf_r+0x114>
 800e0f6:	9207      	str	r2, [sp, #28]
 800e0f8:	e014      	b.n	800e124 <_svfiprintf_r+0x114>
 800e0fa:	eba0 0308 	sub.w	r3, r0, r8
 800e0fe:	fa09 f303 	lsl.w	r3, r9, r3
 800e102:	4313      	orrs	r3, r2
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	46a2      	mov	sl, r4
 800e108:	e7d2      	b.n	800e0b0 <_svfiprintf_r+0xa0>
 800e10a:	9b03      	ldr	r3, [sp, #12]
 800e10c:	1d19      	adds	r1, r3, #4
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	9103      	str	r1, [sp, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	bfbb      	ittet	lt
 800e116:	425b      	neglt	r3, r3
 800e118:	f042 0202 	orrlt.w	r2, r2, #2
 800e11c:	9307      	strge	r3, [sp, #28]
 800e11e:	9307      	strlt	r3, [sp, #28]
 800e120:	bfb8      	it	lt
 800e122:	9204      	strlt	r2, [sp, #16]
 800e124:	7823      	ldrb	r3, [r4, #0]
 800e126:	2b2e      	cmp	r3, #46	@ 0x2e
 800e128:	d10a      	bne.n	800e140 <_svfiprintf_r+0x130>
 800e12a:	7863      	ldrb	r3, [r4, #1]
 800e12c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e12e:	d132      	bne.n	800e196 <_svfiprintf_r+0x186>
 800e130:	9b03      	ldr	r3, [sp, #12]
 800e132:	1d1a      	adds	r2, r3, #4
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	9203      	str	r2, [sp, #12]
 800e138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e13c:	3402      	adds	r4, #2
 800e13e:	9305      	str	r3, [sp, #20]
 800e140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e204 <_svfiprintf_r+0x1f4>
 800e144:	7821      	ldrb	r1, [r4, #0]
 800e146:	2203      	movs	r2, #3
 800e148:	4650      	mov	r0, sl
 800e14a:	f7f2 f849 	bl	80001e0 <memchr>
 800e14e:	b138      	cbz	r0, 800e160 <_svfiprintf_r+0x150>
 800e150:	9b04      	ldr	r3, [sp, #16]
 800e152:	eba0 000a 	sub.w	r0, r0, sl
 800e156:	2240      	movs	r2, #64	@ 0x40
 800e158:	4082      	lsls	r2, r0
 800e15a:	4313      	orrs	r3, r2
 800e15c:	3401      	adds	r4, #1
 800e15e:	9304      	str	r3, [sp, #16]
 800e160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e164:	4824      	ldr	r0, [pc, #144]	@ (800e1f8 <_svfiprintf_r+0x1e8>)
 800e166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e16a:	2206      	movs	r2, #6
 800e16c:	f7f2 f838 	bl	80001e0 <memchr>
 800e170:	2800      	cmp	r0, #0
 800e172:	d036      	beq.n	800e1e2 <_svfiprintf_r+0x1d2>
 800e174:	4b21      	ldr	r3, [pc, #132]	@ (800e1fc <_svfiprintf_r+0x1ec>)
 800e176:	bb1b      	cbnz	r3, 800e1c0 <_svfiprintf_r+0x1b0>
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	3307      	adds	r3, #7
 800e17c:	f023 0307 	bic.w	r3, r3, #7
 800e180:	3308      	adds	r3, #8
 800e182:	9303      	str	r3, [sp, #12]
 800e184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e186:	4433      	add	r3, r6
 800e188:	9309      	str	r3, [sp, #36]	@ 0x24
 800e18a:	e76a      	b.n	800e062 <_svfiprintf_r+0x52>
 800e18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e190:	460c      	mov	r4, r1
 800e192:	2001      	movs	r0, #1
 800e194:	e7a8      	b.n	800e0e8 <_svfiprintf_r+0xd8>
 800e196:	2300      	movs	r3, #0
 800e198:	3401      	adds	r4, #1
 800e19a:	9305      	str	r3, [sp, #20]
 800e19c:	4619      	mov	r1, r3
 800e19e:	f04f 0c0a 	mov.w	ip, #10
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1a8:	3a30      	subs	r2, #48	@ 0x30
 800e1aa:	2a09      	cmp	r2, #9
 800e1ac:	d903      	bls.n	800e1b6 <_svfiprintf_r+0x1a6>
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0c6      	beq.n	800e140 <_svfiprintf_r+0x130>
 800e1b2:	9105      	str	r1, [sp, #20]
 800e1b4:	e7c4      	b.n	800e140 <_svfiprintf_r+0x130>
 800e1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e7f0      	b.n	800e1a2 <_svfiprintf_r+0x192>
 800e1c0:	ab03      	add	r3, sp, #12
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	462a      	mov	r2, r5
 800e1c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e200 <_svfiprintf_r+0x1f0>)
 800e1c8:	a904      	add	r1, sp, #16
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	f3af 8000 	nop.w
 800e1d0:	1c42      	adds	r2, r0, #1
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	d1d6      	bne.n	800e184 <_svfiprintf_r+0x174>
 800e1d6:	89ab      	ldrh	r3, [r5, #12]
 800e1d8:	065b      	lsls	r3, r3, #25
 800e1da:	f53f af2d 	bmi.w	800e038 <_svfiprintf_r+0x28>
 800e1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1e0:	e72c      	b.n	800e03c <_svfiprintf_r+0x2c>
 800e1e2:	ab03      	add	r3, sp, #12
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	462a      	mov	r2, r5
 800e1e8:	4b05      	ldr	r3, [pc, #20]	@ (800e200 <_svfiprintf_r+0x1f0>)
 800e1ea:	a904      	add	r1, sp, #16
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	f000 fa45 	bl	800e67c <_printf_i>
 800e1f2:	e7ed      	b.n	800e1d0 <_svfiprintf_r+0x1c0>
 800e1f4:	080104be 	.word	0x080104be
 800e1f8:	080104c8 	.word	0x080104c8
 800e1fc:	00000000 	.word	0x00000000
 800e200:	0800df59 	.word	0x0800df59
 800e204:	080104c4 	.word	0x080104c4

0800e208 <_sungetc_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	1c4b      	adds	r3, r1, #1
 800e20c:	4614      	mov	r4, r2
 800e20e:	d103      	bne.n	800e218 <_sungetc_r+0x10>
 800e210:	f04f 35ff 	mov.w	r5, #4294967295
 800e214:	4628      	mov	r0, r5
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	8993      	ldrh	r3, [r2, #12]
 800e21a:	f023 0320 	bic.w	r3, r3, #32
 800e21e:	8193      	strh	r3, [r2, #12]
 800e220:	6853      	ldr	r3, [r2, #4]
 800e222:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e224:	b2cd      	uxtb	r5, r1
 800e226:	b18a      	cbz	r2, 800e24c <_sungetc_r+0x44>
 800e228:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e22a:	429a      	cmp	r2, r3
 800e22c:	dd08      	ble.n	800e240 <_sungetc_r+0x38>
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	1e5a      	subs	r2, r3, #1
 800e232:	6022      	str	r2, [r4, #0]
 800e234:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e238:	6863      	ldr	r3, [r4, #4]
 800e23a:	3301      	adds	r3, #1
 800e23c:	6063      	str	r3, [r4, #4]
 800e23e:	e7e9      	b.n	800e214 <_sungetc_r+0xc>
 800e240:	4621      	mov	r1, r4
 800e242:	f000 fd80 	bl	800ed46 <__submore>
 800e246:	2800      	cmp	r0, #0
 800e248:	d0f1      	beq.n	800e22e <_sungetc_r+0x26>
 800e24a:	e7e1      	b.n	800e210 <_sungetc_r+0x8>
 800e24c:	6921      	ldr	r1, [r4, #16]
 800e24e:	6822      	ldr	r2, [r4, #0]
 800e250:	b141      	cbz	r1, 800e264 <_sungetc_r+0x5c>
 800e252:	4291      	cmp	r1, r2
 800e254:	d206      	bcs.n	800e264 <_sungetc_r+0x5c>
 800e256:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e25a:	42a9      	cmp	r1, r5
 800e25c:	d102      	bne.n	800e264 <_sungetc_r+0x5c>
 800e25e:	3a01      	subs	r2, #1
 800e260:	6022      	str	r2, [r4, #0]
 800e262:	e7ea      	b.n	800e23a <_sungetc_r+0x32>
 800e264:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e26c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e26e:	2303      	movs	r3, #3
 800e270:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e272:	4623      	mov	r3, r4
 800e274:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	2301      	movs	r3, #1
 800e27c:	e7de      	b.n	800e23c <_sungetc_r+0x34>

0800e27e <__ssrefill_r>:
 800e27e:	b510      	push	{r4, lr}
 800e280:	460c      	mov	r4, r1
 800e282:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e284:	b169      	cbz	r1, 800e2a2 <__ssrefill_r+0x24>
 800e286:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e28a:	4299      	cmp	r1, r3
 800e28c:	d001      	beq.n	800e292 <__ssrefill_r+0x14>
 800e28e:	f7ff fe19 	bl	800dec4 <_free_r>
 800e292:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e294:	6063      	str	r3, [r4, #4]
 800e296:	2000      	movs	r0, #0
 800e298:	6360      	str	r0, [r4, #52]	@ 0x34
 800e29a:	b113      	cbz	r3, 800e2a2 <__ssrefill_r+0x24>
 800e29c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e29e:	6023      	str	r3, [r4, #0]
 800e2a0:	bd10      	pop	{r4, pc}
 800e2a2:	6923      	ldr	r3, [r4, #16]
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	6063      	str	r3, [r4, #4]
 800e2aa:	89a3      	ldrh	r3, [r4, #12]
 800e2ac:	f043 0320 	orr.w	r3, r3, #32
 800e2b0:	81a3      	strh	r3, [r4, #12]
 800e2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b6:	e7f3      	b.n	800e2a0 <__ssrefill_r+0x22>

0800e2b8 <__ssvfiscanf_r>:
 800e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2bc:	460c      	mov	r4, r1
 800e2be:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e2c8:	49a5      	ldr	r1, [pc, #660]	@ (800e560 <__ssvfiscanf_r+0x2a8>)
 800e2ca:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e2cc:	f10d 0804 	add.w	r8, sp, #4
 800e2d0:	49a4      	ldr	r1, [pc, #656]	@ (800e564 <__ssvfiscanf_r+0x2ac>)
 800e2d2:	4fa5      	ldr	r7, [pc, #660]	@ (800e568 <__ssvfiscanf_r+0x2b0>)
 800e2d4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e2d8:	4606      	mov	r6, r0
 800e2da:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	7813      	ldrb	r3, [r2, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 8158 	beq.w	800e596 <__ssvfiscanf_r+0x2de>
 800e2e6:	5cf9      	ldrb	r1, [r7, r3]
 800e2e8:	f011 0108 	ands.w	r1, r1, #8
 800e2ec:	f102 0501 	add.w	r5, r2, #1
 800e2f0:	d019      	beq.n	800e326 <__ssvfiscanf_r+0x6e>
 800e2f2:	6863      	ldr	r3, [r4, #4]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	dd0f      	ble.n	800e318 <__ssvfiscanf_r+0x60>
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	781a      	ldrb	r2, [r3, #0]
 800e2fc:	5cba      	ldrb	r2, [r7, r2]
 800e2fe:	0712      	lsls	r2, r2, #28
 800e300:	d401      	bmi.n	800e306 <__ssvfiscanf_r+0x4e>
 800e302:	462a      	mov	r2, r5
 800e304:	e7eb      	b.n	800e2de <__ssvfiscanf_r+0x26>
 800e306:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e308:	3201      	adds	r2, #1
 800e30a:	9245      	str	r2, [sp, #276]	@ 0x114
 800e30c:	6862      	ldr	r2, [r4, #4]
 800e30e:	3301      	adds	r3, #1
 800e310:	3a01      	subs	r2, #1
 800e312:	6062      	str	r2, [r4, #4]
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	e7ec      	b.n	800e2f2 <__ssvfiscanf_r+0x3a>
 800e318:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e31a:	4621      	mov	r1, r4
 800e31c:	4630      	mov	r0, r6
 800e31e:	4798      	blx	r3
 800e320:	2800      	cmp	r0, #0
 800e322:	d0e9      	beq.n	800e2f8 <__ssvfiscanf_r+0x40>
 800e324:	e7ed      	b.n	800e302 <__ssvfiscanf_r+0x4a>
 800e326:	2b25      	cmp	r3, #37	@ 0x25
 800e328:	d012      	beq.n	800e350 <__ssvfiscanf_r+0x98>
 800e32a:	4699      	mov	r9, r3
 800e32c:	6863      	ldr	r3, [r4, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f340 8093 	ble.w	800e45a <__ssvfiscanf_r+0x1a2>
 800e334:	6822      	ldr	r2, [r4, #0]
 800e336:	7813      	ldrb	r3, [r2, #0]
 800e338:	454b      	cmp	r3, r9
 800e33a:	f040 812c 	bne.w	800e596 <__ssvfiscanf_r+0x2de>
 800e33e:	6863      	ldr	r3, [r4, #4]
 800e340:	3b01      	subs	r3, #1
 800e342:	6063      	str	r3, [r4, #4]
 800e344:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e346:	3201      	adds	r2, #1
 800e348:	3301      	adds	r3, #1
 800e34a:	6022      	str	r2, [r4, #0]
 800e34c:	9345      	str	r3, [sp, #276]	@ 0x114
 800e34e:	e7d8      	b.n	800e302 <__ssvfiscanf_r+0x4a>
 800e350:	9141      	str	r1, [sp, #260]	@ 0x104
 800e352:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e354:	7853      	ldrb	r3, [r2, #1]
 800e356:	2b2a      	cmp	r3, #42	@ 0x2a
 800e358:	bf02      	ittt	eq
 800e35a:	2310      	moveq	r3, #16
 800e35c:	1c95      	addeq	r5, r2, #2
 800e35e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e360:	220a      	movs	r2, #10
 800e362:	46a9      	mov	r9, r5
 800e364:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e368:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e36c:	2b09      	cmp	r3, #9
 800e36e:	d91e      	bls.n	800e3ae <__ssvfiscanf_r+0xf6>
 800e370:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e56c <__ssvfiscanf_r+0x2b4>
 800e374:	2203      	movs	r2, #3
 800e376:	4650      	mov	r0, sl
 800e378:	f7f1 ff32 	bl	80001e0 <memchr>
 800e37c:	b138      	cbz	r0, 800e38e <__ssvfiscanf_r+0xd6>
 800e37e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e380:	eba0 000a 	sub.w	r0, r0, sl
 800e384:	2301      	movs	r3, #1
 800e386:	4083      	lsls	r3, r0
 800e388:	4313      	orrs	r3, r2
 800e38a:	9341      	str	r3, [sp, #260]	@ 0x104
 800e38c:	464d      	mov	r5, r9
 800e38e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e392:	2b78      	cmp	r3, #120	@ 0x78
 800e394:	d806      	bhi.n	800e3a4 <__ssvfiscanf_r+0xec>
 800e396:	2b57      	cmp	r3, #87	@ 0x57
 800e398:	d810      	bhi.n	800e3bc <__ssvfiscanf_r+0x104>
 800e39a:	2b25      	cmp	r3, #37	@ 0x25
 800e39c:	d0c5      	beq.n	800e32a <__ssvfiscanf_r+0x72>
 800e39e:	d857      	bhi.n	800e450 <__ssvfiscanf_r+0x198>
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d065      	beq.n	800e470 <__ssvfiscanf_r+0x1b8>
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e3a8:	230a      	movs	r3, #10
 800e3aa:	9342      	str	r3, [sp, #264]	@ 0x108
 800e3ac:	e078      	b.n	800e4a0 <__ssvfiscanf_r+0x1e8>
 800e3ae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e3b0:	fb02 1103 	mla	r1, r2, r3, r1
 800e3b4:	3930      	subs	r1, #48	@ 0x30
 800e3b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e3b8:	464d      	mov	r5, r9
 800e3ba:	e7d2      	b.n	800e362 <__ssvfiscanf_r+0xaa>
 800e3bc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e3c0:	2a20      	cmp	r2, #32
 800e3c2:	d8ef      	bhi.n	800e3a4 <__ssvfiscanf_r+0xec>
 800e3c4:	a101      	add	r1, pc, #4	@ (adr r1, 800e3cc <__ssvfiscanf_r+0x114>)
 800e3c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e3ca:	bf00      	nop
 800e3cc:	0800e47f 	.word	0x0800e47f
 800e3d0:	0800e3a5 	.word	0x0800e3a5
 800e3d4:	0800e3a5 	.word	0x0800e3a5
 800e3d8:	0800e4d9 	.word	0x0800e4d9
 800e3dc:	0800e3a5 	.word	0x0800e3a5
 800e3e0:	0800e3a5 	.word	0x0800e3a5
 800e3e4:	0800e3a5 	.word	0x0800e3a5
 800e3e8:	0800e3a5 	.word	0x0800e3a5
 800e3ec:	0800e3a5 	.word	0x0800e3a5
 800e3f0:	0800e3a5 	.word	0x0800e3a5
 800e3f4:	0800e3a5 	.word	0x0800e3a5
 800e3f8:	0800e4ef 	.word	0x0800e4ef
 800e3fc:	0800e4d5 	.word	0x0800e4d5
 800e400:	0800e457 	.word	0x0800e457
 800e404:	0800e457 	.word	0x0800e457
 800e408:	0800e457 	.word	0x0800e457
 800e40c:	0800e3a5 	.word	0x0800e3a5
 800e410:	0800e491 	.word	0x0800e491
 800e414:	0800e3a5 	.word	0x0800e3a5
 800e418:	0800e3a5 	.word	0x0800e3a5
 800e41c:	0800e3a5 	.word	0x0800e3a5
 800e420:	0800e3a5 	.word	0x0800e3a5
 800e424:	0800e4ff 	.word	0x0800e4ff
 800e428:	0800e499 	.word	0x0800e499
 800e42c:	0800e477 	.word	0x0800e477
 800e430:	0800e3a5 	.word	0x0800e3a5
 800e434:	0800e3a5 	.word	0x0800e3a5
 800e438:	0800e4fb 	.word	0x0800e4fb
 800e43c:	0800e3a5 	.word	0x0800e3a5
 800e440:	0800e4d5 	.word	0x0800e4d5
 800e444:	0800e3a5 	.word	0x0800e3a5
 800e448:	0800e3a5 	.word	0x0800e3a5
 800e44c:	0800e47f 	.word	0x0800e47f
 800e450:	3b45      	subs	r3, #69	@ 0x45
 800e452:	2b02      	cmp	r3, #2
 800e454:	d8a6      	bhi.n	800e3a4 <__ssvfiscanf_r+0xec>
 800e456:	2305      	movs	r3, #5
 800e458:	e021      	b.n	800e49e <__ssvfiscanf_r+0x1e6>
 800e45a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e45c:	4621      	mov	r1, r4
 800e45e:	4630      	mov	r0, r6
 800e460:	4798      	blx	r3
 800e462:	2800      	cmp	r0, #0
 800e464:	f43f af66 	beq.w	800e334 <__ssvfiscanf_r+0x7c>
 800e468:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e46a:	2800      	cmp	r0, #0
 800e46c:	f040 808b 	bne.w	800e586 <__ssvfiscanf_r+0x2ce>
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	e08b      	b.n	800e58e <__ssvfiscanf_r+0x2d6>
 800e476:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e478:	f042 0220 	orr.w	r2, r2, #32
 800e47c:	9241      	str	r2, [sp, #260]	@ 0x104
 800e47e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e484:	9241      	str	r2, [sp, #260]	@ 0x104
 800e486:	2210      	movs	r2, #16
 800e488:	2b6e      	cmp	r3, #110	@ 0x6e
 800e48a:	9242      	str	r2, [sp, #264]	@ 0x108
 800e48c:	d902      	bls.n	800e494 <__ssvfiscanf_r+0x1dc>
 800e48e:	e005      	b.n	800e49c <__ssvfiscanf_r+0x1e4>
 800e490:	2300      	movs	r3, #0
 800e492:	9342      	str	r3, [sp, #264]	@ 0x108
 800e494:	2303      	movs	r3, #3
 800e496:	e002      	b.n	800e49e <__ssvfiscanf_r+0x1e6>
 800e498:	2308      	movs	r3, #8
 800e49a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e49c:	2304      	movs	r3, #4
 800e49e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e4a0:	6863      	ldr	r3, [r4, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dd39      	ble.n	800e51a <__ssvfiscanf_r+0x262>
 800e4a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e4a8:	0659      	lsls	r1, r3, #25
 800e4aa:	d404      	bmi.n	800e4b6 <__ssvfiscanf_r+0x1fe>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	781a      	ldrb	r2, [r3, #0]
 800e4b0:	5cba      	ldrb	r2, [r7, r2]
 800e4b2:	0712      	lsls	r2, r2, #28
 800e4b4:	d438      	bmi.n	800e528 <__ssvfiscanf_r+0x270>
 800e4b6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	dc47      	bgt.n	800e54c <__ssvfiscanf_r+0x294>
 800e4bc:	466b      	mov	r3, sp
 800e4be:	4622      	mov	r2, r4
 800e4c0:	a941      	add	r1, sp, #260	@ 0x104
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f000 f9fa 	bl	800e8bc <_scanf_chars>
 800e4c8:	2801      	cmp	r0, #1
 800e4ca:	d064      	beq.n	800e596 <__ssvfiscanf_r+0x2de>
 800e4cc:	2802      	cmp	r0, #2
 800e4ce:	f47f af18 	bne.w	800e302 <__ssvfiscanf_r+0x4a>
 800e4d2:	e7c9      	b.n	800e468 <__ssvfiscanf_r+0x1b0>
 800e4d4:	220a      	movs	r2, #10
 800e4d6:	e7d7      	b.n	800e488 <__ssvfiscanf_r+0x1d0>
 800e4d8:	4629      	mov	r1, r5
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f000 fbfa 	bl	800ecd4 <__sccl>
 800e4e0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e4e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4e6:	9341      	str	r3, [sp, #260]	@ 0x104
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e7d7      	b.n	800e49e <__ssvfiscanf_r+0x1e6>
 800e4ee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e4f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4f4:	9341      	str	r3, [sp, #260]	@ 0x104
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e7d1      	b.n	800e49e <__ssvfiscanf_r+0x1e6>
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	e7cf      	b.n	800e49e <__ssvfiscanf_r+0x1e6>
 800e4fe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e500:	06c3      	lsls	r3, r0, #27
 800e502:	f53f aefe 	bmi.w	800e302 <__ssvfiscanf_r+0x4a>
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e50a:	1d19      	adds	r1, r3, #4
 800e50c:	9100      	str	r1, [sp, #0]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	07c0      	lsls	r0, r0, #31
 800e512:	bf4c      	ite	mi
 800e514:	801a      	strhmi	r2, [r3, #0]
 800e516:	601a      	strpl	r2, [r3, #0]
 800e518:	e6f3      	b.n	800e302 <__ssvfiscanf_r+0x4a>
 800e51a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e51c:	4621      	mov	r1, r4
 800e51e:	4630      	mov	r0, r6
 800e520:	4798      	blx	r3
 800e522:	2800      	cmp	r0, #0
 800e524:	d0bf      	beq.n	800e4a6 <__ssvfiscanf_r+0x1ee>
 800e526:	e79f      	b.n	800e468 <__ssvfiscanf_r+0x1b0>
 800e528:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e52a:	3201      	adds	r2, #1
 800e52c:	9245      	str	r2, [sp, #276]	@ 0x114
 800e52e:	6862      	ldr	r2, [r4, #4]
 800e530:	3a01      	subs	r2, #1
 800e532:	2a00      	cmp	r2, #0
 800e534:	6062      	str	r2, [r4, #4]
 800e536:	dd02      	ble.n	800e53e <__ssvfiscanf_r+0x286>
 800e538:	3301      	adds	r3, #1
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	e7b6      	b.n	800e4ac <__ssvfiscanf_r+0x1f4>
 800e53e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e540:	4621      	mov	r1, r4
 800e542:	4630      	mov	r0, r6
 800e544:	4798      	blx	r3
 800e546:	2800      	cmp	r0, #0
 800e548:	d0b0      	beq.n	800e4ac <__ssvfiscanf_r+0x1f4>
 800e54a:	e78d      	b.n	800e468 <__ssvfiscanf_r+0x1b0>
 800e54c:	2b04      	cmp	r3, #4
 800e54e:	dc0f      	bgt.n	800e570 <__ssvfiscanf_r+0x2b8>
 800e550:	466b      	mov	r3, sp
 800e552:	4622      	mov	r2, r4
 800e554:	a941      	add	r1, sp, #260	@ 0x104
 800e556:	4630      	mov	r0, r6
 800e558:	f000 fa0a 	bl	800e970 <_scanf_i>
 800e55c:	e7b4      	b.n	800e4c8 <__ssvfiscanf_r+0x210>
 800e55e:	bf00      	nop
 800e560:	0800e209 	.word	0x0800e209
 800e564:	0800e27f 	.word	0x0800e27f
 800e568:	08010311 	.word	0x08010311
 800e56c:	080104c4 	.word	0x080104c4
 800e570:	4b0a      	ldr	r3, [pc, #40]	@ (800e59c <__ssvfiscanf_r+0x2e4>)
 800e572:	2b00      	cmp	r3, #0
 800e574:	f43f aec5 	beq.w	800e302 <__ssvfiscanf_r+0x4a>
 800e578:	466b      	mov	r3, sp
 800e57a:	4622      	mov	r2, r4
 800e57c:	a941      	add	r1, sp, #260	@ 0x104
 800e57e:	4630      	mov	r0, r6
 800e580:	f3af 8000 	nop.w
 800e584:	e7a0      	b.n	800e4c8 <__ssvfiscanf_r+0x210>
 800e586:	89a3      	ldrh	r3, [r4, #12]
 800e588:	065b      	lsls	r3, r3, #25
 800e58a:	f53f af71 	bmi.w	800e470 <__ssvfiscanf_r+0x1b8>
 800e58e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e596:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e598:	e7f9      	b.n	800e58e <__ssvfiscanf_r+0x2d6>
 800e59a:	bf00      	nop
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <_printf_common>:
 800e5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a4:	4616      	mov	r6, r2
 800e5a6:	4698      	mov	r8, r3
 800e5a8:	688a      	ldr	r2, [r1, #8]
 800e5aa:	690b      	ldr	r3, [r1, #16]
 800e5ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	bfb8      	it	lt
 800e5b4:	4613      	movlt	r3, r2
 800e5b6:	6033      	str	r3, [r6, #0]
 800e5b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5bc:	4607      	mov	r7, r0
 800e5be:	460c      	mov	r4, r1
 800e5c0:	b10a      	cbz	r2, 800e5c6 <_printf_common+0x26>
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	6033      	str	r3, [r6, #0]
 800e5c6:	6823      	ldr	r3, [r4, #0]
 800e5c8:	0699      	lsls	r1, r3, #26
 800e5ca:	bf42      	ittt	mi
 800e5cc:	6833      	ldrmi	r3, [r6, #0]
 800e5ce:	3302      	addmi	r3, #2
 800e5d0:	6033      	strmi	r3, [r6, #0]
 800e5d2:	6825      	ldr	r5, [r4, #0]
 800e5d4:	f015 0506 	ands.w	r5, r5, #6
 800e5d8:	d106      	bne.n	800e5e8 <_printf_common+0x48>
 800e5da:	f104 0a19 	add.w	sl, r4, #25
 800e5de:	68e3      	ldr	r3, [r4, #12]
 800e5e0:	6832      	ldr	r2, [r6, #0]
 800e5e2:	1a9b      	subs	r3, r3, r2
 800e5e4:	42ab      	cmp	r3, r5
 800e5e6:	dc26      	bgt.n	800e636 <_printf_common+0x96>
 800e5e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5ec:	6822      	ldr	r2, [r4, #0]
 800e5ee:	3b00      	subs	r3, #0
 800e5f0:	bf18      	it	ne
 800e5f2:	2301      	movne	r3, #1
 800e5f4:	0692      	lsls	r2, r2, #26
 800e5f6:	d42b      	bmi.n	800e650 <_printf_common+0xb0>
 800e5f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5fc:	4641      	mov	r1, r8
 800e5fe:	4638      	mov	r0, r7
 800e600:	47c8      	blx	r9
 800e602:	3001      	adds	r0, #1
 800e604:	d01e      	beq.n	800e644 <_printf_common+0xa4>
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	6922      	ldr	r2, [r4, #16]
 800e60a:	f003 0306 	and.w	r3, r3, #6
 800e60e:	2b04      	cmp	r3, #4
 800e610:	bf02      	ittt	eq
 800e612:	68e5      	ldreq	r5, [r4, #12]
 800e614:	6833      	ldreq	r3, [r6, #0]
 800e616:	1aed      	subeq	r5, r5, r3
 800e618:	68a3      	ldr	r3, [r4, #8]
 800e61a:	bf0c      	ite	eq
 800e61c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e620:	2500      	movne	r5, #0
 800e622:	4293      	cmp	r3, r2
 800e624:	bfc4      	itt	gt
 800e626:	1a9b      	subgt	r3, r3, r2
 800e628:	18ed      	addgt	r5, r5, r3
 800e62a:	2600      	movs	r6, #0
 800e62c:	341a      	adds	r4, #26
 800e62e:	42b5      	cmp	r5, r6
 800e630:	d11a      	bne.n	800e668 <_printf_common+0xc8>
 800e632:	2000      	movs	r0, #0
 800e634:	e008      	b.n	800e648 <_printf_common+0xa8>
 800e636:	2301      	movs	r3, #1
 800e638:	4652      	mov	r2, sl
 800e63a:	4641      	mov	r1, r8
 800e63c:	4638      	mov	r0, r7
 800e63e:	47c8      	blx	r9
 800e640:	3001      	adds	r0, #1
 800e642:	d103      	bne.n	800e64c <_printf_common+0xac>
 800e644:	f04f 30ff 	mov.w	r0, #4294967295
 800e648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64c:	3501      	adds	r5, #1
 800e64e:	e7c6      	b.n	800e5de <_printf_common+0x3e>
 800e650:	18e1      	adds	r1, r4, r3
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	2030      	movs	r0, #48	@ 0x30
 800e656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e65a:	4422      	add	r2, r4
 800e65c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e664:	3302      	adds	r3, #2
 800e666:	e7c7      	b.n	800e5f8 <_printf_common+0x58>
 800e668:	2301      	movs	r3, #1
 800e66a:	4622      	mov	r2, r4
 800e66c:	4641      	mov	r1, r8
 800e66e:	4638      	mov	r0, r7
 800e670:	47c8      	blx	r9
 800e672:	3001      	adds	r0, #1
 800e674:	d0e6      	beq.n	800e644 <_printf_common+0xa4>
 800e676:	3601      	adds	r6, #1
 800e678:	e7d9      	b.n	800e62e <_printf_common+0x8e>
	...

0800e67c <_printf_i>:
 800e67c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e680:	7e0f      	ldrb	r7, [r1, #24]
 800e682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e684:	2f78      	cmp	r7, #120	@ 0x78
 800e686:	4691      	mov	r9, r2
 800e688:	4680      	mov	r8, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	469a      	mov	sl, r3
 800e68e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e692:	d807      	bhi.n	800e6a4 <_printf_i+0x28>
 800e694:	2f62      	cmp	r7, #98	@ 0x62
 800e696:	d80a      	bhi.n	800e6ae <_printf_i+0x32>
 800e698:	2f00      	cmp	r7, #0
 800e69a:	f000 80d2 	beq.w	800e842 <_printf_i+0x1c6>
 800e69e:	2f58      	cmp	r7, #88	@ 0x58
 800e6a0:	f000 80b9 	beq.w	800e816 <_printf_i+0x19a>
 800e6a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6ac:	e03a      	b.n	800e724 <_printf_i+0xa8>
 800e6ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6b2:	2b15      	cmp	r3, #21
 800e6b4:	d8f6      	bhi.n	800e6a4 <_printf_i+0x28>
 800e6b6:	a101      	add	r1, pc, #4	@ (adr r1, 800e6bc <_printf_i+0x40>)
 800e6b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6bc:	0800e715 	.word	0x0800e715
 800e6c0:	0800e729 	.word	0x0800e729
 800e6c4:	0800e6a5 	.word	0x0800e6a5
 800e6c8:	0800e6a5 	.word	0x0800e6a5
 800e6cc:	0800e6a5 	.word	0x0800e6a5
 800e6d0:	0800e6a5 	.word	0x0800e6a5
 800e6d4:	0800e729 	.word	0x0800e729
 800e6d8:	0800e6a5 	.word	0x0800e6a5
 800e6dc:	0800e6a5 	.word	0x0800e6a5
 800e6e0:	0800e6a5 	.word	0x0800e6a5
 800e6e4:	0800e6a5 	.word	0x0800e6a5
 800e6e8:	0800e829 	.word	0x0800e829
 800e6ec:	0800e753 	.word	0x0800e753
 800e6f0:	0800e7e3 	.word	0x0800e7e3
 800e6f4:	0800e6a5 	.word	0x0800e6a5
 800e6f8:	0800e6a5 	.word	0x0800e6a5
 800e6fc:	0800e84b 	.word	0x0800e84b
 800e700:	0800e6a5 	.word	0x0800e6a5
 800e704:	0800e753 	.word	0x0800e753
 800e708:	0800e6a5 	.word	0x0800e6a5
 800e70c:	0800e6a5 	.word	0x0800e6a5
 800e710:	0800e7eb 	.word	0x0800e7eb
 800e714:	6833      	ldr	r3, [r6, #0]
 800e716:	1d1a      	adds	r2, r3, #4
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6032      	str	r2, [r6, #0]
 800e71c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e724:	2301      	movs	r3, #1
 800e726:	e09d      	b.n	800e864 <_printf_i+0x1e8>
 800e728:	6833      	ldr	r3, [r6, #0]
 800e72a:	6820      	ldr	r0, [r4, #0]
 800e72c:	1d19      	adds	r1, r3, #4
 800e72e:	6031      	str	r1, [r6, #0]
 800e730:	0606      	lsls	r6, r0, #24
 800e732:	d501      	bpl.n	800e738 <_printf_i+0xbc>
 800e734:	681d      	ldr	r5, [r3, #0]
 800e736:	e003      	b.n	800e740 <_printf_i+0xc4>
 800e738:	0645      	lsls	r5, r0, #25
 800e73a:	d5fb      	bpl.n	800e734 <_printf_i+0xb8>
 800e73c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e740:	2d00      	cmp	r5, #0
 800e742:	da03      	bge.n	800e74c <_printf_i+0xd0>
 800e744:	232d      	movs	r3, #45	@ 0x2d
 800e746:	426d      	negs	r5, r5
 800e748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e74c:	4859      	ldr	r0, [pc, #356]	@ (800e8b4 <_printf_i+0x238>)
 800e74e:	230a      	movs	r3, #10
 800e750:	e011      	b.n	800e776 <_printf_i+0xfa>
 800e752:	6821      	ldr	r1, [r4, #0]
 800e754:	6833      	ldr	r3, [r6, #0]
 800e756:	0608      	lsls	r0, r1, #24
 800e758:	f853 5b04 	ldr.w	r5, [r3], #4
 800e75c:	d402      	bmi.n	800e764 <_printf_i+0xe8>
 800e75e:	0649      	lsls	r1, r1, #25
 800e760:	bf48      	it	mi
 800e762:	b2ad      	uxthmi	r5, r5
 800e764:	2f6f      	cmp	r7, #111	@ 0x6f
 800e766:	4853      	ldr	r0, [pc, #332]	@ (800e8b4 <_printf_i+0x238>)
 800e768:	6033      	str	r3, [r6, #0]
 800e76a:	bf14      	ite	ne
 800e76c:	230a      	movne	r3, #10
 800e76e:	2308      	moveq	r3, #8
 800e770:	2100      	movs	r1, #0
 800e772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e776:	6866      	ldr	r6, [r4, #4]
 800e778:	60a6      	str	r6, [r4, #8]
 800e77a:	2e00      	cmp	r6, #0
 800e77c:	bfa2      	ittt	ge
 800e77e:	6821      	ldrge	r1, [r4, #0]
 800e780:	f021 0104 	bicge.w	r1, r1, #4
 800e784:	6021      	strge	r1, [r4, #0]
 800e786:	b90d      	cbnz	r5, 800e78c <_printf_i+0x110>
 800e788:	2e00      	cmp	r6, #0
 800e78a:	d04b      	beq.n	800e824 <_printf_i+0x1a8>
 800e78c:	4616      	mov	r6, r2
 800e78e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e792:	fb03 5711 	mls	r7, r3, r1, r5
 800e796:	5dc7      	ldrb	r7, [r0, r7]
 800e798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e79c:	462f      	mov	r7, r5
 800e79e:	42bb      	cmp	r3, r7
 800e7a0:	460d      	mov	r5, r1
 800e7a2:	d9f4      	bls.n	800e78e <_printf_i+0x112>
 800e7a4:	2b08      	cmp	r3, #8
 800e7a6:	d10b      	bne.n	800e7c0 <_printf_i+0x144>
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	07df      	lsls	r7, r3, #31
 800e7ac:	d508      	bpl.n	800e7c0 <_printf_i+0x144>
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	6861      	ldr	r1, [r4, #4]
 800e7b2:	4299      	cmp	r1, r3
 800e7b4:	bfde      	ittt	le
 800e7b6:	2330      	movle	r3, #48	@ 0x30
 800e7b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7c0:	1b92      	subs	r2, r2, r6
 800e7c2:	6122      	str	r2, [r4, #16]
 800e7c4:	f8cd a000 	str.w	sl, [sp]
 800e7c8:	464b      	mov	r3, r9
 800e7ca:	aa03      	add	r2, sp, #12
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	4640      	mov	r0, r8
 800e7d0:	f7ff fee6 	bl	800e5a0 <_printf_common>
 800e7d4:	3001      	adds	r0, #1
 800e7d6:	d14a      	bne.n	800e86e <_printf_i+0x1f2>
 800e7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7dc:	b004      	add	sp, #16
 800e7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	f043 0320 	orr.w	r3, r3, #32
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	4833      	ldr	r0, [pc, #204]	@ (800e8b8 <_printf_i+0x23c>)
 800e7ec:	2778      	movs	r7, #120	@ 0x78
 800e7ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	6831      	ldr	r1, [r6, #0]
 800e7f6:	061f      	lsls	r7, r3, #24
 800e7f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7fc:	d402      	bmi.n	800e804 <_printf_i+0x188>
 800e7fe:	065f      	lsls	r7, r3, #25
 800e800:	bf48      	it	mi
 800e802:	b2ad      	uxthmi	r5, r5
 800e804:	6031      	str	r1, [r6, #0]
 800e806:	07d9      	lsls	r1, r3, #31
 800e808:	bf44      	itt	mi
 800e80a:	f043 0320 	orrmi.w	r3, r3, #32
 800e80e:	6023      	strmi	r3, [r4, #0]
 800e810:	b11d      	cbz	r5, 800e81a <_printf_i+0x19e>
 800e812:	2310      	movs	r3, #16
 800e814:	e7ac      	b.n	800e770 <_printf_i+0xf4>
 800e816:	4827      	ldr	r0, [pc, #156]	@ (800e8b4 <_printf_i+0x238>)
 800e818:	e7e9      	b.n	800e7ee <_printf_i+0x172>
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	f023 0320 	bic.w	r3, r3, #32
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	e7f6      	b.n	800e812 <_printf_i+0x196>
 800e824:	4616      	mov	r6, r2
 800e826:	e7bd      	b.n	800e7a4 <_printf_i+0x128>
 800e828:	6833      	ldr	r3, [r6, #0]
 800e82a:	6825      	ldr	r5, [r4, #0]
 800e82c:	6961      	ldr	r1, [r4, #20]
 800e82e:	1d18      	adds	r0, r3, #4
 800e830:	6030      	str	r0, [r6, #0]
 800e832:	062e      	lsls	r6, r5, #24
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	d501      	bpl.n	800e83c <_printf_i+0x1c0>
 800e838:	6019      	str	r1, [r3, #0]
 800e83a:	e002      	b.n	800e842 <_printf_i+0x1c6>
 800e83c:	0668      	lsls	r0, r5, #25
 800e83e:	d5fb      	bpl.n	800e838 <_printf_i+0x1bc>
 800e840:	8019      	strh	r1, [r3, #0]
 800e842:	2300      	movs	r3, #0
 800e844:	6123      	str	r3, [r4, #16]
 800e846:	4616      	mov	r6, r2
 800e848:	e7bc      	b.n	800e7c4 <_printf_i+0x148>
 800e84a:	6833      	ldr	r3, [r6, #0]
 800e84c:	1d1a      	adds	r2, r3, #4
 800e84e:	6032      	str	r2, [r6, #0]
 800e850:	681e      	ldr	r6, [r3, #0]
 800e852:	6862      	ldr	r2, [r4, #4]
 800e854:	2100      	movs	r1, #0
 800e856:	4630      	mov	r0, r6
 800e858:	f7f1 fcc2 	bl	80001e0 <memchr>
 800e85c:	b108      	cbz	r0, 800e862 <_printf_i+0x1e6>
 800e85e:	1b80      	subs	r0, r0, r6
 800e860:	6060      	str	r0, [r4, #4]
 800e862:	6863      	ldr	r3, [r4, #4]
 800e864:	6123      	str	r3, [r4, #16]
 800e866:	2300      	movs	r3, #0
 800e868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e86c:	e7aa      	b.n	800e7c4 <_printf_i+0x148>
 800e86e:	6923      	ldr	r3, [r4, #16]
 800e870:	4632      	mov	r2, r6
 800e872:	4649      	mov	r1, r9
 800e874:	4640      	mov	r0, r8
 800e876:	47d0      	blx	sl
 800e878:	3001      	adds	r0, #1
 800e87a:	d0ad      	beq.n	800e7d8 <_printf_i+0x15c>
 800e87c:	6823      	ldr	r3, [r4, #0]
 800e87e:	079b      	lsls	r3, r3, #30
 800e880:	d413      	bmi.n	800e8aa <_printf_i+0x22e>
 800e882:	68e0      	ldr	r0, [r4, #12]
 800e884:	9b03      	ldr	r3, [sp, #12]
 800e886:	4298      	cmp	r0, r3
 800e888:	bfb8      	it	lt
 800e88a:	4618      	movlt	r0, r3
 800e88c:	e7a6      	b.n	800e7dc <_printf_i+0x160>
 800e88e:	2301      	movs	r3, #1
 800e890:	4632      	mov	r2, r6
 800e892:	4649      	mov	r1, r9
 800e894:	4640      	mov	r0, r8
 800e896:	47d0      	blx	sl
 800e898:	3001      	adds	r0, #1
 800e89a:	d09d      	beq.n	800e7d8 <_printf_i+0x15c>
 800e89c:	3501      	adds	r5, #1
 800e89e:	68e3      	ldr	r3, [r4, #12]
 800e8a0:	9903      	ldr	r1, [sp, #12]
 800e8a2:	1a5b      	subs	r3, r3, r1
 800e8a4:	42ab      	cmp	r3, r5
 800e8a6:	dcf2      	bgt.n	800e88e <_printf_i+0x212>
 800e8a8:	e7eb      	b.n	800e882 <_printf_i+0x206>
 800e8aa:	2500      	movs	r5, #0
 800e8ac:	f104 0619 	add.w	r6, r4, #25
 800e8b0:	e7f5      	b.n	800e89e <_printf_i+0x222>
 800e8b2:	bf00      	nop
 800e8b4:	080104cf 	.word	0x080104cf
 800e8b8:	080104e0 	.word	0x080104e0

0800e8bc <_scanf_chars>:
 800e8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8c0:	4615      	mov	r5, r2
 800e8c2:	688a      	ldr	r2, [r1, #8]
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	b932      	cbnz	r2, 800e8d8 <_scanf_chars+0x1c>
 800e8ca:	698a      	ldr	r2, [r1, #24]
 800e8cc:	2a00      	cmp	r2, #0
 800e8ce:	bf14      	ite	ne
 800e8d0:	f04f 32ff 	movne.w	r2, #4294967295
 800e8d4:	2201      	moveq	r2, #1
 800e8d6:	608a      	str	r2, [r1, #8]
 800e8d8:	6822      	ldr	r2, [r4, #0]
 800e8da:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e96c <_scanf_chars+0xb0>
 800e8de:	06d1      	lsls	r1, r2, #27
 800e8e0:	bf5f      	itttt	pl
 800e8e2:	681a      	ldrpl	r2, [r3, #0]
 800e8e4:	1d11      	addpl	r1, r2, #4
 800e8e6:	6019      	strpl	r1, [r3, #0]
 800e8e8:	6816      	ldrpl	r6, [r2, #0]
 800e8ea:	2700      	movs	r7, #0
 800e8ec:	69a0      	ldr	r0, [r4, #24]
 800e8ee:	b188      	cbz	r0, 800e914 <_scanf_chars+0x58>
 800e8f0:	2801      	cmp	r0, #1
 800e8f2:	d107      	bne.n	800e904 <_scanf_chars+0x48>
 800e8f4:	682b      	ldr	r3, [r5, #0]
 800e8f6:	781a      	ldrb	r2, [r3, #0]
 800e8f8:	6963      	ldr	r3, [r4, #20]
 800e8fa:	5c9b      	ldrb	r3, [r3, r2]
 800e8fc:	b953      	cbnz	r3, 800e914 <_scanf_chars+0x58>
 800e8fe:	2f00      	cmp	r7, #0
 800e900:	d031      	beq.n	800e966 <_scanf_chars+0xaa>
 800e902:	e022      	b.n	800e94a <_scanf_chars+0x8e>
 800e904:	2802      	cmp	r0, #2
 800e906:	d120      	bne.n	800e94a <_scanf_chars+0x8e>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e910:	071b      	lsls	r3, r3, #28
 800e912:	d41a      	bmi.n	800e94a <_scanf_chars+0x8e>
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	06da      	lsls	r2, r3, #27
 800e918:	bf5e      	ittt	pl
 800e91a:	682b      	ldrpl	r3, [r5, #0]
 800e91c:	781b      	ldrbpl	r3, [r3, #0]
 800e91e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e922:	682a      	ldr	r2, [r5, #0]
 800e924:	686b      	ldr	r3, [r5, #4]
 800e926:	3201      	adds	r2, #1
 800e928:	602a      	str	r2, [r5, #0]
 800e92a:	68a2      	ldr	r2, [r4, #8]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	3a01      	subs	r2, #1
 800e930:	606b      	str	r3, [r5, #4]
 800e932:	3701      	adds	r7, #1
 800e934:	60a2      	str	r2, [r4, #8]
 800e936:	b142      	cbz	r2, 800e94a <_scanf_chars+0x8e>
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dcd7      	bgt.n	800e8ec <_scanf_chars+0x30>
 800e93c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e940:	4629      	mov	r1, r5
 800e942:	4640      	mov	r0, r8
 800e944:	4798      	blx	r3
 800e946:	2800      	cmp	r0, #0
 800e948:	d0d0      	beq.n	800e8ec <_scanf_chars+0x30>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	f013 0310 	ands.w	r3, r3, #16
 800e950:	d105      	bne.n	800e95e <_scanf_chars+0xa2>
 800e952:	68e2      	ldr	r2, [r4, #12]
 800e954:	3201      	adds	r2, #1
 800e956:	60e2      	str	r2, [r4, #12]
 800e958:	69a2      	ldr	r2, [r4, #24]
 800e95a:	b102      	cbz	r2, 800e95e <_scanf_chars+0xa2>
 800e95c:	7033      	strb	r3, [r6, #0]
 800e95e:	6923      	ldr	r3, [r4, #16]
 800e960:	443b      	add	r3, r7
 800e962:	6123      	str	r3, [r4, #16]
 800e964:	2000      	movs	r0, #0
 800e966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e96a:	bf00      	nop
 800e96c:	08010311 	.word	0x08010311

0800e970 <_scanf_i>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	4698      	mov	r8, r3
 800e976:	4b74      	ldr	r3, [pc, #464]	@ (800eb48 <_scanf_i+0x1d8>)
 800e978:	460c      	mov	r4, r1
 800e97a:	4682      	mov	sl, r0
 800e97c:	4616      	mov	r6, r2
 800e97e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e982:	b087      	sub	sp, #28
 800e984:	ab03      	add	r3, sp, #12
 800e986:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e98a:	4b70      	ldr	r3, [pc, #448]	@ (800eb4c <_scanf_i+0x1dc>)
 800e98c:	69a1      	ldr	r1, [r4, #24]
 800e98e:	4a70      	ldr	r2, [pc, #448]	@ (800eb50 <_scanf_i+0x1e0>)
 800e990:	2903      	cmp	r1, #3
 800e992:	bf08      	it	eq
 800e994:	461a      	moveq	r2, r3
 800e996:	68a3      	ldr	r3, [r4, #8]
 800e998:	9201      	str	r2, [sp, #4]
 800e99a:	1e5a      	subs	r2, r3, #1
 800e99c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e9a0:	bf88      	it	hi
 800e9a2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e9a6:	4627      	mov	r7, r4
 800e9a8:	bf82      	ittt	hi
 800e9aa:	eb03 0905 	addhi.w	r9, r3, r5
 800e9ae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e9b2:	60a3      	strhi	r3, [r4, #8]
 800e9b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e9b8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e9bc:	bf98      	it	ls
 800e9be:	f04f 0900 	movls.w	r9, #0
 800e9c2:	6023      	str	r3, [r4, #0]
 800e9c4:	463d      	mov	r5, r7
 800e9c6:	f04f 0b00 	mov.w	fp, #0
 800e9ca:	6831      	ldr	r1, [r6, #0]
 800e9cc:	ab03      	add	r3, sp, #12
 800e9ce:	7809      	ldrb	r1, [r1, #0]
 800e9d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	f7f1 fc03 	bl	80001e0 <memchr>
 800e9da:	b328      	cbz	r0, 800ea28 <_scanf_i+0xb8>
 800e9dc:	f1bb 0f01 	cmp.w	fp, #1
 800e9e0:	d159      	bne.n	800ea96 <_scanf_i+0x126>
 800e9e2:	6862      	ldr	r2, [r4, #4]
 800e9e4:	b92a      	cbnz	r2, 800e9f2 <_scanf_i+0x82>
 800e9e6:	6822      	ldr	r2, [r4, #0]
 800e9e8:	2108      	movs	r1, #8
 800e9ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e9ee:	6061      	str	r1, [r4, #4]
 800e9f0:	6022      	str	r2, [r4, #0]
 800e9f2:	6822      	ldr	r2, [r4, #0]
 800e9f4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e9f8:	6022      	str	r2, [r4, #0]
 800e9fa:	68a2      	ldr	r2, [r4, #8]
 800e9fc:	1e51      	subs	r1, r2, #1
 800e9fe:	60a1      	str	r1, [r4, #8]
 800ea00:	b192      	cbz	r2, 800ea28 <_scanf_i+0xb8>
 800ea02:	6832      	ldr	r2, [r6, #0]
 800ea04:	1c51      	adds	r1, r2, #1
 800ea06:	6031      	str	r1, [r6, #0]
 800ea08:	7812      	ldrb	r2, [r2, #0]
 800ea0a:	f805 2b01 	strb.w	r2, [r5], #1
 800ea0e:	6872      	ldr	r2, [r6, #4]
 800ea10:	3a01      	subs	r2, #1
 800ea12:	2a00      	cmp	r2, #0
 800ea14:	6072      	str	r2, [r6, #4]
 800ea16:	dc07      	bgt.n	800ea28 <_scanf_i+0xb8>
 800ea18:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ea1c:	4631      	mov	r1, r6
 800ea1e:	4650      	mov	r0, sl
 800ea20:	4790      	blx	r2
 800ea22:	2800      	cmp	r0, #0
 800ea24:	f040 8085 	bne.w	800eb32 <_scanf_i+0x1c2>
 800ea28:	f10b 0b01 	add.w	fp, fp, #1
 800ea2c:	f1bb 0f03 	cmp.w	fp, #3
 800ea30:	d1cb      	bne.n	800e9ca <_scanf_i+0x5a>
 800ea32:	6863      	ldr	r3, [r4, #4]
 800ea34:	b90b      	cbnz	r3, 800ea3a <_scanf_i+0xca>
 800ea36:	230a      	movs	r3, #10
 800ea38:	6063      	str	r3, [r4, #4]
 800ea3a:	6863      	ldr	r3, [r4, #4]
 800ea3c:	4945      	ldr	r1, [pc, #276]	@ (800eb54 <_scanf_i+0x1e4>)
 800ea3e:	6960      	ldr	r0, [r4, #20]
 800ea40:	1ac9      	subs	r1, r1, r3
 800ea42:	f000 f947 	bl	800ecd4 <__sccl>
 800ea46:	f04f 0b00 	mov.w	fp, #0
 800ea4a:	68a3      	ldr	r3, [r4, #8]
 800ea4c:	6822      	ldr	r2, [r4, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d03d      	beq.n	800eace <_scanf_i+0x15e>
 800ea52:	6831      	ldr	r1, [r6, #0]
 800ea54:	6960      	ldr	r0, [r4, #20]
 800ea56:	f891 c000 	ldrb.w	ip, [r1]
 800ea5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d035      	beq.n	800eace <_scanf_i+0x15e>
 800ea62:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ea66:	d124      	bne.n	800eab2 <_scanf_i+0x142>
 800ea68:	0510      	lsls	r0, r2, #20
 800ea6a:	d522      	bpl.n	800eab2 <_scanf_i+0x142>
 800ea6c:	f10b 0b01 	add.w	fp, fp, #1
 800ea70:	f1b9 0f00 	cmp.w	r9, #0
 800ea74:	d003      	beq.n	800ea7e <_scanf_i+0x10e>
 800ea76:	3301      	adds	r3, #1
 800ea78:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea7c:	60a3      	str	r3, [r4, #8]
 800ea7e:	6873      	ldr	r3, [r6, #4]
 800ea80:	3b01      	subs	r3, #1
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	6073      	str	r3, [r6, #4]
 800ea86:	dd1b      	ble.n	800eac0 <_scanf_i+0x150>
 800ea88:	6833      	ldr	r3, [r6, #0]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	6033      	str	r3, [r6, #0]
 800ea8e:	68a3      	ldr	r3, [r4, #8]
 800ea90:	3b01      	subs	r3, #1
 800ea92:	60a3      	str	r3, [r4, #8]
 800ea94:	e7d9      	b.n	800ea4a <_scanf_i+0xda>
 800ea96:	f1bb 0f02 	cmp.w	fp, #2
 800ea9a:	d1ae      	bne.n	800e9fa <_scanf_i+0x8a>
 800ea9c:	6822      	ldr	r2, [r4, #0]
 800ea9e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800eaa2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800eaa6:	d1bf      	bne.n	800ea28 <_scanf_i+0xb8>
 800eaa8:	2110      	movs	r1, #16
 800eaaa:	6061      	str	r1, [r4, #4]
 800eaac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eab0:	e7a2      	b.n	800e9f8 <_scanf_i+0x88>
 800eab2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800eab6:	6022      	str	r2, [r4, #0]
 800eab8:	780b      	ldrb	r3, [r1, #0]
 800eaba:	f805 3b01 	strb.w	r3, [r5], #1
 800eabe:	e7de      	b.n	800ea7e <_scanf_i+0x10e>
 800eac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eac4:	4631      	mov	r1, r6
 800eac6:	4650      	mov	r0, sl
 800eac8:	4798      	blx	r3
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d0df      	beq.n	800ea8e <_scanf_i+0x11e>
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	05d9      	lsls	r1, r3, #23
 800ead2:	d50d      	bpl.n	800eaf0 <_scanf_i+0x180>
 800ead4:	42bd      	cmp	r5, r7
 800ead6:	d909      	bls.n	800eaec <_scanf_i+0x17c>
 800ead8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eadc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eae0:	4632      	mov	r2, r6
 800eae2:	4650      	mov	r0, sl
 800eae4:	4798      	blx	r3
 800eae6:	f105 39ff 	add.w	r9, r5, #4294967295
 800eaea:	464d      	mov	r5, r9
 800eaec:	42bd      	cmp	r5, r7
 800eaee:	d028      	beq.n	800eb42 <_scanf_i+0x1d2>
 800eaf0:	6822      	ldr	r2, [r4, #0]
 800eaf2:	f012 0210 	ands.w	r2, r2, #16
 800eaf6:	d113      	bne.n	800eb20 <_scanf_i+0x1b0>
 800eaf8:	702a      	strb	r2, [r5, #0]
 800eafa:	6863      	ldr	r3, [r4, #4]
 800eafc:	9e01      	ldr	r6, [sp, #4]
 800eafe:	4639      	mov	r1, r7
 800eb00:	4650      	mov	r0, sl
 800eb02:	47b0      	blx	r6
 800eb04:	f8d8 3000 	ldr.w	r3, [r8]
 800eb08:	6821      	ldr	r1, [r4, #0]
 800eb0a:	1d1a      	adds	r2, r3, #4
 800eb0c:	f8c8 2000 	str.w	r2, [r8]
 800eb10:	f011 0f20 	tst.w	r1, #32
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	d00f      	beq.n	800eb38 <_scanf_i+0x1c8>
 800eb18:	6018      	str	r0, [r3, #0]
 800eb1a:	68e3      	ldr	r3, [r4, #12]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	60e3      	str	r3, [r4, #12]
 800eb20:	6923      	ldr	r3, [r4, #16]
 800eb22:	1bed      	subs	r5, r5, r7
 800eb24:	445d      	add	r5, fp
 800eb26:	442b      	add	r3, r5
 800eb28:	6123      	str	r3, [r4, #16]
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	b007      	add	sp, #28
 800eb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb32:	f04f 0b00 	mov.w	fp, #0
 800eb36:	e7ca      	b.n	800eace <_scanf_i+0x15e>
 800eb38:	07ca      	lsls	r2, r1, #31
 800eb3a:	bf4c      	ite	mi
 800eb3c:	8018      	strhmi	r0, [r3, #0]
 800eb3e:	6018      	strpl	r0, [r3, #0]
 800eb40:	e7eb      	b.n	800eb1a <_scanf_i+0x1aa>
 800eb42:	2001      	movs	r0, #1
 800eb44:	e7f2      	b.n	800eb2c <_scanf_i+0x1bc>
 800eb46:	bf00      	nop
 800eb48:	08010250 	.word	0x08010250
 800eb4c:	0800d959 	.word	0x0800d959
 800eb50:	0800ef51 	.word	0x0800ef51
 800eb54:	08010501 	.word	0x08010501

0800eb58 <__sflush_r>:
 800eb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb60:	0716      	lsls	r6, r2, #28
 800eb62:	4605      	mov	r5, r0
 800eb64:	460c      	mov	r4, r1
 800eb66:	d454      	bmi.n	800ec12 <__sflush_r+0xba>
 800eb68:	684b      	ldr	r3, [r1, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	dc02      	bgt.n	800eb74 <__sflush_r+0x1c>
 800eb6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dd48      	ble.n	800ec06 <__sflush_r+0xae>
 800eb74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb76:	2e00      	cmp	r6, #0
 800eb78:	d045      	beq.n	800ec06 <__sflush_r+0xae>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb80:	682f      	ldr	r7, [r5, #0]
 800eb82:	6a21      	ldr	r1, [r4, #32]
 800eb84:	602b      	str	r3, [r5, #0]
 800eb86:	d030      	beq.n	800ebea <__sflush_r+0x92>
 800eb88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	0759      	lsls	r1, r3, #29
 800eb8e:	d505      	bpl.n	800eb9c <__sflush_r+0x44>
 800eb90:	6863      	ldr	r3, [r4, #4]
 800eb92:	1ad2      	subs	r2, r2, r3
 800eb94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb96:	b10b      	cbz	r3, 800eb9c <__sflush_r+0x44>
 800eb98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb9a:	1ad2      	subs	r2, r2, r3
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eba0:	6a21      	ldr	r1, [r4, #32]
 800eba2:	4628      	mov	r0, r5
 800eba4:	47b0      	blx	r6
 800eba6:	1c43      	adds	r3, r0, #1
 800eba8:	89a3      	ldrh	r3, [r4, #12]
 800ebaa:	d106      	bne.n	800ebba <__sflush_r+0x62>
 800ebac:	6829      	ldr	r1, [r5, #0]
 800ebae:	291d      	cmp	r1, #29
 800ebb0:	d82b      	bhi.n	800ec0a <__sflush_r+0xb2>
 800ebb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ec5c <__sflush_r+0x104>)
 800ebb4:	410a      	asrs	r2, r1
 800ebb6:	07d6      	lsls	r6, r2, #31
 800ebb8:	d427      	bmi.n	800ec0a <__sflush_r+0xb2>
 800ebba:	2200      	movs	r2, #0
 800ebbc:	6062      	str	r2, [r4, #4]
 800ebbe:	04d9      	lsls	r1, r3, #19
 800ebc0:	6922      	ldr	r2, [r4, #16]
 800ebc2:	6022      	str	r2, [r4, #0]
 800ebc4:	d504      	bpl.n	800ebd0 <__sflush_r+0x78>
 800ebc6:	1c42      	adds	r2, r0, #1
 800ebc8:	d101      	bne.n	800ebce <__sflush_r+0x76>
 800ebca:	682b      	ldr	r3, [r5, #0]
 800ebcc:	b903      	cbnz	r3, 800ebd0 <__sflush_r+0x78>
 800ebce:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebd2:	602f      	str	r7, [r5, #0]
 800ebd4:	b1b9      	cbz	r1, 800ec06 <__sflush_r+0xae>
 800ebd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebda:	4299      	cmp	r1, r3
 800ebdc:	d002      	beq.n	800ebe4 <__sflush_r+0x8c>
 800ebde:	4628      	mov	r0, r5
 800ebe0:	f7ff f970 	bl	800dec4 <_free_r>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ebe8:	e00d      	b.n	800ec06 <__sflush_r+0xae>
 800ebea:	2301      	movs	r3, #1
 800ebec:	4628      	mov	r0, r5
 800ebee:	47b0      	blx	r6
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	1c50      	adds	r0, r2, #1
 800ebf4:	d1c9      	bne.n	800eb8a <__sflush_r+0x32>
 800ebf6:	682b      	ldr	r3, [r5, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d0c6      	beq.n	800eb8a <__sflush_r+0x32>
 800ebfc:	2b1d      	cmp	r3, #29
 800ebfe:	d001      	beq.n	800ec04 <__sflush_r+0xac>
 800ec00:	2b16      	cmp	r3, #22
 800ec02:	d11e      	bne.n	800ec42 <__sflush_r+0xea>
 800ec04:	602f      	str	r7, [r5, #0]
 800ec06:	2000      	movs	r0, #0
 800ec08:	e022      	b.n	800ec50 <__sflush_r+0xf8>
 800ec0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec0e:	b21b      	sxth	r3, r3
 800ec10:	e01b      	b.n	800ec4a <__sflush_r+0xf2>
 800ec12:	690f      	ldr	r7, [r1, #16]
 800ec14:	2f00      	cmp	r7, #0
 800ec16:	d0f6      	beq.n	800ec06 <__sflush_r+0xae>
 800ec18:	0793      	lsls	r3, r2, #30
 800ec1a:	680e      	ldr	r6, [r1, #0]
 800ec1c:	bf08      	it	eq
 800ec1e:	694b      	ldreq	r3, [r1, #20]
 800ec20:	600f      	str	r7, [r1, #0]
 800ec22:	bf18      	it	ne
 800ec24:	2300      	movne	r3, #0
 800ec26:	eba6 0807 	sub.w	r8, r6, r7
 800ec2a:	608b      	str	r3, [r1, #8]
 800ec2c:	f1b8 0f00 	cmp.w	r8, #0
 800ec30:	dde9      	ble.n	800ec06 <__sflush_r+0xae>
 800ec32:	6a21      	ldr	r1, [r4, #32]
 800ec34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec36:	4643      	mov	r3, r8
 800ec38:	463a      	mov	r2, r7
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b0      	blx	r6
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	dc08      	bgt.n	800ec54 <__sflush_r+0xfc>
 800ec42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec4a:	81a3      	strh	r3, [r4, #12]
 800ec4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec54:	4407      	add	r7, r0
 800ec56:	eba8 0800 	sub.w	r8, r8, r0
 800ec5a:	e7e7      	b.n	800ec2c <__sflush_r+0xd4>
 800ec5c:	dfbffffe 	.word	0xdfbffffe

0800ec60 <_fflush_r>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	690b      	ldr	r3, [r1, #16]
 800ec64:	4605      	mov	r5, r0
 800ec66:	460c      	mov	r4, r1
 800ec68:	b913      	cbnz	r3, 800ec70 <_fflush_r+0x10>
 800ec6a:	2500      	movs	r5, #0
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	bd38      	pop	{r3, r4, r5, pc}
 800ec70:	b118      	cbz	r0, 800ec7a <_fflush_r+0x1a>
 800ec72:	6a03      	ldr	r3, [r0, #32]
 800ec74:	b90b      	cbnz	r3, 800ec7a <_fflush_r+0x1a>
 800ec76:	f7fe ff07 	bl	800da88 <__sinit>
 800ec7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d0f3      	beq.n	800ec6a <_fflush_r+0xa>
 800ec82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec84:	07d0      	lsls	r0, r2, #31
 800ec86:	d404      	bmi.n	800ec92 <_fflush_r+0x32>
 800ec88:	0599      	lsls	r1, r3, #22
 800ec8a:	d402      	bmi.n	800ec92 <_fflush_r+0x32>
 800ec8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec8e:	f7ff f8f0 	bl	800de72 <__retarget_lock_acquire_recursive>
 800ec92:	4628      	mov	r0, r5
 800ec94:	4621      	mov	r1, r4
 800ec96:	f7ff ff5f 	bl	800eb58 <__sflush_r>
 800ec9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec9c:	07da      	lsls	r2, r3, #31
 800ec9e:	4605      	mov	r5, r0
 800eca0:	d4e4      	bmi.n	800ec6c <_fflush_r+0xc>
 800eca2:	89a3      	ldrh	r3, [r4, #12]
 800eca4:	059b      	lsls	r3, r3, #22
 800eca6:	d4e1      	bmi.n	800ec6c <_fflush_r+0xc>
 800eca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecaa:	f7ff f8e3 	bl	800de74 <__retarget_lock_release_recursive>
 800ecae:	e7dd      	b.n	800ec6c <_fflush_r+0xc>

0800ecb0 <fiprintf>:
 800ecb0:	b40e      	push	{r1, r2, r3}
 800ecb2:	b503      	push	{r0, r1, lr}
 800ecb4:	4601      	mov	r1, r0
 800ecb6:	ab03      	add	r3, sp, #12
 800ecb8:	4805      	ldr	r0, [pc, #20]	@ (800ecd0 <fiprintf+0x20>)
 800ecba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecbe:	6800      	ldr	r0, [r0, #0]
 800ecc0:	9301      	str	r3, [sp, #4]
 800ecc2:	f000 f971 	bl	800efa8 <_vfiprintf_r>
 800ecc6:	b002      	add	sp, #8
 800ecc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eccc:	b003      	add	sp, #12
 800ecce:	4770      	bx	lr
 800ecd0:	20000038 	.word	0x20000038

0800ecd4 <__sccl>:
 800ecd4:	b570      	push	{r4, r5, r6, lr}
 800ecd6:	780b      	ldrb	r3, [r1, #0]
 800ecd8:	4604      	mov	r4, r0
 800ecda:	2b5e      	cmp	r3, #94	@ 0x5e
 800ecdc:	bf0b      	itete	eq
 800ecde:	784b      	ldrbeq	r3, [r1, #1]
 800ece0:	1c4a      	addne	r2, r1, #1
 800ece2:	1c8a      	addeq	r2, r1, #2
 800ece4:	2100      	movne	r1, #0
 800ece6:	bf08      	it	eq
 800ece8:	2101      	moveq	r1, #1
 800ecea:	3801      	subs	r0, #1
 800ecec:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ecf0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ecf4:	42a8      	cmp	r0, r5
 800ecf6:	d1fb      	bne.n	800ecf0 <__sccl+0x1c>
 800ecf8:	b90b      	cbnz	r3, 800ecfe <__sccl+0x2a>
 800ecfa:	1e50      	subs	r0, r2, #1
 800ecfc:	bd70      	pop	{r4, r5, r6, pc}
 800ecfe:	f081 0101 	eor.w	r1, r1, #1
 800ed02:	54e1      	strb	r1, [r4, r3]
 800ed04:	4610      	mov	r0, r2
 800ed06:	4602      	mov	r2, r0
 800ed08:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ed0c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ed0e:	d005      	beq.n	800ed1c <__sccl+0x48>
 800ed10:	2d5d      	cmp	r5, #93	@ 0x5d
 800ed12:	d016      	beq.n	800ed42 <__sccl+0x6e>
 800ed14:	2d00      	cmp	r5, #0
 800ed16:	d0f1      	beq.n	800ecfc <__sccl+0x28>
 800ed18:	462b      	mov	r3, r5
 800ed1a:	e7f2      	b.n	800ed02 <__sccl+0x2e>
 800ed1c:	7846      	ldrb	r6, [r0, #1]
 800ed1e:	2e5d      	cmp	r6, #93	@ 0x5d
 800ed20:	d0fa      	beq.n	800ed18 <__sccl+0x44>
 800ed22:	42b3      	cmp	r3, r6
 800ed24:	dcf8      	bgt.n	800ed18 <__sccl+0x44>
 800ed26:	3002      	adds	r0, #2
 800ed28:	461a      	mov	r2, r3
 800ed2a:	3201      	adds	r2, #1
 800ed2c:	4296      	cmp	r6, r2
 800ed2e:	54a1      	strb	r1, [r4, r2]
 800ed30:	dcfb      	bgt.n	800ed2a <__sccl+0x56>
 800ed32:	1af2      	subs	r2, r6, r3
 800ed34:	3a01      	subs	r2, #1
 800ed36:	1c5d      	adds	r5, r3, #1
 800ed38:	42b3      	cmp	r3, r6
 800ed3a:	bfa8      	it	ge
 800ed3c:	2200      	movge	r2, #0
 800ed3e:	18ab      	adds	r3, r5, r2
 800ed40:	e7e1      	b.n	800ed06 <__sccl+0x32>
 800ed42:	4610      	mov	r0, r2
 800ed44:	e7da      	b.n	800ecfc <__sccl+0x28>

0800ed46 <__submore>:
 800ed46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ed4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed52:	4299      	cmp	r1, r3
 800ed54:	d11d      	bne.n	800ed92 <__submore+0x4c>
 800ed56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ed5a:	f7fe fcf7 	bl	800d74c <_malloc_r>
 800ed5e:	b918      	cbnz	r0, 800ed68 <__submore+0x22>
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ed6e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ed72:	6360      	str	r0, [r4, #52]	@ 0x34
 800ed74:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ed78:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ed7c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ed80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ed84:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ed88:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ed8c:	6020      	str	r0, [r4, #0]
 800ed8e:	2000      	movs	r0, #0
 800ed90:	e7e8      	b.n	800ed64 <__submore+0x1e>
 800ed92:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ed94:	0077      	lsls	r7, r6, #1
 800ed96:	463a      	mov	r2, r7
 800ed98:	f000 f83e 	bl	800ee18 <_realloc_r>
 800ed9c:	4605      	mov	r5, r0
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	d0de      	beq.n	800ed60 <__submore+0x1a>
 800eda2:	eb00 0806 	add.w	r8, r0, r6
 800eda6:	4601      	mov	r1, r0
 800eda8:	4632      	mov	r2, r6
 800edaa:	4640      	mov	r0, r8
 800edac:	f000 f81f 	bl	800edee <memcpy>
 800edb0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800edb4:	f8c4 8000 	str.w	r8, [r4]
 800edb8:	e7e9      	b.n	800ed8e <__submore+0x48>

0800edba <memmove>:
 800edba:	4288      	cmp	r0, r1
 800edbc:	b510      	push	{r4, lr}
 800edbe:	eb01 0402 	add.w	r4, r1, r2
 800edc2:	d902      	bls.n	800edca <memmove+0x10>
 800edc4:	4284      	cmp	r4, r0
 800edc6:	4623      	mov	r3, r4
 800edc8:	d807      	bhi.n	800edda <memmove+0x20>
 800edca:	1e43      	subs	r3, r0, #1
 800edcc:	42a1      	cmp	r1, r4
 800edce:	d008      	beq.n	800ede2 <memmove+0x28>
 800edd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edd8:	e7f8      	b.n	800edcc <memmove+0x12>
 800edda:	4402      	add	r2, r0
 800eddc:	4601      	mov	r1, r0
 800edde:	428a      	cmp	r2, r1
 800ede0:	d100      	bne.n	800ede4 <memmove+0x2a>
 800ede2:	bd10      	pop	{r4, pc}
 800ede4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ede8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edec:	e7f7      	b.n	800edde <memmove+0x24>

0800edee <memcpy>:
 800edee:	440a      	add	r2, r1
 800edf0:	4291      	cmp	r1, r2
 800edf2:	f100 33ff 	add.w	r3, r0, #4294967295
 800edf6:	d100      	bne.n	800edfa <memcpy+0xc>
 800edf8:	4770      	bx	lr
 800edfa:	b510      	push	{r4, lr}
 800edfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee04:	4291      	cmp	r1, r2
 800ee06:	d1f9      	bne.n	800edfc <memcpy+0xe>
 800ee08:	bd10      	pop	{r4, pc}

0800ee0a <abort>:
 800ee0a:	b508      	push	{r3, lr}
 800ee0c:	2006      	movs	r0, #6
 800ee0e:	f000 fa9f 	bl	800f350 <raise>
 800ee12:	2001      	movs	r0, #1
 800ee14:	f7f4 fb6a 	bl	80034ec <_exit>

0800ee18 <_realloc_r>:
 800ee18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	4680      	mov	r8, r0
 800ee1e:	4615      	mov	r5, r2
 800ee20:	460c      	mov	r4, r1
 800ee22:	b921      	cbnz	r1, 800ee2e <_realloc_r+0x16>
 800ee24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	4611      	mov	r1, r2
 800ee2a:	f7fe bc8f 	b.w	800d74c <_malloc_r>
 800ee2e:	b92a      	cbnz	r2, 800ee3c <_realloc_r+0x24>
 800ee30:	f7ff f848 	bl	800dec4 <_free_r>
 800ee34:	2400      	movs	r4, #0
 800ee36:	4620      	mov	r0, r4
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3c:	f000 faa4 	bl	800f388 <_malloc_usable_size_r>
 800ee40:	4285      	cmp	r5, r0
 800ee42:	4606      	mov	r6, r0
 800ee44:	d802      	bhi.n	800ee4c <_realloc_r+0x34>
 800ee46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee4a:	d8f4      	bhi.n	800ee36 <_realloc_r+0x1e>
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4640      	mov	r0, r8
 800ee50:	f7fe fc7c 	bl	800d74c <_malloc_r>
 800ee54:	4607      	mov	r7, r0
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d0ec      	beq.n	800ee34 <_realloc_r+0x1c>
 800ee5a:	42b5      	cmp	r5, r6
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	4621      	mov	r1, r4
 800ee60:	bf28      	it	cs
 800ee62:	4632      	movcs	r2, r6
 800ee64:	f7ff ffc3 	bl	800edee <memcpy>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	f7ff f82a 	bl	800dec4 <_free_r>
 800ee70:	463c      	mov	r4, r7
 800ee72:	e7e0      	b.n	800ee36 <_realloc_r+0x1e>

0800ee74 <_strtoul_l.constprop.0>:
 800ee74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee78:	4e34      	ldr	r6, [pc, #208]	@ (800ef4c <_strtoul_l.constprop.0+0xd8>)
 800ee7a:	4686      	mov	lr, r0
 800ee7c:	460d      	mov	r5, r1
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee84:	5d37      	ldrb	r7, [r6, r4]
 800ee86:	f017 0708 	ands.w	r7, r7, #8
 800ee8a:	d1f8      	bne.n	800ee7e <_strtoul_l.constprop.0+0xa>
 800ee8c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee8e:	d12f      	bne.n	800eef0 <_strtoul_l.constprop.0+0x7c>
 800ee90:	782c      	ldrb	r4, [r5, #0]
 800ee92:	2701      	movs	r7, #1
 800ee94:	1c85      	adds	r5, r0, #2
 800ee96:	f033 0010 	bics.w	r0, r3, #16
 800ee9a:	d109      	bne.n	800eeb0 <_strtoul_l.constprop.0+0x3c>
 800ee9c:	2c30      	cmp	r4, #48	@ 0x30
 800ee9e:	d12c      	bne.n	800eefa <_strtoul_l.constprop.0+0x86>
 800eea0:	7828      	ldrb	r0, [r5, #0]
 800eea2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800eea6:	2858      	cmp	r0, #88	@ 0x58
 800eea8:	d127      	bne.n	800eefa <_strtoul_l.constprop.0+0x86>
 800eeaa:	786c      	ldrb	r4, [r5, #1]
 800eeac:	2310      	movs	r3, #16
 800eeae:	3502      	adds	r5, #2
 800eeb0:	f04f 38ff 	mov.w	r8, #4294967295
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	fbb8 f8f3 	udiv	r8, r8, r3
 800eeba:	fb03 f908 	mul.w	r9, r3, r8
 800eebe:	ea6f 0909 	mvn.w	r9, r9
 800eec2:	4630      	mov	r0, r6
 800eec4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eec8:	f1bc 0f09 	cmp.w	ip, #9
 800eecc:	d81c      	bhi.n	800ef08 <_strtoul_l.constprop.0+0x94>
 800eece:	4664      	mov	r4, ip
 800eed0:	42a3      	cmp	r3, r4
 800eed2:	dd2a      	ble.n	800ef2a <_strtoul_l.constprop.0+0xb6>
 800eed4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800eed8:	d007      	beq.n	800eeea <_strtoul_l.constprop.0+0x76>
 800eeda:	4580      	cmp	r8, r0
 800eedc:	d322      	bcc.n	800ef24 <_strtoul_l.constprop.0+0xb0>
 800eede:	d101      	bne.n	800eee4 <_strtoul_l.constprop.0+0x70>
 800eee0:	45a1      	cmp	r9, r4
 800eee2:	db1f      	blt.n	800ef24 <_strtoul_l.constprop.0+0xb0>
 800eee4:	fb00 4003 	mla	r0, r0, r3, r4
 800eee8:	2601      	movs	r6, #1
 800eeea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eeee:	e7e9      	b.n	800eec4 <_strtoul_l.constprop.0+0x50>
 800eef0:	2c2b      	cmp	r4, #43	@ 0x2b
 800eef2:	bf04      	itt	eq
 800eef4:	782c      	ldrbeq	r4, [r5, #0]
 800eef6:	1c85      	addeq	r5, r0, #2
 800eef8:	e7cd      	b.n	800ee96 <_strtoul_l.constprop.0+0x22>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1d8      	bne.n	800eeb0 <_strtoul_l.constprop.0+0x3c>
 800eefe:	2c30      	cmp	r4, #48	@ 0x30
 800ef00:	bf0c      	ite	eq
 800ef02:	2308      	moveq	r3, #8
 800ef04:	230a      	movne	r3, #10
 800ef06:	e7d3      	b.n	800eeb0 <_strtoul_l.constprop.0+0x3c>
 800ef08:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ef0c:	f1bc 0f19 	cmp.w	ip, #25
 800ef10:	d801      	bhi.n	800ef16 <_strtoul_l.constprop.0+0xa2>
 800ef12:	3c37      	subs	r4, #55	@ 0x37
 800ef14:	e7dc      	b.n	800eed0 <_strtoul_l.constprop.0+0x5c>
 800ef16:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ef1a:	f1bc 0f19 	cmp.w	ip, #25
 800ef1e:	d804      	bhi.n	800ef2a <_strtoul_l.constprop.0+0xb6>
 800ef20:	3c57      	subs	r4, #87	@ 0x57
 800ef22:	e7d5      	b.n	800eed0 <_strtoul_l.constprop.0+0x5c>
 800ef24:	f04f 36ff 	mov.w	r6, #4294967295
 800ef28:	e7df      	b.n	800eeea <_strtoul_l.constprop.0+0x76>
 800ef2a:	1c73      	adds	r3, r6, #1
 800ef2c:	d106      	bne.n	800ef3c <_strtoul_l.constprop.0+0xc8>
 800ef2e:	2322      	movs	r3, #34	@ 0x22
 800ef30:	f8ce 3000 	str.w	r3, [lr]
 800ef34:	4630      	mov	r0, r6
 800ef36:	b932      	cbnz	r2, 800ef46 <_strtoul_l.constprop.0+0xd2>
 800ef38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef3c:	b107      	cbz	r7, 800ef40 <_strtoul_l.constprop.0+0xcc>
 800ef3e:	4240      	negs	r0, r0
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	d0f9      	beq.n	800ef38 <_strtoul_l.constprop.0+0xc4>
 800ef44:	b106      	cbz	r6, 800ef48 <_strtoul_l.constprop.0+0xd4>
 800ef46:	1e69      	subs	r1, r5, #1
 800ef48:	6011      	str	r1, [r2, #0]
 800ef4a:	e7f5      	b.n	800ef38 <_strtoul_l.constprop.0+0xc4>
 800ef4c:	08010311 	.word	0x08010311

0800ef50 <_strtoul_r>:
 800ef50:	f7ff bf90 	b.w	800ee74 <_strtoul_l.constprop.0>

0800ef54 <__sfputc_r>:
 800ef54:	6893      	ldr	r3, [r2, #8]
 800ef56:	3b01      	subs	r3, #1
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	b410      	push	{r4}
 800ef5c:	6093      	str	r3, [r2, #8]
 800ef5e:	da08      	bge.n	800ef72 <__sfputc_r+0x1e>
 800ef60:	6994      	ldr	r4, [r2, #24]
 800ef62:	42a3      	cmp	r3, r4
 800ef64:	db01      	blt.n	800ef6a <__sfputc_r+0x16>
 800ef66:	290a      	cmp	r1, #10
 800ef68:	d103      	bne.n	800ef72 <__sfputc_r+0x1e>
 800ef6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef6e:	f000 b933 	b.w	800f1d8 <__swbuf_r>
 800ef72:	6813      	ldr	r3, [r2, #0]
 800ef74:	1c58      	adds	r0, r3, #1
 800ef76:	6010      	str	r0, [r2, #0]
 800ef78:	7019      	strb	r1, [r3, #0]
 800ef7a:	4608      	mov	r0, r1
 800ef7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <__sfputs_r>:
 800ef82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef84:	4606      	mov	r6, r0
 800ef86:	460f      	mov	r7, r1
 800ef88:	4614      	mov	r4, r2
 800ef8a:	18d5      	adds	r5, r2, r3
 800ef8c:	42ac      	cmp	r4, r5
 800ef8e:	d101      	bne.n	800ef94 <__sfputs_r+0x12>
 800ef90:	2000      	movs	r0, #0
 800ef92:	e007      	b.n	800efa4 <__sfputs_r+0x22>
 800ef94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef98:	463a      	mov	r2, r7
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f7ff ffda 	bl	800ef54 <__sfputc_r>
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	d1f3      	bne.n	800ef8c <__sfputs_r+0xa>
 800efa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efa8 <_vfiprintf_r>:
 800efa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	460d      	mov	r5, r1
 800efae:	b09d      	sub	sp, #116	@ 0x74
 800efb0:	4614      	mov	r4, r2
 800efb2:	4698      	mov	r8, r3
 800efb4:	4606      	mov	r6, r0
 800efb6:	b118      	cbz	r0, 800efc0 <_vfiprintf_r+0x18>
 800efb8:	6a03      	ldr	r3, [r0, #32]
 800efba:	b90b      	cbnz	r3, 800efc0 <_vfiprintf_r+0x18>
 800efbc:	f7fe fd64 	bl	800da88 <__sinit>
 800efc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efc2:	07d9      	lsls	r1, r3, #31
 800efc4:	d405      	bmi.n	800efd2 <_vfiprintf_r+0x2a>
 800efc6:	89ab      	ldrh	r3, [r5, #12]
 800efc8:	059a      	lsls	r2, r3, #22
 800efca:	d402      	bmi.n	800efd2 <_vfiprintf_r+0x2a>
 800efcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efce:	f7fe ff50 	bl	800de72 <__retarget_lock_acquire_recursive>
 800efd2:	89ab      	ldrh	r3, [r5, #12]
 800efd4:	071b      	lsls	r3, r3, #28
 800efd6:	d501      	bpl.n	800efdc <_vfiprintf_r+0x34>
 800efd8:	692b      	ldr	r3, [r5, #16]
 800efda:	b99b      	cbnz	r3, 800f004 <_vfiprintf_r+0x5c>
 800efdc:	4629      	mov	r1, r5
 800efde:	4630      	mov	r0, r6
 800efe0:	f000 f938 	bl	800f254 <__swsetup_r>
 800efe4:	b170      	cbz	r0, 800f004 <_vfiprintf_r+0x5c>
 800efe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efe8:	07dc      	lsls	r4, r3, #31
 800efea:	d504      	bpl.n	800eff6 <_vfiprintf_r+0x4e>
 800efec:	f04f 30ff 	mov.w	r0, #4294967295
 800eff0:	b01d      	add	sp, #116	@ 0x74
 800eff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff6:	89ab      	ldrh	r3, [r5, #12]
 800eff8:	0598      	lsls	r0, r3, #22
 800effa:	d4f7      	bmi.n	800efec <_vfiprintf_r+0x44>
 800effc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800effe:	f7fe ff39 	bl	800de74 <__retarget_lock_release_recursive>
 800f002:	e7f3      	b.n	800efec <_vfiprintf_r+0x44>
 800f004:	2300      	movs	r3, #0
 800f006:	9309      	str	r3, [sp, #36]	@ 0x24
 800f008:	2320      	movs	r3, #32
 800f00a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f00e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f012:	2330      	movs	r3, #48	@ 0x30
 800f014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f1c4 <_vfiprintf_r+0x21c>
 800f018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f01c:	f04f 0901 	mov.w	r9, #1
 800f020:	4623      	mov	r3, r4
 800f022:	469a      	mov	sl, r3
 800f024:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f028:	b10a      	cbz	r2, 800f02e <_vfiprintf_r+0x86>
 800f02a:	2a25      	cmp	r2, #37	@ 0x25
 800f02c:	d1f9      	bne.n	800f022 <_vfiprintf_r+0x7a>
 800f02e:	ebba 0b04 	subs.w	fp, sl, r4
 800f032:	d00b      	beq.n	800f04c <_vfiprintf_r+0xa4>
 800f034:	465b      	mov	r3, fp
 800f036:	4622      	mov	r2, r4
 800f038:	4629      	mov	r1, r5
 800f03a:	4630      	mov	r0, r6
 800f03c:	f7ff ffa1 	bl	800ef82 <__sfputs_r>
 800f040:	3001      	adds	r0, #1
 800f042:	f000 80a7 	beq.w	800f194 <_vfiprintf_r+0x1ec>
 800f046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f048:	445a      	add	r2, fp
 800f04a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f04c:	f89a 3000 	ldrb.w	r3, [sl]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 809f 	beq.w	800f194 <_vfiprintf_r+0x1ec>
 800f056:	2300      	movs	r3, #0
 800f058:	f04f 32ff 	mov.w	r2, #4294967295
 800f05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f060:	f10a 0a01 	add.w	sl, sl, #1
 800f064:	9304      	str	r3, [sp, #16]
 800f066:	9307      	str	r3, [sp, #28]
 800f068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f06c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f06e:	4654      	mov	r4, sl
 800f070:	2205      	movs	r2, #5
 800f072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f076:	4853      	ldr	r0, [pc, #332]	@ (800f1c4 <_vfiprintf_r+0x21c>)
 800f078:	f7f1 f8b2 	bl	80001e0 <memchr>
 800f07c:	9a04      	ldr	r2, [sp, #16]
 800f07e:	b9d8      	cbnz	r0, 800f0b8 <_vfiprintf_r+0x110>
 800f080:	06d1      	lsls	r1, r2, #27
 800f082:	bf44      	itt	mi
 800f084:	2320      	movmi	r3, #32
 800f086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f08a:	0713      	lsls	r3, r2, #28
 800f08c:	bf44      	itt	mi
 800f08e:	232b      	movmi	r3, #43	@ 0x2b
 800f090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f094:	f89a 3000 	ldrb.w	r3, [sl]
 800f098:	2b2a      	cmp	r3, #42	@ 0x2a
 800f09a:	d015      	beq.n	800f0c8 <_vfiprintf_r+0x120>
 800f09c:	9a07      	ldr	r2, [sp, #28]
 800f09e:	4654      	mov	r4, sl
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	f04f 0c0a 	mov.w	ip, #10
 800f0a6:	4621      	mov	r1, r4
 800f0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0ac:	3b30      	subs	r3, #48	@ 0x30
 800f0ae:	2b09      	cmp	r3, #9
 800f0b0:	d94b      	bls.n	800f14a <_vfiprintf_r+0x1a2>
 800f0b2:	b1b0      	cbz	r0, 800f0e2 <_vfiprintf_r+0x13a>
 800f0b4:	9207      	str	r2, [sp, #28]
 800f0b6:	e014      	b.n	800f0e2 <_vfiprintf_r+0x13a>
 800f0b8:	eba0 0308 	sub.w	r3, r0, r8
 800f0bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	9304      	str	r3, [sp, #16]
 800f0c4:	46a2      	mov	sl, r4
 800f0c6:	e7d2      	b.n	800f06e <_vfiprintf_r+0xc6>
 800f0c8:	9b03      	ldr	r3, [sp, #12]
 800f0ca:	1d19      	adds	r1, r3, #4
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	9103      	str	r1, [sp, #12]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	bfbb      	ittet	lt
 800f0d4:	425b      	neglt	r3, r3
 800f0d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f0da:	9307      	strge	r3, [sp, #28]
 800f0dc:	9307      	strlt	r3, [sp, #28]
 800f0de:	bfb8      	it	lt
 800f0e0:	9204      	strlt	r2, [sp, #16]
 800f0e2:	7823      	ldrb	r3, [r4, #0]
 800f0e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0e6:	d10a      	bne.n	800f0fe <_vfiprintf_r+0x156>
 800f0e8:	7863      	ldrb	r3, [r4, #1]
 800f0ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0ec:	d132      	bne.n	800f154 <_vfiprintf_r+0x1ac>
 800f0ee:	9b03      	ldr	r3, [sp, #12]
 800f0f0:	1d1a      	adds	r2, r3, #4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	9203      	str	r2, [sp, #12]
 800f0f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0fa:	3402      	adds	r4, #2
 800f0fc:	9305      	str	r3, [sp, #20]
 800f0fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f1d4 <_vfiprintf_r+0x22c>
 800f102:	7821      	ldrb	r1, [r4, #0]
 800f104:	2203      	movs	r2, #3
 800f106:	4650      	mov	r0, sl
 800f108:	f7f1 f86a 	bl	80001e0 <memchr>
 800f10c:	b138      	cbz	r0, 800f11e <_vfiprintf_r+0x176>
 800f10e:	9b04      	ldr	r3, [sp, #16]
 800f110:	eba0 000a 	sub.w	r0, r0, sl
 800f114:	2240      	movs	r2, #64	@ 0x40
 800f116:	4082      	lsls	r2, r0
 800f118:	4313      	orrs	r3, r2
 800f11a:	3401      	adds	r4, #1
 800f11c:	9304      	str	r3, [sp, #16]
 800f11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f122:	4829      	ldr	r0, [pc, #164]	@ (800f1c8 <_vfiprintf_r+0x220>)
 800f124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f128:	2206      	movs	r2, #6
 800f12a:	f7f1 f859 	bl	80001e0 <memchr>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d03f      	beq.n	800f1b2 <_vfiprintf_r+0x20a>
 800f132:	4b26      	ldr	r3, [pc, #152]	@ (800f1cc <_vfiprintf_r+0x224>)
 800f134:	bb1b      	cbnz	r3, 800f17e <_vfiprintf_r+0x1d6>
 800f136:	9b03      	ldr	r3, [sp, #12]
 800f138:	3307      	adds	r3, #7
 800f13a:	f023 0307 	bic.w	r3, r3, #7
 800f13e:	3308      	adds	r3, #8
 800f140:	9303      	str	r3, [sp, #12]
 800f142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f144:	443b      	add	r3, r7
 800f146:	9309      	str	r3, [sp, #36]	@ 0x24
 800f148:	e76a      	b.n	800f020 <_vfiprintf_r+0x78>
 800f14a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f14e:	460c      	mov	r4, r1
 800f150:	2001      	movs	r0, #1
 800f152:	e7a8      	b.n	800f0a6 <_vfiprintf_r+0xfe>
 800f154:	2300      	movs	r3, #0
 800f156:	3401      	adds	r4, #1
 800f158:	9305      	str	r3, [sp, #20]
 800f15a:	4619      	mov	r1, r3
 800f15c:	f04f 0c0a 	mov.w	ip, #10
 800f160:	4620      	mov	r0, r4
 800f162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f166:	3a30      	subs	r2, #48	@ 0x30
 800f168:	2a09      	cmp	r2, #9
 800f16a:	d903      	bls.n	800f174 <_vfiprintf_r+0x1cc>
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d0c6      	beq.n	800f0fe <_vfiprintf_r+0x156>
 800f170:	9105      	str	r1, [sp, #20]
 800f172:	e7c4      	b.n	800f0fe <_vfiprintf_r+0x156>
 800f174:	fb0c 2101 	mla	r1, ip, r1, r2
 800f178:	4604      	mov	r4, r0
 800f17a:	2301      	movs	r3, #1
 800f17c:	e7f0      	b.n	800f160 <_vfiprintf_r+0x1b8>
 800f17e:	ab03      	add	r3, sp, #12
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	462a      	mov	r2, r5
 800f184:	4b12      	ldr	r3, [pc, #72]	@ (800f1d0 <_vfiprintf_r+0x228>)
 800f186:	a904      	add	r1, sp, #16
 800f188:	4630      	mov	r0, r6
 800f18a:	f3af 8000 	nop.w
 800f18e:	4607      	mov	r7, r0
 800f190:	1c78      	adds	r0, r7, #1
 800f192:	d1d6      	bne.n	800f142 <_vfiprintf_r+0x19a>
 800f194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f196:	07d9      	lsls	r1, r3, #31
 800f198:	d405      	bmi.n	800f1a6 <_vfiprintf_r+0x1fe>
 800f19a:	89ab      	ldrh	r3, [r5, #12]
 800f19c:	059a      	lsls	r2, r3, #22
 800f19e:	d402      	bmi.n	800f1a6 <_vfiprintf_r+0x1fe>
 800f1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1a2:	f7fe fe67 	bl	800de74 <__retarget_lock_release_recursive>
 800f1a6:	89ab      	ldrh	r3, [r5, #12]
 800f1a8:	065b      	lsls	r3, r3, #25
 800f1aa:	f53f af1f 	bmi.w	800efec <_vfiprintf_r+0x44>
 800f1ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1b0:	e71e      	b.n	800eff0 <_vfiprintf_r+0x48>
 800f1b2:	ab03      	add	r3, sp, #12
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	462a      	mov	r2, r5
 800f1b8:	4b05      	ldr	r3, [pc, #20]	@ (800f1d0 <_vfiprintf_r+0x228>)
 800f1ba:	a904      	add	r1, sp, #16
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7ff fa5d 	bl	800e67c <_printf_i>
 800f1c2:	e7e4      	b.n	800f18e <_vfiprintf_r+0x1e6>
 800f1c4:	080104be 	.word	0x080104be
 800f1c8:	080104c8 	.word	0x080104c8
 800f1cc:	00000000 	.word	0x00000000
 800f1d0:	0800ef83 	.word	0x0800ef83
 800f1d4:	080104c4 	.word	0x080104c4

0800f1d8 <__swbuf_r>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	460e      	mov	r6, r1
 800f1dc:	4614      	mov	r4, r2
 800f1de:	4605      	mov	r5, r0
 800f1e0:	b118      	cbz	r0, 800f1ea <__swbuf_r+0x12>
 800f1e2:	6a03      	ldr	r3, [r0, #32]
 800f1e4:	b90b      	cbnz	r3, 800f1ea <__swbuf_r+0x12>
 800f1e6:	f7fe fc4f 	bl	800da88 <__sinit>
 800f1ea:	69a3      	ldr	r3, [r4, #24]
 800f1ec:	60a3      	str	r3, [r4, #8]
 800f1ee:	89a3      	ldrh	r3, [r4, #12]
 800f1f0:	071a      	lsls	r2, r3, #28
 800f1f2:	d501      	bpl.n	800f1f8 <__swbuf_r+0x20>
 800f1f4:	6923      	ldr	r3, [r4, #16]
 800f1f6:	b943      	cbnz	r3, 800f20a <__swbuf_r+0x32>
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f000 f82a 	bl	800f254 <__swsetup_r>
 800f200:	b118      	cbz	r0, 800f20a <__swbuf_r+0x32>
 800f202:	f04f 37ff 	mov.w	r7, #4294967295
 800f206:	4638      	mov	r0, r7
 800f208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	6922      	ldr	r2, [r4, #16]
 800f20e:	1a98      	subs	r0, r3, r2
 800f210:	6963      	ldr	r3, [r4, #20]
 800f212:	b2f6      	uxtb	r6, r6
 800f214:	4283      	cmp	r3, r0
 800f216:	4637      	mov	r7, r6
 800f218:	dc05      	bgt.n	800f226 <__swbuf_r+0x4e>
 800f21a:	4621      	mov	r1, r4
 800f21c:	4628      	mov	r0, r5
 800f21e:	f7ff fd1f 	bl	800ec60 <_fflush_r>
 800f222:	2800      	cmp	r0, #0
 800f224:	d1ed      	bne.n	800f202 <__swbuf_r+0x2a>
 800f226:	68a3      	ldr	r3, [r4, #8]
 800f228:	3b01      	subs	r3, #1
 800f22a:	60a3      	str	r3, [r4, #8]
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	1c5a      	adds	r2, r3, #1
 800f230:	6022      	str	r2, [r4, #0]
 800f232:	701e      	strb	r6, [r3, #0]
 800f234:	6962      	ldr	r2, [r4, #20]
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	429a      	cmp	r2, r3
 800f23a:	d004      	beq.n	800f246 <__swbuf_r+0x6e>
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	07db      	lsls	r3, r3, #31
 800f240:	d5e1      	bpl.n	800f206 <__swbuf_r+0x2e>
 800f242:	2e0a      	cmp	r6, #10
 800f244:	d1df      	bne.n	800f206 <__swbuf_r+0x2e>
 800f246:	4621      	mov	r1, r4
 800f248:	4628      	mov	r0, r5
 800f24a:	f7ff fd09 	bl	800ec60 <_fflush_r>
 800f24e:	2800      	cmp	r0, #0
 800f250:	d0d9      	beq.n	800f206 <__swbuf_r+0x2e>
 800f252:	e7d6      	b.n	800f202 <__swbuf_r+0x2a>

0800f254 <__swsetup_r>:
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4b29      	ldr	r3, [pc, #164]	@ (800f2fc <__swsetup_r+0xa8>)
 800f258:	4605      	mov	r5, r0
 800f25a:	6818      	ldr	r0, [r3, #0]
 800f25c:	460c      	mov	r4, r1
 800f25e:	b118      	cbz	r0, 800f268 <__swsetup_r+0x14>
 800f260:	6a03      	ldr	r3, [r0, #32]
 800f262:	b90b      	cbnz	r3, 800f268 <__swsetup_r+0x14>
 800f264:	f7fe fc10 	bl	800da88 <__sinit>
 800f268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f26c:	0719      	lsls	r1, r3, #28
 800f26e:	d422      	bmi.n	800f2b6 <__swsetup_r+0x62>
 800f270:	06da      	lsls	r2, r3, #27
 800f272:	d407      	bmi.n	800f284 <__swsetup_r+0x30>
 800f274:	2209      	movs	r2, #9
 800f276:	602a      	str	r2, [r5, #0]
 800f278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f27c:	81a3      	strh	r3, [r4, #12]
 800f27e:	f04f 30ff 	mov.w	r0, #4294967295
 800f282:	e033      	b.n	800f2ec <__swsetup_r+0x98>
 800f284:	0758      	lsls	r0, r3, #29
 800f286:	d512      	bpl.n	800f2ae <__swsetup_r+0x5a>
 800f288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f28a:	b141      	cbz	r1, 800f29e <__swsetup_r+0x4a>
 800f28c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f290:	4299      	cmp	r1, r3
 800f292:	d002      	beq.n	800f29a <__swsetup_r+0x46>
 800f294:	4628      	mov	r0, r5
 800f296:	f7fe fe15 	bl	800dec4 <_free_r>
 800f29a:	2300      	movs	r3, #0
 800f29c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f2a4:	81a3      	strh	r3, [r4, #12]
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	6063      	str	r3, [r4, #4]
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	6023      	str	r3, [r4, #0]
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	f043 0308 	orr.w	r3, r3, #8
 800f2b4:	81a3      	strh	r3, [r4, #12]
 800f2b6:	6923      	ldr	r3, [r4, #16]
 800f2b8:	b94b      	cbnz	r3, 800f2ce <__swsetup_r+0x7a>
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2c4:	d003      	beq.n	800f2ce <__swsetup_r+0x7a>
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f000 f88b 	bl	800f3e4 <__smakebuf_r>
 800f2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d2:	f013 0201 	ands.w	r2, r3, #1
 800f2d6:	d00a      	beq.n	800f2ee <__swsetup_r+0x9a>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	60a2      	str	r2, [r4, #8]
 800f2dc:	6962      	ldr	r2, [r4, #20]
 800f2de:	4252      	negs	r2, r2
 800f2e0:	61a2      	str	r2, [r4, #24]
 800f2e2:	6922      	ldr	r2, [r4, #16]
 800f2e4:	b942      	cbnz	r2, 800f2f8 <__swsetup_r+0xa4>
 800f2e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f2ea:	d1c5      	bne.n	800f278 <__swsetup_r+0x24>
 800f2ec:	bd38      	pop	{r3, r4, r5, pc}
 800f2ee:	0799      	lsls	r1, r3, #30
 800f2f0:	bf58      	it	pl
 800f2f2:	6962      	ldrpl	r2, [r4, #20]
 800f2f4:	60a2      	str	r2, [r4, #8]
 800f2f6:	e7f4      	b.n	800f2e2 <__swsetup_r+0x8e>
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	e7f7      	b.n	800f2ec <__swsetup_r+0x98>
 800f2fc:	20000038 	.word	0x20000038

0800f300 <_raise_r>:
 800f300:	291f      	cmp	r1, #31
 800f302:	b538      	push	{r3, r4, r5, lr}
 800f304:	4605      	mov	r5, r0
 800f306:	460c      	mov	r4, r1
 800f308:	d904      	bls.n	800f314 <_raise_r+0x14>
 800f30a:	2316      	movs	r3, #22
 800f30c:	6003      	str	r3, [r0, #0]
 800f30e:	f04f 30ff 	mov.w	r0, #4294967295
 800f312:	bd38      	pop	{r3, r4, r5, pc}
 800f314:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f316:	b112      	cbz	r2, 800f31e <_raise_r+0x1e>
 800f318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f31c:	b94b      	cbnz	r3, 800f332 <_raise_r+0x32>
 800f31e:	4628      	mov	r0, r5
 800f320:	f000 f830 	bl	800f384 <_getpid_r>
 800f324:	4622      	mov	r2, r4
 800f326:	4601      	mov	r1, r0
 800f328:	4628      	mov	r0, r5
 800f32a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f32e:	f000 b817 	b.w	800f360 <_kill_r>
 800f332:	2b01      	cmp	r3, #1
 800f334:	d00a      	beq.n	800f34c <_raise_r+0x4c>
 800f336:	1c59      	adds	r1, r3, #1
 800f338:	d103      	bne.n	800f342 <_raise_r+0x42>
 800f33a:	2316      	movs	r3, #22
 800f33c:	6003      	str	r3, [r0, #0]
 800f33e:	2001      	movs	r0, #1
 800f340:	e7e7      	b.n	800f312 <_raise_r+0x12>
 800f342:	2100      	movs	r1, #0
 800f344:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f348:	4620      	mov	r0, r4
 800f34a:	4798      	blx	r3
 800f34c:	2000      	movs	r0, #0
 800f34e:	e7e0      	b.n	800f312 <_raise_r+0x12>

0800f350 <raise>:
 800f350:	4b02      	ldr	r3, [pc, #8]	@ (800f35c <raise+0xc>)
 800f352:	4601      	mov	r1, r0
 800f354:	6818      	ldr	r0, [r3, #0]
 800f356:	f7ff bfd3 	b.w	800f300 <_raise_r>
 800f35a:	bf00      	nop
 800f35c:	20000038 	.word	0x20000038

0800f360 <_kill_r>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	4d07      	ldr	r5, [pc, #28]	@ (800f380 <_kill_r+0x20>)
 800f364:	2300      	movs	r3, #0
 800f366:	4604      	mov	r4, r0
 800f368:	4608      	mov	r0, r1
 800f36a:	4611      	mov	r1, r2
 800f36c:	602b      	str	r3, [r5, #0]
 800f36e:	f7f4 f8ad 	bl	80034cc <_kill>
 800f372:	1c43      	adds	r3, r0, #1
 800f374:	d102      	bne.n	800f37c <_kill_r+0x1c>
 800f376:	682b      	ldr	r3, [r5, #0]
 800f378:	b103      	cbz	r3, 800f37c <_kill_r+0x1c>
 800f37a:	6023      	str	r3, [r4, #0]
 800f37c:	bd38      	pop	{r3, r4, r5, pc}
 800f37e:	bf00      	nop
 800f380:	200057f8 	.word	0x200057f8

0800f384 <_getpid_r>:
 800f384:	f7f4 b89a 	b.w	80034bc <_getpid>

0800f388 <_malloc_usable_size_r>:
 800f388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f38c:	1f18      	subs	r0, r3, #4
 800f38e:	2b00      	cmp	r3, #0
 800f390:	bfbc      	itt	lt
 800f392:	580b      	ldrlt	r3, [r1, r0]
 800f394:	18c0      	addlt	r0, r0, r3
 800f396:	4770      	bx	lr

0800f398 <__swhatbuf_r>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	460c      	mov	r4, r1
 800f39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a0:	2900      	cmp	r1, #0
 800f3a2:	b096      	sub	sp, #88	@ 0x58
 800f3a4:	4615      	mov	r5, r2
 800f3a6:	461e      	mov	r6, r3
 800f3a8:	da0d      	bge.n	800f3c6 <__swhatbuf_r+0x2e>
 800f3aa:	89a3      	ldrh	r3, [r4, #12]
 800f3ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3b0:	f04f 0100 	mov.w	r1, #0
 800f3b4:	bf14      	ite	ne
 800f3b6:	2340      	movne	r3, #64	@ 0x40
 800f3b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3bc:	2000      	movs	r0, #0
 800f3be:	6031      	str	r1, [r6, #0]
 800f3c0:	602b      	str	r3, [r5, #0]
 800f3c2:	b016      	add	sp, #88	@ 0x58
 800f3c4:	bd70      	pop	{r4, r5, r6, pc}
 800f3c6:	466a      	mov	r2, sp
 800f3c8:	f000 f848 	bl	800f45c <_fstat_r>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	dbec      	blt.n	800f3aa <__swhatbuf_r+0x12>
 800f3d0:	9901      	ldr	r1, [sp, #4]
 800f3d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3da:	4259      	negs	r1, r3
 800f3dc:	4159      	adcs	r1, r3
 800f3de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3e2:	e7eb      	b.n	800f3bc <__swhatbuf_r+0x24>

0800f3e4 <__smakebuf_r>:
 800f3e4:	898b      	ldrh	r3, [r1, #12]
 800f3e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3e8:	079d      	lsls	r5, r3, #30
 800f3ea:	4606      	mov	r6, r0
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	d507      	bpl.n	800f400 <__smakebuf_r+0x1c>
 800f3f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	6123      	str	r3, [r4, #16]
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	6163      	str	r3, [r4, #20]
 800f3fc:	b003      	add	sp, #12
 800f3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f400:	ab01      	add	r3, sp, #4
 800f402:	466a      	mov	r2, sp
 800f404:	f7ff ffc8 	bl	800f398 <__swhatbuf_r>
 800f408:	9f00      	ldr	r7, [sp, #0]
 800f40a:	4605      	mov	r5, r0
 800f40c:	4639      	mov	r1, r7
 800f40e:	4630      	mov	r0, r6
 800f410:	f7fe f99c 	bl	800d74c <_malloc_r>
 800f414:	b948      	cbnz	r0, 800f42a <__smakebuf_r+0x46>
 800f416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f41a:	059a      	lsls	r2, r3, #22
 800f41c:	d4ee      	bmi.n	800f3fc <__smakebuf_r+0x18>
 800f41e:	f023 0303 	bic.w	r3, r3, #3
 800f422:	f043 0302 	orr.w	r3, r3, #2
 800f426:	81a3      	strh	r3, [r4, #12]
 800f428:	e7e2      	b.n	800f3f0 <__smakebuf_r+0xc>
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	6020      	str	r0, [r4, #0]
 800f42e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f432:	81a3      	strh	r3, [r4, #12]
 800f434:	9b01      	ldr	r3, [sp, #4]
 800f436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f43a:	b15b      	cbz	r3, 800f454 <__smakebuf_r+0x70>
 800f43c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f440:	4630      	mov	r0, r6
 800f442:	f000 f81d 	bl	800f480 <_isatty_r>
 800f446:	b128      	cbz	r0, 800f454 <__smakebuf_r+0x70>
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	f023 0303 	bic.w	r3, r3, #3
 800f44e:	f043 0301 	orr.w	r3, r3, #1
 800f452:	81a3      	strh	r3, [r4, #12]
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	431d      	orrs	r5, r3
 800f458:	81a5      	strh	r5, [r4, #12]
 800f45a:	e7cf      	b.n	800f3fc <__smakebuf_r+0x18>

0800f45c <_fstat_r>:
 800f45c:	b538      	push	{r3, r4, r5, lr}
 800f45e:	4d07      	ldr	r5, [pc, #28]	@ (800f47c <_fstat_r+0x20>)
 800f460:	2300      	movs	r3, #0
 800f462:	4604      	mov	r4, r0
 800f464:	4608      	mov	r0, r1
 800f466:	4611      	mov	r1, r2
 800f468:	602b      	str	r3, [r5, #0]
 800f46a:	f7f4 f88f 	bl	800358c <_fstat>
 800f46e:	1c43      	adds	r3, r0, #1
 800f470:	d102      	bne.n	800f478 <_fstat_r+0x1c>
 800f472:	682b      	ldr	r3, [r5, #0]
 800f474:	b103      	cbz	r3, 800f478 <_fstat_r+0x1c>
 800f476:	6023      	str	r3, [r4, #0]
 800f478:	bd38      	pop	{r3, r4, r5, pc}
 800f47a:	bf00      	nop
 800f47c:	200057f8 	.word	0x200057f8

0800f480 <_isatty_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d06      	ldr	r5, [pc, #24]	@ (800f49c <_isatty_r+0x1c>)
 800f484:	2300      	movs	r3, #0
 800f486:	4604      	mov	r4, r0
 800f488:	4608      	mov	r0, r1
 800f48a:	602b      	str	r3, [r5, #0]
 800f48c:	f7f4 f88e 	bl	80035ac <_isatty>
 800f490:	1c43      	adds	r3, r0, #1
 800f492:	d102      	bne.n	800f49a <_isatty_r+0x1a>
 800f494:	682b      	ldr	r3, [r5, #0]
 800f496:	b103      	cbz	r3, 800f49a <_isatty_r+0x1a>
 800f498:	6023      	str	r3, [r4, #0]
 800f49a:	bd38      	pop	{r3, r4, r5, pc}
 800f49c:	200057f8 	.word	0x200057f8

0800f4a0 <_init>:
 800f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a2:	bf00      	nop
 800f4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4a6:	bc08      	pop	{r3}
 800f4a8:	469e      	mov	lr, r3
 800f4aa:	4770      	bx	lr

0800f4ac <_fini>:
 800f4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ae:	bf00      	nop
 800f4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4b2:	bc08      	pop	{r3}
 800f4b4:	469e      	mov	lr, r3
 800f4b6:	4770      	bx	lr

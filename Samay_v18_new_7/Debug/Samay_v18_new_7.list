
Samay_v18_new_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001352c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014fc  080136c0  080136c0  000146c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bbc  08014bbc  000161f4  2**0
                  CONTENTS
  4 .ARM          00000008  08014bbc  08014bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bc4  08014bc4  000161f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bc4  08014bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bc8  08014bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08014bcc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000161f4  2**0
                  CONTENTS
 10 .bss          00005780  200001f4  200001f4  000161f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005974  20005974  000161f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000161f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bdd  00000000  00000000  00016224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e63  00000000  00000000  0002fe01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00033c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a9  00000000  00000000  000351d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a0c  00000000  00000000  00036281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e92e  00000000  00000000  0005bc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d7a  00000000  00000000  0007a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b335  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070dc  00000000  00000000  0014b378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00152454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080136a4 	.word	0x080136a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080136a4 	.word	0x080136a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f93f 	bl	8000270 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <Send_Uart+0x28>)
 8000ffe:	f008 fd78 	bl	8009af2 <HAL_UART_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004e0 	.word	0x200004e0

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0c5      	sub	sp, #276	@ 0x114
 8001014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f003 faed 	bl	80045f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 faa7 	bl	800156c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800101e:	f000 fb0f 	bl	8001640 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 fc7d 	bl	8001920 <MX_GPIO_Init>
  MX_DMA_Init();
 8001026:	f000 fc53 	bl	80018d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800102a:	f000 fbfd 	bl	8001828 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800102e:	f000 fc25 	bl	800187c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001032:	f00a fabb 	bl	800b5ac <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8001036:	f000 fbd7 	bl	80017e8 <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 800103a:	f000 fb79 	bl	8001730 <MX_I2S2_Init>
  MX_I2S3_Init();
 800103e:	f000 fba5 	bl	800178c <MX_I2S3_Init>
  MX_I2C2_Init();
 8001042:	f000 fb47 	bl	80016d4 <MX_I2C2_Init>


  // for new_eeprom.c new_rtc.c new_uart.c
  if (I2C1_ClockConfig() != HAL_OK) {
 8001046:	f000 fd3d 	bl	8001ac4 <I2C1_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <main+0x44>
          Error_Handler(); // Handle clock config failure
 8001050:	f001 fc18 	bl	8002884 <Error_Handler>
      }
  MX_I2C1_Init();
 8001054:	f000 fb10 	bl	8001678 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105c:	f003 fb3c 	bl	80046d8 <HAL_Delay>

  TS472IQT_EN();	/*	4 Preamp has to set to 1	*/
 8001060:	f001 f9a8 	bl	80023b4 <TS472IQT_EN>

  CODEC_RST();		/*	PE1 For Codec Reset		*/
 8001064:	f001 f97c 	bl	8002360 <CODEC_RST>

  configure_codec();
 8001068:	f001 f908 	bl	800227c <configure_codec>


  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 800106c:	4ba2      	ldr	r3, [pc, #648]	@ (80012f8 <main+0x2e8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	4ba1      	ldr	r3, [pc, #644]	@ (80012fc <main+0x2ec>)
 8001076:	4413      	add	r3, r2
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	48a0      	ldr	r0, [pc, #640]	@ (8001300 <main+0x2f0>)
 800107e:	f008 fdca 	bl	8009c16 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 8001082:	4b9d      	ldr	r3, [pc, #628]	@ (80012f8 <main+0x2e8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	4b9c      	ldr	r3, [pc, #624]	@ (80012fc <main+0x2ec>)
 800108c:	4413      	add	r3, r2
 800108e:	2201      	movs	r2, #1
 8001090:	4619      	mov	r1, r3
 8001092:	489c      	ldr	r0, [pc, #624]	@ (8001304 <main+0x2f4>)
 8001094:	f008 fdbf 	bl	8009c16 <HAL_UART_Receive_IT>

  ret=eeprom_init();
 8001098:	f001 fbfa 	bl	8002890 <eeprom_init>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b99      	ldr	r3, [pc, #612]	@ (8001308 <main+0x2f8>)
 80010a2:	701a      	strb	r2, [r3, #0]
  if(ret==HAL_OK)
 80010a4:	4b98      	ldr	r3, [pc, #608]	@ (8001308 <main+0x2f8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10a      	bne.n	80010c2 <main+0xb2>
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom ok\n\r", 11, HAL_MAX_DELAY);
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	220b      	movs	r2, #11
 80010b2:	4996      	ldr	r1, [pc, #600]	@ (800130c <main+0x2fc>)
 80010b4:	4892      	ldr	r0, [pc, #584]	@ (8001300 <main+0x2f0>)
 80010b6:	f008 fd1c 	bl	8009af2 <HAL_UART_Transmit>
  	HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	@ 0x64
 80010bc:	f003 fb0c 	bl	80046d8 <HAL_Delay>
 80010c0:	e009      	b.n	80010d6 <main+0xc6>
  }
  else
  {
  	HAL_UART_Transmit(&huart3, (uint8_t*)"eeprom notok\n\r", 14, HAL_MAX_DELAY);
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	220e      	movs	r2, #14
 80010c8:	4991      	ldr	r1, [pc, #580]	@ (8001310 <main+0x300>)
 80010ca:	488d      	ldr	r0, [pc, #564]	@ (8001300 <main+0x2f0>)
 80010cc:	f008 fd11 	bl	8009af2 <HAL_UART_Transmit>
  	HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f003 fb01 	bl	80046d8 <HAL_Delay>
  }

  rtc_init(&hi2c1);
 80010d6:	488f      	ldr	r0, [pc, #572]	@ (8001314 <main+0x304>)
 80010d8:	f001 fcc0 	bl	8002a5c <rtc_init>

  	rtc_timedate_t timedate = {1, 1, 0, 1, 1, 01, 0xFF};
 80010dc:	4a8e      	ldr	r2, [pc, #568]	@ (8001318 <main+0x308>)
 80010de:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80010e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e6:	6018      	str	r0, [r3, #0]
 80010e8:	3304      	adds	r3, #4
 80010ea:	8019      	strh	r1, [r3, #0]
 80010ec:	3302      	adds	r3, #2
 80010ee:	0c0a      	lsrs	r2, r1, #16
 80010f0:	701a      	strb	r2, [r3, #0]
      ret = rtc_settime(&timedate);
 80010f2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fe40 	bl	8002d7c <rtc_settime>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b81      	ldr	r3, [pc, #516]	@ (8001308 <main+0x2f8>)
 8001102:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 8001104:	2064      	movs	r0, #100	@ 0x64
 8001106:	f003 fae7 	bl	80046d8 <HAL_Delay>
      if (ret == HAL_OK) {
 800110a:	4b7f      	ldr	r3, [pc, #508]	@ (8001308 <main+0x2f8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <main+0x112>
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set ok\n\r", 17, HAL_MAX_DELAY);
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	2211      	movs	r2, #17
 8001118:	4980      	ldr	r1, [pc, #512]	@ (800131c <main+0x30c>)
 800111a:	4879      	ldr	r0, [pc, #484]	@ (8001300 <main+0x2f0>)
 800111c:	f008 fce9 	bl	8009af2 <HAL_UART_Transmit>
 8001120:	e006      	b.n	8001130 <main+0x120>
      } else {
          HAL_UART_Transmit(&huart3, (uint8_t*)"rtc time set notok\n\r", 20, HAL_MAX_DELAY);
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	2214      	movs	r2, #20
 8001128:	497d      	ldr	r1, [pc, #500]	@ (8001320 <main+0x310>)
 800112a:	4875      	ldr	r0, [pc, #468]	@ (8001300 <main+0x2f0>)
 800112c:	f008 fce1 	bl	8009af2 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(mode)
 8001130:	4b7c      	ldr	r3, [pc, #496]	@ (8001324 <main+0x314>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <main+0x132>
 800113a:	2b01      	cmp	r3, #1
 800113c:	f000 8110 	beq.w	8001360 <main+0x350>
 8001140:	e1e7      	b.n	8001512 <main+0x502>

	  case 0:

		  // Check if this is the first entry into Mode 0
		  static uint8_t first_entry = 1;
		  if(first_entry)
 8001142:	4b79      	ldr	r3, [pc, #484]	@ (8001328 <main+0x318>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d053      	beq.n	80011f2 <main+0x1e2>
				  HAL_UART_Transmit(&huart3, (uint8_t*)"No config\n\r", 11, HAL_MAX_DELAY);
			  }*/

			  // Read previous configuration from EEPROM
			        char config_buffer[RX_buffersize];
			        memset(config_buffer, 0, RX_buffersize); // Clear the buffer
 800114a:	463b      	mov	r3, r7
 800114c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00e fb9c 	bl	800f890 <memset>
			        if (eeprom_read(0x0000, (uint8_t*)config_buffer, RX_buffersize) != NULL)
 8001158:	463b      	mov	r3, r7
 800115a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115e:	4619      	mov	r1, r3
 8001160:	2000      	movs	r0, #0
 8001162:	f001 fbd3 	bl	800290c <eeprom_read>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d038      	beq.n	80011de <main+0x1ce>
			        {
			          // Check if the data is valid (not all 0xFF or empty)
			          if (strlen(config_buffer) > 0 && config_buffer[0] != 0xFF && config_buffer[0] != 0x00)
 800116c:	463b      	mov	r3, r7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d02c      	beq.n	80011ce <main+0x1be>
 8001174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d025      	beq.n	80011ce <main+0x1be>
 8001182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01e      	beq.n	80011ce <main+0x1be>
			          {
			            HAL_UART_Transmit(&huart3, (uint8_t*)"Restoring previous configuration: ", 33, HAL_MAX_DELAY);
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	2221      	movs	r2, #33	@ 0x21
 8001196:	4965      	ldr	r1, [pc, #404]	@ (800132c <main+0x31c>)
 8001198:	4859      	ldr	r0, [pc, #356]	@ (8001300 <main+0x2f0>)
 800119a:	f008 fcaa 	bl	8009af2 <HAL_UART_Transmit>
			            HAL_UART_Transmit(&huart3, (uint8_t*)config_buffer, strlen(config_buffer), HAL_MAX_DELAY);
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f865 	bl	8000270 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4639      	mov	r1, r7
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	4853      	ldr	r0, [pc, #332]	@ (8001300 <main+0x2f0>)
 80011b2:	f008 fc9e 	bl	8009af2 <HAL_UART_Transmit>
			            HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2202      	movs	r2, #2
 80011bc:	495c      	ldr	r1, [pc, #368]	@ (8001330 <main+0x320>)
 80011be:	4850      	ldr	r0, [pc, #320]	@ (8001300 <main+0x2f0>)
 80011c0:	f008 fc97 	bl	8009af2 <HAL_UART_Transmit>

			            // Parse the configuration to restore alarms (id=2)
			            parse_and_print(config_buffer);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 f860 	bl	800328c <parse_and_print>
 80011cc:	e00e      	b.n	80011ec <main+0x1dc>
			          }
			          else
			          {
			            HAL_UART_Transmit(&huart3, (uint8_t*)"No valid previous configuration found\n\r", 39, HAL_MAX_DELAY);
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	2227      	movs	r2, #39	@ 0x27
 80011d4:	4957      	ldr	r1, [pc, #348]	@ (8001334 <main+0x324>)
 80011d6:	484a      	ldr	r0, [pc, #296]	@ (8001300 <main+0x2f0>)
 80011d8:	f008 fc8b 	bl	8009af2 <HAL_UART_Transmit>
 80011dc:	e006      	b.n	80011ec <main+0x1dc>
			          }
			        }
			        else
			        {
			          HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed during init\n\r", 32, HAL_MAX_DELAY);
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	2220      	movs	r2, #32
 80011e4:	4954      	ldr	r1, [pc, #336]	@ (8001338 <main+0x328>)
 80011e6:	4846      	ldr	r0, [pc, #280]	@ (8001300 <main+0x2f0>)
 80011e8:	f008 fc83 	bl	8009af2 <HAL_UART_Transmit>
			        }

			  first_entry = 0; // Only run this once when entering Mode 0
 80011ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001328 <main+0x318>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
		  }



	  if (alarm_triggered_flag) {
 80011f2:	4b52      	ldr	r3, [pc, #328]	@ (800133c <main+0x32c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d05a      	beq.n	80012b2 <main+0x2a2>
	              handle_recording();
 80011fc:	f000 fc96 	bl	8001b2c <handle_recording>

	              // Manage alarm queue (optional)
	              if (current_idx < alarm_count - 1) {
 8001200:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <main+0x330>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b4f      	ldr	r3, [pc, #316]	@ (8001344 <main+0x334>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	429a      	cmp	r2, r3
 800120e:	da4c      	bge.n	80012aa <main+0x29a>
	                  current_idx++;
 8001210:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <main+0x330>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <main+0x330>)
 800121a:	701a      	strb	r2, [r3, #0]
	                  if (rtc_setalarm(&alarm_queue[current_idx]) == HAL_OK) {
 800121c:	4b48      	ldr	r3, [pc, #288]	@ (8001340 <main+0x330>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	4a47      	ldr	r2, [pc, #284]	@ (8001348 <main+0x338>)
 800122a:	4413      	add	r3, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fe7d 	bl	8002f2c <rtc_setalarm>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d131      	bne.n	800129c <main+0x28c>
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 8001238:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <main+0x330>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <main+0x338>)
 8001240:	460b      	mov	r3, r1
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	4413      	add	r3, r2
 8001248:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 800124a:	4618      	mov	r0, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 800124c:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <main+0x330>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4a3d      	ldr	r2, [pc, #244]	@ (8001348 <main+0x338>)
 8001254:	460b      	mov	r3, r1
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a5b      	subs	r3, r3, r1
 800125a:	4413      	add	r3, r2
 800125c:	3301      	adds	r3, #1
 800125e:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 8001260:	461c      	mov	r4, r3
	                              alarm_queue[current_idx].hour, alarm_queue[current_idx].minute, alarm_queue[current_idx].second);
 8001262:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <main+0x330>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4a37      	ldr	r2, [pc, #220]	@ (8001348 <main+0x338>)
 800126a:	460b      	mov	r3, r1
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a5b      	subs	r3, r3, r1
 8001270:	4413      	add	r3, r2
 8001272:	3302      	adds	r3, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
	                      sprintf(uart_buffer, "Next alarm set: %02d:%02d:%02d\n\r",
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4623      	mov	r3, r4
 800127a:	4602      	mov	r2, r0
 800127c:	4933      	ldr	r1, [pc, #204]	@ (800134c <main+0x33c>)
 800127e:	4834      	ldr	r0, [pc, #208]	@ (8001350 <main+0x340>)
 8001280:	f00e fa3e 	bl	800f700 <siprintf>
	                      HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001284:	4832      	ldr	r0, [pc, #200]	@ (8001350 <main+0x340>)
 8001286:	f7fe fff3 	bl	8000270 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	492f      	ldr	r1, [pc, #188]	@ (8001350 <main+0x340>)
 8001294:	481a      	ldr	r0, [pc, #104]	@ (8001300 <main+0x2f0>)
 8001296:	f008 fc2c 	bl	8009af2 <HAL_UART_Transmit>
 800129a:	e006      	b.n	80012aa <main+0x29a>
	                  } else {
	                      HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to set next alarm\n\r", 26, HAL_MAX_DELAY);
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	221a      	movs	r2, #26
 80012a2:	492c      	ldr	r1, [pc, #176]	@ (8001354 <main+0x344>)
 80012a4:	4816      	ldr	r0, [pc, #88]	@ (8001300 <main+0x2f0>)
 80012a6:	f008 fc24 	bl	8009af2 <HAL_UART_Transmit>
	                  }
	              }

	              alarm_triggered_flag = 0; // Clear the flag after handling
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <main+0x32c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e006      	b.n	80012c0 <main+0x2b0>
	          } else if (is_recording) {
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <main+0x348>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <main+0x2b0>
	              // Continue checking save_frequency even if no new alarm
	              handle_recording();
 80012bc:	f000 fc36 	bl	8001b2c <handle_recording>
	          }


	  ret = rtc_gettime(&timedate);
 80012c0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fdbc 	bl	8002e42 <rtc_gettime>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <main+0x2f8>)
 80012d0:	701a      	strb	r2, [r3, #0]
	  if (ret == HAL_OK) {
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <main+0x2f8>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d008      	beq.n	80012ec <main+0x2dc>
		  sprintf(uart_buffer, "current time = %02d:%02d:%02d\n\r", timedate.hour, timedate.minute, timedate.second);
		  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
#endif
	  }
	  else {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time not ok\n\r", 21, HAL_MAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2215      	movs	r2, #21
 80012e0:	491e      	ldr	r1, [pc, #120]	@ (800135c <main+0x34c>)
 80012e2:	4807      	ldr	r0, [pc, #28]	@ (8001300 <main+0x2f0>)
 80012e4:	f008 fc05 	bl	8009af2 <HAL_UART_Transmit>
		  return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e11f      	b.n	800152c <main+0x51c>
	  }
	  HAL_Delay(1000);
 80012ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f0:	f003 f9f2 	bl	80046d8 <HAL_Delay>
	  break;
 80012f4:	e119      	b.n	800152a <main+0x51a>
 80012f6:	bf00      	nop
 80012f8:	2000579c 	.word	0x2000579c
 80012fc:	2000569c 	.word	0x2000569c
 8001300:	200004e0 	.word	0x200004e0
 8001304:	2000049c 	.word	0x2000049c
 8001308:	2000021c 	.word	0x2000021c
 800130c:	080137bc 	.word	0x080137bc
 8001310:	080137c8 	.word	0x080137c8
 8001314:	20000274 	.word	0x20000274
 8001318:	08013958 	.word	0x08013958
 800131c:	080137d8 	.word	0x080137d8
 8001320:	080137ec 	.word	0x080137ec
 8001324:	200055ce 	.word	0x200055ce
 8001328:	2000001c 	.word	0x2000001c
 800132c:	08013804 	.word	0x08013804
 8001330:	08013828 	.word	0x08013828
 8001334:	0801382c 	.word	0x0801382c
 8001338:	08013854 	.word	0x08013854
 800133c:	200055cc 	.word	0x200055cc
 8001340:	2000569b 	.word	0x2000569b
 8001344:	2000569a 	.word	0x2000569a
 8001348:	20005638 	.word	0x20005638
 800134c:	08013878 	.word	0x08013878
 8001350:	200057a8 	.word	0x200057a8
 8001354:	0801389c 	.word	0x0801389c
 8001358:	200055cd 	.word	0x200055cd
 800135c:	080138b8 	.word	0x080138b8

	  case 1:
		  if(datarecived)
 8001360:	4b75      	ldr	r3, [pc, #468]	@ (8001538 <main+0x528>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80de 	beq.w	8001528 <main+0x518>
		  	  {
		  		  //uint8_t eeprom_data[RX_buffersize];
		  		  senddata(rxbuffer, strlen(rxbuffer)); // Send received data
 800136c:	4873      	ldr	r0, [pc, #460]	@ (800153c <main+0x52c>)
 800136e:	f7fe ff7f 	bl	8000270 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4619      	mov	r1, r3
 8001378:	4870      	ldr	r0, [pc, #448]	@ (800153c <main+0x52c>)
 800137a:	f001 fef1 	bl	8003160 <senddata>

		  		 ret=rtc_gettime(&timedate);
 800137e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fd5d 	bl	8002e42 <rtc_gettime>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b6c      	ldr	r3, [pc, #432]	@ (8001540 <main+0x530>)
 800138e:	701a      	strb	r2, [r3, #0]
		  		        	  	                	  	            if(ret==HAL_OK)
 8001390:	4b6b      	ldr	r3, [pc, #428]	@ (8001540 <main+0x530>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d135      	bne.n	8001404 <main+0x3f4>
		  		        	  	                	  	            {
		  		        	  	                	  	          	  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8001398:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 800139c:	461a      	mov	r2, r3
 800139e:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80013a2:	4619      	mov	r1, r3
 80013a4:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	460b      	mov	r3, r1
 80013ac:	4965      	ldr	r1, [pc, #404]	@ (8001544 <main+0x534>)
 80013ae:	4866      	ldr	r0, [pc, #408]	@ (8001548 <main+0x538>)
 80013b0:	f00e f9a6 	bl	800f700 <siprintf>
		  		        	  	                	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013b4:	4864      	ldr	r0, [pc, #400]	@ (8001548 <main+0x538>)
 80013b6:	f7fe ff5b 	bl	8000270 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	4961      	ldr	r1, [pc, #388]	@ (8001548 <main+0x538>)
 80013c4:	4861      	ldr	r0, [pc, #388]	@ (800154c <main+0x53c>)
 80013c6:	f008 fb94 	bl	8009af2 <HAL_UART_Transmit>
		  		        	  	                	  	          	  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 80013ca:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80013ce:	461a      	mov	r2, r3
 80013d0:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 80013d4:	4619      	mov	r1, r3
 80013d6:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	460b      	mov	r3, r1
 80013de:	495c      	ldr	r1, [pc, #368]	@ (8001550 <main+0x540>)
 80013e0:	4859      	ldr	r0, [pc, #356]	@ (8001548 <main+0x538>)
 80013e2:	f00e f98d 	bl	800f700 <siprintf>
		  		        	  	                	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80013e6:	4858      	ldr	r0, [pc, #352]	@ (8001548 <main+0x538>)
 80013e8:	f7fe ff42 	bl	8000270 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	4954      	ldr	r1, [pc, #336]	@ (8001548 <main+0x538>)
 80013f6:	4855      	ldr	r0, [pc, #340]	@ (800154c <main+0x53c>)
 80013f8:	f008 fb7b 	bl	8009af2 <HAL_UART_Transmit>
		  		        	  	                	  	          	  HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	@ 0x64
 80013fe:	f003 f96b 	bl	80046d8 <HAL_Delay>
 8001402:	e009      	b.n	8001418 <main+0x408>
		  		        	  	                	  	            }
		  		        	  	                	  	            else
		  		        	  	                	  	            {
		  		        	  	                	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	2214      	movs	r2, #20
 800140a:	4952      	ldr	r1, [pc, #328]	@ (8001554 <main+0x544>)
 800140c:	484f      	ldr	r0, [pc, #316]	@ (800154c <main+0x53c>)
 800140e:	f008 fb70 	bl	8009af2 <HAL_UART_Transmit>
		  		        	  	                	  	          	  HAL_Delay(100);
 8001412:	2064      	movs	r0, #100	@ 0x64
 8001414:	f003 f960 	bl	80046d8 <HAL_Delay>
		  		        	  	                	  	            }

		  		        	  	                	  	      parse_and_print((char*)rxbuffer);
 8001418:	4848      	ldr	r0, [pc, #288]	@ (800153c <main+0x52c>)
 800141a:	f001 ff37 	bl	800328c <parse_and_print>

		  		  char rxCopy[RX_buffersize];
		  		  strcpy(rxCopy, (char*)eeprom_data);*/


		  		  ret=rtc_gettime(&timedate);
 800141e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fd0d 	bl	8002e42 <rtc_gettime>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b44      	ldr	r3, [pc, #272]	@ (8001540 <main+0x530>)
 800142e:	701a      	strb	r2, [r3, #0]
		  		  if(ret==HAL_OK)
 8001430:	4b43      	ldr	r3, [pc, #268]	@ (8001540 <main+0x530>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d135      	bne.n	80014a4 <main+0x494>
		  		  {
		  			  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8001438:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 800143c:	461a      	mov	r2, r3
 800143e:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8001442:	4619      	mov	r1, r3
 8001444:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	460b      	mov	r3, r1
 800144c:	493d      	ldr	r1, [pc, #244]	@ (8001544 <main+0x534>)
 800144e:	483e      	ldr	r0, [pc, #248]	@ (8001548 <main+0x538>)
 8001450:	f00e f956 	bl	800f700 <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001454:	483c      	ldr	r0, [pc, #240]	@ (8001548 <main+0x538>)
 8001456:	f7fe ff0b 	bl	8000270 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	4939      	ldr	r1, [pc, #228]	@ (8001548 <main+0x538>)
 8001464:	4839      	ldr	r0, [pc, #228]	@ (800154c <main+0x53c>)
 8001466:	f008 fb44 	bl	8009af2 <HAL_UART_Transmit>
		  			  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 800146a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800146e:	461a      	mov	r2, r3
 8001470:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 8001474:	4619      	mov	r1, r3
 8001476:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	4934      	ldr	r1, [pc, #208]	@ (8001550 <main+0x540>)
 8001480:	4831      	ldr	r0, [pc, #196]	@ (8001548 <main+0x538>)
 8001482:	f00e f93d 	bl	800f700 <siprintf>
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001486:	4830      	ldr	r0, [pc, #192]	@ (8001548 <main+0x538>)
 8001488:	f7fe fef2 	bl	8000270 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	492c      	ldr	r1, [pc, #176]	@ (8001548 <main+0x538>)
 8001496:	482d      	ldr	r0, [pc, #180]	@ (800154c <main+0x53c>)
 8001498:	f008 fb2b 	bl	8009af2 <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 800149c:	2064      	movs	r0, #100	@ 0x64
 800149e:	f003 f91b 	bl	80046d8 <HAL_Delay>
 80014a2:	e009      	b.n	80014b8 <main+0x4a8>
		  		  }
		  		  else
		  		  {
		  			  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	2214      	movs	r2, #20
 80014aa:	492a      	ldr	r1, [pc, #168]	@ (8001554 <main+0x544>)
 80014ac:	4827      	ldr	r0, [pc, #156]	@ (800154c <main+0x53c>)
 80014ae:	f008 fb20 	bl	8009af2 <HAL_UART_Transmit>
		  			  HAL_Delay(100);
 80014b2:	2064      	movs	r0, #100	@ 0x64
 80014b4:	f003 f910 	bl	80046d8 <HAL_Delay>
		  		  }

		  		  //parse_and_print((char*)rxCopy);
		  		  mode = 0; // Switch to Debug Mode after writing config
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <main+0x548>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, (uint8_t*)"Switching to Debug Mode\n\r", 25, HAL_MAX_DELAY);
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	2219      	movs	r2, #25
 80014c4:	4925      	ldr	r1, [pc, #148]	@ (800155c <main+0x54c>)
 80014c6:	4821      	ldr	r0, [pc, #132]	@ (800154c <main+0x53c>)
 80014c8:	f008 fb13 	bl	8009af2 <HAL_UART_Transmit>


		  		  datarecived = 0;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <main+0x528>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
		  		  rxindex = 0;
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <main+0x550>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
		  		  memset(rxbuffer, 0, RX_buffersize); // Clear buffer
 80014d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014dc:	2100      	movs	r1, #0
 80014de:	4817      	ldr	r0, [pc, #92]	@ (800153c <main+0x52c>)
 80014e0:	f00e f9d6 	bl	800f890 <memset>
		  		  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxbuffer[rxindex], 1);
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <main+0x550>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <main+0x52c>)
 80014ee:	4413      	add	r3, r2
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	4815      	ldr	r0, [pc, #84]	@ (800154c <main+0x53c>)
 80014f6:	f008 fb8e 	bl	8009c16 <HAL_UART_Receive_IT>
		  		  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <main+0x550>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <main+0x52c>)
 8001504:	4413      	add	r3, r2
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	4816      	ldr	r0, [pc, #88]	@ (8001564 <main+0x554>)
 800150c:	f008 fb83 	bl	8009c16 <HAL_UART_Receive_IT>
		  	  }
		  break;
 8001510:	e00a      	b.n	8001528 <main+0x518>

	  default:
	          HAL_UART_Transmit(&huart3, (uint8_t*)"Invalid mode\n\r", 14, HAL_MAX_DELAY);
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	220e      	movs	r2, #14
 8001518:	4913      	ldr	r1, [pc, #76]	@ (8001568 <main+0x558>)
 800151a:	480c      	ldr	r0, [pc, #48]	@ (800154c <main+0x53c>)
 800151c:	f008 fae9 	bl	8009af2 <HAL_UART_Transmit>
	          mode = 1; // Reset to config mode if something goes wrong
 8001520:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <main+0x548>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
	          break;
 8001526:	e000      	b.n	800152a <main+0x51a>
		  break;
 8001528:	bf00      	nop
	  switch(mode)
 800152a:	e601      	b.n	8001130 <main+0x120>

	  }

  /* USER CODE END 3 */
}
}
 800152c:	4618      	mov	r0, r3
 800152e:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	2000579d 	.word	0x2000579d
 800153c:	2000569c 	.word	0x2000569c
 8001540:	2000021c 	.word	0x2000021c
 8001544:	080138d0 	.word	0x080138d0
 8001548:	200057a8 	.word	0x200057a8
 800154c:	200004e0 	.word	0x200004e0
 8001550:	080138f0 	.word	0x080138f0
 8001554:	08013914 	.word	0x08013914
 8001558:	200055ce 	.word	0x200055ce
 800155c:	0801392c 	.word	0x0801392c
 8001560:	2000579c 	.word	0x2000579c
 8001564:	2000049c 	.word	0x2000049c
 8001568:	08013948 	.word	0x08013948

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	@ 0x50
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2230      	movs	r2, #48	@ 0x30
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f00e f988 	bl	800f890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <SystemClock_Config+0xcc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <SystemClock_Config+0xcc>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a0:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <SystemClock_Config+0xcc>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	4b22      	ldr	r3, [pc, #136]	@ (800163c <SystemClock_Config+0xd0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a21      	ldr	r2, [pc, #132]	@ (800163c <SystemClock_Config+0xd0>)
 80015b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <SystemClock_Config+0xd0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015dc:	2304      	movs	r3, #4
 80015de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 165;
 80015e0:	23a5      	movs	r3, #165	@ 0xa5
 80015e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e8:	2307      	movs	r3, #7
 80015ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fcd1 	bl	8007f98 <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015fc:	f001 f942 	bl	8002884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800160c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2105      	movs	r1, #5
 800161e:	4618      	mov	r0, r3
 8001620:	f006 ff32 	bl	8008488 <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800162a:	f001 f92b 	bl	8002884 <Error_Handler>
  }
}
 800162e:	bf00      	nop
 8001630:	3750      	adds	r7, #80	@ 0x50
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001652:	2301      	movs	r3, #1
 8001654:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001656:	2332      	movs	r3, #50	@ 0x32
 8001658:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800165a:	2302      	movs	r3, #2
 800165c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165e:	463b      	mov	r3, r7
 8001660:	4618      	mov	r0, r3
 8001662:	f007 f931 	bl	80088c8 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800166c:	f001 f90a 	bl	8002884 <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_I2C1_Init+0x50>)
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <MX_I2C1_Init+0x54>)
 8001680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_I2C1_Init+0x50>)
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <MX_I2C1_Init+0x58>)
 8001686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_I2C1_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_I2C1_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_I2C1_Init+0x50>)
 8001696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_I2C1_Init+0x50>)
 80016b6:	f003 ff2d 	bl	8005514 <HAL_I2C_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c0:	f001 f8e0 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000274 	.word	0x20000274
 80016cc:	40005400 	.word	0x40005400
 80016d0:	000186a0 	.word	0x000186a0

080016d4 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_I2C2_Init+0x50>)
 80016da:	4a13      	ldr	r2, [pc, #76]	@ (8001728 <MX_I2C2_Init+0x54>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_I2C2_Init+0x50>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_I2C2_Init+0x58>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_I2C2_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_I2C2_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_I2C2_Init+0x50>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <MX_I2C2_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_I2C2_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <MX_I2C2_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_I2C2_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_I2C2_Init+0x50>)
 8001712:	f003 feff 	bl	8005514 <HAL_I2C_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800171c:	f001 f8b2 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000220 	.word	0x20000220
 8001728:	40005800 	.word	0x40005800
 800172c:	000186a0 	.word	0x000186a0

08001730 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_I2S2_Init+0x54>)
 8001736:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <MX_I2S2_Init+0x58>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2S2_Init+0x54>)
 800173c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001740:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <MX_I2S2_Init+0x54>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_I2S2_Init+0x54>)
 800174a:	2201      	movs	r2, #1
 800174c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <MX_I2S2_Init+0x54>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_I2S2_Init+0x54>)
 8001756:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800175a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_I2S2_Init+0x54>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <MX_I2S2_Init+0x54>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_I2S2_Init+0x54>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_I2S2_Init+0x54>)
 8001770:	f005 fc32 	bl	8006fd8 <HAL_I2S_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800177a:	f001 f883 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002c8 	.word	0x200002c8
 8001788:	40003800 	.word	0x40003800

0800178c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <MX_I2S3_Init+0x54>)
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <MX_I2S3_Init+0x58>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_I2S3_Init+0x54>)
 8001798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800179c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017b2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80017b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_I2S3_Init+0x54>)
 80017cc:	f005 fc04 	bl	8006fd8 <HAL_I2S_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80017d6:	f001 f855 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000310 	.word	0x20000310
 80017e4:	40003c00 	.word	0x40003c00

080017e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 80017ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <MX_SDIO_SD_Init+0x3c>)
 80017f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <MX_SDIO_SD_Init+0x38>)
 8001812:	2204      	movs	r2, #4
 8001814:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
//  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;

  /* USER CODE END SDIO_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000418 	.word	0x20000418
 8001824:	40012c00 	.word	0x40012c00

08001828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <MX_USART2_UART_Init+0x50>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 8001834:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <MX_USART2_UART_Init+0x4c>)
 8001860:	f008 f8fa 	bl	8009a58 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800186a:	f001 f80b 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000049c 	.word	0x2000049c
 8001878:	40004400 	.word	0x40004400

0800187c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <MX_USART3_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 8001888:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800188c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_USART3_UART_Init+0x4c>)
 80018b4:	f008 f8d0 	bl	8009a58 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f000 ffe1 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200004e0 	.word	0x200004e0
 80018cc:	40004800 	.word	0x40004800

080018d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <MX_DMA_Init+0x4c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <MX_DMA_Init+0x4c>)
 80018e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <MX_DMA_Init+0x4c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	200b      	movs	r0, #11
 80018f8:	f002 ffed 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80018fc:	200b      	movs	r0, #11
 80018fe:	f003 f806 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	200e      	movs	r0, #14
 8001908:	f002 ffe5 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800190c:	200e      	movs	r0, #14
 800190e:	f002 fffe 	bl	800490e <HAL_NVIC_EnableIRQ>

}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	@ 0x30
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b57      	ldr	r3, [pc, #348]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b54      	ldr	r3, [pc, #336]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b50      	ldr	r3, [pc, #320]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b49      	ldr	r3, [pc, #292]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a48      	ldr	r2, [pc, #288]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b42      	ldr	r3, [pc, #264]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a41      	ldr	r2, [pc, #260]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <MX_GPIO_Init+0x194>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2132      	movs	r1, #50	@ 0x32
 80019e2:	4835      	ldr	r0, [pc, #212]	@ (8001ab8 <MX_GPIO_Init+0x198>)
 80019e4:	f003 fd64 	bl	80054b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 80019e8:	2200      	movs	r2, #0
 80019ea:	f24b 0178 	movw	r1, #45176	@ 0xb078
 80019ee:	4833      	ldr	r0, [pc, #204]	@ (8001abc <MX_GPIO_Init+0x19c>)
 80019f0:	f003 fd5e 	bl	80054b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80019fa:	4831      	ldr	r0, [pc, #196]	@ (8001ac0 <MX_GPIO_Init+0x1a0>)
 80019fc:	f003 fd58 	bl	80054b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a00:	2304      	movs	r3, #4
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a04:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4828      	ldr	r0, [pc, #160]	@ (8001ab8 <MX_GPIO_Init+0x198>)
 8001a16:	f003 fb97 	bl	8005148 <HAL_GPIO_Init>


  /*Configure GPIO pins : PE4 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8001a1a:	2332      	movs	r3, #50	@ 0x32
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4821      	ldr	r0, [pc, #132]	@ (8001ab8 <MX_GPIO_Init+0x198>)
 8001a32:	f003 fb89 	bl	8005148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
 8001a36:	f24b 0378 	movw	r3, #45176	@ 0xb078
 8001a3a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481b      	ldr	r0, [pc, #108]	@ (8001abc <MX_GPIO_Init+0x19c>)
 8001a50:	f003 fb7a 	bl	8005148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a54:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4814      	ldr	r0, [pc, #80]	@ (8001ac0 <MX_GPIO_Init+0x1a0>)
 8001a6e:	f003 fb6b 	bl	8005148 <HAL_GPIO_Init>



  /*Configure GPIO pin : PD0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]

  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a7a:	623b      	str	r3, [r7, #32]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	@ (8001abc <MX_GPIO_Init+0x19c>)
 8001a88:	f003 fb5e 	bl	8005148 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2006      	movs	r0, #6
 8001a92:	f002 ff20 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a96:	2006      	movs	r0, #6
 8001a98:	f002 ff39 	bl	800490e <HAL_NVIC_EnableIRQ>


    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2008      	movs	r0, #8
 8001aa2:	f002 ff18 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001aa6:	2008      	movs	r0, #8
 8001aa8:	f002 ff31 	bl	800490e <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	@ 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <I2C1_ClockConfig>:





HAL_StatusTypeDef I2C1_ClockConfig(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
    // Enable the clock for I2C1 (APB1 peripheral)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <I2C1_ClockConfig+0x58>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <I2C1_ClockConfig+0x58>)
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <I2C1_ClockConfig+0x58>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

    // Optional: Verify clock is enabled by checking the RCC register
    if (__HAL_RCC_I2C1_IS_CLK_ENABLED()) {
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <I2C1_ClockConfig+0x58>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <I2C1_ClockConfig+0x40>
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enabled\n\r", 20, HAL_MAX_DELAY);
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	2214      	movs	r2, #20
 8001af8:	4909      	ldr	r1, [pc, #36]	@ (8001b20 <I2C1_ClockConfig+0x5c>)
 8001afa:	480a      	ldr	r0, [pc, #40]	@ (8001b24 <I2C1_ClockConfig+0x60>)
 8001afc:	f007 fff9 	bl	8009af2 <HAL_UART_Transmit>
        return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e007      	b.n	8001b14 <I2C1_ClockConfig+0x50>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C1 clock enable failed\n\r", 26, HAL_MAX_DELAY);
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	221a      	movs	r2, #26
 8001b0a:	4907      	ldr	r1, [pc, #28]	@ (8001b28 <I2C1_ClockConfig+0x64>)
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <I2C1_ClockConfig+0x60>)
 8001b0e:	f007 fff0 	bl	8009af2 <HAL_UART_Transmit>
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
    }
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08013960 	.word	0x08013960
 8001b24:	200004e0 	.word	0x200004e0
 8001b28:	08013978 	.word	0x08013978

08001b2c <handle_recording>:


void handle_recording(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    if (!is_recording) {
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <handle_recording+0x6c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d119      	bne.n	8001b6e <handle_recording+0x42>
        if (Start_Recording() == 0) {
 8001b3a:	f000 f891 	bl	8001c60 <Start_Recording>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10d      	bne.n	8001b60 <handle_recording+0x34>
            is_recording = 1;
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <handle_recording+0x6c>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
            save_frequency = 0; // Reset save_frequency to start fresh
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <handle_recording+0x70>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t*)"Recording started due to alarm\n\r", 32, HAL_MAX_DELAY);
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	2220      	movs	r2, #32
 8001b56:	4912      	ldr	r1, [pc, #72]	@ (8001ba0 <handle_recording+0x74>)
 8001b58:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <handle_recording+0x78>)
 8001b5a:	f007 ffca 	bl	8009af2 <HAL_UART_Transmit>
 8001b5e:	e006      	b.n	8001b6e <handle_recording+0x42>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to start recording\n\r", 27, HAL_MAX_DELAY);
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	221b      	movs	r2, #27
 8001b66:	4910      	ldr	r1, [pc, #64]	@ (8001ba8 <handle_recording+0x7c>)
 8001b68:	480e      	ldr	r0, [pc, #56]	@ (8001ba4 <handle_recording+0x78>)
 8001b6a:	f007 ffc2 	bl	8009af2 <HAL_UART_Transmit>
        //sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
        //HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);


    // Check save_frequency condition
    if (is_recording && save_frequency >= 1880) {
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <handle_recording+0x6c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00c      	beq.n	8001b92 <handle_recording+0x66>
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <handle_recording+0x70>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f5b3 6feb 	cmp.w	r3, #1880	@ 0x758
 8001b80:	db07      	blt.n	8001b92 <handle_recording+0x66>
        stop_recording();
 8001b82:	f000 fa4f 	bl	8002024 <stop_recording>
        is_recording = 0;
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <handle_recording+0x6c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit(&huart3, (uint8_t*)"Recording stopped (save_frequency >= 1880)\n\r", 44, HAL_MAX_DELAY);
        HAL_Delay(100); // Safe in main loop context
 8001b8c:	2064      	movs	r0, #100	@ 0x64
 8001b8e:	f002 fda3 	bl	80046d8 <HAL_Delay>
    }
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200055cd 	.word	0x200055cd
 8001b9c:	200055c4 	.word	0x200055c4
 8001ba0:	08013994 	.word	0x08013994
 8001ba4:	200004e0 	.word	0x200004e0
 8001ba8:	080139b8 	.word	0x080139b8

08001bac <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]

	static uint32_t last_trigger_time = 0;
	    uint32_t current_time = HAL_GetTick();
 8001bb6:	f002 fd83 	bl	80046c0 <HAL_GetTick>
 8001bba:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_0) {
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d111      	bne.n	8001be6 <HAL_GPIO_EXTI_Callback+0x3a>
        if (rtc_check_alarm_flag() == 1) {
 8001bc2:	f001 fa6f 	bl	80030a4 <rtc_check_alarm_flag>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d136      	bne.n	8001c3a <HAL_GPIO_EXTI_Callback+0x8e>
            alarm_triggered_flag = 1; // Raise flag for main loop
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <HAL_GPIO_EXTI_Callback+0x94>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
            rtc_clearalarm();         // Clear the alarm flag
 8001bd2:	f001 fa47 	bl	8003064 <rtc_clearalarm>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm interrupt triggered!\n\r", 28, HAL_MAX_DELAY);
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	221c      	movs	r2, #28
 8001bdc:	4919      	ldr	r1, [pc, #100]	@ (8001c44 <HAL_GPIO_EXTI_Callback+0x98>)
 8001bde:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001be0:	f007 ff87 	bl	8009af2 <HAL_UART_Transmit>
 8001be4:	e029      	b.n	8001c3a <HAL_GPIO_EXTI_Callback+0x8e>
        }
    }

    else if (GPIO_Pin == GPIO_PIN_2) { // EXTI2 for PE2
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d126      	bne.n	8001c3a <HAL_GPIO_EXTI_Callback+0x8e>

    	if ((current_time - last_trigger_time) < 50) {
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b31      	cmp	r3, #49	@ 0x31
 8001bf6:	d91f      	bls.n	8001c38 <HAL_GPIO_EXTI_Callback+0x8c>
    	            return;
    	        }

    	        last_trigger_time = current_time;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6013      	str	r3, [r2, #0]

            if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001c02:	f003 fc3d 	bl	8005480 <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10a      	bne.n	8001c22 <HAL_GPIO_EXTI_Callback+0x76>
                mode = 1; // VCC (high)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 1\n\r", 28, HAL_MAX_DELAY);
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	221c      	movs	r2, #28
 8001c18:	490f      	ldr	r1, [pc, #60]	@ (8001c58 <HAL_GPIO_EXTI_Callback+0xac>)
 8001c1a:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c1c:	f007 ff69 	bl	8009af2 <HAL_UART_Transmit>
 8001c20:	e00b      	b.n	8001c3a <HAL_GPIO_EXTI_Callback+0x8e>
            } else {
                mode = 0; // Ground (low)
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)"EXTI2: Mode set to 0\n\r", 28, HAL_MAX_DELAY);
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	221c      	movs	r2, #28
 8001c2e:	490b      	ldr	r1, [pc, #44]	@ (8001c5c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c32:	f007 ff5e 	bl	8009af2 <HAL_UART_Transmit>
 8001c36:	e000      	b.n	8001c3a <HAL_GPIO_EXTI_Callback+0x8e>
    	            return;
 8001c38:	bf00      	nop
            }
        }

}
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200055cc 	.word	0x200055cc
 8001c44:	080139d4 	.word	0x080139d4
 8001c48:	200004e0 	.word	0x200004e0
 8001c4c:	20005634 	.word	0x20005634
 8001c50:	40021000 	.word	0x40021000
 8001c54:	200055ce 	.word	0x200055ce
 8001c58:	080139f4 	.word	0x080139f4
 8001c5c:	08013a0c 	.word	0x08013a0c

08001c60 <Start_Recording>:




int Start_Recording(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
    /********************************************************************************************************** SD card ***/
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // OE SD 1 and 2
 8001c66:	2201      	movs	r2, #1
 8001c68:	2108      	movs	r1, #8
 8001c6a:	48a9      	ldr	r0, [pc, #676]	@ (8001f10 <Start_Recording+0x2b0>)
 8001c6c:	f003 fc20 	bl	80054b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2110      	movs	r1, #16
 8001c74:	48a6      	ldr	r0, [pc, #664]	@ (8001f10 <Start_Recording+0x2b0>)
 8001c76:	f003 fc1b 	bl	80054b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // OE SD 3 and 4
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	48a4      	ldr	r0, [pc, #656]	@ (8001f10 <Start_Recording+0x2b0>)
 8001c80:	f003 fc16 	bl	80054b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2140      	movs	r1, #64	@ 0x40
 8001c88:	48a1      	ldr	r0, [pc, #644]	@ (8001f10 <Start_Recording+0x2b0>)
 8001c8a:	f003 fc11 	bl	80054b0 <HAL_GPIO_WritePin>

    /********************************************************************************************************** SD 1 ***/
    message("Message: %s\r\n", "________________SD Card 1___________________________\r\n");
 8001c8e:	49a1      	ldr	r1, [pc, #644]	@ (8001f14 <Start_Recording+0x2b4>)
 8001c90:	48a1      	ldr	r0, [pc, #644]	@ (8001f18 <Start_Recording+0x2b8>)
 8001c92:	f000 fdd5 	bl	8002840 <message>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // OE Pin pulled low SD 1 and 2
 8001c96:	2200      	movs	r2, #0
 8001c98:	2108      	movs	r1, #8
 8001c9a:	489d      	ldr	r0, [pc, #628]	@ (8001f10 <Start_Recording+0x2b0>)
 8001c9c:	f003 fc08 	bl	80054b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // SEL Pin pulled low SD 1
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	489a      	ldr	r0, [pc, #616]	@ (8001f10 <Start_Recording+0x2b0>)
 8001ca6:	f003 fc03 	bl	80054b0 <HAL_GPIO_WritePin>

    message("Message: %s\r\n", "________________Started to Stor 2 files in SD Card 1___________________________\r\n");
 8001caa:	499c      	ldr	r1, [pc, #624]	@ (8001f1c <Start_Recording+0x2bc>)
 8001cac:	489a      	ldr	r0, [pc, #616]	@ (8001f18 <Start_Recording+0x2b8>)
 8001cae:	f000 fdc7 	bl	8002840 <message>

    fresult = f_mount(&fs_local, "/", 1);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	499a      	ldr	r1, [pc, #616]	@ (8001f20 <Start_Recording+0x2c0>)
 8001cb6:	489b      	ldr	r0, [pc, #620]	@ (8001f24 <Start_Recording+0x2c4>)
 8001cb8:	f00b fc4a 	bl	800d550 <f_mount>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b99      	ldr	r3, [pc, #612]	@ (8001f28 <Start_Recording+0x2c8>)
 8001cc2:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8001cc4:	4b98      	ldr	r3, [pc, #608]	@ (8001f28 <Start_Recording+0x2c8>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <Start_Recording+0x78>
        message("ERROR!!! in mounting SD CARD...\r\n");
 8001ccc:	4897      	ldr	r0, [pc, #604]	@ (8001f2c <Start_Recording+0x2cc>)
 8001cce:	f000 fdb7 	bl	8002840 <message>
        return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e190      	b.n	8001ffa <Start_Recording+0x39a>
    }

    History_update();
 8001cd8:	f000 fb90 	bl	80023fc <History_update>


    sprintf(File_name_1, "file_%d_1.wav", number);
 8001cdc:	4b94      	ldr	r3, [pc, #592]	@ (8001f30 <Start_Recording+0x2d0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4994      	ldr	r1, [pc, #592]	@ (8001f34 <Start_Recording+0x2d4>)
 8001ce4:	4894      	ldr	r0, [pc, #592]	@ (8001f38 <Start_Recording+0x2d8>)
 8001ce6:	f00d fd0b 	bl	800f700 <siprintf>
    sprintf(File_name_2, "file_%d_2.wav", number);
 8001cea:	4b91      	ldr	r3, [pc, #580]	@ (8001f30 <Start_Recording+0x2d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4992      	ldr	r1, [pc, #584]	@ (8001f3c <Start_Recording+0x2dc>)
 8001cf2:	4893      	ldr	r0, [pc, #588]	@ (8001f40 <Start_Recording+0x2e0>)
 8001cf4:	f00d fd04 	bl	800f700 <siprintf>

    fresult = f_stat(File_name_1, &fno_local);
 8001cf8:	4992      	ldr	r1, [pc, #584]	@ (8001f44 <Start_Recording+0x2e4>)
 8001cfa:	488f      	ldr	r0, [pc, #572]	@ (8001f38 <Start_Recording+0x2d8>)
 8001cfc:	f00c fbf5 	bl	800e4ea <f_stat>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d06:	701a      	strb	r2, [r3, #0]
    fresult = f_stat(File_name_2, &fno_local);
 8001d08:	498e      	ldr	r1, [pc, #568]	@ (8001f44 <Start_Recording+0x2e4>)
 8001d0a:	488d      	ldr	r0, [pc, #564]	@ (8001f40 <Start_Recording+0x2e0>)
 8001d0c:	f00c fbed 	bl	800e4ea <f_stat>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b84      	ldr	r3, [pc, #528]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d16:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 8001d18:	4b83      	ldr	r3, [pc, #524]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <Start_Recording+0xce>
        message("ERROR!!! *%s* already exists!!!!\r\n use Update_File \r\n", "FILE1.txt");
 8001d20:	4989      	ldr	r1, [pc, #548]	@ (8001f48 <Start_Recording+0x2e8>)
 8001d22:	488a      	ldr	r0, [pc, #552]	@ (8001f4c <Start_Recording+0x2ec>)
 8001d24:	f000 fd8c 	bl	8002840 <message>
        return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	e165      	b.n	8001ffa <Start_Recording+0x39a>
    } else {
        fresult = f_open(&file_1, File_name_1, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001d2e:	220b      	movs	r2, #11
 8001d30:	4981      	ldr	r1, [pc, #516]	@ (8001f38 <Start_Recording+0x2d8>)
 8001d32:	4887      	ldr	r0, [pc, #540]	@ (8001f50 <Start_Recording+0x2f0>)
 8001d34:	f00b fc52 	bl	800d5dc <f_open>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d3e:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 8001d40:	4b79      	ldr	r3, [pc, #484]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <Start_Recording+0xfc>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_1);
 8001d48:	4b77      	ldr	r3, [pc, #476]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4a7a      	ldr	r2, [pc, #488]	@ (8001f38 <Start_Recording+0x2d8>)
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4880      	ldr	r0, [pc, #512]	@ (8001f54 <Start_Recording+0x2f4>)
 8001d52:	f000 fd75 	bl	8002840 <message>
            return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e14e      	b.n	8001ffa <Start_Recording+0x39a>
        }
        fresult = f_open(&file_2, File_name_2, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001d5c:	220b      	movs	r2, #11
 8001d5e:	4978      	ldr	r1, [pc, #480]	@ (8001f40 <Start_Recording+0x2e0>)
 8001d60:	487d      	ldr	r0, [pc, #500]	@ (8001f58 <Start_Recording+0x2f8>)
 8001d62:	f00b fc3b 	bl	800d5dc <f_open>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d6c:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) {
 8001d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <Start_Recording+0x12a>
            message("ERROR!!! No. %d in creating file *%s*\r\n", fresult, File_name_2);
 8001d76:	4b6c      	ldr	r3, [pc, #432]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4a71      	ldr	r2, [pc, #452]	@ (8001f40 <Start_Recording+0x2e0>)
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4875      	ldr	r0, [pc, #468]	@ (8001f54 <Start_Recording+0x2f4>)
 8001d80:	f000 fd5e 	bl	8002840 <message>
            return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e137      	b.n	8001ffa <Start_Recording+0x39a>
        }
        fresult = f_close(&file_1);
 8001d8a:	4871      	ldr	r0, [pc, #452]	@ (8001f50 <Start_Recording+0x2f0>)
 8001d8c:	f00c f95f 	bl	800e04e <f_close>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b64      	ldr	r3, [pc, #400]	@ (8001f28 <Start_Recording+0x2c8>)
 8001d96:	701a      	strb	r2, [r3, #0]
        fresult = f_close(&file_2);
 8001d98:	486f      	ldr	r0, [pc, #444]	@ (8001f58 <Start_Recording+0x2f8>)
 8001d9a:	f00c f958 	bl	800e04e <f_close>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <Start_Recording+0x2c8>)
 8001da4:	701a      	strb	r2, [r3, #0]
        if (fresult != FR_OK) message("ERROR No. %d in closing file *%s*\r\n", fresult, File_name_1);
 8001da6:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <Start_Recording+0x2c8>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <Start_Recording+0x15c>
 8001dae:	4b5e      	ldr	r3, [pc, #376]	@ (8001f28 <Start_Recording+0x2c8>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4a61      	ldr	r2, [pc, #388]	@ (8001f38 <Start_Recording+0x2d8>)
 8001db4:	4619      	mov	r1, r3
 8001db6:	4869      	ldr	r0, [pc, #420]	@ (8001f5c <Start_Recording+0x2fc>)
 8001db8:	f000 fd42 	bl	8002840 <message>
    }

    f_open(&file_1, File_name_1, FA_OPEN_APPEND | FA_WRITE);
 8001dbc:	2232      	movs	r2, #50	@ 0x32
 8001dbe:	495e      	ldr	r1, [pc, #376]	@ (8001f38 <Start_Recording+0x2d8>)
 8001dc0:	4863      	ldr	r0, [pc, #396]	@ (8001f50 <Start_Recording+0x2f0>)
 8001dc2:	f00b fc0b 	bl	800d5dc <f_open>
    f_open(&file_2, File_name_2, FA_OPEN_APPEND | FA_WRITE);
 8001dc6:	2232      	movs	r2, #50	@ 0x32
 8001dc8:	495d      	ldr	r1, [pc, #372]	@ (8001f40 <Start_Recording+0x2e0>)
 8001dca:	4863      	ldr	r0, [pc, #396]	@ (8001f58 <Start_Recording+0x2f8>)
 8001dcc:	f00b fc06 	bl	800d5dc <f_open>

    //read_and_print_registers();

    WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8001dd0:	4963      	ldr	r1, [pc, #396]	@ (8001f60 <Start_Recording+0x300>)
 8001dd2:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8001dd6:	f000 fbd1 	bl	800257c <WavProcess_EncInit>
    f_write(&file_1, pHeaderBuff, 44, (void *)&byteswritten);
 8001dda:	4b62      	ldr	r3, [pc, #392]	@ (8001f64 <Start_Recording+0x304>)
 8001ddc:	222c      	movs	r2, #44	@ 0x2c
 8001dde:	4960      	ldr	r1, [pc, #384]	@ (8001f60 <Start_Recording+0x300>)
 8001de0:	485b      	ldr	r0, [pc, #364]	@ (8001f50 <Start_Recording+0x2f0>)
 8001de2:	f00b ff22 	bl	800dc2a <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void *)&byteswritten);
 8001de6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f64 <Start_Recording+0x304>)
 8001de8:	222c      	movs	r2, #44	@ 0x2c
 8001dea:	495d      	ldr	r1, [pc, #372]	@ (8001f60 <Start_Recording+0x300>)
 8001dec:	485a      	ldr	r0, [pc, #360]	@ (8001f58 <Start_Recording+0x2f8>)
 8001dee:	f00b ff1c 	bl	800dc2a <f_write>

    memset(audio_buffer_1, 0, sizeof(audio_buffer_1));
 8001df2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001df6:	2100      	movs	r1, #0
 8001df8:	485b      	ldr	r0, [pc, #364]	@ (8001f68 <Start_Recording+0x308>)
 8001dfa:	f00d fd49 	bl	800f890 <memset>
    memset(audio_buffer_2, 0, sizeof(audio_buffer_2));
 8001dfe:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001e02:	2100      	movs	r1, #0
 8001e04:	4859      	ldr	r0, [pc, #356]	@ (8001f6c <Start_Recording+0x30c>)
 8001e06:	f00d fd43 	bl	800f890 <memset>

    message("Message: %s\r\n", "________________ Recording Started _____________\r\n");
 8001e0a:	4959      	ldr	r1, [pc, #356]	@ (8001f70 <Start_Recording+0x310>)
 8001e0c:	4842      	ldr	r0, [pc, #264]	@ (8001f18 <Start_Recording+0x2b8>)
 8001e0e:	f000 fd17 	bl	8002840 <message>

    // Stop any ongoing DMA
    HAL_I2S_DMAStop(&hi2s2);
 8001e12:	4858      	ldr	r0, [pc, #352]	@ (8001f74 <Start_Recording+0x314>)
 8001e14:	f005 fadc 	bl	80073d0 <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 8001e18:	4857      	ldr	r0, [pc, #348]	@ (8001f78 <Start_Recording+0x318>)
 8001e1a:	f005 fad9 	bl	80073d0 <HAL_I2S_DMAStop>

    // Check I2S state before starting
    HAL_I2S_StateTypeDef i2s2_state = HAL_I2S_GetState(&hi2s2);
 8001e1e:	4855      	ldr	r0, [pc, #340]	@ (8001f74 <Start_Recording+0x314>)
 8001e20:	f005 fcd0 	bl	80077c4 <HAL_I2S_GetState>
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
    HAL_I2S_StateTypeDef i2s3_state = HAL_I2S_GetState(&hi2s3);
 8001e28:	4853      	ldr	r0, [pc, #332]	@ (8001f78 <Start_Recording+0x318>)
 8001e2a:	f005 fccb 	bl	80077c4 <HAL_I2S_GetState>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71bb      	strb	r3, [r7, #6]
    sprintf(uart_buffer, "I2S2 State before start: %d\n\r", i2s2_state);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4951      	ldr	r1, [pc, #324]	@ (8001f7c <Start_Recording+0x31c>)
 8001e38:	4851      	ldr	r0, [pc, #324]	@ (8001f80 <Start_Recording+0x320>)
 8001e3a:	f00d fc61 	bl	800f700 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001e3e:	4850      	ldr	r0, [pc, #320]	@ (8001f80 <Start_Recording+0x320>)
 8001e40:	f7fe fa16 	bl	8000270 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	494c      	ldr	r1, [pc, #304]	@ (8001f80 <Start_Recording+0x320>)
 8001e4e:	484d      	ldr	r0, [pc, #308]	@ (8001f84 <Start_Recording+0x324>)
 8001e50:	f007 fe4f 	bl	8009af2 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State before start: %d\n\r", i2s3_state);
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	461a      	mov	r2, r3
 8001e58:	494b      	ldr	r1, [pc, #300]	@ (8001f88 <Start_Recording+0x328>)
 8001e5a:	4849      	ldr	r0, [pc, #292]	@ (8001f80 <Start_Recording+0x320>)
 8001e5c:	f00d fc50 	bl	800f700 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001e60:	4847      	ldr	r0, [pc, #284]	@ (8001f80 <Start_Recording+0x320>)
 8001e62:	f7fe fa05 	bl	8000270 <strlen>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	4944      	ldr	r1, [pc, #272]	@ (8001f80 <Start_Recording+0x320>)
 8001e70:	4844      	ldr	r0, [pc, #272]	@ (8001f84 <Start_Recording+0x324>)
 8001e72:	f007 fe3e 	bl	8009af2 <HAL_UART_Transmit>

    // Start I2S DMA
    if (HAL_I2S_Receive_DMA(&hi2s2, audio_buffer_1, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8001e76:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e7a:	493b      	ldr	r1, [pc, #236]	@ (8001f68 <Start_Recording+0x308>)
 8001e7c:	483d      	ldr	r0, [pc, #244]	@ (8001f74 <Start_Recording+0x314>)
 8001e7e:	f005 f9eb 	bl	8007258 <HAL_I2S_Receive_DMA>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <Start_Recording+0x262>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S2 !!!!__!!__\r\n");
 8001e88:	4940      	ldr	r1, [pc, #256]	@ (8001f8c <Start_Recording+0x32c>)
 8001e8a:	4823      	ldr	r0, [pc, #140]	@ (8001f18 <Start_Recording+0x2b8>)
 8001e8c:	f000 fcd8 	bl	8002840 <message>
        sprintf(uart_buffer, "I2S2 Error: %d\n\r", HAL_I2S_GetError(&hi2s2));
 8001e90:	4838      	ldr	r0, [pc, #224]	@ (8001f74 <Start_Recording+0x314>)
 8001e92:	f005 fca5 	bl	80077e0 <HAL_I2S_GetError>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	493d      	ldr	r1, [pc, #244]	@ (8001f90 <Start_Recording+0x330>)
 8001e9c:	4838      	ldr	r0, [pc, #224]	@ (8001f80 <Start_Recording+0x320>)
 8001e9e:	f00d fc2f 	bl	800f700 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001ea2:	4837      	ldr	r0, [pc, #220]	@ (8001f80 <Start_Recording+0x320>)
 8001ea4:	f7fe f9e4 	bl	8000270 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	4933      	ldr	r1, [pc, #204]	@ (8001f80 <Start_Recording+0x320>)
 8001eb2:	4834      	ldr	r0, [pc, #208]	@ (8001f84 <Start_Recording+0x324>)
 8001eb4:	f007 fe1d 	bl	8009af2 <HAL_UART_Transmit>
        Error_Handler();
 8001eb8:	f000 fce4 	bl	8002884 <Error_Handler>
        return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	e09b      	b.n	8001ffa <Start_Recording+0x39a>
    }
    if (HAL_I2S_Receive_DMA(&hi2s3, audio_buffer_2, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8001ec2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001ec6:	4929      	ldr	r1, [pc, #164]	@ (8001f6c <Start_Recording+0x30c>)
 8001ec8:	482b      	ldr	r0, [pc, #172]	@ (8001f78 <Start_Recording+0x318>)
 8001eca:	f005 f9c5 	bl	8007258 <HAL_I2S_Receive_DMA>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d063      	beq.n	8001f9c <Start_Recording+0x33c>
        message("Message: %s\r\n", "________________HAL_I2S_Receive_DMA Error I2S3 !!!!__!!__\r\n");
 8001ed4:	492f      	ldr	r1, [pc, #188]	@ (8001f94 <Start_Recording+0x334>)
 8001ed6:	4810      	ldr	r0, [pc, #64]	@ (8001f18 <Start_Recording+0x2b8>)
 8001ed8:	f000 fcb2 	bl	8002840 <message>
        sprintf(uart_buffer, "I2S3 Error: %d\n\r", HAL_I2S_GetError(&hi2s3));
 8001edc:	4826      	ldr	r0, [pc, #152]	@ (8001f78 <Start_Recording+0x318>)
 8001ede:	f005 fc7f 	bl	80077e0 <HAL_I2S_GetError>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	492c      	ldr	r1, [pc, #176]	@ (8001f98 <Start_Recording+0x338>)
 8001ee8:	4825      	ldr	r0, [pc, #148]	@ (8001f80 <Start_Recording+0x320>)
 8001eea:	f00d fc09 	bl	800f700 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001eee:	4824      	ldr	r0, [pc, #144]	@ (8001f80 <Start_Recording+0x320>)
 8001ef0:	f7fe f9be 	bl	8000270 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8001efc:	4920      	ldr	r1, [pc, #128]	@ (8001f80 <Start_Recording+0x320>)
 8001efe:	4821      	ldr	r0, [pc, #132]	@ (8001f84 <Start_Recording+0x324>)
 8001f00:	f007 fdf7 	bl	8009af2 <HAL_UART_Transmit>
        Error_Handler();
 8001f04:	f000 fcbe 	bl	8002884 <Error_Handler>
        return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	e075      	b.n	8001ffa <Start_Recording+0x39a>
 8001f0e:	bf00      	nop
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	08013a24 	.word	0x08013a24
 8001f18:	08013a5c 	.word	0x08013a5c
 8001f1c:	08013a6c 	.word	0x08013a6c
 8001f20:	08013ac0 	.word	0x08013ac0
 8001f24:	2000058c 	.word	0x2000058c
 8001f28:	20000210 	.word	0x20000210
 8001f2c:	08013ac4 	.word	0x08013ac4
 8001f30:	20000588 	.word	0x20000588
 8001f34:	08013ae8 	.word	0x08013ae8
 8001f38:	20003644 	.word	0x20003644
 8001f3c:	08013af8 	.word	0x08013af8
 8001f40:	20003664 	.word	0x20003664
 8001f44:	20003624 	.word	0x20003624
 8001f48:	08013b08 	.word	0x08013b08
 8001f4c:	08013b14 	.word	0x08013b14
 8001f50:	200015c0 	.word	0x200015c0
 8001f54:	08013b4c 	.word	0x08013b4c
 8001f58:	200025f0 	.word	0x200025f0
 8001f5c:	08013b74 	.word	0x08013b74
 8001f60:	20005608 	.word	0x20005608
 8001f64:	20005604 	.word	0x20005604
 8001f68:	20004624 	.word	0x20004624
 8001f6c:	20003684 	.word	0x20003684
 8001f70:	08013b98 	.word	0x08013b98
 8001f74:	200002c8 	.word	0x200002c8
 8001f78:	20000310 	.word	0x20000310
 8001f7c:	08013bcc 	.word	0x08013bcc
 8001f80:	200057a8 	.word	0x200057a8
 8001f84:	200004e0 	.word	0x200004e0
 8001f88:	08013bec 	.word	0x08013bec
 8001f8c:	08013c0c 	.word	0x08013c0c
 8001f90:	08013c48 	.word	0x08013c48
 8001f94:	08013c5c 	.word	0x08013c5c
 8001f98:	08013c98 	.word	0x08013c98
    }

    // Confirm DMA started
    sprintf(uart_buffer, "I2S2 State after start: %d\n\r", HAL_I2S_GetState(&hi2s2));
 8001f9c:	4819      	ldr	r0, [pc, #100]	@ (8002004 <Start_Recording+0x3a4>)
 8001f9e:	f005 fc11 	bl	80077c4 <HAL_I2S_GetState>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4918      	ldr	r1, [pc, #96]	@ (8002008 <Start_Recording+0x3a8>)
 8001fa8:	4818      	ldr	r0, [pc, #96]	@ (800200c <Start_Recording+0x3ac>)
 8001faa:	f00d fba9 	bl	800f700 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001fae:	4817      	ldr	r0, [pc, #92]	@ (800200c <Start_Recording+0x3ac>)
 8001fb0:	f7fe f95e 	bl	8000270 <strlen>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	4913      	ldr	r1, [pc, #76]	@ (800200c <Start_Recording+0x3ac>)
 8001fbe:	4814      	ldr	r0, [pc, #80]	@ (8002010 <Start_Recording+0x3b0>)
 8001fc0:	f007 fd97 	bl	8009af2 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after start: %d\n\r", HAL_I2S_GetState(&hi2s3));
 8001fc4:	4813      	ldr	r0, [pc, #76]	@ (8002014 <Start_Recording+0x3b4>)
 8001fc6:	f005 fbfd 	bl	80077c4 <HAL_I2S_GetState>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4912      	ldr	r1, [pc, #72]	@ (8002018 <Start_Recording+0x3b8>)
 8001fd0:	480e      	ldr	r0, [pc, #56]	@ (800200c <Start_Recording+0x3ac>)
 8001fd2:	f00d fb95 	bl	800f700 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);\
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <Start_Recording+0x3ac>)
 8001fd8:	f7fe f94a 	bl	8000270 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	4909      	ldr	r1, [pc, #36]	@ (800200c <Start_Recording+0x3ac>)
 8001fe6:	480a      	ldr	r0, [pc, #40]	@ (8002010 <Start_Recording+0x3b0>)
 8001fe8:	f007 fd83 	bl	8009af2 <HAL_UART_Transmit>

    stop_saving = 0;  // Reset stop_saving for callbacks
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <Start_Recording+0x3bc>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    BufferCtl.fptr = 0;  // Reset file pointer
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <Start_Recording+0x3c0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]

    return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200002c8 	.word	0x200002c8
 8002008:	08013cac 	.word	0x08013cac
 800200c:	200057a8 	.word	0x200057a8
 8002010:	200004e0 	.word	0x200004e0
 8002014:	20000310 	.word	0x20000310
 8002018:	08013ccc 	.word	0x08013ccc
 800201c:	200055c8 	.word	0x200055c8
 8002020:	200055fc 	.word	0x200055fc

08002024 <stop_recording>:
int stop_recording(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    HAL_I2S_DMAStop(&hi2s2);
 8002028:	4836      	ldr	r0, [pc, #216]	@ (8002104 <stop_recording+0xe0>)
 800202a:	f005 f9d1 	bl	80073d0 <HAL_I2S_DMAStop>
    HAL_I2S_DMAStop(&hi2s3);
 800202e:	4836      	ldr	r0, [pc, #216]	@ (8002108 <stop_recording+0xe4>)
 8002030:	f005 f9ce 	bl	80073d0 <HAL_I2S_DMAStop>

    // Debug I2S state after stopping
    sprintf(uart_buffer, "I2S2 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s2));
 8002034:	4833      	ldr	r0, [pc, #204]	@ (8002104 <stop_recording+0xe0>)
 8002036:	f005 fbc5 	bl	80077c4 <HAL_I2S_GetState>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	4933      	ldr	r1, [pc, #204]	@ (800210c <stop_recording+0xe8>)
 8002040:	4833      	ldr	r0, [pc, #204]	@ (8002110 <stop_recording+0xec>)
 8002042:	f00d fb5d 	bl	800f700 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8002046:	4832      	ldr	r0, [pc, #200]	@ (8002110 <stop_recording+0xec>)
 8002048:	f7fe f912 	bl	8000270 <strlen>
 800204c:	4603      	mov	r3, r0
 800204e:	b29a      	uxth	r2, r3
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
 8002054:	492e      	ldr	r1, [pc, #184]	@ (8002110 <stop_recording+0xec>)
 8002056:	482f      	ldr	r0, [pc, #188]	@ (8002114 <stop_recording+0xf0>)
 8002058:	f007 fd4b 	bl	8009af2 <HAL_UART_Transmit>
    sprintf(uart_buffer, "I2S3 State after stop: %d\n\r", HAL_I2S_GetState(&hi2s3));
 800205c:	482a      	ldr	r0, [pc, #168]	@ (8002108 <stop_recording+0xe4>)
 800205e:	f005 fbb1 	bl	80077c4 <HAL_I2S_GetState>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	492c      	ldr	r1, [pc, #176]	@ (8002118 <stop_recording+0xf4>)
 8002068:	4829      	ldr	r0, [pc, #164]	@ (8002110 <stop_recording+0xec>)
 800206a:	f00d fb49 	bl	800f700 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800206e:	4828      	ldr	r0, [pc, #160]	@ (8002110 <stop_recording+0xec>)
 8002070:	f7fe f8fe 	bl	8000270 <strlen>
 8002074:	4603      	mov	r3, r0
 8002076:	b29a      	uxth	r2, r3
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	4924      	ldr	r1, [pc, #144]	@ (8002110 <stop_recording+0xec>)
 800207e:	4825      	ldr	r0, [pc, #148]	@ (8002114 <stop_recording+0xf0>)
 8002080:	f007 fd37 	bl	8009af2 <HAL_UART_Transmit>

    //read_and_print_registers();

    // Update WAV headers
    f_lseek(&file_1, 0);
 8002084:	2100      	movs	r1, #0
 8002086:	4825      	ldr	r0, [pc, #148]	@ (800211c <stop_recording+0xf8>)
 8002088:	f00c f80b 	bl	800e0a2 <f_lseek>
    f_lseek(&file_2, 0);
 800208c:	2100      	movs	r1, #0
 800208e:	4824      	ldr	r0, [pc, #144]	@ (8002120 <stop_recording+0xfc>)
 8002090:	f00c f807 	bl	800e0a2 <f_lseek>
    WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8002094:	4923      	ldr	r1, [pc, #140]	@ (8002124 <stop_recording+0x100>)
 8002096:	4824      	ldr	r0, [pc, #144]	@ (8002128 <stop_recording+0x104>)
 8002098:	f000 fb88 	bl	80027ac <WavProcess_HeaderUpdate>
    f_write(&file_1, pHeaderBuff, 44, (void*)&byteswritten);
 800209c:	4b23      	ldr	r3, [pc, #140]	@ (800212c <stop_recording+0x108>)
 800209e:	222c      	movs	r2, #44	@ 0x2c
 80020a0:	4921      	ldr	r1, [pc, #132]	@ (8002128 <stop_recording+0x104>)
 80020a2:	481e      	ldr	r0, [pc, #120]	@ (800211c <stop_recording+0xf8>)
 80020a4:	f00b fdc1 	bl	800dc2a <f_write>
    f_write(&file_2, pHeaderBuff, 44, (void*)&byteswritten);
 80020a8:	4b20      	ldr	r3, [pc, #128]	@ (800212c <stop_recording+0x108>)
 80020aa:	222c      	movs	r2, #44	@ 0x2c
 80020ac:	491e      	ldr	r1, [pc, #120]	@ (8002128 <stop_recording+0x104>)
 80020ae:	481c      	ldr	r0, [pc, #112]	@ (8002120 <stop_recording+0xfc>)
 80020b0:	f00b fdbb 	bl	800dc2a <f_write>

    f_close(&file_1);
 80020b4:	4819      	ldr	r0, [pc, #100]	@ (800211c <stop_recording+0xf8>)
 80020b6:	f00b ffca 	bl	800e04e <f_close>
    f_close(&file_2);
 80020ba:	4819      	ldr	r0, [pc, #100]	@ (8002120 <stop_recording+0xfc>)
 80020bc:	f00b ffc7 	bl	800e04e <f_close>

    fresult = f_mount(NULL, "/", 1);
 80020c0:	2201      	movs	r2, #1
 80020c2:	491b      	ldr	r1, [pc, #108]	@ (8002130 <stop_recording+0x10c>)
 80020c4:	2000      	movs	r0, #0
 80020c6:	f00b fa43 	bl	800d550 <f_mount>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <stop_recording+0x110>)
 80020d0:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <stop_recording+0x110>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <stop_recording+0xc2>
        message("ERROR!!! in UNMOUNTING SD CARD\r\n");
 80020da:	4817      	ldr	r0, [pc, #92]	@ (8002138 <stop_recording+0x114>)
 80020dc:	f000 fbb0 	bl	8002840 <message>
        return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	e00c      	b.n	8002100 <stop_recording+0xdc>
    }

    message("\r\nDATA Saved and SD Card un mounted____Check____\r\n");
 80020e6:	4815      	ldr	r0, [pc, #84]	@ (800213c <stop_recording+0x118>)
 80020e8:	f000 fbaa 	bl	8002840 <message>

    stop_saving = 1;  // Moved after file operations
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <stop_recording+0x11c>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    save_frequency = 0;  // Reset here is fine, but handle_recording resets it too
 80020f2:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <stop_recording+0x120>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

    HAL_Delay(200);  // Reduced delay, adjust if needed
 80020f8:	20c8      	movs	r0, #200	@ 0xc8
 80020fa:	f002 faed 	bl	80046d8 <HAL_Delay>

    return 0;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200002c8 	.word	0x200002c8
 8002108:	20000310 	.word	0x20000310
 800210c:	08013cec 	.word	0x08013cec
 8002110:	200057a8 	.word	0x200057a8
 8002114:	200004e0 	.word	0x200004e0
 8002118:	08013d08 	.word	0x08013d08
 800211c:	200015c0 	.word	0x200015c0
 8002120:	200025f0 	.word	0x200025f0
 8002124:	200055d0 	.word	0x200055d0
 8002128:	20005608 	.word	0x20005608
 800212c:	20005604 	.word	0x20005604
 8002130:	08013ac0 	.word	0x08013ac0
 8002134:	20000210 	.word	0x20000210
 8002138:	08013d24 	.word	0x08013d24
 800213c:	08013d48 	.word	0x08013d48
 8002140:	200055c8 	.word	0x200055c8
 8002144:	200055c4 	.word	0x200055c4

08002148 <HAL_I2S_RxCpltCallback>:
// DMA transfer complete callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8002150:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <HAL_I2S_RxCpltCallback+0x80>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d133      	bne.n	80021c0 <HAL_I2S_RxCpltCallback+0x78>
	    if (hi2s->Instance == SPI2) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1b      	ldr	r2, [pc, #108]	@ (80021cc <HAL_I2S_RxCpltCallback+0x84>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10e      	bne.n	8002180 <HAL_I2S_RxCpltCallback+0x38>
	        // Save second half of the buffer to the file
			if (f_write(&file_1, &audio_buffer_1[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_I2S_RxCpltCallback+0x88>)
 8002164:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002168:	491a      	ldr	r1, [pc, #104]	@ (80021d4 <HAL_I2S_RxCpltCallback+0x8c>)
 800216a:	481b      	ldr	r0, [pc, #108]	@ (80021d8 <HAL_I2S_RxCpltCallback+0x90>)
 800216c:	f00b fd5d 	bl	800dc2a <f_write>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <HAL_I2S_RxCpltCallback+0x38>
				 message("Error: Failed to write to file_1\n\r");
 8002176:	4819      	ldr	r0, [pc, #100]	@ (80021dc <HAL_I2S_RxCpltCallback+0x94>)
 8002178:	f000 fb62 	bl	8002840 <message>
				Error_Handler();  // File write failed
 800217c:	f000 fb82 	bl	8002884 <Error_Handler>
			}

	    }
	    if (hi2s->Instance == SPI3) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <HAL_I2S_RxCpltCallback+0x98>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10e      	bne.n	80021a8 <HAL_I2S_RxCpltCallback+0x60>
			if (f_write(&file_2, &audio_buffer_2[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 800218a:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_I2S_RxCpltCallback+0x9c>)
 800218c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002190:	4915      	ldr	r1, [pc, #84]	@ (80021e8 <HAL_I2S_RxCpltCallback+0xa0>)
 8002192:	4816      	ldr	r0, [pc, #88]	@ (80021ec <HAL_I2S_RxCpltCallback+0xa4>)
 8002194:	f00b fd49 	bl	800dc2a <f_write>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <HAL_I2S_RxCpltCallback+0x60>
				 message("Error: Failed to write to file_2\n\r");
 800219e:	4814      	ldr	r0, [pc, #80]	@ (80021f0 <HAL_I2S_RxCpltCallback+0xa8>)
 80021a0:	f000 fb4e 	bl	8002840 <message>
				Error_Handler();  // File write failed
 80021a4:	f000 fb6e 	bl	8002884 <Error_Handler>
			}
		}
	    save_frequency ++;
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <HAL_I2S_RxCpltCallback+0xac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_I2S_RxCpltCallback+0xac>)
 80021b0:	6013      	str	r3, [r2, #0]
	    BufferCtl.fptr += Wr_len_1;
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_I2S_RxCpltCallback+0xb0>)
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_I2S_RxCpltCallback+0x88>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <HAL_I2S_RxCpltCallback+0xb0>)
 80021be:	6053      	str	r3, [r2, #4]
	                sprintf(uart_buffer, "save_frequency = %lu\n\r", save_frequency);
	                HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
	            }*/

	}
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200055c8 	.word	0x200055c8
 80021cc:	40003800 	.word	0x40003800
 80021d0:	2000363c 	.word	0x2000363c
 80021d4:	20004df4 	.word	0x20004df4
 80021d8:	200015c0 	.word	0x200015c0
 80021dc:	08013d7c 	.word	0x08013d7c
 80021e0:	40003c00 	.word	0x40003c00
 80021e4:	20003640 	.word	0x20003640
 80021e8:	20003e54 	.word	0x20003e54
 80021ec:	200025f0 	.word	0x200025f0
 80021f0:	08013da0 	.word	0x08013da0
 80021f4:	200055c4 	.word	0x200055c4
 80021f8:	200055fc 	.word	0x200055fc

080021fc <HAL_I2S_RxHalfCpltCallback>:

// DMA transfer half-complete callback
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	if(!stop_saving){
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d121      	bne.n	8002250 <HAL_I2S_RxHalfCpltCallback+0x54>
		if (hi2s->Instance == SPI2) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a12      	ldr	r2, [pc, #72]	@ (800225c <HAL_I2S_RxHalfCpltCallback+0x60>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10b      	bne.n	800222e <HAL_I2S_RxHalfCpltCallback+0x32>
	        // Save first half of the buffer to the file
				if (f_write(&file_1, &audio_buffer_1[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_1) != FR_OK) {
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_I2S_RxHalfCpltCallback+0x64>)
 8002218:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800221c:	4911      	ldr	r1, [pc, #68]	@ (8002264 <HAL_I2S_RxHalfCpltCallback+0x68>)
 800221e:	4812      	ldr	r0, [pc, #72]	@ (8002268 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8002220:	f00b fd03 	bl	800dc2a <f_write>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2S_RxHalfCpltCallback+0x32>
					Error_Handler();  // File write failed
 800222a:	f000 fb2b 	bl	8002884 <Error_Handler>
				}
	    }
	    if (hi2s->Instance == SPI3) {
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <HAL_I2S_RxHalfCpltCallback+0x70>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d10b      	bne.n	8002250 <HAL_I2S_RxHalfCpltCallback+0x54>
	        // Save first half of the buffer to the file
				if (f_write(&file_2, &audio_buffer_2[0], AUDIO_BUFFER_SIZE / 2 * sizeof(uint16_t), &Wr_len_2) != FR_OK) {
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_I2S_RxHalfCpltCallback+0x74>)
 800223a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <HAL_I2S_RxHalfCpltCallback+0x78>)
 8002240:	480d      	ldr	r0, [pc, #52]	@ (8002278 <HAL_I2S_RxHalfCpltCallback+0x7c>)
 8002242:	f00b fcf2 	bl	800dc2a <f_write>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2S_RxHalfCpltCallback+0x54>
					Error_Handler();  // File write failed
 800224c:	f000 fb1a 	bl	8002884 <Error_Handler>
	    	}
	    }
	}

}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200055c8 	.word	0x200055c8
 800225c:	40003800 	.word	0x40003800
 8002260:	2000363c 	.word	0x2000363c
 8002264:	20004624 	.word	0x20004624
 8002268:	200015c0 	.word	0x200015c0
 800226c:	40003c00 	.word	0x40003c00
 8002270:	20003640 	.word	0x20003640
 8002274:	20003684 	.word	0x20003684
 8002278:	200025f0 	.word	0x200025f0

0800227c <configure_codec>:

void configure_codec() {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af04      	add	r7, sp, #16
    uint8_t i2c_tx;
    uint8_t i2c_rbf;

    if (HAL_I2C_IsDeviceReady(&hi2c2, (0x71 << 1), 5, 1000) != HAL_OK) {
 8002282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002286:	2205      	movs	r2, #5
 8002288:	21e2      	movs	r1, #226	@ 0xe2
 800228a:	482e      	ldr	r0, [pc, #184]	@ (8002344 <configure_codec+0xc8>)
 800228c:	f004 f8ca 	bl	8006424 <HAL_I2C_IsDeviceReady>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <configure_codec+0x22>
        message("Message: %s\r\n", "_____I2C_DeviceReady Not Happy!!!_____\r\n");
 8002296:	492c      	ldr	r1, [pc, #176]	@ (8002348 <configure_codec+0xcc>)
 8002298:	482c      	ldr	r0, [pc, #176]	@ (800234c <configure_codec+0xd0>)
 800229a:	f000 fad1 	bl	8002840 <message>
    }
    HAL_Delay(500);
 800229e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022a2:	f002 fa19 	bl	80046d8 <HAL_Delay>

    // Loop through the codec configurations
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	e023      	b.n	80022f4 <configure_codec+0x78>
        i2c_tx = codec_configs[i].value;
 80022ac:	4a28      	ldr	r2, [pc, #160]	@ (8002350 <configure_codec+0xd4>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	70fb      	strb	r3, [r7, #3]
        if (HAL_I2C_Mem_Write(&hi2c2, (0x71 << 1), codec_configs[i].reg_address, 1, &i2c_tx, 1, 1000) != HAL_OK) {
 80022b8:	4a25      	ldr	r2, [pc, #148]	@ (8002350 <configure_codec+0xd4>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	1cfb      	adds	r3, r7, #3
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	21e2      	movs	r1, #226	@ 0xe2
 80022d4:	481b      	ldr	r0, [pc, #108]	@ (8002344 <configure_codec+0xc8>)
 80022d6:	f003 fd85 	bl	8005de4 <HAL_I2C_Mem_Write>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <configure_codec+0x6c>
            message("Message: %s\r\n", "_____I2C_I2C_Mem_Write Not Happy!!!_____\r\n");
 80022e0:	491c      	ldr	r1, [pc, #112]	@ (8002354 <configure_codec+0xd8>)
 80022e2:	481a      	ldr	r0, [pc, #104]	@ (800234c <configure_codec+0xd0>)
 80022e4:	f000 faac 	bl	8002840 <message>
        }
        HAL_Delay(100);
 80022e8:	2064      	movs	r0, #100	@ 0x64
 80022ea:	f002 f9f5 	bl	80046d8 <HAL_Delay>
    for (size_t i = 0; i < sizeof(codec_configs) / sizeof(codec_configs[0]); i++) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3301      	adds	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b0d      	cmp	r3, #13
 80022f8:	d9d8      	bls.n	80022ac <configure_codec+0x30>
    }

    // Read back from register 0x06
    if (HAL_I2C_Mem_Read(&hi2c2, (0x71 << 1), 0x06, 1, &i2c_rbf, 1, 1000) == HAL_OK) {
 80022fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	2301      	movs	r3, #1
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	1cbb      	adds	r3, r7, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	2206      	movs	r2, #6
 800230c:	21e2      	movs	r1, #226	@ 0xe2
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <configure_codec+0xc8>)
 8002310:	f003 fe62 	bl	8005fd8 <HAL_I2C_Mem_Read>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10b      	bne.n	8002332 <configure_codec+0xb6>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002320:	480d      	ldr	r0, [pc, #52]	@ (8002358 <configure_codec+0xdc>)
 8002322:	f003 f8c5 	bl	80054b0 <HAL_GPIO_WritePin>
        i2c_rbf = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	70bb      	strb	r3, [r7, #2]

        HAL_Delay(10);
 800232a:	200a      	movs	r0, #10
 800232c:	f002 f9d4 	bl	80046d8 <HAL_Delay>
    } else {
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
    }

//    read_and_print_registers();
}
 8002330:	e003      	b.n	800233a <configure_codec+0xbe>
        message("Message: %s\r\n", "_____I2C_I2C_Mem_Read Not Happy Check (*)!!!_____\r\n");
 8002332:	490a      	ldr	r1, [pc, #40]	@ (800235c <configure_codec+0xe0>)
 8002334:	4805      	ldr	r0, [pc, #20]	@ (800234c <configure_codec+0xd0>)
 8002336:	f000 fa83 	bl	8002840 <message>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000220 	.word	0x20000220
 8002348:	08013dc4 	.word	0x08013dc4
 800234c:	08013a5c 	.word	0x08013a5c
 8002350:	20000000 	.word	0x20000000
 8002354:	08013df0 	.word	0x08013df0
 8002358:	40020c00 	.word	0x40020c00
 800235c:	08013e1c 	.word	0x08013e1c

08002360 <CODEC_RST>:
		  Unmount_SD("/");
		  indx++;
	  }
}

void CODEC_RST(void){
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  message("Message: %s\r\n", "_____I2C_I2C CODEC Reset_____\r\n");
 8002364:	4910      	ldr	r1, [pc, #64]	@ (80023a8 <CODEC_RST+0x48>)
 8002366:	4811      	ldr	r0, [pc, #68]	@ (80023ac <CODEC_RST+0x4c>)
 8002368:	f000 fa6a 	bl	8002840 <message>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	/*	Settle time is around 0.82 S	*/
 800236c:	2201      	movs	r2, #1
 800236e:	2102      	movs	r1, #2
 8002370:	480f      	ldr	r0, [pc, #60]	@ (80023b0 <CODEC_RST+0x50>)
 8002372:	f003 f89d 	bl	80054b0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800237a:	f002 f9ad 	bl	80046d8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	480b      	ldr	r0, [pc, #44]	@ (80023b0 <CODEC_RST+0x50>)
 8002384:	f003 f894 	bl	80054b0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800238c:	f002 f9a4 	bl	80046d8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	2102      	movs	r1, #2
 8002394:	4806      	ldr	r0, [pc, #24]	@ (80023b0 <CODEC_RST+0x50>)
 8002396:	f003 f88b 	bl	80054b0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);	/*	Need to Sart State machine	*/
 800239a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800239e:	f002 f99b 	bl	80046d8 <HAL_Delay>

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	08013f30 	.word	0x08013f30
 80023ac:	08013a5c 	.word	0x08013a5c
 80023b0:	40021000 	.word	0x40021000

080023b4 <TS472IQT_EN>:

void TS472IQT_EN(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023be:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <TS472IQT_EN+0x40>)
 80023c0:	f003 f876 	bl	80054b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023ca:	480b      	ldr	r0, [pc, #44]	@ (80023f8 <TS472IQT_EN+0x44>)
 80023cc:	f003 f870 	bl	80054b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023d6:	4808      	ldr	r0, [pc, #32]	@ (80023f8 <TS472IQT_EN+0x44>)
 80023d8:	f003 f86a 	bl	80054b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <TS472IQT_EN+0x44>)
 80023e4:	f003 f864 	bl	80054b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023e8:	2064      	movs	r0, #100	@ 0x64
 80023ea:	f002 f975 	bl	80046d8 <HAL_Delay>
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40020000 	.word	0x40020000

080023fc <History_update>:

    message("----------------------------------------------------------\r\n");
}

void History_update(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0

	fresult = f_stat ("History.txt", &fno_local);	/*	Check For File Presence	*/
 8002400:	494d      	ldr	r1, [pc, #308]	@ (8002538 <History_update+0x13c>)
 8002402:	484e      	ldr	r0, [pc, #312]	@ (800253c <History_update+0x140>)
 8002404:	f00c f871 	bl	800e4ea <f_stat>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	4b4c      	ldr	r3, [pc, #304]	@ (8002540 <History_update+0x144>)
 800240e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK){
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <History_update+0x144>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <History_update+0x24>
		message("History!!! History exists!!!! \r\n");
 8002418:	484a      	ldr	r0, [pc, #296]	@ (8002544 <History_update+0x148>)
 800241a:	f000 fa11 	bl	8002840 <message>
 800241e:	e01a      	b.n	8002456 <History_update+0x5a>
	}
	else {
		message("History!!! Missing !!!\r\n");
 8002420:	4849      	ldr	r0, [pc, #292]	@ (8002548 <History_update+0x14c>)
 8002422:	f000 fa0d 	bl	8002840 <message>
		f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8002426:	220a      	movs	r2, #10
 8002428:	4944      	ldr	r1, [pc, #272]	@ (800253c <History_update+0x140>)
 800242a:	4848      	ldr	r0, [pc, #288]	@ (800254c <History_update+0x150>)
 800242c:	f00b f8d6 	bl	800d5dc <f_open>
		sprintf(buffer, "%d", number);
 8002430:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <History_update+0x154>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4947      	ldr	r1, [pc, #284]	@ (8002554 <History_update+0x158>)
 8002438:	4847      	ldr	r0, [pc, #284]	@ (8002558 <History_update+0x15c>)
 800243a:	f00d f961 	bl	800f700 <siprintf>
		f_write(&file_1, buffer, strlen(buffer), &bw);
 800243e:	4846      	ldr	r0, [pc, #280]	@ (8002558 <History_update+0x15c>)
 8002440:	f7fd ff16 	bl	8000270 <strlen>
 8002444:	4602      	mov	r2, r0
 8002446:	4b45      	ldr	r3, [pc, #276]	@ (800255c <History_update+0x160>)
 8002448:	4943      	ldr	r1, [pc, #268]	@ (8002558 <History_update+0x15c>)
 800244a:	4840      	ldr	r0, [pc, #256]	@ (800254c <History_update+0x150>)
 800244c:	f00b fbed 	bl	800dc2a <f_write>
		f_close(&file_1);
 8002450:	483e      	ldr	r0, [pc, #248]	@ (800254c <History_update+0x150>)
 8002452:	f00b fdfc 	bl	800e04e <f_close>
	}
	// Open the file for reading
	res = f_open(&file_1, "History.txt", FA_READ);
 8002456:	2201      	movs	r2, #1
 8002458:	4938      	ldr	r1, [pc, #224]	@ (800253c <History_update+0x140>)
 800245a:	483c      	ldr	r0, [pc, #240]	@ (800254c <History_update+0x150>)
 800245c:	f00b f8be 	bl	800d5dc <f_open>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	4b3e      	ldr	r3, [pc, #248]	@ (8002560 <History_update+0x164>)
 8002466:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 8002468:	4b3d      	ldr	r3, [pc, #244]	@ (8002560 <History_update+0x164>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d15e      	bne.n	800252e <History_update+0x132>
		// Read data from the file
		res = f_read(&file_1, buffer, sizeof(buffer) - 1, &br);
 8002470:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <History_update+0x168>)
 8002472:	2263      	movs	r2, #99	@ 0x63
 8002474:	4938      	ldr	r1, [pc, #224]	@ (8002558 <History_update+0x15c>)
 8002476:	4835      	ldr	r0, [pc, #212]	@ (800254c <History_update+0x150>)
 8002478:	f00b fa78 	bl	800d96c <f_read>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	4b37      	ldr	r3, [pc, #220]	@ (8002560 <History_update+0x164>)
 8002482:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK && br > 0) {
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <History_update+0x164>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11a      	bne.n	80024c2 <History_update+0xc6>
 800248c:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <History_update+0x168>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <History_update+0xc6>
			buffer[br] = '\0';           // Null-terminate the string
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <History_update+0x168>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2f      	ldr	r2, [pc, #188]	@ (8002558 <History_update+0x15c>)
 800249a:	2100      	movs	r1, #0
 800249c:	54d1      	strb	r1, [r2, r3]
			number = atoi(buffer);       // Convert string to integer
 800249e:	482e      	ldr	r0, [pc, #184]	@ (8002558 <History_update+0x15c>)
 80024a0:	f00c f8b7 	bl	800e612 <atoi>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002550 <History_update+0x154>)
 80024a8:	6013      	str	r3, [r2, #0]
			number++;                    // Increment the number
 80024aa:	4b29      	ldr	r3, [pc, #164]	@ (8002550 <History_update+0x154>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <History_update+0x154>)
 80024b2:	6013      	str	r3, [r2, #0]
			message("Experiment Number: %d\r\n", number);
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <History_update+0x154>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4619      	mov	r1, r3
 80024ba:	482b      	ldr	r0, [pc, #172]	@ (8002568 <History_update+0x16c>)
 80024bc:	f000 f9c0 	bl	8002840 <message>
 80024c0:	e002      	b.n	80024c8 <History_update+0xcc>
		} else {
			message("Failed to read from file.\r\n");
 80024c2:	482a      	ldr	r0, [pc, #168]	@ (800256c <History_update+0x170>)
 80024c4:	f000 f9bc 	bl	8002840 <message>
		}
		f_close(&file_1); // Close the file
 80024c8:	4820      	ldr	r0, [pc, #128]	@ (800254c <History_update+0x150>)
 80024ca:	f00b fdc0 	bl	800e04e <f_close>

		/*	write	*/

	// Open the file for writing to update the number
		res = f_open(&file_1, "History.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80024ce:	220a      	movs	r2, #10
 80024d0:	491a      	ldr	r1, [pc, #104]	@ (800253c <History_update+0x140>)
 80024d2:	481e      	ldr	r0, [pc, #120]	@ (800254c <History_update+0x150>)
 80024d4:	f00b f882 	bl	800d5dc <f_open>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <History_update+0x164>)
 80024de:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <History_update+0x164>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11e      	bne.n	8002526 <History_update+0x12a>
			// Convert the incremented number back to a string and write to the file
			sprintf(buffer, "%d", number);
 80024e8:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <History_update+0x154>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4919      	ldr	r1, [pc, #100]	@ (8002554 <History_update+0x158>)
 80024f0:	4819      	ldr	r0, [pc, #100]	@ (8002558 <History_update+0x15c>)
 80024f2:	f00d f905 	bl	800f700 <siprintf>
			res = f_write(&file_1, buffer, strlen(buffer), &bw);
 80024f6:	4818      	ldr	r0, [pc, #96]	@ (8002558 <History_update+0x15c>)
 80024f8:	f7fd feba 	bl	8000270 <strlen>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b17      	ldr	r3, [pc, #92]	@ (800255c <History_update+0x160>)
 8002500:	4915      	ldr	r1, [pc, #84]	@ (8002558 <History_update+0x15c>)
 8002502:	4812      	ldr	r0, [pc, #72]	@ (800254c <History_update+0x150>)
 8002504:	f00b fb91 	bl	800dc2a <f_write>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <History_update+0x164>)
 800250e:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK) {
 8002510:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <History_update+0x164>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <History_update+0x122>
	//			message("Updated History.txt with number: %d\r\n", number);
			} else {
				message("Failed to write to file.\r\n");
 8002518:	4815      	ldr	r0, [pc, #84]	@ (8002570 <History_update+0x174>)
 800251a:	f000 f991 	bl	8002840 <message>
			}
			f_close(&file_1); // Close the file
 800251e:	480b      	ldr	r0, [pc, #44]	@ (800254c <History_update+0x150>)
 8002520:	f00b fd95 	bl	800e04e <f_close>
	} else {
		message("Failed to open History.txt.\r\n");
	}


}
 8002524:	e006      	b.n	8002534 <History_update+0x138>
			message("Failed to open History.txt for writing.\r\n");
 8002526:	4813      	ldr	r0, [pc, #76]	@ (8002574 <History_update+0x178>)
 8002528:	f000 f98a 	bl	8002840 <message>
}
 800252c:	e002      	b.n	8002534 <History_update+0x138>
		message("Failed to open History.txt.\r\n");
 800252e:	4812      	ldr	r0, [pc, #72]	@ (8002578 <History_update+0x17c>)
 8002530:	f000 f986 	bl	8002840 <message>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20003624 	.word	0x20003624
 800253c:	08013ff4 	.word	0x08013ff4
 8002540:	20000210 	.word	0x20000210
 8002544:	08014000 	.word	0x08014000
 8002548:	08014024 	.word	0x08014024
 800254c:	200015c0 	.word	0x200015c0
 8002550:	20000588 	.word	0x20000588
 8002554:	08014040 	.word	0x08014040
 8002558:	20000524 	.word	0x20000524
 800255c:	20000218 	.word	0x20000218
 8002560:	20003620 	.word	0x20003620
 8002564:	20000214 	.word	0x20000214
 8002568:	08014044 	.word	0x08014044
 800256c:	0801405c 	.word	0x0801405c
 8002570:	08014078 	.word	0x08014078
 8002574:	08014094 	.word	0x08014094
 8002578:	080140c0 	.word	0x080140c0

0800257c <WavProcess_EncInit>:
  * @param  pHeader: Pointer to the WAV file header to be written.
  * @retval 0 if success, !0 else.
  */

static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t* pHeader)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8002586:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <WavProcess_EncInit+0x78>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <WavProcess_EncInit+0x78>)
 800258e:	2202      	movs	r2, #2
 8002590:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <WavProcess_EncInit+0x78>)
 8002594:	2210      	movs	r2, #16
 8002596:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8002598:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <WavProcess_EncInit+0x78>)
 800259a:	4a17      	ldr	r2, [pc, #92]	@ (80025f8 <WavProcess_EncInit+0x7c>)
 800259c:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025a0:	222c      	movs	r2, #44	@ 0x2c
 80025a2:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 80025a4:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025a6:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 80025a8:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025aa:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80025ac:	08d2      	lsrs	r2, r2, #3
 80025ae:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 80025b4:	4a0f      	ldr	r2, [pc, #60]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025b6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025be:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025c2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025c6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	fb12 f303 	smulbb	r3, r2, r3
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025d4:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 80025d6:	4907      	ldr	r1, [pc, #28]	@ (80025f4 <WavProcess_EncInit+0x78>)
 80025d8:	6838      	ldr	r0, [r7, #0]
 80025da:	f000 f80f 	bl	80025fc <WavProcess_HeaderInit>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <WavProcess_EncInit+0x6c>
  {
    return 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <WavProcess_EncInit+0x6e>
  }
  return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200055d0 	.word	0x200055d0
 80025f8:	001d4c00 	.word	0x001d4c00

080025fc <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2252      	movs	r2, #82	@ 0x52
 800260a:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3301      	adds	r3, #1
 8002610:	2249      	movs	r2, #73	@ 0x49
 8002612:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3302      	adds	r3, #2
 8002618:	2246      	movs	r2, #70	@ 0x46
 800261a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3303      	adds	r3, #3
 8002620:	2246      	movs	r2, #70	@ 0x46
 8002622:	701a      	strb	r2, [r3, #0]

  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3305      	adds	r3, #5
 8002630:	224c      	movs	r2, #76	@ 0x4c
 8002632:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3306      	adds	r3, #6
 8002638:	221d      	movs	r2, #29
 800263a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3307      	adds	r3, #7
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3308      	adds	r3, #8
 8002648:	2257      	movs	r2, #87	@ 0x57
 800264a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3309      	adds	r3, #9
 8002650:	2241      	movs	r2, #65	@ 0x41
 8002652:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	330a      	adds	r3, #10
 8002658:	2256      	movs	r2, #86	@ 0x56
 800265a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	330b      	adds	r3, #11
 8002660:	2245      	movs	r2, #69	@ 0x45
 8002662:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	330c      	adds	r3, #12
 8002668:	2266      	movs	r2, #102	@ 0x66
 800266a:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	330d      	adds	r3, #13
 8002670:	226d      	movs	r2, #109	@ 0x6d
 8002672:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	330e      	adds	r3, #14
 8002678:	2274      	movs	r2, #116	@ 0x74
 800267a:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	330f      	adds	r3, #15
 8002680:	2220      	movs	r2, #32
 8002682:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3310      	adds	r3, #16
 8002688:	2210      	movs	r2, #16
 800268a:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3311      	adds	r3, #17
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3312      	adds	r3, #18
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3313      	adds	r3, #19
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3314      	adds	r3, #20
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3315      	adds	r3, #21
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	8ada      	ldrh	r2, [r3, #22]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3316      	adds	r3, #22
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3317      	adds	r3, #23
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3318      	adds	r3, #24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	0a1a      	lsrs	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3319      	adds	r3, #25
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	0c1a      	lsrs	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	331a      	adds	r3, #26
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	0e1a      	lsrs	r2, r3, #24
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	331b      	adds	r3, #27
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	331c      	adds	r3, #28
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	0a1a      	lsrs	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	331d      	adds	r3, #29
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	0c1a      	lsrs	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	331e      	adds	r3, #30
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	0e1a      	lsrs	r2, r3, #24
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	331f      	adds	r3, #31
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	8c1a      	ldrh	r2, [r3, #32]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3320      	adds	r3, #32
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3321      	adds	r3, #33	@ 0x21
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3322      	adds	r3, #34	@ 0x22
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3323      	adds	r3, #35	@ 0x23
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3324      	adds	r3, #36	@ 0x24
 8002760:	2264      	movs	r2, #100	@ 0x64
 8002762:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3325      	adds	r3, #37	@ 0x25
 8002768:	2261      	movs	r2, #97	@ 0x61
 800276a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3326      	adds	r3, #38	@ 0x26
 8002770:	2274      	movs	r2, #116	@ 0x74
 8002772:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3327      	adds	r3, #39	@ 0x27
 8002778:	2261      	movs	r2, #97	@ 0x61
 800277a:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3328      	adds	r3, #40	@ 0x28
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3329      	adds	r3, #41	@ 0x29
 8002788:	224c      	movs	r2, #76	@ 0x4c
 800278a:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	332a      	adds	r3, #42	@ 0x2a
 8002790:	221d      	movs	r2, #29
 8002792:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	332b      	adds	r3, #43	@ 0x2b
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 80027b6:	4b21      	ldr	r3, [pc, #132]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0a1a      	lsrs	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3305      	adds	r3, #5
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1a      	lsrs	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3306      	adds	r3, #6
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0e1a      	lsrs	r2, r3, #24
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3307      	adds	r3, #7
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	3b2c      	subs	r3, #44	@ 0x2c
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027f4:	6053      	str	r3, [r2, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr);
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3328      	adds	r3, #40	@ 0x28
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0a1a      	lsrs	r2, r3, #8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3329      	adds	r3, #41	@ 0x29
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8002810:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1a      	lsrs	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	332a      	adds	r3, #42	@ 0x2a
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24);
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <WavProcess_HeaderUpdate+0x90>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0e1a      	lsrs	r2, r3, #24
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	332b      	adds	r3, #43	@ 0x2b
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]
  /* Return 0 if all operations are OK */
  return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	200055fc 	.word	0x200055fc

08002840 <message>:

void message(const char *format, ...) {
 8002840:	b40f      	push	{r0, r1, r2, r3}
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
    char *buf = malloc(100 * sizeof(char)); // Allocate memory for the buffer
 8002848:	2064      	movs	r0, #100	@ 0x64
 800284a:	f00b fee7 	bl	800e61c <malloc>
 800284e:	4603      	mov	r3, r0
 8002850:	607b      	str	r3, [r7, #4]
    if (buf != NULL) { // Check if malloc was successful
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <message+0x36>
        va_list args;
        va_start(args, format);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	603b      	str	r3, [r7, #0]
        vsnprintf(buf, 100, format, args); // Format the string safely
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	2164      	movs	r1, #100	@ 0x64
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f00d f805 	bl	800f874 <vsniprintf>
        va_end(args);
        Send_Uart(buf); // Send the formatted string over UART
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fbba 	bl	8000fe4 <Send_Uart>
        free(buf);      // Free the allocated memory
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f00b fedb 	bl	800e62c <free>
    }
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002880:	b004      	add	sp, #16
 8002882:	4770      	bx	lr

08002884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002888:	b672      	cpsid	i
}
 800288a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <Error_Handler+0x8>

08002890 <eeprom_init>:

#include "new_eeprom.h"


HAL_StatusTypeDef eeprom_init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, EEPROMWIRTE, 10, HAL_MAX_DELAY)!=HAL_OK)
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	220a      	movs	r2, #10
 800289a:	21a0      	movs	r1, #160	@ 0xa0
 800289c:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <eeprom_init+0x24>)
 800289e:	f003 fdc1 	bl	8006424 <HAL_I2C_IsDeviceReady>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <eeprom_init+0x1c>
	{
		return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <eeprom_init+0x1e>
	}
	else
	{
		return HAL_OK;
 80028ac:	2300      	movs	r3, #0
	}
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000274 	.word	0x20000274

080028b8 <eeprom_write>:
	}
}


HAL_StatusTypeDef eeprom_write(uint16_t addr,uint8_t* data,uint8_t len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af04      	add	r7, sp, #16
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	80fb      	strh	r3, [r7, #6]
 80028c4:	4613      	mov	r3, r2
 80028c6:	717b      	strb	r3, [r7, #5]
	if(len > 128)
 80028c8:	797b      	ldrb	r3, [r7, #5]
 80028ca:	2b80      	cmp	r3, #128	@ 0x80
 80028cc:	d901      	bls.n	80028d2 <eeprom_write+0x1a>
	{
		return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e016      	b.n	8002900 <eeprom_write+0x48>
	}
	else
	{
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROMWIRTE, addr, 2, data, len, HAL_MAX_DELAY)!=HAL_OK)
 80028d2:	797b      	ldrb	r3, [r7, #5]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	9102      	str	r1, [sp, #8]
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2302      	movs	r3, #2
 80028e6:	21a0      	movs	r1, #160	@ 0xa0
 80028e8:	4807      	ldr	r0, [pc, #28]	@ (8002908 <eeprom_write+0x50>)
 80028ea:	f003 fa7b 	bl	8005de4 <HAL_I2C_Mem_Write>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <eeprom_write+0x40>
		{
		return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e003      	b.n	8002900 <eeprom_write+0x48>
		}
		HAL_Delay(10);
 80028f8:	200a      	movs	r0, #10
 80028fa:	f001 feed 	bl	80046d8 <HAL_Delay>
		return HAL_OK;
 80028fe:	2300      	movs	r3, #0
	}
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000274 	.word	0x20000274

0800290c <eeprom_read>:
    if (HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr, 2, buffer, len, HAL_MAX_DELAY) != HAL_OK) {
        return NULL;  // Read failed
    }
    return buffer;  // Return pointer to the provided buffer
}*/
uint8_t* eeprom_read(uint16_t addr, uint8_t* buffer, uint16_t len) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	@ 0x38
 8002910:	af04      	add	r7, sp, #16
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	80fb      	strh	r3, [r7, #6]
 8002918:	4613      	mov	r3, r2
 800291a:	80bb      	strh	r3, [r7, #4]
    // Removed initial check to debug I2C read
    uint16_t offset = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 8002920:	e043      	b.n	80029aa <eeprom_read+0x9e>
        uint16_t chunk_size = (len - offset > pagesize) ? pagesize : (len - offset);
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b80      	cmp	r3, #128	@ 0x80
 800292a:	bfa8      	it	ge
 800292c:	2380      	movge	r3, #128	@ 0x80
 800292e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROMREAD, addr + offset, 2, buffer + offset, chunk_size, HAL_MAX_DELAY);
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002934:	4413      	add	r3, r2
 8002936:	b299      	uxth	r1, r3
 8002938:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4413      	add	r3, r2
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002946:	9201      	str	r2, [sp, #4]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2302      	movs	r3, #2
 800294c:	460a      	mov	r2, r1
 800294e:	21a1      	movs	r1, #161	@ 0xa1
 8002950:	481e      	ldr	r0, [pc, #120]	@ (80029cc <eeprom_read+0xc0>)
 8002952:	f003 fb41 	bl	8005fd8 <HAL_I2C_Mem_Read>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status != HAL_OK) {
 800295c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01e      	beq.n	80029a2 <eeprom_read+0x96>
            HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read fail at offset ", 27, HAL_MAX_DELAY);
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	221b      	movs	r2, #27
 800296a:	4919      	ldr	r1, [pc, #100]	@ (80029d0 <eeprom_read+0xc4>)
 800296c:	4819      	ldr	r0, [pc, #100]	@ (80029d4 <eeprom_read+0xc8>)
 800296e:	f007 f8c0 	bl	8009af2 <HAL_UART_Transmit>
            char msg[20];
            sprintf(msg, "%d, status: %d\n\r", offset, status);
 8002972:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002978:	f107 000c 	add.w	r0, r7, #12
 800297c:	4916      	ldr	r1, [pc, #88]	@ (80029d8 <eeprom_read+0xcc>)
 800297e:	f00c febf 	bl	800f700 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fc72 	bl	8000270 <strlen>
 800298c:	4603      	mov	r3, r0
 800298e:	b29a      	uxth	r2, r3
 8002990:	f107 010c 	add.w	r1, r7, #12
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	480e      	ldr	r0, [pc, #56]	@ (80029d4 <eeprom_read+0xc8>)
 800299a:	f007 f8aa 	bl	8009af2 <HAL_UART_Transmit>
            return NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	e00f      	b.n	80029c2 <eeprom_read+0xb6>
        }
        offset += chunk_size;
 80029a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80029a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80029a6:	4413      	add	r3, r2
 80029a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (offset < len) {
 80029aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80029ac:	88bb      	ldrh	r3, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3b7      	bcc.n	8002922 <eeprom_read+0x16>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read complete\n\r", 22, HAL_MAX_DELAY);
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	2216      	movs	r2, #22
 80029b8:	4908      	ldr	r1, [pc, #32]	@ (80029dc <eeprom_read+0xd0>)
 80029ba:	4806      	ldr	r0, [pc, #24]	@ (80029d4 <eeprom_read+0xc8>)
 80029bc:	f007 f899 	bl	8009af2 <HAL_UART_Transmit>
    return buffer;
 80029c0:	683b      	ldr	r3, [r7, #0]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3728      	adds	r7, #40	@ 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000274 	.word	0x20000274
 80029d0:	080140e0 	.word	0x080140e0
 80029d4:	200004e0 	.word	0x200004e0
 80029d8:	080140fc 	.word	0x080140fc
 80029dc:	08014110 	.word	0x08014110

080029e0 <decimal_to_bcd>:
rtc_timedate_t alarm_queue[MAX_ALARMS] = {0}; // Global alarm queue
uint8_t alarm_count = 0;                      // Global alarm count
uint8_t current_idx = 0;                      // Global current index


uint8_t decimal_to_bcd(uint8_t decimal) {
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002a24 <decimal_to_bcd+0x44>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	b258      	sxtb	r0, r3
 80029fa:	79fa      	ldrb	r2, [r7, #7]
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <decimal_to_bcd+0x44>)
 80029fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002a02:	08d9      	lsrs	r1, r3, #3
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	4303      	orrs	r3, r0
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	cccccccd 	.word	0xcccccccd

08002a28 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <rtc_init>:
void rtc_init(I2C_HandleTypeDef *hi2c)
{// 1 check if rtc is ready
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
	ret=HAL_I2C_IsDeviceReady(&hi2c1, slavwrite, 10, HAL_MAX_DELAY);
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
 8002a68:	220a      	movs	r2, #10
 8002a6a:	21a2      	movs	r1, #162	@ 0xa2
 8002a6c:	4881      	ldr	r0, [pc, #516]	@ (8002c74 <rtc_init+0x218>)
 8002a6e:	f003 fcd9 	bl	8006424 <HAL_I2C_IsDeviceReady>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b80      	ldr	r3, [pc, #512]	@ (8002c78 <rtc_init+0x21c>)
 8002a78:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c78 <rtc_init+0x21c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <rtc_init+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002a82:	2201      	movs	r2, #1
 8002a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a88:	487c      	ldr	r0, [pc, #496]	@ (8002c7c <rtc_init+0x220>)
 8002a8a:	f002 fd11 	bl	80054b0 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8002a8e:	2064      	movs	r0, #100	@ 0x64
 8002a90:	f001 fe22 	bl	80046d8 <HAL_Delay>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC ok\n\r", 8, HAL_MAX_DELAY);
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4979      	ldr	r1, [pc, #484]	@ (8002c80 <rtc_init+0x224>)
 8002a9c:	4879      	ldr	r0, [pc, #484]	@ (8002c84 <rtc_init+0x228>)
 8002a9e:	f007 f828 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002aa2:	2064      	movs	r0, #100	@ 0x64
 8002aa4:	f001 fe18 	bl	80046d8 <HAL_Delay>
 8002aa8:	e009      	b.n	8002abe <rtc_init+0x62>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC notok\n\r", 11, HAL_MAX_DELAY);
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	220b      	movs	r2, #11
 8002ab0:	4975      	ldr	r1, [pc, #468]	@ (8002c88 <rtc_init+0x22c>)
 8002ab2:	4874      	ldr	r0, [pc, #464]	@ (8002c84 <rtc_init+0x228>)
 8002ab4:	f007 f81d 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002ab8:	2064      	movs	r0, #100	@ 0x64
 8002aba:	f001 fe0d 	bl	80046d8 <HAL_Delay>
	  }
	  //2 perform otp refresh Performing an OTP refresh ensures that the device operates with the correct calibration data after power-on or reset.
	  uint8_t data[2];
	  data[0]=CLKOUT_ctl;
 8002abe:	230f      	movs	r3, #15
 8002ac0:	733b      	strb	r3, [r7, #12]
	  data[1]=0x01;//set it to 1 to initiate the refresh process
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	737b      	strb	r3, [r7, #13]

	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002ac6:	f107 020c 	add.w	r2, r7, #12
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	21a2      	movs	r1, #162	@ 0xa2
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f002 fe61 	bl	800579c <HAL_I2C_Master_Transmit>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <rtc_init+0x21c>)
 8002ae0:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002ae2:	4b65      	ldr	r3, [pc, #404]	@ (8002c78 <rtc_init+0x21c>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <rtc_init+0xa4>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh ok\n\r", 20, HAL_MAX_DELAY);
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	2214      	movs	r2, #20
 8002af0:	4966      	ldr	r1, [pc, #408]	@ (8002c8c <rtc_init+0x230>)
 8002af2:	4864      	ldr	r0, [pc, #400]	@ (8002c84 <rtc_init+0x228>)
 8002af4:	f006 fffd 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002af8:	2064      	movs	r0, #100	@ 0x64
 8002afa:	f001 fded 	bl	80046d8 <HAL_Delay>
 8002afe:	e009      	b.n	8002b14 <rtc_init+0xb8>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"RTC OTP refersh notok\n\r", 23, HAL_MAX_DELAY);
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	2217      	movs	r2, #23
 8002b06:	4962      	ldr	r1, [pc, #392]	@ (8002c90 <rtc_init+0x234>)
 8002b08:	485e      	ldr	r0, [pc, #376]	@ (8002c84 <rtc_init+0x228>)
 8002b0a:	f006 fff2 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002b0e:	2064      	movs	r0, #100	@ 0x64
 8002b10:	f001 fde2 	bl	80046d8 <HAL_Delay>
	  }

	  //3 Configure Control_1 Register (0x00) for basic settings
	  data[0]=Control_1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002b1c:	f107 020c 	add.w	r2, r7, #12
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2302      	movs	r3, #2
 8002b28:	21a2      	movs	r1, #162	@ 0xa2
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f002 fe36 	bl	800579c <HAL_I2C_Master_Transmit>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <rtc_init+0x21c>)
 8002b36:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002b38:	4b4f      	ldr	r3, [pc, #316]	@ (8002c78 <rtc_init+0x21c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <rtc_init+0xfa>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 ok\n\r", 14, HAL_MAX_DELAY);
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	220e      	movs	r2, #14
 8002b46:	4953      	ldr	r1, [pc, #332]	@ (8002c94 <rtc_init+0x238>)
 8002b48:	484e      	ldr	r0, [pc, #312]	@ (8002c84 <rtc_init+0x228>)
 8002b4a:	f006 ffd2 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002b4e:	2064      	movs	r0, #100	@ 0x64
 8002b50:	f001 fdc2 	bl	80046d8 <HAL_Delay>
 8002b54:	e009      	b.n	8002b6a <rtc_init+0x10e>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_1 notok\n\r", 17, HAL_MAX_DELAY);
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	2211      	movs	r2, #17
 8002b5c:	494e      	ldr	r1, [pc, #312]	@ (8002c98 <rtc_init+0x23c>)
 8002b5e:	4849      	ldr	r0, [pc, #292]	@ (8002c84 <rtc_init+0x228>)
 8002b60:	f006 ffc7 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002b64:	2064      	movs	r0, #100	@ 0x64
 8002b66:	f001 fdb7 	bl	80046d8 <HAL_Delay>
	  }

	  //4 Configure Control_2 Register (0x01) for alarm
	  data[0]=Control_2;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002b72:	f107 020c 	add.w	r2, r7, #12
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	21a2      	movs	r1, #162	@ 0xa2
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f002 fe0b 	bl	800579c <HAL_I2C_Master_Transmit>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <rtc_init+0x21c>)
 8002b8c:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <rtc_init+0x21c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <rtc_init+0x150>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 ok\n\r", 14, HAL_MAX_DELAY);
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	220e      	movs	r2, #14
 8002b9c:	493f      	ldr	r1, [pc, #252]	@ (8002c9c <rtc_init+0x240>)
 8002b9e:	4839      	ldr	r0, [pc, #228]	@ (8002c84 <rtc_init+0x228>)
 8002ba0:	f006 ffa7 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002ba4:	2064      	movs	r0, #100	@ 0x64
 8002ba6:	f001 fd97 	bl	80046d8 <HAL_Delay>
 8002baa:	e009      	b.n	8002bc0 <rtc_init+0x164>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_2 notok\n\r", 17, HAL_MAX_DELAY);
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	2211      	movs	r2, #17
 8002bb2:	493b      	ldr	r1, [pc, #236]	@ (8002ca0 <rtc_init+0x244>)
 8002bb4:	4833      	ldr	r0, [pc, #204]	@ (8002c84 <rtc_init+0x228>)
 8002bb6:	f006 ff9c 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002bba:	2064      	movs	r0, #100	@ 0x64
 8002bbc:	f001 fd8c 	bl	80046d8 <HAL_Delay>
	  }

	  //5 Configure Control_3 Register (0x02) for battery
	  data[0]=Control_3;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	733b      	strb	r3, [r7, #12]
	  data[1]=0x00;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002bc8:	f107 020c 	add.w	r2, r7, #12
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	21a2      	movs	r1, #162	@ 0xa2
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f002 fde0 	bl	800579c <HAL_I2C_Master_Transmit>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b25      	ldr	r3, [pc, #148]	@ (8002c78 <rtc_init+0x21c>)
 8002be2:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <rtc_init+0x21c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <rtc_init+0x1a6>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 ok\n\r", 14, HAL_MAX_DELAY);
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf0:	220e      	movs	r2, #14
 8002bf2:	492c      	ldr	r1, [pc, #176]	@ (8002ca4 <rtc_init+0x248>)
 8002bf4:	4823      	ldr	r0, [pc, #140]	@ (8002c84 <rtc_init+0x228>)
 8002bf6:	f006 ff7c 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002bfa:	2064      	movs	r0, #100	@ 0x64
 8002bfc:	f001 fd6c 	bl	80046d8 <HAL_Delay>
 8002c00:	e009      	b.n	8002c16 <rtc_init+0x1ba>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"control_3 notok\n\r", 17, HAL_MAX_DELAY);
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	2211      	movs	r2, #17
 8002c08:	4927      	ldr	r1, [pc, #156]	@ (8002ca8 <rtc_init+0x24c>)
 8002c0a:	481e      	ldr	r0, [pc, #120]	@ (8002c84 <rtc_init+0x228>)
 8002c0c:	f006 ff71 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002c10:	2064      	movs	r0, #100	@ 0x64
 8002c12:	f001 fd61 	bl	80046d8 <HAL_Delay>
	  }

	  //6 Set the CLKOUT frequency, if needed
	  data[0]=CLKOUT_ctl;
 8002c16:	230f      	movs	r3, #15
 8002c18:	733b      	strb	r3, [r7, #12]
	  data[1]=0x07;
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	737b      	strb	r3, [r7, #13]
	  ret=HAL_I2C_Master_Transmit(hi2c, slavwrite, data, 2, HAL_MAX_DELAY);
 8002c1e:	f107 020c 	add.w	r2, r7, #12
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2302      	movs	r3, #2
 8002c2a:	21a2      	movs	r1, #162	@ 0xa2
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f002 fdb5 	bl	800579c <HAL_I2C_Master_Transmit>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <rtc_init+0x21c>)
 8002c38:	701a      	strb	r2, [r3, #0]
	  if(ret==HAL_OK)
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <rtc_init+0x21c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <rtc_init+0x1fc>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout ok\n\r", 11, HAL_MAX_DELAY);
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295
 8002c46:	220b      	movs	r2, #11
 8002c48:	4918      	ldr	r1, [pc, #96]	@ (8002cac <rtc_init+0x250>)
 8002c4a:	480e      	ldr	r0, [pc, #56]	@ (8002c84 <rtc_init+0x228>)
 8002c4c:	f006 ff51 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002c50:	2064      	movs	r0, #100	@ 0x64
 8002c52:	f001 fd41 	bl	80046d8 <HAL_Delay>
	  {
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
		  HAL_Delay(100);
	  }

}
 8002c56:	e009      	b.n	8002c6c <rtc_init+0x210>
		  HAL_UART_Transmit(&huart3, (uint8_t*)"clkout notok\n\r", 14, HAL_MAX_DELAY);
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5c:	220e      	movs	r2, #14
 8002c5e:	4914      	ldr	r1, [pc, #80]	@ (8002cb0 <rtc_init+0x254>)
 8002c60:	4808      	ldr	r0, [pc, #32]	@ (8002c84 <rtc_init+0x228>)
 8002c62:	f006 ff46 	bl	8009af2 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8002c66:	2064      	movs	r0, #100	@ 0x64
 8002c68:	f001 fd36 	bl	80046d8 <HAL_Delay>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000274 	.word	0x20000274
 8002c78:	2000021c 	.word	0x2000021c
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	080141f8 	.word	0x080141f8
 8002c84:	200004e0 	.word	0x200004e0
 8002c88:	08014204 	.word	0x08014204
 8002c8c:	08014210 	.word	0x08014210
 8002c90:	08014228 	.word	0x08014228
 8002c94:	08014240 	.word	0x08014240
 8002c98:	08014250 	.word	0x08014250
 8002c9c:	08014264 	.word	0x08014264
 8002ca0:	08014274 	.word	0x08014274
 8002ca4:	08014288 	.word	0x08014288
 8002ca8:	08014298 	.word	0x08014298
 8002cac:	080142ac 	.word	0x080142ac
 8002cb0:	080142b8 	.word	0x080142b8

08002cb4 <rtc_wirte>:

HAL_StatusTypeDef rtc_wirte(uint8_t reg_addr,uint8_t value)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	71fb      	strb	r3, [r7, #7]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=reg_addr;
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8002cc8:	79bb      	ldrb	r3, [r7, #6]
 8002cca:	737b      	strb	r3, [r7, #13]

	ret=HAL_I2C_Master_Transmit(&hi2c1, slavwrite, data, sizeof(data), HAL_MAX_DELAY);
 8002ccc:	f107 020c 	add.w	r2, r7, #12
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	21a2      	movs	r1, #162	@ 0xa2
 8002cda:	480c      	ldr	r0, [pc, #48]	@ (8002d0c <rtc_wirte+0x58>)
 8002cdc:	f002 fd5e 	bl	800579c <HAL_I2C_Master_Transmit>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <rtc_wirte+0x5c>)
 8002ce6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return HAL_ERROR;
	}*/
	if (ret != HAL_OK) {
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <rtc_wirte+0x5c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <rtc_wirte+0x4e>
	        HAL_UART_Transmit(&huart3, (uint8_t*)"I2C write fail\n\r", 16, HAL_MAX_DELAY);
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	4907      	ldr	r1, [pc, #28]	@ (8002d14 <rtc_wirte+0x60>)
 8002cf8:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <rtc_wirte+0x64>)
 8002cfa:	f006 fefa 	bl	8009af2 <HAL_UART_Transmit>
	        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <rtc_wirte+0x50>
	    }
	    return HAL_OK;
 8002d02:	2300      	movs	r3, #0

}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000274 	.word	0x20000274
 8002d10:	2000021c 	.word	0x2000021c
 8002d14:	080142c8 	.word	0x080142c8
 8002d18:	200004e0 	.word	0x200004e0

08002d1c <rtc_read>:

uint8_t rtc_read(uint8_t reg_addr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	 HAL_StatusTypeDef ret1;
	    uint8_t value = 0xFF; // Default value in case of error
 8002d26:	23ff      	movs	r3, #255	@ 0xff
 8002d28:	73bb      	strb	r3, [r7, #14]

	    // Transmit the register address
	    ret1 = HAL_I2C_Master_Transmit(&hi2c1, slavwrite, &reg_addr, 1, HAL_MAX_DELAY);
 8002d2a:	1dfa      	adds	r2, r7, #7
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2301      	movs	r3, #1
 8002d34:	21a2      	movs	r1, #162	@ 0xa2
 8002d36:	4810      	ldr	r0, [pc, #64]	@ (8002d78 <rtc_read+0x5c>)
 8002d38:	f002 fd30 	bl	800579c <HAL_I2C_Master_Transmit>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <rtc_read+0x2e>
	        return value; // Return default value if transmit fails
 8002d46:	7bbb      	ldrb	r3, [r7, #14]
 8002d48:	e011      	b.n	8002d6e <rtc_read+0x52>
	    }

	    // Receive the register value
	    ret1 = HAL_I2C_Master_Receive(&hi2c1, slaveread, &value, 1, HAL_MAX_DELAY);
 8002d4a:	f107 020e 	add.w	r2, r7, #14
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2301      	movs	r3, #1
 8002d56:	21a3      	movs	r1, #163	@ 0xa3
 8002d58:	4807      	ldr	r0, [pc, #28]	@ (8002d78 <rtc_read+0x5c>)
 8002d5a:	f002 fe1d 	bl	8005998 <HAL_I2C_Master_Receive>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	73fb      	strb	r3, [r7, #15]
	    if (ret1 != HAL_OK) {
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <rtc_read+0x50>
	        return 0xFF; // Return default value if receive fails
 8002d68:	23ff      	movs	r3, #255	@ 0xff
 8002d6a:	e000      	b.n	8002d6e <rtc_read+0x52>
	    }

	    return value; // Return the register value
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000274 	.word	0x20000274

08002d7c <rtc_settime>:

HAL_StatusTypeDef rtc_settime(const rtc_timedate_t* timedate)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	if(rtc_wirte(Seconds, decimal_to_bcd(timedate->second))!=HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	789b      	ldrb	r3, [r3, #2]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fe29 	bl	80029e0 <decimal_to_bcd>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4619      	mov	r1, r3
 8002d92:	2003      	movs	r0, #3
 8002d94:	f7ff ff8e 	bl	8002cb4 <rtc_wirte>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <rtc_settime+0x26>
	{
		return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e04b      	b.n	8002e3a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Minutes, decimal_to_bcd(timedate->minute))!=HAL_OK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fe1a 	bl	80029e0 <decimal_to_bcd>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4619      	mov	r1, r3
 8002db0:	2004      	movs	r0, #4
 8002db2:	f7ff ff7f 	bl	8002cb4 <rtc_wirte>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <rtc_settime+0x44>
	{
		return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e03c      	b.n	8002e3a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Hours, decimal_to_bcd(timedate->hour))!=HAL_OK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe0b 	bl	80029e0 <decimal_to_bcd>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	2005      	movs	r0, #5
 8002dd0:	f7ff ff70 	bl	8002cb4 <rtc_wirte>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <rtc_settime+0x62>
	{
		return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e02d      	b.n	8002e3a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Days, decimal_to_bcd(timedate->day))!=HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fdfc 	bl	80029e0 <decimal_to_bcd>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	2006      	movs	r0, #6
 8002dee:	f7ff ff61 	bl	8002cb4 <rtc_wirte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <rtc_settime+0x80>
	{
		return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e01e      	b.n	8002e3a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Months, decimal_to_bcd(timedate->month))!=HAL_OK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	791b      	ldrb	r3, [r3, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fded 	bl	80029e0 <decimal_to_bcd>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	2008      	movs	r0, #8
 8002e0c:	f7ff ff52 	bl	8002cb4 <rtc_wirte>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <rtc_settime+0x9e>
	{
		return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <rtc_settime+0xbe>
	}
	if(rtc_wirte(Years, decimal_to_bcd(timedate->year))!=HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	795b      	ldrb	r3, [r3, #5]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fdde 	bl	80029e0 <decimal_to_bcd>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4619      	mov	r1, r3
 8002e28:	2009      	movs	r0, #9
 8002e2a:	f7ff ff43 	bl	8002cb4 <rtc_wirte>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <rtc_settime+0xbc>
	{
		return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <rtc_settime+0xbe>
	}

	return HAL_OK;
 8002e38:	2300      	movs	r3, #0

}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <rtc_gettime>:

HAL_StatusTypeDef rtc_gettime(rtc_timedate_t* timedate)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp=rtc_read(Seconds);//second register
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	f7ff ff66 	bl	8002d1c <rtc_read>
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2bff      	cmp	r3, #255	@ 0xff
 8002e58:	d101      	bne.n	8002e5e <rtc_gettime+0x1c>
	{
		return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e062      	b.n	8002f24 <rtc_gettime+0xe2>
	}
	timedate->second= bcd_to_decimal(temp);
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fde1 	bl	8002a28 <bcd_to_decimal>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	709a      	strb	r2, [r3, #2]
	temp=rtc_read(Minutes);//minute register
 8002e6e:	2004      	movs	r0, #4
 8002e70:	f7ff ff54 	bl	8002d1c <rtc_read>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
 8002e7c:	d101      	bne.n	8002e82 <rtc_gettime+0x40>
	{
		return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e050      	b.n	8002f24 <rtc_gettime+0xe2>
	}
	timedate->minute= bcd_to_decimal(temp);
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fdcf 	bl	8002a28 <bcd_to_decimal>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	705a      	strb	r2, [r3, #1]
	temp=rtc_read(Hours);//hour register
 8002e92:	2005      	movs	r0, #5
 8002e94:	f7ff ff42 	bl	8002d1c <rtc_read>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2bff      	cmp	r3, #255	@ 0xff
 8002ea0:	d101      	bne.n	8002ea6 <rtc_gettime+0x64>
	{
		return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03e      	b.n	8002f24 <rtc_gettime+0xe2>
	}
	timedate->hour= bcd_to_decimal(temp);
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fdbd 	bl	8002a28 <bcd_to_decimal>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	701a      	strb	r2, [r3, #0]
	temp=rtc_read(Days);//day register
 8002eb6:	2006      	movs	r0, #6
 8002eb8:	f7ff ff30 	bl	8002d1c <rtc_read>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2bff      	cmp	r3, #255	@ 0xff
 8002ec4:	d101      	bne.n	8002eca <rtc_gettime+0x88>
	{
		return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02c      	b.n	8002f24 <rtc_gettime+0xe2>
	}
	timedate->day= bcd_to_decimal(temp);
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fdab 	bl	8002a28 <bcd_to_decimal>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	70da      	strb	r2, [r3, #3]
	temp=rtc_read(Months);//second register
 8002eda:	2008      	movs	r0, #8
 8002edc:	f7ff ff1e 	bl	8002d1c <rtc_read>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2bff      	cmp	r3, #255	@ 0xff
 8002ee8:	d101      	bne.n	8002eee <rtc_gettime+0xac>
	{
		return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01a      	b.n	8002f24 <rtc_gettime+0xe2>
	}
	timedate->month= bcd_to_decimal(temp);
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fd99 	bl	8002a28 <bcd_to_decimal>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	711a      	strb	r2, [r3, #4]
	temp=rtc_read(Years);//second register
 8002efe:	2009      	movs	r0, #9
 8002f00:	f7ff ff0c 	bl	8002d1c <rtc_read>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]
	if(temp==0XFF)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2bff      	cmp	r3, #255	@ 0xff
 8002f0c:	d101      	bne.n	8002f12 <rtc_gettime+0xd0>
	{
		return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e008      	b.n	8002f24 <rtc_gettime+0xe2>
	}
	timedate->year= bcd_to_decimal(temp);
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fd87 	bl	8002a28 <bcd_to_decimal>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	715a      	strb	r2, [r3, #5]

	return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <rtc_setalarm>:


HAL_StatusTypeDef rtc_setalarm(rtc_timedate_t* timedate)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	//second alarm
	if(rtc_wirte(Second_alarm, (timedate->second==0xFF)?0x80:decimal_to_bcd(timedate->second))!=HAL_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	789b      	ldrb	r3, [r3, #2]
 8002f38:	2bff      	cmp	r3, #255	@ 0xff
 8002f3a:	d006      	beq.n	8002f4a <rtc_setalarm+0x1e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	789b      	ldrb	r3, [r3, #2]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fd4d 	bl	80029e0 <decimal_to_bcd>
 8002f46:	4603      	mov	r3, r0
 8002f48:	e000      	b.n	8002f4c <rtc_setalarm+0x20>
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	200a      	movs	r0, #10
 8002f50:	f7ff feb0 	bl	8002cb4 <rtc_wirte>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <rtc_setalarm+0x32>
	{
		return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07a      	b.n	8003054 <rtc_setalarm+0x128>
	}
	//minute alarm
	if(rtc_wirte(Minute_alarm, (timedate->minute==0xFF)?0x80:decimal_to_bcd(timedate->minute))!=HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	2bff      	cmp	r3, #255	@ 0xff
 8002f64:	d006      	beq.n	8002f74 <rtc_setalarm+0x48>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fd38 	bl	80029e0 <decimal_to_bcd>
 8002f70:	4603      	mov	r3, r0
 8002f72:	e000      	b.n	8002f76 <rtc_setalarm+0x4a>
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	4619      	mov	r1, r3
 8002f78:	200b      	movs	r0, #11
 8002f7a:	f7ff fe9b 	bl	8002cb4 <rtc_wirte>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <rtc_setalarm+0x5c>
	{
		return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e065      	b.n	8003054 <rtc_setalarm+0x128>
	}
	//hour alarm
	if(rtc_wirte(Hour_alarm, (timedate->hour==0xFF)?0x80:decimal_to_bcd(timedate->hour))!=HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2bff      	cmp	r3, #255	@ 0xff
 8002f8e:	d006      	beq.n	8002f9e <rtc_setalarm+0x72>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fd23 	bl	80029e0 <decimal_to_bcd>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	e000      	b.n	8002fa0 <rtc_setalarm+0x74>
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	200c      	movs	r0, #12
 8002fa4:	f7ff fe86 	bl	8002cb4 <rtc_wirte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <rtc_setalarm+0x86>
	{
		return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e050      	b.n	8003054 <rtc_setalarm+0x128>
	}
	//day alarm
	if(rtc_wirte(Day_alarm, (timedate->day==0xFF)?0x80:decimal_to_bcd(timedate->day))!=HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	78db      	ldrb	r3, [r3, #3]
 8002fb6:	2bff      	cmp	r3, #255	@ 0xff
 8002fb8:	d006      	beq.n	8002fc8 <rtc_setalarm+0x9c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fd0e 	bl	80029e0 <decimal_to_bcd>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	e000      	b.n	8002fca <rtc_setalarm+0x9e>
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	4619      	mov	r1, r3
 8002fcc:	200d      	movs	r0, #13
 8002fce:	f7ff fe71 	bl	8002cb4 <rtc_wirte>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <rtc_setalarm+0xb0>
	{
		return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e03b      	b.n	8003054 <rtc_setalarm+0x128>
	}
	//week alarm
	if(rtc_wirte(Weekday_alarm, (timedate->weekday==0xFF)?0x80:decimal_to_bcd(timedate->weekday))!=HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	799b      	ldrb	r3, [r3, #6]
 8002fe0:	2bff      	cmp	r3, #255	@ 0xff
 8002fe2:	d006      	beq.n	8002ff2 <rtc_setalarm+0xc6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	799b      	ldrb	r3, [r3, #6]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fcf9 	bl	80029e0 <decimal_to_bcd>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	e000      	b.n	8002ff4 <rtc_setalarm+0xc8>
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	200e      	movs	r0, #14
 8002ff8:	f7ff fe5c 	bl	8002cb4 <rtc_wirte>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <rtc_setalarm+0xda>
	{
		return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e026      	b.n	8003054 <rtc_setalarm+0x128>
	}

	uint8_t control2 = rtc_read(Control_2);
 8003006:	2001      	movs	r0, #1
 8003008:	f7ff fe88 	bl	8002d1c <rtc_read>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]
	    if (control2 == 0xFF) return HAL_ERROR;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2bff      	cmp	r3, #255	@ 0xff
 8003014:	d101      	bne.n	800301a <rtc_setalarm+0xee>
 8003016:	2301      	movs	r3, #1
 8003018:	e01c      	b.n	8003054 <rtc_setalarm+0x128>
	    control2 &= ~(1 << 7);  // Clear MSF
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003020:	73fb      	strb	r3, [r7, #15]
	    control2 |= (1 << 1);   // Set AIE
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	73fb      	strb	r3, [r7, #15]
	    if (rtc_wirte(Control_2, control2) != HAL_OK) return HAL_ERROR;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	4619      	mov	r1, r3
 800302e:	2001      	movs	r0, #1
 8003030:	f7ff fe40 	bl	8002cb4 <rtc_wirte>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <rtc_setalarm+0x112>
 800303a:	2301      	movs	r3, #1
 800303c:	e00a      	b.n	8003054 <rtc_setalarm+0x128>

	    HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm set complete\n\r", 20, HAL_MAX_DELAY);
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	2214      	movs	r2, #20
 8003044:	4905      	ldr	r1, [pc, #20]	@ (800305c <rtc_setalarm+0x130>)
 8003046:	4806      	ldr	r0, [pc, #24]	@ (8003060 <rtc_setalarm+0x134>)
 8003048:	f006 fd53 	bl	8009af2 <HAL_UART_Transmit>
	    read_and_transmit(Control_2);
 800304c:	2001      	movs	r0, #1
 800304e:	f000 f84f 	bl	80030f0 <read_and_transmit>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"interrupt notenabled\n\r", 22, HAL_MAX_DELAY);
		HAL_Delay(100);
	}*/
	return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	080142dc 	.word	0x080142dc
 8003060:	200004e0 	.word	0x200004e0

08003064 <rtc_clearalarm>:

HAL_StatusTypeDef rtc_clearalarm(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	uint8_t control2;
	//read_and_transmit(0x01);
	control2=rtc_read(Control_2);
 800306a:	2001      	movs	r0, #1
 800306c:	f7ff fe56 	bl	8002d1c <rtc_read>
 8003070:	4603      	mov	r3, r0
 8003072:	71fb      	strb	r3, [r7, #7]
	//read_and_transmit(0x01);
	if(control2==0xFF)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2bff      	cmp	r3, #255	@ 0xff
 8003078:	d101      	bne.n	800307e <rtc_clearalarm+0x1a>
	{
		return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00e      	b.n	800309c <rtc_clearalarm+0x38>
	}
	control2 &=~(1<<4);
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	f023 0310 	bic.w	r3, r3, #16
 8003084:	71fb      	strb	r3, [r7, #7]
	//control2=0x00;
	if(rtc_wirte(Control_2, control2)!=HAL_OK)
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4619      	mov	r1, r3
 800308a:	2001      	movs	r0, #1
 800308c:	f7ff fe12 	bl	8002cb4 <rtc_wirte>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <rtc_clearalarm+0x36>
	{
		//read_and_transmit(0x01);
		return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <rtc_clearalarm+0x38>
	}

	return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <rtc_check_alarm_flag>:

uint8_t rtc_check_alarm_flag(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
	{
	uint8_t control2 = rtc_read(Control_2); // Read the Control_2 register
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7ff fe36 	bl	8002d1c <rtc_read>
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
	read_and_transmit(Control_2);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f000 f81b 	bl	80030f0 <read_and_transmit>
	    if (control2 == 0xFF) {
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2bff      	cmp	r3, #255	@ 0xff
 80030be:	d108      	bne.n	80030d2 <rtc_check_alarm_flag+0x2e>
	    	HAL_UART_Transmit(&huart3, (uint8_t*)"Flag read error\n\r", 17, HAL_MAX_DELAY);
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
 80030c4:	2211      	movs	r2, #17
 80030c6:	4908      	ldr	r1, [pc, #32]	@ (80030e8 <rtc_check_alarm_flag+0x44>)
 80030c8:	4808      	ldr	r0, [pc, #32]	@ (80030ec <rtc_check_alarm_flag+0x48>)
 80030ca:	f006 fd12 	bl	8009af2 <HAL_UART_Transmit>
	        return 0xFF; // Error occurred while reading
 80030ce:	23ff      	movs	r3, #255	@ 0xff
 80030d0:	e005      	b.n	80030de <rtc_check_alarm_flag+0x3a>
	    }

	    return (control2 & (1 << 4)) ? 1 : 0; // Return 1 if AF is set, otherwise 0
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	111b      	asrs	r3, r3, #4
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
	}
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	080142f4 	.word	0x080142f4
 80030ec:	200004e0 	.word	0x200004e0

080030f0 <read_and_transmit>:
    rtc_wirte(Control_2, control2);
    //read_and_transmit(Control_2);
    return HAL_OK;
}

void read_and_transmit(uint8_t reg_addr) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b090      	sub	sp, #64	@ 0x40
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
    char uart_buffer[50];
    uint8_t reg_value = rtc_read(reg_addr);
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fe0d 	bl	8002d1c <rtc_read>
 8003102:	4603      	mov	r3, r0
 8003104:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Check if the read was successful
    if (reg_value == 0xFF) {
 8003108:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800310c:	2bff      	cmp	r3, #255	@ 0xff
 800310e:	d107      	bne.n	8003120 <read_and_transmit+0x30>
        // Error handling: Send an error message over UART
        sprintf(uart_buffer, "Error reading register 0x%02X\r\n", reg_addr);
 8003110:	79fa      	ldrb	r2, [r7, #7]
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	490f      	ldr	r1, [pc, #60]	@ (8003154 <read_and_transmit+0x64>)
 8003118:	4618      	mov	r0, r3
 800311a:	f00c faf1 	bl	800f700 <siprintf>
 800311e:	e007      	b.n	8003130 <read_and_transmit+0x40>
    } else {
        // Send the read value over UART
        sprintf(uart_buffer, "Register 0x%02X: 0x%02X\r\n", reg_addr, reg_value);
 8003120:	79fa      	ldrb	r2, [r7, #7]
 8003122:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003126:	f107 000c 	add.w	r0, r7, #12
 800312a:	490b      	ldr	r1, [pc, #44]	@ (8003158 <read_and_transmit+0x68>)
 800312c:	f00c fae8 	bl	800f700 <siprintf>
    }

    // Transmit the message via UART3
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd f89b 	bl	8000270 <strlen>
 800313a:	4603      	mov	r3, r0
 800313c:	b29a      	uxth	r2, r3
 800313e:	f107 010c 	add.w	r1, r7, #12
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	4805      	ldr	r0, [pc, #20]	@ (800315c <read_and_transmit+0x6c>)
 8003148:	f006 fcd3 	bl	8009af2 <HAL_UART_Transmit>
}
 800314c:	bf00      	nop
 800314e:	3740      	adds	r7, #64	@ 0x40
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08014308 	.word	0x08014308
 8003158:	08014328 	.word	0x08014328
 800315c:	200004e0 	.word	0x200004e0

08003160 <senddata>:
int id1 = 0;          // Definition of id1
int mode1=0;
int freq=0;

void senddata(char* str,uint8_t size)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r",2, HAL_MAX_DELAY);
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	2202      	movs	r2, #2
 8003172:	4909      	ldr	r1, [pc, #36]	@ (8003198 <senddata+0x38>)
 8003174:	4809      	ldr	r0, [pc, #36]	@ (800319c <senddata+0x3c>)
 8003176:	f006 fcbc 	bl	8009af2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)str,size, HAL_MAX_DELAY);
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	b29a      	uxth	r2, r3
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4805      	ldr	r0, [pc, #20]	@ (800319c <senddata+0x3c>)
 8003186:	f006 fcb4 	bl	8009af2 <HAL_UART_Transmit>
	HAL_Delay(100);
 800318a:	2064      	movs	r0, #100	@ 0x64
 800318c:	f001 faa4 	bl	80046d8 <HAL_Delay>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	08014344 	.word	0x08014344
 800319c:	200004e0 	.word	0x200004e0

080031a0 <HAL_UART_RxCpltCallback>:
	}

}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3 || huart->Instance == USART2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	@ (800326c <HAL_UART_RxCpltCallback+0xcc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_UART_RxCpltCallback+0x1c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003270 <HAL_UART_RxCpltCallback+0xd0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d153      	bne.n	8003264 <HAL_UART_RxCpltCallback+0xc4>
  {
    if (rxindex < RX_buffersize - 1)
 80031bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2bff      	cmp	r3, #255	@ 0xff
 80031c4:	d00c      	beq.n	80031e0 <HAL_UART_RxCpltCallback+0x40>
    {
      rxindex++;
 80031c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 80031d2:	701a      	strb	r2, [r3, #0]
    {
      rxbuffer[RX_buffersize - 1] = '\0';
      datarecived = 1;
      return;
    }
    if (rxindex >= strlen(EOP_string) && strncmp(&rxbuffer[rxindex - strlen(EOP_string)], EOP_string, strlen(EOP_string)) == 0)
 80031d4:	4b27      	ldr	r3, [pc, #156]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d921      	bls.n	8003222 <HAL_UART_RxCpltCallback+0x82>
 80031de:	e007      	b.n	80031f0 <HAL_UART_RxCpltCallback+0x50>
      rxbuffer[RX_buffersize - 1] = '\0';
 80031e0:	4b25      	ldr	r3, [pc, #148]	@ (8003278 <HAL_UART_RxCpltCallback+0xd8>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
      datarecived = 1;
 80031e8:	4b24      	ldr	r3, [pc, #144]	@ (800327c <HAL_UART_RxCpltCallback+0xdc>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
      return;
 80031ee:	e039      	b.n	8003264 <HAL_UART_RxCpltCallback+0xc4>
    if (rxindex >= strlen(EOP_string) && strncmp(&rxbuffer[rxindex - strlen(EOP_string)], EOP_string, strlen(EOP_string)) == 0)
 80031f0:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3b03      	subs	r3, #3
 80031f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003278 <HAL_UART_RxCpltCallback+0xd8>)
 80031fa:	4413      	add	r3, r2
 80031fc:	2203      	movs	r2, #3
 80031fe:	4920      	ldr	r1, [pc, #128]	@ (8003280 <HAL_UART_RxCpltCallback+0xe0>)
 8003200:	4618      	mov	r0, r3
 8003202:	f00c fb4d 	bl	800f8a0 <strncmp>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_UART_RxCpltCallback+0x82>
    {
      rxbuffer[RX_buffersize - 1] = '\0';
 800320c:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <HAL_UART_RxCpltCallback+0xd8>)
 800320e:	2200      	movs	r2, #0
 8003210:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
      datarecived = 1;
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_UART_RxCpltCallback+0xdc>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
      rxindex = 0;
 800321a:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
      return;
 8003220:	e020      	b.n	8003264 <HAL_UART_RxCpltCallback+0xc4>
    }

    // Restart interrupt for the specific UART instance
    if (huart->Instance == USART3)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a11      	ldr	r2, [pc, #68]	@ (800326c <HAL_UART_RxCpltCallback+0xcc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10b      	bne.n	8003244 <HAL_UART_RxCpltCallback+0xa4>
    {
      HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxbuffer[rxindex], 1);
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <HAL_UART_RxCpltCallback+0xd8>)
 8003236:	4413      	add	r3, r2
 8003238:	2201      	movs	r2, #1
 800323a:	4619      	mov	r1, r3
 800323c:	4811      	ldr	r0, [pc, #68]	@ (8003284 <HAL_UART_RxCpltCallback+0xe4>)
 800323e:	f006 fcea 	bl	8009c16 <HAL_UART_Receive_IT>
 8003242:	e00f      	b.n	8003264 <HAL_UART_RxCpltCallback+0xc4>
    }
    else if (huart->Instance == USART2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <HAL_UART_RxCpltCallback+0xd0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10a      	bne.n	8003264 <HAL_UART_RxCpltCallback+0xc4>
    {
      HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxbuffer[rxindex], 1);
 800324e:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <HAL_UART_RxCpltCallback+0xd4>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <HAL_UART_RxCpltCallback+0xd8>)
 8003258:	4413      	add	r3, r2
 800325a:	2201      	movs	r2, #1
 800325c:	4619      	mov	r1, r3
 800325e:	480a      	ldr	r0, [pc, #40]	@ (8003288 <HAL_UART_RxCpltCallback+0xe8>)
 8003260:	f006 fcd9 	bl	8009c16 <HAL_UART_Receive_IT>
    }
  }
}
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40004800 	.word	0x40004800
 8003270:	40004400 	.word	0x40004400
 8003274:	2000579c 	.word	0x2000579c
 8003278:	2000569c 	.word	0x2000569c
 800327c:	2000579d 	.word	0x2000579d
 8003280:	08014348 	.word	0x08014348
 8003284:	200004e0 	.word	0x200004e0
 8003288:	2000049c 	.word	0x2000049c

0800328c <parse_and_print>:
}*/




void parse_and_print(char *buffer) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b0d2      	sub	sp, #328	@ 0x148
 8003290:	af00      	add	r7, sp, #0
 8003292:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003296:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800329a:	6018      	str	r0, [r3, #0]
    char temp[RX_buffersize]; // Temporary buffer to hold a copy of input string
    strcpy(temp, buffer); // Copy to avoid modifying original string
 800329c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032a4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	4610      	mov	r0, r2
 80032ac:	f00c fbed 	bl	800fa8a <strcpy>


    char *token = strtok(temp, "|");
 80032b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032b4:	4942      	ldr	r1, [pc, #264]	@ (80033c0 <parse_and_print+0x134>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f00c fb04 	bl	800f8c4 <strtok>
 80032bc:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    //static uint8_t alarm_count = 0;
    //static uint8_t current_idx = 0;


    // Extract and print ID
    if (token) {
 80032c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d024      	beq.n	8003312 <parse_and_print+0x86>
    	int id;
    	sscanf(token,"%d",&id);
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	461a      	mov	r2, r3
 80032ce:	493d      	ldr	r1, [pc, #244]	@ (80033c4 <parse_and_print+0x138>)
 80032d0:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80032d4:	f00c fa34 	bl	800f740 <siscanf>
        sprintf(msg, "id: %d\r\n", id);
 80032d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	4938      	ldr	r1, [pc, #224]	@ (80033c8 <parse_and_print+0x13c>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f00c fa09 	bl	800f700 <siprintf>
        UART_Print(msg);
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fd0c 	bl	8003d10 <UART_Print>
        token = strtok(NULL, "|");
 80032f8:	4931      	ldr	r1, [pc, #196]	@ (80033c0 <parse_and_print+0x134>)
 80032fa:	2000      	movs	r0, #0
 80032fc:	f00c fae2 	bl	800f8c4 <strtok>
 8003300:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
        id1=id;
 8003304:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003308:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2f      	ldr	r2, [pc, #188]	@ (80033cc <parse_and_print+0x140>)
 8003310:	6013      	str	r3, [r2, #0]
    }

    // Extract and print Name
    if (token) {
 8003312:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <parse_and_print+0xb4>
        sprintf(msg, "name: %s\r\n", token);
 800331a:	f107 0310 	add.w	r3, r7, #16
 800331e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003322:	492b      	ldr	r1, [pc, #172]	@ (80033d0 <parse_and_print+0x144>)
 8003324:	4618      	mov	r0, r3
 8003326:	f00c f9eb 	bl	800f700 <siprintf>
        UART_Print(msg);
 800332a:	f107 0310 	add.w	r3, r7, #16
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fcee 	bl	8003d10 <UART_Print>
        token = strtok(NULL, "|");
 8003334:	4922      	ldr	r1, [pc, #136]	@ (80033c0 <parse_and_print+0x134>)
 8003336:	2000      	movs	r0, #0
 8003338:	f00c fac4 	bl	800f8c4 <strtok>
 800333c:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    }

    // Extract and print Location
    if (token) {
 8003340:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <parse_and_print+0xe2>
        sprintf(msg, "loc: %s\r\n", token);
 8003348:	f107 0310 	add.w	r3, r7, #16
 800334c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003350:	4920      	ldr	r1, [pc, #128]	@ (80033d4 <parse_and_print+0x148>)
 8003352:	4618      	mov	r0, r3
 8003354:	f00c f9d4 	bl	800f700 <siprintf>
        UART_Print(msg);
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fcd7 	bl	8003d10 <UART_Print>
        token = strtok(NULL, "|");
 8003362:	4917      	ldr	r1, [pc, #92]	@ (80033c0 <parse_and_print+0x134>)
 8003364:	2000      	movs	r0, #0
 8003366:	f00c faad 	bl	800f8c4 <strtok>
 800336a:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    	sprintf(msg, "mode: %d\r\n", mode);
    	UART_Print(msg);
    	token = strtok(NULL, "|");
        }*/

    switch (id1) {
 800336e:	4b17      	ldr	r3, [pc, #92]	@ (80033cc <parse_and_print+0x140>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d015      	beq.n	80033a2 <parse_and_print+0x116>
 8003376:	2b03      	cmp	r3, #3
 8003378:	dc18      	bgt.n	80033ac <parse_and_print+0x120>
 800337a:	2b01      	cmp	r3, #1
 800337c:	d002      	beq.n	8003384 <parse_and_print+0xf8>
 800337e:	2b02      	cmp	r3, #2
 8003380:	d005      	beq.n	800338e <parse_and_print+0x102>
 8003382:	e013      	b.n	80033ac <parse_and_print+0x120>
                case 1:
                    process_id1(token);
 8003384:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8003388:	f000 f828 	bl	80033dc <process_id1>
                    break;
 800338c:	e012      	b.n	80033b4 <parse_and_print+0x128>
                case 2:
                    process_id2(token,buffer);
 800338e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003392:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 800339c:	f000 f8e4 	bl	8003568 <process_id2>
                    break;
 80033a0:	e008      	b.n	80033b4 <parse_and_print+0x128>
                case 3:
                	process_id3(token);
 80033a2:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80033a6:	f000 fabb 	bl	8003920 <process_id3>
                	break;
 80033aa:	e003      	b.n	80033b4 <parse_and_print+0x128>
                /*case 4:
                	process_id4(token);
                	break;*/
                default:
                    UART_Print("Unknown ID\r\n");
 80033ac:	480a      	ldr	r0, [pc, #40]	@ (80033d8 <parse_and_print+0x14c>)
 80033ae:	f000 fcaf 	bl	8003d10 <UART_Print>
                    break;
 80033b2:	bf00      	nop
                //}
    //}



}
 80033b4:	bf00      	nop
 80033b6:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	0801434c 	.word	0x0801434c
 80033c4:	08014350 	.word	0x08014350
 80033c8:	08014354 	.word	0x08014354
 80033cc:	200057dc 	.word	0x200057dc
 80033d0:	08014360 	.word	0x08014360
 80033d4:	0801436c 	.word	0x0801436c
 80033d8:	08014378 	.word	0x08014378

080033dc <process_id1>:
// Function for ID 1: Parse and process time/date
void process_id1(char *token) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b098      	sub	sp, #96	@ 0x60
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	6078      	str	r0, [r7, #4]
    char msg[50];

    UART_Print("time-\r\n");
 80033e4:	4851      	ldr	r0, [pc, #324]	@ (800352c <process_id1+0x150>)
 80033e6:	f000 fc93 	bl	8003d10 <UART_Print>
    int hh, mm, ss;
    if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 80033ea:	f107 0118 	add.w	r1, r7, #24
 80033ee:	f107 021c 	add.w	r2, r7, #28
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	494d      	ldr	r1, [pc, #308]	@ (8003530 <process_id1+0x154>)
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f00c f99f 	bl	800f740 <siscanf>
 8003402:	4603      	mov	r3, r0
 8003404:	2b03      	cmp	r3, #3
 8003406:	d12f      	bne.n	8003468 <process_id1+0x8c>
        sprintf(msg, "hour: %d\r\n", hh);
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f107 0320 	add.w	r3, r7, #32
 800340e:	4949      	ldr	r1, [pc, #292]	@ (8003534 <process_id1+0x158>)
 8003410:	4618      	mov	r0, r3
 8003412:	f00c f975 	bl	800f700 <siprintf>
        UART_Print(msg);
 8003416:	f107 0320 	add.w	r3, r7, #32
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fc78 	bl	8003d10 <UART_Print>
        sprintf(msg, "min: %d\r\n", mm);
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	f107 0320 	add.w	r3, r7, #32
 8003426:	4944      	ldr	r1, [pc, #272]	@ (8003538 <process_id1+0x15c>)
 8003428:	4618      	mov	r0, r3
 800342a:	f00c f969 	bl	800f700 <siprintf>
        UART_Print(msg);
 800342e:	f107 0320 	add.w	r3, r7, #32
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fc6c 	bl	8003d10 <UART_Print>
        sprintf(msg, "sec: %d\r\n", ss);
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	f107 0320 	add.w	r3, r7, #32
 800343e:	493f      	ldr	r1, [pc, #252]	@ (800353c <process_id1+0x160>)
 8003440:	4618      	mov	r0, r3
 8003442:	f00c f95d 	bl	800f700 <siprintf>
        UART_Print(msg);
 8003446:	f107 0320 	add.w	r3, r7, #32
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fc60 	bl	8003d10 <UART_Print>
        timedate.hour = hh;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b3a      	ldr	r3, [pc, #232]	@ (8003540 <process_id1+0x164>)
 8003456:	701a      	strb	r2, [r3, #0]
        timedate.minute = mm;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <process_id1+0x164>)
 800345e:	705a      	strb	r2, [r3, #1]
        timedate.second = ss;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <process_id1+0x164>)
 8003466:	709a      	strb	r2, [r3, #2]
    }
    token = strtok(NULL, "|");
 8003468:	4936      	ldr	r1, [pc, #216]	@ (8003544 <process_id1+0x168>)
 800346a:	2000      	movs	r0, #0
 800346c:	f00c fa2a 	bl	800f8c4 <strtok>
 8003470:	6078      	str	r0, [r7, #4]

    if (token) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d045      	beq.n	8003504 <process_id1+0x128>
        UART_Print("date-\r\n");
 8003478:	4833      	ldr	r0, [pc, #204]	@ (8003548 <process_id1+0x16c>)
 800347a:	f000 fc49 	bl	8003d10 <UART_Print>
        int month, day, year;
        if (sscanf(token, "%d/%d/%d", &month, &day, &year) == 3) {
 800347e:	f107 010c 	add.w	r1, r7, #12
 8003482:	f107 0210 	add.w	r2, r7, #16
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	460b      	mov	r3, r1
 800348e:	492f      	ldr	r1, [pc, #188]	@ (800354c <process_id1+0x170>)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f00c f955 	bl	800f740 <siscanf>
 8003496:	4603      	mov	r3, r0
 8003498:	2b03      	cmp	r3, #3
 800349a:	d130      	bne.n	80034fe <process_id1+0x122>
            sprintf(msg, "month: %d\r\n", month);
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	f107 0320 	add.w	r3, r7, #32
 80034a2:	492b      	ldr	r1, [pc, #172]	@ (8003550 <process_id1+0x174>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00c f92b 	bl	800f700 <siprintf>
            UART_Print(msg);
 80034aa:	f107 0320 	add.w	r3, r7, #32
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fc2e 	bl	8003d10 <UART_Print>
            sprintf(msg, "day: %d\r\n", day);
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	f107 0320 	add.w	r3, r7, #32
 80034ba:	4926      	ldr	r1, [pc, #152]	@ (8003554 <process_id1+0x178>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f00c f91f 	bl	800f700 <siprintf>
            UART_Print(msg);
 80034c2:	f107 0320 	add.w	r3, r7, #32
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fc22 	bl	8003d10 <UART_Print>
            sprintf(msg, "year: %d\r\n", year);
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	f107 0320 	add.w	r3, r7, #32
 80034d2:	4921      	ldr	r1, [pc, #132]	@ (8003558 <process_id1+0x17c>)
 80034d4:	4618      	mov	r0, r3
 80034d6:	f00c f913 	bl	800f700 <siprintf>
            UART_Print(msg);
 80034da:	f107 0320 	add.w	r3, r7, #32
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fc16 	bl	8003d10 <UART_Print>
            timedate.month = month;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <process_id1+0x164>)
 80034ea:	711a      	strb	r2, [r3, #4]
            timedate.day = day;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <process_id1+0x164>)
 80034f2:	70da      	strb	r2, [r3, #3]
            timedate.year = year;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <process_id1+0x164>)
 80034fa:	715a      	strb	r2, [r3, #5]
 80034fc:	e002      	b.n	8003504 <process_id1+0x128>
        } else {
            UART_Print("Error: Invalid Date Format\r\n");
 80034fe:	4817      	ldr	r0, [pc, #92]	@ (800355c <process_id1+0x180>)
 8003500:	f000 fc06 	bl	8003d10 <UART_Print>
        }
    }

    int ret = rtc_settime(&timedate);
 8003504:	480e      	ldr	r0, [pc, #56]	@ (8003540 <process_id1+0x164>)
 8003506:	f7ff fc39 	bl	8002d7c <rtc_settime>
 800350a:	4603      	mov	r3, r0
 800350c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (ret == 0) {
 800350e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <process_id1+0x140>
        UART_Print("rtc time set ok\n\r");
 8003514:	4812      	ldr	r0, [pc, #72]	@ (8003560 <process_id1+0x184>)
 8003516:	f000 fbfb 	bl	8003d10 <UART_Print>
    } else {
        UART_Print("rtc time set notok\n\r");
    }
}
 800351a:	e002      	b.n	8003522 <process_id1+0x146>
        UART_Print("rtc time set notok\n\r");
 800351c:	4811      	ldr	r0, [pc, #68]	@ (8003564 <process_id1+0x188>)
 800351e:	f000 fbf7 	bl	8003d10 <UART_Print>
}
 8003522:	bf00      	nop
 8003524:	3758      	adds	r7, #88	@ 0x58
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	08014388 	.word	0x08014388
 8003530:	08014390 	.word	0x08014390
 8003534:	0801439c 	.word	0x0801439c
 8003538:	080143a8 	.word	0x080143a8
 800353c:	080143b4 	.word	0x080143b4
 8003540:	200057a0 	.word	0x200057a0
 8003544:	0801434c 	.word	0x0801434c
 8003548:	080143c0 	.word	0x080143c0
 800354c:	080143c8 	.word	0x080143c8
 8003550:	080143d4 	.word	0x080143d4
 8003554:	080143e0 	.word	0x080143e0
 8003558:	080143ec 	.word	0x080143ec
 800355c:	080143f8 	.word	0x080143f8
 8003560:	08014418 	.word	0x08014418
 8003564:	0801442c 	.word	0x0801442c

08003568 <process_id2>:

// Function for ID 2: Parse and process alarms
void process_id2(char *token,char *buffer) {
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b0d7      	sub	sp, #348	@ 0x15c
 800356c:	af02      	add	r7, sp, #8
 800356e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003572:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003576:	6018      	str	r0, [r3, #0]
 8003578:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800357c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003580:	6019      	str	r1, [r3, #0]
    char msg[50];
    int num_alarms;

    // Extract and print mode
            if (token) {
 8003582:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003586:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01e      	beq.n	80035ce <process_id2+0x66>
            	sscanf(token,"%d",&mode1);
 8003590:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003594:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003598:	4aab      	ldr	r2, [pc, #684]	@ (8003848 <process_id2+0x2e0>)
 800359a:	49ac      	ldr	r1, [pc, #688]	@ (800384c <process_id2+0x2e4>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f00c f8cf 	bl	800f740 <siscanf>
            	sprintf(msg, "mode: %d\r\n", mode1);
 80035a2:	4ba9      	ldr	r3, [pc, #676]	@ (8003848 <process_id2+0x2e0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80035aa:	49a9      	ldr	r1, [pc, #676]	@ (8003850 <process_id2+0x2e8>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00c f8a7 	bl	800f700 <siprintf>
            	UART_Print(msg);
 80035b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fbaa 	bl	8003d10 <UART_Print>
            	token = strtok(NULL, "|");
 80035bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80035c0:	f5a3 74a6 	sub.w	r4, r3, #332	@ 0x14c
 80035c4:	49a3      	ldr	r1, [pc, #652]	@ (8003854 <process_id2+0x2ec>)
 80035c6:	2000      	movs	r0, #0
 80035c8:	f00c f97c 	bl	800f8c4 <strtok>
 80035cc:	6020      	str	r0, [r4, #0]
                }


            if(mode1!=1)
 80035ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003848 <process_id2+0x2e0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f000 80d4 	beq.w	8003780 <process_id2+0x218>
            {

            	if (rtc_clearalarm() == HAL_OK) {
 80035d8:	f7ff fd44 	bl	8003064 <rtc_clearalarm>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <process_id2+0x8a>
            		                HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm flag cleared via INT\n\r", 28, HAL_MAX_DELAY);
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	221c      	movs	r2, #28
 80035e8:	499b      	ldr	r1, [pc, #620]	@ (8003858 <process_id2+0x2f0>)
 80035ea:	489c      	ldr	r0, [pc, #624]	@ (800385c <process_id2+0x2f4>)
 80035ec:	f006 fa81 	bl	8009af2 <HAL_UART_Transmit>
 80035f0:	e006      	b.n	8003600 <process_id2+0x98>
            		            } else {
            		                HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to clear alarm flag via INT\n\r", 36, HAL_MAX_DELAY);
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	2224      	movs	r2, #36	@ 0x24
 80035f8:	4999      	ldr	r1, [pc, #612]	@ (8003860 <process_id2+0x2f8>)
 80035fa:	4898      	ldr	r0, [pc, #608]	@ (800385c <process_id2+0x2f4>)
 80035fc:	f006 fa79 	bl	8009af2 <HAL_UART_Transmit>
            		            }

    sscanf(token, "%d", &num_alarms);
 8003600:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003604:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003608:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800360c:	498f      	ldr	r1, [pc, #572]	@ (800384c <process_id2+0x2e4>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f00c f896 	bl	800f740 <siscanf>
    token = strtok(NULL, "|");
 8003614:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003618:	f5a3 74a6 	sub.w	r4, r3, #332	@ 0x14c
 800361c:	498d      	ldr	r1, [pc, #564]	@ (8003854 <process_id2+0x2ec>)
 800361e:	2000      	movs	r0, #0
 8003620:	f00c f950 	bl	800f8c4 <strtok>
 8003624:	6020      	str	r0, [r4, #0]

    if (num_alarms > MAX_ALARMS) {
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	2b0e      	cmp	r3, #14
 800362c:	dd03      	ble.n	8003636 <process_id2+0xce>
        UART_Print("Too many alarms!\n\r");
 800362e:	488d      	ldr	r0, [pc, #564]	@ (8003864 <process_id2+0x2fc>)
 8003630:	f000 fb6e 	bl	8003d10 <UART_Print>
 8003634:	e162      	b.n	80038fc <process_id2+0x394>
        return;
    }

    alarm_count = 0;
 8003636:	4b8c      	ldr	r3, [pc, #560]	@ (8003868 <process_id2+0x300>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
    while (token && alarm_count < num_alarms) {
 800363c:	e090      	b.n	8003760 <process_id2+0x1f8>
        UART_Print("time-\r\n");
 800363e:	488b      	ldr	r0, [pc, #556]	@ (800386c <process_id2+0x304>)
 8003640:	f000 fb66 	bl	8003d10 <UART_Print>
        int hh, mm, ss;
        if (sscanf(token, "%d:%d:%d", &hh, &mm, &ss) == 3) {
 8003644:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8003648:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800364c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003650:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8003654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	460b      	mov	r3, r1
 800365c:	4984      	ldr	r1, [pc, #528]	@ (8003870 <process_id2+0x308>)
 800365e:	6800      	ldr	r0, [r0, #0]
 8003660:	f00c f86e 	bl	800f740 <siscanf>
 8003664:	4603      	mov	r3, r0
 8003666:	2b03      	cmp	r3, #3
 8003668:	d171      	bne.n	800374e <process_id2+0x1e6>
            sprintf(msg, "Alarm %d: %02d:%02d:%02d\r\n", alarm_count + 1, hh, mm, ss);
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <process_id2+0x300>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 8003674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003678:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800367c:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8003680:	9201      	str	r2, [sp, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4623      	mov	r3, r4
 8003686:	460a      	mov	r2, r1
 8003688:	497a      	ldr	r1, [pc, #488]	@ (8003874 <process_id2+0x30c>)
 800368a:	f00c f839 	bl	800f700 <siprintf>
            UART_Print(msg);
 800368e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb3c 	bl	8003d10 <UART_Print>

            alarm_queue[alarm_count].hour = hh;
 8003698:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800369c:	4b72      	ldr	r3, [pc, #456]	@ (8003868 <process_id2+0x300>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	b2d0      	uxtb	r0, r2
 80036a4:	4a74      	ldr	r2, [pc, #464]	@ (8003878 <process_id2+0x310>)
 80036a6:	460b      	mov	r3, r1
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	1a5b      	subs	r3, r3, r1
 80036ac:	4413      	add	r3, r2
 80036ae:	4602      	mov	r2, r0
 80036b0:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].minute = mm;
 80036b2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80036b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003868 <process_id2+0x300>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4619      	mov	r1, r3
 80036bc:	b2d0      	uxtb	r0, r2
 80036be:	4a6e      	ldr	r2, [pc, #440]	@ (8003878 <process_id2+0x310>)
 80036c0:	460b      	mov	r3, r1
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	1a5b      	subs	r3, r3, r1
 80036c6:	4413      	add	r3, r2
 80036c8:	3301      	adds	r3, #1
 80036ca:	4602      	mov	r2, r0
 80036cc:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].second = ss;
 80036ce:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80036d2:	4b65      	ldr	r3, [pc, #404]	@ (8003868 <process_id2+0x300>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	b2d0      	uxtb	r0, r2
 80036da:	4a67      	ldr	r2, [pc, #412]	@ (8003878 <process_id2+0x310>)
 80036dc:	460b      	mov	r3, r1
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a5b      	subs	r3, r3, r1
 80036e2:	4413      	add	r3, r2
 80036e4:	3302      	adds	r3, #2
 80036e6:	4602      	mov	r2, r0
 80036e8:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].day = 0xFF;
 80036ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003868 <process_id2+0x300>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4a61      	ldr	r2, [pc, #388]	@ (8003878 <process_id2+0x310>)
 80036f2:	460b      	mov	r3, r1
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	1a5b      	subs	r3, r3, r1
 80036f8:	4413      	add	r3, r2
 80036fa:	3303      	adds	r3, #3
 80036fc:	22ff      	movs	r2, #255	@ 0xff
 80036fe:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].weekday = 0xFF;
 8003700:	4b59      	ldr	r3, [pc, #356]	@ (8003868 <process_id2+0x300>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	4a5c      	ldr	r2, [pc, #368]	@ (8003878 <process_id2+0x310>)
 8003708:	460b      	mov	r3, r1
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a5b      	subs	r3, r3, r1
 800370e:	4413      	add	r3, r2
 8003710:	3306      	adds	r3, #6
 8003712:	22ff      	movs	r2, #255	@ 0xff
 8003714:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].month = 0xFF;
 8003716:	4b54      	ldr	r3, [pc, #336]	@ (8003868 <process_id2+0x300>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	4a56      	ldr	r2, [pc, #344]	@ (8003878 <process_id2+0x310>)
 800371e:	460b      	mov	r3, r1
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	1a5b      	subs	r3, r3, r1
 8003724:	4413      	add	r3, r2
 8003726:	3304      	adds	r3, #4
 8003728:	22ff      	movs	r2, #255	@ 0xff
 800372a:	701a      	strb	r2, [r3, #0]
            alarm_queue[alarm_count].year = 0xFF;
 800372c:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <process_id2+0x300>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	4a51      	ldr	r2, [pc, #324]	@ (8003878 <process_id2+0x310>)
 8003734:	460b      	mov	r3, r1
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	1a5b      	subs	r3, r3, r1
 800373a:	4413      	add	r3, r2
 800373c:	3305      	adds	r3, #5
 800373e:	22ff      	movs	r2, #255	@ 0xff
 8003740:	701a      	strb	r2, [r3, #0]
            alarm_count++;
 8003742:	4b49      	ldr	r3, [pc, #292]	@ (8003868 <process_id2+0x300>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <process_id2+0x300>)
 800374c:	701a      	strb	r2, [r3, #0]
        }
        token = strtok(NULL, "|");
 800374e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003752:	f5a3 74a6 	sub.w	r4, r3, #332	@ 0x14c
 8003756:	493f      	ldr	r1, [pc, #252]	@ (8003854 <process_id2+0x2ec>)
 8003758:	2000      	movs	r0, #0
 800375a:	f00c f8b3 	bl	800f8c4 <strtok>
 800375e:	6020      	str	r0, [r4, #0]
    while (token && alarm_count < num_alarms) {
 8003760:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003764:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00f      	beq.n	800378e <process_id2+0x226>
 800376e:	4b3e      	ldr	r3, [pc, #248]	@ (8003868 <process_id2+0x300>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	429a      	cmp	r2, r3
 800377a:	f6ff af60 	blt.w	800363e <process_id2+0xd6>
 800377e:	e006      	b.n	800378e <process_id2+0x226>
    }
            }
            else
            {
            	process_id4(token);
 8003780:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003784:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f000 f8d3 	bl	8003934 <process_id4>
            }

    // Write to EEPROM only for id=2
        ret = eeprom_write(0x0000, (uint8_t*)buffer, strlen(buffer) + 1);
 800378e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003792:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	f7fc fd6a 	bl	8000270 <strlen>
 800379c:	4603      	mov	r3, r0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80037a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7ff f882 	bl	80028b8 <eeprom_write>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b30      	ldr	r3, [pc, #192]	@ (800387c <process_id2+0x314>)
 80037ba:	701a      	strb	r2, [r3, #0]
        if (ret == HAL_OK) {
 80037bc:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <process_id2+0x314>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d165      	bne.n	8003890 <process_id2+0x328>
            HAL_UART_Transmit(&huart3, (uint8_t*)"write ok\n\r", 10, HAL_MAX_DELAY);
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	220a      	movs	r2, #10
 80037ca:	492d      	ldr	r1, [pc, #180]	@ (8003880 <process_id2+0x318>)
 80037cc:	4823      	ldr	r0, [pc, #140]	@ (800385c <process_id2+0x2f4>)
 80037ce:	f006 f990 	bl	8009af2 <HAL_UART_Transmit>
            HAL_Delay(100);
 80037d2:	2064      	movs	r0, #100	@ 0x64
 80037d4:	f000 ff80 	bl	80046d8 <HAL_Delay>

            uint8_t eeprom_data[RX_buffersize];
            memset(eeprom_data, 0, RX_buffersize); // Clear the buffer
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f00c f854 	bl	800f890 <memset>
            if (eeprom_read(0x0000, eeprom_data, RX_buffersize) != NULL) {
 80037e8:	f107 0308 	add.w	r3, r7, #8
 80037ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037f0:	4619      	mov	r1, r3
 80037f2:	2000      	movs	r0, #0
 80037f4:	f7ff f88a 	bl	800290c <eeprom_read>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01c      	beq.n	8003838 <process_id2+0x2d0>
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read OK: ", 16, HAL_MAX_DELAY);
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	2210      	movs	r2, #16
 8003804:	491f      	ldr	r1, [pc, #124]	@ (8003884 <process_id2+0x31c>)
 8003806:	4815      	ldr	r0, [pc, #84]	@ (800385c <process_id2+0x2f4>)
 8003808:	f006 f973 	bl	8009af2 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart3, eeprom_data, strlen((char*)eeprom_data), HAL_MAX_DELAY);
 800380c:	f107 0308 	add.w	r3, r7, #8
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fd2d 	bl	8000270 <strlen>
 8003816:	4603      	mov	r3, r0
 8003818:	b29a      	uxth	r2, r3
 800381a:	f107 0108 	add.w	r1, r7, #8
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	480e      	ldr	r0, [pc, #56]	@ (800385c <process_id2+0x2f4>)
 8003824:	f006 f965 	bl	8009af2 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart3, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	2202      	movs	r2, #2
 800382e:	4916      	ldr	r1, [pc, #88]	@ (8003888 <process_id2+0x320>)
 8003830:	480a      	ldr	r0, [pc, #40]	@ (800385c <process_id2+0x2f4>)
 8003832:	f006 f95e 	bl	8009af2 <HAL_UART_Transmit>
 8003836:	e035      	b.n	80038a4 <process_id2+0x33c>
            } else {
                HAL_UART_Transmit(&huart3, (uint8_t*)"EEPROM read failed\n\r", 20, HAL_MAX_DELAY);
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	2214      	movs	r2, #20
 800383e:	4913      	ldr	r1, [pc, #76]	@ (800388c <process_id2+0x324>)
 8003840:	4806      	ldr	r0, [pc, #24]	@ (800385c <process_id2+0x2f4>)
 8003842:	f006 f956 	bl	8009af2 <HAL_UART_Transmit>
 8003846:	e02d      	b.n	80038a4 <process_id2+0x33c>
 8003848:	200057e0 	.word	0x200057e0
 800384c:	08014350 	.word	0x08014350
 8003850:	08014444 	.word	0x08014444
 8003854:	0801434c 	.word	0x0801434c
 8003858:	08014450 	.word	0x08014450
 800385c:	200004e0 	.word	0x200004e0
 8003860:	08014470 	.word	0x08014470
 8003864:	08014498 	.word	0x08014498
 8003868:	2000569a 	.word	0x2000569a
 800386c:	08014388 	.word	0x08014388
 8003870:	08014390 	.word	0x08014390
 8003874:	080144ac 	.word	0x080144ac
 8003878:	20005638 	.word	0x20005638
 800387c:	2000021c 	.word	0x2000021c
 8003880:	080144c8 	.word	0x080144c8
 8003884:	080144d4 	.word	0x080144d4
 8003888:	08014344 	.word	0x08014344
 800388c:	080144e8 	.word	0x080144e8
            }
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)"write notok\n\r", 13, HAL_MAX_DELAY);
 8003890:	f04f 33ff 	mov.w	r3, #4294967295
 8003894:	220d      	movs	r2, #13
 8003896:	491b      	ldr	r1, [pc, #108]	@ (8003904 <process_id2+0x39c>)
 8003898:	481b      	ldr	r0, [pc, #108]	@ (8003908 <process_id2+0x3a0>)
 800389a:	f006 f92a 	bl	8009af2 <HAL_UART_Transmit>
            HAL_Delay(100);
 800389e:	2064      	movs	r0, #100	@ 0x64
 80038a0:	f000 ff1a 	bl	80046d8 <HAL_Delay>
        }

    //eeprom_store_config(token); // Store alarms in EEPROM
    UART_Print("Alarms set\n\r");
 80038a4:	4819      	ldr	r0, [pc, #100]	@ (800390c <process_id2+0x3a4>)
 80038a6:	f000 fa33 	bl	8003d10 <UART_Print>

    if (alarm_count > 0) {
 80038aa:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <process_id2+0x3a8>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d024      	beq.n	80038fc <process_id2+0x394>
        int ret = rtc_setalarm(&alarm_queue[0]);
 80038b2:	4818      	ldr	r0, [pc, #96]	@ (8003914 <process_id2+0x3ac>)
 80038b4:	f7ff fb3a 	bl	8002f2c <rtc_setalarm>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        if (ret == 0) {
 80038be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11a      	bne.n	80038fc <process_id2+0x394>
            UART_Print("First alarm set\n\r");
 80038c6:	4814      	ldr	r0, [pc, #80]	@ (8003918 <process_id2+0x3b0>)
 80038c8:	f000 fa22 	bl	8003d10 <UART_Print>
            if (alarm_count > 1) {
 80038cc:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <process_id2+0x3a8>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d913      	bls.n	80038fc <process_id2+0x394>
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
                        alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 80038d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003914 <process_id2+0x3ac>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
 80038d8:	461a      	mov	r2, r3
                        alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 80038da:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <process_id2+0x3ac>)
 80038dc:	785b      	ldrb	r3, [r3, #1]
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
 80038de:	4619      	mov	r1, r3
                        alarm_queue[0].hour, alarm_queue[0].minute, alarm_queue[0].second);
 80038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <process_id2+0x3ac>)
 80038e2:	789b      	ldrb	r3, [r3, #2]
                sprintf(msg, "Next: %02d:%02d:%02d\n\r",
 80038e4:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	460b      	mov	r3, r1
 80038ec:	490b      	ldr	r1, [pc, #44]	@ (800391c <process_id2+0x3b4>)
 80038ee:	f00b ff07 	bl	800f700 <siprintf>
                UART_Print(msg);
 80038f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fa0a 	bl	8003d10 <UART_Print>
            }
        }
    }
}
 80038fc:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	08014500 	.word	0x08014500
 8003908:	200004e0 	.word	0x200004e0
 800390c:	08014510 	.word	0x08014510
 8003910:	2000569a 	.word	0x2000569a
 8003914:	20005638 	.word	0x20005638
 8003918:	08014520 	.word	0x08014520
 800391c:	08014534 	.word	0x08014534

08003920 <process_id3>:

void process_id3(char *token)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	printtime();
 8003928:	f000 f992 	bl	8003c50 <printtime>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <process_id4>:

void process_id4(char *token)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0b6      	sub	sp, #216	@ 0xd8
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
	char msg[50];
	int numofalarm=0;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		sscanf(token,"%d",&mode);
		sprintf(msg, "mode: %d\r\n", mode);
		UART_Print(msg);
		token = strtok(NULL, "|");
	                }*/
	    if (rtc_clearalarm() == HAL_OK) {
 8003942:	f7ff fb8f 	bl	8003064 <rtc_clearalarm>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <process_id4+0x28>
	    	                HAL_UART_Transmit(&huart3, (uint8_t*)"Alarm flag cleared via INT\n\r", 28, HAL_MAX_DELAY);
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	221c      	movs	r2, #28
 8003952:	49b0      	ldr	r1, [pc, #704]	@ (8003c14 <process_id4+0x2e0>)
 8003954:	48b0      	ldr	r0, [pc, #704]	@ (8003c18 <process_id4+0x2e4>)
 8003956:	f006 f8cc 	bl	8009af2 <HAL_UART_Transmit>
 800395a:	e006      	b.n	800396a <process_id4+0x36>
	    	            } else {
	    	                HAL_UART_Transmit(&huart3, (uint8_t*)"Failed to clear alarm flag via INT\n\r", 36, HAL_MAX_DELAY);
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	2224      	movs	r2, #36	@ 0x24
 8003962:	49ae      	ldr	r1, [pc, #696]	@ (8003c1c <process_id4+0x2e8>)
 8003964:	48ac      	ldr	r0, [pc, #688]	@ (8003c18 <process_id4+0x2e4>)
 8003966:	f006 f8c4 	bl	8009af2 <HAL_UART_Transmit>
	    	            }
	if(token)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <process_id4+0x7e>
	{
	sscanf(token,"%d:%d:%d",&hh,&mm,&ss);
 8003970:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003974:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003978:	f107 0320 	add.w	r3, r7, #32
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	460b      	mov	r3, r1
 8003980:	49a7      	ldr	r1, [pc, #668]	@ (8003c20 <process_id4+0x2ec>)
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f00b fedc 	bl	800f740 <siscanf>
	sprintf(msg, "current time: %02d:%02d:%02d\r\n", hh, mm, ss);
 8003988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800398a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	460b      	mov	r3, r1
 8003996:	49a3      	ldr	r1, [pc, #652]	@ (8003c24 <process_id4+0x2f0>)
 8003998:	f00b feb2 	bl	800f700 <siprintf>
	UART_Print(msg);
 800399c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f9b5 	bl	8003d10 <UART_Print>
	first.hh=hh;
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	60bb      	str	r3, [r7, #8]
	first.mm=mm;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	60fb      	str	r3, [r7, #12]
	first.ss=ss;
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	613b      	str	r3, [r7, #16]


	}

	token = strtok(NULL, "|");
 80039b2:	499d      	ldr	r1, [pc, #628]	@ (8003c28 <process_id4+0x2f4>)
 80039b4:	2000      	movs	r0, #0
 80039b6:	f00b ff85 	bl	800f8c4 <strtok>
 80039ba:	6078      	str	r0, [r7, #4]

	if(token)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <process_id4+0xd0>
		{
		sscanf(token,"%d:%d:%d",&hh,&mm,&ss);
 80039c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80039c6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80039ca:	f107 0320 	add.w	r3, r7, #32
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	460b      	mov	r3, r1
 80039d2:	4993      	ldr	r1, [pc, #588]	@ (8003c20 <process_id4+0x2ec>)
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f00b feb3 	bl	800f740 <siscanf>
		sprintf(msg, "stop time: %02d:%02d:%02d\r\n", hh, mm, ss);
 80039da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	460b      	mov	r3, r1
 80039e8:	4990      	ldr	r1, [pc, #576]	@ (8003c2c <process_id4+0x2f8>)
 80039ea:	f00b fe89 	bl	800f700 <siprintf>
		UART_Print(msg);
 80039ee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f98c 	bl	8003d10 <UART_Print>

		first.hh1=hh;
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	617b      	str	r3, [r7, #20]
		first.mm1=mm;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	61bb      	str	r3, [r7, #24]
		first.ss1=ss;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	61fb      	str	r3, [r7, #28]


		}

	token = strtok(NULL, "|");
 8003a04:	4988      	ldr	r1, [pc, #544]	@ (8003c28 <process_id4+0x2f4>)
 8003a06:	2000      	movs	r0, #0
 8003a08:	f00b ff5c 	bl	800f8c4 <strtok>
 8003a0c:	6078      	str	r0, [r7, #4]

	if(first.hh<0 || first.hh>23 ||first.mm<0 || first.mm>59 || first.ss<0 || first.ss>59 || first.hh1<0 || first.hh1>23 ||first.mm1<0 || first.mm1>59 || first.ss1<0 || first.ss1>59)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db20      	blt.n	8003a56 <process_id4+0x122>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b17      	cmp	r3, #23
 8003a18:	dc1d      	bgt.n	8003a56 <process_id4+0x122>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db1a      	blt.n	8003a56 <process_id4+0x122>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a24:	dc17      	bgt.n	8003a56 <process_id4+0x122>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db14      	blt.n	8003a56 <process_id4+0x122>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a30:	dc11      	bgt.n	8003a56 <process_id4+0x122>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0e      	blt.n	8003a56 <process_id4+0x122>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b17      	cmp	r3, #23
 8003a3c:	dc0b      	bgt.n	8003a56 <process_id4+0x122>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db08      	blt.n	8003a56 <process_id4+0x122>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a48:	dc05      	bgt.n	8003a56 <process_id4+0x122>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db02      	blt.n	8003a56 <process_id4+0x122>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a54:	dd02      	ble.n	8003a5c <process_id4+0x128>
	{
		UART_Print("invalid start and stop");
 8003a56:	4876      	ldr	r0, [pc, #472]	@ (8003c30 <process_id4+0x2fc>)
 8003a58:	f000 f95a 	bl	8003d10 <UART_Print>
	}
	int i=0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		int currnthour=first.hh;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

		while(currnthour!=first.hh1 && i<24)
 8003a68:	e019      	b.n	8003a9e <process_id4+0x16a>
		{
		    alarmarray[i]=currnthour;
 8003a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	33d0      	adds	r3, #208	@ 0xd0
 8003a72:	443b      	add	r3, r7
 8003a74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a78:	f843 2ca4 	str.w	r2, [r3, #-164]
		    //printf("%d\n",alarmarray[i]);
		    currnthour++;
 8003a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a80:	3301      	adds	r3, #1
 8003a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		    if(currnthour>=24)
 8003a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a8a:	2b17      	cmp	r3, #23
 8003a8c:	dd02      	ble.n	8003a94 <process_id4+0x160>
		    {
		        currnthour=0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		    }
		    i++;
 8003a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		while(currnthour!=first.hh1 && i<24)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d003      	beq.n	8003ab0 <process_id4+0x17c>
 8003aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aac:	2b17      	cmp	r3, #23
 8003aae:	dddc      	ble.n	8003a6a <process_id4+0x136>
		}
		    if(i<24 && currnthour == first.hh1)
 8003ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ab4:	2b17      	cmp	r3, #23
 8003ab6:	dc12      	bgt.n	8003ade <process_id4+0x1aa>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d10d      	bne.n	8003ade <process_id4+0x1aa>
		    {
		        alarmarray[i]=currnthour;
 8003ac2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	33d0      	adds	r3, #208	@ 0xd0
 8003aca:	443b      	add	r3, r7
 8003acc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ad0:	f843 2ca4 	str.w	r2, [r3, #-164]
		        //printf("%d\n",alarmarray[i]);
		        i++;
 8003ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		    }
		    numofalarm=i;
 8003ade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

		    // Check if number of alarms exceeds MAX_ALARMS
		        if (numofalarm > MAX_ALARMS) {
 8003ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aea:	2b0e      	cmp	r3, #14
 8003aec:	dd03      	ble.n	8003af6 <process_id4+0x1c2>
		            UART_Print("Too many alarms!\n\r");
 8003aee:	4851      	ldr	r0, [pc, #324]	@ (8003c34 <process_id4+0x300>)
 8003af0:	f000 f90e 	bl	8003d10 <UART_Print>
 8003af4:	e08b      	b.n	8003c0e <process_id4+0x2da>
		            return;
		        }

		        // Reset alarm queue
		            alarm_count = 0;
 8003af6:	4b50      	ldr	r3, [pc, #320]	@ (8003c38 <process_id4+0x304>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
		            current_idx = 0;
 8003afc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c3c <process_id4+0x308>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]


		            // Populate alarm_queue with hourly alarms
		                for (int j = 0; j < numofalarm; j++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b08:	e072      	b.n	8003bf0 <process_id4+0x2bc>
		                    sprintf(uart_buffer, "Alarm %d: %02d:%02d:%02d\r\n", j + 1, alarmarray[j], first.mm, first.ss);
 8003b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	33d0      	adds	r3, #208	@ 0xd0
 8003b18:	443b      	add	r3, r7
 8003b1a:	f853 0ca4 	ldr.w	r0, [r3, #-164]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	4603      	mov	r3, r0
 8003b28:	460a      	mov	r2, r1
 8003b2a:	4945      	ldr	r1, [pc, #276]	@ (8003c40 <process_id4+0x30c>)
 8003b2c:	4845      	ldr	r0, [pc, #276]	@ (8003c44 <process_id4+0x310>)
 8003b2e:	f00b fde7 	bl	800f700 <siprintf>
		                    UART_Print(uart_buffer);
 8003b32:	4844      	ldr	r0, [pc, #272]	@ (8003c44 <process_id4+0x310>)
 8003b34:	f000 f8ec 	bl	8003d10 <UART_Print>

		                    alarm_queue[j].hour = alarmarray[j];
 8003b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	33d0      	adds	r3, #208	@ 0xd0
 8003b40:	443b      	add	r3, r7
 8003b42:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8003b46:	b2d8      	uxtb	r0, r3
 8003b48:	493f      	ldr	r1, [pc, #252]	@ (8003c48 <process_id4+0x314>)
 8003b4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	440b      	add	r3, r1
 8003b56:	4602      	mov	r2, r0
 8003b58:	701a      	strb	r2, [r3, #0]
		                    alarm_queue[j].minute = first.mm;    // Use start time's minutes
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b2d8      	uxtb	r0, r3
 8003b5e:	493a      	ldr	r1, [pc, #232]	@ (8003c48 <process_id4+0x314>)
 8003b60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	4602      	mov	r2, r0
 8003b70:	701a      	strb	r2, [r3, #0]
		                    alarm_queue[j].second = first.ss;    // Use start time's seconds
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	b2d8      	uxtb	r0, r3
 8003b76:	4934      	ldr	r1, [pc, #208]	@ (8003c48 <process_id4+0x314>)
 8003b78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	440b      	add	r3, r1
 8003b84:	3302      	adds	r3, #2
 8003b86:	4602      	mov	r2, r0
 8003b88:	701a      	strb	r2, [r3, #0]
		                    alarm_queue[j].day = 0xFF;           // Disable day
 8003b8a:	492f      	ldr	r1, [pc, #188]	@ (8003c48 <process_id4+0x314>)
 8003b8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	3303      	adds	r3, #3
 8003b9a:	22ff      	movs	r2, #255	@ 0xff
 8003b9c:	701a      	strb	r2, [r3, #0]
		                    alarm_queue[j].weekday = 0xFF;       // Disable weekday
 8003b9e:	492a      	ldr	r1, [pc, #168]	@ (8003c48 <process_id4+0x314>)
 8003ba0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	440b      	add	r3, r1
 8003bac:	3306      	adds	r3, #6
 8003bae:	22ff      	movs	r2, #255	@ 0xff
 8003bb0:	701a      	strb	r2, [r3, #0]
		                    alarm_queue[j].month = 0xFF;         // Disable month
 8003bb2:	4925      	ldr	r1, [pc, #148]	@ (8003c48 <process_id4+0x314>)
 8003bb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	22ff      	movs	r2, #255	@ 0xff
 8003bc4:	701a      	strb	r2, [r3, #0]
		                    alarm_queue[j].year = 0xFF;          // Disable year
 8003bc6:	4920      	ldr	r1, [pc, #128]	@ (8003c48 <process_id4+0x314>)
 8003bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3305      	adds	r3, #5
 8003bd6:	22ff      	movs	r2, #255	@ 0xff
 8003bd8:	701a      	strb	r2, [r3, #0]
		                    alarm_count++;
 8003bda:	4b17      	ldr	r3, [pc, #92]	@ (8003c38 <process_id4+0x304>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <process_id4+0x304>)
 8003be4:	701a      	strb	r2, [r3, #0]
		                for (int j = 0; j < numofalarm; j++) {
 8003be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bea:	3301      	adds	r3, #1
 8003bec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bf0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	db86      	blt.n	8003b0a <process_id4+0x1d6>
		    sprintf(uart_buffer,"%2d:00:00\n",alarmarray[j]);
		    UART_Print(uart_buffer);
		    numofalarm=i;*/

		//}
		sprintf(uart_buffer,"%d\n\r",numofalarm);
 8003bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c00:	4912      	ldr	r1, [pc, #72]	@ (8003c4c <process_id4+0x318>)
 8003c02:	4810      	ldr	r0, [pc, #64]	@ (8003c44 <process_id4+0x310>)
 8003c04:	f00b fd7c 	bl	800f700 <siprintf>
		UART_Print(uart_buffer);
 8003c08:	480e      	ldr	r0, [pc, #56]	@ (8003c44 <process_id4+0x310>)
 8003c0a:	f000 f881 	bl	8003d10 <UART_Print>
		    }*/




}
 8003c0e:	37d0      	adds	r7, #208	@ 0xd0
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08014450 	.word	0x08014450
 8003c18:	200004e0 	.word	0x200004e0
 8003c1c:	08014470 	.word	0x08014470
 8003c20:	08014390 	.word	0x08014390
 8003c24:	0801454c 	.word	0x0801454c
 8003c28:	0801434c 	.word	0x0801434c
 8003c2c:	0801456c 	.word	0x0801456c
 8003c30:	08014588 	.word	0x08014588
 8003c34:	08014498 	.word	0x08014498
 8003c38:	2000569a 	.word	0x2000569a
 8003c3c:	2000569b 	.word	0x2000569b
 8003c40:	080144ac 	.word	0x080144ac
 8003c44:	200057a8 	.word	0x200057a8
 8003c48:	20005638 	.word	0x20005638
 8003c4c:	080145a0 	.word	0x080145a0

08003c50 <printtime>:
}



void printtime(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af02      	add	r7, sp, #8
	ret=rtc_gettime(&timedate);
 8003c56:	4827      	ldr	r0, [pc, #156]	@ (8003cf4 <printtime+0xa4>)
 8003c58:	f7ff f8f3 	bl	8002e42 <rtc_gettime>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4b25      	ldr	r3, [pc, #148]	@ (8003cf8 <printtime+0xa8>)
 8003c62:	701a      	strb	r2, [r3, #0]
	        	  	            if(ret==HAL_OK)
 8003c64:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <printtime+0xa8>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d135      	bne.n	8003cd8 <printtime+0x88>
	        	  	            {
	        	  	          	  sprintf(uart_buffer,"current time = %02d:%02d:%02d\n\r",timedate.hour,timedate.minute,timedate.second);
 8003c6c:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <printtime+0xa4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <printtime+0xa4>)
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf4 <printtime+0xa4>)
 8003c7a:	789b      	ldrb	r3, [r3, #2]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	491e      	ldr	r1, [pc, #120]	@ (8003cfc <printtime+0xac>)
 8003c82:	481f      	ldr	r0, [pc, #124]	@ (8003d00 <printtime+0xb0>)
 8003c84:	f00b fd3c 	bl	800f700 <siprintf>
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003c88:	481d      	ldr	r0, [pc, #116]	@ (8003d00 <printtime+0xb0>)
 8003c8a:	f7fc faf1 	bl	8000270 <strlen>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	491a      	ldr	r1, [pc, #104]	@ (8003d00 <printtime+0xb0>)
 8003c98:	481a      	ldr	r0, [pc, #104]	@ (8003d04 <printtime+0xb4>)
 8003c9a:	f005 ff2a 	bl	8009af2 <HAL_UART_Transmit>
	        	  	          	  sprintf(uart_buffer,"current date = %02d/%02d/20%02d\n\r",timedate.day,timedate.month,timedate.year);
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <printtime+0xa4>)
 8003ca0:	78db      	ldrb	r3, [r3, #3]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <printtime+0xa4>)
 8003ca6:	791b      	ldrb	r3, [r3, #4]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <printtime+0xa4>)
 8003cac:	795b      	ldrb	r3, [r3, #5]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4915      	ldr	r1, [pc, #84]	@ (8003d08 <printtime+0xb8>)
 8003cb4:	4812      	ldr	r0, [pc, #72]	@ (8003d00 <printtime+0xb0>)
 8003cb6:	f00b fd23 	bl	800f700 <siprintf>
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003cba:	4811      	ldr	r0, [pc, #68]	@ (8003d00 <printtime+0xb0>)
 8003cbc:	f7fc fad8 	bl	8000270 <strlen>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	490d      	ldr	r1, [pc, #52]	@ (8003d00 <printtime+0xb0>)
 8003cca:	480e      	ldr	r0, [pc, #56]	@ (8003d04 <printtime+0xb4>)
 8003ccc:	f005 ff11 	bl	8009af2 <HAL_UART_Transmit>
	        	  	          	  HAL_Delay(100);
 8003cd0:	2064      	movs	r0, #100	@ 0x64
 8003cd2:	f000 fd01 	bl	80046d8 <HAL_Delay>
	        	  	            {
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
	        	  	          	  HAL_Delay(100);
	        	  	            }

}
 8003cd6:	e009      	b.n	8003cec <printtime+0x9c>
	        	  	          	  HAL_UART_Transmit(&huart3, (uint8_t*)"rtc get time notok\n\r", 20, HAL_MAX_DELAY);
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	2214      	movs	r2, #20
 8003cde:	490b      	ldr	r1, [pc, #44]	@ (8003d0c <printtime+0xbc>)
 8003ce0:	4808      	ldr	r0, [pc, #32]	@ (8003d04 <printtime+0xb4>)
 8003ce2:	f005 ff06 	bl	8009af2 <HAL_UART_Transmit>
	        	  	          	  HAL_Delay(100);
 8003ce6:	2064      	movs	r0, #100	@ 0x64
 8003ce8:	f000 fcf6 	bl	80046d8 <HAL_Delay>
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200057a0 	.word	0x200057a0
 8003cf8:	2000021c 	.word	0x2000021c
 8003cfc:	080145c0 	.word	0x080145c0
 8003d00:	200057a8 	.word	0x200057a8
 8003d04:	200004e0 	.word	0x200004e0
 8003d08:	080145e0 	.word	0x080145e0
 8003d0c:	08014604 	.word	0x08014604

08003d10 <UART_Print>:
        }
    }
}*/


void UART_Print(const char *str) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fc faa9 	bl	8000270 <strlen>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4803      	ldr	r0, [pc, #12]	@ (8003d38 <UART_Print+0x28>)
 8003d2a:	f005 fee2 	bl	8009af2 <HAL_UART_Transmit>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200004e0 	.word	0x200004e0

08003d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	@ 0x30
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 031c 	add.w	r3, r7, #28
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]

    if(hi2c->Instance==I2C1) // Add I2C1 configuration
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a32      	ldr	r2, [pc, #200]	@ (8003e74 <HAL_I2C_MspInit+0xe8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12c      	bne.n	8003e08 <HAL_I2C_MspInit+0x7c>
    {
      /* USER CODE BEGIN I2C1_MspInit 0 */
      /* USER CODE END I2C1_MspInit 0 */

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	4b31      	ldr	r3, [pc, #196]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	4a30      	ldr	r2, [pc, #192]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
      /**I2C1 GPIO Configuration
      PB6     ------> I2C1_SCL
      PB7     ------> I2C1_SDA
      */
      GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003dca:	23c0      	movs	r3, #192	@ 0xc0
 8003dcc:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8003dce:	2312      	movs	r3, #18
 8003dd0:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;     // External pull-ups required
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // AF4 for I2C1
 8003dda:	2304      	movs	r3, #4
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dde:	f107 031c 	add.w	r3, r7, #28
 8003de2:	4619      	mov	r1, r3
 8003de4:	4825      	ldr	r0, [pc, #148]	@ (8003e7c <HAL_I2C_MspInit+0xf0>)
 8003de6:	f001 f9af 	bl	8005148 <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_I2C1_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e06:	e031      	b.n	8003e6c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <HAL_I2C_MspInit+0xf4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d12c      	bne.n	8003e6c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	4b18      	ldr	r3, [pc, #96]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e34:	2312      	movs	r3, #18
 8003e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e40:	2304      	movs	r3, #4
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	480c      	ldr	r0, [pc, #48]	@ (8003e7c <HAL_I2C_MspInit+0xf0>)
 8003e4c:	f001 f97c 	bl	8005148 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	4a07      	ldr	r2, [pc, #28]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003e5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_I2C_MspInit+0xec>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40005400 	.word	0x40005400
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40005800 	.word	0x40005800

08003e84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08e      	sub	sp, #56	@ 0x38
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a91      	ldr	r2, [pc, #580]	@ (80040e8 <HAL_I2S_MspInit+0x264>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	f040 808c 	bne.w	8003fc0 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	4b8f      	ldr	r3, [pc, #572]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	4a8e      	ldr	r2, [pc, #568]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	4b88      	ldr	r3, [pc, #544]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	4a87      	ldr	r2, [pc, #540]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed4:	4b85      	ldr	r3, [pc, #532]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	4b81      	ldr	r3, [pc, #516]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	4a80      	ldr	r2, [pc, #512]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003efc:	2308      	movs	r3, #8
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f00:	2302      	movs	r3, #2
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f14:	4619      	mov	r1, r3
 8003f16:	4876      	ldr	r0, [pc, #472]	@ (80040f0 <HAL_I2S_MspInit+0x26c>)
 8003f18:	f001 f916 	bl	8005148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f2e:	2305      	movs	r3, #5
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f36:	4619      	mov	r1, r3
 8003f38:	486e      	ldr	r0, [pc, #440]	@ (80040f4 <HAL_I2S_MspInit+0x270>)
 8003f3a:	f001 f905 	bl	8005148 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f40:	4a6e      	ldr	r2, [pc, #440]	@ (80040fc <HAL_I2S_MspInit+0x278>)
 8003f42:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003f44:	4b6c      	ldr	r3, [pc, #432]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f50:	4b69      	ldr	r3, [pc, #420]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f56:	4b68      	ldr	r3, [pc, #416]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f5c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f5e:	4b66      	ldr	r3, [pc, #408]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f64:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f66:	4b64      	ldr	r3, [pc, #400]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003f6c:	4b62      	ldr	r3, [pc, #392]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f72:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f74:	4b60      	ldr	r3, [pc, #384]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f80:	4b5d      	ldr	r3, [pc, #372]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f82:	2203      	movs	r2, #3
 8003f84:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003f86:	4b5c      	ldr	r3, [pc, #368]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003f92:	4859      	ldr	r0, [pc, #356]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003f94:	f000 fcd6 	bl	8004944 <HAL_DMA_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 8003f9e:	f7fe fc71 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a54      	ldr	r2, [pc, #336]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003fa8:	4a53      	ldr	r2, [pc, #332]	@ (80040f8 <HAL_I2S_MspInit+0x274>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	2024      	movs	r0, #36	@ 0x24
 8003fb4:	f000 fc8f 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003fb8:	2024      	movs	r0, #36	@ 0x24
 8003fba:	f000 fca8 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003fbe:	e08f      	b.n	80040e0 <HAL_I2S_MspInit+0x25c>
  else if(hi2s->Instance==SPI3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8004100 <HAL_I2S_MspInit+0x27c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 808a 	bne.w	80040e0 <HAL_I2S_MspInit+0x25c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	4b46      	ldr	r3, [pc, #280]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4a45      	ldr	r2, [pc, #276]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fdc:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	4b3f      	ldr	r3, [pc, #252]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	4b38      	ldr	r3, [pc, #224]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	4a37      	ldr	r2, [pc, #220]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	6313      	str	r3, [r2, #48]	@ 0x30
 8004014:	4b35      	ldr	r3, [pc, #212]	@ (80040ec <HAL_I2S_MspInit+0x268>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004020:	2310      	movs	r3, #16
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402c:	2300      	movs	r3, #0
 800402e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004030:	2306      	movs	r3, #6
 8004032:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004038:	4619      	mov	r1, r3
 800403a:	4832      	ldr	r0, [pc, #200]	@ (8004104 <HAL_I2S_MspInit+0x280>)
 800403c:	f001 f884 	bl	8005148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004040:	2328      	movs	r3, #40	@ 0x28
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404c:	2300      	movs	r3, #0
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004050:	2306      	movs	r3, #6
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004058:	4619      	mov	r1, r3
 800405a:	4826      	ldr	r0, [pc, #152]	@ (80040f4 <HAL_I2S_MspInit+0x270>)
 800405c:	f001 f874 	bl	8005148 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8004060:	4b29      	ldr	r3, [pc, #164]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 8004062:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <HAL_I2S_MspInit+0x288>)
 8004064:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8004066:	4b28      	ldr	r3, [pc, #160]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 8004068:	2200      	movs	r2, #0
 800406a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800406c:	4b26      	ldr	r3, [pc, #152]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004072:	4b25      	ldr	r3, [pc, #148]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 8004074:	2200      	movs	r2, #0
 8004076:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004078:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 800407a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800407e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004080:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 8004082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004086:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004088:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800408e:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 8004090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004094:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004096:	4b1c      	ldr	r3, [pc, #112]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 8004098:	2200      	movs	r2, #0
 800409a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800409c:	4b1a      	ldr	r3, [pc, #104]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 800409e:	2204      	movs	r2, #4
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80040a2:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 80040a4:	2203      	movs	r2, #3
 80040a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80040a8:	4b17      	ldr	r3, [pc, #92]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80040ae:	4b16      	ldr	r3, [pc, #88]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80040b4:	4814      	ldr	r0, [pc, #80]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 80040b6:	f000 fc45 	bl	8004944 <HAL_DMA_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2S_MspInit+0x240>
      Error_Handler();
 80040c0:	f7fe fbe0 	bl	8002884 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 80040c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004108 <HAL_I2S_MspInit+0x284>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2100      	movs	r1, #0
 80040d4:	2033      	movs	r0, #51	@ 0x33
 80040d6:	f000 fbfe 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80040da:	2033      	movs	r0, #51	@ 0x33
 80040dc:	f000 fc17 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 80040e0:	bf00      	nop
 80040e2:	3738      	adds	r7, #56	@ 0x38
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40003800 	.word	0x40003800
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020400 	.word	0x40020400
 80040f8:	20000358 	.word	0x20000358
 80040fc:	40026058 	.word	0x40026058
 8004100:	40003c00 	.word	0x40003c00
 8004104:	40020000 	.word	0x40020000
 8004108:	200003b8 	.word	0x200003b8
 800410c:	40026010 	.word	0x40026010

08004110 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	@ 0x28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	f107 0314 	add.w	r3, r7, #20
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a28      	ldr	r2, [pc, #160]	@ (80041d0 <HAL_SD_MspInit+0xc0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d14a      	bne.n	80041c8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	4b27      	ldr	r3, [pc, #156]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	4a26      	ldr	r2, [pc, #152]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 800413c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004140:	6453      	str	r3, [r2, #68]	@ 0x44
 8004142:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 8004174:	f043 0308 	orr.w	r3, r3, #8
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
 800417a:	4b16      	ldr	r3, [pc, #88]	@ (80041d4 <HAL_SD_MspInit+0xc4>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004186:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800418a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	2303      	movs	r3, #3
 8004196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004198:	230c      	movs	r3, #12
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	480d      	ldr	r0, [pc, #52]	@ (80041d8 <HAL_SD_MspInit+0xc8>)
 80041a4:	f000 ffd0 	bl	8005148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041a8:	2304      	movs	r3, #4
 80041aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ac:	2302      	movs	r3, #2
 80041ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041b8:	230c      	movs	r3, #12
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4619      	mov	r1, r3
 80041c2:	4806      	ldr	r0, [pc, #24]	@ (80041dc <HAL_SD_MspInit+0xcc>)
 80041c4:	f000 ffc0 	bl	8005148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80041c8:	bf00      	nop
 80041ca:	3728      	adds	r7, #40	@ 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40020800 	.word	0x40020800
 80041dc:	40020c00 	.word	0x40020c00

080041e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	@ 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a3a      	ldr	r2, [pc, #232]	@ (80042e8 <HAL_UART_MspInit+0x108>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d134      	bne.n	800426c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	4a38      	ldr	r2, [pc, #224]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004210:	6413      	str	r3, [r2, #64]	@ 0x40
 8004212:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	4b32      	ldr	r3, [pc, #200]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	4a31      	ldr	r2, [pc, #196]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6313      	str	r3, [r2, #48]	@ 0x30
 800422e:	4b2f      	ldr	r3, [pc, #188]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800423a:	230c      	movs	r3, #12
 800423c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800424a:	2307      	movs	r3, #7
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424e:	f107 031c 	add.w	r3, r7, #28
 8004252:	4619      	mov	r1, r3
 8004254:	4826      	ldr	r0, [pc, #152]	@ (80042f0 <HAL_UART_MspInit+0x110>)
 8004256:	f000 ff77 	bl	8005148 <HAL_GPIO_Init>



    /* USART2 interrupt Init */
        HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	2026      	movs	r0, #38	@ 0x26
 8004260:	f000 fb39 	bl	80048d6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004264:	2026      	movs	r0, #38	@ 0x26
 8004266:	f000 fb52 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800426a:	e039      	b.n	80042e0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a20      	ldr	r2, [pc, #128]	@ (80042f4 <HAL_UART_MspInit+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d134      	bne.n	80042e0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004284:	6413      	str	r3, [r2, #64]	@ 0x40
 8004286:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_UART_MspInit+0x10c>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80042b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042c0:	2307      	movs	r3, #7
 80042c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042c4:	f107 031c 	add.w	r3, r7, #28
 80042c8:	4619      	mov	r1, r3
 80042ca:	480b      	ldr	r0, [pc, #44]	@ (80042f8 <HAL_UART_MspInit+0x118>)
 80042cc:	f000 ff3c 	bl	8005148 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80042d0:	2200      	movs	r2, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	2027      	movs	r0, #39	@ 0x27
 80042d6:	f000 fafe 	bl	80048d6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042da:	2027      	movs	r0, #39	@ 0x27
 80042dc:	f000 fb17 	bl	800490e <HAL_NVIC_EnableIRQ>
}
 80042e0:	bf00      	nop
 80042e2:	3730      	adds	r7, #48	@ 0x30
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40004400 	.word	0x40004400
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40020000 	.word	0x40020000
 80042f4:	40004800 	.word	0x40004800
 80042f8:	40020c00 	.word	0x40020c00

080042fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <NMI_Handler+0x4>

08004304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <HardFault_Handler+0x4>

0800430c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <MemManage_Handler+0x4>

08004314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <BusFault_Handler+0x4>

0800431c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <UsageFault_Handler+0x4>

08004324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004352:	f000 f9a1 	bl	8004698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}

0800435a <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/


void EXTI0_IRQHandler(void)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800435e:	2001      	movs	r0, #1
 8004360:	f001 f8c0 	bl	80054e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}

08004368 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800436c:	2004      	movs	r0, #4
 800436e:	f001 f8b9 	bl	80054e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800437c:	4802      	ldr	r0, [pc, #8]	@ (8004388 <DMA1_Stream0_IRQHandler+0x10>)
 800437e:	f000 fc79 	bl	8004c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200003b8 	.word	0x200003b8

0800438c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004390:	4802      	ldr	r0, [pc, #8]	@ (800439c <DMA1_Stream3_IRQHandler+0x10>)
 8004392:	f000 fc6f 	bl	8004c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000358 	.word	0x20000358

080043a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80043a4:	4802      	ldr	r0, [pc, #8]	@ (80043b0 <SPI2_IRQHandler+0x10>)
 80043a6:	f003 f9ed 	bl	8007784 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200002c8 	.word	0x200002c8

080043b4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80043b8:	4802      	ldr	r0, [pc, #8]	@ (80043c4 <SPI3_IRQHandler+0x10>)
 80043ba:	f003 f9e3 	bl	8007784 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000310 	.word	0x20000310

080043c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043cc:	4802      	ldr	r0, [pc, #8]	@ (80043d8 <USART2_IRQHandler+0x10>)
 80043ce:	f005 fc53 	bl	8009c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000049c 	.word	0x2000049c

080043dc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80043e0:	4802      	ldr	r0, [pc, #8]	@ (80043ec <USART3_IRQHandler+0x10>)
 80043e2:	f005 fc49 	bl	8009c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200004e0 	.word	0x200004e0

080043f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return 1;
 80043f4:	2301      	movs	r3, #1
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <_kill>:

int _kill(int pid, int sig)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800440a:	f00b fb11 	bl	800fa30 <__errno>
 800440e:	4603      	mov	r3, r0
 8004410:	2216      	movs	r2, #22
 8004412:	601a      	str	r2, [r3, #0]
  return -1;
 8004414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_exit>:

void _exit (int status)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004428:	f04f 31ff 	mov.w	r1, #4294967295
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ffe7 	bl	8004400 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <_exit+0x12>

08004436 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e00a      	b.n	800445e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004448:	f3af 8000 	nop.w
 800444c:	4601      	mov	r1, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	60ba      	str	r2, [r7, #8]
 8004454:	b2ca      	uxtb	r2, r1
 8004456:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	3301      	adds	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	dbf0      	blt.n	8004448 <_read+0x12>
  }

  return len;
 8004466:	687b      	ldr	r3, [r7, #4]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e009      	b.n	8004496 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	60ba      	str	r2, [r7, #8]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3301      	adds	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	dbf1      	blt.n	8004482 <_write+0x12>
  }
  return len;
 800449e:	687b      	ldr	r3, [r7, #4]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_close>:

int _close(int file)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044d0:	605a      	str	r2, [r3, #4]
  return 0;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_isatty>:

int _isatty(int file)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044e8:	2301      	movs	r3, #1
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004518:	4a14      	ldr	r2, [pc, #80]	@ (800456c <_sbrk+0x5c>)
 800451a:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <_sbrk+0x60>)
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004524:	4b13      	ldr	r3, [pc, #76]	@ (8004574 <_sbrk+0x64>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800452c:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <_sbrk+0x64>)
 800452e:	4a12      	ldr	r2, [pc, #72]	@ (8004578 <_sbrk+0x68>)
 8004530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <_sbrk+0x64>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	429a      	cmp	r2, r3
 800453e:	d207      	bcs.n	8004550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004540:	f00b fa76 	bl	800fa30 <__errno>
 8004544:	4603      	mov	r3, r0
 8004546:	220c      	movs	r2, #12
 8004548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	e009      	b.n	8004564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <_sbrk+0x64>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004556:	4b07      	ldr	r3, [pc, #28]	@ (8004574 <_sbrk+0x64>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	4a05      	ldr	r2, [pc, #20]	@ (8004574 <_sbrk+0x64>)
 8004560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004562:	68fb      	ldr	r3, [r7, #12]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20020000 	.word	0x20020000
 8004570:	00000400 	.word	0x00000400
 8004574:	200057e4 	.word	0x200057e4
 8004578:	20005978 	.word	0x20005978

0800457c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <SystemInit+0x20>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004586:	4a05      	ldr	r2, [pc, #20]	@ (800459c <SystemInit+0x20>)
 8004588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800458c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80045a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045a4:	480d      	ldr	r0, [pc, #52]	@ (80045dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045a6:	490e      	ldr	r1, [pc, #56]	@ (80045e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045a8:	4a0e      	ldr	r2, [pc, #56]	@ (80045e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045ac:	e002      	b.n	80045b4 <LoopCopyDataInit>

080045ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045b2:	3304      	adds	r3, #4

080045b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b8:	d3f9      	bcc.n	80045ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ba:	4a0b      	ldr	r2, [pc, #44]	@ (80045e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045bc:	4c0b      	ldr	r4, [pc, #44]	@ (80045ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80045be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045c0:	e001      	b.n	80045c6 <LoopFillZerobss>

080045c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045c4:	3204      	adds	r2, #4

080045c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c8:	d3fb      	bcc.n	80045c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045ca:	f7ff ffd7 	bl	800457c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ce:	f00b fa35 	bl	800fa3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045d2:	f7fc fd1d 	bl	8001010 <main>
  bx  lr    
 80045d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045e0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80045e4:	08014bcc 	.word	0x08014bcc
  ldr r2, =_sbss
 80045e8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80045ec:	20005974 	.word	0x20005974

080045f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045f0:	e7fe      	b.n	80045f0 <ADC_IRQHandler>
	...

080045f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <HAL_Init+0x40>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004634 <HAL_Init+0x40>)
 80045fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004604:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <HAL_Init+0x40>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <HAL_Init+0x40>)
 800460a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800460e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <HAL_Init+0x40>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <HAL_Init+0x40>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461c:	2003      	movs	r0, #3
 800461e:	f000 f94f 	bl	80048c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004622:	200f      	movs	r0, #15
 8004624:	f000 f808 	bl	8004638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004628:	f7ff fb88 	bl	8003d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023c00 	.word	0x40023c00

08004638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004640:	4b12      	ldr	r3, [pc, #72]	@ (800468c <HAL_InitTick+0x54>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <HAL_InitTick+0x58>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f967 	bl	800492a <HAL_SYSTICK_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e00e      	b.n	8004684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	d80a      	bhi.n	8004682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800466c:	2200      	movs	r2, #0
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	f000 f92f 	bl	80048d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004678:	4a06      	ldr	r2, [pc, #24]	@ (8004694 <HAL_InitTick+0x5c>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000020 	.word	0x20000020
 8004690:	20000028 	.word	0x20000028
 8004694:	20000024 	.word	0x20000024

08004698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800469c:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_IncTick+0x20>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_IncTick+0x24>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	@ (80046bc <HAL_IncTick+0x24>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000028 	.word	0x20000028
 80046bc:	200057e8 	.word	0x200057e8

080046c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return uwTick;
 80046c4:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <HAL_GetTick+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	200057e8 	.word	0x200057e8

080046d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7ff ffee 	bl	80046c0 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d005      	beq.n	80046fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <HAL_Delay+0x44>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046fe:	bf00      	nop
 8004700:	f7ff ffde 	bl	80046c0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d8f7      	bhi.n	8004700 <HAL_Delay+0x28>
  {
  }
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000028 	.word	0x20000028

08004720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <__NVIC_SetPriorityGrouping+0x44>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800473c:	4013      	ands	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800474c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004752:	4a04      	ldr	r2, [pc, #16]	@ (8004764 <__NVIC_SetPriorityGrouping+0x44>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	60d3      	str	r3, [r2, #12]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__NVIC_GetPriorityGrouping+0x18>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 0307 	and.w	r3, r3, #7
}
 8004776:	4618      	mov	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	2b00      	cmp	r3, #0
 8004794:	db0b      	blt.n	80047ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	f003 021f 	and.w	r2, r3, #31
 800479c:	4907      	ldr	r1, [pc, #28]	@ (80047bc <__NVIC_EnableIRQ+0x38>)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	2001      	movs	r0, #1
 80047a6:	fa00 f202 	lsl.w	r2, r0, r2
 80047aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000e100 	.word	0xe000e100

080047c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	db0a      	blt.n	80047ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	490c      	ldr	r1, [pc, #48]	@ (800480c <__NVIC_SetPriority+0x4c>)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	440b      	add	r3, r1
 80047e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e8:	e00a      	b.n	8004800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4908      	ldr	r1, [pc, #32]	@ (8004810 <__NVIC_SetPriority+0x50>)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	3b04      	subs	r3, #4
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	440b      	add	r3, r1
 80047fe:	761a      	strb	r2, [r3, #24]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	e000e100 	.word	0xe000e100
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	@ 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f1c3 0307 	rsb	r3, r3, #7
 800482e:	2b04      	cmp	r3, #4
 8004830:	bf28      	it	cs
 8004832:	2304      	movcs	r3, #4
 8004834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3304      	adds	r3, #4
 800483a:	2b06      	cmp	r3, #6
 800483c:	d902      	bls.n	8004844 <NVIC_EncodePriority+0x30>
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3b03      	subs	r3, #3
 8004842:	e000      	b.n	8004846 <NVIC_EncodePriority+0x32>
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	401a      	ands	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800485c:	f04f 31ff 	mov.w	r1, #4294967295
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	43d9      	mvns	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800486c:	4313      	orrs	r3, r2
         );
}
 800486e:	4618      	mov	r0, r3
 8004870:	3724      	adds	r7, #36	@ 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800488c:	d301      	bcc.n	8004892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800488e:	2301      	movs	r3, #1
 8004890:	e00f      	b.n	80048b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004892:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <SysTick_Config+0x40>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800489a:	210f      	movs	r1, #15
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	f7ff ff8e 	bl	80047c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <SysTick_Config+0x40>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048aa:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <SysTick_Config+0x40>)
 80048ac:	2207      	movs	r2, #7
 80048ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	e000e010 	.word	0xe000e010

080048c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff29 	bl	8004720 <__NVIC_SetPriorityGrouping>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4603      	mov	r3, r0
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e8:	f7ff ff3e 	bl	8004768 <__NVIC_GetPriorityGrouping>
 80048ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff ff8e 	bl	8004814 <NVIC_EncodePriority>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff5d 	bl	80047c0 <__NVIC_SetPriority>
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff31 	bl	8004784 <__NVIC_EnableIRQ>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ffa2 	bl	800487c <SysTick_Config>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004950:	f7ff feb6 	bl	80046c0 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e099      	b.n	8004a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004980:	e00f      	b.n	80049a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004982:	f7ff fe9d 	bl	80046c0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b05      	cmp	r3, #5
 800498e:	d908      	bls.n	80049a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e078      	b.n	8004a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e8      	bne.n	8004982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4b38      	ldr	r3, [pc, #224]	@ (8004a9c <HAL_DMA_Init+0x158>)
 80049bc:	4013      	ands	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d107      	bne.n	8004a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	4313      	orrs	r3, r2
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d117      	bne.n	8004a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb01 	bl	8005050 <DMA_CheckFifoParam>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2240      	movs	r2, #64	@ 0x40
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a62:	2301      	movs	r3, #1
 8004a64:	e016      	b.n	8004a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fab8 	bl	8004fe4 <DMA_CalcBaseAndBitshift>
 8004a74:	4603      	mov	r3, r0
 8004a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	223f      	movs	r2, #63	@ 0x3f
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	f010803f 	.word	0xf010803f

08004aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_DMA_Start_IT+0x26>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e040      	b.n	8004b48 <HAL_DMA_Start_IT+0xa8>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d12f      	bne.n	8004b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fa4a 	bl	8004f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af8:	223f      	movs	r2, #63	@ 0x3f
 8004afa:	409a      	lsls	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0216 	orr.w	r2, r2, #22
 8004b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0208 	orr.w	r2, r2, #8
 8004b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e005      	b.n	8004b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
 8004b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b5e:	f7ff fdaf 	bl	80046c0 <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d008      	beq.n	8004b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2280      	movs	r2, #128	@ 0x80
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e052      	b.n	8004c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0216 	bic.w	r2, r2, #22
 8004b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <HAL_DMA_Abort+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0208 	bic.w	r2, r2, #8
 8004bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bd2:	e013      	b.n	8004bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bd4:	f7ff fd74 	bl	80046c0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d90c      	bls.n	8004bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2203      	movs	r2, #3
 8004bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e015      	b.n	8004c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e4      	bne.n	8004bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	223f      	movs	r2, #63	@ 0x3f
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d004      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2280      	movs	r2, #128	@ 0x80
 8004c48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e00c      	b.n	8004c68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2205      	movs	r2, #5
 8004c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c80:	4b8e      	ldr	r3, [pc, #568]	@ (8004ebc <HAL_DMA_IRQHandler+0x248>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a8e      	ldr	r2, [pc, #568]	@ (8004ec0 <HAL_DMA_IRQHandler+0x24c>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01a      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	2208      	movs	r2, #8
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	f043 0201 	orr.w	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d012      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d02:	2201      	movs	r2, #1
 8004d04:	409a      	lsls	r2, r3
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	f043 0202 	orr.w	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d012      	beq.n	8004d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d38:	2204      	movs	r2, #4
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d44:	f043 0204 	orr.w	r2, r3, #4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	2210      	movs	r2, #16
 8004d52:	409a      	lsls	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d043      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d03c      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6e:	2210      	movs	r2, #16
 8004d70:	409a      	lsls	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d108      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d024      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
 8004da2:	e01f      	b.n	8004de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
 8004db4:	e016      	b.n	8004de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d107      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0208 	bic.w	r2, r2, #8
 8004dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de8:	2220      	movs	r2, #32
 8004dea:	409a      	lsls	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 808f 	beq.w	8004f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8087 	beq.w	8004f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d136      	bne.n	8004e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0216 	bic.w	r2, r2, #22
 8004e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x1da>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0208 	bic.w	r2, r2, #8
 8004e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e62:	223f      	movs	r2, #63	@ 0x3f
 8004e64:	409a      	lsls	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d07e      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
        }
        return;
 8004e8a:	e079      	b.n	8004f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01d      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d031      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	e02c      	b.n	8004f14 <HAL_DMA_IRQHandler+0x2a0>
 8004eba:	bf00      	nop
 8004ebc:	20000020 	.word	0x20000020
 8004ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d023      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
 8004ed4:	e01e      	b.n	8004f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10f      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0210 	bic.w	r2, r2, #16
 8004ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d032      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d022      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2205      	movs	r2, #5
 8004f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d307      	bcc.n	8004f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f2      	bne.n	8004f40 <HAL_DMA_IRQHandler+0x2cc>
 8004f5a:	e000      	b.n	8004f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
 8004f7e:	e000      	b.n	8004f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f80:	bf00      	nop
    }
  }
}
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	d108      	bne.n	8004fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fc6:	e007      	b.n	8004fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	3b10      	subs	r3, #16
 8004ff4:	4a14      	ldr	r2, [pc, #80]	@ (8005048 <DMA_CalcBaseAndBitshift+0x64>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ffe:	4a13      	ldr	r2, [pc, #76]	@ (800504c <DMA_CalcBaseAndBitshift+0x68>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d909      	bls.n	8005026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	659a      	str	r2, [r3, #88]	@ 0x58
 8005024:	e007      	b.n	8005036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	aaaaaaab 	.word	0xaaaaaaab
 800504c:	08014684 	.word	0x08014684

08005050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d11f      	bne.n	80050aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d856      	bhi.n	800511e <DMA_CheckFifoParam+0xce>
 8005070:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <DMA_CheckFifoParam+0x28>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	0800509b 	.word	0x0800509b
 8005080:	08005089 	.word	0x08005089
 8005084:	0800511f 	.word	0x0800511f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d046      	beq.n	8005122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005098:	e043      	b.n	8005122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050a2:	d140      	bne.n	8005126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e03d      	b.n	8005126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b2:	d121      	bne.n	80050f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d837      	bhi.n	800512a <DMA_CheckFifoParam+0xda>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <DMA_CheckFifoParam+0x70>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050d7 	.word	0x080050d7
 80050c8:	080050d1 	.word	0x080050d1
 80050cc:	080050e9 	.word	0x080050e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e030      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d025      	beq.n	800512e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e6:	e022      	b.n	800512e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050f0:	d11f      	bne.n	8005132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050f6:	e01c      	b.n	8005132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d903      	bls.n	8005106 <DMA_CheckFifoParam+0xb6>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d003      	beq.n	800510c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005104:	e018      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
      break;
 800510a:	e015      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00e      	beq.n	8005136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
      break;
 800511c:	e00b      	b.n	8005136 <DMA_CheckFifoParam+0xe6>
      break;
 800511e:	bf00      	nop
 8005120:	e00a      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      break;
 8005122:	bf00      	nop
 8005124:	e008      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      break;
 8005126:	bf00      	nop
 8005128:	e006      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      break;
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      break;   
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
      break;
 8005136:	bf00      	nop
    }
  } 
  
  return status; 
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop

08005148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005148:	b480      	push	{r7}
 800514a:	b089      	sub	sp, #36	@ 0x24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e16b      	b.n	800543c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005164:	2201      	movs	r2, #1
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4013      	ands	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	429a      	cmp	r2, r3
 800517e:	f040 815a 	bne.w	8005436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d005      	beq.n	800519a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005196:	2b02      	cmp	r3, #2
 8005198:	d130      	bne.n	80051fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	2203      	movs	r2, #3
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051d0:	2201      	movs	r2, #1
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 0201 	and.w	r2, r3, #1
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b03      	cmp	r3, #3
 8005206:	d017      	beq.n	8005238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2203      	movs	r2, #3
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d123      	bne.n	800528c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	08da      	lsrs	r2, r3, #3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3208      	adds	r2, #8
 800524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	220f      	movs	r2, #15
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4313      	orrs	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	08da      	lsrs	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3208      	adds	r2, #8
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	2203      	movs	r2, #3
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0203 	and.w	r2, r3, #3
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80b4 	beq.w	8005436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	4b60      	ldr	r3, [pc, #384]	@ (8005454 <HAL_GPIO_Init+0x30c>)
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005454 <HAL_GPIO_Init+0x30c>)
 80052d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80052de:	4b5d      	ldr	r3, [pc, #372]	@ (8005454 <HAL_GPIO_Init+0x30c>)
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005458 <HAL_GPIO_Init+0x310>)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	089b      	lsrs	r3, r3, #2
 80052f0:	3302      	adds	r3, #2
 80052f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	220f      	movs	r2, #15
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a52      	ldr	r2, [pc, #328]	@ (800545c <HAL_GPIO_Init+0x314>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02b      	beq.n	800536e <HAL_GPIO_Init+0x226>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a51      	ldr	r2, [pc, #324]	@ (8005460 <HAL_GPIO_Init+0x318>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d025      	beq.n	800536a <HAL_GPIO_Init+0x222>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a50      	ldr	r2, [pc, #320]	@ (8005464 <HAL_GPIO_Init+0x31c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01f      	beq.n	8005366 <HAL_GPIO_Init+0x21e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a4f      	ldr	r2, [pc, #316]	@ (8005468 <HAL_GPIO_Init+0x320>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d019      	beq.n	8005362 <HAL_GPIO_Init+0x21a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a4e      	ldr	r2, [pc, #312]	@ (800546c <HAL_GPIO_Init+0x324>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_GPIO_Init+0x216>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a4d      	ldr	r2, [pc, #308]	@ (8005470 <HAL_GPIO_Init+0x328>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00d      	beq.n	800535a <HAL_GPIO_Init+0x212>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4c      	ldr	r2, [pc, #304]	@ (8005474 <HAL_GPIO_Init+0x32c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <HAL_GPIO_Init+0x20e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4b      	ldr	r2, [pc, #300]	@ (8005478 <HAL_GPIO_Init+0x330>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_GPIO_Init+0x20a>
 800534e:	2307      	movs	r3, #7
 8005350:	e00e      	b.n	8005370 <HAL_GPIO_Init+0x228>
 8005352:	2308      	movs	r3, #8
 8005354:	e00c      	b.n	8005370 <HAL_GPIO_Init+0x228>
 8005356:	2306      	movs	r3, #6
 8005358:	e00a      	b.n	8005370 <HAL_GPIO_Init+0x228>
 800535a:	2305      	movs	r3, #5
 800535c:	e008      	b.n	8005370 <HAL_GPIO_Init+0x228>
 800535e:	2304      	movs	r3, #4
 8005360:	e006      	b.n	8005370 <HAL_GPIO_Init+0x228>
 8005362:	2303      	movs	r3, #3
 8005364:	e004      	b.n	8005370 <HAL_GPIO_Init+0x228>
 8005366:	2302      	movs	r3, #2
 8005368:	e002      	b.n	8005370 <HAL_GPIO_Init+0x228>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_GPIO_Init+0x228>
 800536e:	2300      	movs	r3, #0
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	f002 0203 	and.w	r2, r2, #3
 8005376:	0092      	lsls	r2, r2, #2
 8005378:	4093      	lsls	r3, r2
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005380:	4935      	ldr	r1, [pc, #212]	@ (8005458 <HAL_GPIO_Init+0x310>)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	3302      	adds	r3, #2
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800538e:	4b3b      	ldr	r3, [pc, #236]	@ (800547c <HAL_GPIO_Init+0x334>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b2:	4a32      	ldr	r2, [pc, #200]	@ (800547c <HAL_GPIO_Init+0x334>)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053b8:	4b30      	ldr	r3, [pc, #192]	@ (800547c <HAL_GPIO_Init+0x334>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053dc:	4a27      	ldr	r2, [pc, #156]	@ (800547c <HAL_GPIO_Init+0x334>)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053e2:	4b26      	ldr	r3, [pc, #152]	@ (800547c <HAL_GPIO_Init+0x334>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005406:	4a1d      	ldr	r2, [pc, #116]	@ (800547c <HAL_GPIO_Init+0x334>)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800540c:	4b1b      	ldr	r3, [pc, #108]	@ (800547c <HAL_GPIO_Init+0x334>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005430:	4a12      	ldr	r2, [pc, #72]	@ (800547c <HAL_GPIO_Init+0x334>)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3301      	adds	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	f67f ae90 	bls.w	8005164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	3724      	adds	r7, #36	@ 0x24
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800
 8005458:	40013800 	.word	0x40013800
 800545c:	40020000 	.word	0x40020000
 8005460:	40020400 	.word	0x40020400
 8005464:	40020800 	.word	0x40020800
 8005468:	40020c00 	.word	0x40020c00
 800546c:	40021000 	.word	0x40021000
 8005470:	40021400 	.word	0x40021400
 8005474:	40021800 	.word	0x40021800
 8005478:	40021c00 	.word	0x40021c00
 800547c:	40013c00 	.word	0x40013c00

08005480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	e001      	b.n	80054a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
 80054bc:	4613      	mov	r3, r2
 80054be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c0:	787b      	ldrb	r3, [r7, #1]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054c6:	887a      	ldrh	r2, [r7, #2]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054cc:	e003      	b.n	80054d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ce:	887b      	ldrh	r3, [r7, #2]
 80054d0:	041a      	lsls	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	619a      	str	r2, [r3, #24]
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054ee:	4b08      	ldr	r3, [pc, #32]	@ (8005510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054fa:	4a05      	ldr	r2, [pc, #20]	@ (8005510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fc fb52 	bl	8001bac <HAL_GPIO_EXTI_Callback>
  }
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40013c00 	.word	0x40013c00

08005514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e12b      	b.n	800577e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe fc26 	bl	8003d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	@ 0x24
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005578:	f003 f97e 	bl	8008878 <HAL_RCC_GetPCLK1Freq>
 800557c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4a81      	ldr	r2, [pc, #516]	@ (8005788 <HAL_I2C_Init+0x274>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d807      	bhi.n	8005598 <HAL_I2C_Init+0x84>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a80      	ldr	r2, [pc, #512]	@ (800578c <HAL_I2C_Init+0x278>)
 800558c:	4293      	cmp	r3, r2
 800558e:	bf94      	ite	ls
 8005590:	2301      	movls	r3, #1
 8005592:	2300      	movhi	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e006      	b.n	80055a6 <HAL_I2C_Init+0x92>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a7d      	ldr	r2, [pc, #500]	@ (8005790 <HAL_I2C_Init+0x27c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	bf94      	ite	ls
 80055a0:	2301      	movls	r3, #1
 80055a2:	2300      	movhi	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0e7      	b.n	800577e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a78      	ldr	r2, [pc, #480]	@ (8005794 <HAL_I2C_Init+0x280>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	0c9b      	lsrs	r3, r3, #18
 80055b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005788 <HAL_I2C_Init+0x274>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d802      	bhi.n	80055e8 <HAL_I2C_Init+0xd4>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	3301      	adds	r3, #1
 80055e6:	e009      	b.n	80055fc <HAL_I2C_Init+0xe8>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	4a69      	ldr	r2, [pc, #420]	@ (8005798 <HAL_I2C_Init+0x284>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	099b      	lsrs	r3, r3, #6
 80055fa:	3301      	adds	r3, #1
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	430b      	orrs	r3, r1
 8005602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800560e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	495c      	ldr	r1, [pc, #368]	@ (8005788 <HAL_I2C_Init+0x274>)
 8005618:	428b      	cmp	r3, r1
 800561a:	d819      	bhi.n	8005650 <HAL_I2C_Init+0x13c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1e59      	subs	r1, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	fbb1 f3f3 	udiv	r3, r1, r3
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005630:	400b      	ands	r3, r1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_I2C_Init+0x138>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1e59      	subs	r1, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fbb1 f3f3 	udiv	r3, r1, r3
 8005644:	3301      	adds	r3, #1
 8005646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564a:	e051      	b.n	80056f0 <HAL_I2C_Init+0x1dc>
 800564c:	2304      	movs	r3, #4
 800564e:	e04f      	b.n	80056f0 <HAL_I2C_Init+0x1dc>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d111      	bne.n	800567c <HAL_I2C_Init+0x168>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1e58      	subs	r0, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	440b      	add	r3, r1
 8005666:	fbb0 f3f3 	udiv	r3, r0, r3
 800566a:	3301      	adds	r3, #1
 800566c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf0c      	ite	eq
 8005674:	2301      	moveq	r3, #1
 8005676:	2300      	movne	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e012      	b.n	80056a2 <HAL_I2C_Init+0x18e>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1e58      	subs	r0, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	0099      	lsls	r1, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005692:	3301      	adds	r3, #1
 8005694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_I2C_Init+0x196>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e022      	b.n	80056f0 <HAL_I2C_Init+0x1dc>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10e      	bne.n	80056d0 <HAL_I2C_Init+0x1bc>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1e58      	subs	r0, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6859      	ldr	r1, [r3, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	440b      	add	r3, r1
 80056c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c4:	3301      	adds	r3, #1
 80056c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ce:	e00f      	b.n	80056f0 <HAL_I2C_Init+0x1dc>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1e58      	subs	r0, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6859      	ldr	r1, [r3, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	0099      	lsls	r1, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056e6:	3301      	adds	r3, #1
 80056e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	6809      	ldr	r1, [r1, #0]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800571e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6911      	ldr	r1, [r2, #16]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68d2      	ldr	r2, [r2, #12]
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	430b      	orrs	r3, r1
 8005732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	000186a0 	.word	0x000186a0
 800578c:	001e847f 	.word	0x001e847f
 8005790:	003d08ff 	.word	0x003d08ff
 8005794:	431bde83 	.word	0x431bde83
 8005798:	10624dd3 	.word	0x10624dd3

0800579c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	461a      	mov	r2, r3
 80057a8:	460b      	mov	r3, r1
 80057aa:	817b      	strh	r3, [r7, #10]
 80057ac:	4613      	mov	r3, r2
 80057ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057b0:	f7fe ff86 	bl	80046c0 <HAL_GetTick>
 80057b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	f040 80e0 	bne.w	8005984 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2319      	movs	r3, #25
 80057ca:	2201      	movs	r2, #1
 80057cc:	4970      	ldr	r1, [pc, #448]	@ (8005990 <HAL_I2C_Master_Transmit+0x1f4>)
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f001 fa24 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057da:	2302      	movs	r3, #2
 80057dc:	e0d3      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_I2C_Master_Transmit+0x50>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e0cc      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ea>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d007      	beq.n	8005812 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2221      	movs	r2, #33	@ 0x21
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2210      	movs	r2, #16
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	893a      	ldrh	r2, [r7, #8]
 8005842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a50      	ldr	r2, [pc, #320]	@ (8005994 <HAL_I2C_Master_Transmit+0x1f8>)
 8005852:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005854:	8979      	ldrh	r1, [r7, #10]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	6a3a      	ldr	r2, [r7, #32]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 ff10 	bl	8006680 <I2C_MasterRequestWrite>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e08d      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005880:	e066      	b.n	8005950 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	6a39      	ldr	r1, [r7, #32]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f001 fa9e 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	2b04      	cmp	r3, #4
 8005898:	d107      	bne.n	80058aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e06b      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d11b      	bne.n	8005924 <HAL_I2C_Master_Transmit+0x188>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d017      	beq.n	8005924 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	6a39      	ldr	r1, [r7, #32]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f001 fa8e 	bl	8006e4a <I2C_WaitOnBTFFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	2b04      	cmp	r3, #4
 800593a:	d107      	bne.n	800594c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800594a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e01a      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	d194      	bne.n	8005882 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	00100002 	.word	0x00100002
 8005994:	ffff0000 	.word	0xffff0000

08005998 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	@ 0x30
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	461a      	mov	r2, r3
 80059a4:	460b      	mov	r3, r1
 80059a6:	817b      	strh	r3, [r7, #10]
 80059a8:	4613      	mov	r3, r2
 80059aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059ac:	f7fe fe88 	bl	80046c0 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	f040 820b 	bne.w	8005dd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2319      	movs	r3, #25
 80059c6:	2201      	movs	r2, #1
 80059c8:	497c      	ldr	r1, [pc, #496]	@ (8005bbc <HAL_I2C_Master_Receive+0x224>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f001 f926 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
 80059d8:	e1fe      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_I2C_Master_Receive+0x50>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e1f7      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d007      	beq.n	8005a0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2222      	movs	r2, #34	@ 0x22
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	893a      	ldrh	r2, [r7, #8]
 8005a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a5c      	ldr	r2, [pc, #368]	@ (8005bc0 <HAL_I2C_Master_Receive+0x228>)
 8005a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a50:	8979      	ldrh	r1, [r7, #10]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fe94 	bl	8006784 <I2C_MasterRequestRead>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e1b8      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d113      	bne.n	8005a96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	623b      	str	r3, [r7, #32]
 8005a82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e18c      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d11b      	bne.n	8005ad6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e16c      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d11b      	bne.n	8005b16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	e14c      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b3c:	e138      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	f200 80f1 	bhi.w	8005d2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d123      	bne.n	8005b98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f001 f9b9 	bl	8006ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e139      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b96:	e10b      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d14e      	bne.n	8005c3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4906      	ldr	r1, [pc, #24]	@ (8005bc4 <HAL_I2C_Master_Receive+0x22c>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f001 f836 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e10e      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
 8005bba:	bf00      	nop
 8005bbc:	00100002 	.word	0x00100002
 8005bc0:	ffff0000 	.word	0xffff0000
 8005bc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c3c:	e0b8      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	2200      	movs	r2, #0
 8005c46:	4966      	ldr	r1, [pc, #408]	@ (8005de0 <HAL_I2C_Master_Receive+0x448>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 ffe7 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0bf      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	494f      	ldr	r1, [pc, #316]	@ (8005de0 <HAL_I2C_Master_Receive+0x448>)
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 ffb9 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e091      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d28:	e042      	b.n	8005db0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f001 f8cc 	bl	8006ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e04c      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d118      	bne.n	8005db0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f47f aec2 	bne.w	8005b3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e000      	b.n	8005dd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
  }
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	00010004 	.word	0x00010004

08005de4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	817b      	strh	r3, [r7, #10]
 8005df6:	460b      	mov	r3, r1
 8005df8:	813b      	strh	r3, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dfe:	f7fe fc5f 	bl	80046c0 <HAL_GetTick>
 8005e02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	f040 80d9 	bne.w	8005fc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	2319      	movs	r3, #25
 8005e18:	2201      	movs	r2, #1
 8005e1a:	496d      	ldr	r1, [pc, #436]	@ (8005fd0 <HAL_I2C_Mem_Write+0x1ec>)
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fefd 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0cc      	b.n	8005fc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_Mem_Write+0x56>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0c5      	b.n	8005fc6 <HAL_I2C_Mem_Write+0x1e2>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d007      	beq.n	8005e60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2221      	movs	r2, #33	@ 0x21
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2240      	movs	r2, #64	@ 0x40
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a4d      	ldr	r2, [pc, #308]	@ (8005fd4 <HAL_I2C_Mem_Write+0x1f0>)
 8005ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ea2:	88f8      	ldrh	r0, [r7, #6]
 8005ea4:	893a      	ldrh	r2, [r7, #8]
 8005ea6:	8979      	ldrh	r1, [r7, #10]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fd34 	bl	8006920 <I2C_RequestMemoryWrite>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d052      	beq.n	8005f64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e081      	b.n	8005fc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 ff7e 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d107      	bne.n	8005eea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e06b      	b.n	8005fc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d11b      	bne.n	8005f64 <HAL_I2C_Mem_Write+0x180>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d017      	beq.n	8005f64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1aa      	bne.n	8005ec2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 ff6a 	bl	8006e4a <I2C_WaitOnBTFFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d107      	bne.n	8005f94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e016      	b.n	8005fc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	00100002 	.word	0x00100002
 8005fd4:	ffff0000 	.word	0xffff0000

08005fd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08c      	sub	sp, #48	@ 0x30
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	817b      	strh	r3, [r7, #10]
 8005fea:	460b      	mov	r3, r1
 8005fec:	813b      	strh	r3, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ff2:	f7fe fb65 	bl	80046c0 <HAL_GetTick>
 8005ff6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b20      	cmp	r3, #32
 8006002:	f040 8208 	bne.w	8006416 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	2319      	movs	r3, #25
 800600c:	2201      	movs	r2, #1
 800600e:	497b      	ldr	r1, [pc, #492]	@ (80061fc <HAL_I2C_Mem_Read+0x224>)
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fe03 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
 800601e:	e1fb      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_I2C_Mem_Read+0x56>
 800602a:	2302      	movs	r3, #2
 800602c:	e1f4      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d007      	beq.n	8006054 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2222      	movs	r2, #34	@ 0x22
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2240      	movs	r2, #64	@ 0x40
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a5b      	ldr	r2, [pc, #364]	@ (8006200 <HAL_I2C_Mem_Read+0x228>)
 8006094:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006096:	88f8      	ldrh	r0, [r7, #6]
 8006098:	893a      	ldrh	r2, [r7, #8]
 800609a:	8979      	ldrh	r1, [r7, #10]
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4603      	mov	r3, r0
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fcd0 	bl	8006a4c <I2C_RequestMemoryRead>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e1b0      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d113      	bne.n	80060e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060be:	2300      	movs	r3, #0
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e184      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d11b      	bne.n	8006126 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e164      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612a:	2b02      	cmp	r3, #2
 800612c:	d11b      	bne.n	8006166 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	e144      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800617c:	e138      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006182:	2b03      	cmp	r3, #3
 8006184:	f200 80f1 	bhi.w	800636a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618c:	2b01      	cmp	r3, #1
 800618e:	d123      	bne.n	80061d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006192:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fe99 	bl	8006ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e139      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061d6:	e10b      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d14e      	bne.n	800627e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	2200      	movs	r2, #0
 80061e8:	4906      	ldr	r1, [pc, #24]	@ (8006204 <HAL_I2C_Mem_Read+0x22c>)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fd16 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e10e      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
 80061fa:	bf00      	nop
 80061fc:	00100002 	.word	0x00100002
 8006200:	ffff0000 	.word	0xffff0000
 8006204:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800627c:	e0b8      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	2200      	movs	r2, #0
 8006286:	4966      	ldr	r1, [pc, #408]	@ (8006420 <HAL_I2C_Mem_Read+0x448>)
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fcc7 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0bf      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	2200      	movs	r2, #0
 80062e2:	494f      	ldr	r1, [pc, #316]	@ (8006420 <HAL_I2C_Mem_Read+0x448>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fc99 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e091      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006368:	e042      	b.n	80063f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fdac 	bl	8006ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e04c      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d118      	bne.n	80063f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f47f aec2 	bne.w	800617e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	e000      	b.n	8006418 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006416:	2302      	movs	r3, #2
  }
}
 8006418:	4618      	mov	r0, r3
 800641a:	3728      	adds	r7, #40	@ 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	00010004 	.word	0x00010004

08006424 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	@ 0x28
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	460b      	mov	r3, r1
 8006432:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006434:	f7fe f944 	bl	80046c0 <HAL_GetTick>
 8006438:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	f040 8111 	bne.w	800666e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2319      	movs	r3, #25
 8006452:	2201      	movs	r2, #1
 8006454:	4988      	ldr	r1, [pc, #544]	@ (8006678 <HAL_I2C_IsDeviceReady+0x254>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fbe0 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006462:	2302      	movs	r3, #2
 8006464:	e104      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_I2C_IsDeviceReady+0x50>
 8006470:	2302      	movs	r3, #2
 8006472:	e0fd      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d007      	beq.n	800649a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2224      	movs	r2, #36	@ 0x24
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a70      	ldr	r2, [pc, #448]	@ (800667c <HAL_I2C_IsDeviceReady+0x258>)
 80064bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fb9e 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064f4:	d103      	bne.n	80064fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e0b6      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006510:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006512:	f7fe f8d5 	bl	80046c0 <HAL_GetTick>
 8006516:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006546:	e025      	b.n	8006594 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006548:	f7fe f8ba 	bl	80046c0 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d302      	bcc.n	800655e <HAL_I2C_IsDeviceReady+0x13a>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22a0      	movs	r2, #160	@ 0xa0
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b02      	cmp	r3, #2
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2ba0      	cmp	r3, #160	@ 0xa0
 800659e:	d005      	beq.n	80065ac <HAL_I2C_IsDeviceReady+0x188>
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <HAL_I2C_IsDeviceReady+0x188>
 80065a6:	7dbb      	ldrb	r3, [r7, #22]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0cd      	beq.n	8006548 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d129      	bne.n	8006616 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2319      	movs	r3, #25
 80065ee:	2201      	movs	r2, #1
 80065f0:	4921      	ldr	r1, [pc, #132]	@ (8006678 <HAL_I2C_IsDeviceReady+0x254>)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fb12 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e036      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e02c      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006624:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800662e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	2319      	movs	r3, #25
 8006636:	2201      	movs	r2, #1
 8006638:	490f      	ldr	r1, [pc, #60]	@ (8006678 <HAL_I2C_IsDeviceReady+0x254>)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 faee 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e012      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	3301      	adds	r3, #1
 800664e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	f4ff af32 	bcc.w	80064be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	00100002 	.word	0x00100002
 800667c:	ffff0000 	.word	0xffff0000

08006680 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	460b      	mov	r3, r1
 800668e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d006      	beq.n	80066aa <I2C_MasterRequestWrite+0x2a>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d003      	beq.n	80066aa <I2C_MasterRequestWrite+0x2a>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066a8:	d108      	bne.n	80066bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e00b      	b.n	80066d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c0:	2b12      	cmp	r3, #18
 80066c2:	d107      	bne.n	80066d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fa9b 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fa:	d103      	bne.n	8006704 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e035      	b.n	8006774 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006710:	d108      	bne.n	8006724 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006720:	611a      	str	r2, [r3, #16]
 8006722:	e01b      	b.n	800675c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006724:	897b      	ldrh	r3, [r7, #10]
 8006726:	11db      	asrs	r3, r3, #7
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f063 030f 	orn	r3, r3, #15
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	490e      	ldr	r1, [pc, #56]	@ (800677c <I2C_MasterRequestWrite+0xfc>)
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fac1 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e010      	b.n	8006774 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006752:	897b      	ldrh	r3, [r7, #10]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4907      	ldr	r1, [pc, #28]	@ (8006780 <I2C_MasterRequestWrite+0x100>)
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fab1 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	00010008 	.word	0x00010008
 8006780:	00010002 	.word	0x00010002

08006784 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	460b      	mov	r3, r1
 8006792:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006798:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d006      	beq.n	80067be <I2C_MasterRequestRead+0x3a>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d003      	beq.n	80067be <I2C_MasterRequestRead+0x3a>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067bc:	d108      	bne.n	80067d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e00b      	b.n	80067e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	2b11      	cmp	r3, #17
 80067d6:	d107      	bne.n	80067e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fa11 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680e:	d103      	bne.n	8006818 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006816:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e079      	b.n	8006910 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006824:	d108      	bne.n	8006838 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	611a      	str	r2, [r3, #16]
 8006836:	e05f      	b.n	80068f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006838:	897b      	ldrh	r3, [r7, #10]
 800683a:	11db      	asrs	r3, r3, #7
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0306 	and.w	r3, r3, #6
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f063 030f 	orn	r3, r3, #15
 8006848:	b2da      	uxtb	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4930      	ldr	r1, [pc, #192]	@ (8006918 <I2C_MasterRequestRead+0x194>)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fa37 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e054      	b.n	8006910 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006866:	897b      	ldrh	r3, [r7, #10]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4929      	ldr	r1, [pc, #164]	@ (800691c <I2C_MasterRequestRead+0x198>)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fa27 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e044      	b.n	8006910 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f9af 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00d      	beq.n	80068e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	d103      	bne.n	80068dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e017      	b.n	8006910 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80068e0:	897b      	ldrh	r3, [r7, #10]
 80068e2:	11db      	asrs	r3, r3, #7
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f003 0306 	and.w	r3, r3, #6
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f063 030e 	orn	r3, r3, #14
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4907      	ldr	r1, [pc, #28]	@ (800691c <I2C_MasterRequestRead+0x198>)
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f9e3 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	00010008 	.word	0x00010008
 800691c:	00010002 	.word	0x00010002

08006920 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	4608      	mov	r0, r1
 800692a:	4611      	mov	r1, r2
 800692c:	461a      	mov	r2, r3
 800692e:	4603      	mov	r3, r0
 8006930:	817b      	strh	r3, [r7, #10]
 8006932:	460b      	mov	r3, r1
 8006934:	813b      	strh	r3, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	2200      	movs	r2, #0
 8006952:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f960 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00d      	beq.n	800697e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006970:	d103      	bne.n	800697a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006978:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e05f      	b.n	8006a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800697e:	897b      	ldrh	r3, [r7, #10]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800698c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	492d      	ldr	r1, [pc, #180]	@ (8006a48 <I2C_RequestMemoryWrite+0x128>)
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f998 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e04c      	b.n	8006a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069bc:	6a39      	ldr	r1, [r7, #32]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa02 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d107      	bne.n	80069e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e02b      	b.n	8006a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d105      	bne.n	80069f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069ec:	893b      	ldrh	r3, [r7, #8]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	611a      	str	r2, [r3, #16]
 80069f6:	e021      	b.n	8006a3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069f8:	893b      	ldrh	r3, [r7, #8]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	6a39      	ldr	r1, [r7, #32]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f9dc 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d107      	bne.n	8006a2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e005      	b.n	8006a3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a32:	893b      	ldrh	r3, [r7, #8]
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	00010002 	.word	0x00010002

08006a4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	817b      	strh	r3, [r7, #10]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	813b      	strh	r3, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f8c2 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00d      	beq.n	8006aba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aac:	d103      	bne.n	8006ab6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e0aa      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aba:	897b      	ldrh	r3, [r7, #10]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ac8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	6a3a      	ldr	r2, [r7, #32]
 8006ace:	4952      	ldr	r1, [pc, #328]	@ (8006c18 <I2C_RequestMemoryRead+0x1cc>)
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f8fa 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e097      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af8:	6a39      	ldr	r1, [r7, #32]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f964 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d107      	bne.n	8006b1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e076      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b28:	893b      	ldrh	r3, [r7, #8]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	611a      	str	r2, [r3, #16]
 8006b32:	e021      	b.n	8006b78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b34:	893b      	ldrh	r3, [r7, #8]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b44:	6a39      	ldr	r1, [r7, #32]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f93e 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00d      	beq.n	8006b6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d107      	bne.n	8006b6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e050      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6e:	893b      	ldrh	r3, [r7, #8]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7a:	6a39      	ldr	r1, [r7, #32]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f923 	bl	8006dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d107      	bne.n	8006ba0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e035      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f82b 	bl	8006c1c <I2C_WaitOnFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bda:	d103      	bne.n	8006be4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006be2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e013      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006be8:	897b      	ldrh	r3, [r7, #10]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	6a3a      	ldr	r2, [r7, #32]
 8006bfc:	4906      	ldr	r1, [pc, #24]	@ (8006c18 <I2C_RequestMemoryRead+0x1cc>)
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f863 	bl	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	00010002 	.word	0x00010002

08006c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c2c:	e025      	b.n	8006c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d021      	beq.n	8006c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fd fd43 	bl	80046c0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d116      	bne.n	8006c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f043 0220 	orr.w	r2, r3, #32
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e023      	b.n	8006cc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10d      	bne.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	43da      	mvns	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bf0c      	ite	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	2300      	movne	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	e00c      	b.n	8006cba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	43da      	mvns	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bf0c      	ite	eq
 8006cb2:	2301      	moveq	r3, #1
 8006cb4:	2300      	movne	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d0b6      	beq.n	8006c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cd8:	e051      	b.n	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce8:	d123      	bne.n	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	f043 0204 	orr.w	r2, r3, #4
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e046      	b.n	8006dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d021      	beq.n	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3a:	f7fd fcc1 	bl	80046c0 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d302      	bcc.n	8006d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d116      	bne.n	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e020      	b.n	8006dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	0c1b      	lsrs	r3, r3, #16
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d10c      	bne.n	8006da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	43da      	mvns	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4013      	ands	r3, r2
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf14      	ite	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	2300      	moveq	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	e00b      	b.n	8006dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	43da      	mvns	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4013      	ands	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d18d      	bne.n	8006cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dd4:	e02d      	b.n	8006e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8ce 	bl	8006f78 <I2C_IsAcknowledgeFailed>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e02d      	b.n	8006e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d021      	beq.n	8006e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fd fc67 	bl	80046c0 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d116      	bne.n	8006e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e007      	b.n	8006e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3c:	2b80      	cmp	r3, #128	@ 0x80
 8006e3e:	d1ca      	bne.n	8006dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e56:	e02d      	b.n	8006eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f88d 	bl	8006f78 <I2C_IsAcknowledgeFailed>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e02d      	b.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d021      	beq.n	8006eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e70:	f7fd fc26 	bl	80046c0 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d302      	bcc.n	8006e86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d116      	bne.n	8006eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea0:	f043 0220 	orr.w	r2, r3, #32
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e007      	b.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d1ca      	bne.n	8006e58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ed8:	e042      	b.n	8006f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b10      	cmp	r3, #16
 8006ee6:	d119      	bne.n	8006f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0210 	mvn.w	r2, #16
 8006ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e029      	b.n	8006f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1c:	f7fd fbd0 	bl	80046c0 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4c:	f043 0220 	orr.w	r2, r3, #32
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e007      	b.n	8006f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f6a:	2b40      	cmp	r3, #64	@ 0x40
 8006f6c:	d1b5      	bne.n	8006eda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8e:	d11b      	bne.n	8006fc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb4:	f043 0204 	orr.w	r2, r3, #4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
	...

08006fd8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e128      	b.n	800723c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a90      	ldr	r2, [pc, #576]	@ (8007244 <HAL_I2S_Init+0x26c>)
 8007002:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fc ff3d 	bl	8003e84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007020:	f023 030f 	bic.w	r3, r3, #15
 8007024:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2202      	movs	r2, #2
 800702c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d060      	beq.n	80070f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800703e:	2310      	movs	r3, #16
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e001      	b.n	8007048 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007044:	2320      	movs	r3, #32
 8007046:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b20      	cmp	r3, #32
 800704e:	d802      	bhi.n	8007056 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007056:	2001      	movs	r0, #1
 8007058:	f001 fd18 	bl	8008a8c <HAL_RCCEx_GetPeriphCLKFreq>
 800705c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007066:	d125      	bne.n	80070b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d010      	beq.n	8007092 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	fbb2 f2f3 	udiv	r2, r2, r3
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	3305      	adds	r3, #5
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	e01f      	b.n	80070d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	fbb2 f2f3 	udiv	r2, r2, r3
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	3305      	adds	r3, #5
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e00e      	b.n	80070d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	461a      	mov	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	3305      	adds	r3, #5
 80070d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007248 <HAL_I2S_Init+0x270>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	08db      	lsrs	r3, r3, #3
 80070dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	e003      	b.n	8007100 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80070f8:	2302      	movs	r3, #2
 80070fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d902      	bls.n	800710c <HAL_I2S_Init+0x134>
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2bff      	cmp	r3, #255	@ 0xff
 800710a:	d907      	bls.n	800711c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007110:	f043 0210 	orr.w	r2, r3, #16
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e08f      	b.n	800723c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	ea42 0103 	orr.w	r1, r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	430a      	orrs	r2, r1
 800712e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800713a:	f023 030f 	bic.w	r3, r3, #15
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6851      	ldr	r1, [r2, #4]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6892      	ldr	r2, [r2, #8]
 8007146:	4311      	orrs	r1, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68d2      	ldr	r2, [r2, #12]
 800714c:	4311      	orrs	r1, r2
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6992      	ldr	r2, [r2, #24]
 8007152:	430a      	orrs	r2, r1
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d161      	bne.n	800722c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a38      	ldr	r2, [pc, #224]	@ (800724c <HAL_I2S_Init+0x274>)
 800716c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a37      	ldr	r2, [pc, #220]	@ (8007250 <HAL_I2S_Init+0x278>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d101      	bne.n	800717c <HAL_I2S_Init+0x1a4>
 8007178:	4b36      	ldr	r3, [pc, #216]	@ (8007254 <HAL_I2S_Init+0x27c>)
 800717a:	e001      	b.n	8007180 <HAL_I2S_Init+0x1a8>
 800717c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	4932      	ldr	r1, [pc, #200]	@ (8007250 <HAL_I2S_Init+0x278>)
 8007188:	428a      	cmp	r2, r1
 800718a:	d101      	bne.n	8007190 <HAL_I2S_Init+0x1b8>
 800718c:	4a31      	ldr	r2, [pc, #196]	@ (8007254 <HAL_I2S_Init+0x27c>)
 800718e:	e001      	b.n	8007194 <HAL_I2S_Init+0x1bc>
 8007190:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8007194:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8007198:	f023 030f 	bic.w	r3, r3, #15
 800719c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007250 <HAL_I2S_Init+0x278>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d101      	bne.n	80071ac <HAL_I2S_Init+0x1d4>
 80071a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007254 <HAL_I2S_Init+0x27c>)
 80071aa:	e001      	b.n	80071b0 <HAL_I2S_Init+0x1d8>
 80071ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071b0:	2202      	movs	r2, #2
 80071b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a25      	ldr	r2, [pc, #148]	@ (8007250 <HAL_I2S_Init+0x278>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d101      	bne.n	80071c2 <HAL_I2S_Init+0x1ea>
 80071be:	4b25      	ldr	r3, [pc, #148]	@ (8007254 <HAL_I2S_Init+0x27c>)
 80071c0:	e001      	b.n	80071c6 <HAL_I2S_Init+0x1ee>
 80071c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d2:	d003      	beq.n	80071dc <HAL_I2S_Init+0x204>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80071dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	e001      	b.n	80071e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007206:	4313      	orrs	r3, r2
 8007208:	b29a      	uxth	r2, r3
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	4313      	orrs	r3, r2
 800720e:	b29b      	uxth	r3, r3
 8007210:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007214:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a0d      	ldr	r2, [pc, #52]	@ (8007250 <HAL_I2S_Init+0x278>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d101      	bne.n	8007224 <HAL_I2S_Init+0x24c>
 8007220:	4b0c      	ldr	r3, [pc, #48]	@ (8007254 <HAL_I2S_Init+0x27c>)
 8007222:	e001      	b.n	8007228 <HAL_I2S_Init+0x250>
 8007224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007228:	897a      	ldrh	r2, [r7, #10]
 800722a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	0800795d 	.word	0x0800795d
 8007248:	cccccccd 	.word	0xcccccccd
 800724c:	08007ae5 	.word	0x08007ae5
 8007250:	40003800 	.word	0x40003800
 8007254:	40003400 	.word	0x40003400

08007258 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_I2S_Receive_DMA+0x1a>
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e0a1      	b.n	80073ba <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_I2S_Receive_DMA+0x2e>
 8007282:	2302      	movs	r3, #2
 8007284:	e099      	b.n	80073ba <HAL_I2S_Receive_DMA+0x162>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b01      	cmp	r3, #1
 8007298:	d005      	beq.n	80072a6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 80072a2:	2302      	movs	r3, #2
 80072a4:	e089      	b.n	80073ba <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2204      	movs	r2, #4
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d002      	beq.n	80072d2 <HAL_I2S_Receive_DMA+0x7a>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d10a      	bne.n	80072e8 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80072dc:	88fb      	ldrh	r3, [r7, #6]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	865a      	strh	r2, [r3, #50]	@ 0x32
 80072e6:	e005      	b.n	80072f4 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f8:	4a32      	ldr	r2, [pc, #200]	@ (80073c4 <HAL_I2S_Receive_DMA+0x16c>)
 80072fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007300:	4a31      	ldr	r2, [pc, #196]	@ (80073c8 <HAL_I2S_Receive_DMA+0x170>)
 8007302:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	4a30      	ldr	r2, [pc, #192]	@ (80073cc <HAL_I2S_Receive_DMA+0x174>)
 800730a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800731a:	d10a      	bne.n	8007332 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	4619      	mov	r1, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007348:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800734a:	f7fd fba9 	bl	8004aa0 <HAL_DMA_Start_IT>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00f      	beq.n	8007374 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007358:	f043 0208 	orr.w	r2, r3, #8
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e022      	b.n	80073ba <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007390:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d107      	bne.n	80073b0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	0800783b 	.word	0x0800783b
 80073c8:	080077f9 	.word	0x080077f9
 80073cc:	08007857 	.word	0x08007857

080073d0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e4:	d004      	beq.n	80073f0 <HAL_I2S_DMAStop+0x20>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 80d1 	bne.w	8007592 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00f      	beq.n	8007418 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fd fba7 	bl	8004b50 <HAL_DMA_Abort>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740c:	f043 0208 	orr.w	r2, r3, #8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007418:	2364      	movs	r3, #100	@ 0x64
 800741a:	2201      	movs	r2, #1
 800741c:	2102      	movs	r1, #2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb26 	bl	8007a70 <I2S_WaitFlagStateUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742e:	f043 0201 	orr.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8007442:	2364      	movs	r3, #100	@ 0x64
 8007444:	2200      	movs	r2, #0
 8007446:	2180      	movs	r1, #128	@ 0x80
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fb11 	bl	8007a70 <I2S_WaitFlagStateUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007458:	f043 0201 	orr.w	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69da      	ldr	r2, [r3, #28]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800747a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0202 	bic.w	r2, r2, #2
 8007498:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	f040 8165 	bne.w	8007772 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00f      	beq.n	80074d0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fd fb4b 	bl	8004b50 <HAL_DMA_Abort>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c4:	f043 0208 	orr.w	r2, r3, #8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a8a      	ldr	r2, [pc, #552]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d101      	bne.n	80074de <HAL_I2S_DMAStop+0x10e>
 80074da:	4b8a      	ldr	r3, [pc, #552]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80074dc:	e001      	b.n	80074e2 <HAL_I2S_DMAStop+0x112>
 80074de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4985      	ldr	r1, [pc, #532]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 80074ea:	428b      	cmp	r3, r1
 80074ec:	d101      	bne.n	80074f2 <HAL_I2S_DMAStop+0x122>
 80074ee:	4b85      	ldr	r3, [pc, #532]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80074f0:	e001      	b.n	80074f6 <HAL_I2S_DMAStop+0x126>
 80074f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074fa:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a7e      	ldr	r2, [pc, #504]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d101      	bne.n	800750e <HAL_I2S_DMAStop+0x13e>
 800750a:	4b7e      	ldr	r3, [pc, #504]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 800750c:	e001      	b.n	8007512 <HAL_I2S_DMAStop+0x142>
 800750e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a79      	ldr	r2, [pc, #484]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <HAL_I2S_DMAStop+0x154>
 8007520:	4b78      	ldr	r3, [pc, #480]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 8007522:	e001      	b.n	8007528 <HAL_I2S_DMAStop+0x158>
 8007524:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	613b      	str	r3, [r7, #16]
 800752c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a73      	ldr	r2, [pc, #460]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d101      	bne.n	800753c <HAL_I2S_DMAStop+0x16c>
 8007538:	4b72      	ldr	r3, [pc, #456]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 800753a:	e001      	b.n	8007540 <HAL_I2S_DMAStop+0x170>
 800753c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	496e      	ldr	r1, [pc, #440]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 8007548:	428b      	cmp	r3, r1
 800754a:	d101      	bne.n	8007550 <HAL_I2S_DMAStop+0x180>
 800754c:	4b6d      	ldr	r3, [pc, #436]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 800754e:	e001      	b.n	8007554 <HAL_I2S_DMAStop+0x184>
 8007550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10c      	bne.n	800757c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007566:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800757a:	e0fa      	b.n	8007772 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a5f      	ldr	r2, [pc, #380]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d101      	bne.n	800758a <HAL_I2S_DMAStop+0x1ba>
 8007586:	4b5f      	ldr	r3, [pc, #380]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 8007588:	e001      	b.n	800758e <HAL_I2S_DMAStop+0x1be>
 800758a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800758e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007590:	e0ef      	b.n	8007772 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800759a:	d005      	beq.n	80075a8 <HAL_I2S_DMAStop+0x1d8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a4:	f040 80e5 	bne.w	8007772 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00f      	beq.n	80075d0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fd facb 	bl	8004b50 <HAL_DMA_Abort>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c4:	f043 0208 	orr.w	r2, r3, #8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b05      	cmp	r3, #5
 80075da:	f040 809a 	bne.w	8007712 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00f      	beq.n	8007606 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fd fab0 	bl	8004b50 <HAL_DMA_Abort>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fa:	f043 0208 	orr.w	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8007606:	f7fd f85b 	bl	80046c0 <HAL_GetTick>
 800760a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800760c:	e012      	b.n	8007634 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800760e:	f7fd f857 	bl	80046c0 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b64      	cmp	r3, #100	@ 0x64
 800761a:	d90b      	bls.n	8007634 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007620:	f043 0201 	orr.w	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a31      	ldr	r2, [pc, #196]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <HAL_I2S_DMAStop+0x272>
 800763e:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 8007640:	e001      	b.n	8007646 <HAL_I2S_DMAStop+0x276>
 8007642:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d1de      	bne.n	800760e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007650:	e012      	b.n	8007678 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8007652:	f7fd f835 	bl	80046c0 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b64      	cmp	r3, #100	@ 0x64
 800765e:	d90b      	bls.n	8007678 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a20      	ldr	r2, [pc, #128]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d101      	bne.n	8007686 <HAL_I2S_DMAStop+0x2b6>
 8007682:	4b20      	ldr	r3, [pc, #128]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 8007684:	e001      	b.n	800768a <HAL_I2S_DMAStop+0x2ba>
 8007686:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007690:	2b80      	cmp	r3, #128	@ 0x80
 8007692:	d0de      	beq.n	8007652 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a19      	ldr	r2, [pc, #100]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d101      	bne.n	80076a2 <HAL_I2S_DMAStop+0x2d2>
 800769e:	4b19      	ldr	r3, [pc, #100]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80076a0:	e001      	b.n	80076a6 <HAL_I2S_DMAStop+0x2d6>
 80076a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4914      	ldr	r1, [pc, #80]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 80076ae:	428b      	cmp	r3, r1
 80076b0:	d101      	bne.n	80076b6 <HAL_I2S_DMAStop+0x2e6>
 80076b2:	4b14      	ldr	r3, [pc, #80]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80076b4:	e001      	b.n	80076ba <HAL_I2S_DMAStop+0x2ea>
 80076b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076be:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d101      	bne.n	80076d2 <HAL_I2S_DMAStop+0x302>
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80076d0:	e001      	b.n	80076d6 <HAL_I2S_DMAStop+0x306>
 80076d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a07      	ldr	r2, [pc, #28]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d101      	bne.n	80076ea <HAL_I2S_DMAStop+0x31a>
 80076e6:	4b07      	ldr	r3, [pc, #28]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80076e8:	e001      	b.n	80076ee <HAL_I2S_DMAStop+0x31e>
 80076ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4902      	ldr	r1, [pc, #8]	@ (8007700 <HAL_I2S_DMAStop+0x330>)
 80076f6:	428b      	cmp	r3, r1
 80076f8:	d106      	bne.n	8007708 <HAL_I2S_DMAStop+0x338>
 80076fa:	4b02      	ldr	r3, [pc, #8]	@ (8007704 <HAL_I2S_DMAStop+0x334>)
 80076fc:	e006      	b.n	800770c <HAL_I2S_DMAStop+0x33c>
 80076fe:	bf00      	nop
 8007700:	40003800 	.word	0x40003800
 8007704:	40003400 	.word	0x40003400
 8007708:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800770c:	f022 0202 	bic.w	r2, r2, #2
 8007710:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007720:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007722:	2300      	movs	r3, #0
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0201 	bic.w	r2, r2, #1
 8007746:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007750:	d10c      	bne.n	800776c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	77fb      	strb	r3, [r7, #31]
 800776a:	e002      	b.n	8007772 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800777a:	7ffb      	ldrb	r3, [r7, #31]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d2:	b2db      	uxtb	r3, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_I2S_GetError>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval I2S Error Code
  */
uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  return hi2s->ErrorCode;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10e      	bne.n	800782c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0201 	bic.w	r2, r2, #1
 800781c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7fa fc8b 	bl	8002148 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7fa fcd7 	bl	80021fc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0203 	bic.w	r2, r2, #3
 8007872:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788c:	f043 0208 	orr.w	r2, r3, #8
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff ff8b 	bl	80077b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	881a      	ldrh	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ba:	1c9a      	adds	r2, r3, #2
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10e      	bne.n	80078f6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80078e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff53 	bl	800779c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	b292      	uxth	r2, r2
 8007912:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	1c9a      	adds	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10e      	bne.n	8007954 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007944:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fa fbfa 	bl	8002148 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b04      	cmp	r3, #4
 8007976:	d13a      	bne.n	80079ee <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b01      	cmp	r3, #1
 8007980:	d109      	bne.n	8007996 <I2S_IRQHandler+0x3a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798c:	2b40      	cmp	r3, #64	@ 0x40
 800798e:	d102      	bne.n	8007996 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ffb4 	bl	80078fe <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799c:	2b40      	cmp	r3, #64	@ 0x40
 800799e:	d126      	bne.n	80079ee <I2S_IRQHandler+0x92>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d11f      	bne.n	80079ee <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80079bc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e0:	f043 0202 	orr.w	r2, r3, #2
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fee1 	bl	80077b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d136      	bne.n	8007a68 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d109      	bne.n	8007a18 <I2S_IRQHandler+0xbc>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a0e:	2b80      	cmp	r3, #128	@ 0x80
 8007a10:	d102      	bne.n	8007a18 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff ff45 	bl	80078a2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d122      	bne.n	8007a68 <I2S_IRQHandler+0x10c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d11b      	bne.n	8007a68 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007a3e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	f043 0204 	orr.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fea4 	bl	80077b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a68:	bf00      	nop
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a80:	f7fc fe1e 	bl	80046c0 <HAL_GetTick>
 8007a84:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007a86:	e018      	b.n	8007aba <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d014      	beq.n	8007aba <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007a90:	f7fc fe16 	bl	80046c0 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d902      	bls.n	8007aa6 <I2S_WaitFlagStateUntilTimeout+0x36>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e00f      	b.n	8007ada <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d1d7      	bne.n	8007a88 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a92      	ldr	r2, [pc, #584]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007afe:	4b92      	ldr	r3, [pc, #584]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b00:	e001      	b.n	8007b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007b02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a8b      	ldr	r2, [pc, #556]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d101      	bne.n	8007b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b1e:	e001      	b.n	8007b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007b20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b30:	d004      	beq.n	8007b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8099 	bne.w	8007c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d107      	bne.n	8007b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f925 	bl	8007da0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9c8 	bl	8007f00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d13a      	bne.n	8007bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d035      	beq.n	8007bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a6e      	ldr	r2, [pc, #440]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007b90:	e001      	b.n	8007b96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007b92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4969      	ldr	r1, [pc, #420]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007ba2:	4b69      	ldr	r3, [pc, #420]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ba4:	e001      	b.n	8007baa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007ba6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007baa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007bae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007bbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be2:	f043 0202 	orr.w	r2, r3, #2
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fde0 	bl	80077b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	f040 80c3 	bne.w	8007d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80bd 	beq.w	8007d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007c16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a49      	ldr	r2, [pc, #292]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d101      	bne.n	8007c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007c22:	4b49      	ldr	r3, [pc, #292]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c24:	e001      	b.n	8007c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007c26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4944      	ldr	r1, [pc, #272]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007c32:	428b      	cmp	r3, r1
 8007c34:	d101      	bne.n	8007c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007c36:	4b44      	ldr	r3, [pc, #272]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007c38:	e001      	b.n	8007c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007c3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007c3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007c42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c44:	2300      	movs	r3, #0
 8007c46:	60bb      	str	r3, [r7, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	60bb      	str	r3, [r7, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5e:	f043 0204 	orr.w	r2, r3, #4
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fda2 	bl	80077b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c6c:	e089      	b.n	8007d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d107      	bne.n	8007c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8be 	bl	8007e04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d107      	bne.n	8007ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8fd 	bl	8007e9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca8:	2b40      	cmp	r3, #64	@ 0x40
 8007caa:	d12f      	bne.n	8007d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02a      	beq.n	8007d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007cc4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1e      	ldr	r2, [pc, #120]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d101      	bne.n	8007cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007cd2:	e001      	b.n	8007cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007cd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4919      	ldr	r1, [pc, #100]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007ce4:	4b18      	ldr	r3, [pc, #96]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007ce6:	e001      	b.n	8007cec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007cec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007cf0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfe:	f043 0202 	orr.w	r2, r3, #2
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff fd52 	bl	80077b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d136      	bne.n	8007d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d031      	beq.n	8007d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a07      	ldr	r2, [pc, #28]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d101      	bne.n	8007d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007d2a:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d2c:	e001      	b.n	8007d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4902      	ldr	r1, [pc, #8]	@ (8007d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007d3a:	428b      	cmp	r3, r1
 8007d3c:	d106      	bne.n	8007d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007d3e:	4b02      	ldr	r3, [pc, #8]	@ (8007d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007d40:	e006      	b.n	8007d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007d42:	bf00      	nop
 8007d44:	40003800 	.word	0x40003800
 8007d48:	40003400 	.word	0x40003400
 8007d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007d50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007d54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007d64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d72:	f043 0204 	orr.w	r2, r3, #4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fd18 	bl	80077b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d80:	e000      	b.n	8007d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d82:	bf00      	nop
}
 8007d84:	bf00      	nop
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	1c99      	adds	r1, r3, #2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6251      	str	r1, [r2, #36]	@ 0x24
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d113      	bne.n	8007dfa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007de0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d106      	bne.n	8007dfa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff ffc9 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e10:	1c99      	adds	r1, r3, #2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6251      	str	r1, [r2, #36]	@ 0x24
 8007e16:	8819      	ldrh	r1, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e94 <I2SEx_TxISR_I2SExt+0x90>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d101      	bne.n	8007e26 <I2SEx_TxISR_I2SExt+0x22>
 8007e22:	4b1d      	ldr	r3, [pc, #116]	@ (8007e98 <I2SEx_TxISR_I2SExt+0x94>)
 8007e24:	e001      	b.n	8007e2a <I2SEx_TxISR_I2SExt+0x26>
 8007e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d121      	bne.n	8007e8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a12      	ldr	r2, [pc, #72]	@ (8007e94 <I2SEx_TxISR_I2SExt+0x90>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <I2SEx_TxISR_I2SExt+0x50>
 8007e50:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <I2SEx_TxISR_I2SExt+0x94>)
 8007e52:	e001      	b.n	8007e58 <I2SEx_TxISR_I2SExt+0x54>
 8007e54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	490d      	ldr	r1, [pc, #52]	@ (8007e94 <I2SEx_TxISR_I2SExt+0x90>)
 8007e60:	428b      	cmp	r3, r1
 8007e62:	d101      	bne.n	8007e68 <I2SEx_TxISR_I2SExt+0x64>
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <I2SEx_TxISR_I2SExt+0x94>)
 8007e66:	e001      	b.n	8007e6c <I2SEx_TxISR_I2SExt+0x68>
 8007e68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007e6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007e70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff81 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40003800 	.word	0x40003800
 8007e98:	40003400 	.word	0x40003400

08007e9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68d8      	ldr	r0, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eae:	1c99      	adds	r1, r3, #2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007eb4:	b282      	uxth	r2, r0
 8007eb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d113      	bne.n	8007ef8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007ede:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff ff4a 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a20      	ldr	r2, [pc, #128]	@ (8007f90 <I2SEx_RxISR_I2SExt+0x90>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d101      	bne.n	8007f16 <I2SEx_RxISR_I2SExt+0x16>
 8007f12:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <I2SEx_RxISR_I2SExt+0x94>)
 8007f14:	e001      	b.n	8007f1a <I2SEx_RxISR_I2SExt+0x1a>
 8007f16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f1a:	68d8      	ldr	r0, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	1c99      	adds	r1, r3, #2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007f26:	b282      	uxth	r2, r0
 8007f28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d121      	bne.n	8007f86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a12      	ldr	r2, [pc, #72]	@ (8007f90 <I2SEx_RxISR_I2SExt+0x90>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d101      	bne.n	8007f50 <I2SEx_RxISR_I2SExt+0x50>
 8007f4c:	4b11      	ldr	r3, [pc, #68]	@ (8007f94 <I2SEx_RxISR_I2SExt+0x94>)
 8007f4e:	e001      	b.n	8007f54 <I2SEx_RxISR_I2SExt+0x54>
 8007f50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	490d      	ldr	r1, [pc, #52]	@ (8007f90 <I2SEx_RxISR_I2SExt+0x90>)
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	d101      	bne.n	8007f64 <I2SEx_RxISR_I2SExt+0x64>
 8007f60:	4b0c      	ldr	r3, [pc, #48]	@ (8007f94 <I2SEx_RxISR_I2SExt+0x94>)
 8007f62:	e001      	b.n	8007f68 <I2SEx_RxISR_I2SExt+0x68>
 8007f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007f68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007f6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff03 	bl	8007d8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40003800 	.word	0x40003800
 8007f94:	40003400 	.word	0x40003400

08007f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e267      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d075      	beq.n	80080a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fb6:	4b88      	ldr	r3, [pc, #544]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d00c      	beq.n	8007fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc2:	4b85      	ldr	r3, [pc, #532]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d112      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fce:	4b82      	ldr	r3, [pc, #520]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fda:	d10b      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d05b      	beq.n	80080a0 <HAL_RCC_OscConfig+0x108>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d157      	bne.n	80080a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e242      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ffc:	d106      	bne.n	800800c <HAL_RCC_OscConfig+0x74>
 8007ffe:	4b76      	ldr	r3, [pc, #472]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a75      	ldr	r2, [pc, #468]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e01d      	b.n	8008048 <HAL_RCC_OscConfig+0xb0>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008014:	d10c      	bne.n	8008030 <HAL_RCC_OscConfig+0x98>
 8008016:	4b70      	ldr	r3, [pc, #448]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a6f      	ldr	r2, [pc, #444]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 800801c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	4b6d      	ldr	r3, [pc, #436]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a6c      	ldr	r2, [pc, #432]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	e00b      	b.n	8008048 <HAL_RCC_OscConfig+0xb0>
 8008030:	4b69      	ldr	r3, [pc, #420]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a68      	ldr	r2, [pc, #416]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	4b66      	ldr	r3, [pc, #408]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a65      	ldr	r2, [pc, #404]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d013      	beq.n	8008078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008050:	f7fc fb36 	bl	80046c0 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008058:	f7fc fb32 	bl	80046c0 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b64      	cmp	r3, #100	@ 0x64
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e207      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800806a:	4b5b      	ldr	r3, [pc, #364]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <HAL_RCC_OscConfig+0xc0>
 8008076:	e014      	b.n	80080a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008078:	f7fc fb22 	bl	80046c0 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008080:	f7fc fb1e 	bl	80046c0 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	@ 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e1f3      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008092:	4b51      	ldr	r3, [pc, #324]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0xe8>
 800809e:	e000      	b.n	80080a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d063      	beq.n	8008176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ae:	4b4a      	ldr	r3, [pc, #296]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ba:	4b47      	ldr	r3, [pc, #284]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d11c      	bne.n	8008100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080c6:	4b44      	ldr	r3, [pc, #272]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d116      	bne.n	8008100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080d2:	4b41      	ldr	r3, [pc, #260]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <HAL_RCC_OscConfig+0x152>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d001      	beq.n	80080ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e1c7      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ea:	4b3b      	ldr	r3, [pc, #236]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	4937      	ldr	r1, [pc, #220]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080fe:	e03a      	b.n	8008176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d020      	beq.n	800814a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008108:	4b34      	ldr	r3, [pc, #208]	@ (80081dc <HAL_RCC_OscConfig+0x244>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810e:	f7fc fad7 	bl	80046c0 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008116:	f7fc fad3 	bl	80046c0 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e1a8      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008128:	4b2b      	ldr	r3, [pc, #172]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008134:	4b28      	ldr	r3, [pc, #160]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4925      	ldr	r1, [pc, #148]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 8008144:	4313      	orrs	r3, r2
 8008146:	600b      	str	r3, [r1, #0]
 8008148:	e015      	b.n	8008176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800814a:	4b24      	ldr	r3, [pc, #144]	@ (80081dc <HAL_RCC_OscConfig+0x244>)
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fc fab6 	bl	80046c0 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008158:	f7fc fab2 	bl	80046c0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e187      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800816a:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d036      	beq.n	80081f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d016      	beq.n	80081b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800818a:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <HAL_RCC_OscConfig+0x248>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008190:	f7fc fa96 	bl	80046c0 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008198:	f7fc fa92 	bl	80046c0 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e167      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081aa:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <HAL_RCC_OscConfig+0x240>)
 80081ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f0      	beq.n	8008198 <HAL_RCC_OscConfig+0x200>
 80081b6:	e01b      	b.n	80081f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081b8:	4b09      	ldr	r3, [pc, #36]	@ (80081e0 <HAL_RCC_OscConfig+0x248>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081be:	f7fc fa7f 	bl	80046c0 <HAL_GetTick>
 80081c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081c4:	e00e      	b.n	80081e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081c6:	f7fc fa7b 	bl	80046c0 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d907      	bls.n	80081e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e150      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
 80081d8:	40023800 	.word	0x40023800
 80081dc:	42470000 	.word	0x42470000
 80081e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081e4:	4b88      	ldr	r3, [pc, #544]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80081e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ea      	bne.n	80081c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8097 	beq.w	800832c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008202:	4b81      	ldr	r3, [pc, #516]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10f      	bne.n	800822e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800820e:	2300      	movs	r3, #0
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	4b7d      	ldr	r3, [pc, #500]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008216:	4a7c      	ldr	r2, [pc, #496]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800821c:	6413      	str	r3, [r2, #64]	@ 0x40
 800821e:	4b7a      	ldr	r3, [pc, #488]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800822a:	2301      	movs	r3, #1
 800822c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800822e:	4b77      	ldr	r3, [pc, #476]	@ (800840c <HAL_RCC_OscConfig+0x474>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d118      	bne.n	800826c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800823a:	4b74      	ldr	r3, [pc, #464]	@ (800840c <HAL_RCC_OscConfig+0x474>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a73      	ldr	r2, [pc, #460]	@ (800840c <HAL_RCC_OscConfig+0x474>)
 8008240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008246:	f7fc fa3b 	bl	80046c0 <HAL_GetTick>
 800824a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800824c:	e008      	b.n	8008260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800824e:	f7fc fa37 	bl	80046c0 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e10c      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008260:	4b6a      	ldr	r3, [pc, #424]	@ (800840c <HAL_RCC_OscConfig+0x474>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f0      	beq.n	800824e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d106      	bne.n	8008282 <HAL_RCC_OscConfig+0x2ea>
 8008274:	4b64      	ldr	r3, [pc, #400]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008278:	4a63      	ldr	r2, [pc, #396]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 800827a:	f043 0301 	orr.w	r3, r3, #1
 800827e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008280:	e01c      	b.n	80082bc <HAL_RCC_OscConfig+0x324>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2b05      	cmp	r3, #5
 8008288:	d10c      	bne.n	80082a4 <HAL_RCC_OscConfig+0x30c>
 800828a:	4b5f      	ldr	r3, [pc, #380]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 800828c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828e:	4a5e      	ldr	r2, [pc, #376]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008290:	f043 0304 	orr.w	r3, r3, #4
 8008294:	6713      	str	r3, [r2, #112]	@ 0x70
 8008296:	4b5c      	ldr	r3, [pc, #368]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	4a5b      	ldr	r2, [pc, #364]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a2:	e00b      	b.n	80082bc <HAL_RCC_OscConfig+0x324>
 80082a4:	4b58      	ldr	r3, [pc, #352]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80082a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a8:	4a57      	ldr	r2, [pc, #348]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80082b0:	4b55      	ldr	r3, [pc, #340]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b4:	4a54      	ldr	r2, [pc, #336]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80082b6:	f023 0304 	bic.w	r3, r3, #4
 80082ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d015      	beq.n	80082f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c4:	f7fc f9fc 	bl	80046c0 <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7fc f9f8 	bl	80046c0 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e0cb      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082e2:	4b49      	ldr	r3, [pc, #292]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0ee      	beq.n	80082cc <HAL_RCC_OscConfig+0x334>
 80082ee:	e014      	b.n	800831a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082f0:	f7fc f9e6 	bl	80046c0 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082f6:	e00a      	b.n	800830e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082f8:	f7fc f9e2 	bl	80046c0 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008306:	4293      	cmp	r3, r2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e0b5      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800830e:	4b3e      	ldr	r3, [pc, #248]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1ee      	bne.n	80082f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d105      	bne.n	800832c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008320:	4b39      	ldr	r3, [pc, #228]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008324:	4a38      	ldr	r2, [pc, #224]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800832a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80a1 	beq.w	8008478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008336:	4b34      	ldr	r3, [pc, #208]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 030c 	and.w	r3, r3, #12
 800833e:	2b08      	cmp	r3, #8
 8008340:	d05c      	beq.n	80083fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d141      	bne.n	80083ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800834a:	4b31      	ldr	r3, [pc, #196]	@ (8008410 <HAL_RCC_OscConfig+0x478>)
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008350:	f7fc f9b6 	bl	80046c0 <HAL_GetTick>
 8008354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008358:	f7fc f9b2 	bl	80046c0 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e087      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800836a:	4b27      	ldr	r3, [pc, #156]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f0      	bne.n	8008358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69da      	ldr	r2, [r3, #28]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008384:	019b      	lsls	r3, r3, #6
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	3b01      	subs	r3, #1
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	061b      	lsls	r3, r3, #24
 800839a:	491b      	ldr	r1, [pc, #108]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 800839c:	4313      	orrs	r3, r2
 800839e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008410 <HAL_RCC_OscConfig+0x478>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083a6:	f7fc f98b 	bl	80046c0 <HAL_GetTick>
 80083aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083ac:	e008      	b.n	80083c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ae:	f7fc f987 	bl	80046c0 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e05c      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c0:	4b11      	ldr	r3, [pc, #68]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0f0      	beq.n	80083ae <HAL_RCC_OscConfig+0x416>
 80083cc:	e054      	b.n	8008478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ce:	4b10      	ldr	r3, [pc, #64]	@ (8008410 <HAL_RCC_OscConfig+0x478>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083d4:	f7fc f974 	bl	80046c0 <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083dc:	f7fc f970 	bl	80046c0 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e045      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ee:	4b06      	ldr	r3, [pc, #24]	@ (8008408 <HAL_RCC_OscConfig+0x470>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f0      	bne.n	80083dc <HAL_RCC_OscConfig+0x444>
 80083fa:	e03d      	b.n	8008478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d107      	bne.n	8008414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e038      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
 8008408:	40023800 	.word	0x40023800
 800840c:	40007000 	.word	0x40007000
 8008410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008414:	4b1b      	ldr	r3, [pc, #108]	@ (8008484 <HAL_RCC_OscConfig+0x4ec>)
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d028      	beq.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800842c:	429a      	cmp	r2, r3
 800842e:	d121      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843a:	429a      	cmp	r2, r3
 800843c:	d11a      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008444:	4013      	ands	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800844a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800844c:	4293      	cmp	r3, r2
 800844e:	d111      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	3b01      	subs	r3, #1
 800845e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008460:	429a      	cmp	r2, r3
 8008462:	d107      	bne.n	8008474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008470:	429a      	cmp	r2, r3
 8008472:	d001      	beq.n	8008478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e000      	b.n	800847a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	40023800 	.word	0x40023800

08008488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e0cc      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800849c:	4b68      	ldr	r3, [pc, #416]	@ (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d90c      	bls.n	80084c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084aa:	4b65      	ldr	r3, [pc, #404]	@ (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b2:	4b63      	ldr	r3, [pc, #396]	@ (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d001      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e0b8      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d020      	beq.n	8008512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084dc:	4b59      	ldr	r3, [pc, #356]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4a58      	ldr	r2, [pc, #352]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084f4:	4b53      	ldr	r3, [pc, #332]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4a52      	ldr	r2, [pc, #328]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80084fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008500:	4b50      	ldr	r3, [pc, #320]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	494d      	ldr	r1, [pc, #308]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 800850e:	4313      	orrs	r3, r2
 8008510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d044      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d107      	bne.n	8008536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008526:	4b47      	ldr	r3, [pc, #284]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d119      	bne.n	8008566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e07f      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d003      	beq.n	8008546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008542:	2b03      	cmp	r3, #3
 8008544:	d107      	bne.n	8008556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008546:	4b3f      	ldr	r3, [pc, #252]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e06f      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008556:	4b3b      	ldr	r3, [pc, #236]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e067      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008566:	4b37      	ldr	r3, [pc, #220]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f023 0203 	bic.w	r2, r3, #3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4934      	ldr	r1, [pc, #208]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	4313      	orrs	r3, r2
 8008576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008578:	f7fc f8a2 	bl	80046c0 <HAL_GetTick>
 800857c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800857e:	e00a      	b.n	8008596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008580:	f7fc f89e 	bl	80046c0 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800858e:	4293      	cmp	r3, r2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e04f      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008596:	4b2b      	ldr	r3, [pc, #172]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 020c 	and.w	r2, r3, #12
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d1eb      	bne.n	8008580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085a8:	4b25      	ldr	r3, [pc, #148]	@ (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d20c      	bcs.n	80085d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b6:	4b22      	ldr	r3, [pc, #136]	@ (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085be:	4b20      	ldr	r3, [pc, #128]	@ (8008640 <HAL_RCC_ClockConfig+0x1b8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d001      	beq.n	80085d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e032      	b.n	8008636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085dc:	4b19      	ldr	r3, [pc, #100]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4916      	ldr	r1, [pc, #88]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d009      	beq.n	800860e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085fa:	4b12      	ldr	r3, [pc, #72]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	490e      	ldr	r1, [pc, #56]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	4313      	orrs	r3, r2
 800860c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800860e:	f000 f821 	bl	8008654 <HAL_RCC_GetSysClockFreq>
 8008612:	4602      	mov	r2, r0
 8008614:	4b0b      	ldr	r3, [pc, #44]	@ (8008644 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	091b      	lsrs	r3, r3, #4
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	490a      	ldr	r1, [pc, #40]	@ (8008648 <HAL_RCC_ClockConfig+0x1c0>)
 8008620:	5ccb      	ldrb	r3, [r1, r3]
 8008622:	fa22 f303 	lsr.w	r3, r2, r3
 8008626:	4a09      	ldr	r2, [pc, #36]	@ (800864c <HAL_RCC_ClockConfig+0x1c4>)
 8008628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800862a:	4b09      	ldr	r3, [pc, #36]	@ (8008650 <HAL_RCC_ClockConfig+0x1c8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f7fc f802 	bl	8004638 <HAL_InitTick>

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40023c00 	.word	0x40023c00
 8008644:	40023800 	.word	0x40023800
 8008648:	0801466c 	.word	0x0801466c
 800864c:	20000020 	.word	0x20000020
 8008650:	20000024 	.word	0x20000024

08008654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008658:	b094      	sub	sp, #80	@ 0x50
 800865a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008660:	2300      	movs	r3, #0
 8008662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008664:	2300      	movs	r3, #0
 8008666:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800866c:	4b79      	ldr	r3, [pc, #484]	@ (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 030c 	and.w	r3, r3, #12
 8008674:	2b08      	cmp	r3, #8
 8008676:	d00d      	beq.n	8008694 <HAL_RCC_GetSysClockFreq+0x40>
 8008678:	2b08      	cmp	r3, #8
 800867a:	f200 80e1 	bhi.w	8008840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0x34>
 8008682:	2b04      	cmp	r3, #4
 8008684:	d003      	beq.n	800868e <HAL_RCC_GetSysClockFreq+0x3a>
 8008686:	e0db      	b.n	8008840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008688:	4b73      	ldr	r3, [pc, #460]	@ (8008858 <HAL_RCC_GetSysClockFreq+0x204>)
 800868a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800868c:	e0db      	b.n	8008846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800868e:	4b73      	ldr	r3, [pc, #460]	@ (800885c <HAL_RCC_GetSysClockFreq+0x208>)
 8008690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008692:	e0d8      	b.n	8008846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008694:	4b6f      	ldr	r3, [pc, #444]	@ (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800869c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800869e:	4b6d      	ldr	r3, [pc, #436]	@ (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d063      	beq.n	8008772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086aa:	4b6a      	ldr	r3, [pc, #424]	@ (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	099b      	lsrs	r3, r3, #6
 80086b0:	2200      	movs	r2, #0
 80086b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80086b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80086be:	2300      	movs	r3, #0
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	f04f 0000 	mov.w	r0, #0
 80086ce:	f04f 0100 	mov.w	r1, #0
 80086d2:	0159      	lsls	r1, r3, #5
 80086d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086d8:	0150      	lsls	r0, r2, #5
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4621      	mov	r1, r4
 80086e0:	1a51      	subs	r1, r2, r1
 80086e2:	6139      	str	r1, [r7, #16]
 80086e4:	4629      	mov	r1, r5
 80086e6:	eb63 0301 	sbc.w	r3, r3, r1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086f8:	4659      	mov	r1, fp
 80086fa:	018b      	lsls	r3, r1, #6
 80086fc:	4651      	mov	r1, sl
 80086fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008702:	4651      	mov	r1, sl
 8008704:	018a      	lsls	r2, r1, #6
 8008706:	4651      	mov	r1, sl
 8008708:	ebb2 0801 	subs.w	r8, r2, r1
 800870c:	4659      	mov	r1, fp
 800870e:	eb63 0901 	sbc.w	r9, r3, r1
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800871e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008726:	4690      	mov	r8, r2
 8008728:	4699      	mov	r9, r3
 800872a:	4623      	mov	r3, r4
 800872c:	eb18 0303 	adds.w	r3, r8, r3
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	462b      	mov	r3, r5
 8008734:	eb49 0303 	adc.w	r3, r9, r3
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008746:	4629      	mov	r1, r5
 8008748:	024b      	lsls	r3, r1, #9
 800874a:	4621      	mov	r1, r4
 800874c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008750:	4621      	mov	r1, r4
 8008752:	024a      	lsls	r2, r1, #9
 8008754:	4610      	mov	r0, r2
 8008756:	4619      	mov	r1, r3
 8008758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800875a:	2200      	movs	r2, #0
 800875c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800875e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008764:	f7f8 fa90 	bl	8000c88 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4613      	mov	r3, r2
 800876e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008770:	e058      	b.n	8008824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008772:	4b38      	ldr	r3, [pc, #224]	@ (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	2200      	movs	r2, #0
 800877a:	4618      	mov	r0, r3
 800877c:	4611      	mov	r1, r2
 800877e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008782:	623b      	str	r3, [r7, #32]
 8008784:	2300      	movs	r3, #0
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
 8008788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800878c:	4642      	mov	r2, r8
 800878e:	464b      	mov	r3, r9
 8008790:	f04f 0000 	mov.w	r0, #0
 8008794:	f04f 0100 	mov.w	r1, #0
 8008798:	0159      	lsls	r1, r3, #5
 800879a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800879e:	0150      	lsls	r0, r2, #5
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4641      	mov	r1, r8
 80087a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80087aa:	4649      	mov	r1, r9
 80087ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80087bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80087c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80087c4:	ebb2 040a 	subs.w	r4, r2, sl
 80087c8:	eb63 050b 	sbc.w	r5, r3, fp
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	00eb      	lsls	r3, r5, #3
 80087d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087da:	00e2      	lsls	r2, r4, #3
 80087dc:	4614      	mov	r4, r2
 80087de:	461d      	mov	r5, r3
 80087e0:	4643      	mov	r3, r8
 80087e2:	18e3      	adds	r3, r4, r3
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	464b      	mov	r3, r9
 80087e8:	eb45 0303 	adc.w	r3, r5, r3
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087fa:	4629      	mov	r1, r5
 80087fc:	028b      	lsls	r3, r1, #10
 80087fe:	4621      	mov	r1, r4
 8008800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008804:	4621      	mov	r1, r4
 8008806:	028a      	lsls	r2, r1, #10
 8008808:	4610      	mov	r0, r2
 800880a:	4619      	mov	r1, r3
 800880c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800880e:	2200      	movs	r2, #0
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	61fa      	str	r2, [r7, #28]
 8008814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008818:	f7f8 fa36 	bl	8000c88 <__aeabi_uldivmod>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4613      	mov	r3, r2
 8008822:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008824:	4b0b      	ldr	r3, [pc, #44]	@ (8008854 <HAL_RCC_GetSysClockFreq+0x200>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	3301      	adds	r3, #1
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800883e:	e002      	b.n	8008846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008840:	4b05      	ldr	r3, [pc, #20]	@ (8008858 <HAL_RCC_GetSysClockFreq+0x204>)
 8008842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008848:	4618      	mov	r0, r3
 800884a:	3750      	adds	r7, #80	@ 0x50
 800884c:	46bd      	mov	sp, r7
 800884e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008852:	bf00      	nop
 8008854:	40023800 	.word	0x40023800
 8008858:	00f42400 	.word	0x00f42400
 800885c:	007a1200 	.word	0x007a1200

08008860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008864:	4b03      	ldr	r3, [pc, #12]	@ (8008874 <HAL_RCC_GetHCLKFreq+0x14>)
 8008866:	681b      	ldr	r3, [r3, #0]
}
 8008868:	4618      	mov	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000020 	.word	0x20000020

08008878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800887c:	f7ff fff0 	bl	8008860 <HAL_RCC_GetHCLKFreq>
 8008880:	4602      	mov	r2, r0
 8008882:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	0a9b      	lsrs	r3, r3, #10
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	4903      	ldr	r1, [pc, #12]	@ (800889c <HAL_RCC_GetPCLK1Freq+0x24>)
 800888e:	5ccb      	ldrb	r3, [r1, r3]
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008894:	4618      	mov	r0, r3
 8008896:	bd80      	pop	{r7, pc}
 8008898:	40023800 	.word	0x40023800
 800889c:	0801467c 	.word	0x0801467c

080088a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088a4:	f7ff ffdc 	bl	8008860 <HAL_RCC_GetHCLKFreq>
 80088a8:	4602      	mov	r2, r0
 80088aa:	4b05      	ldr	r3, [pc, #20]	@ (80088c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	0b5b      	lsrs	r3, r3, #13
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	4903      	ldr	r1, [pc, #12]	@ (80088c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088b6:	5ccb      	ldrb	r3, [r1, r3]
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40023800 	.word	0x40023800
 80088c4:	0801467c 	.word	0x0801467c

080088c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d035      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088f0:	4b62      	ldr	r3, [pc, #392]	@ (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088f6:	f7fb fee3 	bl	80046c0 <HAL_GetTick>
 80088fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088fc:	e008      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088fe:	f7fb fedf 	bl	80046c0 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d901      	bls.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e0b0      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008910:	4b5b      	ldr	r3, [pc, #364]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	019a      	lsls	r2, r3, #6
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	071b      	lsls	r3, r3, #28
 8008928:	4955      	ldr	r1, [pc, #340]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008930:	4b52      	ldr	r3, [pc, #328]	@ (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008936:	f7fb fec3 	bl	80046c0 <HAL_GetTick>
 800893a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800893c:	e008      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800893e:	f7fb febf 	bl	80046c0 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e090      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008950:	4b4b      	ldr	r3, [pc, #300]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f0      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8083 	beq.w	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	4b44      	ldr	r3, [pc, #272]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008972:	4a43      	ldr	r2, [pc, #268]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008978:	6413      	str	r3, [r2, #64]	@ 0x40
 800897a:	4b41      	ldr	r3, [pc, #260]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800897c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008986:	4b3f      	ldr	r3, [pc, #252]	@ (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a3e      	ldr	r2, [pc, #248]	@ (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800898c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008992:	f7fb fe95 	bl	80046c0 <HAL_GetTick>
 8008996:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008998:	e008      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800899a:	f7fb fe91 	bl	80046c0 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e062      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089ac:	4b35      	ldr	r3, [pc, #212]	@ (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089b8:	4b31      	ldr	r3, [pc, #196]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02f      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d028      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089d6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089e0:	4b29      	ldr	r3, [pc, #164]	@ (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089e6:	4b28      	ldr	r3, [pc, #160]	@ (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80089ec:	4a24      	ldr	r2, [pc, #144]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089f2:	4b23      	ldr	r3, [pc, #140]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d114      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80089fe:	f7fb fe5f 	bl	80046c0 <HAL_GetTick>
 8008a02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a04:	e00a      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a06:	f7fb fe5b 	bl	80046c0 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d901      	bls.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e02a      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a1c:	4b18      	ldr	r3, [pc, #96]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0ee      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a34:	d10d      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008a36:	4b12      	ldr	r3, [pc, #72]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a4a:	490d      	ldr	r1, [pc, #52]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	608b      	str	r3, [r1, #8]
 8008a50:	e005      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a52:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	4a0a      	ldr	r2, [pc, #40]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008a5c:	6093      	str	r3, [r2, #8]
 8008a5e:	4b08      	ldr	r3, [pc, #32]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a6a:	4905      	ldr	r1, [pc, #20]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	42470068 	.word	0x42470068
 8008a80:	40023800 	.word	0x40023800
 8008a84:	40007000 	.word	0x40007000
 8008a88:	42470e40 	.word	0x42470e40

08008a8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d13e      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008aaa:	4b23      	ldr	r3, [pc, #140]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d12f      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008ac2:	617b      	str	r3, [r7, #20]
          break;
 8008ac4:	e02f      	b.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ad2:	d108      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ad4:	4b18      	ldr	r3, [pc, #96]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008adc:	4a18      	ldr	r2, [pc, #96]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	e007      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ae6:	4b14      	ldr	r3, [pc, #80]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aee:	4a15      	ldr	r2, [pc, #84]	@ (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008af6:	4b10      	ldr	r3, [pc, #64]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008afc:	099b      	lsrs	r3, r3, #6
 8008afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b10:	0f1b      	lsrs	r3, r3, #28
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1c:	617b      	str	r3, [r7, #20]
          break;
 8008b1e:	e002      	b.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
          break;
 8008b24:	bf00      	nop
        }
      }
      break;
 8008b26:	bf00      	nop
    }
  }
  return frequency;
 8008b28:	697b      	ldr	r3, [r7, #20]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	00bb8000 	.word	0x00bb8000
 8008b40:	007a1200 	.word	0x007a1200
 8008b44:	00f42400 	.word	0x00f42400

08008b48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e022      	b.n	8008ba0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d105      	bne.n	8008b72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7fb facf 	bl	8004110 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2203      	movs	r2, #3
 8008b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f814 	bl	8008ba8 <HAL_SD_InitCard>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e00a      	b.n	8008ba0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ba8:	b5b0      	push	{r4, r5, r7, lr}
 8008baa:	b08e      	sub	sp, #56	@ 0x38
 8008bac:	af04      	add	r7, sp, #16
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008bc4:	2376      	movs	r3, #118	@ 0x76
 8008bc6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681d      	ldr	r5, [r3, #0]
 8008bcc:	466c      	mov	r4, sp
 8008bce:	f107 0314 	add.w	r3, r7, #20
 8008bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bda:	f107 0308 	add.w	r3, r7, #8
 8008bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008be0:	4628      	mov	r0, r5
 8008be2:	f001 ffb1 	bl	800ab48 <SDIO_Init>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e04f      	b.n	8008c98 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008bf8:	4b29      	ldr	r3, [pc, #164]	@ (8008ca0 <HAL_SD_InitCard+0xf8>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 ffe9 	bl	800abda <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008c08:	4b25      	ldr	r3, [pc, #148]	@ (8008ca0 <HAL_SD_InitCard+0xf8>)
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008c0e:	2002      	movs	r0, #2
 8008c10:	f7fb fd62 	bl	80046d8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fe69 	bl	80098ec <SD_PowerON>
 8008c1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e02e      	b.n	8008c98 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fd88 	bl	8009750 <SD_InitCard>
 8008c40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e01b      	b.n	8008c98 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f002 f848 	bl	800acfe <SDMMC_CmdBlockLength>
 8008c6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00f      	beq.n	8008c96 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca4 <HAL_SD_InitCard+0xfc>)
 8008c7c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3728      	adds	r7, #40	@ 0x28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008ca0:	422580a0 	.word	0x422580a0
 8008ca4:	004005ff 	.word	0x004005ff

08008ca8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b092      	sub	sp, #72	@ 0x48
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cb6:	f7fb fd03 	bl	80046c0 <HAL_GetTick>
 8008cba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d107      	bne.n	8008cda <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e1bd      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	f040 81b0 	bne.w	8009048 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	441a      	add	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d907      	bls.n	8008d0c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d00:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e1a4      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2203      	movs	r2, #3
 8008d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d002      	beq.n	8008d2a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	025b      	lsls	r3, r3, #9
 8008d28:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	025b      	lsls	r3, r3, #9
 8008d34:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008d36:	2390      	movs	r3, #144	@ 0x90
 8008d38:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f107 0214 	add.w	r2, r7, #20
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 ffa8 	bl	800aca6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d90a      	bls.n	8008d72 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 f80c 	bl	800ad86 <SDMMC_CmdReadMultiBlock>
 8008d6e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008d70:	e009      	b.n	8008d86 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 ffdf 	bl	800ad42 <SDMMC_CmdReadSingleBlock>
 8008d84:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d012      	beq.n	8008db2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a7a      	ldr	r2, [pc, #488]	@ (8008f7c <HAL_SD_ReadBlocks+0x2d4>)
 8008d92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e151      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008db6:	e061      	b.n	8008e7c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d03c      	beq.n	8008e40 <HAL_SD_ReadBlocks+0x198>
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d039      	beq.n	8008e40 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dd0:	e033      	b.n	8008e3a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fee1 	bl	800ab9e <SDIO_ReadFIFO>
 8008ddc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	3301      	adds	r3, #1
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dee:	3b01      	subs	r3, #1
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfe:	3301      	adds	r3, #1
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e04:	3b01      	subs	r3, #1
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0a:	0c1b      	lsrs	r3, r3, #16
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e14:	3301      	adds	r3, #1
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e20:	0e1b      	lsrs	r3, r3, #24
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e30:	3b01      	subs	r3, #1
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8008e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e36:	3301      	adds	r3, #1
 8008e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	d9c8      	bls.n	8008dd2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e40:	f7fb fc3e 	bl	80046c0 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d902      	bls.n	8008e56 <HAL_SD_ReadBlocks+0x1ae>
 8008e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d112      	bne.n	8008e7c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a48      	ldr	r2, [pc, #288]	@ (8008f7c <HAL_SD_ReadBlocks+0x2d4>)
 8008e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e0ec      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e82:	f240 332a 	movw	r3, #810	@ 0x32a
 8008e86:	4013      	ands	r3, r2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d095      	beq.n	8008db8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d022      	beq.n	8008ee0 <HAL_SD_ReadBlocks+0x238>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d91f      	bls.n	8008ee0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d01b      	beq.n	8008ee0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 ffd1 	bl	800ae54 <SDMMC_CmdStopTransfer>
 8008eb2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d012      	beq.n	8008ee0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8008f7c <HAL_SD_ReadBlocks+0x2d4>)
 8008ec0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e0ba      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d012      	beq.n	8008f14 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a22      	ldr	r2, [pc, #136]	@ (8008f7c <HAL_SD_ReadBlocks+0x2d4>)
 8008ef4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efa:	f043 0208 	orr.w	r2, r3, #8
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e0a0      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d012      	beq.n	8008f48 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a15      	ldr	r2, [pc, #84]	@ (8008f7c <HAL_SD_ReadBlocks+0x2d4>)
 8008f28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2e:	f043 0202 	orr.w	r2, r3, #2
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e086      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d063      	beq.n	800901e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a08      	ldr	r2, [pc, #32]	@ (8008f7c <HAL_SD_ReadBlocks+0x2d4>)
 8008f5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	f043 0220 	orr.w	r2, r3, #32
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e06c      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
 8008f7c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fe0a 	bl	800ab9e <SDIO_ReadFIFO>
 8008f8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f96:	3301      	adds	r3, #1
 8008f98:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa2:	0a1b      	lsrs	r3, r3, #8
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fac:	3301      	adds	r3, #1
 8008fae:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	0c1b      	lsrs	r3, r3, #16
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fce:	0e1b      	lsrs	r3, r3, #24
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd8:	3301      	adds	r3, #1
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008fe2:	f7fb fb6d 	bl	80046c0 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d902      	bls.n	8008ff8 <HAL_SD_ReadBlocks+0x350>
 8008ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d112      	bne.n	800901e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a18      	ldr	r2, [pc, #96]	@ (8009060 <HAL_SD_ReadBlocks+0x3b8>)
 8008ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e01b      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <HAL_SD_ReadBlocks+0x38a>
 800902c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1a6      	bne.n	8008f80 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f240 523a 	movw	r2, #1338	@ 0x53a
 800903a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	e006      	b.n	8009056 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
  }
}
 8009056:	4618      	mov	r0, r3
 8009058:	3748      	adds	r7, #72	@ 0x48
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	004005ff 	.word	0x004005ff

08009064 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b092      	sub	sp, #72	@ 0x48
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009072:	f7fb fb25 	bl	80046c0 <HAL_GetTick>
 8009076:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d107      	bne.n	8009096 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e166      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b01      	cmp	r3, #1
 80090a0:	f040 8159 	bne.w	8009356 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	441a      	add	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d907      	bls.n	80090c8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e14d      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2203      	movs	r2, #3
 80090cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2200      	movs	r2, #0
 80090d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d002      	beq.n	80090e6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e2:	025b      	lsls	r3, r3, #9
 80090e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	025b      	lsls	r3, r3, #9
 80090f0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80090f2:	2390      	movs	r3, #144	@ 0x90
 80090f4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80090f6:	2300      	movs	r3, #0
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80090fe:	2301      	movs	r3, #1
 8009100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f107 0218 	add.w	r2, r7, #24
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f001 fdca 	bl	800aca6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d90a      	bls.n	800912e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2220      	movs	r2, #32
 800911c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009124:	4618      	mov	r0, r3
 8009126:	f001 fe72 	bl	800ae0e <SDMMC_CmdWriteMultiBlock>
 800912a:	6478      	str	r0, [r7, #68]	@ 0x44
 800912c:	e009      	b.n	8009142 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2210      	movs	r2, #16
 8009132:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fe45 	bl	800adca <SDMMC_CmdWriteSingleBlock>
 8009140:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009144:	2b00      	cmp	r3, #0
 8009146:	d012      	beq.n	800916e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a87      	ldr	r2, [pc, #540]	@ (800936c <HAL_SD_WriteBlocks+0x308>)
 800914e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009156:	431a      	orrs	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e0fa      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009172:	e065      	b.n	8009240 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800917a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d040      	beq.n	8009204 <HAL_SD_WriteBlocks+0x1a0>
 8009182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d03d      	beq.n	8009204 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009188:	2300      	movs	r3, #0
 800918a:	643b      	str	r3, [r7, #64]	@ 0x40
 800918c:	e037      	b.n	80091fe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800918e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009196:	3301      	adds	r3, #1
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800919a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919c:	3b01      	subs	r3, #1
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80091a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	021a      	lsls	r2, r3, #8
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ae:	3301      	adds	r3, #1
 80091b0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80091b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b4:	3b01      	subs	r3, #1
 80091b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80091b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	041a      	lsls	r2, r3, #16
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c6:	3301      	adds	r3, #1
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80091ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091cc:	3b01      	subs	r3, #1
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80091d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	061a      	lsls	r2, r3, #24
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	3301      	adds	r3, #1
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80091e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e4:	3b01      	subs	r3, #1
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f107 0214 	add.w	r2, r7, #20
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 fce0 	bl	800abb8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80091f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091fa:	3301      	adds	r3, #1
 80091fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80091fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009200:	2b07      	cmp	r3, #7
 8009202:	d9c4      	bls.n	800918e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009204:	f7fb fa5c 	bl	80046c0 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009210:	429a      	cmp	r2, r3
 8009212:	d902      	bls.n	800921a <HAL_SD_WriteBlocks+0x1b6>
 8009214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009216:	2b00      	cmp	r3, #0
 8009218:	d112      	bne.n	8009240 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a53      	ldr	r2, [pc, #332]	@ (800936c <HAL_SD_WriteBlocks+0x308>)
 8009220:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009228:	431a      	orrs	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e091      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009246:	f240 331a 	movw	r3, #794	@ 0x31a
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d091      	beq.n	8009174 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925a:	2b00      	cmp	r3, #0
 800925c:	d022      	beq.n	80092a4 <HAL_SD_WriteBlocks+0x240>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d91f      	bls.n	80092a4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009268:	2b03      	cmp	r3, #3
 800926a:	d01b      	beq.n	80092a4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f001 fdef 	bl	800ae54 <SDMMC_CmdStopTransfer>
 8009276:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800927a:	2b00      	cmp	r3, #0
 800927c:	d012      	beq.n	80092a4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a3a      	ldr	r2, [pc, #232]	@ (800936c <HAL_SD_WriteBlocks+0x308>)
 8009284:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800928a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800928c:	431a      	orrs	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e05f      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092aa:	f003 0308 	and.w	r3, r3, #8
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d012      	beq.n	80092d8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a2d      	ldr	r2, [pc, #180]	@ (800936c <HAL_SD_WriteBlocks+0x308>)
 80092b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092be:	f043 0208 	orr.w	r2, r3, #8
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e045      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d012      	beq.n	800930c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a20      	ldr	r2, [pc, #128]	@ (800936c <HAL_SD_WriteBlocks+0x308>)
 80092ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f2:	f043 0202 	orr.w	r2, r3, #2
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e02b      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009312:	f003 0310 	and.w	r3, r3, #16
 8009316:	2b00      	cmp	r3, #0
 8009318:	d012      	beq.n	8009340 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a13      	ldr	r2, [pc, #76]	@ (800936c <HAL_SD_WriteBlocks+0x308>)
 8009320:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	f043 0210 	orr.w	r2, r3, #16
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e011      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009348:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	e006      	b.n	8009364 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
  }
}
 8009364:	4618      	mov	r0, r3
 8009366:	3748      	adds	r7, #72	@ 0x48
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	004005ff 	.word	0x004005ff

08009370 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800937e:	0f9b      	lsrs	r3, r3, #30
 8009380:	b2da      	uxtb	r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800938a:	0e9b      	lsrs	r3, r3, #26
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	b2da      	uxtb	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939c:	0e1b      	lsrs	r3, r3, #24
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ae:	0c1b      	lsrs	r3, r3, #16
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d0:	0d1b      	lsrs	r3, r3, #20
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093dc:	0c1b      	lsrs	r3, r3, #16
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 030f 	and.w	r3, r3, #15
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ee:	0bdb      	lsrs	r3, r3, #15
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009400:	0b9b      	lsrs	r3, r3, #14
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	b2da      	uxtb	r2, r3
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009412:	0b5b      	lsrs	r3, r3, #13
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	b2da      	uxtb	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009424:	0b1b      	lsrs	r3, r3, #12
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	b2da      	uxtb	r2, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2200      	movs	r2, #0
 8009436:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943c:	2b00      	cmp	r3, #0
 800943e:	d163      	bne.n	8009508 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009444:	009a      	lsls	r2, r3, #2
 8009446:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800944a:	4013      	ands	r3, r2
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009450:	0f92      	lsrs	r2, r2, #30
 8009452:	431a      	orrs	r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800945c:	0edb      	lsrs	r3, r3, #27
 800945e:	b2db      	uxtb	r3, r3
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	b2da      	uxtb	r2, r3
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800946e:	0e1b      	lsrs	r3, r3, #24
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	b2da      	uxtb	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009480:	0d5b      	lsrs	r3, r3, #21
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	b2da      	uxtb	r2, r3
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009492:	0c9b      	lsrs	r3, r3, #18
 8009494:	b2db      	uxtb	r3, r3
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	b2da      	uxtb	r2, r3
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a4:	0bdb      	lsrs	r3, r3, #15
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	7e1b      	ldrb	r3, [r3, #24]
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	3302      	adds	r3, #2
 80094c8:	2201      	movs	r2, #1
 80094ca:	fa02 f303 	lsl.w	r3, r2, r3
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80094d2:	fb03 f202 	mul.w	r2, r3, r2
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	7a1b      	ldrb	r3, [r3, #8]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	2201      	movs	r2, #1
 80094e6:	409a      	lsls	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80094f4:	0a52      	lsrs	r2, r2, #9
 80094f6:	fb03 f202 	mul.w	r2, r3, r2
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009504:	661a      	str	r2, [r3, #96]	@ 0x60
 8009506:	e031      	b.n	800956c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950c:	2b01      	cmp	r3, #1
 800950e:	d11d      	bne.n	800954c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	431a      	orrs	r2, r3
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	3301      	adds	r3, #1
 800952c:	029a      	lsls	r2, r3, #10
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009540:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	661a      	str	r2, [r3, #96]	@ 0x60
 800954a:	e00f      	b.n	800956c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a58      	ldr	r2, [pc, #352]	@ (80096b4 <HAL_SD_GetCardCSD+0x344>)
 8009552:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009558:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e09d      	b.n	80096a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009570:	0b9b      	lsrs	r3, r3, #14
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	b2da      	uxtb	r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009582:	09db      	lsrs	r3, r3, #7
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958a:	b2da      	uxtb	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a4:	0fdb      	lsrs	r3, r3, #31
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095b0:	0f5b      	lsrs	r3, r3, #29
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c2:	0e9b      	lsrs	r3, r3, #26
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095d4:	0d9b      	lsrs	r3, r3, #22
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095e6:	0d5b      	lsrs	r3, r3, #21
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009602:	0c1b      	lsrs	r3, r3, #16
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009616:	0bdb      	lsrs	r3, r3, #15
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	b2da      	uxtb	r2, r3
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800962a:	0b9b      	lsrs	r3, r3, #14
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800963e:	0b5b      	lsrs	r3, r3, #13
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	b2da      	uxtb	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009652:	0b1b      	lsrs	r3, r3, #12
 8009654:	b2db      	uxtb	r3, r3
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	b2da      	uxtb	r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009666:	0a9b      	lsrs	r3, r3, #10
 8009668:	b2db      	uxtb	r3, r3
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	b2da      	uxtb	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	b2da      	uxtb	r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800968e:	085b      	lsrs	r3, r3, #1
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	004005ff 	.word	0x004005ff

080096b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800971c:	f107 030c 	add.w	r3, r7, #12
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f970 	bl	8009a08 <SD_SendStatus>
 8009728:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	0a5b      	lsrs	r3, r3, #9
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009746:	693b      	ldr	r3, [r7, #16]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009750:	b5b0      	push	{r4, r5, r7, lr}
 8009752:	b094      	sub	sp, #80	@ 0x50
 8009754:	af04      	add	r7, sp, #16
 8009756:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009758:	2301      	movs	r3, #1
 800975a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	f001 fa48 	bl	800abf6 <SDIO_GetPowerState>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800976c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009770:	e0b8      	b.n	80098e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	2b03      	cmp	r3, #3
 8009778:	d02f      	beq.n	80097da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fc2f 	bl	800afe2 <SDMMC_CmdSendCID>
 8009784:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <SD_InitCard+0x40>
    {
      return errorstate;
 800978c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978e:	e0a9      	b.n	80098e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2100      	movs	r1, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f001 fa72 	bl	800ac80 <SDIO_GetResponse>
 800979c:	4602      	mov	r2, r0
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2104      	movs	r1, #4
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 fa69 	bl	800ac80 <SDIO_GetResponse>
 80097ae:	4602      	mov	r2, r0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2108      	movs	r1, #8
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 fa60 	bl	800ac80 <SDIO_GetResponse>
 80097c0:	4602      	mov	r2, r0
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	210c      	movs	r1, #12
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 fa57 	bl	800ac80 <SDIO_GetResponse>
 80097d2:	4602      	mov	r2, r0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d00d      	beq.n	80097fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f107 020e 	add.w	r2, r7, #14
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f001 fc35 	bl	800b05c <SDMMC_CmdSetRelAdd>
 80097f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <SD_InitCard+0xae>
    {
      return errorstate;
 80097fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fc:	e072      	b.n	80098e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009802:	2b03      	cmp	r3, #3
 8009804:	d036      	beq.n	8009874 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	461a      	mov	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009816:	041b      	lsls	r3, r3, #16
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f001 fbff 	bl	800b01e <SDMMC_CmdSendCSD>
 8009820:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982a:	e05b      	b.n	80098e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f001 fa24 	bl	800ac80 <SDIO_GetResponse>
 8009838:	4602      	mov	r2, r0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2104      	movs	r1, #4
 8009844:	4618      	mov	r0, r3
 8009846:	f001 fa1b 	bl	800ac80 <SDIO_GetResponse>
 800984a:	4602      	mov	r2, r0
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2108      	movs	r1, #8
 8009856:	4618      	mov	r0, r3
 8009858:	f001 fa12 	bl	800ac80 <SDIO_GetResponse>
 800985c:	4602      	mov	r2, r0
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	210c      	movs	r1, #12
 8009868:	4618      	mov	r0, r3
 800986a:	f001 fa09 	bl	800ac80 <SDIO_GetResponse>
 800986e:	4602      	mov	r2, r0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2104      	movs	r1, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f001 fa00 	bl	800ac80 <SDIO_GetResponse>
 8009880:	4603      	mov	r3, r0
 8009882:	0d1a      	lsrs	r2, r3, #20
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009888:	f107 0310 	add.w	r3, r7, #16
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff fd6e 	bl	8009370 <HAL_SD_GetCardCSD>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800989a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800989e:	e021      	b.n	80098e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6819      	ldr	r1, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a8:	041b      	lsls	r3, r3, #16
 80098aa:	2200      	movs	r2, #0
 80098ac:	461c      	mov	r4, r3
 80098ae:	4615      	mov	r5, r2
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	4608      	mov	r0, r1
 80098b6:	f001 faef 	bl	800ae98 <SDMMC_CmdSelDesel>
 80098ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80098bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <SD_InitCard+0x176>
  {
    return errorstate;
 80098c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c4:	e00e      	b.n	80098e4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681d      	ldr	r5, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	466c      	mov	r4, sp
 80098ce:	f103 0210 	add.w	r2, r3, #16
 80098d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80098d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098d8:	3304      	adds	r3, #4
 80098da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098dc:	4628      	mov	r0, r5
 80098de:	f001 f933 	bl	800ab48 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3740      	adds	r7, #64	@ 0x40
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bdb0      	pop	{r4, r5, r7, pc}

080098ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	2300      	movs	r3, #0
 80098fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f001 faea 	bl	800aede <SDMMC_CmdGoIdleState>
 800990a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	e072      	b.n	80099fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fafd 	bl	800af1a <SDMMC_CmdOperCond>
 8009920:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00d      	beq.n	8009944 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f001 fad3 	bl	800aede <SDMMC_CmdGoIdleState>
 8009938:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	e05b      	b.n	80099fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800994e:	2b01      	cmp	r3, #1
 8009950:	d137      	bne.n	80099c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fafd 	bl	800af58 <SDMMC_CmdAppCommand>
 800995e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d02d      	beq.n	80099c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009966:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800996a:	e047      	b.n	80099fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f001 faf0 	bl	800af58 <SDMMC_CmdAppCommand>
 8009978:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <SD_PowerON+0x98>
    {
      return errorstate;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	e03b      	b.n	80099fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	491e      	ldr	r1, [pc, #120]	@ (8009a04 <SD_PowerON+0x118>)
 800998a:	4618      	mov	r0, r3
 800998c:	f001 fb06 	bl	800af9c <SDMMC_CmdAppOperCommand>
 8009990:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009998:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800999c:	e02e      	b.n	80099fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2100      	movs	r1, #0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f001 f96b 	bl	800ac80 <SDIO_GetResponse>
 80099aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	0fdb      	lsrs	r3, r3, #31
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d101      	bne.n	80099b8 <SD_PowerON+0xcc>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e000      	b.n	80099ba <SD_PowerON+0xce>
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]

    count++;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	3301      	adds	r3, #1
 80099c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d802      	bhi.n	80099d2 <SD_PowerON+0xe6>
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0cc      	beq.n	800996c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80099d8:	4293      	cmp	r3, r2
 80099da:	d902      	bls.n	80099e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80099dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099e0:	e00c      	b.n	80099fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80099f2:	e002      	b.n	80099fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	c1100000 	.word	0xc1100000

08009a08 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d102      	bne.n	8009a1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a1c:	e018      	b.n	8009a50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a26:	041b      	lsls	r3, r3, #16
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	f001 fb37 	bl	800b09e <SDMMC_CmdSendStatus>
 8009a30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	e009      	b.n	8009a50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2100      	movs	r1, #0
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 f91c 	bl	800ac80 <SDIO_GetResponse>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e03f      	b.n	8009aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d106      	bne.n	8009a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fa fbae 	bl	80041e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2224      	movs	r2, #36	@ 0x24
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fddf 	bl	800a660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695a      	ldr	r2, [r3, #20]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b08a      	sub	sp, #40	@ 0x28
 8009af6:	af02      	add	r7, sp, #8
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	4613      	mov	r3, r2
 8009b00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	d17c      	bne.n	8009c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <HAL_UART_Transmit+0x2c>
 8009b18:	88fb      	ldrh	r3, [r7, #6]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e075      	b.n	8009c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_UART_Transmit+0x3e>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e06e      	b.n	8009c0e <HAL_UART_Transmit+0x11c>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2221      	movs	r2, #33	@ 0x21
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b46:	f7fa fdbb 	bl	80046c0 <HAL_GetTick>
 8009b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	88fa      	ldrh	r2, [r7, #6]
 8009b56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b60:	d108      	bne.n	8009b74 <HAL_UART_Transmit+0x82>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	e003      	b.n	8009b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8009b84:	e02a      	b.n	8009bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2180      	movs	r1, #128	@ 0x80
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f000 fb1f 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e036      	b.n	8009c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	3302      	adds	r3, #2
 8009bba:	61bb      	str	r3, [r7, #24]
 8009bbc:	e007      	b.n	8009bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	781a      	ldrb	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1cf      	bne.n	8009b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	2140      	movs	r1, #64	@ 0x40
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 faef 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e006      	b.n	8009c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e000      	b.n	8009c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c0c:	2302      	movs	r3, #2
  }
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3720      	adds	r7, #32
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	4613      	mov	r3, r2
 8009c22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d11d      	bne.n	8009c6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <HAL_UART_Receive_IT+0x26>
 8009c36:	88fb      	ldrh	r3, [r7, #6]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e016      	b.n	8009c6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_UART_Receive_IT+0x38>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e00f      	b.n	8009c6e <HAL_UART_Receive_IT+0x58>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c5c:	88fb      	ldrh	r3, [r7, #6]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fb24 	bl	800a2b0 <UART_Start_Receive_IT>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	e000      	b.n	8009c6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c6c:	2302      	movs	r3, #2
  }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b0ba      	sub	sp, #232	@ 0xe8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cae:	f003 030f 	and.w	r3, r3, #15
 8009cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10f      	bne.n	8009cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <HAL_UART_IRQHandler+0x66>
 8009cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fc07 	bl	800a4ea <UART_Receive_IT>
      return;
 8009cdc:	e256      	b.n	800a18c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80de 	beq.w	8009ea4 <HAL_UART_IRQHandler+0x22c>
 8009ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d106      	bne.n	8009d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80d1 	beq.w	8009ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <HAL_UART_IRQHandler+0xae>
 8009d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d005      	beq.n	8009d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1e:	f043 0201 	orr.w	r2, r3, #1
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2a:	f003 0304 	and.w	r3, r3, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <HAL_UART_IRQHandler+0xd2>
 8009d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d005      	beq.n	8009d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d42:	f043 0202 	orr.w	r2, r3, #2
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00b      	beq.n	8009d6e <HAL_UART_IRQHandler+0xf6>
 8009d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d66:	f043 0204 	orr.w	r2, r3, #4
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d011      	beq.n	8009d9e <HAL_UART_IRQHandler+0x126>
 8009d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d105      	bne.n	8009d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d005      	beq.n	8009d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d96:	f043 0208 	orr.w	r2, r3, #8
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 81ed 	beq.w	800a182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d008      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x14e>
 8009db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fb92 	bl	800a4ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd0:	2b40      	cmp	r3, #64	@ 0x40
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2301      	moveq	r3, #1
 8009dd6:	2300      	movne	r3, #0
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	f003 0308 	and.w	r3, r3, #8
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d103      	bne.n	8009df2 <HAL_UART_IRQHandler+0x17a>
 8009dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d04f      	beq.n	8009e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fa9a 	bl	800a32c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e02:	2b40      	cmp	r3, #64	@ 0x40
 8009e04:	d141      	bne.n	8009e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3314      	adds	r3, #20
 8009e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1d9      	bne.n	8009e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d013      	beq.n	8009e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5e:	4a7d      	ldr	r2, [pc, #500]	@ (800a054 <HAL_UART_IRQHandler+0x3dc>)
 8009e60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fa fee2 	bl	8004c30 <HAL_DMA_Abort_IT>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d016      	beq.n	8009ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e80:	e00e      	b.n	8009ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f990 	bl	800a1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e88:	e00a      	b.n	8009ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f98c 	bl	800a1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e90:	e006      	b.n	8009ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f988 	bl	800a1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009e9e:	e170      	b.n	800a182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea0:	bf00      	nop
    return;
 8009ea2:	e16e      	b.n	800a182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	f040 814a 	bne.w	800a142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eb2:	f003 0310 	and.w	r3, r3, #16
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 8143 	beq.w	800a142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 813c 	beq.w	800a142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60bb      	str	r3, [r7, #8]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	60bb      	str	r3, [r7, #8]
 8009ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eea:	2b40      	cmp	r3, #64	@ 0x40
 8009eec:	f040 80b4 	bne.w	800a058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 8140 	beq.w	800a186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	f080 8139 	bcs.w	800a186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f26:	f000 8088 	beq.w	800a03a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	330c      	adds	r3, #12
 8009f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009f56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1d9      	bne.n	8009f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3314      	adds	r3, #20
 8009f7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3314      	adds	r3, #20
 8009f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e1      	bne.n	8009f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3314      	adds	r3, #20
 8009fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009fd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e3      	bne.n	8009fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a00a:	f023 0310 	bic.w	r3, r3, #16
 800a00e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	330c      	adds	r3, #12
 800a018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a01c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a01e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a022:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e3      	bne.n	8009ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a034:	4618      	mov	r0, r3
 800a036:	f7fa fd8b 	bl	8004b50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a042:	b29b      	uxth	r3, r3
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	b29b      	uxth	r3, r3
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f8b6 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a050:	e099      	b.n	800a186 <HAL_UART_IRQHandler+0x50e>
 800a052:	bf00      	nop
 800a054:	0800a3f3 	.word	0x0800a3f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a060:	b29b      	uxth	r3, r3
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 808b 	beq.w	800a18a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 8086 	beq.w	800a18a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	330c      	adds	r3, #12
 800a084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	e853 3f00 	ldrex	r3, [r3]
 800a08c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	330c      	adds	r3, #12
 800a09e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a0a2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e3      	bne.n	800a07e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3314      	adds	r3, #20
 800a0bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	f023 0301 	bic.w	r3, r3, #1
 800a0cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3314      	adds	r3, #20
 800a0d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a0da:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e2:	e841 2300 	strex	r3, r2, [r1]
 800a0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e3      	bne.n	800a0b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	330c      	adds	r3, #12
 800a102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0310 	bic.w	r3, r3, #16
 800a112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	330c      	adds	r3, #12
 800a11c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a120:	61fa      	str	r2, [r7, #28]
 800a122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a124:	69b9      	ldr	r1, [r7, #24]
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	e841 2300 	strex	r3, r2, [r1]
 800a12c:	617b      	str	r3, [r7, #20]
   return(result);
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e3      	bne.n	800a0fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f83e 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a140:	e023      	b.n	800a18a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d009      	beq.n	800a162 <HAL_UART_IRQHandler+0x4ea>
 800a14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f95d 	bl	800a41a <UART_Transmit_IT>
    return;
 800a160:	e014      	b.n	800a18c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00e      	beq.n	800a18c <HAL_UART_IRQHandler+0x514>
 800a16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d008      	beq.n	800a18c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f99d 	bl	800a4ba <UART_EndTransmit_IT>
    return;
 800a180:	e004      	b.n	800a18c <HAL_UART_IRQHandler+0x514>
    return;
 800a182:	bf00      	nop
 800a184:	e002      	b.n	800a18c <HAL_UART_IRQHandler+0x514>
      return;
 800a186:	bf00      	nop
 800a188:	e000      	b.n	800a18c <HAL_UART_IRQHandler+0x514>
      return;
 800a18a:	bf00      	nop
  }
}
 800a18c:	37e8      	adds	r7, #232	@ 0xe8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop

0800a194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b090      	sub	sp, #64	@ 0x40
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e4:	e050      	b.n	800a288 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d04c      	beq.n	800a288 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d007      	beq.n	800a204 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1f4:	f7fa fa64 	bl	80046c0 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a200:	429a      	cmp	r2, r3
 800a202:	d241      	bcs.n	800a288 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	330c      	adds	r3, #12
 800a20a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a216:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	330c      	adds	r3, #12
 800a222:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a224:	637a      	str	r2, [r7, #52]	@ 0x34
 800a226:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a22a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e5      	bne.n	800a204 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3314      	adds	r3, #20
 800a23e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	613b      	str	r3, [r7, #16]
   return(result);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f023 0301 	bic.w	r3, r3, #1
 800a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3314      	adds	r3, #20
 800a256:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a258:	623a      	str	r2, [r7, #32]
 800a25a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	69f9      	ldr	r1, [r7, #28]
 800a25e:	6a3a      	ldr	r2, [r7, #32]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	61bb      	str	r3, [r7, #24]
   return(result);
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e5      	bne.n	800a238 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2220      	movs	r2, #32
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2220      	movs	r2, #32
 800a278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e00f      	b.n	800a2a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	4013      	ands	r3, r2
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	bf0c      	ite	eq
 800a298:	2301      	moveq	r3, #1
 800a29a:	2300      	movne	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d09f      	beq.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3740      	adds	r7, #64	@ 0x40
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2222      	movs	r2, #34	@ 0x22
 800a2da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d007      	beq.n	800a2fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68da      	ldr	r2, [r3, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	695a      	ldr	r2, [r3, #20]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f042 0201 	orr.w	r2, r2, #1
 800a30c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f042 0220 	orr.w	r2, r2, #32
 800a31c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b095      	sub	sp, #84	@ 0x54
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	330c      	adds	r3, #12
 800a33a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33e:	e853 3f00 	ldrex	r3, [r3]
 800a342:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a34a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	330c      	adds	r3, #12
 800a352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a354:	643a      	str	r2, [r7, #64]	@ 0x40
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a35a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e5      	bne.n	800a334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3314      	adds	r3, #20
 800a36e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	61fb      	str	r3, [r7, #28]
   return(result);
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	f023 0301 	bic.w	r3, r3, #1
 800a37e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3314      	adds	r3, #20
 800a386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a388:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a38a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e5      	bne.n	800a368 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d119      	bne.n	800a3d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f023 0310 	bic.w	r3, r3, #16
 800a3ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330c      	adds	r3, #12
 800a3c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3c4:	61ba      	str	r2, [r7, #24]
 800a3c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6979      	ldr	r1, [r7, #20]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a3e6:	bf00      	nop
 800a3e8:	3754      	adds	r7, #84	@ 0x54
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fecb 	bl	800a1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a412:	bf00      	nop
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b085      	sub	sp, #20
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b21      	cmp	r3, #33	@ 0x21
 800a42c:	d13e      	bne.n	800a4ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a436:	d114      	bne.n	800a462 <UART_Transmit_IT+0x48>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d110      	bne.n	800a462 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	881b      	ldrh	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a454:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	1c9a      	adds	r2, r3, #2
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	621a      	str	r2, [r3, #32]
 800a460:	e008      	b.n	800a474 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6211      	str	r1, [r2, #32]
 800a46c:	781a      	ldrb	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a478:	b29b      	uxth	r3, r3
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	4619      	mov	r1, r3
 800a482:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10f      	bne.n	800a4a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a496:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68da      	ldr	r2, [r3, #12]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	e000      	b.n	800a4ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4ac:	2302      	movs	r3, #2
  }
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fe5a 	bl	800a194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b08c      	sub	sp, #48	@ 0x30
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b22      	cmp	r3, #34	@ 0x22
 800a4fc:	f040 80ab 	bne.w	800a656 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a508:	d117      	bne.n	800a53a <UART_Receive_IT+0x50>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d113      	bne.n	800a53a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	b29b      	uxth	r3, r3
 800a524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a528:	b29a      	uxth	r2, r3
 800a52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a532:	1c9a      	adds	r2, r3, #2
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	629a      	str	r2, [r3, #40]	@ 0x28
 800a538:	e026      	b.n	800a588 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a54c:	d007      	beq.n	800a55e <UART_Receive_IT+0x74>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <UART_Receive_IT+0x82>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d106      	bne.n	800a56c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	b2da      	uxtb	r2, r3
 800a566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	e008      	b.n	800a57e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	3b01      	subs	r3, #1
 800a590:	b29b      	uxth	r3, r3
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	4619      	mov	r1, r3
 800a596:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d15a      	bne.n	800a652 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0220 	bic.w	r2, r2, #32
 800a5aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a5ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	695a      	ldr	r2, [r3, #20]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f022 0201 	bic.w	r2, r2, #1
 800a5ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d135      	bne.n	800a648 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	330c      	adds	r3, #12
 800a5e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f023 0310 	bic.w	r3, r3, #16
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	330c      	adds	r3, #12
 800a600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a602:	623a      	str	r2, [r7, #32]
 800a604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a606:	69f9      	ldr	r1, [r7, #28]
 800a608:	6a3a      	ldr	r2, [r7, #32]
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e5      	bne.n	800a5e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0310 	and.w	r3, r3, #16
 800a620:	2b10      	cmp	r3, #16
 800a622:	d10a      	bne.n	800a63a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a624:	2300      	movs	r3, #0
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff fdbb 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
 800a646:	e002      	b.n	800a64e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7f8 fda9 	bl	80031a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	e002      	b.n	800a658 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	e000      	b.n	800a658 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a656:	2302      	movs	r3, #2
  }
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3730      	adds	r7, #48	@ 0x30
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a664:	b0c0      	sub	sp, #256	@ 0x100
 800a666:	af00      	add	r7, sp, #0
 800a668:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a67c:	68d9      	ldr	r1, [r3, #12]
 800a67e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	ea40 0301 	orr.w	r3, r0, r1
 800a688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	431a      	orrs	r2, r3
 800a698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a6b8:	f021 010c 	bic.w	r1, r1, #12
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6da:	6999      	ldr	r1, [r3, #24]
 800a6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	ea40 0301 	orr.w	r3, r0, r1
 800a6e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	4b8f      	ldr	r3, [pc, #572]	@ (800a92c <UART_SetConfig+0x2cc>)
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d005      	beq.n	800a700 <UART_SetConfig+0xa0>
 800a6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	4b8d      	ldr	r3, [pc, #564]	@ (800a930 <UART_SetConfig+0x2d0>)
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d104      	bne.n	800a70a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a700:	f7fe f8ce 	bl	80088a0 <HAL_RCC_GetPCLK2Freq>
 800a704:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a708:	e003      	b.n	800a712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a70a:	f7fe f8b5 	bl	8008878 <HAL_RCC_GetPCLK1Freq>
 800a70e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a71c:	f040 810c 	bne.w	800a938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a724:	2200      	movs	r2, #0
 800a726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a72a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a72e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a732:	4622      	mov	r2, r4
 800a734:	462b      	mov	r3, r5
 800a736:	1891      	adds	r1, r2, r2
 800a738:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a73a:	415b      	adcs	r3, r3
 800a73c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a73e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a742:	4621      	mov	r1, r4
 800a744:	eb12 0801 	adds.w	r8, r2, r1
 800a748:	4629      	mov	r1, r5
 800a74a:	eb43 0901 	adc.w	r9, r3, r1
 800a74e:	f04f 0200 	mov.w	r2, #0
 800a752:	f04f 0300 	mov.w	r3, #0
 800a756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a75a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a75e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a762:	4690      	mov	r8, r2
 800a764:	4699      	mov	r9, r3
 800a766:	4623      	mov	r3, r4
 800a768:	eb18 0303 	adds.w	r3, r8, r3
 800a76c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a770:	462b      	mov	r3, r5
 800a772:	eb49 0303 	adc.w	r3, r9, r3
 800a776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a786:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a78a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a78e:	460b      	mov	r3, r1
 800a790:	18db      	adds	r3, r3, r3
 800a792:	653b      	str	r3, [r7, #80]	@ 0x50
 800a794:	4613      	mov	r3, r2
 800a796:	eb42 0303 	adc.w	r3, r2, r3
 800a79a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a79c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a7a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a7a4:	f7f6 fa70 	bl	8000c88 <__aeabi_uldivmod>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4b61      	ldr	r3, [pc, #388]	@ (800a934 <UART_SetConfig+0x2d4>)
 800a7ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a7b2:	095b      	lsrs	r3, r3, #5
 800a7b4:	011c      	lsls	r4, r3, #4
 800a7b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a7c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	1891      	adds	r1, r2, r2
 800a7ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a7d0:	415b      	adcs	r3, r3
 800a7d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a7d8:	4641      	mov	r1, r8
 800a7da:	eb12 0a01 	adds.w	sl, r2, r1
 800a7de:	4649      	mov	r1, r9
 800a7e0:	eb43 0b01 	adc.w	fp, r3, r1
 800a7e4:	f04f 0200 	mov.w	r2, #0
 800a7e8:	f04f 0300 	mov.w	r3, #0
 800a7ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a7f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a7f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7f8:	4692      	mov	sl, r2
 800a7fa:	469b      	mov	fp, r3
 800a7fc:	4643      	mov	r3, r8
 800a7fe:	eb1a 0303 	adds.w	r3, sl, r3
 800a802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a806:	464b      	mov	r3, r9
 800a808:	eb4b 0303 	adc.w	r3, fp, r3
 800a80c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a81c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a824:	460b      	mov	r3, r1
 800a826:	18db      	adds	r3, r3, r3
 800a828:	643b      	str	r3, [r7, #64]	@ 0x40
 800a82a:	4613      	mov	r3, r2
 800a82c:	eb42 0303 	adc.w	r3, r2, r3
 800a830:	647b      	str	r3, [r7, #68]	@ 0x44
 800a832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a83a:	f7f6 fa25 	bl	8000c88 <__aeabi_uldivmod>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4611      	mov	r1, r2
 800a844:	4b3b      	ldr	r3, [pc, #236]	@ (800a934 <UART_SetConfig+0x2d4>)
 800a846:	fba3 2301 	umull	r2, r3, r3, r1
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	2264      	movs	r2, #100	@ 0x64
 800a84e:	fb02 f303 	mul.w	r3, r2, r3
 800a852:	1acb      	subs	r3, r1, r3
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a85a:	4b36      	ldr	r3, [pc, #216]	@ (800a934 <UART_SetConfig+0x2d4>)
 800a85c:	fba3 2302 	umull	r2, r3, r3, r2
 800a860:	095b      	lsrs	r3, r3, #5
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a868:	441c      	add	r4, r3
 800a86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a874:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a87c:	4642      	mov	r2, r8
 800a87e:	464b      	mov	r3, r9
 800a880:	1891      	adds	r1, r2, r2
 800a882:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a884:	415b      	adcs	r3, r3
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a88c:	4641      	mov	r1, r8
 800a88e:	1851      	adds	r1, r2, r1
 800a890:	6339      	str	r1, [r7, #48]	@ 0x30
 800a892:	4649      	mov	r1, r9
 800a894:	414b      	adcs	r3, r1
 800a896:	637b      	str	r3, [r7, #52]	@ 0x34
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	00cb      	lsls	r3, r1, #3
 800a8a8:	4651      	mov	r1, sl
 800a8aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ae:	4651      	mov	r1, sl
 800a8b0:	00ca      	lsls	r2, r1, #3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	460a      	mov	r2, r1
 800a8c4:	eb42 0303 	adc.w	r3, r2, r3
 800a8c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a8d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a8dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	18db      	adds	r3, r3, r3
 800a8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	eb42 0303 	adc.w	r3, r2, r3
 800a8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a8f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a8f6:	f7f6 f9c7 	bl	8000c88 <__aeabi_uldivmod>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <UART_SetConfig+0x2d4>)
 800a900:	fba3 1302 	umull	r1, r3, r3, r2
 800a904:	095b      	lsrs	r3, r3, #5
 800a906:	2164      	movs	r1, #100	@ 0x64
 800a908:	fb01 f303 	mul.w	r3, r1, r3
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	3332      	adds	r3, #50	@ 0x32
 800a912:	4a08      	ldr	r2, [pc, #32]	@ (800a934 <UART_SetConfig+0x2d4>)
 800a914:	fba2 2303 	umull	r2, r3, r2, r3
 800a918:	095b      	lsrs	r3, r3, #5
 800a91a:	f003 0207 	and.w	r2, r3, #7
 800a91e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4422      	add	r2, r4
 800a926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a928:	e106      	b.n	800ab38 <UART_SetConfig+0x4d8>
 800a92a:	bf00      	nop
 800a92c:	40011000 	.word	0x40011000
 800a930:	40011400 	.word	0x40011400
 800a934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a942:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a94a:	4642      	mov	r2, r8
 800a94c:	464b      	mov	r3, r9
 800a94e:	1891      	adds	r1, r2, r2
 800a950:	6239      	str	r1, [r7, #32]
 800a952:	415b      	adcs	r3, r3
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
 800a956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a95a:	4641      	mov	r1, r8
 800a95c:	1854      	adds	r4, r2, r1
 800a95e:	4649      	mov	r1, r9
 800a960:	eb43 0501 	adc.w	r5, r3, r1
 800a964:	f04f 0200 	mov.w	r2, #0
 800a968:	f04f 0300 	mov.w	r3, #0
 800a96c:	00eb      	lsls	r3, r5, #3
 800a96e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a972:	00e2      	lsls	r2, r4, #3
 800a974:	4614      	mov	r4, r2
 800a976:	461d      	mov	r5, r3
 800a978:	4643      	mov	r3, r8
 800a97a:	18e3      	adds	r3, r4, r3
 800a97c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a980:	464b      	mov	r3, r9
 800a982:	eb45 0303 	adc.w	r3, r5, r3
 800a986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	008b      	lsls	r3, r1, #2
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	008a      	lsls	r2, r1, #2
 800a9b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a9b8:	f7f6 f966 	bl	8000c88 <__aeabi_uldivmod>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4b60      	ldr	r3, [pc, #384]	@ (800ab44 <UART_SetConfig+0x4e4>)
 800a9c2:	fba3 2302 	umull	r2, r3, r3, r2
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	011c      	lsls	r4, r3, #4
 800a9ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a9d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a9dc:	4642      	mov	r2, r8
 800a9de:	464b      	mov	r3, r9
 800a9e0:	1891      	adds	r1, r2, r2
 800a9e2:	61b9      	str	r1, [r7, #24]
 800a9e4:	415b      	adcs	r3, r3
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9ec:	4641      	mov	r1, r8
 800a9ee:	1851      	adds	r1, r2, r1
 800a9f0:	6139      	str	r1, [r7, #16]
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	414b      	adcs	r3, r1
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	f04f 0200 	mov.w	r2, #0
 800a9fc:	f04f 0300 	mov.w	r3, #0
 800aa00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa04:	4659      	mov	r1, fp
 800aa06:	00cb      	lsls	r3, r1, #3
 800aa08:	4651      	mov	r1, sl
 800aa0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa0e:	4651      	mov	r1, sl
 800aa10:	00ca      	lsls	r2, r1, #3
 800aa12:	4610      	mov	r0, r2
 800aa14:	4619      	mov	r1, r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	4642      	mov	r2, r8
 800aa1a:	189b      	adds	r3, r3, r2
 800aa1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa20:	464b      	mov	r3, r9
 800aa22:	460a      	mov	r2, r1
 800aa24:	eb42 0303 	adc.w	r3, r2, r3
 800aa28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aa44:	4649      	mov	r1, r9
 800aa46:	008b      	lsls	r3, r1, #2
 800aa48:	4641      	mov	r1, r8
 800aa4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa4e:	4641      	mov	r1, r8
 800aa50:	008a      	lsls	r2, r1, #2
 800aa52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aa56:	f7f6 f917 	bl	8000c88 <__aeabi_uldivmod>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4b38      	ldr	r3, [pc, #224]	@ (800ab44 <UART_SetConfig+0x4e4>)
 800aa62:	fba3 2301 	umull	r2, r3, r3, r1
 800aa66:	095b      	lsrs	r3, r3, #5
 800aa68:	2264      	movs	r2, #100	@ 0x64
 800aa6a:	fb02 f303 	mul.w	r3, r2, r3
 800aa6e:	1acb      	subs	r3, r1, r3
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	3332      	adds	r3, #50	@ 0x32
 800aa74:	4a33      	ldr	r2, [pc, #204]	@ (800ab44 <UART_SetConfig+0x4e4>)
 800aa76:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa80:	441c      	add	r4, r3
 800aa82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa86:	2200      	movs	r2, #0
 800aa88:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa8a:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aa90:	4642      	mov	r2, r8
 800aa92:	464b      	mov	r3, r9
 800aa94:	1891      	adds	r1, r2, r2
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	415b      	adcs	r3, r3
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	1851      	adds	r1, r2, r1
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	414b      	adcs	r3, r1
 800aaaa:	607b      	str	r3, [r7, #4]
 800aaac:	f04f 0200 	mov.w	r2, #0
 800aab0:	f04f 0300 	mov.w	r3, #0
 800aab4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aab8:	4659      	mov	r1, fp
 800aaba:	00cb      	lsls	r3, r1, #3
 800aabc:	4651      	mov	r1, sl
 800aabe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aac2:	4651      	mov	r1, sl
 800aac4:	00ca      	lsls	r2, r1, #3
 800aac6:	4610      	mov	r0, r2
 800aac8:	4619      	mov	r1, r3
 800aaca:	4603      	mov	r3, r0
 800aacc:	4642      	mov	r2, r8
 800aace:	189b      	adds	r3, r3, r2
 800aad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aad2:	464b      	mov	r3, r9
 800aad4:	460a      	mov	r2, r1
 800aad6:	eb42 0303 	adc.w	r3, r2, r3
 800aada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	663b      	str	r3, [r7, #96]	@ 0x60
 800aae6:	667a      	str	r2, [r7, #100]	@ 0x64
 800aae8:	f04f 0200 	mov.w	r2, #0
 800aaec:	f04f 0300 	mov.w	r3, #0
 800aaf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	008b      	lsls	r3, r1, #2
 800aaf8:	4641      	mov	r1, r8
 800aafa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aafe:	4641      	mov	r1, r8
 800ab00:	008a      	lsls	r2, r1, #2
 800ab02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab06:	f7f6 f8bf 	bl	8000c88 <__aeabi_uldivmod>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab44 <UART_SetConfig+0x4e4>)
 800ab10:	fba3 1302 	umull	r1, r3, r3, r2
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	2164      	movs	r1, #100	@ 0x64
 800ab18:	fb01 f303 	mul.w	r3, r1, r3
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	3332      	adds	r3, #50	@ 0x32
 800ab22:	4a08      	ldr	r2, [pc, #32]	@ (800ab44 <UART_SetConfig+0x4e4>)
 800ab24:	fba2 2303 	umull	r2, r3, r2, r3
 800ab28:	095b      	lsrs	r3, r3, #5
 800ab2a:	f003 020f 	and.w	r2, r3, #15
 800ab2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4422      	add	r2, r4
 800ab36:	609a      	str	r2, [r3, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab44:	51eb851f 	.word	0x51eb851f

0800ab48 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ab48:	b084      	sub	sp, #16
 800ab4a:	b480      	push	{r7}
 800ab4c:	b085      	sub	sp, #20
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	f107 001c 	add.w	r0, r7, #28
 800ab56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ab5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ab60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ab62:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ab66:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ab68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ab6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ab6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ab6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ab72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800ab82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	b004      	add	sp, #16
 800ab9c:	4770      	bx	lr

0800ab9e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b083      	sub	sp, #12
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2203      	movs	r2, #3
 800abe6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0303 	and.w	r3, r3, #3
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b085      	sub	sp, #20
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac30:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ac36:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ac3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ac4c:	f023 030f 	bic.w	r3, r3, #15
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	b2db      	uxtb	r3, r3
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3314      	adds	r3, #20
 800ac8e:	461a      	mov	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	4413      	add	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
}  
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b085      	sub	sp, #20
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800accc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800acd2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800acd8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0

}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b088      	sub	sp, #32
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad10:	2340      	movs	r3, #64	@ 0x40
 800ad12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad1e:	f107 0308 	add.w	r3, r7, #8
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ff74 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ad2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad2e:	2110      	movs	r1, #16
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f9d7 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800ad36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad38:	69fb      	ldr	r3, [r7, #28]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b088      	sub	sp, #32
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad50:	2311      	movs	r3, #17
 800ad52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad54:	2340      	movs	r3, #64	@ 0x40
 800ad56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad62:	f107 0308 	add.w	r3, r7, #8
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff ff52 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ad6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad72:	2111      	movs	r1, #17
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 f9b5 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800ad7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3720      	adds	r7, #32
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b088      	sub	sp, #32
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad94:	2312      	movs	r3, #18
 800ad96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad98:	2340      	movs	r3, #64	@ 0x40
 800ad9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ada0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ada4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ada6:	f107 0308 	add.w	r3, r7, #8
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff ff30 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800adb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adb6:	2112      	movs	r1, #18
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f993 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800adbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc0:	69fb      	ldr	r3, [r7, #28]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b088      	sub	sp, #32
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800add8:	2318      	movs	r3, #24
 800adda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800addc:	2340      	movs	r3, #64	@ 0x40
 800adde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ade4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ade8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adea:	f107 0308 	add.w	r3, r7, #8
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff ff0e 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800adf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adfa:	2118      	movs	r1, #24
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f971 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800ae02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae04:	69fb      	ldr	r3, [r7, #28]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3720      	adds	r7, #32
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b088      	sub	sp, #32
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae1c:	2319      	movs	r3, #25
 800ae1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae20:	2340      	movs	r3, #64	@ 0x40
 800ae22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae2e:	f107 0308 	add.w	r3, r7, #8
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff feec 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ae3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae3e:	2119      	movs	r1, #25
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f94f 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800ae46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae48:	69fb      	ldr	r3, [r7, #28]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3720      	adds	r7, #32
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae60:	230c      	movs	r3, #12
 800ae62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae64:	2340      	movs	r3, #64	@ 0x40
 800ae66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff feca 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ae7e:	4a05      	ldr	r2, [pc, #20]	@ (800ae94 <SDMMC_CmdStopTransfer+0x40>)
 800ae80:	210c      	movs	r1, #12
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f92e 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800ae88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3720      	adds	r7, #32
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	05f5e100 	.word	0x05f5e100

0800ae98 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	@ 0x28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aea8:	2307      	movs	r3, #7
 800aeaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aeac:	2340      	movs	r3, #64	@ 0x40
 800aeae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeb8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeba:	f107 0310 	add.w	r3, r7, #16
 800aebe:	4619      	mov	r1, r3
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7ff fea6 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800aec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aeca:	2107      	movs	r1, #7
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f909 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800aed2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3728      	adds	r7, #40	@ 0x28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b088      	sub	sp, #32
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800aeee:	2300      	movs	r3, #0
 800aef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aefa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aefc:	f107 0308 	add.w	r3, r7, #8
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fe85 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fb23 	bl	800b554 <SDMMC_GetCmdError>
 800af0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af10:	69fb      	ldr	r3, [r7, #28]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3720      	adds	r7, #32
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b088      	sub	sp, #32
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af22:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800af26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af28:	2308      	movs	r3, #8
 800af2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af2c:	2340      	movs	r3, #64	@ 0x40
 800af2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af3a:	f107 0308 	add.w	r3, r7, #8
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff fe66 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fab6 	bl	800b4b8 <SDMMC_GetCmdResp7>
 800af4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4e:	69fb      	ldr	r3, [r7, #28]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af66:	2337      	movs	r3, #55	@ 0x37
 800af68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af6a:	2340      	movs	r3, #64	@ 0x40
 800af6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af78:	f107 0308 	add.w	r3, r7, #8
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fe47 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800af84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af88:	2137      	movs	r1, #55	@ 0x37
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f8aa 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800af90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af92:	69fb      	ldr	r3, [r7, #28]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3720      	adds	r7, #32
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800afac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800afb2:	2329      	movs	r3, #41	@ 0x29
 800afb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afb6:	2340      	movs	r3, #64	@ 0x40
 800afb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afc4:	f107 0308 	add.w	r3, r7, #8
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fe21 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f9bd 	bl	800b350 <SDMMC_GetCmdResp3>
 800afd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd8:	69fb      	ldr	r3, [r7, #28]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b088      	sub	sp, #32
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afee:	2302      	movs	r3, #2
 800aff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aff2:	23c0      	movs	r3, #192	@ 0xc0
 800aff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800affa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800affe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b000:	f107 0308 	add.w	r3, r7, #8
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff fe03 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f957 	bl	800b2c0 <SDMMC_GetCmdResp2>
 800b012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b014:	69fb      	ldr	r3, [r7, #28]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3720      	adds	r7, #32
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b088      	sub	sp, #32
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b02c:	2309      	movs	r3, #9
 800b02e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b030:	23c0      	movs	r3, #192	@ 0xc0
 800b032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b034:	2300      	movs	r3, #0
 800b036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b03c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b03e:	f107 0308 	add.w	r3, r7, #8
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff fde4 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f938 	bl	800b2c0 <SDMMC_GetCmdResp2>
 800b050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b06a:	2303      	movs	r3, #3
 800b06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b06e:	2340      	movs	r3, #64	@ 0x40
 800b070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b072:	2300      	movs	r3, #0
 800b074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b07a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b07c:	f107 0308 	add.w	r3, r7, #8
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff fdc5 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	2103      	movs	r1, #3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f99d 	bl	800b3cc <SDMMC_GetCmdResp6>
 800b092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b094:	69fb      	ldr	r3, [r7, #28]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b088      	sub	sp, #32
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0ac:	230d      	movs	r3, #13
 800b0ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0b0:	2340      	movs	r3, #64	@ 0x40
 800b0b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0be:	f107 0308 	add.w	r3, r7, #8
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff fda4 	bl	800ac12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b0ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ce:	210d      	movs	r1, #13
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f807 	bl	800b0e4 <SDMMC_GetCmdResp1>
 800b0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d8:	69fb      	ldr	r3, [r7, #28]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0f2:	4b70      	ldr	r3, [pc, #448]	@ (800b2b4 <SDMMC_GetCmdResp1+0x1d0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a70      	ldr	r2, [pc, #448]	@ (800b2b8 <SDMMC_GetCmdResp1+0x1d4>)
 800b0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0fc:	0a5a      	lsrs	r2, r3, #9
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	61fa      	str	r2, [r7, #28]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b110:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b114:	e0c9      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b11a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0ef      	beq.n	800b106 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1ea      	bne.n	800b106 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2204      	movs	r2, #4
 800b140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b142:	2304      	movs	r3, #4
 800b144:	e0b1      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b158:	2301      	movs	r3, #1
 800b15a:	e0a6      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	22c5      	movs	r2, #197	@ 0xc5
 800b160:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fd7f 	bl	800ac66 <SDIO_GetCommandResponse>
 800b168:	4603      	mov	r3, r0
 800b16a:	461a      	mov	r2, r3
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	4293      	cmp	r3, r2
 800b170:	d001      	beq.n	800b176 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b172:	2301      	movs	r3, #1
 800b174:	e099      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b176:	2100      	movs	r1, #0
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff fd81 	bl	800ac80 <SDIO_GetResponse>
 800b17e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	4b4e      	ldr	r3, [pc, #312]	@ (800b2bc <SDMMC_GetCmdResp1+0x1d8>)
 800b184:	4013      	ands	r3, r2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e08d      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	da02      	bge.n	800b19a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b194:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b198:	e087      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1a4:	2340      	movs	r3, #64	@ 0x40
 800b1a6:	e080      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1b2:	2380      	movs	r3, #128	@ 0x80
 800b1b4:	e079      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1c4:	e071      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1d4:	e069      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1e4:	e061      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1f4:	e059      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b204:	e051      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b210:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b214:	e049      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b220:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b224:	e041      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b234:	e039      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b240:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b244:	e031      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b250:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b254:	e029      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b260:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b264:	e021      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b270:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b274:	e019      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b280:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b284:	e011      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b290:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b294:	e009      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f003 0308 	and.w	r3, r3, #8
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2a0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b2a4:	e001      	b.n	800b2aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000020 	.word	0x20000020
 800b2b8:	10624dd3 	.word	0x10624dd3
 800b2bc:	fdffe008 	.word	0xfdffe008

0800b2c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2c8:	4b1f      	ldr	r3, [pc, #124]	@ (800b348 <SDMMC_GetCmdResp2+0x88>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1f      	ldr	r2, [pc, #124]	@ (800b34c <SDMMC_GetCmdResp2+0x8c>)
 800b2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d2:	0a5b      	lsrs	r3, r3, #9
 800b2d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2d8:	fb02 f303 	mul.w	r3, r2, r3
 800b2dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	1e5a      	subs	r2, r3, #1
 800b2e2:	60fa      	str	r2, [r7, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2ec:	e026      	b.n	800b33c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0ef      	beq.n	800b2de <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1ea      	bne.n	800b2de <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d004      	beq.n	800b31e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2204      	movs	r2, #4
 800b318:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b31a:	2304      	movs	r3, #4
 800b31c:	e00e      	b.n	800b33c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	d004      	beq.n	800b334 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b330:	2301      	movs	r3, #1
 800b332:	e003      	b.n	800b33c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	22c5      	movs	r2, #197	@ 0xc5
 800b338:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	20000020 	.word	0x20000020
 800b34c:	10624dd3 	.word	0x10624dd3

0800b350 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b358:	4b1a      	ldr	r3, [pc, #104]	@ (800b3c4 <SDMMC_GetCmdResp3+0x74>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a1a      	ldr	r2, [pc, #104]	@ (800b3c8 <SDMMC_GetCmdResp3+0x78>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	0a5b      	lsrs	r3, r3, #9
 800b364:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b368:	fb02 f303 	mul.w	r3, r2, r3
 800b36c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	1e5a      	subs	r2, r3, #1
 800b372:	60fa      	str	r2, [r7, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b378:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b37c:	e01b      	b.n	800b3b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b382:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0ef      	beq.n	800b36e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1ea      	bne.n	800b36e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3aa:	2304      	movs	r3, #4
 800b3ac:	e003      	b.n	800b3b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	22c5      	movs	r2, #197	@ 0xc5
 800b3b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000020 	.word	0x20000020
 800b3c8:	10624dd3 	.word	0x10624dd3

0800b3cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3da:	4b35      	ldr	r3, [pc, #212]	@ (800b4b0 <SDMMC_GetCmdResp6+0xe4>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a35      	ldr	r2, [pc, #212]	@ (800b4b4 <SDMMC_GetCmdResp6+0xe8>)
 800b3e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e4:	0a5b      	lsrs	r3, r3, #9
 800b3e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3ea:	fb02 f303 	mul.w	r3, r2, r3
 800b3ee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	61fa      	str	r2, [r7, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d102      	bne.n	800b400 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3fe:	e052      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b404:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0ef      	beq.n	800b3f0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1ea      	bne.n	800b3f0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	d004      	beq.n	800b430 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2204      	movs	r2, #4
 800b42a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b42c:	2304      	movs	r3, #4
 800b42e:	e03a      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d004      	beq.n	800b446 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2201      	movs	r2, #1
 800b440:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b442:	2301      	movs	r3, #1
 800b444:	e02f      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fc0d 	bl	800ac66 <SDIO_GetCommandResponse>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	4293      	cmp	r3, r2
 800b454:	d001      	beq.n	800b45a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b456:	2301      	movs	r3, #1
 800b458:	e025      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	22c5      	movs	r2, #197	@ 0xc5
 800b45e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b460:	2100      	movs	r1, #0
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7ff fc0c 	bl	800ac80 <SDIO_GetResponse>
 800b468:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	0c1b      	lsrs	r3, r3, #16
 800b478:	b29a      	uxth	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b47e:	2300      	movs	r3, #0
 800b480:	e011      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b48c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b490:	e009      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b49c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4a0:	e001      	b.n	800b4a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20000020 	.word	0x20000020
 800b4b4:	10624dd3 	.word	0x10624dd3

0800b4b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4c0:	4b22      	ldr	r3, [pc, #136]	@ (800b54c <SDMMC_GetCmdResp7+0x94>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a22      	ldr	r2, [pc, #136]	@ (800b550 <SDMMC_GetCmdResp7+0x98>)
 800b4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ca:	0a5b      	lsrs	r3, r3, #9
 800b4cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4d0:	fb02 f303 	mul.w	r3, r2, r3
 800b4d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	1e5a      	subs	r2, r3, #1
 800b4da:	60fa      	str	r2, [r7, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4e4:	e02c      	b.n	800b540 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0ef      	beq.n	800b4d6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1ea      	bne.n	800b4d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2204      	movs	r2, #4
 800b510:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b512:	2304      	movs	r3, #4
 800b514:	e014      	b.n	800b540 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b528:	2301      	movs	r3, #1
 800b52a:	e009      	b.n	800b540 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2240      	movs	r2, #64	@ 0x40
 800b53c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b53e:	2300      	movs	r3, #0
  
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	20000020 	.word	0x20000020
 800b550:	10624dd3 	.word	0x10624dd3

0800b554 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b55c:	4b11      	ldr	r3, [pc, #68]	@ (800b5a4 <SDMMC_GetCmdError+0x50>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a11      	ldr	r2, [pc, #68]	@ (800b5a8 <SDMMC_GetCmdError+0x54>)
 800b562:	fba2 2303 	umull	r2, r3, r2, r3
 800b566:	0a5b      	lsrs	r3, r3, #9
 800b568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b56c:	fb02 f303 	mul.w	r3, r2, r3
 800b570:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	1e5a      	subs	r2, r3, #1
 800b576:	60fa      	str	r2, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b57c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b580:	e009      	b.n	800b596 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0f1      	beq.n	800b572 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	22c5      	movs	r2, #197	@ 0xc5
 800b592:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20000020 	.word	0x20000020
 800b5a8:	10624dd3 	.word	0x10624dd3

0800b5ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b5b0:	4904      	ldr	r1, [pc, #16]	@ (800b5c4 <MX_FATFS_Init+0x18>)
 800b5b2:	4805      	ldr	r0, [pc, #20]	@ (800b5c8 <MX_FATFS_Init+0x1c>)
 800b5b4:	f003 f81e 	bl	800e5f4 <FATFS_LinkDriver>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4b03      	ldr	r3, [pc, #12]	@ (800b5cc <MX_FATFS_Init+0x20>)
 800b5be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b5c0:	bf00      	nop
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	200057f0 	.word	0x200057f0
 800b5c8:	0801468c 	.word	0x0801468c
 800b5cc:	200057ec 	.word	0x200057ec

0800b5d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b5d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b5ea:	f000 f86b 	bl	800b6c4 <BSP_SD_IsDetected>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d001      	beq.n	800b5f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e005      	b.n	800b604 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b5f8:	4804      	ldr	r0, [pc, #16]	@ (800b60c <BSP_SD_Init+0x2c>)
 800b5fa:	f7fd faa5 	bl	8008b48 <HAL_SD_Init>
 800b5fe:	4603      	mov	r3, r0
 800b600:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b602:	79fb      	ldrb	r3, [r7, #7]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20000418 	.word	0x20000418

0800b610 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af02      	add	r7, sp, #8
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	68f9      	ldr	r1, [r7, #12]
 800b62c:	4806      	ldr	r0, [pc, #24]	@ (800b648 <BSP_SD_ReadBlocks+0x38>)
 800b62e:	f7fd fb3b 	bl	8008ca8 <HAL_SD_ReadBlocks>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	20000418 	.word	0x20000418

0800b64c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af02      	add	r7, sp, #8
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	4806      	ldr	r0, [pc, #24]	@ (800b684 <BSP_SD_WriteBlocks+0x38>)
 800b66a:	f7fd fcfb 	bl	8009064 <HAL_SD_WriteBlocks>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b678:	7dfb      	ldrb	r3, [r7, #23]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000418 	.word	0x20000418

0800b688 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b68c:	4805      	ldr	r0, [pc, #20]	@ (800b6a4 <BSP_SD_GetCardState+0x1c>)
 800b68e:	f7fe f83f 	bl	8009710 <HAL_SD_GetCardState>
 800b692:	4603      	mov	r3, r0
 800b694:	2b04      	cmp	r3, #4
 800b696:	bf14      	ite	ne
 800b698:	2301      	movne	r3, #1
 800b69a:	2300      	moveq	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000418 	.word	0x20000418

0800b6a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b6b0:	6879      	ldr	r1, [r7, #4]
 800b6b2:	4803      	ldr	r0, [pc, #12]	@ (800b6c0 <BSP_SD_GetCardInfo+0x18>)
 800b6b4:	f7fe f800 	bl	80096b8 <HAL_SD_GetCardInfo>
}
 800b6b8:	bf00      	nop
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	20000418 	.word	0x20000418

0800b6c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	b2db      	uxtb	r3, r3
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b718 <SD_CheckStatus+0x38>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b6f0:	f7ff ffca 	bl	800b688 <BSP_SD_GetCardState>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d107      	bne.n	800b70a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b6fa:	4b07      	ldr	r3, [pc, #28]	@ (800b718 <SD_CheckStatus+0x38>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f023 0301 	bic.w	r3, r3, #1
 800b704:	b2da      	uxtb	r2, r3
 800b706:	4b04      	ldr	r3, [pc, #16]	@ (800b718 <SD_CheckStatus+0x38>)
 800b708:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b70a:	4b03      	ldr	r3, [pc, #12]	@ (800b718 <SD_CheckStatus+0x38>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b2db      	uxtb	r3, r3
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20000029 	.word	0x20000029

0800b71c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b726:	4b0b      	ldr	r3, [pc, #44]	@ (800b754 <SD_initialize+0x38>)
 800b728:	2201      	movs	r2, #1
 800b72a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b72c:	f7ff ff58 	bl	800b5e0 <BSP_SD_Init>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d107      	bne.n	800b746 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff ffd1 	bl	800b6e0 <SD_CheckStatus>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	4b04      	ldr	r3, [pc, #16]	@ (800b754 <SD_initialize+0x38>)
 800b744:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b746:	4b03      	ldr	r3, [pc, #12]	@ (800b754 <SD_initialize+0x38>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20000029 	.word	0x20000029

0800b758 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff ffbb 	bl	800b6e0 <SD_CheckStatus>
 800b76a:	4603      	mov	r3, r0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b788:	f04f 33ff 	mov.w	r3, #4294967295
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	68b8      	ldr	r0, [r7, #8]
 800b792:	f7ff ff3d 	bl	800b610 <BSP_SD_ReadBlocks>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d107      	bne.n	800b7ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b79c:	bf00      	nop
 800b79e:	f7ff ff73 	bl	800b688 <BSP_SD_GetCardState>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1fa      	bne.n	800b79e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b086      	sub	sp, #24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	68b8      	ldr	r0, [r7, #8]
 800b7d4:	f7ff ff3a 	bl	800b64c <BSP_SD_WriteBlocks>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d107      	bne.n	800b7ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b7de:	bf00      	nop
 800b7e0:	f7ff ff52 	bl	800b688 <BSP_SD_GetCardState>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1fa      	bne.n	800b7e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08c      	sub	sp, #48	@ 0x30
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	603a      	str	r2, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
 800b804:	460b      	mov	r3, r1
 800b806:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b80e:	4b25      	ldr	r3, [pc, #148]	@ (800b8a4 <SD_ioctl+0xac>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	b2db      	uxtb	r3, r3
 800b814:	f003 0301 	and.w	r3, r3, #1
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <SD_ioctl+0x28>
 800b81c:	2303      	movs	r3, #3
 800b81e:	e03c      	b.n	800b89a <SD_ioctl+0xa2>

  switch (cmd)
 800b820:	79bb      	ldrb	r3, [r7, #6]
 800b822:	2b03      	cmp	r3, #3
 800b824:	d834      	bhi.n	800b890 <SD_ioctl+0x98>
 800b826:	a201      	add	r2, pc, #4	@ (adr r2, 800b82c <SD_ioctl+0x34>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b83d 	.word	0x0800b83d
 800b830:	0800b845 	.word	0x0800b845
 800b834:	0800b85d 	.word	0x0800b85d
 800b838:	0800b877 	.word	0x0800b877
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b842:	e028      	b.n	800b896 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b844:	f107 030c 	add.w	r3, r7, #12
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff ff2d 	bl	800b6a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b84e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b85a:	e01c      	b.n	800b896 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b85c:	f107 030c 	add.w	r3, r7, #12
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff ff21 	bl	800b6a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b868:	b29a      	uxth	r2, r3
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b874:	e00f      	b.n	800b896 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b876:	f107 030c 	add.w	r3, r7, #12
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7ff ff14 	bl	800b6a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b882:	0a5a      	lsrs	r2, r3, #9
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b88e:	e002      	b.n	800b896 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b890:	2304      	movs	r3, #4
 800b892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3730      	adds	r7, #48	@ 0x30
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000029 	.word	0x20000029

0800b8a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	4a08      	ldr	r2, [pc, #32]	@ (800b8d8 <disk_status+0x30>)
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	79fa      	ldrb	r2, [r7, #7]
 800b8c0:	4905      	ldr	r1, [pc, #20]	@ (800b8d8 <disk_status+0x30>)
 800b8c2:	440a      	add	r2, r1
 800b8c4:	7a12      	ldrb	r2, [r2, #8]
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4798      	blx	r3
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	2000581c 	.word	0x2000581c

0800b8dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b8ea:	79fb      	ldrb	r3, [r7, #7]
 800b8ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b924 <disk_initialize+0x48>)
 800b8ee:	5cd3      	ldrb	r3, [r2, r3]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d111      	bne.n	800b918 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b8f4:	79fb      	ldrb	r3, [r7, #7]
 800b8f6:	4a0b      	ldr	r2, [pc, #44]	@ (800b924 <disk_initialize+0x48>)
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	4a09      	ldr	r2, [pc, #36]	@ (800b924 <disk_initialize+0x48>)
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	79fa      	ldrb	r2, [r7, #7]
 800b90a:	4906      	ldr	r1, [pc, #24]	@ (800b924 <disk_initialize+0x48>)
 800b90c:	440a      	add	r2, r1
 800b90e:	7a12      	ldrb	r2, [r2, #8]
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	2000581c 	.word	0x2000581c

0800b928 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	4a0a      	ldr	r2, [pc, #40]	@ (800b964 <disk_read+0x3c>)
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	689c      	ldr	r4, [r3, #8]
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	4a07      	ldr	r2, [pc, #28]	@ (800b964 <disk_read+0x3c>)
 800b948:	4413      	add	r3, r2
 800b94a:	7a18      	ldrb	r0, [r3, #8]
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	47a0      	blx	r4
 800b954:	4603      	mov	r3, r0
 800b956:	75fb      	strb	r3, [r7, #23]
  return res;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd90      	pop	{r4, r7, pc}
 800b962:	bf00      	nop
 800b964:	2000581c 	.word	0x2000581c

0800b968 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b968:	b590      	push	{r4, r7, lr}
 800b96a:	b087      	sub	sp, #28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	4a0a      	ldr	r2, [pc, #40]	@ (800b9a4 <disk_write+0x3c>)
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	68dc      	ldr	r4, [r3, #12]
 800b984:	7bfb      	ldrb	r3, [r7, #15]
 800b986:	4a07      	ldr	r2, [pc, #28]	@ (800b9a4 <disk_write+0x3c>)
 800b988:	4413      	add	r3, r2
 800b98a:	7a18      	ldrb	r0, [r3, #8]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	68b9      	ldr	r1, [r7, #8]
 800b992:	47a0      	blx	r4
 800b994:	4603      	mov	r3, r0
 800b996:	75fb      	strb	r3, [r7, #23]
  return res;
 800b998:	7dfb      	ldrb	r3, [r7, #23]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd90      	pop	{r4, r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	2000581c 	.word	0x2000581c

0800b9a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	603a      	str	r2, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	4a09      	ldr	r2, [pc, #36]	@ (800b9e0 <disk_ioctl+0x38>)
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	79fa      	ldrb	r2, [r7, #7]
 800b9c6:	4906      	ldr	r1, [pc, #24]	@ (800b9e0 <disk_ioctl+0x38>)
 800b9c8:	440a      	add	r2, r1
 800b9ca:	7a10      	ldrb	r0, [r2, #8]
 800b9cc:	79b9      	ldrb	r1, [r7, #6]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	4798      	blx	r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	2000581c 	.word	0x2000581c

0800b9e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b9f4:	89fb      	ldrh	r3, [r7, #14]
 800b9f6:	021b      	lsls	r3, r3, #8
 800b9f8:	b21a      	sxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	b21b      	sxth	r3, r3
 800ba00:	4313      	orrs	r3, r2
 800ba02:	b21b      	sxth	r3, r3
 800ba04:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba06:	89fb      	ldrh	r3, [r7, #14]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3303      	adds	r3, #3
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	3202      	adds	r2, #2
 800ba2c:	7812      	ldrb	r2, [r2, #0]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	021b      	lsls	r3, r3, #8
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	3201      	adds	r2, #1
 800ba3a:	7812      	ldrb	r2, [r2, #0]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	7812      	ldrb	r2, [r2, #0]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	887a      	ldrh	r2, [r7, #2]
 800ba6e:	b2d2      	uxtb	r2, r2
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	887b      	ldrh	r3, [r7, #2]
 800ba74:	0a1b      	lsrs	r3, r3, #8
 800ba76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	607a      	str	r2, [r7, #4]
 800ba7e:	887a      	ldrh	r2, [r7, #2]
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	701a      	strb	r2, [r3, #0]
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	0a1b      	lsrs	r3, r3, #8
 800baaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	607a      	str	r2, [r7, #4]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	b2d2      	uxtb	r2, r2
 800bab6:	701a      	strb	r2, [r3, #0]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	0a1b      	lsrs	r3, r3, #8
 800babc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	0a1b      	lsrs	r3, r3, #8
 800bace:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	607a      	str	r2, [r7, #4]
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	b2d2      	uxtb	r2, r2
 800bada:	701a      	strb	r2, [r3, #0]
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bae8:	b480      	push	{r7}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00d      	beq.n	800bb1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	1c53      	adds	r3, r2, #1
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	6179      	str	r1, [r7, #20]
 800bb0e:	7812      	ldrb	r2, [r2, #0]
 800bb10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	607b      	str	r3, [r7, #4]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1f1      	bne.n	800bb02 <mem_cpy+0x1a>
	}
}
 800bb1e:	bf00      	nop
 800bb20:	371c      	adds	r7, #28
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb2a:	b480      	push	{r7}
 800bb2c:	b087      	sub	sp, #28
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	60b9      	str	r1, [r7, #8]
 800bb34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	617a      	str	r2, [r7, #20]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	b2d2      	uxtb	r2, r2
 800bb44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	607b      	str	r3, [r7, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1f3      	bne.n	800bb3a <mem_set+0x10>
}
 800bb52:	bf00      	nop
 800bb54:	bf00      	nop
 800bb56:	371c      	adds	r7, #28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb60:	b480      	push	{r7}
 800bb62:	b089      	sub	sp, #36	@ 0x24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	61fa      	str	r2, [r7, #28]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	4619      	mov	r1, r3
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	1c5a      	adds	r2, r3, #1
 800bb86:	61ba      	str	r2, [r7, #24]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	1acb      	subs	r3, r1, r3
 800bb8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	607b      	str	r3, [r7, #4]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <mem_cmp+0x40>
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d0eb      	beq.n	800bb78 <mem_cmp+0x18>

	return r;
 800bba0:	697b      	ldr	r3, [r7, #20]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3724      	adds	r7, #36	@ 0x24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bbb8:	e002      	b.n	800bbc0 <chk_chr+0x12>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	607b      	str	r3, [r7, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <chk_chr+0x26>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d1f2      	bne.n	800bbba <chk_chr+0xc>
	return *str;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60bb      	str	r3, [r7, #8]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	e029      	b.n	800bc4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bbf8:	4a27      	ldr	r2, [pc, #156]	@ (800bc98 <chk_lock+0xb4>)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	011b      	lsls	r3, r3, #4
 800bbfe:	4413      	add	r3, r2
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d01d      	beq.n	800bc42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc06:	4a24      	ldr	r2, [pc, #144]	@ (800bc98 <chk_lock+0xb4>)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	011b      	lsls	r3, r3, #4
 800bc0c:	4413      	add	r3, r2
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d116      	bne.n	800bc46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc18:	4a1f      	ldr	r2, [pc, #124]	@ (800bc98 <chk_lock+0xb4>)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	4413      	add	r3, r2
 800bc20:	3304      	adds	r3, #4
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d10c      	bne.n	800bc46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bc98 <chk_lock+0xb4>)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	011b      	lsls	r3, r3, #4
 800bc32:	4413      	add	r3, r2
 800bc34:	3308      	adds	r3, #8
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d102      	bne.n	800bc46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc40:	e007      	b.n	800bc52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc42:	2301      	movs	r3, #1
 800bc44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d9d2      	bls.n	800bbf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d109      	bne.n	800bc6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d102      	bne.n	800bc64 <chk_lock+0x80>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d101      	bne.n	800bc68 <chk_lock+0x84>
 800bc64:	2300      	movs	r3, #0
 800bc66:	e010      	b.n	800bc8a <chk_lock+0xa6>
 800bc68:	2312      	movs	r3, #18
 800bc6a:	e00e      	b.n	800bc8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d108      	bne.n	800bc84 <chk_lock+0xa0>
 800bc72:	4a09      	ldr	r2, [pc, #36]	@ (800bc98 <chk_lock+0xb4>)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	4413      	add	r3, r2
 800bc7a:	330c      	adds	r3, #12
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc82:	d101      	bne.n	800bc88 <chk_lock+0xa4>
 800bc84:	2310      	movs	r3, #16
 800bc86:	e000      	b.n	800bc8a <chk_lock+0xa6>
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	200057fc 	.word	0x200057fc

0800bc9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bca2:	2300      	movs	r3, #0
 800bca4:	607b      	str	r3, [r7, #4]
 800bca6:	e002      	b.n	800bcae <enq_lock+0x12>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	607b      	str	r3, [r7, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d806      	bhi.n	800bcc2 <enq_lock+0x26>
 800bcb4:	4a09      	ldr	r2, [pc, #36]	@ (800bcdc <enq_lock+0x40>)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	011b      	lsls	r3, r3, #4
 800bcba:	4413      	add	r3, r2
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1f2      	bne.n	800bca8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	bf14      	ite	ne
 800bcc8:	2301      	movne	r3, #1
 800bcca:	2300      	moveq	r3, #0
 800bccc:	b2db      	uxtb	r3, r3
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	200057fc 	.word	0x200057fc

0800bce0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
 800bcee:	e01f      	b.n	800bd30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bcf0:	4a41      	ldr	r2, [pc, #260]	@ (800bdf8 <inc_lock+0x118>)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	011b      	lsls	r3, r3, #4
 800bcf6:	4413      	add	r3, r2
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d113      	bne.n	800bd2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd02:	4a3d      	ldr	r2, [pc, #244]	@ (800bdf8 <inc_lock+0x118>)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	4413      	add	r3, r2
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d109      	bne.n	800bd2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd16:	4a38      	ldr	r2, [pc, #224]	@ (800bdf8 <inc_lock+0x118>)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3308      	adds	r3, #8
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d006      	beq.n	800bd38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d9dc      	bls.n	800bcf0 <inc_lock+0x10>
 800bd36:	e000      	b.n	800bd3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d132      	bne.n	800bda6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]
 800bd44:	e002      	b.n	800bd4c <inc_lock+0x6c>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d806      	bhi.n	800bd60 <inc_lock+0x80>
 800bd52:	4a29      	ldr	r2, [pc, #164]	@ (800bdf8 <inc_lock+0x118>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	011b      	lsls	r3, r3, #4
 800bd58:	4413      	add	r3, r2
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f2      	bne.n	800bd46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d101      	bne.n	800bd6a <inc_lock+0x8a>
 800bd66:	2300      	movs	r3, #0
 800bd68:	e040      	b.n	800bdec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	4922      	ldr	r1, [pc, #136]	@ (800bdf8 <inc_lock+0x118>)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	440b      	add	r3, r1
 800bd76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	491e      	ldr	r1, [pc, #120]	@ (800bdf8 <inc_lock+0x118>)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	011b      	lsls	r3, r3, #4
 800bd82:	440b      	add	r3, r1
 800bd84:	3304      	adds	r3, #4
 800bd86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	695a      	ldr	r2, [r3, #20]
 800bd8c:	491a      	ldr	r1, [pc, #104]	@ (800bdf8 <inc_lock+0x118>)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	011b      	lsls	r3, r3, #4
 800bd92:	440b      	add	r3, r1
 800bd94:	3308      	adds	r3, #8
 800bd96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bd98:	4a17      	ldr	r2, [pc, #92]	@ (800bdf8 <inc_lock+0x118>)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	4413      	add	r3, r2
 800bda0:	330c      	adds	r3, #12
 800bda2:	2200      	movs	r2, #0
 800bda4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d009      	beq.n	800bdc0 <inc_lock+0xe0>
 800bdac:	4a12      	ldr	r2, [pc, #72]	@ (800bdf8 <inc_lock+0x118>)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	011b      	lsls	r3, r3, #4
 800bdb2:	4413      	add	r3, r2
 800bdb4:	330c      	adds	r3, #12
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <inc_lock+0xe0>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e015      	b.n	800bdec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d108      	bne.n	800bdd8 <inc_lock+0xf8>
 800bdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800bdf8 <inc_lock+0x118>)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	011b      	lsls	r3, r3, #4
 800bdcc:	4413      	add	r3, r2
 800bdce:	330c      	adds	r3, #12
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	e001      	b.n	800bddc <inc_lock+0xfc>
 800bdd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bddc:	4906      	ldr	r1, [pc, #24]	@ (800bdf8 <inc_lock+0x118>)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	011b      	lsls	r3, r3, #4
 800bde2:	440b      	add	r3, r1
 800bde4:	330c      	adds	r3, #12
 800bde6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3301      	adds	r3, #1
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	200057fc 	.word	0x200057fc

0800bdfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3b01      	subs	r3, #1
 800be08:	607b      	str	r3, [r7, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d825      	bhi.n	800be5c <dec_lock+0x60>
		n = Files[i].ctr;
 800be10:	4a17      	ldr	r2, [pc, #92]	@ (800be70 <dec_lock+0x74>)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	4413      	add	r3, r2
 800be18:	330c      	adds	r3, #12
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be1e:	89fb      	ldrh	r3, [r7, #14]
 800be20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be24:	d101      	bne.n	800be2a <dec_lock+0x2e>
 800be26:	2300      	movs	r3, #0
 800be28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be2a:	89fb      	ldrh	r3, [r7, #14]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <dec_lock+0x3a>
 800be30:	89fb      	ldrh	r3, [r7, #14]
 800be32:	3b01      	subs	r3, #1
 800be34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be36:	4a0e      	ldr	r2, [pc, #56]	@ (800be70 <dec_lock+0x74>)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	4413      	add	r3, r2
 800be3e:	330c      	adds	r3, #12
 800be40:	89fa      	ldrh	r2, [r7, #14]
 800be42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be44:	89fb      	ldrh	r3, [r7, #14]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d105      	bne.n	800be56 <dec_lock+0x5a>
 800be4a:	4a09      	ldr	r2, [pc, #36]	@ (800be70 <dec_lock+0x74>)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	4413      	add	r3, r2
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	737b      	strb	r3, [r7, #13]
 800be5a:	e001      	b.n	800be60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be5c:	2302      	movs	r3, #2
 800be5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be60:	7b7b      	ldrb	r3, [r7, #13]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	200057fc 	.word	0x200057fc

0800be74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800be7c:	2300      	movs	r3, #0
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	e010      	b.n	800bea4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800be82:	4a0d      	ldr	r2, [pc, #52]	@ (800beb8 <clear_lock+0x44>)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	4413      	add	r3, r2
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d105      	bne.n	800be9e <clear_lock+0x2a>
 800be92:	4a09      	ldr	r2, [pc, #36]	@ (800beb8 <clear_lock+0x44>)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	011b      	lsls	r3, r3, #4
 800be98:	4413      	add	r3, r2
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3301      	adds	r3, #1
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d9eb      	bls.n	800be82 <clear_lock+0xe>
	}
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	200057fc 	.word	0x200057fc

0800bebc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	78db      	ldrb	r3, [r3, #3]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d034      	beq.n	800bf3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bed4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7858      	ldrb	r0, [r3, #1]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bee0:	2301      	movs	r3, #1
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	f7ff fd40 	bl	800b968 <disk_write>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800beee:	2301      	movs	r3, #1
 800bef0:	73fb      	strb	r3, [r7, #15]
 800bef2:	e022      	b.n	800bf3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	1ad2      	subs	r2, r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	69db      	ldr	r3, [r3, #28]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d217      	bcs.n	800bf3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	789b      	ldrb	r3, [r3, #2]
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	e010      	b.n	800bf34 <sync_window+0x78>
					wsect += fs->fsize;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4413      	add	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	7858      	ldrb	r0, [r3, #1]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf26:	2301      	movs	r3, #1
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	f7ff fd1d 	bl	800b968 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	613b      	str	r3, [r7, #16]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d8eb      	bhi.n	800bf12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d01b      	beq.n	800bf94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff ffad 	bl	800bebc <sync_window>
 800bf62:	4603      	mov	r3, r0
 800bf64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d113      	bne.n	800bf94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7858      	ldrb	r0, [r3, #1]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf76:	2301      	movs	r3, #1
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	f7ff fcd5 	bl	800b928 <disk_read>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d004      	beq.n	800bf8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bf84:	f04f 33ff 	mov.w	r3, #4294967295
 800bf88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff ff87 	bl	800bebc <sync_window>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d159      	bne.n	800c06c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b03      	cmp	r3, #3
 800bfbe:	d149      	bne.n	800c054 <sync_fs+0xb4>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d145      	bne.n	800c054 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	899b      	ldrh	r3, [r3, #12]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	f7ff fda8 	bl	800bb2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3334      	adds	r3, #52	@ 0x34
 800bfde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bfe2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff fd37 	bl	800ba5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3334      	adds	r3, #52	@ 0x34
 800bff0:	4921      	ldr	r1, [pc, #132]	@ (800c078 <sync_fs+0xd8>)
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fd4c 	bl	800ba90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3334      	adds	r3, #52	@ 0x34
 800bffc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c000:	491e      	ldr	r1, [pc, #120]	@ (800c07c <sync_fs+0xdc>)
 800c002:	4618      	mov	r0, r3
 800c004:	f7ff fd44 	bl	800ba90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3334      	adds	r3, #52	@ 0x34
 800c00c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	4619      	mov	r1, r3
 800c016:	4610      	mov	r0, r2
 800c018:	f7ff fd3a 	bl	800ba90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3334      	adds	r3, #52	@ 0x34
 800c020:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	4619      	mov	r1, r3
 800c02a:	4610      	mov	r0, r2
 800c02c:	f7ff fd30 	bl	800ba90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7858      	ldrb	r0, [r3, #1]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c048:	2301      	movs	r3, #1
 800c04a:	f7ff fc8d 	bl	800b968 <disk_write>
			fs->fsi_flag = 0;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	2200      	movs	r2, #0
 800c05a:	2100      	movs	r1, #0
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7ff fca3 	bl	800b9a8 <disk_ioctl>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <sync_fs+0xcc>
 800c068:	2301      	movs	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	41615252 	.word	0x41615252
 800c07c:	61417272 	.word	0x61417272

0800c080 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3b02      	subs	r3, #2
 800c08e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	3b02      	subs	r3, #2
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d301      	bcc.n	800c0a0 <clust2sect+0x20>
 800c09c:	2300      	movs	r3, #0
 800c09e:	e008      	b.n	800c0b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	895b      	ldrh	r3, [r3, #10]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	fb03 f202 	mul.w	r2, r3, r2
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b0:	4413      	add	r3, r2
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b086      	sub	sp, #24
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d904      	bls.n	800c0de <get_fat+0x20>
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d302      	bcc.n	800c0e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c0de:	2301      	movs	r3, #1
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e0ba      	b.n	800c25a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	f000 8082 	beq.w	800c1f8 <get_fat+0x13a>
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	f300 80a6 	bgt.w	800c246 <get_fat+0x188>
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d002      	beq.n	800c104 <get_fat+0x46>
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d055      	beq.n	800c1ae <get_fat+0xf0>
 800c102:	e0a0      	b.n	800c246 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	085b      	lsrs	r3, r3, #1
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	4413      	add	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	899b      	ldrh	r3, [r3, #12]
 800c11a:	4619      	mov	r1, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c122:	4413      	add	r3, r2
 800c124:	4619      	mov	r1, r3
 800c126:	6938      	ldr	r0, [r7, #16]
 800c128:	f7ff ff0c 	bl	800bf44 <move_window>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f040 808c 	bne.w	800c24c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	60fa      	str	r2, [r7, #12]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	8992      	ldrh	r2, [r2, #12]
 800c13e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c142:	fb01 f202 	mul.w	r2, r1, r2
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	4413      	add	r3, r2
 800c14c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c150:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	899b      	ldrh	r3, [r3, #12]
 800c15a:	4619      	mov	r1, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c162:	4413      	add	r3, r2
 800c164:	4619      	mov	r1, r3
 800c166:	6938      	ldr	r0, [r7, #16]
 800c168:	f7ff feec 	bl	800bf44 <move_window>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d16e      	bne.n	800c250 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	899b      	ldrh	r3, [r3, #12]
 800c176:	461a      	mov	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c17e:	fb01 f202 	mul.w	r2, r1, r2
 800c182:	1a9b      	subs	r3, r3, r2
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	4413      	add	r3, r2
 800c188:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c18c:	021b      	lsls	r3, r3, #8
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	4313      	orrs	r3, r2
 800c192:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d002      	beq.n	800c1a4 <get_fat+0xe6>
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	091b      	lsrs	r3, r3, #4
 800c1a2:	e002      	b.n	800c1aa <get_fat+0xec>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1aa:	617b      	str	r3, [r7, #20]
			break;
 800c1ac:	e055      	b.n	800c25a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	899b      	ldrh	r3, [r3, #12]
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1c2:	4413      	add	r3, r2
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6938      	ldr	r0, [r7, #16]
 800c1c8:	f7ff febc 	bl	800bf44 <move_window>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d140      	bne.n	800c254 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	8992      	ldrh	r2, [r2, #12]
 800c1e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1e4:	fb00 f202 	mul.w	r2, r0, r2
 800c1e8:	1a9b      	subs	r3, r3, r2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7ff fbf9 	bl	800b9e4 <ld_word>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	617b      	str	r3, [r7, #20]
			break;
 800c1f6:	e030      	b.n	800c25a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	899b      	ldrh	r3, [r3, #12]
 800c200:	089b      	lsrs	r3, r3, #2
 800c202:	b29b      	uxth	r3, r3
 800c204:	4619      	mov	r1, r3
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	fbb3 f3f1 	udiv	r3, r3, r1
 800c20c:	4413      	add	r3, r2
 800c20e:	4619      	mov	r1, r3
 800c210:	6938      	ldr	r0, [r7, #16]
 800c212:	f7ff fe97 	bl	800bf44 <move_window>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d11d      	bne.n	800c258 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	8992      	ldrh	r2, [r2, #12]
 800c22a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c22e:	fb00 f202 	mul.w	r2, r0, r2
 800c232:	1a9b      	subs	r3, r3, r2
 800c234:	440b      	add	r3, r1
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fbec 	bl	800ba14 <ld_dword>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c242:	617b      	str	r3, [r7, #20]
			break;
 800c244:	e009      	b.n	800c25a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c246:	2301      	movs	r3, #1
 800c248:	617b      	str	r3, [r7, #20]
 800c24a:	e006      	b.n	800c25a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c24c:	bf00      	nop
 800c24e:	e004      	b.n	800c25a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c250:	bf00      	nop
 800c252:	e002      	b.n	800c25a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c254:	bf00      	nop
 800c256:	e000      	b.n	800c25a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c258:	bf00      	nop
		}
	}

	return val;
 800c25a:	697b      	ldr	r3, [r7, #20]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c264:	b590      	push	{r4, r7, lr}
 800c266:	b089      	sub	sp, #36	@ 0x24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c270:	2302      	movs	r3, #2
 800c272:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b01      	cmp	r3, #1
 800c278:	f240 8109 	bls.w	800c48e <put_fat+0x22a>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	429a      	cmp	r2, r3
 800c284:	f080 8103 	bcs.w	800c48e <put_fat+0x22a>
		switch (fs->fs_type) {
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	f000 80b6 	beq.w	800c3fe <put_fat+0x19a>
 800c292:	2b03      	cmp	r3, #3
 800c294:	f300 80fb 	bgt.w	800c48e <put_fat+0x22a>
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d003      	beq.n	800c2a4 <put_fat+0x40>
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	f000 8083 	beq.w	800c3a8 <put_fat+0x144>
 800c2a2:	e0f4      	b.n	800c48e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	085b      	lsrs	r3, r3, #1
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	899b      	ldrh	r3, [r3, #12]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2c2:	4413      	add	r3, r2
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7ff fe3c 	bl	800bf44 <move_window>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2d0:	7ffb      	ldrb	r3, [r7, #31]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f040 80d4 	bne.w	800c480 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	1c5a      	adds	r2, r3, #1
 800c2e2:	61ba      	str	r2, [r7, #24]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	8992      	ldrh	r2, [r2, #12]
 800c2e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2ec:	fb00 f202 	mul.w	r2, r0, r2
 800c2f0:	1a9b      	subs	r3, r3, r2
 800c2f2:	440b      	add	r3, r1
 800c2f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	f003 0301 	and.w	r3, r3, #1
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00d      	beq.n	800c31c <put_fat+0xb8>
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	b25b      	sxtb	r3, r3
 800c306:	f003 030f 	and.w	r3, r3, #15
 800c30a:	b25a      	sxtb	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	011b      	lsls	r3, r3, #4
 800c312:	b25b      	sxtb	r3, r3
 800c314:	4313      	orrs	r3, r2
 800c316:	b25b      	sxtb	r3, r3
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	e001      	b.n	800c320 <put_fat+0xbc>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2201      	movs	r2, #1
 800c328:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	899b      	ldrh	r3, [r3, #12]
 800c332:	4619      	mov	r1, r3
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	fbb3 f3f1 	udiv	r3, r3, r1
 800c33a:	4413      	add	r3, r2
 800c33c:	4619      	mov	r1, r3
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff fe00 	bl	800bf44 <move_window>
 800c344:	4603      	mov	r3, r0
 800c346:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c348:	7ffb      	ldrb	r3, [r7, #31]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f040 809a 	bne.w	800c484 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	899b      	ldrh	r3, [r3, #12]
 800c35a:	461a      	mov	r2, r3
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c362:	fb00 f202 	mul.w	r2, r0, r2
 800c366:	1a9b      	subs	r3, r3, r2
 800c368:	440b      	add	r3, r1
 800c36a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <put_fat+0x11a>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	091b      	lsrs	r3, r3, #4
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	e00e      	b.n	800c39c <put_fat+0x138>
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b25b      	sxtb	r3, r3
 800c384:	f023 030f 	bic.w	r3, r3, #15
 800c388:	b25a      	sxtb	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	0a1b      	lsrs	r3, r3, #8
 800c38e:	b25b      	sxtb	r3, r3
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	b25b      	sxtb	r3, r3
 800c396:	4313      	orrs	r3, r2
 800c398:	b25b      	sxtb	r3, r3
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	70da      	strb	r2, [r3, #3]
			break;
 800c3a6:	e072      	b.n	800c48e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	899b      	ldrh	r3, [r3, #12]
 800c3b0:	085b      	lsrs	r3, r3, #1
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3bc:	4413      	add	r3, r2
 800c3be:	4619      	mov	r1, r3
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff fdbf 	bl	800bf44 <move_window>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3ca:	7ffb      	ldrb	r3, [r7, #31]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d15b      	bne.n	800c488 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	8992      	ldrh	r2, [r2, #12]
 800c3de:	fbb3 f0f2 	udiv	r0, r3, r2
 800c3e2:	fb00 f202 	mul.w	r2, r0, r2
 800c3e6:	1a9b      	subs	r3, r3, r2
 800c3e8:	440b      	add	r3, r1
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	b292      	uxth	r2, r2
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff fb32 	bl	800ba5a <st_word>
			fs->wflag = 1;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	70da      	strb	r2, [r3, #3]
			break;
 800c3fc:	e047      	b.n	800c48e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	899b      	ldrh	r3, [r3, #12]
 800c406:	089b      	lsrs	r3, r3, #2
 800c408:	b29b      	uxth	r3, r3
 800c40a:	4619      	mov	r1, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c412:	4413      	add	r3, r2
 800c414:	4619      	mov	r1, r3
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f7ff fd94 	bl	800bf44 <move_window>
 800c41c:	4603      	mov	r3, r0
 800c41e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c420:	7ffb      	ldrb	r3, [r7, #31]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d132      	bne.n	800c48c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	8992      	ldrh	r2, [r2, #12]
 800c43a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c43e:	fb00 f202 	mul.w	r2, r0, r2
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	440b      	add	r3, r1
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fae4 	bl	800ba14 <ld_dword>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c452:	4323      	orrs	r3, r4
 800c454:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	8992      	ldrh	r2, [r2, #12]
 800c464:	fbb3 f0f2 	udiv	r0, r3, r2
 800c468:	fb00 f202 	mul.w	r2, r0, r2
 800c46c:	1a9b      	subs	r3, r3, r2
 800c46e:	440b      	add	r3, r1
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff fb0c 	bl	800ba90 <st_dword>
			fs->wflag = 1;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2201      	movs	r2, #1
 800c47c:	70da      	strb	r2, [r3, #3]
			break;
 800c47e:	e006      	b.n	800c48e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c480:	bf00      	nop
 800c482:	e004      	b.n	800c48e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c484:	bf00      	nop
 800c486:	e002      	b.n	800c48e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c488:	bf00      	nop
 800c48a:	e000      	b.n	800c48e <put_fat+0x22a>
			if (res != FR_OK) break;
 800c48c:	bf00      	nop
		}
	}
	return res;
 800c48e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3724      	adds	r7, #36	@ 0x24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd90      	pop	{r4, r7, pc}

0800c498 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d904      	bls.n	800c4be <remove_chain+0x26>
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d301      	bcc.n	800c4c2 <remove_chain+0x2a>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	e04b      	b.n	800c55a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00c      	beq.n	800c4e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4cc:	6879      	ldr	r1, [r7, #4]
 800c4ce:	69b8      	ldr	r0, [r7, #24]
 800c4d0:	f7ff fec8 	bl	800c264 <put_fat>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c4d8:	7ffb      	ldrb	r3, [r7, #31]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <remove_chain+0x4a>
 800c4de:	7ffb      	ldrb	r3, [r7, #31]
 800c4e0:	e03b      	b.n	800c55a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7ff fdea 	bl	800c0be <get_fat>
 800c4ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d031      	beq.n	800c556 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d101      	bne.n	800c4fc <remove_chain+0x64>
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	e02e      	b.n	800c55a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c502:	d101      	bne.n	800c508 <remove_chain+0x70>
 800c504:	2301      	movs	r3, #1
 800c506:	e028      	b.n	800c55a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c508:	2200      	movs	r2, #0
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	69b8      	ldr	r0, [r7, #24]
 800c50e:	f7ff fea9 	bl	800c264 <put_fat>
 800c512:	4603      	mov	r3, r0
 800c514:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c516:	7ffb      	ldrb	r3, [r7, #31]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <remove_chain+0x88>
 800c51c:	7ffb      	ldrb	r3, [r7, #31]
 800c51e:	e01c      	b.n	800c55a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	695a      	ldr	r2, [r3, #20]
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	3b02      	subs	r3, #2
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d20b      	bcs.n	800c546 <remove_chain+0xae>
			fs->free_clst++;
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	1c5a      	adds	r2, r3, #1
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	791b      	ldrb	r3, [r3, #4]
 800c53c:	f043 0301 	orr.w	r3, r3, #1
 800c540:	b2da      	uxtb	r2, r3
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	429a      	cmp	r2, r3
 800c552:	d3c6      	bcc.n	800c4e2 <remove_chain+0x4a>
 800c554:	e000      	b.n	800c558 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c556:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3720      	adds	r7, #32
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b088      	sub	sp, #32
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10d      	bne.n	800c594 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <create_chain+0x2c>
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	69ba      	ldr	r2, [r7, #24]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d31b      	bcc.n	800c5c6 <create_chain+0x64>
 800c58e:	2301      	movs	r3, #1
 800c590:	61bb      	str	r3, [r7, #24]
 800c592:	e018      	b.n	800c5c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff fd91 	bl	800c0be <get_fat>
 800c59c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d801      	bhi.n	800c5a8 <create_chain+0x46>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e070      	b.n	800c68a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ae:	d101      	bne.n	800c5b4 <create_chain+0x52>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	e06a      	b.n	800c68a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d201      	bcs.n	800c5c2 <create_chain+0x60>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	e063      	b.n	800c68a <create_chain+0x128>
		scl = clst;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	69fa      	ldr	r2, [r7, #28]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d307      	bcc.n	800c5ea <create_chain+0x88>
				ncl = 2;
 800c5da:	2302      	movs	r3, #2
 800c5dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c5de:	69fa      	ldr	r2, [r7, #28]
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d901      	bls.n	800c5ea <create_chain+0x88>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e04f      	b.n	800c68a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c5ea:	69f9      	ldr	r1, [r7, #28]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff fd66 	bl	800c0be <get_fat>
 800c5f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00e      	beq.n	800c618 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d003      	beq.n	800c608 <create_chain+0xa6>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c606:	d101      	bne.n	800c60c <create_chain+0xaa>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	e03e      	b.n	800c68a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c60c:	69fa      	ldr	r2, [r7, #28]
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	429a      	cmp	r2, r3
 800c612:	d1da      	bne.n	800c5ca <create_chain+0x68>
 800c614:	2300      	movs	r3, #0
 800c616:	e038      	b.n	800c68a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c618:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c61a:	f04f 32ff 	mov.w	r2, #4294967295
 800c61e:	69f9      	ldr	r1, [r7, #28]
 800c620:	6938      	ldr	r0, [r7, #16]
 800c622:	f7ff fe1f 	bl	800c264 <put_fat>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <create_chain+0xe2>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c636:	69fa      	ldr	r2, [r7, #28]
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6938      	ldr	r0, [r7, #16]
 800c63c:	f7ff fe12 	bl	800c264 <put_fat>
 800c640:	4603      	mov	r3, r0
 800c642:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d116      	bne.n	800c678 <create_chain+0x116>
		fs->last_clst = ncl;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	695a      	ldr	r2, [r3, #20]
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	3b02      	subs	r3, #2
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d804      	bhi.n	800c668 <create_chain+0x106>
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	1e5a      	subs	r2, r3, #1
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	791b      	ldrb	r3, [r3, #4]
 800c66c:	f043 0301 	orr.w	r3, r3, #1
 800c670:	b2da      	uxtb	r2, r3
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	711a      	strb	r2, [r3, #4]
 800c676:	e007      	b.n	800c688 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d102      	bne.n	800c684 <create_chain+0x122>
 800c67e:	f04f 33ff 	mov.w	r3, #4294967295
 800c682:	e000      	b.n	800c686 <create_chain+0x124>
 800c684:	2301      	movs	r3, #1
 800c686:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c688:	69fb      	ldr	r3, [r7, #28]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3720      	adds	r7, #32
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c692:	b480      	push	{r7}
 800c694:	b087      	sub	sp, #28
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	899b      	ldrh	r3, [r3, #12]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	8952      	ldrh	r2, [r2, #10]
 800c6ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	613a      	str	r2, [r7, #16]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <clmt_clust+0x42>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e010      	b.n	800c6f6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d307      	bcc.n	800c6ec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c6ea:	e7e9      	b.n	800c6c0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c6ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	4413      	add	r3, r2
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b086      	sub	sp, #24
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c718:	d204      	bcs.n	800c724 <dir_sdi+0x22>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	f003 031f 	and.w	r3, r3, #31
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c724:	2302      	movs	r3, #2
 800c726:	e071      	b.n	800c80c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d106      	bne.n	800c748 <dir_sdi+0x46>
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d902      	bls.n	800c748 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c746:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10c      	bne.n	800c768 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	095b      	lsrs	r3, r3, #5
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	8912      	ldrh	r2, [r2, #8]
 800c756:	4293      	cmp	r3, r2
 800c758:	d301      	bcc.n	800c75e <dir_sdi+0x5c>
 800c75a:	2302      	movs	r3, #2
 800c75c:	e056      	b.n	800c80c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	61da      	str	r2, [r3, #28]
 800c766:	e02d      	b.n	800c7c4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	895b      	ldrh	r3, [r3, #10]
 800c76c:	461a      	mov	r2, r3
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	899b      	ldrh	r3, [r3, #12]
 800c772:	fb02 f303 	mul.w	r3, r2, r3
 800c776:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c778:	e019      	b.n	800c7ae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6979      	ldr	r1, [r7, #20]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff fc9d 	bl	800c0be <get_fat>
 800c784:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78c:	d101      	bne.n	800c792 <dir_sdi+0x90>
 800c78e:	2301      	movs	r3, #1
 800c790:	e03c      	b.n	800c80c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d904      	bls.n	800c7a2 <dir_sdi+0xa0>
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d301      	bcc.n	800c7a6 <dir_sdi+0xa4>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e032      	b.n	800c80c <dir_sdi+0x10a>
			ofs -= csz;
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d2e1      	bcs.n	800c77a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c7b6:	6979      	ldr	r1, [r7, #20]
 800c7b8:	6938      	ldr	r0, [r7, #16]
 800c7ba:	f7ff fc61 	bl	800c080 <clust2sect>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <dir_sdi+0xd4>
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	e01a      	b.n	800c80c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69da      	ldr	r2, [r3, #28]
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7e6:	441a      	add	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	899b      	ldrh	r3, [r3, #12]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7fe:	fb00 f202 	mul.w	r2, r0, r2
 800c802:	1a9b      	subs	r3, r3, r2
 800c804:	18ca      	adds	r2, r1, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	3320      	adds	r3, #32
 800c82a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d003      	beq.n	800c83c <dir_next+0x28>
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c83a:	d301      	bcc.n	800c840 <dir_next+0x2c>
 800c83c:	2304      	movs	r3, #4
 800c83e:	e0bb      	b.n	800c9b8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	899b      	ldrh	r3, [r3, #12]
 800c844:	461a      	mov	r2, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	fbb3 f1f2 	udiv	r1, r3, r2
 800c84c:	fb01 f202 	mul.w	r2, r1, r2
 800c850:	1a9b      	subs	r3, r3, r2
 800c852:	2b00      	cmp	r3, #0
 800c854:	f040 809d 	bne.w	800c992 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	69db      	ldr	r3, [r3, #28]
 800c85c:	1c5a      	adds	r2, r3, #1
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10b      	bne.n	800c882 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	095b      	lsrs	r3, r3, #5
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	8912      	ldrh	r2, [r2, #8]
 800c872:	4293      	cmp	r3, r2
 800c874:	f0c0 808d 	bcc.w	800c992 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	61da      	str	r2, [r3, #28]
 800c87e:	2304      	movs	r3, #4
 800c880:	e09a      	b.n	800c9b8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	899b      	ldrh	r3, [r3, #12]
 800c886:	461a      	mov	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	8952      	ldrh	r2, [r2, #10]
 800c892:	3a01      	subs	r2, #1
 800c894:	4013      	ands	r3, r2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d17b      	bne.n	800c992 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	f7ff fc0b 	bl	800c0be <get_fat>
 800c8a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d801      	bhi.n	800c8b4 <dir_next+0xa0>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e081      	b.n	800c9b8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ba:	d101      	bne.n	800c8c0 <dir_next+0xac>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e07b      	b.n	800c9b8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d359      	bcc.n	800c97e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d104      	bne.n	800c8da <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	61da      	str	r2, [r3, #28]
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	e06e      	b.n	800c9b8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	f7ff fe3d 	bl	800c562 <create_chain>
 800c8e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <dir_next+0xe0>
 800c8f0:	2307      	movs	r3, #7
 800c8f2:	e061      	b.n	800c9b8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d101      	bne.n	800c8fe <dir_next+0xea>
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	e05c      	b.n	800c9b8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c904:	d101      	bne.n	800c90a <dir_next+0xf6>
 800c906:	2301      	movs	r3, #1
 800c908:	e056      	b.n	800c9b8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7ff fad6 	bl	800bebc <sync_window>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <dir_next+0x106>
 800c916:	2301      	movs	r3, #1
 800c918:	e04e      	b.n	800c9b8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	899b      	ldrh	r3, [r3, #12]
 800c924:	461a      	mov	r2, r3
 800c926:	2100      	movs	r1, #0
 800c928:	f7ff f8ff 	bl	800bb2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c92c:	2300      	movs	r3, #0
 800c92e:	613b      	str	r3, [r7, #16]
 800c930:	6979      	ldr	r1, [r7, #20]
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff fba4 	bl	800c080 <clust2sect>
 800c938:	4602      	mov	r2, r0
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c93e:	e012      	b.n	800c966 <dir_next+0x152>
						fs->wflag = 1;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff fab8 	bl	800bebc <sync_window>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <dir_next+0x142>
 800c952:	2301      	movs	r3, #1
 800c954:	e030      	b.n	800c9b8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	3301      	adds	r3, #1
 800c95a:	613b      	str	r3, [r7, #16]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	631a      	str	r2, [r3, #48]	@ 0x30
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	895b      	ldrh	r3, [r3, #10]
 800c96a:	461a      	mov	r2, r3
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	4293      	cmp	r3, r2
 800c970:	d3e6      	bcc.n	800c940 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	1ad2      	subs	r2, r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c984:	6979      	ldr	r1, [r7, #20]
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f7ff fb7a 	bl	800c080 <clust2sect>
 800c98c:	4602      	mov	r2, r0
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	899b      	ldrh	r3, [r3, #12]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9aa:	fb00 f202 	mul.w	r2, r0, r2
 800c9ae:	1a9b      	subs	r3, r3, r2
 800c9b0:	18ca      	adds	r2, r1, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff fe95 	bl	800c702 <dir_sdi>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d12b      	bne.n	800ca3a <dir_alloc+0x7a>
		n = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	69db      	ldr	r3, [r3, #28]
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff faa9 	bl	800bf44 <move_window>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d11d      	bne.n	800ca38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a1b      	ldr	r3, [r3, #32]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	2be5      	cmp	r3, #229	@ 0xe5
 800ca04:	d004      	beq.n	800ca10 <dir_alloc+0x50>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d107      	bne.n	800ca20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	3301      	adds	r3, #1
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d102      	bne.n	800ca24 <dir_alloc+0x64>
 800ca1e:	e00c      	b.n	800ca3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ca20:	2300      	movs	r3, #0
 800ca22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ca24:	2101      	movs	r1, #1
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fef4 	bl	800c814 <dir_next>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0d7      	beq.n	800c9e6 <dir_alloc+0x26>
 800ca36:	e000      	b.n	800ca3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ca38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	2b04      	cmp	r3, #4
 800ca3e:	d101      	bne.n	800ca44 <dir_alloc+0x84>
 800ca40:	2307      	movs	r3, #7
 800ca42:	75fb      	strb	r3, [r7, #23]
	return res;
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	331a      	adds	r3, #26
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fe ffc1 	bl	800b9e4 <ld_word>
 800ca62:	4603      	mov	r3, r0
 800ca64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b03      	cmp	r3, #3
 800ca6c:	d109      	bne.n	800ca82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	3314      	adds	r3, #20
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fe ffb6 	bl	800b9e4 <ld_word>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	041b      	lsls	r3, r3, #16
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca82:	68fb      	ldr	r3, [r7, #12]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	331a      	adds	r3, #26
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	b292      	uxth	r2, r2
 800caa0:	4611      	mov	r1, r2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe ffd9 	bl	800ba5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b03      	cmp	r3, #3
 800caae:	d109      	bne.n	800cac4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	f103 0214 	add.w	r2, r3, #20
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	0c1b      	lsrs	r3, r3, #16
 800caba:	b29b      	uxth	r3, r3
 800cabc:	4619      	mov	r1, r3
 800cabe:	4610      	mov	r0, r2
 800cac0:	f7fe ffcb 	bl	800ba5a <st_word>
	}
}
 800cac4:	bf00      	nop
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff fe10 	bl	800c702 <dir_sdi>
 800cae2:	4603      	mov	r3, r0
 800cae4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d001      	beq.n	800caf0 <dir_find+0x24>
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	e03e      	b.n	800cb6e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	69db      	ldr	r3, [r3, #28]
 800caf4:	4619      	mov	r1, r3
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f7ff fa24 	bl	800bf44 <move_window>
 800cafc:	4603      	mov	r3, r0
 800cafe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d12f      	bne.n	800cb66 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <dir_find+0x4e>
 800cb14:	2304      	movs	r3, #4
 800cb16:	75fb      	strb	r3, [r7, #23]
 800cb18:	e028      	b.n	800cb6c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	330b      	adds	r3, #11
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	330b      	adds	r3, #11
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 0308 	and.w	r3, r3, #8
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10a      	bne.n	800cb52 <dir_find+0x86>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a18      	ldr	r0, [r3, #32]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3324      	adds	r3, #36	@ 0x24
 800cb44:	220b      	movs	r2, #11
 800cb46:	4619      	mov	r1, r3
 800cb48:	f7ff f80a 	bl	800bb60 <mem_cmp>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00b      	beq.n	800cb6a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cb52:	2100      	movs	r1, #0
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff fe5d 	bl	800c814 <dir_next>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0c5      	beq.n	800caf0 <dir_find+0x24>
 800cb64:	e002      	b.n	800cb6c <dir_find+0xa0>
		if (res != FR_OK) break;
 800cb66:	bf00      	nop
 800cb68:	e000      	b.n	800cb6c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb6a:	bf00      	nop

	return res;
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cb84:	2101      	movs	r1, #1
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff ff1a 	bl	800c9c0 <dir_alloc>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d11c      	bne.n	800cbd0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	69db      	ldr	r3, [r3, #28]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	68b8      	ldr	r0, [r7, #8]
 800cb9e:	f7ff f9d1 	bl	800bf44 <move_window>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d111      	bne.n	800cbd0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a1b      	ldr	r3, [r3, #32]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe ffb8 	bl	800bb2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a18      	ldr	r0, [r3, #32]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	3324      	adds	r3, #36	@ 0x24
 800cbc2:	220b      	movs	r2, #11
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	f7fe ff8f 	bl	800bae8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b086      	sub	sp, #24
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d04f      	beq.n	800cc92 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	613b      	str	r3, [r7, #16]
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800cbfa:	e022      	b.n	800cc42 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a1a      	ldr	r2, [r3, #32]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	1c59      	adds	r1, r3, #1
 800cc04:	6179      	str	r1, [r7, #20]
 800cc06:	4413      	add	r3, r2
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	2b20      	cmp	r3, #32
 800cc10:	d016      	beq.n	800cc40 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cc12:	7bfb      	ldrb	r3, [r7, #15]
 800cc14:	2b05      	cmp	r3, #5
 800cc16:	d101      	bne.n	800cc1c <get_fileinfo+0x42>
 800cc18:	23e5      	movs	r3, #229	@ 0xe5
 800cc1a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2b09      	cmp	r3, #9
 800cc20:	d106      	bne.n	800cc30 <get_fileinfo+0x56>
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	613a      	str	r2, [r7, #16]
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	222e      	movs	r2, #46	@ 0x2e
 800cc2e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	1c5a      	adds	r2, r3, #1
 800cc34:	613a      	str	r2, [r7, #16]
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	4413      	add	r3, r2
 800cc3a:	7bfa      	ldrb	r2, [r7, #15]
 800cc3c:	725a      	strb	r2, [r3, #9]
 800cc3e:	e000      	b.n	800cc42 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800cc40:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2b0a      	cmp	r3, #10
 800cc46:	d9d9      	bls.n	800cbfc <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	3309      	adds	r3, #9
 800cc50:	2200      	movs	r2, #0
 800cc52:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	7ada      	ldrb	r2, [r3, #11]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	331c      	adds	r3, #28
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fed5 	bl	800ba14 <ld_dword>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	3316      	adds	r3, #22
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fecc 	bl	800ba14 <ld_dword>
 800cc7c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	80da      	strh	r2, [r3, #6]
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	0c1b      	lsrs	r3, r3, #16
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	809a      	strh	r2, [r3, #4]
 800cc90:	e000      	b.n	800cc94 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cc92:	bf00      	nop
}
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3324      	adds	r3, #36	@ 0x24
 800ccb0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ccb2:	220b      	movs	r2, #11
 800ccb4:	2120      	movs	r1, #32
 800ccb6:	68b8      	ldr	r0, [r7, #8]
 800ccb8:	f7fe ff37 	bl	800bb2a <mem_set>
	si = i = 0; ni = 8;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	613b      	str	r3, [r7, #16]
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	61fb      	str	r3, [r7, #28]
 800ccc4:	2308      	movs	r3, #8
 800ccc6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	61fa      	str	r2, [r7, #28]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ccd6:	7efb      	ldrb	r3, [r7, #27]
 800ccd8:	2b20      	cmp	r3, #32
 800ccda:	d94e      	bls.n	800cd7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ccdc:	7efb      	ldrb	r3, [r7, #27]
 800ccde:	2b2f      	cmp	r3, #47	@ 0x2f
 800cce0:	d006      	beq.n	800ccf0 <create_name+0x54>
 800cce2:	7efb      	ldrb	r3, [r7, #27]
 800cce4:	2b5c      	cmp	r3, #92	@ 0x5c
 800cce6:	d110      	bne.n	800cd0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cce8:	e002      	b.n	800ccf0 <create_name+0x54>
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	3301      	adds	r3, #1
 800ccee:	61fb      	str	r3, [r7, #28]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b2f      	cmp	r3, #47	@ 0x2f
 800ccfa:	d0f6      	beq.n	800ccea <create_name+0x4e>
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	4413      	add	r3, r2
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b5c      	cmp	r3, #92	@ 0x5c
 800cd06:	d0f0      	beq.n	800ccea <create_name+0x4e>
			break;
 800cd08:	e038      	b.n	800cd7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cd0a:	7efb      	ldrb	r3, [r7, #27]
 800cd0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd0e:	d003      	beq.n	800cd18 <create_name+0x7c>
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d30c      	bcc.n	800cd32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	2b0b      	cmp	r3, #11
 800cd1c:	d002      	beq.n	800cd24 <create_name+0x88>
 800cd1e:	7efb      	ldrb	r3, [r7, #27]
 800cd20:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd22:	d001      	beq.n	800cd28 <create_name+0x8c>
 800cd24:	2306      	movs	r3, #6
 800cd26:	e044      	b.n	800cdb2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cd28:	2308      	movs	r3, #8
 800cd2a:	613b      	str	r3, [r7, #16]
 800cd2c:	230b      	movs	r3, #11
 800cd2e:	617b      	str	r3, [r7, #20]
			continue;
 800cd30:	e022      	b.n	800cd78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cd32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	da04      	bge.n	800cd44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cd3a:	7efb      	ldrb	r3, [r7, #27]
 800cd3c:	3b80      	subs	r3, #128	@ 0x80
 800cd3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cdbc <create_name+0x120>)
 800cd40:	5cd3      	ldrb	r3, [r2, r3]
 800cd42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cd44:	7efb      	ldrb	r3, [r7, #27]
 800cd46:	4619      	mov	r1, r3
 800cd48:	481d      	ldr	r0, [pc, #116]	@ (800cdc0 <create_name+0x124>)
 800cd4a:	f7fe ff30 	bl	800bbae <chk_chr>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <create_name+0xbc>
 800cd54:	2306      	movs	r3, #6
 800cd56:	e02c      	b.n	800cdb2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cd58:	7efb      	ldrb	r3, [r7, #27]
 800cd5a:	2b60      	cmp	r3, #96	@ 0x60
 800cd5c:	d905      	bls.n	800cd6a <create_name+0xce>
 800cd5e:	7efb      	ldrb	r3, [r7, #27]
 800cd60:	2b7a      	cmp	r3, #122	@ 0x7a
 800cd62:	d802      	bhi.n	800cd6a <create_name+0xce>
 800cd64:	7efb      	ldrb	r3, [r7, #27]
 800cd66:	3b20      	subs	r3, #32
 800cd68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	613a      	str	r2, [r7, #16]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	4413      	add	r3, r2
 800cd74:	7efa      	ldrb	r2, [r7, #27]
 800cd76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cd78:	e7a6      	b.n	800ccc8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cd7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	441a      	add	r2, r3
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <create_name+0xf4>
 800cd8c:	2306      	movs	r3, #6
 800cd8e:	e010      	b.n	800cdb2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2be5      	cmp	r3, #229	@ 0xe5
 800cd96:	d102      	bne.n	800cd9e <create_name+0x102>
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2205      	movs	r2, #5
 800cd9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd9e:	7efb      	ldrb	r3, [r7, #27]
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d801      	bhi.n	800cda8 <create_name+0x10c>
 800cda4:	2204      	movs	r2, #4
 800cda6:	e000      	b.n	800cdaa <create_name+0x10e>
 800cda8:	2200      	movs	r2, #0
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	330b      	adds	r3, #11
 800cdae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cdb0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	080146a0 	.word	0x080146a0
 800cdc0:	0801461c 	.word	0x0801461c

0800cdc4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cdd8:	e002      	b.n	800cde0 <follow_path+0x1c>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	3301      	adds	r3, #1
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b2f      	cmp	r3, #47	@ 0x2f
 800cde6:	d0f8      	beq.n	800cdda <follow_path+0x16>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b5c      	cmp	r3, #92	@ 0x5c
 800cdee:	d0f4      	beq.n	800cdda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b1f      	cmp	r3, #31
 800cdfc:	d80a      	bhi.n	800ce14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2280      	movs	r2, #128	@ 0x80
 800ce02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ce06:	2100      	movs	r1, #0
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fc7a 	bl	800c702 <dir_sdi>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	75fb      	strb	r3, [r7, #23]
 800ce12:	e048      	b.n	800cea6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce14:	463b      	mov	r3, r7
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff ff3f 	bl	800cc9c <create_name>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d139      	bne.n	800ce9c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff fe4f 	bl	800cacc <dir_find>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ce38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	d12c      	bne.n	800cea0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	f003 0304 	and.w	r3, r3, #4
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d127      	bne.n	800cea0 <follow_path+0xdc>
 800ce50:	2305      	movs	r3, #5
 800ce52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ce54:	e024      	b.n	800cea0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d121      	bne.n	800cea4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	799b      	ldrb	r3, [r3, #6]
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ce6c:	2305      	movs	r3, #5
 800ce6e:	75fb      	strb	r3, [r7, #23]
 800ce70:	e019      	b.n	800cea6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	8992      	ldrh	r2, [r2, #12]
 800ce80:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce84:	fb00 f202 	mul.w	r2, r0, r2
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	440b      	add	r3, r1
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f7ff fddd 	bl	800ca4e <ld_clust>
 800ce94:	4602      	mov	r2, r0
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce9a:	e7bb      	b.n	800ce14 <follow_path+0x50>
			if (res != FR_OK) break;
 800ce9c:	bf00      	nop
 800ce9e:	e002      	b.n	800cea6 <follow_path+0xe2>
				break;
 800cea0:	bf00      	nop
 800cea2:	e000      	b.n	800cea6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cea4:	bf00      	nop
			}
		}
	}

	return res;
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ceb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cebc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d031      	beq.n	800cf2a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	e002      	b.n	800ced4 <get_ldnumber+0x24>
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	3301      	adds	r3, #1
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b20      	cmp	r3, #32
 800ceda:	d903      	bls.n	800cee4 <get_ldnumber+0x34>
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2b3a      	cmp	r3, #58	@ 0x3a
 800cee2:	d1f4      	bne.n	800cece <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b3a      	cmp	r3, #58	@ 0x3a
 800ceea:	d11c      	bne.n	800cf26 <get_ldnumber+0x76>
			tp = *path;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	1c5a      	adds	r2, r3, #1
 800cef6:	60fa      	str	r2, [r7, #12]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	3b30      	subs	r3, #48	@ 0x30
 800cefc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b09      	cmp	r3, #9
 800cf02:	d80e      	bhi.n	800cf22 <get_ldnumber+0x72>
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d10a      	bne.n	800cf22 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d107      	bne.n	800cf22 <get_ldnumber+0x72>
					vol = (int)i;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	617b      	str	r3, [r7, #20]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	e002      	b.n	800cf2c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cf26:	2300      	movs	r3, #0
 800cf28:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cf2a:	693b      	ldr	r3, [r7, #16]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	70da      	strb	r2, [r3, #3]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7fe fff6 	bl	800bf44 <move_window>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <check_fs+0x2a>
 800cf5e:	2304      	movs	r3, #4
 800cf60:	e038      	b.n	800cfd4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3334      	adds	r3, #52	@ 0x34
 800cf66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe fd3a 	bl	800b9e4 <ld_word>
 800cf70:	4603      	mov	r3, r0
 800cf72:	461a      	mov	r2, r3
 800cf74:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d001      	beq.n	800cf80 <check_fs+0x48>
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	e029      	b.n	800cfd4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf86:	2be9      	cmp	r3, #233	@ 0xe9
 800cf88:	d009      	beq.n	800cf9e <check_fs+0x66>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf90:	2beb      	cmp	r3, #235	@ 0xeb
 800cf92:	d11e      	bne.n	800cfd2 <check_fs+0x9a>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800cf9a:	2b90      	cmp	r3, #144	@ 0x90
 800cf9c:	d119      	bne.n	800cfd2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3334      	adds	r3, #52	@ 0x34
 800cfa2:	3336      	adds	r3, #54	@ 0x36
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe fd35 	bl	800ba14 <ld_dword>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cfb0:	4a0a      	ldr	r2, [pc, #40]	@ (800cfdc <check_fs+0xa4>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d101      	bne.n	800cfba <check_fs+0x82>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e00c      	b.n	800cfd4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	3334      	adds	r3, #52	@ 0x34
 800cfbe:	3352      	adds	r3, #82	@ 0x52
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fd27 	bl	800ba14 <ld_dword>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	4a05      	ldr	r2, [pc, #20]	@ (800cfe0 <check_fs+0xa8>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d101      	bne.n	800cfd2 <check_fs+0x9a>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e000      	b.n	800cfd4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cfd2:	2302      	movs	r3, #2
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	00544146 	.word	0x00544146
 800cfe0:	33544146 	.word	0x33544146

0800cfe4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b096      	sub	sp, #88	@ 0x58
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	4613      	mov	r3, r2
 800cff0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2200      	movs	r2, #0
 800cff6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7ff ff59 	bl	800ceb0 <get_ldnumber>
 800cffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d002:	2b00      	cmp	r3, #0
 800d004:	da01      	bge.n	800d00a <find_volume+0x26>
 800d006:	230b      	movs	r3, #11
 800d008:	e262      	b.n	800d4d0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d00a:	4a9f      	ldr	r2, [pc, #636]	@ (800d288 <find_volume+0x2a4>)
 800d00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d012:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <find_volume+0x3a>
 800d01a:	230c      	movs	r3, #12
 800d01c:	e258      	b.n	800d4d0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d022:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	f023 0301 	bic.w	r3, r3, #1
 800d02a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d01a      	beq.n	800d06a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fc35 	bl	800b8a8 <disk_status>
 800d03e:	4603      	mov	r3, r0
 800d040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10c      	bne.n	800d06a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d007      	beq.n	800d066 <find_volume+0x82>
 800d056:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d05a:	f003 0304 	and.w	r3, r3, #4
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d062:	230a      	movs	r3, #10
 800d064:	e234      	b.n	800d4d0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800d066:	2300      	movs	r3, #0
 800d068:	e232      	b.n	800d4d0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06c:	2200      	movs	r2, #0
 800d06e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d072:	b2da      	uxtb	r2, r3
 800d074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d076:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	785b      	ldrb	r3, [r3, #1]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fe fc2d 	bl	800b8dc <disk_initialize>
 800d082:	4603      	mov	r3, r0
 800d084:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d088:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d094:	2303      	movs	r3, #3
 800d096:	e21b      	b.n	800d4d0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d007      	beq.n	800d0ae <find_volume+0xca>
 800d09e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0a2:	f003 0304 	and.w	r3, r3, #4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d0aa:	230a      	movs	r3, #10
 800d0ac:	e210      	b.n	800d4d0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b0:	7858      	ldrb	r0, [r3, #1]
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b4:	330c      	adds	r3, #12
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	2102      	movs	r1, #2
 800d0ba:	f7fe fc75 	bl	800b9a8 <disk_ioctl>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <find_volume+0xe4>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e203      	b.n	800d4d0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	899b      	ldrh	r3, [r3, #12]
 800d0cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0d0:	d80d      	bhi.n	800d0ee <find_volume+0x10a>
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d4:	899b      	ldrh	r3, [r3, #12]
 800d0d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0da:	d308      	bcc.n	800d0ee <find_volume+0x10a>
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0de:	899b      	ldrh	r3, [r3, #12]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e4:	899b      	ldrh	r3, [r3, #12]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <find_volume+0x10e>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e1ee      	b.n	800d4d0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d0f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0fa:	f7ff ff1d 	bl	800cf38 <check_fs>
 800d0fe:	4603      	mov	r3, r0
 800d100:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d149      	bne.n	800d1a0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d10c:	2300      	movs	r3, #0
 800d10e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d110:	e01e      	b.n	800d150 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d114:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d120:	4413      	add	r3, r2
 800d122:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d126:	3304      	adds	r3, #4
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d006      	beq.n	800d13c <find_volume+0x158>
 800d12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d130:	3308      	adds	r3, #8
 800d132:	4618      	mov	r0, r3
 800d134:	f7fe fc6e 	bl	800ba14 <ld_dword>
 800d138:	4602      	mov	r2, r0
 800d13a:	e000      	b.n	800d13e <find_volume+0x15a>
 800d13c:	2200      	movs	r2, #0
 800d13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	3358      	adds	r3, #88	@ 0x58
 800d144:	443b      	add	r3, r7
 800d146:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d14c:	3301      	adds	r3, #1
 800d14e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d152:	2b03      	cmp	r3, #3
 800d154:	d9dd      	bls.n	800d112 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d156:	2300      	movs	r3, #0
 800d158:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <find_volume+0x182>
 800d160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d162:	3b01      	subs	r3, #1
 800d164:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	3358      	adds	r3, #88	@ 0x58
 800d16c:	443b      	add	r3, r7
 800d16e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d172:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d176:	2b00      	cmp	r3, #0
 800d178:	d005      	beq.n	800d186 <find_volume+0x1a2>
 800d17a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d17c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d17e:	f7ff fedb 	bl	800cf38 <check_fs>
 800d182:	4603      	mov	r3, r0
 800d184:	e000      	b.n	800d188 <find_volume+0x1a4>
 800d186:	2303      	movs	r3, #3
 800d188:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d18c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d190:	2b01      	cmp	r3, #1
 800d192:	d905      	bls.n	800d1a0 <find_volume+0x1bc>
 800d194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d196:	3301      	adds	r3, #1
 800d198:	643b      	str	r3, [r7, #64]	@ 0x40
 800d19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d9e2      	bls.n	800d166 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d1a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1a4:	2b04      	cmp	r3, #4
 800d1a6:	d101      	bne.n	800d1ac <find_volume+0x1c8>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e191      	b.n	800d4d0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d901      	bls.n	800d1b8 <find_volume+0x1d4>
 800d1b4:	230d      	movs	r3, #13
 800d1b6:	e18b      	b.n	800d4d0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ba:	3334      	adds	r3, #52	@ 0x34
 800d1bc:	330b      	adds	r3, #11
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fc10 	bl	800b9e4 <ld_word>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ca:	899b      	ldrh	r3, [r3, #12]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d001      	beq.n	800d1d4 <find_volume+0x1f0>
 800d1d0:	230d      	movs	r3, #13
 800d1d2:	e17d      	b.n	800d4d0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d6:	3334      	adds	r3, #52	@ 0x34
 800d1d8:	3316      	adds	r3, #22
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fc02 	bl	800b9e4 <ld_word>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d106      	bne.n	800d1f8 <find_volume+0x214>
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	3334      	adds	r3, #52	@ 0x34
 800d1ee:	3324      	adds	r3, #36	@ 0x24
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fe fc0f 	bl	800ba14 <ld_dword>
 800d1f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1fc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d200:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d206:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	789b      	ldrb	r3, [r3, #2]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d005      	beq.n	800d21c <find_volume+0x238>
 800d210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d212:	789b      	ldrb	r3, [r3, #2]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d001      	beq.n	800d21c <find_volume+0x238>
 800d218:	230d      	movs	r3, #13
 800d21a:	e159      	b.n	800d4d0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21e:	789b      	ldrb	r3, [r3, #2]
 800d220:	461a      	mov	r2, r3
 800d222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d224:	fb02 f303 	mul.w	r3, r2, r3
 800d228:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d230:	461a      	mov	r2, r3
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d238:	895b      	ldrh	r3, [r3, #10]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d008      	beq.n	800d250 <find_volume+0x26c>
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	895b      	ldrh	r3, [r3, #10]
 800d242:	461a      	mov	r2, r3
 800d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d246:	895b      	ldrh	r3, [r3, #10]
 800d248:	3b01      	subs	r3, #1
 800d24a:	4013      	ands	r3, r2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <find_volume+0x270>
 800d250:	230d      	movs	r3, #13
 800d252:	e13d      	b.n	800d4d0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d256:	3334      	adds	r3, #52	@ 0x34
 800d258:	3311      	adds	r3, #17
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe fbc2 	bl	800b9e4 <ld_word>
 800d260:	4603      	mov	r3, r0
 800d262:	461a      	mov	r2, r3
 800d264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d266:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26a:	891b      	ldrh	r3, [r3, #8]
 800d26c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d26e:	8992      	ldrh	r2, [r2, #12]
 800d270:	0952      	lsrs	r2, r2, #5
 800d272:	b292      	uxth	r2, r2
 800d274:	fbb3 f1f2 	udiv	r1, r3, r2
 800d278:	fb01 f202 	mul.w	r2, r1, r2
 800d27c:	1a9b      	subs	r3, r3, r2
 800d27e:	b29b      	uxth	r3, r3
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <find_volume+0x2a8>
 800d284:	230d      	movs	r3, #13
 800d286:	e123      	b.n	800d4d0 <find_volume+0x4ec>
 800d288:	200057f4 	.word	0x200057f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28e:	3334      	adds	r3, #52	@ 0x34
 800d290:	3313      	adds	r3, #19
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fba6 	bl	800b9e4 <ld_word>
 800d298:	4603      	mov	r3, r0
 800d29a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d29c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <find_volume+0x2cc>
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a4:	3334      	adds	r3, #52	@ 0x34
 800d2a6:	3320      	adds	r3, #32
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fe fbb3 	bl	800ba14 <ld_dword>
 800d2ae:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b2:	3334      	adds	r3, #52	@ 0x34
 800d2b4:	330e      	adds	r3, #14
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe fb94 	bl	800b9e4 <ld_word>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d2c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d101      	bne.n	800d2ca <find_volume+0x2e6>
 800d2c6:	230d      	movs	r3, #13
 800d2c8:	e102      	b.n	800d4d0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d2ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ce:	4413      	add	r3, r2
 800d2d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2d2:	8911      	ldrh	r1, [r2, #8]
 800d2d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2d6:	8992      	ldrh	r2, [r2, #12]
 800d2d8:	0952      	lsrs	r2, r2, #5
 800d2da:	b292      	uxth	r2, r2
 800d2dc:	fbb1 f2f2 	udiv	r2, r1, r2
 800d2e0:	b292      	uxth	r2, r2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d2e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d201      	bcs.n	800d2f2 <find_volume+0x30e>
 800d2ee:	230d      	movs	r3, #13
 800d2f0:	e0ee      	b.n	800d4d0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d2f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2fa:	8952      	ldrh	r2, [r2, #10]
 800d2fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d300:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <find_volume+0x328>
 800d308:	230d      	movs	r3, #13
 800d30a:	e0e1      	b.n	800d4d0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800d30c:	2303      	movs	r3, #3
 800d30e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d314:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d318:	4293      	cmp	r3, r2
 800d31a:	d802      	bhi.n	800d322 <find_volume+0x33e>
 800d31c:	2302      	movs	r3, #2
 800d31e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d324:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d328:	4293      	cmp	r3, r2
 800d32a:	d802      	bhi.n	800d332 <find_volume+0x34e>
 800d32c:	2301      	movs	r3, #1
 800d32e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d334:	1c9a      	adds	r2, r3, #2
 800d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d338:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d33e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d340:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d344:	441a      	add	r2, r3
 800d346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d348:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d34a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34e:	441a      	add	r2, r3
 800d350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d352:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d354:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d358:	2b03      	cmp	r3, #3
 800d35a:	d11e      	bne.n	800d39a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35e:	3334      	adds	r3, #52	@ 0x34
 800d360:	332a      	adds	r3, #42	@ 0x2a
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe fb3e 	bl	800b9e4 <ld_word>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <find_volume+0x38e>
 800d36e:	230d      	movs	r3, #13
 800d370:	e0ae      	b.n	800d4d0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	891b      	ldrh	r3, [r3, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <find_volume+0x39a>
 800d37a:	230d      	movs	r3, #13
 800d37c:	e0a8      	b.n	800d4d0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	3334      	adds	r3, #52	@ 0x34
 800d382:	332c      	adds	r3, #44	@ 0x2c
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe fb45 	bl	800ba14 <ld_dword>
 800d38a:	4602      	mov	r2, r0
 800d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	647b      	str	r3, [r7, #68]	@ 0x44
 800d398:	e01f      	b.n	800d3da <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39c:	891b      	ldrh	r3, [r3, #8]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <find_volume+0x3c2>
 800d3a2:	230d      	movs	r3, #13
 800d3a4:	e094      	b.n	800d4d0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3ac:	441a      	add	r2, r3
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d3b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d103      	bne.n	800d3c2 <find_volume+0x3de>
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	005b      	lsls	r3, r3, #1
 800d3c0:	e00a      	b.n	800d3d8 <find_volume+0x3f4>
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c4:	699a      	ldr	r2, [r3, #24]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	4413      	add	r3, r2
 800d3cc:	085a      	lsrs	r2, r3, #1
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d3d8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3dc:	69da      	ldr	r2, [r3, #28]
 800d3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e0:	899b      	ldrh	r3, [r3, #12]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3e6:	440b      	add	r3, r1
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d3ec:	8989      	ldrh	r1, [r1, #12]
 800d3ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d201      	bcs.n	800d3fa <find_volume+0x416>
 800d3f6:	230d      	movs	r3, #13
 800d3f8:	e06a      	b.n	800d4d0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d400:	615a      	str	r2, [r3, #20]
 800d402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d404:	695a      	ldr	r2, [r3, #20]
 800d406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d408:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40c:	2280      	movs	r2, #128	@ 0x80
 800d40e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d410:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d414:	2b03      	cmp	r3, #3
 800d416:	d149      	bne.n	800d4ac <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41a:	3334      	adds	r3, #52	@ 0x34
 800d41c:	3330      	adds	r3, #48	@ 0x30
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fe fae0 	bl	800b9e4 <ld_word>
 800d424:	4603      	mov	r3, r0
 800d426:	2b01      	cmp	r3, #1
 800d428:	d140      	bne.n	800d4ac <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d42c:	3301      	adds	r3, #1
 800d42e:	4619      	mov	r1, r3
 800d430:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d432:	f7fe fd87 	bl	800bf44 <move_window>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d137      	bne.n	800d4ac <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	2200      	movs	r2, #0
 800d440:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d444:	3334      	adds	r3, #52	@ 0x34
 800d446:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe faca 	bl	800b9e4 <ld_word>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d458:	429a      	cmp	r2, r3
 800d45a:	d127      	bne.n	800d4ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d45e:	3334      	adds	r3, #52	@ 0x34
 800d460:	4618      	mov	r0, r3
 800d462:	f7fe fad7 	bl	800ba14 <ld_dword>
 800d466:	4603      	mov	r3, r0
 800d468:	4a1b      	ldr	r2, [pc, #108]	@ (800d4d8 <find_volume+0x4f4>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d11e      	bne.n	800d4ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d470:	3334      	adds	r3, #52	@ 0x34
 800d472:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe facc 	bl	800ba14 <ld_dword>
 800d47c:	4603      	mov	r3, r0
 800d47e:	4a17      	ldr	r2, [pc, #92]	@ (800d4dc <find_volume+0x4f8>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d113      	bne.n	800d4ac <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d486:	3334      	adds	r3, #52	@ 0x34
 800d488:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe fac1 	bl	800ba14 <ld_dword>
 800d492:	4602      	mov	r2, r0
 800d494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d496:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49a:	3334      	adds	r3, #52	@ 0x34
 800d49c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fab7 	bl	800ba14 <ld_dword>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4aa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d4b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e0 <find_volume+0x4fc>)
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	4b08      	ldr	r3, [pc, #32]	@ (800d4e0 <find_volume+0x4fc>)
 800d4be:	801a      	strh	r2, [r3, #0]
 800d4c0:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <find_volume+0x4fc>)
 800d4c2:	881a      	ldrh	r2, [r3, #0]
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d4c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d4ca:	f7fe fcd3 	bl	800be74 <clear_lock>
#endif
	return FR_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3758      	adds	r7, #88	@ 0x58
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	41615252 	.word	0x41615252
 800d4dc:	61417272 	.word	0x61417272
 800d4e0:	200057f8 	.word	0x200057f8

0800d4e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d4ee:	2309      	movs	r3, #9
 800d4f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d01c      	beq.n	800d532 <validate+0x4e>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d018      	beq.n	800d532 <validate+0x4e>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d013      	beq.n	800d532 <validate+0x4e>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	889a      	ldrh	r2, [r3, #4]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	88db      	ldrh	r3, [r3, #6]
 800d514:	429a      	cmp	r2, r3
 800d516:	d10c      	bne.n	800d532 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	785b      	ldrb	r3, [r3, #1]
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fe f9c2 	bl	800b8a8 <disk_status>
 800d524:	4603      	mov	r3, r0
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <validate+0x4e>
			res = FR_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <validate+0x5a>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	e000      	b.n	800d540 <validate+0x5c>
 800d53e:	2300      	movs	r3, #0
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	6013      	str	r3, [r2, #0]
	return res;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d562:	f107 0310 	add.w	r3, r7, #16
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff fca2 	bl	800ceb0 <get_ldnumber>
 800d56c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	2b00      	cmp	r3, #0
 800d572:	da01      	bge.n	800d578 <f_mount+0x28>
 800d574:	230b      	movs	r3, #11
 800d576:	e02b      	b.n	800d5d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d578:	4a17      	ldr	r2, [pc, #92]	@ (800d5d8 <f_mount+0x88>)
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d580:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d005      	beq.n	800d594 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d588:	69b8      	ldr	r0, [r7, #24]
 800d58a:	f7fe fc73 	bl	800be74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	2200      	movs	r2, #0
 800d592:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	490d      	ldr	r1, [pc, #52]	@ (800d5d8 <f_mount+0x88>)
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <f_mount+0x66>
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d001      	beq.n	800d5ba <f_mount+0x6a>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e00a      	b.n	800d5d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d5ba:	f107 010c 	add.w	r1, r7, #12
 800d5be:	f107 0308 	add.w	r3, r7, #8
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fd0d 	bl	800cfe4 <find_volume>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3720      	adds	r7, #32
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	200057f4 	.word	0x200057f4

0800d5dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b098      	sub	sp, #96	@ 0x60
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <f_open+0x18>
 800d5f0:	2309      	movs	r3, #9
 800d5f2:	e1b7      	b.n	800d964 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d5f4:	79fb      	ldrb	r3, [r7, #7]
 800d5f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d5fc:	79fa      	ldrb	r2, [r7, #7]
 800d5fe:	f107 0110 	add.w	r1, r7, #16
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff fcec 	bl	800cfe4 <find_volume>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d612:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d616:	2b00      	cmp	r3, #0
 800d618:	f040 819b 	bne.w	800d952 <f_open+0x376>
		dj.obj.fs = fs;
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	f107 0314 	add.w	r3, r7, #20
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f7ff fbcb 	bl	800cdc4 <follow_path>
 800d62e:	4603      	mov	r3, r0
 800d630:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d634:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d118      	bne.n	800d66e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d63c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d640:	b25b      	sxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	da03      	bge.n	800d64e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d646:	2306      	movs	r3, #6
 800d648:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d64c:	e00f      	b.n	800d66e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	2b01      	cmp	r3, #1
 800d652:	bf8c      	ite	hi
 800d654:	2301      	movhi	r3, #1
 800d656:	2300      	movls	r3, #0
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	461a      	mov	r2, r3
 800d65c:	f107 0314 	add.w	r3, r7, #20
 800d660:	4611      	mov	r1, r2
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe fabe 	bl	800bbe4 <chk_lock>
 800d668:	4603      	mov	r3, r0
 800d66a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d66e:	79fb      	ldrb	r3, [r7, #7]
 800d670:	f003 031c 	and.w	r3, r3, #28
 800d674:	2b00      	cmp	r3, #0
 800d676:	d07f      	beq.n	800d778 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d017      	beq.n	800d6b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d684:	2b04      	cmp	r3, #4
 800d686:	d10e      	bne.n	800d6a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d688:	f7fe fb08 	bl	800bc9c <enq_lock>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d006      	beq.n	800d6a0 <f_open+0xc4>
 800d692:	f107 0314 	add.w	r3, r7, #20
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff fa6d 	bl	800cb76 <dir_register>
 800d69c:	4603      	mov	r3, r0
 800d69e:	e000      	b.n	800d6a2 <f_open+0xc6>
 800d6a0:	2312      	movs	r3, #18
 800d6a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	f043 0308 	orr.w	r3, r3, #8
 800d6ac:	71fb      	strb	r3, [r7, #7]
 800d6ae:	e010      	b.n	800d6d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d6b0:	7ebb      	ldrb	r3, [r7, #26]
 800d6b2:	f003 0311 	and.w	r3, r3, #17
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <f_open+0xe6>
					res = FR_DENIED;
 800d6ba:	2307      	movs	r3, #7
 800d6bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d6c0:	e007      	b.n	800d6d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	f003 0304 	and.w	r3, r3, #4
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <f_open+0xf6>
 800d6cc:	2308      	movs	r3, #8
 800d6ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d168      	bne.n	800d7ac <f_open+0x1d0>
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	f003 0308 	and.w	r3, r3, #8
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d063      	beq.n	800d7ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800d6e4:	f7fd ff74 	bl	800b5d0 <get_fattime>
 800d6e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ec:	330e      	adds	r3, #14
 800d6ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe f9cd 	bl	800ba90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f8:	3316      	adds	r3, #22
 800d6fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe f9c7 	bl	800ba90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d704:	330b      	adds	r3, #11
 800d706:	2220      	movs	r2, #32
 800d708:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d70e:	4611      	mov	r1, r2
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff f99c 	bl	800ca4e <ld_clust>
 800d716:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d71c:	2200      	movs	r2, #0
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff f9b4 	bl	800ca8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d726:	331c      	adds	r3, #28
 800d728:	2100      	movs	r1, #0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe f9b0 	bl	800ba90 <st_dword>
					fs->wflag = 1;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	2201      	movs	r2, #1
 800d734:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d037      	beq.n	800d7ac <f_open+0x1d0>
						dw = fs->winsect;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d740:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d742:	f107 0314 	add.w	r3, r7, #20
 800d746:	2200      	movs	r2, #0
 800d748:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fea4 	bl	800c498 <remove_chain>
 800d750:	4603      	mov	r3, r0
 800d752:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d756:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d126      	bne.n	800d7ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe fbee 	bl	800bf44 <move_window>
 800d768:	4603      	mov	r3, r0
 800d76a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d772:	3a01      	subs	r2, #1
 800d774:	611a      	str	r2, [r3, #16]
 800d776:	e019      	b.n	800d7ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d115      	bne.n	800d7ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d780:	7ebb      	ldrb	r3, [r7, #26]
 800d782:	f003 0310 	and.w	r3, r3, #16
 800d786:	2b00      	cmp	r3, #0
 800d788:	d003      	beq.n	800d792 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d78a:	2304      	movs	r3, #4
 800d78c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d790:	e00c      	b.n	800d7ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	f003 0302 	and.w	r3, r3, #2
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d007      	beq.n	800d7ac <f_open+0x1d0>
 800d79c:	7ebb      	ldrb	r3, [r7, #26]
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <f_open+0x1d0>
						res = FR_DENIED;
 800d7a6:	2307      	movs	r3, #7
 800d7a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d7ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d126      	bne.n	800d802 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	f003 0308 	and.w	r3, r3, #8
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d7ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	bf8c      	ite	hi
 800d7da:	2301      	movhi	r3, #1
 800d7dc:	2300      	movls	r3, #0
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	f107 0314 	add.w	r3, r7, #20
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe fa79 	bl	800bce0 <inc_lock>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <f_open+0x226>
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d802:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d806:	2b00      	cmp	r3, #0
 800d808:	f040 80a3 	bne.w	800d952 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d810:	4611      	mov	r1, r2
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff f91b 	bl	800ca4e <ld_clust>
 800d818:	4602      	mov	r2, r0
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d820:	331c      	adds	r3, #28
 800d822:	4618      	mov	r0, r3
 800d824:	f7fe f8f6 	bl	800ba14 <ld_dword>
 800d828:	4602      	mov	r2, r0
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	88da      	ldrh	r2, [r3, #6]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	79fa      	ldrb	r2, [r7, #7]
 800d846:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3330      	adds	r3, #48	@ 0x30
 800d85e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d862:	2100      	movs	r1, #0
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe f960 	bl	800bb2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	f003 0320 	and.w	r3, r3, #32
 800d870:	2b00      	cmp	r3, #0
 800d872:	d06e      	beq.n	800d952 <f_open+0x376>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d06a      	beq.n	800d952 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	68da      	ldr	r2, [r3, #12]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	895b      	ldrh	r3, [r3, #10]
 800d888:	461a      	mov	r2, r3
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	899b      	ldrh	r3, [r3, #12]
 800d88e:	fb02 f303 	mul.w	r3, r2, r3
 800d892:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8a0:	e016      	b.n	800d8d0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe fc09 	bl	800c0be <get_fat>
 800d8ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d8ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d802      	bhi.n	800d8ba <f_open+0x2de>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d8ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c0:	d102      	bne.n	800d8c8 <f_open+0x2ec>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d103      	bne.n	800d8e0 <f_open+0x304>
 800d8d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d8e0      	bhi.n	800d8a2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d8e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d131      	bne.n	800d952 <f_open+0x376>
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	899b      	ldrh	r3, [r3, #12]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8fa:	fb01 f202 	mul.w	r2, r1, r2
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	2b00      	cmp	r3, #0
 800d902:	d026      	beq.n	800d952 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fe fbb9 	bl	800c080 <clust2sect>
 800d90e:	6478      	str	r0, [r7, #68]	@ 0x44
 800d910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d912:	2b00      	cmp	r3, #0
 800d914:	d103      	bne.n	800d91e <f_open+0x342>
						res = FR_INT_ERR;
 800d916:	2302      	movs	r3, #2
 800d918:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d91c:	e019      	b.n	800d952 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	899b      	ldrh	r3, [r3, #12]
 800d922:	461a      	mov	r2, r3
 800d924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d926:	fbb3 f2f2 	udiv	r2, r3, r2
 800d92a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d92c:	441a      	add	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	7858      	ldrb	r0, [r3, #1]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6a1a      	ldr	r2, [r3, #32]
 800d940:	2301      	movs	r3, #1
 800d942:	f7fd fff1 	bl	800b928 <disk_read>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <f_open+0x376>
 800d94c:	2301      	movs	r3, #1
 800d94e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d952:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d956:	2b00      	cmp	r3, #0
 800d958:	d002      	beq.n	800d960 <f_open+0x384>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d960:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d964:	4618      	mov	r0, r3
 800d966:	3760      	adds	r7, #96	@ 0x60
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08e      	sub	sp, #56	@ 0x38
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f107 0214 	add.w	r2, r7, #20
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff fda9 	bl	800d4e4 <validate>
 800d992:	4603      	mov	r3, r0
 800d994:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d998:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d107      	bne.n	800d9b0 <f_read+0x44>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	7d5b      	ldrb	r3, [r3, #21]
 800d9a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d9a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <f_read+0x4a>
 800d9b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9b4:	e135      	b.n	800dc22 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ba:	f003 0301 	and.w	r3, r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <f_read+0x5a>
 800d9c2:	2307      	movs	r3, #7
 800d9c4:	e12d      	b.n	800dc22 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	68da      	ldr	r2, [r3, #12]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	699b      	ldr	r3, [r3, #24]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	f240 811e 	bls.w	800dc18 <f_read+0x2ac>
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d9e0:	e11a      	b.n	800dc18 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	8992      	ldrh	r2, [r2, #12]
 800d9ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9ee:	fb01 f202 	mul.w	r2, r1, r2
 800d9f2:	1a9b      	subs	r3, r3, r2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f040 80d5 	bne.w	800dba4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	8992      	ldrh	r2, [r2, #12]
 800da02:	fbb3 f3f2 	udiv	r3, r3, r2
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	8952      	ldrh	r2, [r2, #10]
 800da0a:	3a01      	subs	r2, #1
 800da0c:	4013      	ands	r3, r2
 800da0e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d12f      	bne.n	800da76 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	633b      	str	r3, [r7, #48]	@ 0x30
 800da24:	e013      	b.n	800da4e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d007      	beq.n	800da3e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	699b      	ldr	r3, [r3, #24]
 800da32:	4619      	mov	r1, r3
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7fe fe2c 	bl	800c692 <clmt_clust>
 800da3a:	6338      	str	r0, [r7, #48]	@ 0x30
 800da3c:	e007      	b.n	800da4e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f7fe fb39 	bl	800c0be <get_fat>
 800da4c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800da4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da50:	2b01      	cmp	r3, #1
 800da52:	d804      	bhi.n	800da5e <f_read+0xf2>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2202      	movs	r2, #2
 800da58:	755a      	strb	r2, [r3, #21]
 800da5a:	2302      	movs	r3, #2
 800da5c:	e0e1      	b.n	800dc22 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da64:	d104      	bne.n	800da70 <f_read+0x104>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2201      	movs	r2, #1
 800da6a:	755a      	strb	r2, [r3, #21]
 800da6c:	2301      	movs	r3, #1
 800da6e:	e0d8      	b.n	800dc22 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da76:	697a      	ldr	r2, [r7, #20]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	69db      	ldr	r3, [r3, #28]
 800da7c:	4619      	mov	r1, r3
 800da7e:	4610      	mov	r0, r2
 800da80:	f7fe fafe 	bl	800c080 <clust2sect>
 800da84:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d104      	bne.n	800da96 <f_read+0x12a>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2202      	movs	r2, #2
 800da90:	755a      	strb	r2, [r3, #21]
 800da92:	2302      	movs	r3, #2
 800da94:	e0c5      	b.n	800dc22 <f_read+0x2b6>
			sect += csect;
 800da96:	69ba      	ldr	r2, [r7, #24]
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	4413      	add	r3, r2
 800da9c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	899b      	ldrh	r3, [r3, #12]
 800daa2:	461a      	mov	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800daaa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d041      	beq.n	800db36 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dab2:	69fa      	ldr	r2, [r7, #28]
 800dab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab6:	4413      	add	r3, r2
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	8952      	ldrh	r2, [r2, #10]
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d905      	bls.n	800dacc <f_read+0x160>
					cc = fs->csize - csect;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	895b      	ldrh	r3, [r3, #10]
 800dac4:	461a      	mov	r2, r3
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	7858      	ldrb	r0, [r3, #1]
 800dad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad2:	69ba      	ldr	r2, [r7, #24]
 800dad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dad6:	f7fd ff27 	bl	800b928 <disk_read>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d004      	beq.n	800daea <f_read+0x17e>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2201      	movs	r2, #1
 800dae4:	755a      	strb	r2, [r3, #21]
 800dae6:	2301      	movs	r3, #1
 800dae8:	e09b      	b.n	800dc22 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	7d1b      	ldrb	r3, [r3, #20]
 800daee:	b25b      	sxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	da18      	bge.n	800db26 <f_read+0x1ba>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a1a      	ldr	r2, [r3, #32]
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dafe:	429a      	cmp	r2, r3
 800db00:	d911      	bls.n	800db26 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6a1a      	ldr	r2, [r3, #32]
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	697a      	ldr	r2, [r7, #20]
 800db0c:	8992      	ldrh	r2, [r2, #12]
 800db0e:	fb02 f303 	mul.w	r3, r2, r3
 800db12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db14:	18d0      	adds	r0, r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	899b      	ldrh	r3, [r3, #12]
 800db20:	461a      	mov	r2, r3
 800db22:	f7fd ffe1 	bl	800bae8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	899b      	ldrh	r3, [r3, #12]
 800db2a:	461a      	mov	r2, r3
 800db2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2e:	fb02 f303 	mul.w	r3, r2, r3
 800db32:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800db34:	e05c      	b.n	800dbf0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d02e      	beq.n	800db9e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	7d1b      	ldrb	r3, [r3, #20]
 800db44:	b25b      	sxtb	r3, r3
 800db46:	2b00      	cmp	r3, #0
 800db48:	da18      	bge.n	800db7c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	7858      	ldrb	r0, [r3, #1]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a1a      	ldr	r2, [r3, #32]
 800db58:	2301      	movs	r3, #1
 800db5a:	f7fd ff05 	bl	800b968 <disk_write>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <f_read+0x202>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2201      	movs	r2, #1
 800db68:	755a      	strb	r2, [r3, #21]
 800db6a:	2301      	movs	r3, #1
 800db6c:	e059      	b.n	800dc22 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	7d1b      	ldrb	r3, [r3, #20]
 800db72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db76:	b2da      	uxtb	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	7858      	ldrb	r0, [r3, #1]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db86:	2301      	movs	r3, #1
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	f7fd fecd 	bl	800b928 <disk_read>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d004      	beq.n	800db9e <f_read+0x232>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2201      	movs	r2, #1
 800db98:	755a      	strb	r2, [r3, #21]
 800db9a:	2301      	movs	r3, #1
 800db9c:	e041      	b.n	800dc22 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	69ba      	ldr	r2, [r7, #24]
 800dba2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	899b      	ldrh	r3, [r3, #12]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	8992      	ldrh	r2, [r2, #12]
 800dbb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbb6:	fb01 f202 	mul.w	r2, r1, r2
 800dbba:	1a9b      	subs	r3, r3, r2
 800dbbc:	1ac3      	subs	r3, r0, r3
 800dbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dbc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d901      	bls.n	800dbcc <f_read+0x260>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	8992      	ldrh	r2, [r2, #12]
 800dbda:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbde:	fb00 f202 	mul.w	r2, r0, r2
 800dbe2:	1a9b      	subs	r3, r3, r2
 800dbe4:	440b      	add	r3, r1
 800dbe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbec:	f7fd ff7c 	bl	800bae8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dbf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf4:	4413      	add	r3, r2
 800dbf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	699a      	ldr	r2, [r3, #24]
 800dbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfe:	441a      	add	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	619a      	str	r2, [r3, #24]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0a:	441a      	add	r2, r3
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f47f aee1 	bne.w	800d9e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3738      	adds	r7, #56	@ 0x38
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b08c      	sub	sp, #48	@ 0x30
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	607a      	str	r2, [r7, #4]
 800dc36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f107 0210 	add.w	r2, r7, #16
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7ff fc4a 	bl	800d4e4 <validate>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d107      	bne.n	800dc6e <f_write+0x44>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	7d5b      	ldrb	r3, [r3, #21]
 800dc62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800dc66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d002      	beq.n	800dc74 <f_write+0x4a>
 800dc6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc72:	e16a      	b.n	800df4a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	7d1b      	ldrb	r3, [r3, #20]
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <f_write+0x5a>
 800dc80:	2307      	movs	r3, #7
 800dc82:	e162      	b.n	800df4a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	699a      	ldr	r2, [r3, #24]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	441a      	add	r2, r3
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	f080 814c 	bcs.w	800df2e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	43db      	mvns	r3, r3
 800dc9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dc9e:	e146      	b.n	800df2e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	8992      	ldrh	r2, [r2, #12]
 800dca8:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcac:	fb01 f202 	mul.w	r2, r1, r2
 800dcb0:	1a9b      	subs	r3, r3, r2
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f040 80f1 	bne.w	800de9a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	8992      	ldrh	r2, [r2, #12]
 800dcc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	8952      	ldrh	r2, [r2, #10]
 800dcc8:	3a01      	subs	r2, #1
 800dcca:	4013      	ands	r3, r2
 800dccc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d143      	bne.n	800dd5c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10c      	bne.n	800dcf6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d11a      	bne.n	800dd1e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2100      	movs	r1, #0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe fc38 	bl	800c562 <create_chain>
 800dcf2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dcf4:	e013      	b.n	800dd1e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d007      	beq.n	800dd0e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	699b      	ldr	r3, [r3, #24]
 800dd02:	4619      	mov	r1, r3
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7fe fcc4 	bl	800c692 <clmt_clust>
 800dd0a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dd0c:	e007      	b.n	800dd1e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	69db      	ldr	r3, [r3, #28]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4610      	mov	r0, r2
 800dd18:	f7fe fc23 	bl	800c562 <create_chain>
 800dd1c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f000 8109 	beq.w	800df38 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d104      	bne.n	800dd36 <f_write+0x10c>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	755a      	strb	r2, [r3, #21]
 800dd32:	2302      	movs	r3, #2
 800dd34:	e109      	b.n	800df4a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3c:	d104      	bne.n	800dd48 <f_write+0x11e>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2201      	movs	r2, #1
 800dd42:	755a      	strb	r2, [r3, #21]
 800dd44:	2301      	movs	r3, #1
 800dd46:	e100      	b.n	800df4a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd4c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <f_write+0x132>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd5a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	7d1b      	ldrb	r3, [r3, #20]
 800dd60:	b25b      	sxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	da18      	bge.n	800dd98 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	7858      	ldrb	r0, [r3, #1]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6a1a      	ldr	r2, [r3, #32]
 800dd74:	2301      	movs	r3, #1
 800dd76:	f7fd fdf7 	bl	800b968 <disk_write>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d004      	beq.n	800dd8a <f_write+0x160>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2201      	movs	r2, #1
 800dd84:	755a      	strb	r2, [r3, #21]
 800dd86:	2301      	movs	r3, #1
 800dd88:	e0df      	b.n	800df4a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	7d1b      	ldrb	r3, [r3, #20]
 800dd8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	69db      	ldr	r3, [r3, #28]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f7fe f96d 	bl	800c080 <clust2sect>
 800dda6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d104      	bne.n	800ddb8 <f_write+0x18e>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	755a      	strb	r2, [r3, #21]
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	e0c8      	b.n	800df4a <f_write+0x320>
			sect += csect;
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	899b      	ldrh	r3, [r3, #12]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddcc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ddce:	6a3b      	ldr	r3, [r7, #32]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d043      	beq.n	800de5c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	4413      	add	r3, r2
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	8952      	ldrh	r2, [r2, #10]
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d905      	bls.n	800ddee <f_write+0x1c4>
					cc = fs->csize - csect;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	895b      	ldrh	r3, [r3, #10]
 800dde6:	461a      	mov	r2, r3
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	7858      	ldrb	r0, [r3, #1]
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	69f9      	ldr	r1, [r7, #28]
 800ddf8:	f7fd fdb6 	bl	800b968 <disk_write>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d004      	beq.n	800de0c <f_write+0x1e2>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	755a      	strb	r2, [r3, #21]
 800de08:	2301      	movs	r3, #1
 800de0a:	e09e      	b.n	800df4a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6a1a      	ldr	r2, [r3, #32]
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	6a3a      	ldr	r2, [r7, #32]
 800de16:	429a      	cmp	r2, r3
 800de18:	d918      	bls.n	800de4c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6a1a      	ldr	r2, [r3, #32]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	8992      	ldrh	r2, [r2, #12]
 800de2c:	fb02 f303 	mul.w	r3, r2, r3
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	18d1      	adds	r1, r2, r3
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	899b      	ldrh	r3, [r3, #12]
 800de38:	461a      	mov	r2, r3
 800de3a:	f7fd fe55 	bl	800bae8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	7d1b      	ldrb	r3, [r3, #20]
 800de42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de46:	b2da      	uxtb	r2, r3
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	899b      	ldrh	r3, [r3, #12]
 800de50:	461a      	mov	r2, r3
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	fb02 f303 	mul.w	r3, r2, r3
 800de58:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800de5a:	e04b      	b.n	800def4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	429a      	cmp	r2, r3
 800de64:	d016      	beq.n	800de94 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	699a      	ldr	r2, [r3, #24]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de6e:	429a      	cmp	r2, r3
 800de70:	d210      	bcs.n	800de94 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	7858      	ldrb	r0, [r3, #1]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de7c:	2301      	movs	r3, #1
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	f7fd fd52 	bl	800b928 <disk_read>
 800de84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de86:	2b00      	cmp	r3, #0
 800de88:	d004      	beq.n	800de94 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2201      	movs	r2, #1
 800de8e:	755a      	strb	r2, [r3, #21]
 800de90:	2301      	movs	r3, #1
 800de92:	e05a      	b.n	800df4a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	899b      	ldrh	r3, [r3, #12]
 800de9e:	4618      	mov	r0, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	8992      	ldrh	r2, [r2, #12]
 800dea8:	fbb3 f1f2 	udiv	r1, r3, r2
 800deac:	fb01 f202 	mul.w	r2, r1, r2
 800deb0:	1a9b      	subs	r3, r3, r2
 800deb2:	1ac3      	subs	r3, r0, r3
 800deb4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800deb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	429a      	cmp	r2, r3
 800debc:	d901      	bls.n	800dec2 <f_write+0x298>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	8992      	ldrh	r2, [r2, #12]
 800ded0:	fbb3 f0f2 	udiv	r0, r3, r2
 800ded4:	fb00 f202 	mul.w	r2, r0, r2
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	440b      	add	r3, r1
 800dedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dede:	69f9      	ldr	r1, [r7, #28]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fd fe01 	bl	800bae8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	7d1b      	ldrb	r3, [r3, #20]
 800deea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800deee:	b2da      	uxtb	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800def4:	69fa      	ldr	r2, [r7, #28]
 800def6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def8:	4413      	add	r3, r2
 800defa:	61fb      	str	r3, [r7, #28]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	699a      	ldr	r2, [r3, #24]
 800df00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df02:	441a      	add	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	619a      	str	r2, [r3, #24]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	68da      	ldr	r2, [r3, #12]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	429a      	cmp	r2, r3
 800df12:	bf38      	it	cc
 800df14:	461a      	movcc	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	60da      	str	r2, [r3, #12]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	441a      	add	r2, r3
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	f47f aeb5 	bne.w	800dca0 <f_write+0x76>
 800df36:	e000      	b.n	800df3a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df38:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	7d1b      	ldrb	r3, [r3, #20]
 800df3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df42:	b2da      	uxtb	r2, r3
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3730      	adds	r7, #48	@ 0x30
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b086      	sub	sp, #24
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f107 0208 	add.w	r2, r7, #8
 800df60:	4611      	mov	r1, r2
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fabe 	bl	800d4e4 <validate>
 800df68:	4603      	mov	r3, r0
 800df6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df6c:	7dfb      	ldrb	r3, [r7, #23]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d168      	bne.n	800e044 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	7d1b      	ldrb	r3, [r3, #20]
 800df76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d062      	beq.n	800e044 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7d1b      	ldrb	r3, [r3, #20]
 800df82:	b25b      	sxtb	r3, r3
 800df84:	2b00      	cmp	r3, #0
 800df86:	da15      	bge.n	800dfb4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	7858      	ldrb	r0, [r3, #1]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6a1a      	ldr	r2, [r3, #32]
 800df96:	2301      	movs	r3, #1
 800df98:	f7fd fce6 	bl	800b968 <disk_write>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <f_sync+0x54>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e04f      	b.n	800e046 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	7d1b      	ldrb	r3, [r3, #20]
 800dfaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dfb4:	f7fd fb0c 	bl	800b5d0 <get_fattime>
 800dfb8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	f7fd ffbe 	bl	800bf44 <move_window>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dfcc:	7dfb      	ldrb	r3, [r7, #23]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d138      	bne.n	800e044 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	330b      	adds	r3, #11
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	330b      	adds	r3, #11
 800dfe2:	f042 0220 	orr.w	r2, r2, #32
 800dfe6:	b2d2      	uxtb	r2, r2
 800dfe8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6818      	ldr	r0, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	461a      	mov	r2, r3
 800dff4:	68f9      	ldr	r1, [r7, #12]
 800dff6:	f7fe fd49 	bl	800ca8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f103 021c 	add.w	r2, r3, #28
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f7fd fd42 	bl	800ba90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3316      	adds	r3, #22
 800e010:	6939      	ldr	r1, [r7, #16]
 800e012:	4618      	mov	r0, r3
 800e014:	f7fd fd3c 	bl	800ba90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3312      	adds	r3, #18
 800e01c:	2100      	movs	r1, #0
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fd fd1b 	bl	800ba5a <st_word>
					fs->wflag = 1;
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	2201      	movs	r2, #1
 800e028:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fd ffb7 	bl	800bfa0 <sync_fs>
 800e032:	4603      	mov	r3, r0
 800e034:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	7d1b      	ldrb	r3, [r3, #20]
 800e03a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e044:	7dfb      	ldrb	r3, [r7, #23]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3718      	adds	r7, #24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b084      	sub	sp, #16
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ff7b 	bl	800df52 <f_sync>
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d118      	bne.n	800e098 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f107 0208 	add.w	r2, r7, #8
 800e06c:	4611      	mov	r1, r2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff fa38 	bl	800d4e4 <validate>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10c      	bne.n	800e098 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	4618      	mov	r0, r3
 800e084:	f7fd feba 	bl	800bdfc <dec_lock>
 800e088:	4603      	mov	r3, r0
 800e08a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d102      	bne.n	800e098 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e098:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3710      	adds	r7, #16
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b090      	sub	sp, #64	@ 0x40
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f107 0208 	add.w	r2, r7, #8
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7ff fa15 	bl	800d4e4 <validate>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e0c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d103      	bne.n	800e0d0 <f_lseek+0x2e>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7d5b      	ldrb	r3, [r3, #21]
 800e0cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e0d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <f_lseek+0x3c>
 800e0d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0dc:	e201      	b.n	800e4e2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f000 80d9 	beq.w	800e29a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ee:	d15a      	bne.n	800e1a6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f8:	1d1a      	adds	r2, r3, #4
 800e0fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	617b      	str	r3, [r7, #20]
 800e100:	2302      	movs	r3, #2
 800e102:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d03a      	beq.n	800e186 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e112:	613b      	str	r3, [r7, #16]
 800e114:	2300      	movs	r3, #0
 800e116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11a:	3302      	adds	r3, #2
 800e11c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e124:	3301      	adds	r3, #1
 800e126:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fd ffc6 	bl	800c0be <get_fat>
 800e132:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	2b01      	cmp	r3, #1
 800e138:	d804      	bhi.n	800e144 <f_lseek+0xa2>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2202      	movs	r2, #2
 800e13e:	755a      	strb	r2, [r3, #21]
 800e140:	2302      	movs	r3, #2
 800e142:	e1ce      	b.n	800e4e2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d104      	bne.n	800e156 <f_lseek+0xb4>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	755a      	strb	r2, [r3, #21]
 800e152:	2301      	movs	r3, #1
 800e154:	e1c5      	b.n	800e4e2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	3301      	adds	r3, #1
 800e15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d0de      	beq.n	800e11e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	429a      	cmp	r2, r3
 800e166:	d809      	bhi.n	800e17c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16a:	1d1a      	adds	r2, r3, #4
 800e16c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e174:	1d1a      	adds	r2, r3, #4
 800e176:	627a      	str	r2, [r7, #36]	@ 0x24
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e182:	429a      	cmp	r2, r3
 800e184:	d3c4      	bcc.n	800e110 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e18c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e18e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	429a      	cmp	r2, r3
 800e194:	d803      	bhi.n	800e19e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e198:	2200      	movs	r2, #0
 800e19a:	601a      	str	r2, [r3, #0]
 800e19c:	e19f      	b.n	800e4de <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e19e:	2311      	movs	r3, #17
 800e1a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e1a4:	e19b      	b.n	800e4de <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d902      	bls.n	800e1b6 <f_lseek+0x114>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f000 818d 	beq.w	800e4de <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7fe fa61 	bl	800c692 <clmt_clust>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e1d6:	68ba      	ldr	r2, [r7, #8]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	69db      	ldr	r3, [r3, #28]
 800e1dc:	4619      	mov	r1, r3
 800e1de:	4610      	mov	r0, r2
 800e1e0:	f7fd ff4e 	bl	800c080 <clust2sect>
 800e1e4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d104      	bne.n	800e1f6 <f_lseek+0x154>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2202      	movs	r2, #2
 800e1f0:	755a      	strb	r2, [r3, #21]
 800e1f2:	2302      	movs	r3, #2
 800e1f4:	e175      	b.n	800e4e2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	8992      	ldrh	r2, [r2, #12]
 800e1fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	8952      	ldrh	r2, [r2, #10]
 800e206:	3a01      	subs	r2, #1
 800e208:	4013      	ands	r3, r2
 800e20a:	69ba      	ldr	r2, [r7, #24]
 800e20c:	4413      	add	r3, r2
 800e20e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	8992      	ldrh	r2, [r2, #12]
 800e218:	fbb3 f1f2 	udiv	r1, r3, r2
 800e21c:	fb01 f202 	mul.w	r2, r1, r2
 800e220:	1a9b      	subs	r3, r3, r2
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 815b 	beq.w	800e4de <f_lseek+0x43c>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	429a      	cmp	r2, r3
 800e230:	f000 8155 	beq.w	800e4de <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	7d1b      	ldrb	r3, [r3, #20]
 800e238:	b25b      	sxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	da18      	bge.n	800e270 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	7858      	ldrb	r0, [r3, #1]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a1a      	ldr	r2, [r3, #32]
 800e24c:	2301      	movs	r3, #1
 800e24e:	f7fd fb8b 	bl	800b968 <disk_write>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d004      	beq.n	800e262 <f_lseek+0x1c0>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	755a      	strb	r2, [r3, #21]
 800e25e:	2301      	movs	r3, #1
 800e260:	e13f      	b.n	800e4e2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	7d1b      	ldrb	r3, [r3, #20]
 800e266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	7858      	ldrb	r0, [r3, #1]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e27a:	2301      	movs	r3, #1
 800e27c:	69ba      	ldr	r2, [r7, #24]
 800e27e:	f7fd fb53 	bl	800b928 <disk_read>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d004      	beq.n	800e292 <f_lseek+0x1f0>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	755a      	strb	r2, [r3, #21]
 800e28e:	2301      	movs	r3, #1
 800e290:	e127      	b.n	800e4e2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	621a      	str	r2, [r3, #32]
 800e298:	e121      	b.n	800e4de <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d908      	bls.n	800e2b6 <f_lseek+0x214>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	7d1b      	ldrb	r3, [r3, #20]
 800e2a8:	f003 0302 	and.w	r3, r3, #2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2c4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 80b5 	beq.w	800e438 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	895b      	ldrh	r3, [r3, #10]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	899b      	ldrh	r3, [r3, #12]
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d01b      	beq.n	800e31c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	1e5a      	subs	r2, r3, #1
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	1e59      	subs	r1, r3, #1
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d30f      	bcc.n	800e31c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	1e5a      	subs	r2, r3, #1
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	425b      	negs	r3, r3
 800e304:	401a      	ands	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	69db      	ldr	r3, [r3, #28]
 800e318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e31a:	e022      	b.n	800e362 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e324:	2b00      	cmp	r3, #0
 800e326:	d119      	bne.n	800e35c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2100      	movs	r1, #0
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe f918 	bl	800c562 <create_chain>
 800e332:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e336:	2b01      	cmp	r3, #1
 800e338:	d104      	bne.n	800e344 <f_lseek+0x2a2>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2202      	movs	r2, #2
 800e33e:	755a      	strb	r2, [r3, #21]
 800e340:	2302      	movs	r3, #2
 800e342:	e0ce      	b.n	800e4e2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34a:	d104      	bne.n	800e356 <f_lseek+0x2b4>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	755a      	strb	r2, [r3, #21]
 800e352:	2301      	movs	r3, #1
 800e354:	e0c5      	b.n	800e4e2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e35a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e360:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e364:	2b00      	cmp	r3, #0
 800e366:	d067      	beq.n	800e438 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e368:	e03a      	b.n	800e3e0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e36a:	683a      	ldr	r2, [r7, #0]
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	603b      	str	r3, [r7, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	699a      	ldr	r2, [r3, #24]
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	441a      	add	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	7d1b      	ldrb	r3, [r3, #20]
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00b      	beq.n	800e3a2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fe f8e7 	bl	800c562 <create_chain>
 800e394:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d108      	bne.n	800e3ae <f_lseek+0x30c>
							ofs = 0; break;
 800e39c:	2300      	movs	r3, #0
 800e39e:	603b      	str	r3, [r7, #0]
 800e3a0:	e022      	b.n	800e3e8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd fe89 	bl	800c0be <get_fat>
 800e3ac:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b4:	d104      	bne.n	800e3c0 <f_lseek+0x31e>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	755a      	strb	r2, [r3, #21]
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e090      	b.n	800e4e2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d904      	bls.n	800e3d0 <f_lseek+0x32e>
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d304      	bcc.n	800e3da <f_lseek+0x338>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	755a      	strb	r2, [r3, #21]
 800e3d6:	2302      	movs	r3, #2
 800e3d8:	e083      	b.n	800e4e2 <f_lseek+0x440>
					fp->clust = clst;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3de:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e3e0:	683a      	ldr	r2, [r7, #0]
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d8c0      	bhi.n	800e36a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	699a      	ldr	r2, [r3, #24]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	441a      	add	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	899b      	ldrh	r3, [r3, #12]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e400:	fb01 f202 	mul.w	r2, r1, r2
 800e404:	1a9b      	subs	r3, r3, r2
 800e406:	2b00      	cmp	r3, #0
 800e408:	d016      	beq.n	800e438 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fd fe36 	bl	800c080 <clust2sect>
 800e414:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d104      	bne.n	800e426 <f_lseek+0x384>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2202      	movs	r2, #2
 800e420:	755a      	strb	r2, [r3, #21]
 800e422:	2302      	movs	r3, #2
 800e424:	e05d      	b.n	800e4e2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	899b      	ldrh	r3, [r3, #12]
 800e42a:	461a      	mov	r2, r3
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e434:	4413      	add	r3, r2
 800e436:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	699a      	ldr	r2, [r3, #24]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	429a      	cmp	r2, r3
 800e442:	d90a      	bls.n	800e45a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	699a      	ldr	r2, [r3, #24]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	7d1b      	ldrb	r3, [r3, #20]
 800e450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e454:	b2da      	uxtb	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	8992      	ldrh	r2, [r2, #12]
 800e462:	fbb3 f1f2 	udiv	r1, r3, r2
 800e466:	fb01 f202 	mul.w	r2, r1, r2
 800e46a:	1a9b      	subs	r3, r3, r2
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d036      	beq.n	800e4de <f_lseek+0x43c>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a1b      	ldr	r3, [r3, #32]
 800e474:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e476:	429a      	cmp	r2, r3
 800e478:	d031      	beq.n	800e4de <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	7d1b      	ldrb	r3, [r3, #20]
 800e47e:	b25b      	sxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	da18      	bge.n	800e4b6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	7858      	ldrb	r0, [r3, #1]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a1a      	ldr	r2, [r3, #32]
 800e492:	2301      	movs	r3, #1
 800e494:	f7fd fa68 	bl	800b968 <disk_write>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d004      	beq.n	800e4a8 <f_lseek+0x406>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	755a      	strb	r2, [r3, #21]
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e01c      	b.n	800e4e2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7d1b      	ldrb	r3, [r3, #20]
 800e4ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	7858      	ldrb	r0, [r3, #1]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4c4:	f7fd fa30 	bl	800b928 <disk_read>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d004      	beq.n	800e4d8 <f_lseek+0x436>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	755a      	strb	r2, [r3, #21]
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e004      	b.n	800e4e2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4dc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e4de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3740      	adds	r7, #64	@ 0x40
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b090      	sub	sp, #64	@ 0x40
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
 800e4f2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e4f4:	f107 010c 	add.w	r1, r7, #12
 800e4f8:	1d3b      	adds	r3, r7, #4
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fd71 	bl	800cfe4 <find_volume>
 800e502:	4603      	mov	r3, r0
 800e504:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800e508:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d11f      	bne.n	800e550 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	f107 030c 	add.w	r3, r7, #12
 800e516:	4611      	mov	r1, r2
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe fc53 	bl	800cdc4 <follow_path>
 800e51e:	4603      	mov	r3, r0
 800e520:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800e524:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d111      	bne.n	800e550 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e52c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e530:	b25b      	sxtb	r3, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	da03      	bge.n	800e53e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e536:	2306      	movs	r3, #6
 800e538:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e53c:	e008      	b.n	800e550 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d005      	beq.n	800e550 <f_stat+0x66>
 800e544:	f107 030c 	add.w	r3, r7, #12
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fb45 	bl	800cbda <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e550:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e554:	4618      	mov	r0, r3
 800e556:	3740      	adds	r7, #64	@ 0x40
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b087      	sub	sp, #28
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	4613      	mov	r3, r2
 800e568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e56a:	2301      	movs	r3, #1
 800e56c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e572:	4b1f      	ldr	r3, [pc, #124]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e574:	7a5b      	ldrb	r3, [r3, #9]
 800e576:	b2db      	uxtb	r3, r3
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d131      	bne.n	800e5e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e57c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e57e:	7a5b      	ldrb	r3, [r3, #9]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	461a      	mov	r2, r3
 800e584:	4b1a      	ldr	r3, [pc, #104]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e586:	2100      	movs	r1, #0
 800e588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e58a:	4b19      	ldr	r3, [pc, #100]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e58c:	7a5b      	ldrb	r3, [r3, #9]
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	4a17      	ldr	r2, [pc, #92]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e59a:	4b15      	ldr	r3, [pc, #84]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e59c:	7a5b      	ldrb	r3, [r3, #9]
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	4b13      	ldr	r3, [pc, #76]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e5a4:	4413      	add	r3, r2
 800e5a6:	79fa      	ldrb	r2, [r7, #7]
 800e5a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e5aa:	4b11      	ldr	r3, [pc, #68]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e5ac:	7a5b      	ldrb	r3, [r3, #9]
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	b2d1      	uxtb	r1, r2
 800e5b4:	4a0e      	ldr	r2, [pc, #56]	@ (800e5f0 <FATFS_LinkDriverEx+0x94>)
 800e5b6:	7251      	strb	r1, [r2, #9]
 800e5b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e5ba:	7dbb      	ldrb	r3, [r7, #22]
 800e5bc:	3330      	adds	r3, #48	@ 0x30
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	223a      	movs	r2, #58	@ 0x3a
 800e5ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	3302      	adds	r3, #2
 800e5d0:	222f      	movs	r2, #47	@ 0x2f
 800e5d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	3303      	adds	r3, #3
 800e5d8:	2200      	movs	r2, #0
 800e5da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	371c      	adds	r7, #28
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	2000581c 	.word	0x2000581c

0800e5f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e5fe:	2200      	movs	r2, #0
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7ff ffaa 	bl	800e55c <FATFS_LinkDriverEx>
 800e608:	4603      	mov	r3, r0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <atoi>:
 800e612:	220a      	movs	r2, #10
 800e614:	2100      	movs	r1, #0
 800e616:	f000 b93b 	b.w	800e890 <strtol>
	...

0800e61c <malloc>:
 800e61c:	4b02      	ldr	r3, [pc, #8]	@ (800e628 <malloc+0xc>)
 800e61e:	4601      	mov	r1, r0
 800e620:	6818      	ldr	r0, [r3, #0]
 800e622:	f000 b82d 	b.w	800e680 <_malloc_r>
 800e626:	bf00      	nop
 800e628:	20000038 	.word	0x20000038

0800e62c <free>:
 800e62c:	4b02      	ldr	r3, [pc, #8]	@ (800e638 <free+0xc>)
 800e62e:	4601      	mov	r1, r0
 800e630:	6818      	ldr	r0, [r3, #0]
 800e632:	f002 b8a5 	b.w	8010780 <_free_r>
 800e636:	bf00      	nop
 800e638:	20000038 	.word	0x20000038

0800e63c <sbrk_aligned>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4e0f      	ldr	r6, [pc, #60]	@ (800e67c <sbrk_aligned+0x40>)
 800e640:	460c      	mov	r4, r1
 800e642:	6831      	ldr	r1, [r6, #0]
 800e644:	4605      	mov	r5, r0
 800e646:	b911      	cbnz	r1, 800e64e <sbrk_aligned+0x12>
 800e648:	f001 f9d0 	bl	800f9ec <_sbrk_r>
 800e64c:	6030      	str	r0, [r6, #0]
 800e64e:	4621      	mov	r1, r4
 800e650:	4628      	mov	r0, r5
 800e652:	f001 f9cb 	bl	800f9ec <_sbrk_r>
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	d103      	bne.n	800e662 <sbrk_aligned+0x26>
 800e65a:	f04f 34ff 	mov.w	r4, #4294967295
 800e65e:	4620      	mov	r0, r4
 800e660:	bd70      	pop	{r4, r5, r6, pc}
 800e662:	1cc4      	adds	r4, r0, #3
 800e664:	f024 0403 	bic.w	r4, r4, #3
 800e668:	42a0      	cmp	r0, r4
 800e66a:	d0f8      	beq.n	800e65e <sbrk_aligned+0x22>
 800e66c:	1a21      	subs	r1, r4, r0
 800e66e:	4628      	mov	r0, r5
 800e670:	f001 f9bc 	bl	800f9ec <_sbrk_r>
 800e674:	3001      	adds	r0, #1
 800e676:	d1f2      	bne.n	800e65e <sbrk_aligned+0x22>
 800e678:	e7ef      	b.n	800e65a <sbrk_aligned+0x1e>
 800e67a:	bf00      	nop
 800e67c:	20005828 	.word	0x20005828

0800e680 <_malloc_r>:
 800e680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e684:	1ccd      	adds	r5, r1, #3
 800e686:	f025 0503 	bic.w	r5, r5, #3
 800e68a:	3508      	adds	r5, #8
 800e68c:	2d0c      	cmp	r5, #12
 800e68e:	bf38      	it	cc
 800e690:	250c      	movcc	r5, #12
 800e692:	2d00      	cmp	r5, #0
 800e694:	4606      	mov	r6, r0
 800e696:	db01      	blt.n	800e69c <_malloc_r+0x1c>
 800e698:	42a9      	cmp	r1, r5
 800e69a:	d904      	bls.n	800e6a6 <_malloc_r+0x26>
 800e69c:	230c      	movs	r3, #12
 800e69e:	6033      	str	r3, [r6, #0]
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e77c <_malloc_r+0xfc>
 800e6aa:	f000 f869 	bl	800e780 <__malloc_lock>
 800e6ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b2:	461c      	mov	r4, r3
 800e6b4:	bb44      	cbnz	r4, 800e708 <_malloc_r+0x88>
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f7ff ffbf 	bl	800e63c <sbrk_aligned>
 800e6be:	1c43      	adds	r3, r0, #1
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	d158      	bne.n	800e776 <_malloc_r+0xf6>
 800e6c4:	f8d8 4000 	ldr.w	r4, [r8]
 800e6c8:	4627      	mov	r7, r4
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	d143      	bne.n	800e756 <_malloc_r+0xd6>
 800e6ce:	2c00      	cmp	r4, #0
 800e6d0:	d04b      	beq.n	800e76a <_malloc_r+0xea>
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	eb04 0903 	add.w	r9, r4, r3
 800e6dc:	f001 f986 	bl	800f9ec <_sbrk_r>
 800e6e0:	4581      	cmp	r9, r0
 800e6e2:	d142      	bne.n	800e76a <_malloc_r+0xea>
 800e6e4:	6821      	ldr	r1, [r4, #0]
 800e6e6:	1a6d      	subs	r5, r5, r1
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f7ff ffa6 	bl	800e63c <sbrk_aligned>
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d03a      	beq.n	800e76a <_malloc_r+0xea>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	442b      	add	r3, r5
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	bb62      	cbnz	r2, 800e75c <_malloc_r+0xdc>
 800e702:	f8c8 7000 	str.w	r7, [r8]
 800e706:	e00f      	b.n	800e728 <_malloc_r+0xa8>
 800e708:	6822      	ldr	r2, [r4, #0]
 800e70a:	1b52      	subs	r2, r2, r5
 800e70c:	d420      	bmi.n	800e750 <_malloc_r+0xd0>
 800e70e:	2a0b      	cmp	r2, #11
 800e710:	d917      	bls.n	800e742 <_malloc_r+0xc2>
 800e712:	1961      	adds	r1, r4, r5
 800e714:	42a3      	cmp	r3, r4
 800e716:	6025      	str	r5, [r4, #0]
 800e718:	bf18      	it	ne
 800e71a:	6059      	strne	r1, [r3, #4]
 800e71c:	6863      	ldr	r3, [r4, #4]
 800e71e:	bf08      	it	eq
 800e720:	f8c8 1000 	streq.w	r1, [r8]
 800e724:	5162      	str	r2, [r4, r5]
 800e726:	604b      	str	r3, [r1, #4]
 800e728:	4630      	mov	r0, r6
 800e72a:	f000 f82f 	bl	800e78c <__malloc_unlock>
 800e72e:	f104 000b 	add.w	r0, r4, #11
 800e732:	1d23      	adds	r3, r4, #4
 800e734:	f020 0007 	bic.w	r0, r0, #7
 800e738:	1ac2      	subs	r2, r0, r3
 800e73a:	bf1c      	itt	ne
 800e73c:	1a1b      	subne	r3, r3, r0
 800e73e:	50a3      	strne	r3, [r4, r2]
 800e740:	e7af      	b.n	800e6a2 <_malloc_r+0x22>
 800e742:	6862      	ldr	r2, [r4, #4]
 800e744:	42a3      	cmp	r3, r4
 800e746:	bf0c      	ite	eq
 800e748:	f8c8 2000 	streq.w	r2, [r8]
 800e74c:	605a      	strne	r2, [r3, #4]
 800e74e:	e7eb      	b.n	800e728 <_malloc_r+0xa8>
 800e750:	4623      	mov	r3, r4
 800e752:	6864      	ldr	r4, [r4, #4]
 800e754:	e7ae      	b.n	800e6b4 <_malloc_r+0x34>
 800e756:	463c      	mov	r4, r7
 800e758:	687f      	ldr	r7, [r7, #4]
 800e75a:	e7b6      	b.n	800e6ca <_malloc_r+0x4a>
 800e75c:	461a      	mov	r2, r3
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	42a3      	cmp	r3, r4
 800e762:	d1fb      	bne.n	800e75c <_malloc_r+0xdc>
 800e764:	2300      	movs	r3, #0
 800e766:	6053      	str	r3, [r2, #4]
 800e768:	e7de      	b.n	800e728 <_malloc_r+0xa8>
 800e76a:	230c      	movs	r3, #12
 800e76c:	6033      	str	r3, [r6, #0]
 800e76e:	4630      	mov	r0, r6
 800e770:	f000 f80c 	bl	800e78c <__malloc_unlock>
 800e774:	e794      	b.n	800e6a0 <_malloc_r+0x20>
 800e776:	6005      	str	r5, [r0, #0]
 800e778:	e7d6      	b.n	800e728 <_malloc_r+0xa8>
 800e77a:	bf00      	nop
 800e77c:	2000582c 	.word	0x2000582c

0800e780 <__malloc_lock>:
 800e780:	4801      	ldr	r0, [pc, #4]	@ (800e788 <__malloc_lock+0x8>)
 800e782:	f001 b980 	b.w	800fa86 <__retarget_lock_acquire_recursive>
 800e786:	bf00      	nop
 800e788:	20005970 	.word	0x20005970

0800e78c <__malloc_unlock>:
 800e78c:	4801      	ldr	r0, [pc, #4]	@ (800e794 <__malloc_unlock+0x8>)
 800e78e:	f001 b97b 	b.w	800fa88 <__retarget_lock_release_recursive>
 800e792:	bf00      	nop
 800e794:	20005970 	.word	0x20005970

0800e798 <_strtol_l.constprop.0>:
 800e798:	2b24      	cmp	r3, #36	@ 0x24
 800e79a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e79e:	4686      	mov	lr, r0
 800e7a0:	4690      	mov	r8, r2
 800e7a2:	d801      	bhi.n	800e7a8 <_strtol_l.constprop.0+0x10>
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d106      	bne.n	800e7b6 <_strtol_l.constprop.0+0x1e>
 800e7a8:	f001 f942 	bl	800fa30 <__errno>
 800e7ac:	2316      	movs	r3, #22
 800e7ae:	6003      	str	r3, [r0, #0]
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b6:	4834      	ldr	r0, [pc, #208]	@ (800e888 <_strtol_l.constprop.0+0xf0>)
 800e7b8:	460d      	mov	r5, r1
 800e7ba:	462a      	mov	r2, r5
 800e7bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7c0:	5d06      	ldrb	r6, [r0, r4]
 800e7c2:	f016 0608 	ands.w	r6, r6, #8
 800e7c6:	d1f8      	bne.n	800e7ba <_strtol_l.constprop.0+0x22>
 800e7c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e7ca:	d12d      	bne.n	800e828 <_strtol_l.constprop.0+0x90>
 800e7cc:	782c      	ldrb	r4, [r5, #0]
 800e7ce:	2601      	movs	r6, #1
 800e7d0:	1c95      	adds	r5, r2, #2
 800e7d2:	f033 0210 	bics.w	r2, r3, #16
 800e7d6:	d109      	bne.n	800e7ec <_strtol_l.constprop.0+0x54>
 800e7d8:	2c30      	cmp	r4, #48	@ 0x30
 800e7da:	d12a      	bne.n	800e832 <_strtol_l.constprop.0+0x9a>
 800e7dc:	782a      	ldrb	r2, [r5, #0]
 800e7de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e7e2:	2a58      	cmp	r2, #88	@ 0x58
 800e7e4:	d125      	bne.n	800e832 <_strtol_l.constprop.0+0x9a>
 800e7e6:	786c      	ldrb	r4, [r5, #1]
 800e7e8:	2310      	movs	r3, #16
 800e7ea:	3502      	adds	r5, #2
 800e7ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e7f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	fbbc f9f3 	udiv	r9, ip, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	fb03 ca19 	mls	sl, r3, r9, ip
 800e800:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e804:	2f09      	cmp	r7, #9
 800e806:	d81b      	bhi.n	800e840 <_strtol_l.constprop.0+0xa8>
 800e808:	463c      	mov	r4, r7
 800e80a:	42a3      	cmp	r3, r4
 800e80c:	dd27      	ble.n	800e85e <_strtol_l.constprop.0+0xc6>
 800e80e:	1c57      	adds	r7, r2, #1
 800e810:	d007      	beq.n	800e822 <_strtol_l.constprop.0+0x8a>
 800e812:	4581      	cmp	r9, r0
 800e814:	d320      	bcc.n	800e858 <_strtol_l.constprop.0+0xc0>
 800e816:	d101      	bne.n	800e81c <_strtol_l.constprop.0+0x84>
 800e818:	45a2      	cmp	sl, r4
 800e81a:	db1d      	blt.n	800e858 <_strtol_l.constprop.0+0xc0>
 800e81c:	fb00 4003 	mla	r0, r0, r3, r4
 800e820:	2201      	movs	r2, #1
 800e822:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e826:	e7eb      	b.n	800e800 <_strtol_l.constprop.0+0x68>
 800e828:	2c2b      	cmp	r4, #43	@ 0x2b
 800e82a:	bf04      	itt	eq
 800e82c:	782c      	ldrbeq	r4, [r5, #0]
 800e82e:	1c95      	addeq	r5, r2, #2
 800e830:	e7cf      	b.n	800e7d2 <_strtol_l.constprop.0+0x3a>
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1da      	bne.n	800e7ec <_strtol_l.constprop.0+0x54>
 800e836:	2c30      	cmp	r4, #48	@ 0x30
 800e838:	bf0c      	ite	eq
 800e83a:	2308      	moveq	r3, #8
 800e83c:	230a      	movne	r3, #10
 800e83e:	e7d5      	b.n	800e7ec <_strtol_l.constprop.0+0x54>
 800e840:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e844:	2f19      	cmp	r7, #25
 800e846:	d801      	bhi.n	800e84c <_strtol_l.constprop.0+0xb4>
 800e848:	3c37      	subs	r4, #55	@ 0x37
 800e84a:	e7de      	b.n	800e80a <_strtol_l.constprop.0+0x72>
 800e84c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e850:	2f19      	cmp	r7, #25
 800e852:	d804      	bhi.n	800e85e <_strtol_l.constprop.0+0xc6>
 800e854:	3c57      	subs	r4, #87	@ 0x57
 800e856:	e7d8      	b.n	800e80a <_strtol_l.constprop.0+0x72>
 800e858:	f04f 32ff 	mov.w	r2, #4294967295
 800e85c:	e7e1      	b.n	800e822 <_strtol_l.constprop.0+0x8a>
 800e85e:	1c53      	adds	r3, r2, #1
 800e860:	d108      	bne.n	800e874 <_strtol_l.constprop.0+0xdc>
 800e862:	2322      	movs	r3, #34	@ 0x22
 800e864:	f8ce 3000 	str.w	r3, [lr]
 800e868:	4660      	mov	r0, ip
 800e86a:	f1b8 0f00 	cmp.w	r8, #0
 800e86e:	d0a0      	beq.n	800e7b2 <_strtol_l.constprop.0+0x1a>
 800e870:	1e69      	subs	r1, r5, #1
 800e872:	e006      	b.n	800e882 <_strtol_l.constprop.0+0xea>
 800e874:	b106      	cbz	r6, 800e878 <_strtol_l.constprop.0+0xe0>
 800e876:	4240      	negs	r0, r0
 800e878:	f1b8 0f00 	cmp.w	r8, #0
 800e87c:	d099      	beq.n	800e7b2 <_strtol_l.constprop.0+0x1a>
 800e87e:	2a00      	cmp	r2, #0
 800e880:	d1f6      	bne.n	800e870 <_strtol_l.constprop.0+0xd8>
 800e882:	f8c8 1000 	str.w	r1, [r8]
 800e886:	e794      	b.n	800e7b2 <_strtol_l.constprop.0+0x1a>
 800e888:	08014721 	.word	0x08014721

0800e88c <_strtol_r>:
 800e88c:	f7ff bf84 	b.w	800e798 <_strtol_l.constprop.0>

0800e890 <strtol>:
 800e890:	4613      	mov	r3, r2
 800e892:	460a      	mov	r2, r1
 800e894:	4601      	mov	r1, r0
 800e896:	4802      	ldr	r0, [pc, #8]	@ (800e8a0 <strtol+0x10>)
 800e898:	6800      	ldr	r0, [r0, #0]
 800e89a:	f7ff bf7d 	b.w	800e798 <_strtol_l.constprop.0>
 800e89e:	bf00      	nop
 800e8a0:	20000038 	.word	0x20000038

0800e8a4 <__cvt>:
 800e8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a8:	ec57 6b10 	vmov	r6, r7, d0
 800e8ac:	2f00      	cmp	r7, #0
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	463b      	mov	r3, r7
 800e8b4:	bfbb      	ittet	lt
 800e8b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e8ba:	461f      	movlt	r7, r3
 800e8bc:	2300      	movge	r3, #0
 800e8be:	232d      	movlt	r3, #45	@ 0x2d
 800e8c0:	700b      	strb	r3, [r1, #0]
 800e8c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e8c8:	4691      	mov	r9, r2
 800e8ca:	f023 0820 	bic.w	r8, r3, #32
 800e8ce:	bfbc      	itt	lt
 800e8d0:	4632      	movlt	r2, r6
 800e8d2:	4616      	movlt	r6, r2
 800e8d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e8d8:	d005      	beq.n	800e8e6 <__cvt+0x42>
 800e8da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e8de:	d100      	bne.n	800e8e2 <__cvt+0x3e>
 800e8e0:	3401      	adds	r4, #1
 800e8e2:	2102      	movs	r1, #2
 800e8e4:	e000      	b.n	800e8e8 <__cvt+0x44>
 800e8e6:	2103      	movs	r1, #3
 800e8e8:	ab03      	add	r3, sp, #12
 800e8ea:	9301      	str	r3, [sp, #4]
 800e8ec:	ab02      	add	r3, sp, #8
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	ec47 6b10 	vmov	d0, r6, r7
 800e8f4:	4653      	mov	r3, sl
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	f001 f97e 	bl	800fbf8 <_dtoa_r>
 800e8fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e900:	4605      	mov	r5, r0
 800e902:	d119      	bne.n	800e938 <__cvt+0x94>
 800e904:	f019 0f01 	tst.w	r9, #1
 800e908:	d00e      	beq.n	800e928 <__cvt+0x84>
 800e90a:	eb00 0904 	add.w	r9, r0, r4
 800e90e:	2200      	movs	r2, #0
 800e910:	2300      	movs	r3, #0
 800e912:	4630      	mov	r0, r6
 800e914:	4639      	mov	r1, r7
 800e916:	f7f2 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e91a:	b108      	cbz	r0, 800e920 <__cvt+0x7c>
 800e91c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e920:	2230      	movs	r2, #48	@ 0x30
 800e922:	9b03      	ldr	r3, [sp, #12]
 800e924:	454b      	cmp	r3, r9
 800e926:	d31e      	bcc.n	800e966 <__cvt+0xc2>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e92c:	1b5b      	subs	r3, r3, r5
 800e92e:	4628      	mov	r0, r5
 800e930:	6013      	str	r3, [r2, #0]
 800e932:	b004      	add	sp, #16
 800e934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e93c:	eb00 0904 	add.w	r9, r0, r4
 800e940:	d1e5      	bne.n	800e90e <__cvt+0x6a>
 800e942:	7803      	ldrb	r3, [r0, #0]
 800e944:	2b30      	cmp	r3, #48	@ 0x30
 800e946:	d10a      	bne.n	800e95e <__cvt+0xba>
 800e948:	2200      	movs	r2, #0
 800e94a:	2300      	movs	r3, #0
 800e94c:	4630      	mov	r0, r6
 800e94e:	4639      	mov	r1, r7
 800e950:	f7f2 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 800e954:	b918      	cbnz	r0, 800e95e <__cvt+0xba>
 800e956:	f1c4 0401 	rsb	r4, r4, #1
 800e95a:	f8ca 4000 	str.w	r4, [sl]
 800e95e:	f8da 3000 	ldr.w	r3, [sl]
 800e962:	4499      	add	r9, r3
 800e964:	e7d3      	b.n	800e90e <__cvt+0x6a>
 800e966:	1c59      	adds	r1, r3, #1
 800e968:	9103      	str	r1, [sp, #12]
 800e96a:	701a      	strb	r2, [r3, #0]
 800e96c:	e7d9      	b.n	800e922 <__cvt+0x7e>

0800e96e <__exponent>:
 800e96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e970:	2900      	cmp	r1, #0
 800e972:	bfba      	itte	lt
 800e974:	4249      	neglt	r1, r1
 800e976:	232d      	movlt	r3, #45	@ 0x2d
 800e978:	232b      	movge	r3, #43	@ 0x2b
 800e97a:	2909      	cmp	r1, #9
 800e97c:	7002      	strb	r2, [r0, #0]
 800e97e:	7043      	strb	r3, [r0, #1]
 800e980:	dd29      	ble.n	800e9d6 <__exponent+0x68>
 800e982:	f10d 0307 	add.w	r3, sp, #7
 800e986:	461d      	mov	r5, r3
 800e988:	270a      	movs	r7, #10
 800e98a:	461a      	mov	r2, r3
 800e98c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e990:	fb07 1416 	mls	r4, r7, r6, r1
 800e994:	3430      	adds	r4, #48	@ 0x30
 800e996:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e99a:	460c      	mov	r4, r1
 800e99c:	2c63      	cmp	r4, #99	@ 0x63
 800e99e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	dcf1      	bgt.n	800e98a <__exponent+0x1c>
 800e9a6:	3130      	adds	r1, #48	@ 0x30
 800e9a8:	1e94      	subs	r4, r2, #2
 800e9aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9ae:	1c41      	adds	r1, r0, #1
 800e9b0:	4623      	mov	r3, r4
 800e9b2:	42ab      	cmp	r3, r5
 800e9b4:	d30a      	bcc.n	800e9cc <__exponent+0x5e>
 800e9b6:	f10d 0309 	add.w	r3, sp, #9
 800e9ba:	1a9b      	subs	r3, r3, r2
 800e9bc:	42ac      	cmp	r4, r5
 800e9be:	bf88      	it	hi
 800e9c0:	2300      	movhi	r3, #0
 800e9c2:	3302      	adds	r3, #2
 800e9c4:	4403      	add	r3, r0
 800e9c6:	1a18      	subs	r0, r3, r0
 800e9c8:	b003      	add	sp, #12
 800e9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e9d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e9d4:	e7ed      	b.n	800e9b2 <__exponent+0x44>
 800e9d6:	2330      	movs	r3, #48	@ 0x30
 800e9d8:	3130      	adds	r1, #48	@ 0x30
 800e9da:	7083      	strb	r3, [r0, #2]
 800e9dc:	70c1      	strb	r1, [r0, #3]
 800e9de:	1d03      	adds	r3, r0, #4
 800e9e0:	e7f1      	b.n	800e9c6 <__exponent+0x58>
	...

0800e9e4 <_printf_float>:
 800e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e8:	b08d      	sub	sp, #52	@ 0x34
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e9f0:	4616      	mov	r6, r2
 800e9f2:	461f      	mov	r7, r3
 800e9f4:	4605      	mov	r5, r0
 800e9f6:	f000 ffc1 	bl	800f97c <_localeconv_r>
 800e9fa:	6803      	ldr	r3, [r0, #0]
 800e9fc:	9304      	str	r3, [sp, #16]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7f1 fc36 	bl	8000270 <strlen>
 800ea04:	2300      	movs	r3, #0
 800ea06:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea08:	f8d8 3000 	ldr.w	r3, [r8]
 800ea0c:	9005      	str	r0, [sp, #20]
 800ea0e:	3307      	adds	r3, #7
 800ea10:	f023 0307 	bic.w	r3, r3, #7
 800ea14:	f103 0208 	add.w	r2, r3, #8
 800ea18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ea1c:	f8d4 b000 	ldr.w	fp, [r4]
 800ea20:	f8c8 2000 	str.w	r2, [r8]
 800ea24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ea2c:	9307      	str	r3, [sp, #28]
 800ea2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ea36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea3a:	4b9c      	ldr	r3, [pc, #624]	@ (800ecac <_printf_float+0x2c8>)
 800ea3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea40:	f7f2 f874 	bl	8000b2c <__aeabi_dcmpun>
 800ea44:	bb70      	cbnz	r0, 800eaa4 <_printf_float+0xc0>
 800ea46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea4a:	4b98      	ldr	r3, [pc, #608]	@ (800ecac <_printf_float+0x2c8>)
 800ea4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea50:	f7f2 f84e 	bl	8000af0 <__aeabi_dcmple>
 800ea54:	bb30      	cbnz	r0, 800eaa4 <_printf_float+0xc0>
 800ea56:	2200      	movs	r2, #0
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	f7f2 f83d 	bl	8000adc <__aeabi_dcmplt>
 800ea62:	b110      	cbz	r0, 800ea6a <_printf_float+0x86>
 800ea64:	232d      	movs	r3, #45	@ 0x2d
 800ea66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea6a:	4a91      	ldr	r2, [pc, #580]	@ (800ecb0 <_printf_float+0x2cc>)
 800ea6c:	4b91      	ldr	r3, [pc, #580]	@ (800ecb4 <_printf_float+0x2d0>)
 800ea6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ea72:	bf94      	ite	ls
 800ea74:	4690      	movls	r8, r2
 800ea76:	4698      	movhi	r8, r3
 800ea78:	2303      	movs	r3, #3
 800ea7a:	6123      	str	r3, [r4, #16]
 800ea7c:	f02b 0304 	bic.w	r3, fp, #4
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	f04f 0900 	mov.w	r9, #0
 800ea86:	9700      	str	r7, [sp, #0]
 800ea88:	4633      	mov	r3, r6
 800ea8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f000 f9d2 	bl	800ee38 <_printf_common>
 800ea94:	3001      	adds	r0, #1
 800ea96:	f040 808d 	bne.w	800ebb4 <_printf_float+0x1d0>
 800ea9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9e:	b00d      	add	sp, #52	@ 0x34
 800eaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa4:	4642      	mov	r2, r8
 800eaa6:	464b      	mov	r3, r9
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	4649      	mov	r1, r9
 800eaac:	f7f2 f83e 	bl	8000b2c <__aeabi_dcmpun>
 800eab0:	b140      	cbz	r0, 800eac4 <_printf_float+0xe0>
 800eab2:	464b      	mov	r3, r9
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bfbc      	itt	lt
 800eab8:	232d      	movlt	r3, #45	@ 0x2d
 800eaba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eabe:	4a7e      	ldr	r2, [pc, #504]	@ (800ecb8 <_printf_float+0x2d4>)
 800eac0:	4b7e      	ldr	r3, [pc, #504]	@ (800ecbc <_printf_float+0x2d8>)
 800eac2:	e7d4      	b.n	800ea6e <_printf_float+0x8a>
 800eac4:	6863      	ldr	r3, [r4, #4]
 800eac6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eaca:	9206      	str	r2, [sp, #24]
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	d13b      	bne.n	800eb48 <_printf_float+0x164>
 800ead0:	2306      	movs	r3, #6
 800ead2:	6063      	str	r3, [r4, #4]
 800ead4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ead8:	2300      	movs	r3, #0
 800eada:	6022      	str	r2, [r4, #0]
 800eadc:	9303      	str	r3, [sp, #12]
 800eade:	ab0a      	add	r3, sp, #40	@ 0x28
 800eae0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eae4:	ab09      	add	r3, sp, #36	@ 0x24
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	6861      	ldr	r1, [r4, #4]
 800eaea:	ec49 8b10 	vmov	d0, r8, r9
 800eaee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f7ff fed6 	bl	800e8a4 <__cvt>
 800eaf8:	9b06      	ldr	r3, [sp, #24]
 800eafa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eafc:	2b47      	cmp	r3, #71	@ 0x47
 800eafe:	4680      	mov	r8, r0
 800eb00:	d129      	bne.n	800eb56 <_printf_float+0x172>
 800eb02:	1cc8      	adds	r0, r1, #3
 800eb04:	db02      	blt.n	800eb0c <_printf_float+0x128>
 800eb06:	6863      	ldr	r3, [r4, #4]
 800eb08:	4299      	cmp	r1, r3
 800eb0a:	dd41      	ble.n	800eb90 <_printf_float+0x1ac>
 800eb0c:	f1aa 0a02 	sub.w	sl, sl, #2
 800eb10:	fa5f fa8a 	uxtb.w	sl, sl
 800eb14:	3901      	subs	r1, #1
 800eb16:	4652      	mov	r2, sl
 800eb18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eb1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb1e:	f7ff ff26 	bl	800e96e <__exponent>
 800eb22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb24:	1813      	adds	r3, r2, r0
 800eb26:	2a01      	cmp	r2, #1
 800eb28:	4681      	mov	r9, r0
 800eb2a:	6123      	str	r3, [r4, #16]
 800eb2c:	dc02      	bgt.n	800eb34 <_printf_float+0x150>
 800eb2e:	6822      	ldr	r2, [r4, #0]
 800eb30:	07d2      	lsls	r2, r2, #31
 800eb32:	d501      	bpl.n	800eb38 <_printf_float+0x154>
 800eb34:	3301      	adds	r3, #1
 800eb36:	6123      	str	r3, [r4, #16]
 800eb38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d0a2      	beq.n	800ea86 <_printf_float+0xa2>
 800eb40:	232d      	movs	r3, #45	@ 0x2d
 800eb42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb46:	e79e      	b.n	800ea86 <_printf_float+0xa2>
 800eb48:	9a06      	ldr	r2, [sp, #24]
 800eb4a:	2a47      	cmp	r2, #71	@ 0x47
 800eb4c:	d1c2      	bne.n	800ead4 <_printf_float+0xf0>
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1c0      	bne.n	800ead4 <_printf_float+0xf0>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e7bd      	b.n	800ead2 <_printf_float+0xee>
 800eb56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb5a:	d9db      	bls.n	800eb14 <_printf_float+0x130>
 800eb5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eb60:	d118      	bne.n	800eb94 <_printf_float+0x1b0>
 800eb62:	2900      	cmp	r1, #0
 800eb64:	6863      	ldr	r3, [r4, #4]
 800eb66:	dd0b      	ble.n	800eb80 <_printf_float+0x19c>
 800eb68:	6121      	str	r1, [r4, #16]
 800eb6a:	b913      	cbnz	r3, 800eb72 <_printf_float+0x18e>
 800eb6c:	6822      	ldr	r2, [r4, #0]
 800eb6e:	07d0      	lsls	r0, r2, #31
 800eb70:	d502      	bpl.n	800eb78 <_printf_float+0x194>
 800eb72:	3301      	adds	r3, #1
 800eb74:	440b      	add	r3, r1
 800eb76:	6123      	str	r3, [r4, #16]
 800eb78:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eb7a:	f04f 0900 	mov.w	r9, #0
 800eb7e:	e7db      	b.n	800eb38 <_printf_float+0x154>
 800eb80:	b913      	cbnz	r3, 800eb88 <_printf_float+0x1a4>
 800eb82:	6822      	ldr	r2, [r4, #0]
 800eb84:	07d2      	lsls	r2, r2, #31
 800eb86:	d501      	bpl.n	800eb8c <_printf_float+0x1a8>
 800eb88:	3302      	adds	r3, #2
 800eb8a:	e7f4      	b.n	800eb76 <_printf_float+0x192>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e7f2      	b.n	800eb76 <_printf_float+0x192>
 800eb90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eb94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb96:	4299      	cmp	r1, r3
 800eb98:	db05      	blt.n	800eba6 <_printf_float+0x1c2>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	6121      	str	r1, [r4, #16]
 800eb9e:	07d8      	lsls	r0, r3, #31
 800eba0:	d5ea      	bpl.n	800eb78 <_printf_float+0x194>
 800eba2:	1c4b      	adds	r3, r1, #1
 800eba4:	e7e7      	b.n	800eb76 <_printf_float+0x192>
 800eba6:	2900      	cmp	r1, #0
 800eba8:	bfd4      	ite	le
 800ebaa:	f1c1 0202 	rsble	r2, r1, #2
 800ebae:	2201      	movgt	r2, #1
 800ebb0:	4413      	add	r3, r2
 800ebb2:	e7e0      	b.n	800eb76 <_printf_float+0x192>
 800ebb4:	6823      	ldr	r3, [r4, #0]
 800ebb6:	055a      	lsls	r2, r3, #21
 800ebb8:	d407      	bmi.n	800ebca <_printf_float+0x1e6>
 800ebba:	6923      	ldr	r3, [r4, #16]
 800ebbc:	4642      	mov	r2, r8
 800ebbe:	4631      	mov	r1, r6
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	47b8      	blx	r7
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d12b      	bne.n	800ec20 <_printf_float+0x23c>
 800ebc8:	e767      	b.n	800ea9a <_printf_float+0xb6>
 800ebca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ebce:	f240 80dd 	bls.w	800ed8c <_printf_float+0x3a8>
 800ebd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2300      	movs	r3, #0
 800ebda:	f7f1 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d033      	beq.n	800ec4a <_printf_float+0x266>
 800ebe2:	4a37      	ldr	r2, [pc, #220]	@ (800ecc0 <_printf_float+0x2dc>)
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4628      	mov	r0, r5
 800ebea:	47b8      	blx	r7
 800ebec:	3001      	adds	r0, #1
 800ebee:	f43f af54 	beq.w	800ea9a <_printf_float+0xb6>
 800ebf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ebf6:	4543      	cmp	r3, r8
 800ebf8:	db02      	blt.n	800ec00 <_printf_float+0x21c>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	07d8      	lsls	r0, r3, #31
 800ebfe:	d50f      	bpl.n	800ec20 <_printf_float+0x23c>
 800ec00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec04:	4631      	mov	r1, r6
 800ec06:	4628      	mov	r0, r5
 800ec08:	47b8      	blx	r7
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	f43f af45 	beq.w	800ea9a <_printf_float+0xb6>
 800ec10:	f04f 0900 	mov.w	r9, #0
 800ec14:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec18:	f104 0a1a 	add.w	sl, r4, #26
 800ec1c:	45c8      	cmp	r8, r9
 800ec1e:	dc09      	bgt.n	800ec34 <_printf_float+0x250>
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	079b      	lsls	r3, r3, #30
 800ec24:	f100 8103 	bmi.w	800ee2e <_printf_float+0x44a>
 800ec28:	68e0      	ldr	r0, [r4, #12]
 800ec2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec2c:	4298      	cmp	r0, r3
 800ec2e:	bfb8      	it	lt
 800ec30:	4618      	movlt	r0, r3
 800ec32:	e734      	b.n	800ea9e <_printf_float+0xba>
 800ec34:	2301      	movs	r3, #1
 800ec36:	4652      	mov	r2, sl
 800ec38:	4631      	mov	r1, r6
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b8      	blx	r7
 800ec3e:	3001      	adds	r0, #1
 800ec40:	f43f af2b 	beq.w	800ea9a <_printf_float+0xb6>
 800ec44:	f109 0901 	add.w	r9, r9, #1
 800ec48:	e7e8      	b.n	800ec1c <_printf_float+0x238>
 800ec4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dc39      	bgt.n	800ecc4 <_printf_float+0x2e0>
 800ec50:	4a1b      	ldr	r2, [pc, #108]	@ (800ecc0 <_printf_float+0x2dc>)
 800ec52:	2301      	movs	r3, #1
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b8      	blx	r7
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	f43f af1d 	beq.w	800ea9a <_printf_float+0xb6>
 800ec60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ec64:	ea59 0303 	orrs.w	r3, r9, r3
 800ec68:	d102      	bne.n	800ec70 <_printf_float+0x28c>
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	07d9      	lsls	r1, r3, #31
 800ec6e:	d5d7      	bpl.n	800ec20 <_printf_float+0x23c>
 800ec70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec74:	4631      	mov	r1, r6
 800ec76:	4628      	mov	r0, r5
 800ec78:	47b8      	blx	r7
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	f43f af0d 	beq.w	800ea9a <_printf_float+0xb6>
 800ec80:	f04f 0a00 	mov.w	sl, #0
 800ec84:	f104 0b1a 	add.w	fp, r4, #26
 800ec88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec8a:	425b      	negs	r3, r3
 800ec8c:	4553      	cmp	r3, sl
 800ec8e:	dc01      	bgt.n	800ec94 <_printf_float+0x2b0>
 800ec90:	464b      	mov	r3, r9
 800ec92:	e793      	b.n	800ebbc <_printf_float+0x1d8>
 800ec94:	2301      	movs	r3, #1
 800ec96:	465a      	mov	r2, fp
 800ec98:	4631      	mov	r1, r6
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b8      	blx	r7
 800ec9e:	3001      	adds	r0, #1
 800eca0:	f43f aefb 	beq.w	800ea9a <_printf_float+0xb6>
 800eca4:	f10a 0a01 	add.w	sl, sl, #1
 800eca8:	e7ee      	b.n	800ec88 <_printf_float+0x2a4>
 800ecaa:	bf00      	nop
 800ecac:	7fefffff 	.word	0x7fefffff
 800ecb0:	08014821 	.word	0x08014821
 800ecb4:	08014825 	.word	0x08014825
 800ecb8:	08014829 	.word	0x08014829
 800ecbc:	0801482d 	.word	0x0801482d
 800ecc0:	08014b4f 	.word	0x08014b4f
 800ecc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecca:	4553      	cmp	r3, sl
 800eccc:	bfa8      	it	ge
 800ecce:	4653      	movge	r3, sl
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	4699      	mov	r9, r3
 800ecd4:	dc36      	bgt.n	800ed44 <_printf_float+0x360>
 800ecd6:	f04f 0b00 	mov.w	fp, #0
 800ecda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecde:	f104 021a 	add.w	r2, r4, #26
 800ece2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ece4:	9306      	str	r3, [sp, #24]
 800ece6:	eba3 0309 	sub.w	r3, r3, r9
 800ecea:	455b      	cmp	r3, fp
 800ecec:	dc31      	bgt.n	800ed52 <_printf_float+0x36e>
 800ecee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf0:	459a      	cmp	sl, r3
 800ecf2:	dc3a      	bgt.n	800ed6a <_printf_float+0x386>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	07da      	lsls	r2, r3, #31
 800ecf8:	d437      	bmi.n	800ed6a <_printf_float+0x386>
 800ecfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecfc:	ebaa 0903 	sub.w	r9, sl, r3
 800ed00:	9b06      	ldr	r3, [sp, #24]
 800ed02:	ebaa 0303 	sub.w	r3, sl, r3
 800ed06:	4599      	cmp	r9, r3
 800ed08:	bfa8      	it	ge
 800ed0a:	4699      	movge	r9, r3
 800ed0c:	f1b9 0f00 	cmp.w	r9, #0
 800ed10:	dc33      	bgt.n	800ed7a <_printf_float+0x396>
 800ed12:	f04f 0800 	mov.w	r8, #0
 800ed16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed1a:	f104 0b1a 	add.w	fp, r4, #26
 800ed1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed20:	ebaa 0303 	sub.w	r3, sl, r3
 800ed24:	eba3 0309 	sub.w	r3, r3, r9
 800ed28:	4543      	cmp	r3, r8
 800ed2a:	f77f af79 	ble.w	800ec20 <_printf_float+0x23c>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	465a      	mov	r2, fp
 800ed32:	4631      	mov	r1, r6
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b8      	blx	r7
 800ed38:	3001      	adds	r0, #1
 800ed3a:	f43f aeae 	beq.w	800ea9a <_printf_float+0xb6>
 800ed3e:	f108 0801 	add.w	r8, r8, #1
 800ed42:	e7ec      	b.n	800ed1e <_printf_float+0x33a>
 800ed44:	4642      	mov	r2, r8
 800ed46:	4631      	mov	r1, r6
 800ed48:	4628      	mov	r0, r5
 800ed4a:	47b8      	blx	r7
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	d1c2      	bne.n	800ecd6 <_printf_float+0x2f2>
 800ed50:	e6a3      	b.n	800ea9a <_printf_float+0xb6>
 800ed52:	2301      	movs	r3, #1
 800ed54:	4631      	mov	r1, r6
 800ed56:	4628      	mov	r0, r5
 800ed58:	9206      	str	r2, [sp, #24]
 800ed5a:	47b8      	blx	r7
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	f43f ae9c 	beq.w	800ea9a <_printf_float+0xb6>
 800ed62:	9a06      	ldr	r2, [sp, #24]
 800ed64:	f10b 0b01 	add.w	fp, fp, #1
 800ed68:	e7bb      	b.n	800ece2 <_printf_float+0x2fe>
 800ed6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4628      	mov	r0, r5
 800ed72:	47b8      	blx	r7
 800ed74:	3001      	adds	r0, #1
 800ed76:	d1c0      	bne.n	800ecfa <_printf_float+0x316>
 800ed78:	e68f      	b.n	800ea9a <_printf_float+0xb6>
 800ed7a:	9a06      	ldr	r2, [sp, #24]
 800ed7c:	464b      	mov	r3, r9
 800ed7e:	4442      	add	r2, r8
 800ed80:	4631      	mov	r1, r6
 800ed82:	4628      	mov	r0, r5
 800ed84:	47b8      	blx	r7
 800ed86:	3001      	adds	r0, #1
 800ed88:	d1c3      	bne.n	800ed12 <_printf_float+0x32e>
 800ed8a:	e686      	b.n	800ea9a <_printf_float+0xb6>
 800ed8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed90:	f1ba 0f01 	cmp.w	sl, #1
 800ed94:	dc01      	bgt.n	800ed9a <_printf_float+0x3b6>
 800ed96:	07db      	lsls	r3, r3, #31
 800ed98:	d536      	bpl.n	800ee08 <_printf_float+0x424>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	4642      	mov	r2, r8
 800ed9e:	4631      	mov	r1, r6
 800eda0:	4628      	mov	r0, r5
 800eda2:	47b8      	blx	r7
 800eda4:	3001      	adds	r0, #1
 800eda6:	f43f ae78 	beq.w	800ea9a <_printf_float+0xb6>
 800edaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edae:	4631      	mov	r1, r6
 800edb0:	4628      	mov	r0, r5
 800edb2:	47b8      	blx	r7
 800edb4:	3001      	adds	r0, #1
 800edb6:	f43f ae70 	beq.w	800ea9a <_printf_float+0xb6>
 800edba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edbe:	2200      	movs	r2, #0
 800edc0:	2300      	movs	r3, #0
 800edc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edc6:	f7f1 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800edca:	b9c0      	cbnz	r0, 800edfe <_printf_float+0x41a>
 800edcc:	4653      	mov	r3, sl
 800edce:	f108 0201 	add.w	r2, r8, #1
 800edd2:	4631      	mov	r1, r6
 800edd4:	4628      	mov	r0, r5
 800edd6:	47b8      	blx	r7
 800edd8:	3001      	adds	r0, #1
 800edda:	d10c      	bne.n	800edf6 <_printf_float+0x412>
 800eddc:	e65d      	b.n	800ea9a <_printf_float+0xb6>
 800edde:	2301      	movs	r3, #1
 800ede0:	465a      	mov	r2, fp
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b8      	blx	r7
 800ede8:	3001      	adds	r0, #1
 800edea:	f43f ae56 	beq.w	800ea9a <_printf_float+0xb6>
 800edee:	f108 0801 	add.w	r8, r8, #1
 800edf2:	45d0      	cmp	r8, sl
 800edf4:	dbf3      	blt.n	800edde <_printf_float+0x3fa>
 800edf6:	464b      	mov	r3, r9
 800edf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800edfc:	e6df      	b.n	800ebbe <_printf_float+0x1da>
 800edfe:	f04f 0800 	mov.w	r8, #0
 800ee02:	f104 0b1a 	add.w	fp, r4, #26
 800ee06:	e7f4      	b.n	800edf2 <_printf_float+0x40e>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	4642      	mov	r2, r8
 800ee0c:	e7e1      	b.n	800edd2 <_printf_float+0x3ee>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	464a      	mov	r2, r9
 800ee12:	4631      	mov	r1, r6
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b8      	blx	r7
 800ee18:	3001      	adds	r0, #1
 800ee1a:	f43f ae3e 	beq.w	800ea9a <_printf_float+0xb6>
 800ee1e:	f108 0801 	add.w	r8, r8, #1
 800ee22:	68e3      	ldr	r3, [r4, #12]
 800ee24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee26:	1a5b      	subs	r3, r3, r1
 800ee28:	4543      	cmp	r3, r8
 800ee2a:	dcf0      	bgt.n	800ee0e <_printf_float+0x42a>
 800ee2c:	e6fc      	b.n	800ec28 <_printf_float+0x244>
 800ee2e:	f04f 0800 	mov.w	r8, #0
 800ee32:	f104 0919 	add.w	r9, r4, #25
 800ee36:	e7f4      	b.n	800ee22 <_printf_float+0x43e>

0800ee38 <_printf_common>:
 800ee38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	4616      	mov	r6, r2
 800ee3e:	4698      	mov	r8, r3
 800ee40:	688a      	ldr	r2, [r1, #8]
 800ee42:	690b      	ldr	r3, [r1, #16]
 800ee44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	bfb8      	it	lt
 800ee4c:	4613      	movlt	r3, r2
 800ee4e:	6033      	str	r3, [r6, #0]
 800ee50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee54:	4607      	mov	r7, r0
 800ee56:	460c      	mov	r4, r1
 800ee58:	b10a      	cbz	r2, 800ee5e <_printf_common+0x26>
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	6033      	str	r3, [r6, #0]
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	0699      	lsls	r1, r3, #26
 800ee62:	bf42      	ittt	mi
 800ee64:	6833      	ldrmi	r3, [r6, #0]
 800ee66:	3302      	addmi	r3, #2
 800ee68:	6033      	strmi	r3, [r6, #0]
 800ee6a:	6825      	ldr	r5, [r4, #0]
 800ee6c:	f015 0506 	ands.w	r5, r5, #6
 800ee70:	d106      	bne.n	800ee80 <_printf_common+0x48>
 800ee72:	f104 0a19 	add.w	sl, r4, #25
 800ee76:	68e3      	ldr	r3, [r4, #12]
 800ee78:	6832      	ldr	r2, [r6, #0]
 800ee7a:	1a9b      	subs	r3, r3, r2
 800ee7c:	42ab      	cmp	r3, r5
 800ee7e:	dc26      	bgt.n	800eece <_printf_common+0x96>
 800ee80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee84:	6822      	ldr	r2, [r4, #0]
 800ee86:	3b00      	subs	r3, #0
 800ee88:	bf18      	it	ne
 800ee8a:	2301      	movne	r3, #1
 800ee8c:	0692      	lsls	r2, r2, #26
 800ee8e:	d42b      	bmi.n	800eee8 <_printf_common+0xb0>
 800ee90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee94:	4641      	mov	r1, r8
 800ee96:	4638      	mov	r0, r7
 800ee98:	47c8      	blx	r9
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	d01e      	beq.n	800eedc <_printf_common+0xa4>
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	6922      	ldr	r2, [r4, #16]
 800eea2:	f003 0306 	and.w	r3, r3, #6
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	bf02      	ittt	eq
 800eeaa:	68e5      	ldreq	r5, [r4, #12]
 800eeac:	6833      	ldreq	r3, [r6, #0]
 800eeae:	1aed      	subeq	r5, r5, r3
 800eeb0:	68a3      	ldr	r3, [r4, #8]
 800eeb2:	bf0c      	ite	eq
 800eeb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eeb8:	2500      	movne	r5, #0
 800eeba:	4293      	cmp	r3, r2
 800eebc:	bfc4      	itt	gt
 800eebe:	1a9b      	subgt	r3, r3, r2
 800eec0:	18ed      	addgt	r5, r5, r3
 800eec2:	2600      	movs	r6, #0
 800eec4:	341a      	adds	r4, #26
 800eec6:	42b5      	cmp	r5, r6
 800eec8:	d11a      	bne.n	800ef00 <_printf_common+0xc8>
 800eeca:	2000      	movs	r0, #0
 800eecc:	e008      	b.n	800eee0 <_printf_common+0xa8>
 800eece:	2301      	movs	r3, #1
 800eed0:	4652      	mov	r2, sl
 800eed2:	4641      	mov	r1, r8
 800eed4:	4638      	mov	r0, r7
 800eed6:	47c8      	blx	r9
 800eed8:	3001      	adds	r0, #1
 800eeda:	d103      	bne.n	800eee4 <_printf_common+0xac>
 800eedc:	f04f 30ff 	mov.w	r0, #4294967295
 800eee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee4:	3501      	adds	r5, #1
 800eee6:	e7c6      	b.n	800ee76 <_printf_common+0x3e>
 800eee8:	18e1      	adds	r1, r4, r3
 800eeea:	1c5a      	adds	r2, r3, #1
 800eeec:	2030      	movs	r0, #48	@ 0x30
 800eeee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eef2:	4422      	add	r2, r4
 800eef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eefc:	3302      	adds	r3, #2
 800eefe:	e7c7      	b.n	800ee90 <_printf_common+0x58>
 800ef00:	2301      	movs	r3, #1
 800ef02:	4622      	mov	r2, r4
 800ef04:	4641      	mov	r1, r8
 800ef06:	4638      	mov	r0, r7
 800ef08:	47c8      	blx	r9
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	d0e6      	beq.n	800eedc <_printf_common+0xa4>
 800ef0e:	3601      	adds	r6, #1
 800ef10:	e7d9      	b.n	800eec6 <_printf_common+0x8e>
	...

0800ef14 <_printf_i>:
 800ef14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef18:	7e0f      	ldrb	r7, [r1, #24]
 800ef1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef1c:	2f78      	cmp	r7, #120	@ 0x78
 800ef1e:	4691      	mov	r9, r2
 800ef20:	4680      	mov	r8, r0
 800ef22:	460c      	mov	r4, r1
 800ef24:	469a      	mov	sl, r3
 800ef26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef2a:	d807      	bhi.n	800ef3c <_printf_i+0x28>
 800ef2c:	2f62      	cmp	r7, #98	@ 0x62
 800ef2e:	d80a      	bhi.n	800ef46 <_printf_i+0x32>
 800ef30:	2f00      	cmp	r7, #0
 800ef32:	f000 80d2 	beq.w	800f0da <_printf_i+0x1c6>
 800ef36:	2f58      	cmp	r7, #88	@ 0x58
 800ef38:	f000 80b9 	beq.w	800f0ae <_printf_i+0x19a>
 800ef3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef44:	e03a      	b.n	800efbc <_printf_i+0xa8>
 800ef46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef4a:	2b15      	cmp	r3, #21
 800ef4c:	d8f6      	bhi.n	800ef3c <_printf_i+0x28>
 800ef4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ef54 <_printf_i+0x40>)
 800ef50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef54:	0800efad 	.word	0x0800efad
 800ef58:	0800efc1 	.word	0x0800efc1
 800ef5c:	0800ef3d 	.word	0x0800ef3d
 800ef60:	0800ef3d 	.word	0x0800ef3d
 800ef64:	0800ef3d 	.word	0x0800ef3d
 800ef68:	0800ef3d 	.word	0x0800ef3d
 800ef6c:	0800efc1 	.word	0x0800efc1
 800ef70:	0800ef3d 	.word	0x0800ef3d
 800ef74:	0800ef3d 	.word	0x0800ef3d
 800ef78:	0800ef3d 	.word	0x0800ef3d
 800ef7c:	0800ef3d 	.word	0x0800ef3d
 800ef80:	0800f0c1 	.word	0x0800f0c1
 800ef84:	0800efeb 	.word	0x0800efeb
 800ef88:	0800f07b 	.word	0x0800f07b
 800ef8c:	0800ef3d 	.word	0x0800ef3d
 800ef90:	0800ef3d 	.word	0x0800ef3d
 800ef94:	0800f0e3 	.word	0x0800f0e3
 800ef98:	0800ef3d 	.word	0x0800ef3d
 800ef9c:	0800efeb 	.word	0x0800efeb
 800efa0:	0800ef3d 	.word	0x0800ef3d
 800efa4:	0800ef3d 	.word	0x0800ef3d
 800efa8:	0800f083 	.word	0x0800f083
 800efac:	6833      	ldr	r3, [r6, #0]
 800efae:	1d1a      	adds	r2, r3, #4
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	6032      	str	r2, [r6, #0]
 800efb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efbc:	2301      	movs	r3, #1
 800efbe:	e09d      	b.n	800f0fc <_printf_i+0x1e8>
 800efc0:	6833      	ldr	r3, [r6, #0]
 800efc2:	6820      	ldr	r0, [r4, #0]
 800efc4:	1d19      	adds	r1, r3, #4
 800efc6:	6031      	str	r1, [r6, #0]
 800efc8:	0606      	lsls	r6, r0, #24
 800efca:	d501      	bpl.n	800efd0 <_printf_i+0xbc>
 800efcc:	681d      	ldr	r5, [r3, #0]
 800efce:	e003      	b.n	800efd8 <_printf_i+0xc4>
 800efd0:	0645      	lsls	r5, r0, #25
 800efd2:	d5fb      	bpl.n	800efcc <_printf_i+0xb8>
 800efd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efd8:	2d00      	cmp	r5, #0
 800efda:	da03      	bge.n	800efe4 <_printf_i+0xd0>
 800efdc:	232d      	movs	r3, #45	@ 0x2d
 800efde:	426d      	negs	r5, r5
 800efe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efe4:	4859      	ldr	r0, [pc, #356]	@ (800f14c <_printf_i+0x238>)
 800efe6:	230a      	movs	r3, #10
 800efe8:	e011      	b.n	800f00e <_printf_i+0xfa>
 800efea:	6821      	ldr	r1, [r4, #0]
 800efec:	6833      	ldr	r3, [r6, #0]
 800efee:	0608      	lsls	r0, r1, #24
 800eff0:	f853 5b04 	ldr.w	r5, [r3], #4
 800eff4:	d402      	bmi.n	800effc <_printf_i+0xe8>
 800eff6:	0649      	lsls	r1, r1, #25
 800eff8:	bf48      	it	mi
 800effa:	b2ad      	uxthmi	r5, r5
 800effc:	2f6f      	cmp	r7, #111	@ 0x6f
 800effe:	4853      	ldr	r0, [pc, #332]	@ (800f14c <_printf_i+0x238>)
 800f000:	6033      	str	r3, [r6, #0]
 800f002:	bf14      	ite	ne
 800f004:	230a      	movne	r3, #10
 800f006:	2308      	moveq	r3, #8
 800f008:	2100      	movs	r1, #0
 800f00a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f00e:	6866      	ldr	r6, [r4, #4]
 800f010:	60a6      	str	r6, [r4, #8]
 800f012:	2e00      	cmp	r6, #0
 800f014:	bfa2      	ittt	ge
 800f016:	6821      	ldrge	r1, [r4, #0]
 800f018:	f021 0104 	bicge.w	r1, r1, #4
 800f01c:	6021      	strge	r1, [r4, #0]
 800f01e:	b90d      	cbnz	r5, 800f024 <_printf_i+0x110>
 800f020:	2e00      	cmp	r6, #0
 800f022:	d04b      	beq.n	800f0bc <_printf_i+0x1a8>
 800f024:	4616      	mov	r6, r2
 800f026:	fbb5 f1f3 	udiv	r1, r5, r3
 800f02a:	fb03 5711 	mls	r7, r3, r1, r5
 800f02e:	5dc7      	ldrb	r7, [r0, r7]
 800f030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f034:	462f      	mov	r7, r5
 800f036:	42bb      	cmp	r3, r7
 800f038:	460d      	mov	r5, r1
 800f03a:	d9f4      	bls.n	800f026 <_printf_i+0x112>
 800f03c:	2b08      	cmp	r3, #8
 800f03e:	d10b      	bne.n	800f058 <_printf_i+0x144>
 800f040:	6823      	ldr	r3, [r4, #0]
 800f042:	07df      	lsls	r7, r3, #31
 800f044:	d508      	bpl.n	800f058 <_printf_i+0x144>
 800f046:	6923      	ldr	r3, [r4, #16]
 800f048:	6861      	ldr	r1, [r4, #4]
 800f04a:	4299      	cmp	r1, r3
 800f04c:	bfde      	ittt	le
 800f04e:	2330      	movle	r3, #48	@ 0x30
 800f050:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f054:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f058:	1b92      	subs	r2, r2, r6
 800f05a:	6122      	str	r2, [r4, #16]
 800f05c:	f8cd a000 	str.w	sl, [sp]
 800f060:	464b      	mov	r3, r9
 800f062:	aa03      	add	r2, sp, #12
 800f064:	4621      	mov	r1, r4
 800f066:	4640      	mov	r0, r8
 800f068:	f7ff fee6 	bl	800ee38 <_printf_common>
 800f06c:	3001      	adds	r0, #1
 800f06e:	d14a      	bne.n	800f106 <_printf_i+0x1f2>
 800f070:	f04f 30ff 	mov.w	r0, #4294967295
 800f074:	b004      	add	sp, #16
 800f076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	f043 0320 	orr.w	r3, r3, #32
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	4833      	ldr	r0, [pc, #204]	@ (800f150 <_printf_i+0x23c>)
 800f084:	2778      	movs	r7, #120	@ 0x78
 800f086:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	6831      	ldr	r1, [r6, #0]
 800f08e:	061f      	lsls	r7, r3, #24
 800f090:	f851 5b04 	ldr.w	r5, [r1], #4
 800f094:	d402      	bmi.n	800f09c <_printf_i+0x188>
 800f096:	065f      	lsls	r7, r3, #25
 800f098:	bf48      	it	mi
 800f09a:	b2ad      	uxthmi	r5, r5
 800f09c:	6031      	str	r1, [r6, #0]
 800f09e:	07d9      	lsls	r1, r3, #31
 800f0a0:	bf44      	itt	mi
 800f0a2:	f043 0320 	orrmi.w	r3, r3, #32
 800f0a6:	6023      	strmi	r3, [r4, #0]
 800f0a8:	b11d      	cbz	r5, 800f0b2 <_printf_i+0x19e>
 800f0aa:	2310      	movs	r3, #16
 800f0ac:	e7ac      	b.n	800f008 <_printf_i+0xf4>
 800f0ae:	4827      	ldr	r0, [pc, #156]	@ (800f14c <_printf_i+0x238>)
 800f0b0:	e7e9      	b.n	800f086 <_printf_i+0x172>
 800f0b2:	6823      	ldr	r3, [r4, #0]
 800f0b4:	f023 0320 	bic.w	r3, r3, #32
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	e7f6      	b.n	800f0aa <_printf_i+0x196>
 800f0bc:	4616      	mov	r6, r2
 800f0be:	e7bd      	b.n	800f03c <_printf_i+0x128>
 800f0c0:	6833      	ldr	r3, [r6, #0]
 800f0c2:	6825      	ldr	r5, [r4, #0]
 800f0c4:	6961      	ldr	r1, [r4, #20]
 800f0c6:	1d18      	adds	r0, r3, #4
 800f0c8:	6030      	str	r0, [r6, #0]
 800f0ca:	062e      	lsls	r6, r5, #24
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	d501      	bpl.n	800f0d4 <_printf_i+0x1c0>
 800f0d0:	6019      	str	r1, [r3, #0]
 800f0d2:	e002      	b.n	800f0da <_printf_i+0x1c6>
 800f0d4:	0668      	lsls	r0, r5, #25
 800f0d6:	d5fb      	bpl.n	800f0d0 <_printf_i+0x1bc>
 800f0d8:	8019      	strh	r1, [r3, #0]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	4616      	mov	r6, r2
 800f0e0:	e7bc      	b.n	800f05c <_printf_i+0x148>
 800f0e2:	6833      	ldr	r3, [r6, #0]
 800f0e4:	1d1a      	adds	r2, r3, #4
 800f0e6:	6032      	str	r2, [r6, #0]
 800f0e8:	681e      	ldr	r6, [r3, #0]
 800f0ea:	6862      	ldr	r2, [r4, #4]
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	f7f1 f86e 	bl	80001d0 <memchr>
 800f0f4:	b108      	cbz	r0, 800f0fa <_printf_i+0x1e6>
 800f0f6:	1b80      	subs	r0, r0, r6
 800f0f8:	6060      	str	r0, [r4, #4]
 800f0fa:	6863      	ldr	r3, [r4, #4]
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	2300      	movs	r3, #0
 800f100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f104:	e7aa      	b.n	800f05c <_printf_i+0x148>
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	4632      	mov	r2, r6
 800f10a:	4649      	mov	r1, r9
 800f10c:	4640      	mov	r0, r8
 800f10e:	47d0      	blx	sl
 800f110:	3001      	adds	r0, #1
 800f112:	d0ad      	beq.n	800f070 <_printf_i+0x15c>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	079b      	lsls	r3, r3, #30
 800f118:	d413      	bmi.n	800f142 <_printf_i+0x22e>
 800f11a:	68e0      	ldr	r0, [r4, #12]
 800f11c:	9b03      	ldr	r3, [sp, #12]
 800f11e:	4298      	cmp	r0, r3
 800f120:	bfb8      	it	lt
 800f122:	4618      	movlt	r0, r3
 800f124:	e7a6      	b.n	800f074 <_printf_i+0x160>
 800f126:	2301      	movs	r3, #1
 800f128:	4632      	mov	r2, r6
 800f12a:	4649      	mov	r1, r9
 800f12c:	4640      	mov	r0, r8
 800f12e:	47d0      	blx	sl
 800f130:	3001      	adds	r0, #1
 800f132:	d09d      	beq.n	800f070 <_printf_i+0x15c>
 800f134:	3501      	adds	r5, #1
 800f136:	68e3      	ldr	r3, [r4, #12]
 800f138:	9903      	ldr	r1, [sp, #12]
 800f13a:	1a5b      	subs	r3, r3, r1
 800f13c:	42ab      	cmp	r3, r5
 800f13e:	dcf2      	bgt.n	800f126 <_printf_i+0x212>
 800f140:	e7eb      	b.n	800f11a <_printf_i+0x206>
 800f142:	2500      	movs	r5, #0
 800f144:	f104 0619 	add.w	r6, r4, #25
 800f148:	e7f5      	b.n	800f136 <_printf_i+0x222>
 800f14a:	bf00      	nop
 800f14c:	08014831 	.word	0x08014831
 800f150:	08014842 	.word	0x08014842

0800f154 <_scanf_float>:
 800f154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f158:	b087      	sub	sp, #28
 800f15a:	4617      	mov	r7, r2
 800f15c:	9303      	str	r3, [sp, #12]
 800f15e:	688b      	ldr	r3, [r1, #8]
 800f160:	1e5a      	subs	r2, r3, #1
 800f162:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f166:	bf81      	itttt	hi
 800f168:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f16c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f170:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f174:	608b      	strhi	r3, [r1, #8]
 800f176:	680b      	ldr	r3, [r1, #0]
 800f178:	460a      	mov	r2, r1
 800f17a:	f04f 0500 	mov.w	r5, #0
 800f17e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f182:	f842 3b1c 	str.w	r3, [r2], #28
 800f186:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f18a:	4680      	mov	r8, r0
 800f18c:	460c      	mov	r4, r1
 800f18e:	bf98      	it	ls
 800f190:	f04f 0b00 	movls.w	fp, #0
 800f194:	9201      	str	r2, [sp, #4]
 800f196:	4616      	mov	r6, r2
 800f198:	46aa      	mov	sl, r5
 800f19a:	46a9      	mov	r9, r5
 800f19c:	9502      	str	r5, [sp, #8]
 800f19e:	68a2      	ldr	r2, [r4, #8]
 800f1a0:	b152      	cbz	r2, 800f1b8 <_scanf_float+0x64>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b4e      	cmp	r3, #78	@ 0x4e
 800f1a8:	d864      	bhi.n	800f274 <_scanf_float+0x120>
 800f1aa:	2b40      	cmp	r3, #64	@ 0x40
 800f1ac:	d83c      	bhi.n	800f228 <_scanf_float+0xd4>
 800f1ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f1b2:	b2c8      	uxtb	r0, r1
 800f1b4:	280e      	cmp	r0, #14
 800f1b6:	d93a      	bls.n	800f22e <_scanf_float+0xda>
 800f1b8:	f1b9 0f00 	cmp.w	r9, #0
 800f1bc:	d003      	beq.n	800f1c6 <_scanf_float+0x72>
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1ca:	f1ba 0f01 	cmp.w	sl, #1
 800f1ce:	f200 8117 	bhi.w	800f400 <_scanf_float+0x2ac>
 800f1d2:	9b01      	ldr	r3, [sp, #4]
 800f1d4:	429e      	cmp	r6, r3
 800f1d6:	f200 8108 	bhi.w	800f3ea <_scanf_float+0x296>
 800f1da:	2001      	movs	r0, #1
 800f1dc:	b007      	add	sp, #28
 800f1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f1e6:	2a0d      	cmp	r2, #13
 800f1e8:	d8e6      	bhi.n	800f1b8 <_scanf_float+0x64>
 800f1ea:	a101      	add	r1, pc, #4	@ (adr r1, 800f1f0 <_scanf_float+0x9c>)
 800f1ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1f0:	0800f337 	.word	0x0800f337
 800f1f4:	0800f1b9 	.word	0x0800f1b9
 800f1f8:	0800f1b9 	.word	0x0800f1b9
 800f1fc:	0800f1b9 	.word	0x0800f1b9
 800f200:	0800f397 	.word	0x0800f397
 800f204:	0800f36f 	.word	0x0800f36f
 800f208:	0800f1b9 	.word	0x0800f1b9
 800f20c:	0800f1b9 	.word	0x0800f1b9
 800f210:	0800f345 	.word	0x0800f345
 800f214:	0800f1b9 	.word	0x0800f1b9
 800f218:	0800f1b9 	.word	0x0800f1b9
 800f21c:	0800f1b9 	.word	0x0800f1b9
 800f220:	0800f1b9 	.word	0x0800f1b9
 800f224:	0800f2fd 	.word	0x0800f2fd
 800f228:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f22c:	e7db      	b.n	800f1e6 <_scanf_float+0x92>
 800f22e:	290e      	cmp	r1, #14
 800f230:	d8c2      	bhi.n	800f1b8 <_scanf_float+0x64>
 800f232:	a001      	add	r0, pc, #4	@ (adr r0, 800f238 <_scanf_float+0xe4>)
 800f234:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f238:	0800f2ed 	.word	0x0800f2ed
 800f23c:	0800f1b9 	.word	0x0800f1b9
 800f240:	0800f2ed 	.word	0x0800f2ed
 800f244:	0800f383 	.word	0x0800f383
 800f248:	0800f1b9 	.word	0x0800f1b9
 800f24c:	0800f295 	.word	0x0800f295
 800f250:	0800f2d3 	.word	0x0800f2d3
 800f254:	0800f2d3 	.word	0x0800f2d3
 800f258:	0800f2d3 	.word	0x0800f2d3
 800f25c:	0800f2d3 	.word	0x0800f2d3
 800f260:	0800f2d3 	.word	0x0800f2d3
 800f264:	0800f2d3 	.word	0x0800f2d3
 800f268:	0800f2d3 	.word	0x0800f2d3
 800f26c:	0800f2d3 	.word	0x0800f2d3
 800f270:	0800f2d3 	.word	0x0800f2d3
 800f274:	2b6e      	cmp	r3, #110	@ 0x6e
 800f276:	d809      	bhi.n	800f28c <_scanf_float+0x138>
 800f278:	2b60      	cmp	r3, #96	@ 0x60
 800f27a:	d8b2      	bhi.n	800f1e2 <_scanf_float+0x8e>
 800f27c:	2b54      	cmp	r3, #84	@ 0x54
 800f27e:	d07b      	beq.n	800f378 <_scanf_float+0x224>
 800f280:	2b59      	cmp	r3, #89	@ 0x59
 800f282:	d199      	bne.n	800f1b8 <_scanf_float+0x64>
 800f284:	2d07      	cmp	r5, #7
 800f286:	d197      	bne.n	800f1b8 <_scanf_float+0x64>
 800f288:	2508      	movs	r5, #8
 800f28a:	e02c      	b.n	800f2e6 <_scanf_float+0x192>
 800f28c:	2b74      	cmp	r3, #116	@ 0x74
 800f28e:	d073      	beq.n	800f378 <_scanf_float+0x224>
 800f290:	2b79      	cmp	r3, #121	@ 0x79
 800f292:	e7f6      	b.n	800f282 <_scanf_float+0x12e>
 800f294:	6821      	ldr	r1, [r4, #0]
 800f296:	05c8      	lsls	r0, r1, #23
 800f298:	d51b      	bpl.n	800f2d2 <_scanf_float+0x17e>
 800f29a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f29e:	6021      	str	r1, [r4, #0]
 800f2a0:	f109 0901 	add.w	r9, r9, #1
 800f2a4:	f1bb 0f00 	cmp.w	fp, #0
 800f2a8:	d003      	beq.n	800f2b2 <_scanf_float+0x15e>
 800f2aa:	3201      	adds	r2, #1
 800f2ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b0:	60a2      	str	r2, [r4, #8]
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	60a3      	str	r3, [r4, #8]
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	607b      	str	r3, [r7, #4]
 800f2c6:	f340 8087 	ble.w	800f3d8 <_scanf_float+0x284>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	603b      	str	r3, [r7, #0]
 800f2d0:	e765      	b.n	800f19e <_scanf_float+0x4a>
 800f2d2:	eb1a 0105 	adds.w	r1, sl, r5
 800f2d6:	f47f af6f 	bne.w	800f1b8 <_scanf_float+0x64>
 800f2da:	6822      	ldr	r2, [r4, #0]
 800f2dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f2e0:	6022      	str	r2, [r4, #0]
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	468a      	mov	sl, r1
 800f2e6:	f806 3b01 	strb.w	r3, [r6], #1
 800f2ea:	e7e2      	b.n	800f2b2 <_scanf_float+0x15e>
 800f2ec:	6822      	ldr	r2, [r4, #0]
 800f2ee:	0610      	lsls	r0, r2, #24
 800f2f0:	f57f af62 	bpl.w	800f1b8 <_scanf_float+0x64>
 800f2f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f2f8:	6022      	str	r2, [r4, #0]
 800f2fa:	e7f4      	b.n	800f2e6 <_scanf_float+0x192>
 800f2fc:	f1ba 0f00 	cmp.w	sl, #0
 800f300:	d10e      	bne.n	800f320 <_scanf_float+0x1cc>
 800f302:	f1b9 0f00 	cmp.w	r9, #0
 800f306:	d10e      	bne.n	800f326 <_scanf_float+0x1d2>
 800f308:	6822      	ldr	r2, [r4, #0]
 800f30a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f30e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f312:	d108      	bne.n	800f326 <_scanf_float+0x1d2>
 800f314:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f318:	6022      	str	r2, [r4, #0]
 800f31a:	f04f 0a01 	mov.w	sl, #1
 800f31e:	e7e2      	b.n	800f2e6 <_scanf_float+0x192>
 800f320:	f1ba 0f02 	cmp.w	sl, #2
 800f324:	d055      	beq.n	800f3d2 <_scanf_float+0x27e>
 800f326:	2d01      	cmp	r5, #1
 800f328:	d002      	beq.n	800f330 <_scanf_float+0x1dc>
 800f32a:	2d04      	cmp	r5, #4
 800f32c:	f47f af44 	bne.w	800f1b8 <_scanf_float+0x64>
 800f330:	3501      	adds	r5, #1
 800f332:	b2ed      	uxtb	r5, r5
 800f334:	e7d7      	b.n	800f2e6 <_scanf_float+0x192>
 800f336:	f1ba 0f01 	cmp.w	sl, #1
 800f33a:	f47f af3d 	bne.w	800f1b8 <_scanf_float+0x64>
 800f33e:	f04f 0a02 	mov.w	sl, #2
 800f342:	e7d0      	b.n	800f2e6 <_scanf_float+0x192>
 800f344:	b97d      	cbnz	r5, 800f366 <_scanf_float+0x212>
 800f346:	f1b9 0f00 	cmp.w	r9, #0
 800f34a:	f47f af38 	bne.w	800f1be <_scanf_float+0x6a>
 800f34e:	6822      	ldr	r2, [r4, #0]
 800f350:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f354:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f358:	f040 8108 	bne.w	800f56c <_scanf_float+0x418>
 800f35c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f360:	6022      	str	r2, [r4, #0]
 800f362:	2501      	movs	r5, #1
 800f364:	e7bf      	b.n	800f2e6 <_scanf_float+0x192>
 800f366:	2d03      	cmp	r5, #3
 800f368:	d0e2      	beq.n	800f330 <_scanf_float+0x1dc>
 800f36a:	2d05      	cmp	r5, #5
 800f36c:	e7de      	b.n	800f32c <_scanf_float+0x1d8>
 800f36e:	2d02      	cmp	r5, #2
 800f370:	f47f af22 	bne.w	800f1b8 <_scanf_float+0x64>
 800f374:	2503      	movs	r5, #3
 800f376:	e7b6      	b.n	800f2e6 <_scanf_float+0x192>
 800f378:	2d06      	cmp	r5, #6
 800f37a:	f47f af1d 	bne.w	800f1b8 <_scanf_float+0x64>
 800f37e:	2507      	movs	r5, #7
 800f380:	e7b1      	b.n	800f2e6 <_scanf_float+0x192>
 800f382:	6822      	ldr	r2, [r4, #0]
 800f384:	0591      	lsls	r1, r2, #22
 800f386:	f57f af17 	bpl.w	800f1b8 <_scanf_float+0x64>
 800f38a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f38e:	6022      	str	r2, [r4, #0]
 800f390:	f8cd 9008 	str.w	r9, [sp, #8]
 800f394:	e7a7      	b.n	800f2e6 <_scanf_float+0x192>
 800f396:	6822      	ldr	r2, [r4, #0]
 800f398:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f39c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f3a0:	d006      	beq.n	800f3b0 <_scanf_float+0x25c>
 800f3a2:	0550      	lsls	r0, r2, #21
 800f3a4:	f57f af08 	bpl.w	800f1b8 <_scanf_float+0x64>
 800f3a8:	f1b9 0f00 	cmp.w	r9, #0
 800f3ac:	f000 80de 	beq.w	800f56c <_scanf_float+0x418>
 800f3b0:	0591      	lsls	r1, r2, #22
 800f3b2:	bf58      	it	pl
 800f3b4:	9902      	ldrpl	r1, [sp, #8]
 800f3b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3ba:	bf58      	it	pl
 800f3bc:	eba9 0101 	subpl.w	r1, r9, r1
 800f3c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f3c4:	bf58      	it	pl
 800f3c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3ca:	6022      	str	r2, [r4, #0]
 800f3cc:	f04f 0900 	mov.w	r9, #0
 800f3d0:	e789      	b.n	800f2e6 <_scanf_float+0x192>
 800f3d2:	f04f 0a03 	mov.w	sl, #3
 800f3d6:	e786      	b.n	800f2e6 <_scanf_float+0x192>
 800f3d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3dc:	4639      	mov	r1, r7
 800f3de:	4640      	mov	r0, r8
 800f3e0:	4798      	blx	r3
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	f43f aedb 	beq.w	800f19e <_scanf_float+0x4a>
 800f3e8:	e6e6      	b.n	800f1b8 <_scanf_float+0x64>
 800f3ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3f2:	463a      	mov	r2, r7
 800f3f4:	4640      	mov	r0, r8
 800f3f6:	4798      	blx	r3
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	6123      	str	r3, [r4, #16]
 800f3fe:	e6e8      	b.n	800f1d2 <_scanf_float+0x7e>
 800f400:	1e6b      	subs	r3, r5, #1
 800f402:	2b06      	cmp	r3, #6
 800f404:	d824      	bhi.n	800f450 <_scanf_float+0x2fc>
 800f406:	2d02      	cmp	r5, #2
 800f408:	d836      	bhi.n	800f478 <_scanf_float+0x324>
 800f40a:	9b01      	ldr	r3, [sp, #4]
 800f40c:	429e      	cmp	r6, r3
 800f40e:	f67f aee4 	bls.w	800f1da <_scanf_float+0x86>
 800f412:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f416:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f41a:	463a      	mov	r2, r7
 800f41c:	4640      	mov	r0, r8
 800f41e:	4798      	blx	r3
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	3b01      	subs	r3, #1
 800f424:	6123      	str	r3, [r4, #16]
 800f426:	e7f0      	b.n	800f40a <_scanf_float+0x2b6>
 800f428:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f42c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f430:	463a      	mov	r2, r7
 800f432:	4640      	mov	r0, r8
 800f434:	4798      	blx	r3
 800f436:	6923      	ldr	r3, [r4, #16]
 800f438:	3b01      	subs	r3, #1
 800f43a:	6123      	str	r3, [r4, #16]
 800f43c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f440:	fa5f fa8a 	uxtb.w	sl, sl
 800f444:	f1ba 0f02 	cmp.w	sl, #2
 800f448:	d1ee      	bne.n	800f428 <_scanf_float+0x2d4>
 800f44a:	3d03      	subs	r5, #3
 800f44c:	b2ed      	uxtb	r5, r5
 800f44e:	1b76      	subs	r6, r6, r5
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	05da      	lsls	r2, r3, #23
 800f454:	d530      	bpl.n	800f4b8 <_scanf_float+0x364>
 800f456:	055b      	lsls	r3, r3, #21
 800f458:	d511      	bpl.n	800f47e <_scanf_float+0x32a>
 800f45a:	9b01      	ldr	r3, [sp, #4]
 800f45c:	429e      	cmp	r6, r3
 800f45e:	f67f aebc 	bls.w	800f1da <_scanf_float+0x86>
 800f462:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f46a:	463a      	mov	r2, r7
 800f46c:	4640      	mov	r0, r8
 800f46e:	4798      	blx	r3
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	3b01      	subs	r3, #1
 800f474:	6123      	str	r3, [r4, #16]
 800f476:	e7f0      	b.n	800f45a <_scanf_float+0x306>
 800f478:	46aa      	mov	sl, r5
 800f47a:	46b3      	mov	fp, r6
 800f47c:	e7de      	b.n	800f43c <_scanf_float+0x2e8>
 800f47e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f482:	6923      	ldr	r3, [r4, #16]
 800f484:	2965      	cmp	r1, #101	@ 0x65
 800f486:	f103 33ff 	add.w	r3, r3, #4294967295
 800f48a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f48e:	6123      	str	r3, [r4, #16]
 800f490:	d00c      	beq.n	800f4ac <_scanf_float+0x358>
 800f492:	2945      	cmp	r1, #69	@ 0x45
 800f494:	d00a      	beq.n	800f4ac <_scanf_float+0x358>
 800f496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f49a:	463a      	mov	r2, r7
 800f49c:	4640      	mov	r0, r8
 800f49e:	4798      	blx	r3
 800f4a0:	6923      	ldr	r3, [r4, #16]
 800f4a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	1eb5      	subs	r5, r6, #2
 800f4aa:	6123      	str	r3, [r4, #16]
 800f4ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4b0:	463a      	mov	r2, r7
 800f4b2:	4640      	mov	r0, r8
 800f4b4:	4798      	blx	r3
 800f4b6:	462e      	mov	r6, r5
 800f4b8:	6822      	ldr	r2, [r4, #0]
 800f4ba:	f012 0210 	ands.w	r2, r2, #16
 800f4be:	d001      	beq.n	800f4c4 <_scanf_float+0x370>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	e68b      	b.n	800f1dc <_scanf_float+0x88>
 800f4c4:	7032      	strb	r2, [r6, #0]
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f4cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4d0:	d11c      	bne.n	800f50c <_scanf_float+0x3b8>
 800f4d2:	9b02      	ldr	r3, [sp, #8]
 800f4d4:	454b      	cmp	r3, r9
 800f4d6:	eba3 0209 	sub.w	r2, r3, r9
 800f4da:	d123      	bne.n	800f524 <_scanf_float+0x3d0>
 800f4dc:	9901      	ldr	r1, [sp, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	4640      	mov	r0, r8
 800f4e2:	f002 fc4d 	bl	8011d80 <_strtod_r>
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	6821      	ldr	r1, [r4, #0]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f011 0f02 	tst.w	r1, #2
 800f4f0:	ec57 6b10 	vmov	r6, r7, d0
 800f4f4:	f103 0204 	add.w	r2, r3, #4
 800f4f8:	d01f      	beq.n	800f53a <_scanf_float+0x3e6>
 800f4fa:	9903      	ldr	r1, [sp, #12]
 800f4fc:	600a      	str	r2, [r1, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	e9c3 6700 	strd	r6, r7, [r3]
 800f504:	68e3      	ldr	r3, [r4, #12]
 800f506:	3301      	adds	r3, #1
 800f508:	60e3      	str	r3, [r4, #12]
 800f50a:	e7d9      	b.n	800f4c0 <_scanf_float+0x36c>
 800f50c:	9b04      	ldr	r3, [sp, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d0e4      	beq.n	800f4dc <_scanf_float+0x388>
 800f512:	9905      	ldr	r1, [sp, #20]
 800f514:	230a      	movs	r3, #10
 800f516:	3101      	adds	r1, #1
 800f518:	4640      	mov	r0, r8
 800f51a:	f7ff f9b7 	bl	800e88c <_strtol_r>
 800f51e:	9b04      	ldr	r3, [sp, #16]
 800f520:	9e05      	ldr	r6, [sp, #20]
 800f522:	1ac2      	subs	r2, r0, r3
 800f524:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f528:	429e      	cmp	r6, r3
 800f52a:	bf28      	it	cs
 800f52c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f530:	4910      	ldr	r1, [pc, #64]	@ (800f574 <_scanf_float+0x420>)
 800f532:	4630      	mov	r0, r6
 800f534:	f000 f8e4 	bl	800f700 <siprintf>
 800f538:	e7d0      	b.n	800f4dc <_scanf_float+0x388>
 800f53a:	f011 0f04 	tst.w	r1, #4
 800f53e:	9903      	ldr	r1, [sp, #12]
 800f540:	600a      	str	r2, [r1, #0]
 800f542:	d1dc      	bne.n	800f4fe <_scanf_float+0x3aa>
 800f544:	681d      	ldr	r5, [r3, #0]
 800f546:	4632      	mov	r2, r6
 800f548:	463b      	mov	r3, r7
 800f54a:	4630      	mov	r0, r6
 800f54c:	4639      	mov	r1, r7
 800f54e:	f7f1 faed 	bl	8000b2c <__aeabi_dcmpun>
 800f552:	b128      	cbz	r0, 800f560 <_scanf_float+0x40c>
 800f554:	4808      	ldr	r0, [pc, #32]	@ (800f578 <_scanf_float+0x424>)
 800f556:	f000 faa1 	bl	800fa9c <nanf>
 800f55a:	ed85 0a00 	vstr	s0, [r5]
 800f55e:	e7d1      	b.n	800f504 <_scanf_float+0x3b0>
 800f560:	4630      	mov	r0, r6
 800f562:	4639      	mov	r1, r7
 800f564:	f7f1 fb40 	bl	8000be8 <__aeabi_d2f>
 800f568:	6028      	str	r0, [r5, #0]
 800f56a:	e7cb      	b.n	800f504 <_scanf_float+0x3b0>
 800f56c:	f04f 0900 	mov.w	r9, #0
 800f570:	e629      	b.n	800f1c6 <_scanf_float+0x72>
 800f572:	bf00      	nop
 800f574:	08014853 	.word	0x08014853
 800f578:	08014904 	.word	0x08014904

0800f57c <std>:
 800f57c:	2300      	movs	r3, #0
 800f57e:	b510      	push	{r4, lr}
 800f580:	4604      	mov	r4, r0
 800f582:	e9c0 3300 	strd	r3, r3, [r0]
 800f586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f58a:	6083      	str	r3, [r0, #8]
 800f58c:	8181      	strh	r1, [r0, #12]
 800f58e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f590:	81c2      	strh	r2, [r0, #14]
 800f592:	6183      	str	r3, [r0, #24]
 800f594:	4619      	mov	r1, r3
 800f596:	2208      	movs	r2, #8
 800f598:	305c      	adds	r0, #92	@ 0x5c
 800f59a:	f000 f979 	bl	800f890 <memset>
 800f59e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d4 <std+0x58>)
 800f5a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d8 <std+0x5c>)
 800f5a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5dc <std+0x60>)
 800f5a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e0 <std+0x64>)
 800f5ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e4 <std+0x68>)
 800f5b0:	6224      	str	r4, [r4, #32]
 800f5b2:	429c      	cmp	r4, r3
 800f5b4:	d006      	beq.n	800f5c4 <std+0x48>
 800f5b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5ba:	4294      	cmp	r4, r2
 800f5bc:	d002      	beq.n	800f5c4 <std+0x48>
 800f5be:	33d0      	adds	r3, #208	@ 0xd0
 800f5c0:	429c      	cmp	r4, r3
 800f5c2:	d105      	bne.n	800f5d0 <std+0x54>
 800f5c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5cc:	f000 ba5a 	b.w	800fa84 <__retarget_lock_init_recursive>
 800f5d0:	bd10      	pop	{r4, pc}
 800f5d2:	bf00      	nop
 800f5d4:	0800f795 	.word	0x0800f795
 800f5d8:	0800f7bb 	.word	0x0800f7bb
 800f5dc:	0800f7f3 	.word	0x0800f7f3
 800f5e0:	0800f817 	.word	0x0800f817
 800f5e4:	20005830 	.word	0x20005830

0800f5e8 <stdio_exit_handler>:
 800f5e8:	4a02      	ldr	r2, [pc, #8]	@ (800f5f4 <stdio_exit_handler+0xc>)
 800f5ea:	4903      	ldr	r1, [pc, #12]	@ (800f5f8 <stdio_exit_handler+0x10>)
 800f5ec:	4803      	ldr	r0, [pc, #12]	@ (800f5fc <stdio_exit_handler+0x14>)
 800f5ee:	f000 b869 	b.w	800f6c4 <_fwalk_sglue>
 800f5f2:	bf00      	nop
 800f5f4:	2000002c 	.word	0x2000002c
 800f5f8:	08012779 	.word	0x08012779
 800f5fc:	2000003c 	.word	0x2000003c

0800f600 <cleanup_stdio>:
 800f600:	6841      	ldr	r1, [r0, #4]
 800f602:	4b0c      	ldr	r3, [pc, #48]	@ (800f634 <cleanup_stdio+0x34>)
 800f604:	4299      	cmp	r1, r3
 800f606:	b510      	push	{r4, lr}
 800f608:	4604      	mov	r4, r0
 800f60a:	d001      	beq.n	800f610 <cleanup_stdio+0x10>
 800f60c:	f003 f8b4 	bl	8012778 <_fflush_r>
 800f610:	68a1      	ldr	r1, [r4, #8]
 800f612:	4b09      	ldr	r3, [pc, #36]	@ (800f638 <cleanup_stdio+0x38>)
 800f614:	4299      	cmp	r1, r3
 800f616:	d002      	beq.n	800f61e <cleanup_stdio+0x1e>
 800f618:	4620      	mov	r0, r4
 800f61a:	f003 f8ad 	bl	8012778 <_fflush_r>
 800f61e:	68e1      	ldr	r1, [r4, #12]
 800f620:	4b06      	ldr	r3, [pc, #24]	@ (800f63c <cleanup_stdio+0x3c>)
 800f622:	4299      	cmp	r1, r3
 800f624:	d004      	beq.n	800f630 <cleanup_stdio+0x30>
 800f626:	4620      	mov	r0, r4
 800f628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f62c:	f003 b8a4 	b.w	8012778 <_fflush_r>
 800f630:	bd10      	pop	{r4, pc}
 800f632:	bf00      	nop
 800f634:	20005830 	.word	0x20005830
 800f638:	20005898 	.word	0x20005898
 800f63c:	20005900 	.word	0x20005900

0800f640 <global_stdio_init.part.0>:
 800f640:	b510      	push	{r4, lr}
 800f642:	4b0b      	ldr	r3, [pc, #44]	@ (800f670 <global_stdio_init.part.0+0x30>)
 800f644:	4c0b      	ldr	r4, [pc, #44]	@ (800f674 <global_stdio_init.part.0+0x34>)
 800f646:	4a0c      	ldr	r2, [pc, #48]	@ (800f678 <global_stdio_init.part.0+0x38>)
 800f648:	601a      	str	r2, [r3, #0]
 800f64a:	4620      	mov	r0, r4
 800f64c:	2200      	movs	r2, #0
 800f64e:	2104      	movs	r1, #4
 800f650:	f7ff ff94 	bl	800f57c <std>
 800f654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f658:	2201      	movs	r2, #1
 800f65a:	2109      	movs	r1, #9
 800f65c:	f7ff ff8e 	bl	800f57c <std>
 800f660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f664:	2202      	movs	r2, #2
 800f666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f66a:	2112      	movs	r1, #18
 800f66c:	f7ff bf86 	b.w	800f57c <std>
 800f670:	20005968 	.word	0x20005968
 800f674:	20005830 	.word	0x20005830
 800f678:	0800f5e9 	.word	0x0800f5e9

0800f67c <__sfp_lock_acquire>:
 800f67c:	4801      	ldr	r0, [pc, #4]	@ (800f684 <__sfp_lock_acquire+0x8>)
 800f67e:	f000 ba02 	b.w	800fa86 <__retarget_lock_acquire_recursive>
 800f682:	bf00      	nop
 800f684:	20005971 	.word	0x20005971

0800f688 <__sfp_lock_release>:
 800f688:	4801      	ldr	r0, [pc, #4]	@ (800f690 <__sfp_lock_release+0x8>)
 800f68a:	f000 b9fd 	b.w	800fa88 <__retarget_lock_release_recursive>
 800f68e:	bf00      	nop
 800f690:	20005971 	.word	0x20005971

0800f694 <__sinit>:
 800f694:	b510      	push	{r4, lr}
 800f696:	4604      	mov	r4, r0
 800f698:	f7ff fff0 	bl	800f67c <__sfp_lock_acquire>
 800f69c:	6a23      	ldr	r3, [r4, #32]
 800f69e:	b11b      	cbz	r3, 800f6a8 <__sinit+0x14>
 800f6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6a4:	f7ff bff0 	b.w	800f688 <__sfp_lock_release>
 800f6a8:	4b04      	ldr	r3, [pc, #16]	@ (800f6bc <__sinit+0x28>)
 800f6aa:	6223      	str	r3, [r4, #32]
 800f6ac:	4b04      	ldr	r3, [pc, #16]	@ (800f6c0 <__sinit+0x2c>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1f5      	bne.n	800f6a0 <__sinit+0xc>
 800f6b4:	f7ff ffc4 	bl	800f640 <global_stdio_init.part.0>
 800f6b8:	e7f2      	b.n	800f6a0 <__sinit+0xc>
 800f6ba:	bf00      	nop
 800f6bc:	0800f601 	.word	0x0800f601
 800f6c0:	20005968 	.word	0x20005968

0800f6c4 <_fwalk_sglue>:
 800f6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c8:	4607      	mov	r7, r0
 800f6ca:	4688      	mov	r8, r1
 800f6cc:	4614      	mov	r4, r2
 800f6ce:	2600      	movs	r6, #0
 800f6d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6d4:	f1b9 0901 	subs.w	r9, r9, #1
 800f6d8:	d505      	bpl.n	800f6e6 <_fwalk_sglue+0x22>
 800f6da:	6824      	ldr	r4, [r4, #0]
 800f6dc:	2c00      	cmp	r4, #0
 800f6de:	d1f7      	bne.n	800f6d0 <_fwalk_sglue+0xc>
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e6:	89ab      	ldrh	r3, [r5, #12]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d907      	bls.n	800f6fc <_fwalk_sglue+0x38>
 800f6ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	d003      	beq.n	800f6fc <_fwalk_sglue+0x38>
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	47c0      	blx	r8
 800f6fa:	4306      	orrs	r6, r0
 800f6fc:	3568      	adds	r5, #104	@ 0x68
 800f6fe:	e7e9      	b.n	800f6d4 <_fwalk_sglue+0x10>

0800f700 <siprintf>:
 800f700:	b40e      	push	{r1, r2, r3}
 800f702:	b500      	push	{lr}
 800f704:	b09c      	sub	sp, #112	@ 0x70
 800f706:	ab1d      	add	r3, sp, #116	@ 0x74
 800f708:	9002      	str	r0, [sp, #8]
 800f70a:	9006      	str	r0, [sp, #24]
 800f70c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f710:	4809      	ldr	r0, [pc, #36]	@ (800f738 <siprintf+0x38>)
 800f712:	9107      	str	r1, [sp, #28]
 800f714:	9104      	str	r1, [sp, #16]
 800f716:	4909      	ldr	r1, [pc, #36]	@ (800f73c <siprintf+0x3c>)
 800f718:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71c:	9105      	str	r1, [sp, #20]
 800f71e:	6800      	ldr	r0, [r0, #0]
 800f720:	9301      	str	r3, [sp, #4]
 800f722:	a902      	add	r1, sp, #8
 800f724:	f002 fb8e 	bl	8011e44 <_svfiprintf_r>
 800f728:	9b02      	ldr	r3, [sp, #8]
 800f72a:	2200      	movs	r2, #0
 800f72c:	701a      	strb	r2, [r3, #0]
 800f72e:	b01c      	add	sp, #112	@ 0x70
 800f730:	f85d eb04 	ldr.w	lr, [sp], #4
 800f734:	b003      	add	sp, #12
 800f736:	4770      	bx	lr
 800f738:	20000038 	.word	0x20000038
 800f73c:	ffff0208 	.word	0xffff0208

0800f740 <siscanf>:
 800f740:	b40e      	push	{r1, r2, r3}
 800f742:	b530      	push	{r4, r5, lr}
 800f744:	b09c      	sub	sp, #112	@ 0x70
 800f746:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f748:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f74c:	f854 5b04 	ldr.w	r5, [r4], #4
 800f750:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f754:	9002      	str	r0, [sp, #8]
 800f756:	9006      	str	r0, [sp, #24]
 800f758:	f7f0 fd8a 	bl	8000270 <strlen>
 800f75c:	4b0b      	ldr	r3, [pc, #44]	@ (800f78c <siscanf+0x4c>)
 800f75e:	9003      	str	r0, [sp, #12]
 800f760:	9007      	str	r0, [sp, #28]
 800f762:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f764:	480a      	ldr	r0, [pc, #40]	@ (800f790 <siscanf+0x50>)
 800f766:	9401      	str	r4, [sp, #4]
 800f768:	2300      	movs	r3, #0
 800f76a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f76c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f76e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f772:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f776:	462a      	mov	r2, r5
 800f778:	4623      	mov	r3, r4
 800f77a:	a902      	add	r1, sp, #8
 800f77c:	6800      	ldr	r0, [r0, #0]
 800f77e:	f002 fcb5 	bl	80120ec <__ssvfiscanf_r>
 800f782:	b01c      	add	sp, #112	@ 0x70
 800f784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f788:	b003      	add	sp, #12
 800f78a:	4770      	bx	lr
 800f78c:	0800f7b7 	.word	0x0800f7b7
 800f790:	20000038 	.word	0x20000038

0800f794 <__sread>:
 800f794:	b510      	push	{r4, lr}
 800f796:	460c      	mov	r4, r1
 800f798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f79c:	f000 f914 	bl	800f9c8 <_read_r>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	bfab      	itete	ge
 800f7a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f7a6:	89a3      	ldrhlt	r3, [r4, #12]
 800f7a8:	181b      	addge	r3, r3, r0
 800f7aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f7ae:	bfac      	ite	ge
 800f7b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f7b2:	81a3      	strhlt	r3, [r4, #12]
 800f7b4:	bd10      	pop	{r4, pc}

0800f7b6 <__seofread>:
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	4770      	bx	lr

0800f7ba <__swrite>:
 800f7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7be:	461f      	mov	r7, r3
 800f7c0:	898b      	ldrh	r3, [r1, #12]
 800f7c2:	05db      	lsls	r3, r3, #23
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	4616      	mov	r6, r2
 800f7ca:	d505      	bpl.n	800f7d8 <__swrite+0x1e>
 800f7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d0:	2302      	movs	r3, #2
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f000 f8e6 	bl	800f9a4 <_lseek_r>
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f7e2:	81a3      	strh	r3, [r4, #12]
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ee:	f000 b90d 	b.w	800fa0c <_write_r>

0800f7f2 <__sseek>:
 800f7f2:	b510      	push	{r4, lr}
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7fa:	f000 f8d3 	bl	800f9a4 <_lseek_r>
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	bf15      	itete	ne
 800f804:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f80a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f80e:	81a3      	strheq	r3, [r4, #12]
 800f810:	bf18      	it	ne
 800f812:	81a3      	strhne	r3, [r4, #12]
 800f814:	bd10      	pop	{r4, pc}

0800f816 <__sclose>:
 800f816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81a:	f000 b8b3 	b.w	800f984 <_close_r>

0800f81e <_vsniprintf_r>:
 800f81e:	b530      	push	{r4, r5, lr}
 800f820:	4614      	mov	r4, r2
 800f822:	2c00      	cmp	r4, #0
 800f824:	b09b      	sub	sp, #108	@ 0x6c
 800f826:	4605      	mov	r5, r0
 800f828:	461a      	mov	r2, r3
 800f82a:	da05      	bge.n	800f838 <_vsniprintf_r+0x1a>
 800f82c:	238b      	movs	r3, #139	@ 0x8b
 800f82e:	6003      	str	r3, [r0, #0]
 800f830:	f04f 30ff 	mov.w	r0, #4294967295
 800f834:	b01b      	add	sp, #108	@ 0x6c
 800f836:	bd30      	pop	{r4, r5, pc}
 800f838:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f83c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f840:	bf14      	ite	ne
 800f842:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f846:	4623      	moveq	r3, r4
 800f848:	9302      	str	r3, [sp, #8]
 800f84a:	9305      	str	r3, [sp, #20]
 800f84c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f850:	9100      	str	r1, [sp, #0]
 800f852:	9104      	str	r1, [sp, #16]
 800f854:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f858:	4669      	mov	r1, sp
 800f85a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f85c:	f002 faf2 	bl	8011e44 <_svfiprintf_r>
 800f860:	1c43      	adds	r3, r0, #1
 800f862:	bfbc      	itt	lt
 800f864:	238b      	movlt	r3, #139	@ 0x8b
 800f866:	602b      	strlt	r3, [r5, #0]
 800f868:	2c00      	cmp	r4, #0
 800f86a:	d0e3      	beq.n	800f834 <_vsniprintf_r+0x16>
 800f86c:	9b00      	ldr	r3, [sp, #0]
 800f86e:	2200      	movs	r2, #0
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	e7df      	b.n	800f834 <_vsniprintf_r+0x16>

0800f874 <vsniprintf>:
 800f874:	b507      	push	{r0, r1, r2, lr}
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	4613      	mov	r3, r2
 800f87a:	460a      	mov	r2, r1
 800f87c:	4601      	mov	r1, r0
 800f87e:	4803      	ldr	r0, [pc, #12]	@ (800f88c <vsniprintf+0x18>)
 800f880:	6800      	ldr	r0, [r0, #0]
 800f882:	f7ff ffcc 	bl	800f81e <_vsniprintf_r>
 800f886:	b003      	add	sp, #12
 800f888:	f85d fb04 	ldr.w	pc, [sp], #4
 800f88c:	20000038 	.word	0x20000038

0800f890 <memset>:
 800f890:	4402      	add	r2, r0
 800f892:	4603      	mov	r3, r0
 800f894:	4293      	cmp	r3, r2
 800f896:	d100      	bne.n	800f89a <memset+0xa>
 800f898:	4770      	bx	lr
 800f89a:	f803 1b01 	strb.w	r1, [r3], #1
 800f89e:	e7f9      	b.n	800f894 <memset+0x4>

0800f8a0 <strncmp>:
 800f8a0:	b510      	push	{r4, lr}
 800f8a2:	b16a      	cbz	r2, 800f8c0 <strncmp+0x20>
 800f8a4:	3901      	subs	r1, #1
 800f8a6:	1884      	adds	r4, r0, r2
 800f8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d103      	bne.n	800f8bc <strncmp+0x1c>
 800f8b4:	42a0      	cmp	r0, r4
 800f8b6:	d001      	beq.n	800f8bc <strncmp+0x1c>
 800f8b8:	2a00      	cmp	r2, #0
 800f8ba:	d1f5      	bne.n	800f8a8 <strncmp+0x8>
 800f8bc:	1ad0      	subs	r0, r2, r3
 800f8be:	bd10      	pop	{r4, pc}
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	e7fc      	b.n	800f8be <strncmp+0x1e>

0800f8c4 <strtok>:
 800f8c4:	4b16      	ldr	r3, [pc, #88]	@ (800f920 <strtok+0x5c>)
 800f8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ca:	681f      	ldr	r7, [r3, #0]
 800f8cc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	460e      	mov	r6, r1
 800f8d2:	b9ec      	cbnz	r4, 800f910 <strtok+0x4c>
 800f8d4:	2050      	movs	r0, #80	@ 0x50
 800f8d6:	f7fe fea1 	bl	800e61c <malloc>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	6478      	str	r0, [r7, #68]	@ 0x44
 800f8de:	b920      	cbnz	r0, 800f8ea <strtok+0x26>
 800f8e0:	4b10      	ldr	r3, [pc, #64]	@ (800f924 <strtok+0x60>)
 800f8e2:	4811      	ldr	r0, [pc, #68]	@ (800f928 <strtok+0x64>)
 800f8e4:	215b      	movs	r1, #91	@ 0x5b
 800f8e6:	f000 f8df 	bl	800faa8 <__assert_func>
 800f8ea:	e9c0 4400 	strd	r4, r4, [r0]
 800f8ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f8f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f8f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f8fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f8fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f902:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f906:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f90a:	6184      	str	r4, [r0, #24]
 800f90c:	7704      	strb	r4, [r0, #28]
 800f90e:	6244      	str	r4, [r0, #36]	@ 0x24
 800f910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f912:	4631      	mov	r1, r6
 800f914:	4628      	mov	r0, r5
 800f916:	2301      	movs	r3, #1
 800f918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f91c:	f000 b806 	b.w	800f92c <__strtok_r>
 800f920:	20000038 	.word	0x20000038
 800f924:	08014858 	.word	0x08014858
 800f928:	0801486f 	.word	0x0801486f

0800f92c <__strtok_r>:
 800f92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f92e:	4604      	mov	r4, r0
 800f930:	b908      	cbnz	r0, 800f936 <__strtok_r+0xa>
 800f932:	6814      	ldr	r4, [r2, #0]
 800f934:	b144      	cbz	r4, 800f948 <__strtok_r+0x1c>
 800f936:	4620      	mov	r0, r4
 800f938:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f93c:	460f      	mov	r7, r1
 800f93e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f942:	b91e      	cbnz	r6, 800f94c <__strtok_r+0x20>
 800f944:	b965      	cbnz	r5, 800f960 <__strtok_r+0x34>
 800f946:	6015      	str	r5, [r2, #0]
 800f948:	2000      	movs	r0, #0
 800f94a:	e005      	b.n	800f958 <__strtok_r+0x2c>
 800f94c:	42b5      	cmp	r5, r6
 800f94e:	d1f6      	bne.n	800f93e <__strtok_r+0x12>
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1f0      	bne.n	800f936 <__strtok_r+0xa>
 800f954:	6014      	str	r4, [r2, #0]
 800f956:	7003      	strb	r3, [r0, #0]
 800f958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f95a:	461c      	mov	r4, r3
 800f95c:	e00c      	b.n	800f978 <__strtok_r+0x4c>
 800f95e:	b915      	cbnz	r5, 800f966 <__strtok_r+0x3a>
 800f960:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f964:	460e      	mov	r6, r1
 800f966:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f96a:	42ab      	cmp	r3, r5
 800f96c:	d1f7      	bne.n	800f95e <__strtok_r+0x32>
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d0f3      	beq.n	800f95a <__strtok_r+0x2e>
 800f972:	2300      	movs	r3, #0
 800f974:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f978:	6014      	str	r4, [r2, #0]
 800f97a:	e7ed      	b.n	800f958 <__strtok_r+0x2c>

0800f97c <_localeconv_r>:
 800f97c:	4800      	ldr	r0, [pc, #0]	@ (800f980 <_localeconv_r+0x4>)
 800f97e:	4770      	bx	lr
 800f980:	20000178 	.word	0x20000178

0800f984 <_close_r>:
 800f984:	b538      	push	{r3, r4, r5, lr}
 800f986:	4d06      	ldr	r5, [pc, #24]	@ (800f9a0 <_close_r+0x1c>)
 800f988:	2300      	movs	r3, #0
 800f98a:	4604      	mov	r4, r0
 800f98c:	4608      	mov	r0, r1
 800f98e:	602b      	str	r3, [r5, #0]
 800f990:	f7f4 fd8a 	bl	80044a8 <_close>
 800f994:	1c43      	adds	r3, r0, #1
 800f996:	d102      	bne.n	800f99e <_close_r+0x1a>
 800f998:	682b      	ldr	r3, [r5, #0]
 800f99a:	b103      	cbz	r3, 800f99e <_close_r+0x1a>
 800f99c:	6023      	str	r3, [r4, #0]
 800f99e:	bd38      	pop	{r3, r4, r5, pc}
 800f9a0:	2000596c 	.word	0x2000596c

0800f9a4 <_lseek_r>:
 800f9a4:	b538      	push	{r3, r4, r5, lr}
 800f9a6:	4d07      	ldr	r5, [pc, #28]	@ (800f9c4 <_lseek_r+0x20>)
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	4608      	mov	r0, r1
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	602a      	str	r2, [r5, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	f7f4 fd9f 	bl	80044f6 <_lseek>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	d102      	bne.n	800f9c2 <_lseek_r+0x1e>
 800f9bc:	682b      	ldr	r3, [r5, #0]
 800f9be:	b103      	cbz	r3, 800f9c2 <_lseek_r+0x1e>
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	2000596c 	.word	0x2000596c

0800f9c8 <_read_r>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	4d07      	ldr	r5, [pc, #28]	@ (800f9e8 <_read_r+0x20>)
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	4608      	mov	r0, r1
 800f9d0:	4611      	mov	r1, r2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	602a      	str	r2, [r5, #0]
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	f7f4 fd2d 	bl	8004436 <_read>
 800f9dc:	1c43      	adds	r3, r0, #1
 800f9de:	d102      	bne.n	800f9e6 <_read_r+0x1e>
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	b103      	cbz	r3, 800f9e6 <_read_r+0x1e>
 800f9e4:	6023      	str	r3, [r4, #0]
 800f9e6:	bd38      	pop	{r3, r4, r5, pc}
 800f9e8:	2000596c 	.word	0x2000596c

0800f9ec <_sbrk_r>:
 800f9ec:	b538      	push	{r3, r4, r5, lr}
 800f9ee:	4d06      	ldr	r5, [pc, #24]	@ (800fa08 <_sbrk_r+0x1c>)
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	4608      	mov	r0, r1
 800f9f6:	602b      	str	r3, [r5, #0]
 800f9f8:	f7f4 fd8a 	bl	8004510 <_sbrk>
 800f9fc:	1c43      	adds	r3, r0, #1
 800f9fe:	d102      	bne.n	800fa06 <_sbrk_r+0x1a>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	b103      	cbz	r3, 800fa06 <_sbrk_r+0x1a>
 800fa04:	6023      	str	r3, [r4, #0]
 800fa06:	bd38      	pop	{r3, r4, r5, pc}
 800fa08:	2000596c 	.word	0x2000596c

0800fa0c <_write_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d07      	ldr	r5, [pc, #28]	@ (800fa2c <_write_r+0x20>)
 800fa10:	4604      	mov	r4, r0
 800fa12:	4608      	mov	r0, r1
 800fa14:	4611      	mov	r1, r2
 800fa16:	2200      	movs	r2, #0
 800fa18:	602a      	str	r2, [r5, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	f7f4 fd28 	bl	8004470 <_write>
 800fa20:	1c43      	adds	r3, r0, #1
 800fa22:	d102      	bne.n	800fa2a <_write_r+0x1e>
 800fa24:	682b      	ldr	r3, [r5, #0]
 800fa26:	b103      	cbz	r3, 800fa2a <_write_r+0x1e>
 800fa28:	6023      	str	r3, [r4, #0]
 800fa2a:	bd38      	pop	{r3, r4, r5, pc}
 800fa2c:	2000596c 	.word	0x2000596c

0800fa30 <__errno>:
 800fa30:	4b01      	ldr	r3, [pc, #4]	@ (800fa38 <__errno+0x8>)
 800fa32:	6818      	ldr	r0, [r3, #0]
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	20000038 	.word	0x20000038

0800fa3c <__libc_init_array>:
 800fa3c:	b570      	push	{r4, r5, r6, lr}
 800fa3e:	4d0d      	ldr	r5, [pc, #52]	@ (800fa74 <__libc_init_array+0x38>)
 800fa40:	4c0d      	ldr	r4, [pc, #52]	@ (800fa78 <__libc_init_array+0x3c>)
 800fa42:	1b64      	subs	r4, r4, r5
 800fa44:	10a4      	asrs	r4, r4, #2
 800fa46:	2600      	movs	r6, #0
 800fa48:	42a6      	cmp	r6, r4
 800fa4a:	d109      	bne.n	800fa60 <__libc_init_array+0x24>
 800fa4c:	4d0b      	ldr	r5, [pc, #44]	@ (800fa7c <__libc_init_array+0x40>)
 800fa4e:	4c0c      	ldr	r4, [pc, #48]	@ (800fa80 <__libc_init_array+0x44>)
 800fa50:	f003 fe28 	bl	80136a4 <_init>
 800fa54:	1b64      	subs	r4, r4, r5
 800fa56:	10a4      	asrs	r4, r4, #2
 800fa58:	2600      	movs	r6, #0
 800fa5a:	42a6      	cmp	r6, r4
 800fa5c:	d105      	bne.n	800fa6a <__libc_init_array+0x2e>
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}
 800fa60:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa64:	4798      	blx	r3
 800fa66:	3601      	adds	r6, #1
 800fa68:	e7ee      	b.n	800fa48 <__libc_init_array+0xc>
 800fa6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa6e:	4798      	blx	r3
 800fa70:	3601      	adds	r6, #1
 800fa72:	e7f2      	b.n	800fa5a <__libc_init_array+0x1e>
 800fa74:	08014bc4 	.word	0x08014bc4
 800fa78:	08014bc4 	.word	0x08014bc4
 800fa7c:	08014bc4 	.word	0x08014bc4
 800fa80:	08014bc8 	.word	0x08014bc8

0800fa84 <__retarget_lock_init_recursive>:
 800fa84:	4770      	bx	lr

0800fa86 <__retarget_lock_acquire_recursive>:
 800fa86:	4770      	bx	lr

0800fa88 <__retarget_lock_release_recursive>:
 800fa88:	4770      	bx	lr

0800fa8a <strcpy>:
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa90:	f803 2b01 	strb.w	r2, [r3], #1
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	d1f9      	bne.n	800fa8c <strcpy+0x2>
 800fa98:	4770      	bx	lr
	...

0800fa9c <nanf>:
 800fa9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800faa4 <nanf+0x8>
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	7fc00000 	.word	0x7fc00000

0800faa8 <__assert_func>:
 800faa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faaa:	4614      	mov	r4, r2
 800faac:	461a      	mov	r2, r3
 800faae:	4b09      	ldr	r3, [pc, #36]	@ (800fad4 <__assert_func+0x2c>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4605      	mov	r5, r0
 800fab4:	68d8      	ldr	r0, [r3, #12]
 800fab6:	b954      	cbnz	r4, 800face <__assert_func+0x26>
 800fab8:	4b07      	ldr	r3, [pc, #28]	@ (800fad8 <__assert_func+0x30>)
 800faba:	461c      	mov	r4, r3
 800fabc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fac0:	9100      	str	r1, [sp, #0]
 800fac2:	462b      	mov	r3, r5
 800fac4:	4905      	ldr	r1, [pc, #20]	@ (800fadc <__assert_func+0x34>)
 800fac6:	f002 fe7f 	bl	80127c8 <fiprintf>
 800faca:	f002 ff35 	bl	8012938 <abort>
 800face:	4b04      	ldr	r3, [pc, #16]	@ (800fae0 <__assert_func+0x38>)
 800fad0:	e7f4      	b.n	800fabc <__assert_func+0x14>
 800fad2:	bf00      	nop
 800fad4:	20000038 	.word	0x20000038
 800fad8:	08014904 	.word	0x08014904
 800fadc:	080148d6 	.word	0x080148d6
 800fae0:	080148c9 	.word	0x080148c9

0800fae4 <quorem>:
 800fae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	6903      	ldr	r3, [r0, #16]
 800faea:	690c      	ldr	r4, [r1, #16]
 800faec:	42a3      	cmp	r3, r4
 800faee:	4607      	mov	r7, r0
 800faf0:	db7e      	blt.n	800fbf0 <quorem+0x10c>
 800faf2:	3c01      	subs	r4, #1
 800faf4:	f101 0814 	add.w	r8, r1, #20
 800faf8:	00a3      	lsls	r3, r4, #2
 800fafa:	f100 0514 	add.w	r5, r0, #20
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb04:	9301      	str	r3, [sp, #4]
 800fb06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	429a      	cmp	r2, r3
 800fb12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb16:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb1a:	d32e      	bcc.n	800fb7a <quorem+0x96>
 800fb1c:	f04f 0a00 	mov.w	sl, #0
 800fb20:	46c4      	mov	ip, r8
 800fb22:	46ae      	mov	lr, r5
 800fb24:	46d3      	mov	fp, sl
 800fb26:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb2a:	b298      	uxth	r0, r3
 800fb2c:	fb06 a000 	mla	r0, r6, r0, sl
 800fb30:	0c02      	lsrs	r2, r0, #16
 800fb32:	0c1b      	lsrs	r3, r3, #16
 800fb34:	fb06 2303 	mla	r3, r6, r3, r2
 800fb38:	f8de 2000 	ldr.w	r2, [lr]
 800fb3c:	b280      	uxth	r0, r0
 800fb3e:	b292      	uxth	r2, r2
 800fb40:	1a12      	subs	r2, r2, r0
 800fb42:	445a      	add	r2, fp
 800fb44:	f8de 0000 	ldr.w	r0, [lr]
 800fb48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fb52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fb56:	b292      	uxth	r2, r2
 800fb58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fb5c:	45e1      	cmp	r9, ip
 800fb5e:	f84e 2b04 	str.w	r2, [lr], #4
 800fb62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb66:	d2de      	bcs.n	800fb26 <quorem+0x42>
 800fb68:	9b00      	ldr	r3, [sp, #0]
 800fb6a:	58eb      	ldr	r3, [r5, r3]
 800fb6c:	b92b      	cbnz	r3, 800fb7a <quorem+0x96>
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	3b04      	subs	r3, #4
 800fb72:	429d      	cmp	r5, r3
 800fb74:	461a      	mov	r2, r3
 800fb76:	d32f      	bcc.n	800fbd8 <quorem+0xf4>
 800fb78:	613c      	str	r4, [r7, #16]
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	f001 f90e 	bl	8010d9c <__mcmp>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	db25      	blt.n	800fbd0 <quorem+0xec>
 800fb84:	4629      	mov	r1, r5
 800fb86:	2000      	movs	r0, #0
 800fb88:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb8c:	f8d1 c000 	ldr.w	ip, [r1]
 800fb90:	fa1f fe82 	uxth.w	lr, r2
 800fb94:	fa1f f38c 	uxth.w	r3, ip
 800fb98:	eba3 030e 	sub.w	r3, r3, lr
 800fb9c:	4403      	add	r3, r0
 800fb9e:	0c12      	lsrs	r2, r2, #16
 800fba0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fba4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbae:	45c1      	cmp	r9, r8
 800fbb0:	f841 3b04 	str.w	r3, [r1], #4
 800fbb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fbb8:	d2e6      	bcs.n	800fb88 <quorem+0xa4>
 800fbba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbc2:	b922      	cbnz	r2, 800fbce <quorem+0xea>
 800fbc4:	3b04      	subs	r3, #4
 800fbc6:	429d      	cmp	r5, r3
 800fbc8:	461a      	mov	r2, r3
 800fbca:	d30b      	bcc.n	800fbe4 <quorem+0x100>
 800fbcc:	613c      	str	r4, [r7, #16]
 800fbce:	3601      	adds	r6, #1
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	b003      	add	sp, #12
 800fbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd8:	6812      	ldr	r2, [r2, #0]
 800fbda:	3b04      	subs	r3, #4
 800fbdc:	2a00      	cmp	r2, #0
 800fbde:	d1cb      	bne.n	800fb78 <quorem+0x94>
 800fbe0:	3c01      	subs	r4, #1
 800fbe2:	e7c6      	b.n	800fb72 <quorem+0x8e>
 800fbe4:	6812      	ldr	r2, [r2, #0]
 800fbe6:	3b04      	subs	r3, #4
 800fbe8:	2a00      	cmp	r2, #0
 800fbea:	d1ef      	bne.n	800fbcc <quorem+0xe8>
 800fbec:	3c01      	subs	r4, #1
 800fbee:	e7ea      	b.n	800fbc6 <quorem+0xe2>
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	e7ee      	b.n	800fbd2 <quorem+0xee>
 800fbf4:	0000      	movs	r0, r0
	...

0800fbf8 <_dtoa_r>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	69c7      	ldr	r7, [r0, #28]
 800fbfe:	b099      	sub	sp, #100	@ 0x64
 800fc00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc04:	ec55 4b10 	vmov	r4, r5, d0
 800fc08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fc0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc0c:	4683      	mov	fp, r0
 800fc0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc12:	b97f      	cbnz	r7, 800fc34 <_dtoa_r+0x3c>
 800fc14:	2010      	movs	r0, #16
 800fc16:	f7fe fd01 	bl	800e61c <malloc>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800fc20:	b920      	cbnz	r0, 800fc2c <_dtoa_r+0x34>
 800fc22:	4ba7      	ldr	r3, [pc, #668]	@ (800fec0 <_dtoa_r+0x2c8>)
 800fc24:	21ef      	movs	r1, #239	@ 0xef
 800fc26:	48a7      	ldr	r0, [pc, #668]	@ (800fec4 <_dtoa_r+0x2cc>)
 800fc28:	f7ff ff3e 	bl	800faa8 <__assert_func>
 800fc2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fc30:	6007      	str	r7, [r0, #0]
 800fc32:	60c7      	str	r7, [r0, #12]
 800fc34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc38:	6819      	ldr	r1, [r3, #0]
 800fc3a:	b159      	cbz	r1, 800fc54 <_dtoa_r+0x5c>
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	604a      	str	r2, [r1, #4]
 800fc40:	2301      	movs	r3, #1
 800fc42:	4093      	lsls	r3, r2
 800fc44:	608b      	str	r3, [r1, #8]
 800fc46:	4658      	mov	r0, fp
 800fc48:	f000 fe24 	bl	8010894 <_Bfree>
 800fc4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc50:	2200      	movs	r2, #0
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	1e2b      	subs	r3, r5, #0
 800fc56:	bfb9      	ittee	lt
 800fc58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fc5c:	9303      	strlt	r3, [sp, #12]
 800fc5e:	2300      	movge	r3, #0
 800fc60:	6033      	strge	r3, [r6, #0]
 800fc62:	9f03      	ldr	r7, [sp, #12]
 800fc64:	4b98      	ldr	r3, [pc, #608]	@ (800fec8 <_dtoa_r+0x2d0>)
 800fc66:	bfbc      	itt	lt
 800fc68:	2201      	movlt	r2, #1
 800fc6a:	6032      	strlt	r2, [r6, #0]
 800fc6c:	43bb      	bics	r3, r7
 800fc6e:	d112      	bne.n	800fc96 <_dtoa_r+0x9e>
 800fc70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fc72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc7c:	4323      	orrs	r3, r4
 800fc7e:	f000 854d 	beq.w	801071c <_dtoa_r+0xb24>
 800fc82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fedc <_dtoa_r+0x2e4>
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 854f 	beq.w	801072c <_dtoa_r+0xb34>
 800fc8e:	f10a 0303 	add.w	r3, sl, #3
 800fc92:	f000 bd49 	b.w	8010728 <_dtoa_r+0xb30>
 800fc96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	ec51 0b17 	vmov	r0, r1, d7
 800fca0:	2300      	movs	r3, #0
 800fca2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fca6:	f7f0 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcaa:	4680      	mov	r8, r0
 800fcac:	b158      	cbz	r0, 800fcc6 <_dtoa_r+0xce>
 800fcae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	6013      	str	r3, [r2, #0]
 800fcb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcb6:	b113      	cbz	r3, 800fcbe <_dtoa_r+0xc6>
 800fcb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fcba:	4b84      	ldr	r3, [pc, #528]	@ (800fecc <_dtoa_r+0x2d4>)
 800fcbc:	6013      	str	r3, [r2, #0]
 800fcbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fee0 <_dtoa_r+0x2e8>
 800fcc2:	f000 bd33 	b.w	801072c <_dtoa_r+0xb34>
 800fcc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fcca:	aa16      	add	r2, sp, #88	@ 0x58
 800fccc:	a917      	add	r1, sp, #92	@ 0x5c
 800fcce:	4658      	mov	r0, fp
 800fcd0:	f001 f984 	bl	8010fdc <__d2b>
 800fcd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fcd8:	4681      	mov	r9, r0
 800fcda:	2e00      	cmp	r6, #0
 800fcdc:	d077      	beq.n	800fdce <_dtoa_r+0x1d6>
 800fcde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fce0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fcf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fcf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4b74      	ldr	r3, [pc, #464]	@ (800fed0 <_dtoa_r+0x2d8>)
 800fcfe:	f7f0 fac3 	bl	8000288 <__aeabi_dsub>
 800fd02:	a369      	add	r3, pc, #420	@ (adr r3, 800fea8 <_dtoa_r+0x2b0>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f7f0 fc76 	bl	80005f8 <__aeabi_dmul>
 800fd0c:	a368      	add	r3, pc, #416	@ (adr r3, 800feb0 <_dtoa_r+0x2b8>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fabb 	bl	800028c <__adddf3>
 800fd16:	4604      	mov	r4, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	460d      	mov	r5, r1
 800fd1c:	f7f0 fc02 	bl	8000524 <__aeabi_i2d>
 800fd20:	a365      	add	r3, pc, #404	@ (adr r3, 800feb8 <_dtoa_r+0x2c0>)
 800fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd26:	f7f0 fc67 	bl	80005f8 <__aeabi_dmul>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 faab 	bl	800028c <__adddf3>
 800fd36:	4604      	mov	r4, r0
 800fd38:	460d      	mov	r5, r1
 800fd3a:	f7f0 ff0d 	bl	8000b58 <__aeabi_d2iz>
 800fd3e:	2200      	movs	r2, #0
 800fd40:	4607      	mov	r7, r0
 800fd42:	2300      	movs	r3, #0
 800fd44:	4620      	mov	r0, r4
 800fd46:	4629      	mov	r1, r5
 800fd48:	f7f0 fec8 	bl	8000adc <__aeabi_dcmplt>
 800fd4c:	b140      	cbz	r0, 800fd60 <_dtoa_r+0x168>
 800fd4e:	4638      	mov	r0, r7
 800fd50:	f7f0 fbe8 	bl	8000524 <__aeabi_i2d>
 800fd54:	4622      	mov	r2, r4
 800fd56:	462b      	mov	r3, r5
 800fd58:	f7f0 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd5c:	b900      	cbnz	r0, 800fd60 <_dtoa_r+0x168>
 800fd5e:	3f01      	subs	r7, #1
 800fd60:	2f16      	cmp	r7, #22
 800fd62:	d851      	bhi.n	800fe08 <_dtoa_r+0x210>
 800fd64:	4b5b      	ldr	r3, [pc, #364]	@ (800fed4 <_dtoa_r+0x2dc>)
 800fd66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd72:	f7f0 feb3 	bl	8000adc <__aeabi_dcmplt>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d048      	beq.n	800fe0c <_dtoa_r+0x214>
 800fd7a:	3f01      	subs	r7, #1
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800fd80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fd82:	1b9b      	subs	r3, r3, r6
 800fd84:	1e5a      	subs	r2, r3, #1
 800fd86:	bf44      	itt	mi
 800fd88:	f1c3 0801 	rsbmi	r8, r3, #1
 800fd8c:	2300      	movmi	r3, #0
 800fd8e:	9208      	str	r2, [sp, #32]
 800fd90:	bf54      	ite	pl
 800fd92:	f04f 0800 	movpl.w	r8, #0
 800fd96:	9308      	strmi	r3, [sp, #32]
 800fd98:	2f00      	cmp	r7, #0
 800fd9a:	db39      	blt.n	800fe10 <_dtoa_r+0x218>
 800fd9c:	9b08      	ldr	r3, [sp, #32]
 800fd9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fda0:	443b      	add	r3, r7
 800fda2:	9308      	str	r3, [sp, #32]
 800fda4:	2300      	movs	r3, #0
 800fda6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdaa:	2b09      	cmp	r3, #9
 800fdac:	d864      	bhi.n	800fe78 <_dtoa_r+0x280>
 800fdae:	2b05      	cmp	r3, #5
 800fdb0:	bfc4      	itt	gt
 800fdb2:	3b04      	subgt	r3, #4
 800fdb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb8:	f1a3 0302 	sub.w	r3, r3, #2
 800fdbc:	bfcc      	ite	gt
 800fdbe:	2400      	movgt	r4, #0
 800fdc0:	2401      	movle	r4, #1
 800fdc2:	2b03      	cmp	r3, #3
 800fdc4:	d863      	bhi.n	800fe8e <_dtoa_r+0x296>
 800fdc6:	e8df f003 	tbb	[pc, r3]
 800fdca:	372a      	.short	0x372a
 800fdcc:	5535      	.short	0x5535
 800fdce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fdd2:	441e      	add	r6, r3
 800fdd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fdd8:	2b20      	cmp	r3, #32
 800fdda:	bfc1      	itttt	gt
 800fddc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fde0:	409f      	lslgt	r7, r3
 800fde2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fde6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fdea:	bfd6      	itet	le
 800fdec:	f1c3 0320 	rsble	r3, r3, #32
 800fdf0:	ea47 0003 	orrgt.w	r0, r7, r3
 800fdf4:	fa04 f003 	lslle.w	r0, r4, r3
 800fdf8:	f7f0 fb84 	bl	8000504 <__aeabi_ui2d>
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fe02:	3e01      	subs	r6, #1
 800fe04:	9214      	str	r2, [sp, #80]	@ 0x50
 800fe06:	e777      	b.n	800fcf8 <_dtoa_r+0x100>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e7b8      	b.n	800fd7e <_dtoa_r+0x186>
 800fe0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800fe0e:	e7b7      	b.n	800fd80 <_dtoa_r+0x188>
 800fe10:	427b      	negs	r3, r7
 800fe12:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe14:	2300      	movs	r3, #0
 800fe16:	eba8 0807 	sub.w	r8, r8, r7
 800fe1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe1c:	e7c4      	b.n	800fda8 <_dtoa_r+0x1b0>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	dc35      	bgt.n	800fe94 <_dtoa_r+0x29c>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	9307      	str	r3, [sp, #28]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe32:	e00b      	b.n	800fe4c <_dtoa_r+0x254>
 800fe34:	2301      	movs	r3, #1
 800fe36:	e7f3      	b.n	800fe20 <_dtoa_r+0x228>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe3e:	18fb      	adds	r3, r7, r3
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	3301      	adds	r3, #1
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	9307      	str	r3, [sp, #28]
 800fe48:	bfb8      	it	lt
 800fe4a:	2301      	movlt	r3, #1
 800fe4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fe50:	2100      	movs	r1, #0
 800fe52:	2204      	movs	r2, #4
 800fe54:	f102 0514 	add.w	r5, r2, #20
 800fe58:	429d      	cmp	r5, r3
 800fe5a:	d91f      	bls.n	800fe9c <_dtoa_r+0x2a4>
 800fe5c:	6041      	str	r1, [r0, #4]
 800fe5e:	4658      	mov	r0, fp
 800fe60:	f000 fcd8 	bl	8010814 <_Balloc>
 800fe64:	4682      	mov	sl, r0
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d13c      	bne.n	800fee4 <_dtoa_r+0x2ec>
 800fe6a:	4b1b      	ldr	r3, [pc, #108]	@ (800fed8 <_dtoa_r+0x2e0>)
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fe72:	e6d8      	b.n	800fc26 <_dtoa_r+0x2e>
 800fe74:	2301      	movs	r3, #1
 800fe76:	e7e0      	b.n	800fe3a <_dtoa_r+0x242>
 800fe78:	2401      	movs	r4, #1
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fe80:	f04f 33ff 	mov.w	r3, #4294967295
 800fe84:	9300      	str	r3, [sp, #0]
 800fe86:	9307      	str	r3, [sp, #28]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2312      	movs	r3, #18
 800fe8c:	e7d0      	b.n	800fe30 <_dtoa_r+0x238>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe92:	e7f5      	b.n	800fe80 <_dtoa_r+0x288>
 800fe94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	9307      	str	r3, [sp, #28]
 800fe9a:	e7d7      	b.n	800fe4c <_dtoa_r+0x254>
 800fe9c:	3101      	adds	r1, #1
 800fe9e:	0052      	lsls	r2, r2, #1
 800fea0:	e7d8      	b.n	800fe54 <_dtoa_r+0x25c>
 800fea2:	bf00      	nop
 800fea4:	f3af 8000 	nop.w
 800fea8:	636f4361 	.word	0x636f4361
 800feac:	3fd287a7 	.word	0x3fd287a7
 800feb0:	8b60c8b3 	.word	0x8b60c8b3
 800feb4:	3fc68a28 	.word	0x3fc68a28
 800feb8:	509f79fb 	.word	0x509f79fb
 800febc:	3fd34413 	.word	0x3fd34413
 800fec0:	08014858 	.word	0x08014858
 800fec4:	08014912 	.word	0x08014912
 800fec8:	7ff00000 	.word	0x7ff00000
 800fecc:	08014b50 	.word	0x08014b50
 800fed0:	3ff80000 	.word	0x3ff80000
 800fed4:	08014a08 	.word	0x08014a08
 800fed8:	0801496a 	.word	0x0801496a
 800fedc:	0801490e 	.word	0x0801490e
 800fee0:	08014b4f 	.word	0x08014b4f
 800fee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fee8:	6018      	str	r0, [r3, #0]
 800feea:	9b07      	ldr	r3, [sp, #28]
 800feec:	2b0e      	cmp	r3, #14
 800feee:	f200 80a4 	bhi.w	801003a <_dtoa_r+0x442>
 800fef2:	2c00      	cmp	r4, #0
 800fef4:	f000 80a1 	beq.w	801003a <_dtoa_r+0x442>
 800fef8:	2f00      	cmp	r7, #0
 800fefa:	dd33      	ble.n	800ff64 <_dtoa_r+0x36c>
 800fefc:	4bad      	ldr	r3, [pc, #692]	@ (80101b4 <_dtoa_r+0x5bc>)
 800fefe:	f007 020f 	and.w	r2, r7, #15
 800ff02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff06:	ed93 7b00 	vldr	d7, [r3]
 800ff0a:	05f8      	lsls	r0, r7, #23
 800ff0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ff10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ff14:	d516      	bpl.n	800ff44 <_dtoa_r+0x34c>
 800ff16:	4ba8      	ldr	r3, [pc, #672]	@ (80101b8 <_dtoa_r+0x5c0>)
 800ff18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff20:	f7f0 fc94 	bl	800084c <__aeabi_ddiv>
 800ff24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff28:	f004 040f 	and.w	r4, r4, #15
 800ff2c:	2603      	movs	r6, #3
 800ff2e:	4da2      	ldr	r5, [pc, #648]	@ (80101b8 <_dtoa_r+0x5c0>)
 800ff30:	b954      	cbnz	r4, 800ff48 <_dtoa_r+0x350>
 800ff32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff3a:	f7f0 fc87 	bl	800084c <__aeabi_ddiv>
 800ff3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff42:	e028      	b.n	800ff96 <_dtoa_r+0x39e>
 800ff44:	2602      	movs	r6, #2
 800ff46:	e7f2      	b.n	800ff2e <_dtoa_r+0x336>
 800ff48:	07e1      	lsls	r1, r4, #31
 800ff4a:	d508      	bpl.n	800ff5e <_dtoa_r+0x366>
 800ff4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff54:	f7f0 fb50 	bl	80005f8 <__aeabi_dmul>
 800ff58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff5c:	3601      	adds	r6, #1
 800ff5e:	1064      	asrs	r4, r4, #1
 800ff60:	3508      	adds	r5, #8
 800ff62:	e7e5      	b.n	800ff30 <_dtoa_r+0x338>
 800ff64:	f000 80d2 	beq.w	801010c <_dtoa_r+0x514>
 800ff68:	427c      	negs	r4, r7
 800ff6a:	4b92      	ldr	r3, [pc, #584]	@ (80101b4 <_dtoa_r+0x5bc>)
 800ff6c:	4d92      	ldr	r5, [pc, #584]	@ (80101b8 <_dtoa_r+0x5c0>)
 800ff6e:	f004 020f 	and.w	r2, r4, #15
 800ff72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff7e:	f7f0 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ff82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff86:	1124      	asrs	r4, r4, #4
 800ff88:	2300      	movs	r3, #0
 800ff8a:	2602      	movs	r6, #2
 800ff8c:	2c00      	cmp	r4, #0
 800ff8e:	f040 80b2 	bne.w	80100f6 <_dtoa_r+0x4fe>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1d3      	bne.n	800ff3e <_dtoa_r+0x346>
 800ff96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ff98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 80b7 	beq.w	8010110 <_dtoa_r+0x518>
 800ffa2:	4b86      	ldr	r3, [pc, #536]	@ (80101bc <_dtoa_r+0x5c4>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	f7f0 fd97 	bl	8000adc <__aeabi_dcmplt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f000 80ae 	beq.w	8010110 <_dtoa_r+0x518>
 800ffb4:	9b07      	ldr	r3, [sp, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 80aa 	beq.w	8010110 <_dtoa_r+0x518>
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd37      	ble.n	8010032 <_dtoa_r+0x43a>
 800ffc2:	1e7b      	subs	r3, r7, #1
 800ffc4:	9304      	str	r3, [sp, #16]
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4b7d      	ldr	r3, [pc, #500]	@ (80101c0 <_dtoa_r+0x5c8>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4629      	mov	r1, r5
 800ffce:	f7f0 fb13 	bl	80005f8 <__aeabi_dmul>
 800ffd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffd6:	9c00      	ldr	r4, [sp, #0]
 800ffd8:	3601      	adds	r6, #1
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f7f0 faa2 	bl	8000524 <__aeabi_i2d>
 800ffe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffe4:	f7f0 fb08 	bl	80005f8 <__aeabi_dmul>
 800ffe8:	4b76      	ldr	r3, [pc, #472]	@ (80101c4 <_dtoa_r+0x5cc>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	f7f0 f94e 	bl	800028c <__adddf3>
 800fff0:	4605      	mov	r5, r0
 800fff2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fff6:	2c00      	cmp	r4, #0
 800fff8:	f040 808d 	bne.w	8010116 <_dtoa_r+0x51e>
 800fffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010000:	4b71      	ldr	r3, [pc, #452]	@ (80101c8 <_dtoa_r+0x5d0>)
 8010002:	2200      	movs	r2, #0
 8010004:	f7f0 f940 	bl	8000288 <__aeabi_dsub>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010010:	462a      	mov	r2, r5
 8010012:	4633      	mov	r3, r6
 8010014:	f7f0 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 8010018:	2800      	cmp	r0, #0
 801001a:	f040 828b 	bne.w	8010534 <_dtoa_r+0x93c>
 801001e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010022:	462a      	mov	r2, r5
 8010024:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010028:	f7f0 fd58 	bl	8000adc <__aeabi_dcmplt>
 801002c:	2800      	cmp	r0, #0
 801002e:	f040 8128 	bne.w	8010282 <_dtoa_r+0x68a>
 8010032:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010036:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801003a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801003c:	2b00      	cmp	r3, #0
 801003e:	f2c0 815a 	blt.w	80102f6 <_dtoa_r+0x6fe>
 8010042:	2f0e      	cmp	r7, #14
 8010044:	f300 8157 	bgt.w	80102f6 <_dtoa_r+0x6fe>
 8010048:	4b5a      	ldr	r3, [pc, #360]	@ (80101b4 <_dtoa_r+0x5bc>)
 801004a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801004e:	ed93 7b00 	vldr	d7, [r3]
 8010052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010054:	2b00      	cmp	r3, #0
 8010056:	ed8d 7b00 	vstr	d7, [sp]
 801005a:	da03      	bge.n	8010064 <_dtoa_r+0x46c>
 801005c:	9b07      	ldr	r3, [sp, #28]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f340 8101 	ble.w	8010266 <_dtoa_r+0x66e>
 8010064:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010068:	4656      	mov	r6, sl
 801006a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801006e:	4620      	mov	r0, r4
 8010070:	4629      	mov	r1, r5
 8010072:	f7f0 fbeb 	bl	800084c <__aeabi_ddiv>
 8010076:	f7f0 fd6f 	bl	8000b58 <__aeabi_d2iz>
 801007a:	4680      	mov	r8, r0
 801007c:	f7f0 fa52 	bl	8000524 <__aeabi_i2d>
 8010080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010084:	f7f0 fab8 	bl	80005f8 <__aeabi_dmul>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010094:	f7f0 f8f8 	bl	8000288 <__aeabi_dsub>
 8010098:	f806 4b01 	strb.w	r4, [r6], #1
 801009c:	9d07      	ldr	r5, [sp, #28]
 801009e:	eba6 040a 	sub.w	r4, r6, sl
 80100a2:	42a5      	cmp	r5, r4
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	f040 8117 	bne.w	80102da <_dtoa_r+0x6e2>
 80100ac:	f7f0 f8ee 	bl	800028c <__adddf3>
 80100b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100b4:	4604      	mov	r4, r0
 80100b6:	460d      	mov	r5, r1
 80100b8:	f7f0 fd2e 	bl	8000b18 <__aeabi_dcmpgt>
 80100bc:	2800      	cmp	r0, #0
 80100be:	f040 80f9 	bne.w	80102b4 <_dtoa_r+0x6bc>
 80100c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80100ce:	b118      	cbz	r0, 80100d8 <_dtoa_r+0x4e0>
 80100d0:	f018 0f01 	tst.w	r8, #1
 80100d4:	f040 80ee 	bne.w	80102b4 <_dtoa_r+0x6bc>
 80100d8:	4649      	mov	r1, r9
 80100da:	4658      	mov	r0, fp
 80100dc:	f000 fbda 	bl	8010894 <_Bfree>
 80100e0:	2300      	movs	r3, #0
 80100e2:	7033      	strb	r3, [r6, #0]
 80100e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100e6:	3701      	adds	r7, #1
 80100e8:	601f      	str	r7, [r3, #0]
 80100ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 831d 	beq.w	801072c <_dtoa_r+0xb34>
 80100f2:	601e      	str	r6, [r3, #0]
 80100f4:	e31a      	b.n	801072c <_dtoa_r+0xb34>
 80100f6:	07e2      	lsls	r2, r4, #31
 80100f8:	d505      	bpl.n	8010106 <_dtoa_r+0x50e>
 80100fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100fe:	f7f0 fa7b 	bl	80005f8 <__aeabi_dmul>
 8010102:	3601      	adds	r6, #1
 8010104:	2301      	movs	r3, #1
 8010106:	1064      	asrs	r4, r4, #1
 8010108:	3508      	adds	r5, #8
 801010a:	e73f      	b.n	800ff8c <_dtoa_r+0x394>
 801010c:	2602      	movs	r6, #2
 801010e:	e742      	b.n	800ff96 <_dtoa_r+0x39e>
 8010110:	9c07      	ldr	r4, [sp, #28]
 8010112:	9704      	str	r7, [sp, #16]
 8010114:	e761      	b.n	800ffda <_dtoa_r+0x3e2>
 8010116:	4b27      	ldr	r3, [pc, #156]	@ (80101b4 <_dtoa_r+0x5bc>)
 8010118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801011a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801011e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010122:	4454      	add	r4, sl
 8010124:	2900      	cmp	r1, #0
 8010126:	d053      	beq.n	80101d0 <_dtoa_r+0x5d8>
 8010128:	4928      	ldr	r1, [pc, #160]	@ (80101cc <_dtoa_r+0x5d4>)
 801012a:	2000      	movs	r0, #0
 801012c:	f7f0 fb8e 	bl	800084c <__aeabi_ddiv>
 8010130:	4633      	mov	r3, r6
 8010132:	462a      	mov	r2, r5
 8010134:	f7f0 f8a8 	bl	8000288 <__aeabi_dsub>
 8010138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801013c:	4656      	mov	r6, sl
 801013e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010142:	f7f0 fd09 	bl	8000b58 <__aeabi_d2iz>
 8010146:	4605      	mov	r5, r0
 8010148:	f7f0 f9ec 	bl	8000524 <__aeabi_i2d>
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010154:	f7f0 f898 	bl	8000288 <__aeabi_dsub>
 8010158:	3530      	adds	r5, #48	@ 0x30
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010162:	f806 5b01 	strb.w	r5, [r6], #1
 8010166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801016a:	f7f0 fcb7 	bl	8000adc <__aeabi_dcmplt>
 801016e:	2800      	cmp	r0, #0
 8010170:	d171      	bne.n	8010256 <_dtoa_r+0x65e>
 8010172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010176:	4911      	ldr	r1, [pc, #68]	@ (80101bc <_dtoa_r+0x5c4>)
 8010178:	2000      	movs	r0, #0
 801017a:	f7f0 f885 	bl	8000288 <__aeabi_dsub>
 801017e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010182:	f7f0 fcab 	bl	8000adc <__aeabi_dcmplt>
 8010186:	2800      	cmp	r0, #0
 8010188:	f040 8095 	bne.w	80102b6 <_dtoa_r+0x6be>
 801018c:	42a6      	cmp	r6, r4
 801018e:	f43f af50 	beq.w	8010032 <_dtoa_r+0x43a>
 8010192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010196:	4b0a      	ldr	r3, [pc, #40]	@ (80101c0 <_dtoa_r+0x5c8>)
 8010198:	2200      	movs	r2, #0
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	4b08      	ldr	r3, [pc, #32]	@ (80101c0 <_dtoa_r+0x5c8>)
 80101a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101a4:	2200      	movs	r2, #0
 80101a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101aa:	f7f0 fa25 	bl	80005f8 <__aeabi_dmul>
 80101ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101b2:	e7c4      	b.n	801013e <_dtoa_r+0x546>
 80101b4:	08014a08 	.word	0x08014a08
 80101b8:	080149e0 	.word	0x080149e0
 80101bc:	3ff00000 	.word	0x3ff00000
 80101c0:	40240000 	.word	0x40240000
 80101c4:	401c0000 	.word	0x401c0000
 80101c8:	40140000 	.word	0x40140000
 80101cc:	3fe00000 	.word	0x3fe00000
 80101d0:	4631      	mov	r1, r6
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7f0 fa10 	bl	80005f8 <__aeabi_dmul>
 80101d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80101de:	4656      	mov	r6, sl
 80101e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101e4:	f7f0 fcb8 	bl	8000b58 <__aeabi_d2iz>
 80101e8:	4605      	mov	r5, r0
 80101ea:	f7f0 f99b 	bl	8000524 <__aeabi_i2d>
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101f6:	f7f0 f847 	bl	8000288 <__aeabi_dsub>
 80101fa:	3530      	adds	r5, #48	@ 0x30
 80101fc:	f806 5b01 	strb.w	r5, [r6], #1
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	42a6      	cmp	r6, r4
 8010206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801020a:	f04f 0200 	mov.w	r2, #0
 801020e:	d124      	bne.n	801025a <_dtoa_r+0x662>
 8010210:	4bac      	ldr	r3, [pc, #688]	@ (80104c4 <_dtoa_r+0x8cc>)
 8010212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010216:	f7f0 f839 	bl	800028c <__adddf3>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010222:	f7f0 fc79 	bl	8000b18 <__aeabi_dcmpgt>
 8010226:	2800      	cmp	r0, #0
 8010228:	d145      	bne.n	80102b6 <_dtoa_r+0x6be>
 801022a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801022e:	49a5      	ldr	r1, [pc, #660]	@ (80104c4 <_dtoa_r+0x8cc>)
 8010230:	2000      	movs	r0, #0
 8010232:	f7f0 f829 	bl	8000288 <__aeabi_dsub>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801023e:	f7f0 fc4d 	bl	8000adc <__aeabi_dcmplt>
 8010242:	2800      	cmp	r0, #0
 8010244:	f43f aef5 	beq.w	8010032 <_dtoa_r+0x43a>
 8010248:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801024a:	1e73      	subs	r3, r6, #1
 801024c:	9315      	str	r3, [sp, #84]	@ 0x54
 801024e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010252:	2b30      	cmp	r3, #48	@ 0x30
 8010254:	d0f8      	beq.n	8010248 <_dtoa_r+0x650>
 8010256:	9f04      	ldr	r7, [sp, #16]
 8010258:	e73e      	b.n	80100d8 <_dtoa_r+0x4e0>
 801025a:	4b9b      	ldr	r3, [pc, #620]	@ (80104c8 <_dtoa_r+0x8d0>)
 801025c:	f7f0 f9cc 	bl	80005f8 <__aeabi_dmul>
 8010260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010264:	e7bc      	b.n	80101e0 <_dtoa_r+0x5e8>
 8010266:	d10c      	bne.n	8010282 <_dtoa_r+0x68a>
 8010268:	4b98      	ldr	r3, [pc, #608]	@ (80104cc <_dtoa_r+0x8d4>)
 801026a:	2200      	movs	r2, #0
 801026c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010270:	f7f0 f9c2 	bl	80005f8 <__aeabi_dmul>
 8010274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010278:	f7f0 fc44 	bl	8000b04 <__aeabi_dcmpge>
 801027c:	2800      	cmp	r0, #0
 801027e:	f000 8157 	beq.w	8010530 <_dtoa_r+0x938>
 8010282:	2400      	movs	r4, #0
 8010284:	4625      	mov	r5, r4
 8010286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010288:	43db      	mvns	r3, r3
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	4656      	mov	r6, sl
 801028e:	2700      	movs	r7, #0
 8010290:	4621      	mov	r1, r4
 8010292:	4658      	mov	r0, fp
 8010294:	f000 fafe 	bl	8010894 <_Bfree>
 8010298:	2d00      	cmp	r5, #0
 801029a:	d0dc      	beq.n	8010256 <_dtoa_r+0x65e>
 801029c:	b12f      	cbz	r7, 80102aa <_dtoa_r+0x6b2>
 801029e:	42af      	cmp	r7, r5
 80102a0:	d003      	beq.n	80102aa <_dtoa_r+0x6b2>
 80102a2:	4639      	mov	r1, r7
 80102a4:	4658      	mov	r0, fp
 80102a6:	f000 faf5 	bl	8010894 <_Bfree>
 80102aa:	4629      	mov	r1, r5
 80102ac:	4658      	mov	r0, fp
 80102ae:	f000 faf1 	bl	8010894 <_Bfree>
 80102b2:	e7d0      	b.n	8010256 <_dtoa_r+0x65e>
 80102b4:	9704      	str	r7, [sp, #16]
 80102b6:	4633      	mov	r3, r6
 80102b8:	461e      	mov	r6, r3
 80102ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102be:	2a39      	cmp	r2, #57	@ 0x39
 80102c0:	d107      	bne.n	80102d2 <_dtoa_r+0x6da>
 80102c2:	459a      	cmp	sl, r3
 80102c4:	d1f8      	bne.n	80102b8 <_dtoa_r+0x6c0>
 80102c6:	9a04      	ldr	r2, [sp, #16]
 80102c8:	3201      	adds	r2, #1
 80102ca:	9204      	str	r2, [sp, #16]
 80102cc:	2230      	movs	r2, #48	@ 0x30
 80102ce:	f88a 2000 	strb.w	r2, [sl]
 80102d2:	781a      	ldrb	r2, [r3, #0]
 80102d4:	3201      	adds	r2, #1
 80102d6:	701a      	strb	r2, [r3, #0]
 80102d8:	e7bd      	b.n	8010256 <_dtoa_r+0x65e>
 80102da:	4b7b      	ldr	r3, [pc, #492]	@ (80104c8 <_dtoa_r+0x8d0>)
 80102dc:	2200      	movs	r2, #0
 80102de:	f7f0 f98b 	bl	80005f8 <__aeabi_dmul>
 80102e2:	2200      	movs	r2, #0
 80102e4:	2300      	movs	r3, #0
 80102e6:	4604      	mov	r4, r0
 80102e8:	460d      	mov	r5, r1
 80102ea:	f7f0 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	f43f aebb 	beq.w	801006a <_dtoa_r+0x472>
 80102f4:	e6f0      	b.n	80100d8 <_dtoa_r+0x4e0>
 80102f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80102f8:	2a00      	cmp	r2, #0
 80102fa:	f000 80db 	beq.w	80104b4 <_dtoa_r+0x8bc>
 80102fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010300:	2a01      	cmp	r2, #1
 8010302:	f300 80bf 	bgt.w	8010484 <_dtoa_r+0x88c>
 8010306:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010308:	2a00      	cmp	r2, #0
 801030a:	f000 80b7 	beq.w	801047c <_dtoa_r+0x884>
 801030e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010312:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010314:	4646      	mov	r6, r8
 8010316:	9a08      	ldr	r2, [sp, #32]
 8010318:	2101      	movs	r1, #1
 801031a:	441a      	add	r2, r3
 801031c:	4658      	mov	r0, fp
 801031e:	4498      	add	r8, r3
 8010320:	9208      	str	r2, [sp, #32]
 8010322:	f000 fbb5 	bl	8010a90 <__i2b>
 8010326:	4605      	mov	r5, r0
 8010328:	b15e      	cbz	r6, 8010342 <_dtoa_r+0x74a>
 801032a:	9b08      	ldr	r3, [sp, #32]
 801032c:	2b00      	cmp	r3, #0
 801032e:	dd08      	ble.n	8010342 <_dtoa_r+0x74a>
 8010330:	42b3      	cmp	r3, r6
 8010332:	9a08      	ldr	r2, [sp, #32]
 8010334:	bfa8      	it	ge
 8010336:	4633      	movge	r3, r6
 8010338:	eba8 0803 	sub.w	r8, r8, r3
 801033c:	1af6      	subs	r6, r6, r3
 801033e:	1ad3      	subs	r3, r2, r3
 8010340:	9308      	str	r3, [sp, #32]
 8010342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010344:	b1f3      	cbz	r3, 8010384 <_dtoa_r+0x78c>
 8010346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 80b7 	beq.w	80104bc <_dtoa_r+0x8c4>
 801034e:	b18c      	cbz	r4, 8010374 <_dtoa_r+0x77c>
 8010350:	4629      	mov	r1, r5
 8010352:	4622      	mov	r2, r4
 8010354:	4658      	mov	r0, fp
 8010356:	f000 fc5b 	bl	8010c10 <__pow5mult>
 801035a:	464a      	mov	r2, r9
 801035c:	4601      	mov	r1, r0
 801035e:	4605      	mov	r5, r0
 8010360:	4658      	mov	r0, fp
 8010362:	f000 fbab 	bl	8010abc <__multiply>
 8010366:	4649      	mov	r1, r9
 8010368:	9004      	str	r0, [sp, #16]
 801036a:	4658      	mov	r0, fp
 801036c:	f000 fa92 	bl	8010894 <_Bfree>
 8010370:	9b04      	ldr	r3, [sp, #16]
 8010372:	4699      	mov	r9, r3
 8010374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010376:	1b1a      	subs	r2, r3, r4
 8010378:	d004      	beq.n	8010384 <_dtoa_r+0x78c>
 801037a:	4649      	mov	r1, r9
 801037c:	4658      	mov	r0, fp
 801037e:	f000 fc47 	bl	8010c10 <__pow5mult>
 8010382:	4681      	mov	r9, r0
 8010384:	2101      	movs	r1, #1
 8010386:	4658      	mov	r0, fp
 8010388:	f000 fb82 	bl	8010a90 <__i2b>
 801038c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801038e:	4604      	mov	r4, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 81cf 	beq.w	8010734 <_dtoa_r+0xb3c>
 8010396:	461a      	mov	r2, r3
 8010398:	4601      	mov	r1, r0
 801039a:	4658      	mov	r0, fp
 801039c:	f000 fc38 	bl	8010c10 <__pow5mult>
 80103a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	4604      	mov	r4, r0
 80103a6:	f300 8095 	bgt.w	80104d4 <_dtoa_r+0x8dc>
 80103aa:	9b02      	ldr	r3, [sp, #8]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f040 8087 	bne.w	80104c0 <_dtoa_r+0x8c8>
 80103b2:	9b03      	ldr	r3, [sp, #12]
 80103b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f040 8089 	bne.w	80104d0 <_dtoa_r+0x8d8>
 80103be:	9b03      	ldr	r3, [sp, #12]
 80103c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80103c4:	0d1b      	lsrs	r3, r3, #20
 80103c6:	051b      	lsls	r3, r3, #20
 80103c8:	b12b      	cbz	r3, 80103d6 <_dtoa_r+0x7de>
 80103ca:	9b08      	ldr	r3, [sp, #32]
 80103cc:	3301      	adds	r3, #1
 80103ce:	9308      	str	r3, [sp, #32]
 80103d0:	f108 0801 	add.w	r8, r8, #1
 80103d4:	2301      	movs	r3, #1
 80103d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 81b0 	beq.w	8010740 <_dtoa_r+0xb48>
 80103e0:	6923      	ldr	r3, [r4, #16]
 80103e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103e6:	6918      	ldr	r0, [r3, #16]
 80103e8:	f000 fb06 	bl	80109f8 <__hi0bits>
 80103ec:	f1c0 0020 	rsb	r0, r0, #32
 80103f0:	9b08      	ldr	r3, [sp, #32]
 80103f2:	4418      	add	r0, r3
 80103f4:	f010 001f 	ands.w	r0, r0, #31
 80103f8:	d077      	beq.n	80104ea <_dtoa_r+0x8f2>
 80103fa:	f1c0 0320 	rsb	r3, r0, #32
 80103fe:	2b04      	cmp	r3, #4
 8010400:	dd6b      	ble.n	80104da <_dtoa_r+0x8e2>
 8010402:	9b08      	ldr	r3, [sp, #32]
 8010404:	f1c0 001c 	rsb	r0, r0, #28
 8010408:	4403      	add	r3, r0
 801040a:	4480      	add	r8, r0
 801040c:	4406      	add	r6, r0
 801040e:	9308      	str	r3, [sp, #32]
 8010410:	f1b8 0f00 	cmp.w	r8, #0
 8010414:	dd05      	ble.n	8010422 <_dtoa_r+0x82a>
 8010416:	4649      	mov	r1, r9
 8010418:	4642      	mov	r2, r8
 801041a:	4658      	mov	r0, fp
 801041c:	f000 fc52 	bl	8010cc4 <__lshift>
 8010420:	4681      	mov	r9, r0
 8010422:	9b08      	ldr	r3, [sp, #32]
 8010424:	2b00      	cmp	r3, #0
 8010426:	dd05      	ble.n	8010434 <_dtoa_r+0x83c>
 8010428:	4621      	mov	r1, r4
 801042a:	461a      	mov	r2, r3
 801042c:	4658      	mov	r0, fp
 801042e:	f000 fc49 	bl	8010cc4 <__lshift>
 8010432:	4604      	mov	r4, r0
 8010434:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010436:	2b00      	cmp	r3, #0
 8010438:	d059      	beq.n	80104ee <_dtoa_r+0x8f6>
 801043a:	4621      	mov	r1, r4
 801043c:	4648      	mov	r0, r9
 801043e:	f000 fcad 	bl	8010d9c <__mcmp>
 8010442:	2800      	cmp	r0, #0
 8010444:	da53      	bge.n	80104ee <_dtoa_r+0x8f6>
 8010446:	1e7b      	subs	r3, r7, #1
 8010448:	9304      	str	r3, [sp, #16]
 801044a:	4649      	mov	r1, r9
 801044c:	2300      	movs	r3, #0
 801044e:	220a      	movs	r2, #10
 8010450:	4658      	mov	r0, fp
 8010452:	f000 fa41 	bl	80108d8 <__multadd>
 8010456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010458:	4681      	mov	r9, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 8172 	beq.w	8010744 <_dtoa_r+0xb4c>
 8010460:	2300      	movs	r3, #0
 8010462:	4629      	mov	r1, r5
 8010464:	220a      	movs	r2, #10
 8010466:	4658      	mov	r0, fp
 8010468:	f000 fa36 	bl	80108d8 <__multadd>
 801046c:	9b00      	ldr	r3, [sp, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	4605      	mov	r5, r0
 8010472:	dc67      	bgt.n	8010544 <_dtoa_r+0x94c>
 8010474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010476:	2b02      	cmp	r3, #2
 8010478:	dc41      	bgt.n	80104fe <_dtoa_r+0x906>
 801047a:	e063      	b.n	8010544 <_dtoa_r+0x94c>
 801047c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801047e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010482:	e746      	b.n	8010312 <_dtoa_r+0x71a>
 8010484:	9b07      	ldr	r3, [sp, #28]
 8010486:	1e5c      	subs	r4, r3, #1
 8010488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801048a:	42a3      	cmp	r3, r4
 801048c:	bfbf      	itttt	lt
 801048e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010490:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010492:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010494:	1ae3      	sublt	r3, r4, r3
 8010496:	bfb4      	ite	lt
 8010498:	18d2      	addlt	r2, r2, r3
 801049a:	1b1c      	subge	r4, r3, r4
 801049c:	9b07      	ldr	r3, [sp, #28]
 801049e:	bfbc      	itt	lt
 80104a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80104a2:	2400      	movlt	r4, #0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	bfb5      	itete	lt
 80104a8:	eba8 0603 	sublt.w	r6, r8, r3
 80104ac:	9b07      	ldrge	r3, [sp, #28]
 80104ae:	2300      	movlt	r3, #0
 80104b0:	4646      	movge	r6, r8
 80104b2:	e730      	b.n	8010316 <_dtoa_r+0x71e>
 80104b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80104b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80104b8:	4646      	mov	r6, r8
 80104ba:	e735      	b.n	8010328 <_dtoa_r+0x730>
 80104bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104be:	e75c      	b.n	801037a <_dtoa_r+0x782>
 80104c0:	2300      	movs	r3, #0
 80104c2:	e788      	b.n	80103d6 <_dtoa_r+0x7de>
 80104c4:	3fe00000 	.word	0x3fe00000
 80104c8:	40240000 	.word	0x40240000
 80104cc:	40140000 	.word	0x40140000
 80104d0:	9b02      	ldr	r3, [sp, #8]
 80104d2:	e780      	b.n	80103d6 <_dtoa_r+0x7de>
 80104d4:	2300      	movs	r3, #0
 80104d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80104d8:	e782      	b.n	80103e0 <_dtoa_r+0x7e8>
 80104da:	d099      	beq.n	8010410 <_dtoa_r+0x818>
 80104dc:	9a08      	ldr	r2, [sp, #32]
 80104de:	331c      	adds	r3, #28
 80104e0:	441a      	add	r2, r3
 80104e2:	4498      	add	r8, r3
 80104e4:	441e      	add	r6, r3
 80104e6:	9208      	str	r2, [sp, #32]
 80104e8:	e792      	b.n	8010410 <_dtoa_r+0x818>
 80104ea:	4603      	mov	r3, r0
 80104ec:	e7f6      	b.n	80104dc <_dtoa_r+0x8e4>
 80104ee:	9b07      	ldr	r3, [sp, #28]
 80104f0:	9704      	str	r7, [sp, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	dc20      	bgt.n	8010538 <_dtoa_r+0x940>
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	dd1e      	ble.n	801053c <_dtoa_r+0x944>
 80104fe:	9b00      	ldr	r3, [sp, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f47f aec0 	bne.w	8010286 <_dtoa_r+0x68e>
 8010506:	4621      	mov	r1, r4
 8010508:	2205      	movs	r2, #5
 801050a:	4658      	mov	r0, fp
 801050c:	f000 f9e4 	bl	80108d8 <__multadd>
 8010510:	4601      	mov	r1, r0
 8010512:	4604      	mov	r4, r0
 8010514:	4648      	mov	r0, r9
 8010516:	f000 fc41 	bl	8010d9c <__mcmp>
 801051a:	2800      	cmp	r0, #0
 801051c:	f77f aeb3 	ble.w	8010286 <_dtoa_r+0x68e>
 8010520:	4656      	mov	r6, sl
 8010522:	2331      	movs	r3, #49	@ 0x31
 8010524:	f806 3b01 	strb.w	r3, [r6], #1
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	3301      	adds	r3, #1
 801052c:	9304      	str	r3, [sp, #16]
 801052e:	e6ae      	b.n	801028e <_dtoa_r+0x696>
 8010530:	9c07      	ldr	r4, [sp, #28]
 8010532:	9704      	str	r7, [sp, #16]
 8010534:	4625      	mov	r5, r4
 8010536:	e7f3      	b.n	8010520 <_dtoa_r+0x928>
 8010538:	9b07      	ldr	r3, [sp, #28]
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 8104 	beq.w	801074c <_dtoa_r+0xb54>
 8010544:	2e00      	cmp	r6, #0
 8010546:	dd05      	ble.n	8010554 <_dtoa_r+0x95c>
 8010548:	4629      	mov	r1, r5
 801054a:	4632      	mov	r2, r6
 801054c:	4658      	mov	r0, fp
 801054e:	f000 fbb9 	bl	8010cc4 <__lshift>
 8010552:	4605      	mov	r5, r0
 8010554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010556:	2b00      	cmp	r3, #0
 8010558:	d05a      	beq.n	8010610 <_dtoa_r+0xa18>
 801055a:	6869      	ldr	r1, [r5, #4]
 801055c:	4658      	mov	r0, fp
 801055e:	f000 f959 	bl	8010814 <_Balloc>
 8010562:	4606      	mov	r6, r0
 8010564:	b928      	cbnz	r0, 8010572 <_dtoa_r+0x97a>
 8010566:	4b84      	ldr	r3, [pc, #528]	@ (8010778 <_dtoa_r+0xb80>)
 8010568:	4602      	mov	r2, r0
 801056a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801056e:	f7ff bb5a 	b.w	800fc26 <_dtoa_r+0x2e>
 8010572:	692a      	ldr	r2, [r5, #16]
 8010574:	3202      	adds	r2, #2
 8010576:	0092      	lsls	r2, r2, #2
 8010578:	f105 010c 	add.w	r1, r5, #12
 801057c:	300c      	adds	r0, #12
 801057e:	f002 f9c2 	bl	8012906 <memcpy>
 8010582:	2201      	movs	r2, #1
 8010584:	4631      	mov	r1, r6
 8010586:	4658      	mov	r0, fp
 8010588:	f000 fb9c 	bl	8010cc4 <__lshift>
 801058c:	f10a 0301 	add.w	r3, sl, #1
 8010590:	9307      	str	r3, [sp, #28]
 8010592:	9b00      	ldr	r3, [sp, #0]
 8010594:	4453      	add	r3, sl
 8010596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010598:	9b02      	ldr	r3, [sp, #8]
 801059a:	f003 0301 	and.w	r3, r3, #1
 801059e:	462f      	mov	r7, r5
 80105a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80105a2:	4605      	mov	r5, r0
 80105a4:	9b07      	ldr	r3, [sp, #28]
 80105a6:	4621      	mov	r1, r4
 80105a8:	3b01      	subs	r3, #1
 80105aa:	4648      	mov	r0, r9
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	f7ff fa99 	bl	800fae4 <quorem>
 80105b2:	4639      	mov	r1, r7
 80105b4:	9002      	str	r0, [sp, #8]
 80105b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80105ba:	4648      	mov	r0, r9
 80105bc:	f000 fbee 	bl	8010d9c <__mcmp>
 80105c0:	462a      	mov	r2, r5
 80105c2:	9008      	str	r0, [sp, #32]
 80105c4:	4621      	mov	r1, r4
 80105c6:	4658      	mov	r0, fp
 80105c8:	f000 fc04 	bl	8010dd4 <__mdiff>
 80105cc:	68c2      	ldr	r2, [r0, #12]
 80105ce:	4606      	mov	r6, r0
 80105d0:	bb02      	cbnz	r2, 8010614 <_dtoa_r+0xa1c>
 80105d2:	4601      	mov	r1, r0
 80105d4:	4648      	mov	r0, r9
 80105d6:	f000 fbe1 	bl	8010d9c <__mcmp>
 80105da:	4602      	mov	r2, r0
 80105dc:	4631      	mov	r1, r6
 80105de:	4658      	mov	r0, fp
 80105e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80105e2:	f000 f957 	bl	8010894 <_Bfree>
 80105e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105ea:	9e07      	ldr	r6, [sp, #28]
 80105ec:	ea43 0102 	orr.w	r1, r3, r2
 80105f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105f2:	4319      	orrs	r1, r3
 80105f4:	d110      	bne.n	8010618 <_dtoa_r+0xa20>
 80105f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80105fa:	d029      	beq.n	8010650 <_dtoa_r+0xa58>
 80105fc:	9b08      	ldr	r3, [sp, #32]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	dd02      	ble.n	8010608 <_dtoa_r+0xa10>
 8010602:	9b02      	ldr	r3, [sp, #8]
 8010604:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010608:	9b00      	ldr	r3, [sp, #0]
 801060a:	f883 8000 	strb.w	r8, [r3]
 801060e:	e63f      	b.n	8010290 <_dtoa_r+0x698>
 8010610:	4628      	mov	r0, r5
 8010612:	e7bb      	b.n	801058c <_dtoa_r+0x994>
 8010614:	2201      	movs	r2, #1
 8010616:	e7e1      	b.n	80105dc <_dtoa_r+0x9e4>
 8010618:	9b08      	ldr	r3, [sp, #32]
 801061a:	2b00      	cmp	r3, #0
 801061c:	db04      	blt.n	8010628 <_dtoa_r+0xa30>
 801061e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010620:	430b      	orrs	r3, r1
 8010622:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010624:	430b      	orrs	r3, r1
 8010626:	d120      	bne.n	801066a <_dtoa_r+0xa72>
 8010628:	2a00      	cmp	r2, #0
 801062a:	dded      	ble.n	8010608 <_dtoa_r+0xa10>
 801062c:	4649      	mov	r1, r9
 801062e:	2201      	movs	r2, #1
 8010630:	4658      	mov	r0, fp
 8010632:	f000 fb47 	bl	8010cc4 <__lshift>
 8010636:	4621      	mov	r1, r4
 8010638:	4681      	mov	r9, r0
 801063a:	f000 fbaf 	bl	8010d9c <__mcmp>
 801063e:	2800      	cmp	r0, #0
 8010640:	dc03      	bgt.n	801064a <_dtoa_r+0xa52>
 8010642:	d1e1      	bne.n	8010608 <_dtoa_r+0xa10>
 8010644:	f018 0f01 	tst.w	r8, #1
 8010648:	d0de      	beq.n	8010608 <_dtoa_r+0xa10>
 801064a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801064e:	d1d8      	bne.n	8010602 <_dtoa_r+0xa0a>
 8010650:	9a00      	ldr	r2, [sp, #0]
 8010652:	2339      	movs	r3, #57	@ 0x39
 8010654:	7013      	strb	r3, [r2, #0]
 8010656:	4633      	mov	r3, r6
 8010658:	461e      	mov	r6, r3
 801065a:	3b01      	subs	r3, #1
 801065c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010660:	2a39      	cmp	r2, #57	@ 0x39
 8010662:	d052      	beq.n	801070a <_dtoa_r+0xb12>
 8010664:	3201      	adds	r2, #1
 8010666:	701a      	strb	r2, [r3, #0]
 8010668:	e612      	b.n	8010290 <_dtoa_r+0x698>
 801066a:	2a00      	cmp	r2, #0
 801066c:	dd07      	ble.n	801067e <_dtoa_r+0xa86>
 801066e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010672:	d0ed      	beq.n	8010650 <_dtoa_r+0xa58>
 8010674:	9a00      	ldr	r2, [sp, #0]
 8010676:	f108 0301 	add.w	r3, r8, #1
 801067a:	7013      	strb	r3, [r2, #0]
 801067c:	e608      	b.n	8010290 <_dtoa_r+0x698>
 801067e:	9b07      	ldr	r3, [sp, #28]
 8010680:	9a07      	ldr	r2, [sp, #28]
 8010682:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010688:	4293      	cmp	r3, r2
 801068a:	d028      	beq.n	80106de <_dtoa_r+0xae6>
 801068c:	4649      	mov	r1, r9
 801068e:	2300      	movs	r3, #0
 8010690:	220a      	movs	r2, #10
 8010692:	4658      	mov	r0, fp
 8010694:	f000 f920 	bl	80108d8 <__multadd>
 8010698:	42af      	cmp	r7, r5
 801069a:	4681      	mov	r9, r0
 801069c:	f04f 0300 	mov.w	r3, #0
 80106a0:	f04f 020a 	mov.w	r2, #10
 80106a4:	4639      	mov	r1, r7
 80106a6:	4658      	mov	r0, fp
 80106a8:	d107      	bne.n	80106ba <_dtoa_r+0xac2>
 80106aa:	f000 f915 	bl	80108d8 <__multadd>
 80106ae:	4607      	mov	r7, r0
 80106b0:	4605      	mov	r5, r0
 80106b2:	9b07      	ldr	r3, [sp, #28]
 80106b4:	3301      	adds	r3, #1
 80106b6:	9307      	str	r3, [sp, #28]
 80106b8:	e774      	b.n	80105a4 <_dtoa_r+0x9ac>
 80106ba:	f000 f90d 	bl	80108d8 <__multadd>
 80106be:	4629      	mov	r1, r5
 80106c0:	4607      	mov	r7, r0
 80106c2:	2300      	movs	r3, #0
 80106c4:	220a      	movs	r2, #10
 80106c6:	4658      	mov	r0, fp
 80106c8:	f000 f906 	bl	80108d8 <__multadd>
 80106cc:	4605      	mov	r5, r0
 80106ce:	e7f0      	b.n	80106b2 <_dtoa_r+0xaba>
 80106d0:	9b00      	ldr	r3, [sp, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bfcc      	ite	gt
 80106d6:	461e      	movgt	r6, r3
 80106d8:	2601      	movle	r6, #1
 80106da:	4456      	add	r6, sl
 80106dc:	2700      	movs	r7, #0
 80106de:	4649      	mov	r1, r9
 80106e0:	2201      	movs	r2, #1
 80106e2:	4658      	mov	r0, fp
 80106e4:	f000 faee 	bl	8010cc4 <__lshift>
 80106e8:	4621      	mov	r1, r4
 80106ea:	4681      	mov	r9, r0
 80106ec:	f000 fb56 	bl	8010d9c <__mcmp>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	dcb0      	bgt.n	8010656 <_dtoa_r+0xa5e>
 80106f4:	d102      	bne.n	80106fc <_dtoa_r+0xb04>
 80106f6:	f018 0f01 	tst.w	r8, #1
 80106fa:	d1ac      	bne.n	8010656 <_dtoa_r+0xa5e>
 80106fc:	4633      	mov	r3, r6
 80106fe:	461e      	mov	r6, r3
 8010700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010704:	2a30      	cmp	r2, #48	@ 0x30
 8010706:	d0fa      	beq.n	80106fe <_dtoa_r+0xb06>
 8010708:	e5c2      	b.n	8010290 <_dtoa_r+0x698>
 801070a:	459a      	cmp	sl, r3
 801070c:	d1a4      	bne.n	8010658 <_dtoa_r+0xa60>
 801070e:	9b04      	ldr	r3, [sp, #16]
 8010710:	3301      	adds	r3, #1
 8010712:	9304      	str	r3, [sp, #16]
 8010714:	2331      	movs	r3, #49	@ 0x31
 8010716:	f88a 3000 	strb.w	r3, [sl]
 801071a:	e5b9      	b.n	8010290 <_dtoa_r+0x698>
 801071c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801071e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801077c <_dtoa_r+0xb84>
 8010722:	b11b      	cbz	r3, 801072c <_dtoa_r+0xb34>
 8010724:	f10a 0308 	add.w	r3, sl, #8
 8010728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	4650      	mov	r0, sl
 801072e:	b019      	add	sp, #100	@ 0x64
 8010730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010736:	2b01      	cmp	r3, #1
 8010738:	f77f ae37 	ble.w	80103aa <_dtoa_r+0x7b2>
 801073c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801073e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010740:	2001      	movs	r0, #1
 8010742:	e655      	b.n	80103f0 <_dtoa_r+0x7f8>
 8010744:	9b00      	ldr	r3, [sp, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	f77f aed6 	ble.w	80104f8 <_dtoa_r+0x900>
 801074c:	4656      	mov	r6, sl
 801074e:	4621      	mov	r1, r4
 8010750:	4648      	mov	r0, r9
 8010752:	f7ff f9c7 	bl	800fae4 <quorem>
 8010756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801075a:	f806 8b01 	strb.w	r8, [r6], #1
 801075e:	9b00      	ldr	r3, [sp, #0]
 8010760:	eba6 020a 	sub.w	r2, r6, sl
 8010764:	4293      	cmp	r3, r2
 8010766:	ddb3      	ble.n	80106d0 <_dtoa_r+0xad8>
 8010768:	4649      	mov	r1, r9
 801076a:	2300      	movs	r3, #0
 801076c:	220a      	movs	r2, #10
 801076e:	4658      	mov	r0, fp
 8010770:	f000 f8b2 	bl	80108d8 <__multadd>
 8010774:	4681      	mov	r9, r0
 8010776:	e7ea      	b.n	801074e <_dtoa_r+0xb56>
 8010778:	0801496a 	.word	0x0801496a
 801077c:	08014905 	.word	0x08014905

08010780 <_free_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	4605      	mov	r5, r0
 8010784:	2900      	cmp	r1, #0
 8010786:	d041      	beq.n	801080c <_free_r+0x8c>
 8010788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801078c:	1f0c      	subs	r4, r1, #4
 801078e:	2b00      	cmp	r3, #0
 8010790:	bfb8      	it	lt
 8010792:	18e4      	addlt	r4, r4, r3
 8010794:	f7fd fff4 	bl	800e780 <__malloc_lock>
 8010798:	4a1d      	ldr	r2, [pc, #116]	@ (8010810 <_free_r+0x90>)
 801079a:	6813      	ldr	r3, [r2, #0]
 801079c:	b933      	cbnz	r3, 80107ac <_free_r+0x2c>
 801079e:	6063      	str	r3, [r4, #4]
 80107a0:	6014      	str	r4, [r2, #0]
 80107a2:	4628      	mov	r0, r5
 80107a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107a8:	f7fd bff0 	b.w	800e78c <__malloc_unlock>
 80107ac:	42a3      	cmp	r3, r4
 80107ae:	d908      	bls.n	80107c2 <_free_r+0x42>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	1821      	adds	r1, r4, r0
 80107b4:	428b      	cmp	r3, r1
 80107b6:	bf01      	itttt	eq
 80107b8:	6819      	ldreq	r1, [r3, #0]
 80107ba:	685b      	ldreq	r3, [r3, #4]
 80107bc:	1809      	addeq	r1, r1, r0
 80107be:	6021      	streq	r1, [r4, #0]
 80107c0:	e7ed      	b.n	801079e <_free_r+0x1e>
 80107c2:	461a      	mov	r2, r3
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	b10b      	cbz	r3, 80107cc <_free_r+0x4c>
 80107c8:	42a3      	cmp	r3, r4
 80107ca:	d9fa      	bls.n	80107c2 <_free_r+0x42>
 80107cc:	6811      	ldr	r1, [r2, #0]
 80107ce:	1850      	adds	r0, r2, r1
 80107d0:	42a0      	cmp	r0, r4
 80107d2:	d10b      	bne.n	80107ec <_free_r+0x6c>
 80107d4:	6820      	ldr	r0, [r4, #0]
 80107d6:	4401      	add	r1, r0
 80107d8:	1850      	adds	r0, r2, r1
 80107da:	4283      	cmp	r3, r0
 80107dc:	6011      	str	r1, [r2, #0]
 80107de:	d1e0      	bne.n	80107a2 <_free_r+0x22>
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	6053      	str	r3, [r2, #4]
 80107e6:	4408      	add	r0, r1
 80107e8:	6010      	str	r0, [r2, #0]
 80107ea:	e7da      	b.n	80107a2 <_free_r+0x22>
 80107ec:	d902      	bls.n	80107f4 <_free_r+0x74>
 80107ee:	230c      	movs	r3, #12
 80107f0:	602b      	str	r3, [r5, #0]
 80107f2:	e7d6      	b.n	80107a2 <_free_r+0x22>
 80107f4:	6820      	ldr	r0, [r4, #0]
 80107f6:	1821      	adds	r1, r4, r0
 80107f8:	428b      	cmp	r3, r1
 80107fa:	bf04      	itt	eq
 80107fc:	6819      	ldreq	r1, [r3, #0]
 80107fe:	685b      	ldreq	r3, [r3, #4]
 8010800:	6063      	str	r3, [r4, #4]
 8010802:	bf04      	itt	eq
 8010804:	1809      	addeq	r1, r1, r0
 8010806:	6021      	streq	r1, [r4, #0]
 8010808:	6054      	str	r4, [r2, #4]
 801080a:	e7ca      	b.n	80107a2 <_free_r+0x22>
 801080c:	bd38      	pop	{r3, r4, r5, pc}
 801080e:	bf00      	nop
 8010810:	2000582c 	.word	0x2000582c

08010814 <_Balloc>:
 8010814:	b570      	push	{r4, r5, r6, lr}
 8010816:	69c6      	ldr	r6, [r0, #28]
 8010818:	4604      	mov	r4, r0
 801081a:	460d      	mov	r5, r1
 801081c:	b976      	cbnz	r6, 801083c <_Balloc+0x28>
 801081e:	2010      	movs	r0, #16
 8010820:	f7fd fefc 	bl	800e61c <malloc>
 8010824:	4602      	mov	r2, r0
 8010826:	61e0      	str	r0, [r4, #28]
 8010828:	b920      	cbnz	r0, 8010834 <_Balloc+0x20>
 801082a:	4b18      	ldr	r3, [pc, #96]	@ (801088c <_Balloc+0x78>)
 801082c:	4818      	ldr	r0, [pc, #96]	@ (8010890 <_Balloc+0x7c>)
 801082e:	216b      	movs	r1, #107	@ 0x6b
 8010830:	f7ff f93a 	bl	800faa8 <__assert_func>
 8010834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010838:	6006      	str	r6, [r0, #0]
 801083a:	60c6      	str	r6, [r0, #12]
 801083c:	69e6      	ldr	r6, [r4, #28]
 801083e:	68f3      	ldr	r3, [r6, #12]
 8010840:	b183      	cbz	r3, 8010864 <_Balloc+0x50>
 8010842:	69e3      	ldr	r3, [r4, #28]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801084a:	b9b8      	cbnz	r0, 801087c <_Balloc+0x68>
 801084c:	2101      	movs	r1, #1
 801084e:	fa01 f605 	lsl.w	r6, r1, r5
 8010852:	1d72      	adds	r2, r6, #5
 8010854:	0092      	lsls	r2, r2, #2
 8010856:	4620      	mov	r0, r4
 8010858:	f002 f875 	bl	8012946 <_calloc_r>
 801085c:	b160      	cbz	r0, 8010878 <_Balloc+0x64>
 801085e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010862:	e00e      	b.n	8010882 <_Balloc+0x6e>
 8010864:	2221      	movs	r2, #33	@ 0x21
 8010866:	2104      	movs	r1, #4
 8010868:	4620      	mov	r0, r4
 801086a:	f002 f86c 	bl	8012946 <_calloc_r>
 801086e:	69e3      	ldr	r3, [r4, #28]
 8010870:	60f0      	str	r0, [r6, #12]
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1e4      	bne.n	8010842 <_Balloc+0x2e>
 8010878:	2000      	movs	r0, #0
 801087a:	bd70      	pop	{r4, r5, r6, pc}
 801087c:	6802      	ldr	r2, [r0, #0]
 801087e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010882:	2300      	movs	r3, #0
 8010884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010888:	e7f7      	b.n	801087a <_Balloc+0x66>
 801088a:	bf00      	nop
 801088c:	08014858 	.word	0x08014858
 8010890:	0801497b 	.word	0x0801497b

08010894 <_Bfree>:
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	69c6      	ldr	r6, [r0, #28]
 8010898:	4605      	mov	r5, r0
 801089a:	460c      	mov	r4, r1
 801089c:	b976      	cbnz	r6, 80108bc <_Bfree+0x28>
 801089e:	2010      	movs	r0, #16
 80108a0:	f7fd febc 	bl	800e61c <malloc>
 80108a4:	4602      	mov	r2, r0
 80108a6:	61e8      	str	r0, [r5, #28]
 80108a8:	b920      	cbnz	r0, 80108b4 <_Bfree+0x20>
 80108aa:	4b09      	ldr	r3, [pc, #36]	@ (80108d0 <_Bfree+0x3c>)
 80108ac:	4809      	ldr	r0, [pc, #36]	@ (80108d4 <_Bfree+0x40>)
 80108ae:	218f      	movs	r1, #143	@ 0x8f
 80108b0:	f7ff f8fa 	bl	800faa8 <__assert_func>
 80108b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108b8:	6006      	str	r6, [r0, #0]
 80108ba:	60c6      	str	r6, [r0, #12]
 80108bc:	b13c      	cbz	r4, 80108ce <_Bfree+0x3a>
 80108be:	69eb      	ldr	r3, [r5, #28]
 80108c0:	6862      	ldr	r2, [r4, #4]
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108c8:	6021      	str	r1, [r4, #0]
 80108ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108ce:	bd70      	pop	{r4, r5, r6, pc}
 80108d0:	08014858 	.word	0x08014858
 80108d4:	0801497b 	.word	0x0801497b

080108d8 <__multadd>:
 80108d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108dc:	690d      	ldr	r5, [r1, #16]
 80108de:	4607      	mov	r7, r0
 80108e0:	460c      	mov	r4, r1
 80108e2:	461e      	mov	r6, r3
 80108e4:	f101 0c14 	add.w	ip, r1, #20
 80108e8:	2000      	movs	r0, #0
 80108ea:	f8dc 3000 	ldr.w	r3, [ip]
 80108ee:	b299      	uxth	r1, r3
 80108f0:	fb02 6101 	mla	r1, r2, r1, r6
 80108f4:	0c1e      	lsrs	r6, r3, #16
 80108f6:	0c0b      	lsrs	r3, r1, #16
 80108f8:	fb02 3306 	mla	r3, r2, r6, r3
 80108fc:	b289      	uxth	r1, r1
 80108fe:	3001      	adds	r0, #1
 8010900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010904:	4285      	cmp	r5, r0
 8010906:	f84c 1b04 	str.w	r1, [ip], #4
 801090a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801090e:	dcec      	bgt.n	80108ea <__multadd+0x12>
 8010910:	b30e      	cbz	r6, 8010956 <__multadd+0x7e>
 8010912:	68a3      	ldr	r3, [r4, #8]
 8010914:	42ab      	cmp	r3, r5
 8010916:	dc19      	bgt.n	801094c <__multadd+0x74>
 8010918:	6861      	ldr	r1, [r4, #4]
 801091a:	4638      	mov	r0, r7
 801091c:	3101      	adds	r1, #1
 801091e:	f7ff ff79 	bl	8010814 <_Balloc>
 8010922:	4680      	mov	r8, r0
 8010924:	b928      	cbnz	r0, 8010932 <__multadd+0x5a>
 8010926:	4602      	mov	r2, r0
 8010928:	4b0c      	ldr	r3, [pc, #48]	@ (801095c <__multadd+0x84>)
 801092a:	480d      	ldr	r0, [pc, #52]	@ (8010960 <__multadd+0x88>)
 801092c:	21ba      	movs	r1, #186	@ 0xba
 801092e:	f7ff f8bb 	bl	800faa8 <__assert_func>
 8010932:	6922      	ldr	r2, [r4, #16]
 8010934:	3202      	adds	r2, #2
 8010936:	f104 010c 	add.w	r1, r4, #12
 801093a:	0092      	lsls	r2, r2, #2
 801093c:	300c      	adds	r0, #12
 801093e:	f001 ffe2 	bl	8012906 <memcpy>
 8010942:	4621      	mov	r1, r4
 8010944:	4638      	mov	r0, r7
 8010946:	f7ff ffa5 	bl	8010894 <_Bfree>
 801094a:	4644      	mov	r4, r8
 801094c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010950:	3501      	adds	r5, #1
 8010952:	615e      	str	r6, [r3, #20]
 8010954:	6125      	str	r5, [r4, #16]
 8010956:	4620      	mov	r0, r4
 8010958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801095c:	0801496a 	.word	0x0801496a
 8010960:	0801497b 	.word	0x0801497b

08010964 <__s2b>:
 8010964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010968:	460c      	mov	r4, r1
 801096a:	4615      	mov	r5, r2
 801096c:	461f      	mov	r7, r3
 801096e:	2209      	movs	r2, #9
 8010970:	3308      	adds	r3, #8
 8010972:	4606      	mov	r6, r0
 8010974:	fb93 f3f2 	sdiv	r3, r3, r2
 8010978:	2100      	movs	r1, #0
 801097a:	2201      	movs	r2, #1
 801097c:	429a      	cmp	r2, r3
 801097e:	db09      	blt.n	8010994 <__s2b+0x30>
 8010980:	4630      	mov	r0, r6
 8010982:	f7ff ff47 	bl	8010814 <_Balloc>
 8010986:	b940      	cbnz	r0, 801099a <__s2b+0x36>
 8010988:	4602      	mov	r2, r0
 801098a:	4b19      	ldr	r3, [pc, #100]	@ (80109f0 <__s2b+0x8c>)
 801098c:	4819      	ldr	r0, [pc, #100]	@ (80109f4 <__s2b+0x90>)
 801098e:	21d3      	movs	r1, #211	@ 0xd3
 8010990:	f7ff f88a 	bl	800faa8 <__assert_func>
 8010994:	0052      	lsls	r2, r2, #1
 8010996:	3101      	adds	r1, #1
 8010998:	e7f0      	b.n	801097c <__s2b+0x18>
 801099a:	9b08      	ldr	r3, [sp, #32]
 801099c:	6143      	str	r3, [r0, #20]
 801099e:	2d09      	cmp	r5, #9
 80109a0:	f04f 0301 	mov.w	r3, #1
 80109a4:	6103      	str	r3, [r0, #16]
 80109a6:	dd16      	ble.n	80109d6 <__s2b+0x72>
 80109a8:	f104 0909 	add.w	r9, r4, #9
 80109ac:	46c8      	mov	r8, r9
 80109ae:	442c      	add	r4, r5
 80109b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80109b4:	4601      	mov	r1, r0
 80109b6:	3b30      	subs	r3, #48	@ 0x30
 80109b8:	220a      	movs	r2, #10
 80109ba:	4630      	mov	r0, r6
 80109bc:	f7ff ff8c 	bl	80108d8 <__multadd>
 80109c0:	45a0      	cmp	r8, r4
 80109c2:	d1f5      	bne.n	80109b0 <__s2b+0x4c>
 80109c4:	f1a5 0408 	sub.w	r4, r5, #8
 80109c8:	444c      	add	r4, r9
 80109ca:	1b2d      	subs	r5, r5, r4
 80109cc:	1963      	adds	r3, r4, r5
 80109ce:	42bb      	cmp	r3, r7
 80109d0:	db04      	blt.n	80109dc <__s2b+0x78>
 80109d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109d6:	340a      	adds	r4, #10
 80109d8:	2509      	movs	r5, #9
 80109da:	e7f6      	b.n	80109ca <__s2b+0x66>
 80109dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109e0:	4601      	mov	r1, r0
 80109e2:	3b30      	subs	r3, #48	@ 0x30
 80109e4:	220a      	movs	r2, #10
 80109e6:	4630      	mov	r0, r6
 80109e8:	f7ff ff76 	bl	80108d8 <__multadd>
 80109ec:	e7ee      	b.n	80109cc <__s2b+0x68>
 80109ee:	bf00      	nop
 80109f0:	0801496a 	.word	0x0801496a
 80109f4:	0801497b 	.word	0x0801497b

080109f8 <__hi0bits>:
 80109f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80109fc:	4603      	mov	r3, r0
 80109fe:	bf36      	itet	cc
 8010a00:	0403      	lslcc	r3, r0, #16
 8010a02:	2000      	movcs	r0, #0
 8010a04:	2010      	movcc	r0, #16
 8010a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010a0a:	bf3c      	itt	cc
 8010a0c:	021b      	lslcc	r3, r3, #8
 8010a0e:	3008      	addcc	r0, #8
 8010a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010a14:	bf3c      	itt	cc
 8010a16:	011b      	lslcc	r3, r3, #4
 8010a18:	3004      	addcc	r0, #4
 8010a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a1e:	bf3c      	itt	cc
 8010a20:	009b      	lslcc	r3, r3, #2
 8010a22:	3002      	addcc	r0, #2
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	db05      	blt.n	8010a34 <__hi0bits+0x3c>
 8010a28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010a2c:	f100 0001 	add.w	r0, r0, #1
 8010a30:	bf08      	it	eq
 8010a32:	2020      	moveq	r0, #32
 8010a34:	4770      	bx	lr

08010a36 <__lo0bits>:
 8010a36:	6803      	ldr	r3, [r0, #0]
 8010a38:	4602      	mov	r2, r0
 8010a3a:	f013 0007 	ands.w	r0, r3, #7
 8010a3e:	d00b      	beq.n	8010a58 <__lo0bits+0x22>
 8010a40:	07d9      	lsls	r1, r3, #31
 8010a42:	d421      	bmi.n	8010a88 <__lo0bits+0x52>
 8010a44:	0798      	lsls	r0, r3, #30
 8010a46:	bf49      	itett	mi
 8010a48:	085b      	lsrmi	r3, r3, #1
 8010a4a:	089b      	lsrpl	r3, r3, #2
 8010a4c:	2001      	movmi	r0, #1
 8010a4e:	6013      	strmi	r3, [r2, #0]
 8010a50:	bf5c      	itt	pl
 8010a52:	6013      	strpl	r3, [r2, #0]
 8010a54:	2002      	movpl	r0, #2
 8010a56:	4770      	bx	lr
 8010a58:	b299      	uxth	r1, r3
 8010a5a:	b909      	cbnz	r1, 8010a60 <__lo0bits+0x2a>
 8010a5c:	0c1b      	lsrs	r3, r3, #16
 8010a5e:	2010      	movs	r0, #16
 8010a60:	b2d9      	uxtb	r1, r3
 8010a62:	b909      	cbnz	r1, 8010a68 <__lo0bits+0x32>
 8010a64:	3008      	adds	r0, #8
 8010a66:	0a1b      	lsrs	r3, r3, #8
 8010a68:	0719      	lsls	r1, r3, #28
 8010a6a:	bf04      	itt	eq
 8010a6c:	091b      	lsreq	r3, r3, #4
 8010a6e:	3004      	addeq	r0, #4
 8010a70:	0799      	lsls	r1, r3, #30
 8010a72:	bf04      	itt	eq
 8010a74:	089b      	lsreq	r3, r3, #2
 8010a76:	3002      	addeq	r0, #2
 8010a78:	07d9      	lsls	r1, r3, #31
 8010a7a:	d403      	bmi.n	8010a84 <__lo0bits+0x4e>
 8010a7c:	085b      	lsrs	r3, r3, #1
 8010a7e:	f100 0001 	add.w	r0, r0, #1
 8010a82:	d003      	beq.n	8010a8c <__lo0bits+0x56>
 8010a84:	6013      	str	r3, [r2, #0]
 8010a86:	4770      	bx	lr
 8010a88:	2000      	movs	r0, #0
 8010a8a:	4770      	bx	lr
 8010a8c:	2020      	movs	r0, #32
 8010a8e:	4770      	bx	lr

08010a90 <__i2b>:
 8010a90:	b510      	push	{r4, lr}
 8010a92:	460c      	mov	r4, r1
 8010a94:	2101      	movs	r1, #1
 8010a96:	f7ff febd 	bl	8010814 <_Balloc>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	b928      	cbnz	r0, 8010aaa <__i2b+0x1a>
 8010a9e:	4b05      	ldr	r3, [pc, #20]	@ (8010ab4 <__i2b+0x24>)
 8010aa0:	4805      	ldr	r0, [pc, #20]	@ (8010ab8 <__i2b+0x28>)
 8010aa2:	f240 1145 	movw	r1, #325	@ 0x145
 8010aa6:	f7fe ffff 	bl	800faa8 <__assert_func>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	6144      	str	r4, [r0, #20]
 8010aae:	6103      	str	r3, [r0, #16]
 8010ab0:	bd10      	pop	{r4, pc}
 8010ab2:	bf00      	nop
 8010ab4:	0801496a 	.word	0x0801496a
 8010ab8:	0801497b 	.word	0x0801497b

08010abc <__multiply>:
 8010abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	4614      	mov	r4, r2
 8010ac2:	690a      	ldr	r2, [r1, #16]
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	bfa8      	it	ge
 8010aca:	4623      	movge	r3, r4
 8010acc:	460f      	mov	r7, r1
 8010ace:	bfa4      	itt	ge
 8010ad0:	460c      	movge	r4, r1
 8010ad2:	461f      	movge	r7, r3
 8010ad4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010ad8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010adc:	68a3      	ldr	r3, [r4, #8]
 8010ade:	6861      	ldr	r1, [r4, #4]
 8010ae0:	eb0a 0609 	add.w	r6, sl, r9
 8010ae4:	42b3      	cmp	r3, r6
 8010ae6:	b085      	sub	sp, #20
 8010ae8:	bfb8      	it	lt
 8010aea:	3101      	addlt	r1, #1
 8010aec:	f7ff fe92 	bl	8010814 <_Balloc>
 8010af0:	b930      	cbnz	r0, 8010b00 <__multiply+0x44>
 8010af2:	4602      	mov	r2, r0
 8010af4:	4b44      	ldr	r3, [pc, #272]	@ (8010c08 <__multiply+0x14c>)
 8010af6:	4845      	ldr	r0, [pc, #276]	@ (8010c0c <__multiply+0x150>)
 8010af8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010afc:	f7fe ffd4 	bl	800faa8 <__assert_func>
 8010b00:	f100 0514 	add.w	r5, r0, #20
 8010b04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b08:	462b      	mov	r3, r5
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4543      	cmp	r3, r8
 8010b0e:	d321      	bcc.n	8010b54 <__multiply+0x98>
 8010b10:	f107 0114 	add.w	r1, r7, #20
 8010b14:	f104 0214 	add.w	r2, r4, #20
 8010b18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010b1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010b20:	9302      	str	r3, [sp, #8]
 8010b22:	1b13      	subs	r3, r2, r4
 8010b24:	3b15      	subs	r3, #21
 8010b26:	f023 0303 	bic.w	r3, r3, #3
 8010b2a:	3304      	adds	r3, #4
 8010b2c:	f104 0715 	add.w	r7, r4, #21
 8010b30:	42ba      	cmp	r2, r7
 8010b32:	bf38      	it	cc
 8010b34:	2304      	movcc	r3, #4
 8010b36:	9301      	str	r3, [sp, #4]
 8010b38:	9b02      	ldr	r3, [sp, #8]
 8010b3a:	9103      	str	r1, [sp, #12]
 8010b3c:	428b      	cmp	r3, r1
 8010b3e:	d80c      	bhi.n	8010b5a <__multiply+0x9e>
 8010b40:	2e00      	cmp	r6, #0
 8010b42:	dd03      	ble.n	8010b4c <__multiply+0x90>
 8010b44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d05b      	beq.n	8010c04 <__multiply+0x148>
 8010b4c:	6106      	str	r6, [r0, #16]
 8010b4e:	b005      	add	sp, #20
 8010b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b54:	f843 2b04 	str.w	r2, [r3], #4
 8010b58:	e7d8      	b.n	8010b0c <__multiply+0x50>
 8010b5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8010b5e:	f1ba 0f00 	cmp.w	sl, #0
 8010b62:	d024      	beq.n	8010bae <__multiply+0xf2>
 8010b64:	f104 0e14 	add.w	lr, r4, #20
 8010b68:	46a9      	mov	r9, r5
 8010b6a:	f04f 0c00 	mov.w	ip, #0
 8010b6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b72:	f8d9 3000 	ldr.w	r3, [r9]
 8010b76:	fa1f fb87 	uxth.w	fp, r7
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010b80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010b84:	f8d9 7000 	ldr.w	r7, [r9]
 8010b88:	4463      	add	r3, ip
 8010b8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010b8e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010b92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b9c:	4572      	cmp	r2, lr
 8010b9e:	f849 3b04 	str.w	r3, [r9], #4
 8010ba2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010ba6:	d8e2      	bhi.n	8010b6e <__multiply+0xb2>
 8010ba8:	9b01      	ldr	r3, [sp, #4]
 8010baa:	f845 c003 	str.w	ip, [r5, r3]
 8010bae:	9b03      	ldr	r3, [sp, #12]
 8010bb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010bb4:	3104      	adds	r1, #4
 8010bb6:	f1b9 0f00 	cmp.w	r9, #0
 8010bba:	d021      	beq.n	8010c00 <__multiply+0x144>
 8010bbc:	682b      	ldr	r3, [r5, #0]
 8010bbe:	f104 0c14 	add.w	ip, r4, #20
 8010bc2:	46ae      	mov	lr, r5
 8010bc4:	f04f 0a00 	mov.w	sl, #0
 8010bc8:	f8bc b000 	ldrh.w	fp, [ip]
 8010bcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010bd0:	fb09 770b 	mla	r7, r9, fp, r7
 8010bd4:	4457      	add	r7, sl
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010bdc:	f84e 3b04 	str.w	r3, [lr], #4
 8010be0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010be8:	f8be 3000 	ldrh.w	r3, [lr]
 8010bec:	fb09 330a 	mla	r3, r9, sl, r3
 8010bf0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010bf4:	4562      	cmp	r2, ip
 8010bf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bfa:	d8e5      	bhi.n	8010bc8 <__multiply+0x10c>
 8010bfc:	9f01      	ldr	r7, [sp, #4]
 8010bfe:	51eb      	str	r3, [r5, r7]
 8010c00:	3504      	adds	r5, #4
 8010c02:	e799      	b.n	8010b38 <__multiply+0x7c>
 8010c04:	3e01      	subs	r6, #1
 8010c06:	e79b      	b.n	8010b40 <__multiply+0x84>
 8010c08:	0801496a 	.word	0x0801496a
 8010c0c:	0801497b 	.word	0x0801497b

08010c10 <__pow5mult>:
 8010c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c14:	4615      	mov	r5, r2
 8010c16:	f012 0203 	ands.w	r2, r2, #3
 8010c1a:	4607      	mov	r7, r0
 8010c1c:	460e      	mov	r6, r1
 8010c1e:	d007      	beq.n	8010c30 <__pow5mult+0x20>
 8010c20:	4c25      	ldr	r4, [pc, #148]	@ (8010cb8 <__pow5mult+0xa8>)
 8010c22:	3a01      	subs	r2, #1
 8010c24:	2300      	movs	r3, #0
 8010c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c2a:	f7ff fe55 	bl	80108d8 <__multadd>
 8010c2e:	4606      	mov	r6, r0
 8010c30:	10ad      	asrs	r5, r5, #2
 8010c32:	d03d      	beq.n	8010cb0 <__pow5mult+0xa0>
 8010c34:	69fc      	ldr	r4, [r7, #28]
 8010c36:	b97c      	cbnz	r4, 8010c58 <__pow5mult+0x48>
 8010c38:	2010      	movs	r0, #16
 8010c3a:	f7fd fcef 	bl	800e61c <malloc>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	61f8      	str	r0, [r7, #28]
 8010c42:	b928      	cbnz	r0, 8010c50 <__pow5mult+0x40>
 8010c44:	4b1d      	ldr	r3, [pc, #116]	@ (8010cbc <__pow5mult+0xac>)
 8010c46:	481e      	ldr	r0, [pc, #120]	@ (8010cc0 <__pow5mult+0xb0>)
 8010c48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010c4c:	f7fe ff2c 	bl	800faa8 <__assert_func>
 8010c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c54:	6004      	str	r4, [r0, #0]
 8010c56:	60c4      	str	r4, [r0, #12]
 8010c58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c60:	b94c      	cbnz	r4, 8010c76 <__pow5mult+0x66>
 8010c62:	f240 2171 	movw	r1, #625	@ 0x271
 8010c66:	4638      	mov	r0, r7
 8010c68:	f7ff ff12 	bl	8010a90 <__i2b>
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c72:	4604      	mov	r4, r0
 8010c74:	6003      	str	r3, [r0, #0]
 8010c76:	f04f 0900 	mov.w	r9, #0
 8010c7a:	07eb      	lsls	r3, r5, #31
 8010c7c:	d50a      	bpl.n	8010c94 <__pow5mult+0x84>
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4622      	mov	r2, r4
 8010c82:	4638      	mov	r0, r7
 8010c84:	f7ff ff1a 	bl	8010abc <__multiply>
 8010c88:	4631      	mov	r1, r6
 8010c8a:	4680      	mov	r8, r0
 8010c8c:	4638      	mov	r0, r7
 8010c8e:	f7ff fe01 	bl	8010894 <_Bfree>
 8010c92:	4646      	mov	r6, r8
 8010c94:	106d      	asrs	r5, r5, #1
 8010c96:	d00b      	beq.n	8010cb0 <__pow5mult+0xa0>
 8010c98:	6820      	ldr	r0, [r4, #0]
 8010c9a:	b938      	cbnz	r0, 8010cac <__pow5mult+0x9c>
 8010c9c:	4622      	mov	r2, r4
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff ff0b 	bl	8010abc <__multiply>
 8010ca6:	6020      	str	r0, [r4, #0]
 8010ca8:	f8c0 9000 	str.w	r9, [r0]
 8010cac:	4604      	mov	r4, r0
 8010cae:	e7e4      	b.n	8010c7a <__pow5mult+0x6a>
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cb6:	bf00      	nop
 8010cb8:	080149d4 	.word	0x080149d4
 8010cbc:	08014858 	.word	0x08014858
 8010cc0:	0801497b 	.word	0x0801497b

08010cc4 <__lshift>:
 8010cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cc8:	460c      	mov	r4, r1
 8010cca:	6849      	ldr	r1, [r1, #4]
 8010ccc:	6923      	ldr	r3, [r4, #16]
 8010cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cd2:	68a3      	ldr	r3, [r4, #8]
 8010cd4:	4607      	mov	r7, r0
 8010cd6:	4691      	mov	r9, r2
 8010cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cdc:	f108 0601 	add.w	r6, r8, #1
 8010ce0:	42b3      	cmp	r3, r6
 8010ce2:	db0b      	blt.n	8010cfc <__lshift+0x38>
 8010ce4:	4638      	mov	r0, r7
 8010ce6:	f7ff fd95 	bl	8010814 <_Balloc>
 8010cea:	4605      	mov	r5, r0
 8010cec:	b948      	cbnz	r0, 8010d02 <__lshift+0x3e>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	4b28      	ldr	r3, [pc, #160]	@ (8010d94 <__lshift+0xd0>)
 8010cf2:	4829      	ldr	r0, [pc, #164]	@ (8010d98 <__lshift+0xd4>)
 8010cf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010cf8:	f7fe fed6 	bl	800faa8 <__assert_func>
 8010cfc:	3101      	adds	r1, #1
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	e7ee      	b.n	8010ce0 <__lshift+0x1c>
 8010d02:	2300      	movs	r3, #0
 8010d04:	f100 0114 	add.w	r1, r0, #20
 8010d08:	f100 0210 	add.w	r2, r0, #16
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	4553      	cmp	r3, sl
 8010d10:	db33      	blt.n	8010d7a <__lshift+0xb6>
 8010d12:	6920      	ldr	r0, [r4, #16]
 8010d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d18:	f104 0314 	add.w	r3, r4, #20
 8010d1c:	f019 091f 	ands.w	r9, r9, #31
 8010d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d28:	d02b      	beq.n	8010d82 <__lshift+0xbe>
 8010d2a:	f1c9 0e20 	rsb	lr, r9, #32
 8010d2e:	468a      	mov	sl, r1
 8010d30:	2200      	movs	r2, #0
 8010d32:	6818      	ldr	r0, [r3, #0]
 8010d34:	fa00 f009 	lsl.w	r0, r0, r9
 8010d38:	4310      	orrs	r0, r2
 8010d3a:	f84a 0b04 	str.w	r0, [sl], #4
 8010d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d42:	459c      	cmp	ip, r3
 8010d44:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d48:	d8f3      	bhi.n	8010d32 <__lshift+0x6e>
 8010d4a:	ebac 0304 	sub.w	r3, ip, r4
 8010d4e:	3b15      	subs	r3, #21
 8010d50:	f023 0303 	bic.w	r3, r3, #3
 8010d54:	3304      	adds	r3, #4
 8010d56:	f104 0015 	add.w	r0, r4, #21
 8010d5a:	4584      	cmp	ip, r0
 8010d5c:	bf38      	it	cc
 8010d5e:	2304      	movcc	r3, #4
 8010d60:	50ca      	str	r2, [r1, r3]
 8010d62:	b10a      	cbz	r2, 8010d68 <__lshift+0xa4>
 8010d64:	f108 0602 	add.w	r6, r8, #2
 8010d68:	3e01      	subs	r6, #1
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	612e      	str	r6, [r5, #16]
 8010d6e:	4621      	mov	r1, r4
 8010d70:	f7ff fd90 	bl	8010894 <_Bfree>
 8010d74:	4628      	mov	r0, r5
 8010d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d7e:	3301      	adds	r3, #1
 8010d80:	e7c5      	b.n	8010d0e <__lshift+0x4a>
 8010d82:	3904      	subs	r1, #4
 8010d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d88:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d8c:	459c      	cmp	ip, r3
 8010d8e:	d8f9      	bhi.n	8010d84 <__lshift+0xc0>
 8010d90:	e7ea      	b.n	8010d68 <__lshift+0xa4>
 8010d92:	bf00      	nop
 8010d94:	0801496a 	.word	0x0801496a
 8010d98:	0801497b 	.word	0x0801497b

08010d9c <__mcmp>:
 8010d9c:	690a      	ldr	r2, [r1, #16]
 8010d9e:	4603      	mov	r3, r0
 8010da0:	6900      	ldr	r0, [r0, #16]
 8010da2:	1a80      	subs	r0, r0, r2
 8010da4:	b530      	push	{r4, r5, lr}
 8010da6:	d10e      	bne.n	8010dc6 <__mcmp+0x2a>
 8010da8:	3314      	adds	r3, #20
 8010daa:	3114      	adds	r1, #20
 8010dac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010db0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010dbc:	4295      	cmp	r5, r2
 8010dbe:	d003      	beq.n	8010dc8 <__mcmp+0x2c>
 8010dc0:	d205      	bcs.n	8010dce <__mcmp+0x32>
 8010dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc6:	bd30      	pop	{r4, r5, pc}
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	d3f3      	bcc.n	8010db4 <__mcmp+0x18>
 8010dcc:	e7fb      	b.n	8010dc6 <__mcmp+0x2a>
 8010dce:	2001      	movs	r0, #1
 8010dd0:	e7f9      	b.n	8010dc6 <__mcmp+0x2a>
	...

08010dd4 <__mdiff>:
 8010dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	4689      	mov	r9, r1
 8010dda:	4606      	mov	r6, r0
 8010ddc:	4611      	mov	r1, r2
 8010dde:	4648      	mov	r0, r9
 8010de0:	4614      	mov	r4, r2
 8010de2:	f7ff ffdb 	bl	8010d9c <__mcmp>
 8010de6:	1e05      	subs	r5, r0, #0
 8010de8:	d112      	bne.n	8010e10 <__mdiff+0x3c>
 8010dea:	4629      	mov	r1, r5
 8010dec:	4630      	mov	r0, r6
 8010dee:	f7ff fd11 	bl	8010814 <_Balloc>
 8010df2:	4602      	mov	r2, r0
 8010df4:	b928      	cbnz	r0, 8010e02 <__mdiff+0x2e>
 8010df6:	4b3f      	ldr	r3, [pc, #252]	@ (8010ef4 <__mdiff+0x120>)
 8010df8:	f240 2137 	movw	r1, #567	@ 0x237
 8010dfc:	483e      	ldr	r0, [pc, #248]	@ (8010ef8 <__mdiff+0x124>)
 8010dfe:	f7fe fe53 	bl	800faa8 <__assert_func>
 8010e02:	2301      	movs	r3, #1
 8010e04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e08:	4610      	mov	r0, r2
 8010e0a:	b003      	add	sp, #12
 8010e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e10:	bfbc      	itt	lt
 8010e12:	464b      	movlt	r3, r9
 8010e14:	46a1      	movlt	r9, r4
 8010e16:	4630      	mov	r0, r6
 8010e18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010e1c:	bfba      	itte	lt
 8010e1e:	461c      	movlt	r4, r3
 8010e20:	2501      	movlt	r5, #1
 8010e22:	2500      	movge	r5, #0
 8010e24:	f7ff fcf6 	bl	8010814 <_Balloc>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	b918      	cbnz	r0, 8010e34 <__mdiff+0x60>
 8010e2c:	4b31      	ldr	r3, [pc, #196]	@ (8010ef4 <__mdiff+0x120>)
 8010e2e:	f240 2145 	movw	r1, #581	@ 0x245
 8010e32:	e7e3      	b.n	8010dfc <__mdiff+0x28>
 8010e34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010e38:	6926      	ldr	r6, [r4, #16]
 8010e3a:	60c5      	str	r5, [r0, #12]
 8010e3c:	f109 0310 	add.w	r3, r9, #16
 8010e40:	f109 0514 	add.w	r5, r9, #20
 8010e44:	f104 0e14 	add.w	lr, r4, #20
 8010e48:	f100 0b14 	add.w	fp, r0, #20
 8010e4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010e50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010e54:	9301      	str	r3, [sp, #4]
 8010e56:	46d9      	mov	r9, fp
 8010e58:	f04f 0c00 	mov.w	ip, #0
 8010e5c:	9b01      	ldr	r3, [sp, #4]
 8010e5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010e62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	fa1f f38a 	uxth.w	r3, sl
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	b283      	uxth	r3, r0
 8010e70:	1acb      	subs	r3, r1, r3
 8010e72:	0c00      	lsrs	r0, r0, #16
 8010e74:	4463      	add	r3, ip
 8010e76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010e7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010e84:	4576      	cmp	r6, lr
 8010e86:	f849 3b04 	str.w	r3, [r9], #4
 8010e8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e8e:	d8e5      	bhi.n	8010e5c <__mdiff+0x88>
 8010e90:	1b33      	subs	r3, r6, r4
 8010e92:	3b15      	subs	r3, #21
 8010e94:	f023 0303 	bic.w	r3, r3, #3
 8010e98:	3415      	adds	r4, #21
 8010e9a:	3304      	adds	r3, #4
 8010e9c:	42a6      	cmp	r6, r4
 8010e9e:	bf38      	it	cc
 8010ea0:	2304      	movcc	r3, #4
 8010ea2:	441d      	add	r5, r3
 8010ea4:	445b      	add	r3, fp
 8010ea6:	461e      	mov	r6, r3
 8010ea8:	462c      	mov	r4, r5
 8010eaa:	4544      	cmp	r4, r8
 8010eac:	d30e      	bcc.n	8010ecc <__mdiff+0xf8>
 8010eae:	f108 0103 	add.w	r1, r8, #3
 8010eb2:	1b49      	subs	r1, r1, r5
 8010eb4:	f021 0103 	bic.w	r1, r1, #3
 8010eb8:	3d03      	subs	r5, #3
 8010eba:	45a8      	cmp	r8, r5
 8010ebc:	bf38      	it	cc
 8010ebe:	2100      	movcc	r1, #0
 8010ec0:	440b      	add	r3, r1
 8010ec2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ec6:	b191      	cbz	r1, 8010eee <__mdiff+0x11a>
 8010ec8:	6117      	str	r7, [r2, #16]
 8010eca:	e79d      	b.n	8010e08 <__mdiff+0x34>
 8010ecc:	f854 1b04 	ldr.w	r1, [r4], #4
 8010ed0:	46e6      	mov	lr, ip
 8010ed2:	0c08      	lsrs	r0, r1, #16
 8010ed4:	fa1c fc81 	uxtah	ip, ip, r1
 8010ed8:	4471      	add	r1, lr
 8010eda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010ede:	b289      	uxth	r1, r1
 8010ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010ee4:	f846 1b04 	str.w	r1, [r6], #4
 8010ee8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010eec:	e7dd      	b.n	8010eaa <__mdiff+0xd6>
 8010eee:	3f01      	subs	r7, #1
 8010ef0:	e7e7      	b.n	8010ec2 <__mdiff+0xee>
 8010ef2:	bf00      	nop
 8010ef4:	0801496a 	.word	0x0801496a
 8010ef8:	0801497b 	.word	0x0801497b

08010efc <__ulp>:
 8010efc:	b082      	sub	sp, #8
 8010efe:	ed8d 0b00 	vstr	d0, [sp]
 8010f02:	9a01      	ldr	r2, [sp, #4]
 8010f04:	4b0f      	ldr	r3, [pc, #60]	@ (8010f44 <__ulp+0x48>)
 8010f06:	4013      	ands	r3, r2
 8010f08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	dc08      	bgt.n	8010f22 <__ulp+0x26>
 8010f10:	425b      	negs	r3, r3
 8010f12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010f16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010f1a:	da04      	bge.n	8010f26 <__ulp+0x2a>
 8010f1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010f20:	4113      	asrs	r3, r2
 8010f22:	2200      	movs	r2, #0
 8010f24:	e008      	b.n	8010f38 <__ulp+0x3c>
 8010f26:	f1a2 0314 	sub.w	r3, r2, #20
 8010f2a:	2b1e      	cmp	r3, #30
 8010f2c:	bfda      	itte	le
 8010f2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010f32:	40da      	lsrle	r2, r3
 8010f34:	2201      	movgt	r2, #1
 8010f36:	2300      	movs	r3, #0
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	ec41 0b10 	vmov	d0, r0, r1
 8010f40:	b002      	add	sp, #8
 8010f42:	4770      	bx	lr
 8010f44:	7ff00000 	.word	0x7ff00000

08010f48 <__b2d>:
 8010f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4c:	6906      	ldr	r6, [r0, #16]
 8010f4e:	f100 0814 	add.w	r8, r0, #20
 8010f52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010f56:	1f37      	subs	r7, r6, #4
 8010f58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010f5c:	4610      	mov	r0, r2
 8010f5e:	f7ff fd4b 	bl	80109f8 <__hi0bits>
 8010f62:	f1c0 0320 	rsb	r3, r0, #32
 8010f66:	280a      	cmp	r0, #10
 8010f68:	600b      	str	r3, [r1, #0]
 8010f6a:	491b      	ldr	r1, [pc, #108]	@ (8010fd8 <__b2d+0x90>)
 8010f6c:	dc15      	bgt.n	8010f9a <__b2d+0x52>
 8010f6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010f72:	fa22 f30c 	lsr.w	r3, r2, ip
 8010f76:	45b8      	cmp	r8, r7
 8010f78:	ea43 0501 	orr.w	r5, r3, r1
 8010f7c:	bf34      	ite	cc
 8010f7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f82:	2300      	movcs	r3, #0
 8010f84:	3015      	adds	r0, #21
 8010f86:	fa02 f000 	lsl.w	r0, r2, r0
 8010f8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8010f8e:	4303      	orrs	r3, r0
 8010f90:	461c      	mov	r4, r3
 8010f92:	ec45 4b10 	vmov	d0, r4, r5
 8010f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f9a:	45b8      	cmp	r8, r7
 8010f9c:	bf3a      	itte	cc
 8010f9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010fa2:	f1a6 0708 	subcc.w	r7, r6, #8
 8010fa6:	2300      	movcs	r3, #0
 8010fa8:	380b      	subs	r0, #11
 8010faa:	d012      	beq.n	8010fd2 <__b2d+0x8a>
 8010fac:	f1c0 0120 	rsb	r1, r0, #32
 8010fb0:	fa23 f401 	lsr.w	r4, r3, r1
 8010fb4:	4082      	lsls	r2, r0
 8010fb6:	4322      	orrs	r2, r4
 8010fb8:	4547      	cmp	r7, r8
 8010fba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010fbe:	bf8c      	ite	hi
 8010fc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010fc4:	2200      	movls	r2, #0
 8010fc6:	4083      	lsls	r3, r0
 8010fc8:	40ca      	lsrs	r2, r1
 8010fca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	e7de      	b.n	8010f90 <__b2d+0x48>
 8010fd2:	ea42 0501 	orr.w	r5, r2, r1
 8010fd6:	e7db      	b.n	8010f90 <__b2d+0x48>
 8010fd8:	3ff00000 	.word	0x3ff00000

08010fdc <__d2b>:
 8010fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fe0:	460f      	mov	r7, r1
 8010fe2:	2101      	movs	r1, #1
 8010fe4:	ec59 8b10 	vmov	r8, r9, d0
 8010fe8:	4616      	mov	r6, r2
 8010fea:	f7ff fc13 	bl	8010814 <_Balloc>
 8010fee:	4604      	mov	r4, r0
 8010ff0:	b930      	cbnz	r0, 8011000 <__d2b+0x24>
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	4b23      	ldr	r3, [pc, #140]	@ (8011084 <__d2b+0xa8>)
 8010ff6:	4824      	ldr	r0, [pc, #144]	@ (8011088 <__d2b+0xac>)
 8010ff8:	f240 310f 	movw	r1, #783	@ 0x30f
 8010ffc:	f7fe fd54 	bl	800faa8 <__assert_func>
 8011000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011008:	b10d      	cbz	r5, 801100e <__d2b+0x32>
 801100a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	f1b8 0300 	subs.w	r3, r8, #0
 8011014:	d023      	beq.n	801105e <__d2b+0x82>
 8011016:	4668      	mov	r0, sp
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	f7ff fd0c 	bl	8010a36 <__lo0bits>
 801101e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011022:	b1d0      	cbz	r0, 801105a <__d2b+0x7e>
 8011024:	f1c0 0320 	rsb	r3, r0, #32
 8011028:	fa02 f303 	lsl.w	r3, r2, r3
 801102c:	430b      	orrs	r3, r1
 801102e:	40c2      	lsrs	r2, r0
 8011030:	6163      	str	r3, [r4, #20]
 8011032:	9201      	str	r2, [sp, #4]
 8011034:	9b01      	ldr	r3, [sp, #4]
 8011036:	61a3      	str	r3, [r4, #24]
 8011038:	2b00      	cmp	r3, #0
 801103a:	bf0c      	ite	eq
 801103c:	2201      	moveq	r2, #1
 801103e:	2202      	movne	r2, #2
 8011040:	6122      	str	r2, [r4, #16]
 8011042:	b1a5      	cbz	r5, 801106e <__d2b+0x92>
 8011044:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011048:	4405      	add	r5, r0
 801104a:	603d      	str	r5, [r7, #0]
 801104c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011050:	6030      	str	r0, [r6, #0]
 8011052:	4620      	mov	r0, r4
 8011054:	b003      	add	sp, #12
 8011056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801105a:	6161      	str	r1, [r4, #20]
 801105c:	e7ea      	b.n	8011034 <__d2b+0x58>
 801105e:	a801      	add	r0, sp, #4
 8011060:	f7ff fce9 	bl	8010a36 <__lo0bits>
 8011064:	9b01      	ldr	r3, [sp, #4]
 8011066:	6163      	str	r3, [r4, #20]
 8011068:	3020      	adds	r0, #32
 801106a:	2201      	movs	r2, #1
 801106c:	e7e8      	b.n	8011040 <__d2b+0x64>
 801106e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011072:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011076:	6038      	str	r0, [r7, #0]
 8011078:	6918      	ldr	r0, [r3, #16]
 801107a:	f7ff fcbd 	bl	80109f8 <__hi0bits>
 801107e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011082:	e7e5      	b.n	8011050 <__d2b+0x74>
 8011084:	0801496a 	.word	0x0801496a
 8011088:	0801497b 	.word	0x0801497b

0801108c <__ratio>:
 801108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011090:	b085      	sub	sp, #20
 8011092:	e9cd 1000 	strd	r1, r0, [sp]
 8011096:	a902      	add	r1, sp, #8
 8011098:	f7ff ff56 	bl	8010f48 <__b2d>
 801109c:	9800      	ldr	r0, [sp, #0]
 801109e:	a903      	add	r1, sp, #12
 80110a0:	ec55 4b10 	vmov	r4, r5, d0
 80110a4:	f7ff ff50 	bl	8010f48 <__b2d>
 80110a8:	9b01      	ldr	r3, [sp, #4]
 80110aa:	6919      	ldr	r1, [r3, #16]
 80110ac:	9b00      	ldr	r3, [sp, #0]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	1ac9      	subs	r1, r1, r3
 80110b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	ec5b ab10 	vmov	sl, fp, d0
 80110bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	bfce      	itee	gt
 80110c4:	462a      	movgt	r2, r5
 80110c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110ca:	465a      	movle	r2, fp
 80110cc:	462f      	mov	r7, r5
 80110ce:	46d9      	mov	r9, fp
 80110d0:	bfcc      	ite	gt
 80110d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80110d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80110da:	464b      	mov	r3, r9
 80110dc:	4652      	mov	r2, sl
 80110de:	4620      	mov	r0, r4
 80110e0:	4639      	mov	r1, r7
 80110e2:	f7ef fbb3 	bl	800084c <__aeabi_ddiv>
 80110e6:	ec41 0b10 	vmov	d0, r0, r1
 80110ea:	b005      	add	sp, #20
 80110ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110f0 <__copybits>:
 80110f0:	3901      	subs	r1, #1
 80110f2:	b570      	push	{r4, r5, r6, lr}
 80110f4:	1149      	asrs	r1, r1, #5
 80110f6:	6914      	ldr	r4, [r2, #16]
 80110f8:	3101      	adds	r1, #1
 80110fa:	f102 0314 	add.w	r3, r2, #20
 80110fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011102:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011106:	1f05      	subs	r5, r0, #4
 8011108:	42a3      	cmp	r3, r4
 801110a:	d30c      	bcc.n	8011126 <__copybits+0x36>
 801110c:	1aa3      	subs	r3, r4, r2
 801110e:	3b11      	subs	r3, #17
 8011110:	f023 0303 	bic.w	r3, r3, #3
 8011114:	3211      	adds	r2, #17
 8011116:	42a2      	cmp	r2, r4
 8011118:	bf88      	it	hi
 801111a:	2300      	movhi	r3, #0
 801111c:	4418      	add	r0, r3
 801111e:	2300      	movs	r3, #0
 8011120:	4288      	cmp	r0, r1
 8011122:	d305      	bcc.n	8011130 <__copybits+0x40>
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	f853 6b04 	ldr.w	r6, [r3], #4
 801112a:	f845 6f04 	str.w	r6, [r5, #4]!
 801112e:	e7eb      	b.n	8011108 <__copybits+0x18>
 8011130:	f840 3b04 	str.w	r3, [r0], #4
 8011134:	e7f4      	b.n	8011120 <__copybits+0x30>

08011136 <__any_on>:
 8011136:	f100 0214 	add.w	r2, r0, #20
 801113a:	6900      	ldr	r0, [r0, #16]
 801113c:	114b      	asrs	r3, r1, #5
 801113e:	4298      	cmp	r0, r3
 8011140:	b510      	push	{r4, lr}
 8011142:	db11      	blt.n	8011168 <__any_on+0x32>
 8011144:	dd0a      	ble.n	801115c <__any_on+0x26>
 8011146:	f011 011f 	ands.w	r1, r1, #31
 801114a:	d007      	beq.n	801115c <__any_on+0x26>
 801114c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011150:	fa24 f001 	lsr.w	r0, r4, r1
 8011154:	fa00 f101 	lsl.w	r1, r0, r1
 8011158:	428c      	cmp	r4, r1
 801115a:	d10b      	bne.n	8011174 <__any_on+0x3e>
 801115c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011160:	4293      	cmp	r3, r2
 8011162:	d803      	bhi.n	801116c <__any_on+0x36>
 8011164:	2000      	movs	r0, #0
 8011166:	bd10      	pop	{r4, pc}
 8011168:	4603      	mov	r3, r0
 801116a:	e7f7      	b.n	801115c <__any_on+0x26>
 801116c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011170:	2900      	cmp	r1, #0
 8011172:	d0f5      	beq.n	8011160 <__any_on+0x2a>
 8011174:	2001      	movs	r0, #1
 8011176:	e7f6      	b.n	8011166 <__any_on+0x30>

08011178 <sulp>:
 8011178:	b570      	push	{r4, r5, r6, lr}
 801117a:	4604      	mov	r4, r0
 801117c:	460d      	mov	r5, r1
 801117e:	ec45 4b10 	vmov	d0, r4, r5
 8011182:	4616      	mov	r6, r2
 8011184:	f7ff feba 	bl	8010efc <__ulp>
 8011188:	ec51 0b10 	vmov	r0, r1, d0
 801118c:	b17e      	cbz	r6, 80111ae <sulp+0x36>
 801118e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011192:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011196:	2b00      	cmp	r3, #0
 8011198:	dd09      	ble.n	80111ae <sulp+0x36>
 801119a:	051b      	lsls	r3, r3, #20
 801119c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80111a0:	2400      	movs	r4, #0
 80111a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80111a6:	4622      	mov	r2, r4
 80111a8:	462b      	mov	r3, r5
 80111aa:	f7ef fa25 	bl	80005f8 <__aeabi_dmul>
 80111ae:	ec41 0b10 	vmov	d0, r0, r1
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	0000      	movs	r0, r0
	...

080111b8 <_strtod_l>:
 80111b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111bc:	b09f      	sub	sp, #124	@ 0x7c
 80111be:	460c      	mov	r4, r1
 80111c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80111c2:	2200      	movs	r2, #0
 80111c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80111c6:	9005      	str	r0, [sp, #20]
 80111c8:	f04f 0a00 	mov.w	sl, #0
 80111cc:	f04f 0b00 	mov.w	fp, #0
 80111d0:	460a      	mov	r2, r1
 80111d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80111d4:	7811      	ldrb	r1, [r2, #0]
 80111d6:	292b      	cmp	r1, #43	@ 0x2b
 80111d8:	d04a      	beq.n	8011270 <_strtod_l+0xb8>
 80111da:	d838      	bhi.n	801124e <_strtod_l+0x96>
 80111dc:	290d      	cmp	r1, #13
 80111de:	d832      	bhi.n	8011246 <_strtod_l+0x8e>
 80111e0:	2908      	cmp	r1, #8
 80111e2:	d832      	bhi.n	801124a <_strtod_l+0x92>
 80111e4:	2900      	cmp	r1, #0
 80111e6:	d03b      	beq.n	8011260 <_strtod_l+0xa8>
 80111e8:	2200      	movs	r2, #0
 80111ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80111ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80111ee:	782a      	ldrb	r2, [r5, #0]
 80111f0:	2a30      	cmp	r2, #48	@ 0x30
 80111f2:	f040 80b3 	bne.w	801135c <_strtod_l+0x1a4>
 80111f6:	786a      	ldrb	r2, [r5, #1]
 80111f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80111fc:	2a58      	cmp	r2, #88	@ 0x58
 80111fe:	d16e      	bne.n	80112de <_strtod_l+0x126>
 8011200:	9302      	str	r3, [sp, #8]
 8011202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	ab1a      	add	r3, sp, #104	@ 0x68
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	4a8e      	ldr	r2, [pc, #568]	@ (8011444 <_strtod_l+0x28c>)
 801120c:	9805      	ldr	r0, [sp, #20]
 801120e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011210:	a919      	add	r1, sp, #100	@ 0x64
 8011212:	f001 fc13 	bl	8012a3c <__gethex>
 8011216:	f010 060f 	ands.w	r6, r0, #15
 801121a:	4604      	mov	r4, r0
 801121c:	d005      	beq.n	801122a <_strtod_l+0x72>
 801121e:	2e06      	cmp	r6, #6
 8011220:	d128      	bne.n	8011274 <_strtod_l+0xbc>
 8011222:	3501      	adds	r5, #1
 8011224:	2300      	movs	r3, #0
 8011226:	9519      	str	r5, [sp, #100]	@ 0x64
 8011228:	930b      	str	r3, [sp, #44]	@ 0x2c
 801122a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801122c:	2b00      	cmp	r3, #0
 801122e:	f040 858e 	bne.w	8011d4e <_strtod_l+0xb96>
 8011232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011234:	b1cb      	cbz	r3, 801126a <_strtod_l+0xb2>
 8011236:	4652      	mov	r2, sl
 8011238:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801123c:	ec43 2b10 	vmov	d0, r2, r3
 8011240:	b01f      	add	sp, #124	@ 0x7c
 8011242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011246:	2920      	cmp	r1, #32
 8011248:	d1ce      	bne.n	80111e8 <_strtod_l+0x30>
 801124a:	3201      	adds	r2, #1
 801124c:	e7c1      	b.n	80111d2 <_strtod_l+0x1a>
 801124e:	292d      	cmp	r1, #45	@ 0x2d
 8011250:	d1ca      	bne.n	80111e8 <_strtod_l+0x30>
 8011252:	2101      	movs	r1, #1
 8011254:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011256:	1c51      	adds	r1, r2, #1
 8011258:	9119      	str	r1, [sp, #100]	@ 0x64
 801125a:	7852      	ldrb	r2, [r2, #1]
 801125c:	2a00      	cmp	r2, #0
 801125e:	d1c5      	bne.n	80111ec <_strtod_l+0x34>
 8011260:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011262:	9419      	str	r4, [sp, #100]	@ 0x64
 8011264:	2b00      	cmp	r3, #0
 8011266:	f040 8570 	bne.w	8011d4a <_strtod_l+0xb92>
 801126a:	4652      	mov	r2, sl
 801126c:	465b      	mov	r3, fp
 801126e:	e7e5      	b.n	801123c <_strtod_l+0x84>
 8011270:	2100      	movs	r1, #0
 8011272:	e7ef      	b.n	8011254 <_strtod_l+0x9c>
 8011274:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011276:	b13a      	cbz	r2, 8011288 <_strtod_l+0xd0>
 8011278:	2135      	movs	r1, #53	@ 0x35
 801127a:	a81c      	add	r0, sp, #112	@ 0x70
 801127c:	f7ff ff38 	bl	80110f0 <__copybits>
 8011280:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011282:	9805      	ldr	r0, [sp, #20]
 8011284:	f7ff fb06 	bl	8010894 <_Bfree>
 8011288:	3e01      	subs	r6, #1
 801128a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801128c:	2e04      	cmp	r6, #4
 801128e:	d806      	bhi.n	801129e <_strtod_l+0xe6>
 8011290:	e8df f006 	tbb	[pc, r6]
 8011294:	201d0314 	.word	0x201d0314
 8011298:	14          	.byte	0x14
 8011299:	00          	.byte	0x00
 801129a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801129e:	05e1      	lsls	r1, r4, #23
 80112a0:	bf48      	it	mi
 80112a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80112a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112aa:	0d1b      	lsrs	r3, r3, #20
 80112ac:	051b      	lsls	r3, r3, #20
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d1bb      	bne.n	801122a <_strtod_l+0x72>
 80112b2:	f7fe fbbd 	bl	800fa30 <__errno>
 80112b6:	2322      	movs	r3, #34	@ 0x22
 80112b8:	6003      	str	r3, [r0, #0]
 80112ba:	e7b6      	b.n	801122a <_strtod_l+0x72>
 80112bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80112c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80112c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80112c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80112cc:	e7e7      	b.n	801129e <_strtod_l+0xe6>
 80112ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801144c <_strtod_l+0x294>
 80112d2:	e7e4      	b.n	801129e <_strtod_l+0xe6>
 80112d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80112d8:	f04f 3aff 	mov.w	sl, #4294967295
 80112dc:	e7df      	b.n	801129e <_strtod_l+0xe6>
 80112de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80112e4:	785b      	ldrb	r3, [r3, #1]
 80112e6:	2b30      	cmp	r3, #48	@ 0x30
 80112e8:	d0f9      	beq.n	80112de <_strtod_l+0x126>
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d09d      	beq.n	801122a <_strtod_l+0x72>
 80112ee:	2301      	movs	r3, #1
 80112f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80112f6:	2300      	movs	r3, #0
 80112f8:	9308      	str	r3, [sp, #32]
 80112fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80112fc:	461f      	mov	r7, r3
 80112fe:	220a      	movs	r2, #10
 8011300:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011302:	7805      	ldrb	r5, [r0, #0]
 8011304:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011308:	b2d9      	uxtb	r1, r3
 801130a:	2909      	cmp	r1, #9
 801130c:	d928      	bls.n	8011360 <_strtod_l+0x1a8>
 801130e:	494e      	ldr	r1, [pc, #312]	@ (8011448 <_strtod_l+0x290>)
 8011310:	2201      	movs	r2, #1
 8011312:	f7fe fac5 	bl	800f8a0 <strncmp>
 8011316:	2800      	cmp	r0, #0
 8011318:	d032      	beq.n	8011380 <_strtod_l+0x1c8>
 801131a:	2000      	movs	r0, #0
 801131c:	462a      	mov	r2, r5
 801131e:	4681      	mov	r9, r0
 8011320:	463d      	mov	r5, r7
 8011322:	4603      	mov	r3, r0
 8011324:	2a65      	cmp	r2, #101	@ 0x65
 8011326:	d001      	beq.n	801132c <_strtod_l+0x174>
 8011328:	2a45      	cmp	r2, #69	@ 0x45
 801132a:	d114      	bne.n	8011356 <_strtod_l+0x19e>
 801132c:	b91d      	cbnz	r5, 8011336 <_strtod_l+0x17e>
 801132e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011330:	4302      	orrs	r2, r0
 8011332:	d095      	beq.n	8011260 <_strtod_l+0xa8>
 8011334:	2500      	movs	r5, #0
 8011336:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011338:	1c62      	adds	r2, r4, #1
 801133a:	9219      	str	r2, [sp, #100]	@ 0x64
 801133c:	7862      	ldrb	r2, [r4, #1]
 801133e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011340:	d077      	beq.n	8011432 <_strtod_l+0x27a>
 8011342:	2a2d      	cmp	r2, #45	@ 0x2d
 8011344:	d07b      	beq.n	801143e <_strtod_l+0x286>
 8011346:	f04f 0c00 	mov.w	ip, #0
 801134a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801134e:	2909      	cmp	r1, #9
 8011350:	f240 8082 	bls.w	8011458 <_strtod_l+0x2a0>
 8011354:	9419      	str	r4, [sp, #100]	@ 0x64
 8011356:	f04f 0800 	mov.w	r8, #0
 801135a:	e0a2      	b.n	80114a2 <_strtod_l+0x2ea>
 801135c:	2300      	movs	r3, #0
 801135e:	e7c7      	b.n	80112f0 <_strtod_l+0x138>
 8011360:	2f08      	cmp	r7, #8
 8011362:	bfd5      	itete	le
 8011364:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011366:	9908      	ldrgt	r1, [sp, #32]
 8011368:	fb02 3301 	mlale	r3, r2, r1, r3
 801136c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011370:	f100 0001 	add.w	r0, r0, #1
 8011374:	bfd4      	ite	le
 8011376:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011378:	9308      	strgt	r3, [sp, #32]
 801137a:	3701      	adds	r7, #1
 801137c:	9019      	str	r0, [sp, #100]	@ 0x64
 801137e:	e7bf      	b.n	8011300 <_strtod_l+0x148>
 8011380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011382:	1c5a      	adds	r2, r3, #1
 8011384:	9219      	str	r2, [sp, #100]	@ 0x64
 8011386:	785a      	ldrb	r2, [r3, #1]
 8011388:	b37f      	cbz	r7, 80113ea <_strtod_l+0x232>
 801138a:	4681      	mov	r9, r0
 801138c:	463d      	mov	r5, r7
 801138e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011392:	2b09      	cmp	r3, #9
 8011394:	d912      	bls.n	80113bc <_strtod_l+0x204>
 8011396:	2301      	movs	r3, #1
 8011398:	e7c4      	b.n	8011324 <_strtod_l+0x16c>
 801139a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801139c:	1c5a      	adds	r2, r3, #1
 801139e:	9219      	str	r2, [sp, #100]	@ 0x64
 80113a0:	785a      	ldrb	r2, [r3, #1]
 80113a2:	3001      	adds	r0, #1
 80113a4:	2a30      	cmp	r2, #48	@ 0x30
 80113a6:	d0f8      	beq.n	801139a <_strtod_l+0x1e2>
 80113a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80113ac:	2b08      	cmp	r3, #8
 80113ae:	f200 84d3 	bhi.w	8011d58 <_strtod_l+0xba0>
 80113b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80113b6:	4681      	mov	r9, r0
 80113b8:	2000      	movs	r0, #0
 80113ba:	4605      	mov	r5, r0
 80113bc:	3a30      	subs	r2, #48	@ 0x30
 80113be:	f100 0301 	add.w	r3, r0, #1
 80113c2:	d02a      	beq.n	801141a <_strtod_l+0x262>
 80113c4:	4499      	add	r9, r3
 80113c6:	eb00 0c05 	add.w	ip, r0, r5
 80113ca:	462b      	mov	r3, r5
 80113cc:	210a      	movs	r1, #10
 80113ce:	4563      	cmp	r3, ip
 80113d0:	d10d      	bne.n	80113ee <_strtod_l+0x236>
 80113d2:	1c69      	adds	r1, r5, #1
 80113d4:	4401      	add	r1, r0
 80113d6:	4428      	add	r0, r5
 80113d8:	2808      	cmp	r0, #8
 80113da:	dc16      	bgt.n	801140a <_strtod_l+0x252>
 80113dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80113de:	230a      	movs	r3, #10
 80113e0:	fb03 2300 	mla	r3, r3, r0, r2
 80113e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80113e6:	2300      	movs	r3, #0
 80113e8:	e018      	b.n	801141c <_strtod_l+0x264>
 80113ea:	4638      	mov	r0, r7
 80113ec:	e7da      	b.n	80113a4 <_strtod_l+0x1ec>
 80113ee:	2b08      	cmp	r3, #8
 80113f0:	f103 0301 	add.w	r3, r3, #1
 80113f4:	dc03      	bgt.n	80113fe <_strtod_l+0x246>
 80113f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80113f8:	434e      	muls	r6, r1
 80113fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80113fc:	e7e7      	b.n	80113ce <_strtod_l+0x216>
 80113fe:	2b10      	cmp	r3, #16
 8011400:	bfde      	ittt	le
 8011402:	9e08      	ldrle	r6, [sp, #32]
 8011404:	434e      	mulle	r6, r1
 8011406:	9608      	strle	r6, [sp, #32]
 8011408:	e7e1      	b.n	80113ce <_strtod_l+0x216>
 801140a:	280f      	cmp	r0, #15
 801140c:	dceb      	bgt.n	80113e6 <_strtod_l+0x22e>
 801140e:	9808      	ldr	r0, [sp, #32]
 8011410:	230a      	movs	r3, #10
 8011412:	fb03 2300 	mla	r3, r3, r0, r2
 8011416:	9308      	str	r3, [sp, #32]
 8011418:	e7e5      	b.n	80113e6 <_strtod_l+0x22e>
 801141a:	4629      	mov	r1, r5
 801141c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801141e:	1c50      	adds	r0, r2, #1
 8011420:	9019      	str	r0, [sp, #100]	@ 0x64
 8011422:	7852      	ldrb	r2, [r2, #1]
 8011424:	4618      	mov	r0, r3
 8011426:	460d      	mov	r5, r1
 8011428:	e7b1      	b.n	801138e <_strtod_l+0x1d6>
 801142a:	f04f 0900 	mov.w	r9, #0
 801142e:	2301      	movs	r3, #1
 8011430:	e77d      	b.n	801132e <_strtod_l+0x176>
 8011432:	f04f 0c00 	mov.w	ip, #0
 8011436:	1ca2      	adds	r2, r4, #2
 8011438:	9219      	str	r2, [sp, #100]	@ 0x64
 801143a:	78a2      	ldrb	r2, [r4, #2]
 801143c:	e785      	b.n	801134a <_strtod_l+0x192>
 801143e:	f04f 0c01 	mov.w	ip, #1
 8011442:	e7f8      	b.n	8011436 <_strtod_l+0x27e>
 8011444:	08014ae8 	.word	0x08014ae8
 8011448:	08014ad0 	.word	0x08014ad0
 801144c:	7ff00000 	.word	0x7ff00000
 8011450:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011452:	1c51      	adds	r1, r2, #1
 8011454:	9119      	str	r1, [sp, #100]	@ 0x64
 8011456:	7852      	ldrb	r2, [r2, #1]
 8011458:	2a30      	cmp	r2, #48	@ 0x30
 801145a:	d0f9      	beq.n	8011450 <_strtod_l+0x298>
 801145c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011460:	2908      	cmp	r1, #8
 8011462:	f63f af78 	bhi.w	8011356 <_strtod_l+0x19e>
 8011466:	3a30      	subs	r2, #48	@ 0x30
 8011468:	920e      	str	r2, [sp, #56]	@ 0x38
 801146a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801146c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801146e:	f04f 080a 	mov.w	r8, #10
 8011472:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011474:	1c56      	adds	r6, r2, #1
 8011476:	9619      	str	r6, [sp, #100]	@ 0x64
 8011478:	7852      	ldrb	r2, [r2, #1]
 801147a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801147e:	f1be 0f09 	cmp.w	lr, #9
 8011482:	d939      	bls.n	80114f8 <_strtod_l+0x340>
 8011484:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011486:	1a76      	subs	r6, r6, r1
 8011488:	2e08      	cmp	r6, #8
 801148a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801148e:	dc03      	bgt.n	8011498 <_strtod_l+0x2e0>
 8011490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011492:	4588      	cmp	r8, r1
 8011494:	bfa8      	it	ge
 8011496:	4688      	movge	r8, r1
 8011498:	f1bc 0f00 	cmp.w	ip, #0
 801149c:	d001      	beq.n	80114a2 <_strtod_l+0x2ea>
 801149e:	f1c8 0800 	rsb	r8, r8, #0
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	d14e      	bne.n	8011544 <_strtod_l+0x38c>
 80114a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80114a8:	4308      	orrs	r0, r1
 80114aa:	f47f aebe 	bne.w	801122a <_strtod_l+0x72>
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f47f aed6 	bne.w	8011260 <_strtod_l+0xa8>
 80114b4:	2a69      	cmp	r2, #105	@ 0x69
 80114b6:	d028      	beq.n	801150a <_strtod_l+0x352>
 80114b8:	dc25      	bgt.n	8011506 <_strtod_l+0x34e>
 80114ba:	2a49      	cmp	r2, #73	@ 0x49
 80114bc:	d025      	beq.n	801150a <_strtod_l+0x352>
 80114be:	2a4e      	cmp	r2, #78	@ 0x4e
 80114c0:	f47f aece 	bne.w	8011260 <_strtod_l+0xa8>
 80114c4:	499b      	ldr	r1, [pc, #620]	@ (8011734 <_strtod_l+0x57c>)
 80114c6:	a819      	add	r0, sp, #100	@ 0x64
 80114c8:	f001 fcda 	bl	8012e80 <__match>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	f43f aec7 	beq.w	8011260 <_strtod_l+0xa8>
 80114d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	2b28      	cmp	r3, #40	@ 0x28
 80114d8:	d12e      	bne.n	8011538 <_strtod_l+0x380>
 80114da:	4997      	ldr	r1, [pc, #604]	@ (8011738 <_strtod_l+0x580>)
 80114dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80114de:	a819      	add	r0, sp, #100	@ 0x64
 80114e0:	f001 fce2 	bl	8012ea8 <__hexnan>
 80114e4:	2805      	cmp	r0, #5
 80114e6:	d127      	bne.n	8011538 <_strtod_l+0x380>
 80114e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80114ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80114ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80114f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80114f6:	e698      	b.n	801122a <_strtod_l+0x72>
 80114f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80114fa:	fb08 2101 	mla	r1, r8, r1, r2
 80114fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011502:	920e      	str	r2, [sp, #56]	@ 0x38
 8011504:	e7b5      	b.n	8011472 <_strtod_l+0x2ba>
 8011506:	2a6e      	cmp	r2, #110	@ 0x6e
 8011508:	e7da      	b.n	80114c0 <_strtod_l+0x308>
 801150a:	498c      	ldr	r1, [pc, #560]	@ (801173c <_strtod_l+0x584>)
 801150c:	a819      	add	r0, sp, #100	@ 0x64
 801150e:	f001 fcb7 	bl	8012e80 <__match>
 8011512:	2800      	cmp	r0, #0
 8011514:	f43f aea4 	beq.w	8011260 <_strtod_l+0xa8>
 8011518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801151a:	4989      	ldr	r1, [pc, #548]	@ (8011740 <_strtod_l+0x588>)
 801151c:	3b01      	subs	r3, #1
 801151e:	a819      	add	r0, sp, #100	@ 0x64
 8011520:	9319      	str	r3, [sp, #100]	@ 0x64
 8011522:	f001 fcad 	bl	8012e80 <__match>
 8011526:	b910      	cbnz	r0, 801152e <_strtod_l+0x376>
 8011528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801152a:	3301      	adds	r3, #1
 801152c:	9319      	str	r3, [sp, #100]	@ 0x64
 801152e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011750 <_strtod_l+0x598>
 8011532:	f04f 0a00 	mov.w	sl, #0
 8011536:	e678      	b.n	801122a <_strtod_l+0x72>
 8011538:	4882      	ldr	r0, [pc, #520]	@ (8011744 <_strtod_l+0x58c>)
 801153a:	f001 f9f5 	bl	8012928 <nan>
 801153e:	ec5b ab10 	vmov	sl, fp, d0
 8011542:	e672      	b.n	801122a <_strtod_l+0x72>
 8011544:	eba8 0309 	sub.w	r3, r8, r9
 8011548:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801154a:	9309      	str	r3, [sp, #36]	@ 0x24
 801154c:	2f00      	cmp	r7, #0
 801154e:	bf08      	it	eq
 8011550:	462f      	moveq	r7, r5
 8011552:	2d10      	cmp	r5, #16
 8011554:	462c      	mov	r4, r5
 8011556:	bfa8      	it	ge
 8011558:	2410      	movge	r4, #16
 801155a:	f7ee ffd3 	bl	8000504 <__aeabi_ui2d>
 801155e:	2d09      	cmp	r5, #9
 8011560:	4682      	mov	sl, r0
 8011562:	468b      	mov	fp, r1
 8011564:	dc13      	bgt.n	801158e <_strtod_l+0x3d6>
 8011566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011568:	2b00      	cmp	r3, #0
 801156a:	f43f ae5e 	beq.w	801122a <_strtod_l+0x72>
 801156e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011570:	dd78      	ble.n	8011664 <_strtod_l+0x4ac>
 8011572:	2b16      	cmp	r3, #22
 8011574:	dc5f      	bgt.n	8011636 <_strtod_l+0x47e>
 8011576:	4974      	ldr	r1, [pc, #464]	@ (8011748 <_strtod_l+0x590>)
 8011578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801157c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011580:	4652      	mov	r2, sl
 8011582:	465b      	mov	r3, fp
 8011584:	f7ef f838 	bl	80005f8 <__aeabi_dmul>
 8011588:	4682      	mov	sl, r0
 801158a:	468b      	mov	fp, r1
 801158c:	e64d      	b.n	801122a <_strtod_l+0x72>
 801158e:	4b6e      	ldr	r3, [pc, #440]	@ (8011748 <_strtod_l+0x590>)
 8011590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011594:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011598:	f7ef f82e 	bl	80005f8 <__aeabi_dmul>
 801159c:	4682      	mov	sl, r0
 801159e:	9808      	ldr	r0, [sp, #32]
 80115a0:	468b      	mov	fp, r1
 80115a2:	f7ee ffaf 	bl	8000504 <__aeabi_ui2d>
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	4650      	mov	r0, sl
 80115ac:	4659      	mov	r1, fp
 80115ae:	f7ee fe6d 	bl	800028c <__adddf3>
 80115b2:	2d0f      	cmp	r5, #15
 80115b4:	4682      	mov	sl, r0
 80115b6:	468b      	mov	fp, r1
 80115b8:	ddd5      	ble.n	8011566 <_strtod_l+0x3ae>
 80115ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115bc:	1b2c      	subs	r4, r5, r4
 80115be:	441c      	add	r4, r3
 80115c0:	2c00      	cmp	r4, #0
 80115c2:	f340 8096 	ble.w	80116f2 <_strtod_l+0x53a>
 80115c6:	f014 030f 	ands.w	r3, r4, #15
 80115ca:	d00a      	beq.n	80115e2 <_strtod_l+0x42a>
 80115cc:	495e      	ldr	r1, [pc, #376]	@ (8011748 <_strtod_l+0x590>)
 80115ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115d2:	4652      	mov	r2, sl
 80115d4:	465b      	mov	r3, fp
 80115d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115da:	f7ef f80d 	bl	80005f8 <__aeabi_dmul>
 80115de:	4682      	mov	sl, r0
 80115e0:	468b      	mov	fp, r1
 80115e2:	f034 040f 	bics.w	r4, r4, #15
 80115e6:	d073      	beq.n	80116d0 <_strtod_l+0x518>
 80115e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80115ec:	dd48      	ble.n	8011680 <_strtod_l+0x4c8>
 80115ee:	2400      	movs	r4, #0
 80115f0:	46a0      	mov	r8, r4
 80115f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80115f4:	46a1      	mov	r9, r4
 80115f6:	9a05      	ldr	r2, [sp, #20]
 80115f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011750 <_strtod_l+0x598>
 80115fc:	2322      	movs	r3, #34	@ 0x22
 80115fe:	6013      	str	r3, [r2, #0]
 8011600:	f04f 0a00 	mov.w	sl, #0
 8011604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011606:	2b00      	cmp	r3, #0
 8011608:	f43f ae0f 	beq.w	801122a <_strtod_l+0x72>
 801160c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801160e:	9805      	ldr	r0, [sp, #20]
 8011610:	f7ff f940 	bl	8010894 <_Bfree>
 8011614:	9805      	ldr	r0, [sp, #20]
 8011616:	4649      	mov	r1, r9
 8011618:	f7ff f93c 	bl	8010894 <_Bfree>
 801161c:	9805      	ldr	r0, [sp, #20]
 801161e:	4641      	mov	r1, r8
 8011620:	f7ff f938 	bl	8010894 <_Bfree>
 8011624:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011626:	9805      	ldr	r0, [sp, #20]
 8011628:	f7ff f934 	bl	8010894 <_Bfree>
 801162c:	9805      	ldr	r0, [sp, #20]
 801162e:	4621      	mov	r1, r4
 8011630:	f7ff f930 	bl	8010894 <_Bfree>
 8011634:	e5f9      	b.n	801122a <_strtod_l+0x72>
 8011636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011638:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801163c:	4293      	cmp	r3, r2
 801163e:	dbbc      	blt.n	80115ba <_strtod_l+0x402>
 8011640:	4c41      	ldr	r4, [pc, #260]	@ (8011748 <_strtod_l+0x590>)
 8011642:	f1c5 050f 	rsb	r5, r5, #15
 8011646:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801164a:	4652      	mov	r2, sl
 801164c:	465b      	mov	r3, fp
 801164e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011652:	f7ee ffd1 	bl	80005f8 <__aeabi_dmul>
 8011656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011658:	1b5d      	subs	r5, r3, r5
 801165a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801165e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011662:	e78f      	b.n	8011584 <_strtod_l+0x3cc>
 8011664:	3316      	adds	r3, #22
 8011666:	dba8      	blt.n	80115ba <_strtod_l+0x402>
 8011668:	4b37      	ldr	r3, [pc, #220]	@ (8011748 <_strtod_l+0x590>)
 801166a:	eba9 0808 	sub.w	r8, r9, r8
 801166e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011672:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011676:	4650      	mov	r0, sl
 8011678:	4659      	mov	r1, fp
 801167a:	f7ef f8e7 	bl	800084c <__aeabi_ddiv>
 801167e:	e783      	b.n	8011588 <_strtod_l+0x3d0>
 8011680:	4b32      	ldr	r3, [pc, #200]	@ (801174c <_strtod_l+0x594>)
 8011682:	9308      	str	r3, [sp, #32]
 8011684:	2300      	movs	r3, #0
 8011686:	1124      	asrs	r4, r4, #4
 8011688:	4650      	mov	r0, sl
 801168a:	4659      	mov	r1, fp
 801168c:	461e      	mov	r6, r3
 801168e:	2c01      	cmp	r4, #1
 8011690:	dc21      	bgt.n	80116d6 <_strtod_l+0x51e>
 8011692:	b10b      	cbz	r3, 8011698 <_strtod_l+0x4e0>
 8011694:	4682      	mov	sl, r0
 8011696:	468b      	mov	fp, r1
 8011698:	492c      	ldr	r1, [pc, #176]	@ (801174c <_strtod_l+0x594>)
 801169a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801169e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80116a2:	4652      	mov	r2, sl
 80116a4:	465b      	mov	r3, fp
 80116a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116aa:	f7ee ffa5 	bl	80005f8 <__aeabi_dmul>
 80116ae:	4b28      	ldr	r3, [pc, #160]	@ (8011750 <_strtod_l+0x598>)
 80116b0:	460a      	mov	r2, r1
 80116b2:	400b      	ands	r3, r1
 80116b4:	4927      	ldr	r1, [pc, #156]	@ (8011754 <_strtod_l+0x59c>)
 80116b6:	428b      	cmp	r3, r1
 80116b8:	4682      	mov	sl, r0
 80116ba:	d898      	bhi.n	80115ee <_strtod_l+0x436>
 80116bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80116c0:	428b      	cmp	r3, r1
 80116c2:	bf86      	itte	hi
 80116c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011758 <_strtod_l+0x5a0>
 80116c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80116cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80116d0:	2300      	movs	r3, #0
 80116d2:	9308      	str	r3, [sp, #32]
 80116d4:	e07a      	b.n	80117cc <_strtod_l+0x614>
 80116d6:	07e2      	lsls	r2, r4, #31
 80116d8:	d505      	bpl.n	80116e6 <_strtod_l+0x52e>
 80116da:	9b08      	ldr	r3, [sp, #32]
 80116dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e0:	f7ee ff8a 	bl	80005f8 <__aeabi_dmul>
 80116e4:	2301      	movs	r3, #1
 80116e6:	9a08      	ldr	r2, [sp, #32]
 80116e8:	3208      	adds	r2, #8
 80116ea:	3601      	adds	r6, #1
 80116ec:	1064      	asrs	r4, r4, #1
 80116ee:	9208      	str	r2, [sp, #32]
 80116f0:	e7cd      	b.n	801168e <_strtod_l+0x4d6>
 80116f2:	d0ed      	beq.n	80116d0 <_strtod_l+0x518>
 80116f4:	4264      	negs	r4, r4
 80116f6:	f014 020f 	ands.w	r2, r4, #15
 80116fa:	d00a      	beq.n	8011712 <_strtod_l+0x55a>
 80116fc:	4b12      	ldr	r3, [pc, #72]	@ (8011748 <_strtod_l+0x590>)
 80116fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011702:	4650      	mov	r0, sl
 8011704:	4659      	mov	r1, fp
 8011706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170a:	f7ef f89f 	bl	800084c <__aeabi_ddiv>
 801170e:	4682      	mov	sl, r0
 8011710:	468b      	mov	fp, r1
 8011712:	1124      	asrs	r4, r4, #4
 8011714:	d0dc      	beq.n	80116d0 <_strtod_l+0x518>
 8011716:	2c1f      	cmp	r4, #31
 8011718:	dd20      	ble.n	801175c <_strtod_l+0x5a4>
 801171a:	2400      	movs	r4, #0
 801171c:	46a0      	mov	r8, r4
 801171e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011720:	46a1      	mov	r9, r4
 8011722:	9a05      	ldr	r2, [sp, #20]
 8011724:	2322      	movs	r3, #34	@ 0x22
 8011726:	f04f 0a00 	mov.w	sl, #0
 801172a:	f04f 0b00 	mov.w	fp, #0
 801172e:	6013      	str	r3, [r2, #0]
 8011730:	e768      	b.n	8011604 <_strtod_l+0x44c>
 8011732:	bf00      	nop
 8011734:	0801482e 	.word	0x0801482e
 8011738:	08014ad4 	.word	0x08014ad4
 801173c:	08014826 	.word	0x08014826
 8011740:	08014908 	.word	0x08014908
 8011744:	08014904 	.word	0x08014904
 8011748:	08014a08 	.word	0x08014a08
 801174c:	080149e0 	.word	0x080149e0
 8011750:	7ff00000 	.word	0x7ff00000
 8011754:	7ca00000 	.word	0x7ca00000
 8011758:	7fefffff 	.word	0x7fefffff
 801175c:	f014 0310 	ands.w	r3, r4, #16
 8011760:	bf18      	it	ne
 8011762:	236a      	movne	r3, #106	@ 0x6a
 8011764:	4ea9      	ldr	r6, [pc, #676]	@ (8011a0c <_strtod_l+0x854>)
 8011766:	9308      	str	r3, [sp, #32]
 8011768:	4650      	mov	r0, sl
 801176a:	4659      	mov	r1, fp
 801176c:	2300      	movs	r3, #0
 801176e:	07e2      	lsls	r2, r4, #31
 8011770:	d504      	bpl.n	801177c <_strtod_l+0x5c4>
 8011772:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011776:	f7ee ff3f 	bl	80005f8 <__aeabi_dmul>
 801177a:	2301      	movs	r3, #1
 801177c:	1064      	asrs	r4, r4, #1
 801177e:	f106 0608 	add.w	r6, r6, #8
 8011782:	d1f4      	bne.n	801176e <_strtod_l+0x5b6>
 8011784:	b10b      	cbz	r3, 801178a <_strtod_l+0x5d2>
 8011786:	4682      	mov	sl, r0
 8011788:	468b      	mov	fp, r1
 801178a:	9b08      	ldr	r3, [sp, #32]
 801178c:	b1b3      	cbz	r3, 80117bc <_strtod_l+0x604>
 801178e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011792:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011796:	2b00      	cmp	r3, #0
 8011798:	4659      	mov	r1, fp
 801179a:	dd0f      	ble.n	80117bc <_strtod_l+0x604>
 801179c:	2b1f      	cmp	r3, #31
 801179e:	dd55      	ble.n	801184c <_strtod_l+0x694>
 80117a0:	2b34      	cmp	r3, #52	@ 0x34
 80117a2:	bfde      	ittt	le
 80117a4:	f04f 33ff 	movle.w	r3, #4294967295
 80117a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80117ac:	4093      	lslle	r3, r2
 80117ae:	f04f 0a00 	mov.w	sl, #0
 80117b2:	bfcc      	ite	gt
 80117b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80117b8:	ea03 0b01 	andle.w	fp, r3, r1
 80117bc:	2200      	movs	r2, #0
 80117be:	2300      	movs	r3, #0
 80117c0:	4650      	mov	r0, sl
 80117c2:	4659      	mov	r1, fp
 80117c4:	f7ef f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d1a6      	bne.n	801171a <_strtod_l+0x562>
 80117cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80117d2:	9805      	ldr	r0, [sp, #20]
 80117d4:	462b      	mov	r3, r5
 80117d6:	463a      	mov	r2, r7
 80117d8:	f7ff f8c4 	bl	8010964 <__s2b>
 80117dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80117de:	2800      	cmp	r0, #0
 80117e0:	f43f af05 	beq.w	80115ee <_strtod_l+0x436>
 80117e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117e6:	2a00      	cmp	r2, #0
 80117e8:	eba9 0308 	sub.w	r3, r9, r8
 80117ec:	bfa8      	it	ge
 80117ee:	2300      	movge	r3, #0
 80117f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80117f2:	2400      	movs	r4, #0
 80117f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80117f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80117fa:	46a0      	mov	r8, r4
 80117fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117fe:	9805      	ldr	r0, [sp, #20]
 8011800:	6859      	ldr	r1, [r3, #4]
 8011802:	f7ff f807 	bl	8010814 <_Balloc>
 8011806:	4681      	mov	r9, r0
 8011808:	2800      	cmp	r0, #0
 801180a:	f43f aef4 	beq.w	80115f6 <_strtod_l+0x43e>
 801180e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011810:	691a      	ldr	r2, [r3, #16]
 8011812:	3202      	adds	r2, #2
 8011814:	f103 010c 	add.w	r1, r3, #12
 8011818:	0092      	lsls	r2, r2, #2
 801181a:	300c      	adds	r0, #12
 801181c:	f001 f873 	bl	8012906 <memcpy>
 8011820:	ec4b ab10 	vmov	d0, sl, fp
 8011824:	9805      	ldr	r0, [sp, #20]
 8011826:	aa1c      	add	r2, sp, #112	@ 0x70
 8011828:	a91b      	add	r1, sp, #108	@ 0x6c
 801182a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801182e:	f7ff fbd5 	bl	8010fdc <__d2b>
 8011832:	901a      	str	r0, [sp, #104]	@ 0x68
 8011834:	2800      	cmp	r0, #0
 8011836:	f43f aede 	beq.w	80115f6 <_strtod_l+0x43e>
 801183a:	9805      	ldr	r0, [sp, #20]
 801183c:	2101      	movs	r1, #1
 801183e:	f7ff f927 	bl	8010a90 <__i2b>
 8011842:	4680      	mov	r8, r0
 8011844:	b948      	cbnz	r0, 801185a <_strtod_l+0x6a2>
 8011846:	f04f 0800 	mov.w	r8, #0
 801184a:	e6d4      	b.n	80115f6 <_strtod_l+0x43e>
 801184c:	f04f 32ff 	mov.w	r2, #4294967295
 8011850:	fa02 f303 	lsl.w	r3, r2, r3
 8011854:	ea03 0a0a 	and.w	sl, r3, sl
 8011858:	e7b0      	b.n	80117bc <_strtod_l+0x604>
 801185a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801185c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801185e:	2d00      	cmp	r5, #0
 8011860:	bfab      	itete	ge
 8011862:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011864:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011866:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011868:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801186a:	bfac      	ite	ge
 801186c:	18ef      	addge	r7, r5, r3
 801186e:	1b5e      	sublt	r6, r3, r5
 8011870:	9b08      	ldr	r3, [sp, #32]
 8011872:	1aed      	subs	r5, r5, r3
 8011874:	4415      	add	r5, r2
 8011876:	4b66      	ldr	r3, [pc, #408]	@ (8011a10 <_strtod_l+0x858>)
 8011878:	3d01      	subs	r5, #1
 801187a:	429d      	cmp	r5, r3
 801187c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011880:	da50      	bge.n	8011924 <_strtod_l+0x76c>
 8011882:	1b5b      	subs	r3, r3, r5
 8011884:	2b1f      	cmp	r3, #31
 8011886:	eba2 0203 	sub.w	r2, r2, r3
 801188a:	f04f 0101 	mov.w	r1, #1
 801188e:	dc3d      	bgt.n	801190c <_strtod_l+0x754>
 8011890:	fa01 f303 	lsl.w	r3, r1, r3
 8011894:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011896:	2300      	movs	r3, #0
 8011898:	9310      	str	r3, [sp, #64]	@ 0x40
 801189a:	18bd      	adds	r5, r7, r2
 801189c:	9b08      	ldr	r3, [sp, #32]
 801189e:	42af      	cmp	r7, r5
 80118a0:	4416      	add	r6, r2
 80118a2:	441e      	add	r6, r3
 80118a4:	463b      	mov	r3, r7
 80118a6:	bfa8      	it	ge
 80118a8:	462b      	movge	r3, r5
 80118aa:	42b3      	cmp	r3, r6
 80118ac:	bfa8      	it	ge
 80118ae:	4633      	movge	r3, r6
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	bfc2      	ittt	gt
 80118b4:	1aed      	subgt	r5, r5, r3
 80118b6:	1af6      	subgt	r6, r6, r3
 80118b8:	1aff      	subgt	r7, r7, r3
 80118ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80118bc:	2b00      	cmp	r3, #0
 80118be:	dd16      	ble.n	80118ee <_strtod_l+0x736>
 80118c0:	4641      	mov	r1, r8
 80118c2:	9805      	ldr	r0, [sp, #20]
 80118c4:	461a      	mov	r2, r3
 80118c6:	f7ff f9a3 	bl	8010c10 <__pow5mult>
 80118ca:	4680      	mov	r8, r0
 80118cc:	2800      	cmp	r0, #0
 80118ce:	d0ba      	beq.n	8011846 <_strtod_l+0x68e>
 80118d0:	4601      	mov	r1, r0
 80118d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80118d4:	9805      	ldr	r0, [sp, #20]
 80118d6:	f7ff f8f1 	bl	8010abc <__multiply>
 80118da:	900e      	str	r0, [sp, #56]	@ 0x38
 80118dc:	2800      	cmp	r0, #0
 80118de:	f43f ae8a 	beq.w	80115f6 <_strtod_l+0x43e>
 80118e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80118e4:	9805      	ldr	r0, [sp, #20]
 80118e6:	f7fe ffd5 	bl	8010894 <_Bfree>
 80118ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80118ee:	2d00      	cmp	r5, #0
 80118f0:	dc1d      	bgt.n	801192e <_strtod_l+0x776>
 80118f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	dd23      	ble.n	8011940 <_strtod_l+0x788>
 80118f8:	4649      	mov	r1, r9
 80118fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80118fc:	9805      	ldr	r0, [sp, #20]
 80118fe:	f7ff f987 	bl	8010c10 <__pow5mult>
 8011902:	4681      	mov	r9, r0
 8011904:	b9e0      	cbnz	r0, 8011940 <_strtod_l+0x788>
 8011906:	f04f 0900 	mov.w	r9, #0
 801190a:	e674      	b.n	80115f6 <_strtod_l+0x43e>
 801190c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011910:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011914:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011918:	35e2      	adds	r5, #226	@ 0xe2
 801191a:	fa01 f305 	lsl.w	r3, r1, r5
 801191e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011920:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011922:	e7ba      	b.n	801189a <_strtod_l+0x6e2>
 8011924:	2300      	movs	r3, #0
 8011926:	9310      	str	r3, [sp, #64]	@ 0x40
 8011928:	2301      	movs	r3, #1
 801192a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801192c:	e7b5      	b.n	801189a <_strtod_l+0x6e2>
 801192e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011930:	9805      	ldr	r0, [sp, #20]
 8011932:	462a      	mov	r2, r5
 8011934:	f7ff f9c6 	bl	8010cc4 <__lshift>
 8011938:	901a      	str	r0, [sp, #104]	@ 0x68
 801193a:	2800      	cmp	r0, #0
 801193c:	d1d9      	bne.n	80118f2 <_strtod_l+0x73a>
 801193e:	e65a      	b.n	80115f6 <_strtod_l+0x43e>
 8011940:	2e00      	cmp	r6, #0
 8011942:	dd07      	ble.n	8011954 <_strtod_l+0x79c>
 8011944:	4649      	mov	r1, r9
 8011946:	9805      	ldr	r0, [sp, #20]
 8011948:	4632      	mov	r2, r6
 801194a:	f7ff f9bb 	bl	8010cc4 <__lshift>
 801194e:	4681      	mov	r9, r0
 8011950:	2800      	cmp	r0, #0
 8011952:	d0d8      	beq.n	8011906 <_strtod_l+0x74e>
 8011954:	2f00      	cmp	r7, #0
 8011956:	dd08      	ble.n	801196a <_strtod_l+0x7b2>
 8011958:	4641      	mov	r1, r8
 801195a:	9805      	ldr	r0, [sp, #20]
 801195c:	463a      	mov	r2, r7
 801195e:	f7ff f9b1 	bl	8010cc4 <__lshift>
 8011962:	4680      	mov	r8, r0
 8011964:	2800      	cmp	r0, #0
 8011966:	f43f ae46 	beq.w	80115f6 <_strtod_l+0x43e>
 801196a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801196c:	9805      	ldr	r0, [sp, #20]
 801196e:	464a      	mov	r2, r9
 8011970:	f7ff fa30 	bl	8010dd4 <__mdiff>
 8011974:	4604      	mov	r4, r0
 8011976:	2800      	cmp	r0, #0
 8011978:	f43f ae3d 	beq.w	80115f6 <_strtod_l+0x43e>
 801197c:	68c3      	ldr	r3, [r0, #12]
 801197e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011980:	2300      	movs	r3, #0
 8011982:	60c3      	str	r3, [r0, #12]
 8011984:	4641      	mov	r1, r8
 8011986:	f7ff fa09 	bl	8010d9c <__mcmp>
 801198a:	2800      	cmp	r0, #0
 801198c:	da46      	bge.n	8011a1c <_strtod_l+0x864>
 801198e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011990:	ea53 030a 	orrs.w	r3, r3, sl
 8011994:	d16c      	bne.n	8011a70 <_strtod_l+0x8b8>
 8011996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801199a:	2b00      	cmp	r3, #0
 801199c:	d168      	bne.n	8011a70 <_strtod_l+0x8b8>
 801199e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119a2:	0d1b      	lsrs	r3, r3, #20
 80119a4:	051b      	lsls	r3, r3, #20
 80119a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80119aa:	d961      	bls.n	8011a70 <_strtod_l+0x8b8>
 80119ac:	6963      	ldr	r3, [r4, #20]
 80119ae:	b913      	cbnz	r3, 80119b6 <_strtod_l+0x7fe>
 80119b0:	6923      	ldr	r3, [r4, #16]
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	dd5c      	ble.n	8011a70 <_strtod_l+0x8b8>
 80119b6:	4621      	mov	r1, r4
 80119b8:	2201      	movs	r2, #1
 80119ba:	9805      	ldr	r0, [sp, #20]
 80119bc:	f7ff f982 	bl	8010cc4 <__lshift>
 80119c0:	4641      	mov	r1, r8
 80119c2:	4604      	mov	r4, r0
 80119c4:	f7ff f9ea 	bl	8010d9c <__mcmp>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	dd51      	ble.n	8011a70 <_strtod_l+0x8b8>
 80119cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119d0:	9a08      	ldr	r2, [sp, #32]
 80119d2:	0d1b      	lsrs	r3, r3, #20
 80119d4:	051b      	lsls	r3, r3, #20
 80119d6:	2a00      	cmp	r2, #0
 80119d8:	d06b      	beq.n	8011ab2 <_strtod_l+0x8fa>
 80119da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80119de:	d868      	bhi.n	8011ab2 <_strtod_l+0x8fa>
 80119e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80119e4:	f67f ae9d 	bls.w	8011722 <_strtod_l+0x56a>
 80119e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011a14 <_strtod_l+0x85c>)
 80119ea:	4650      	mov	r0, sl
 80119ec:	4659      	mov	r1, fp
 80119ee:	2200      	movs	r2, #0
 80119f0:	f7ee fe02 	bl	80005f8 <__aeabi_dmul>
 80119f4:	4b08      	ldr	r3, [pc, #32]	@ (8011a18 <_strtod_l+0x860>)
 80119f6:	400b      	ands	r3, r1
 80119f8:	4682      	mov	sl, r0
 80119fa:	468b      	mov	fp, r1
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f47f ae05 	bne.w	801160c <_strtod_l+0x454>
 8011a02:	9a05      	ldr	r2, [sp, #20]
 8011a04:	2322      	movs	r3, #34	@ 0x22
 8011a06:	6013      	str	r3, [r2, #0]
 8011a08:	e600      	b.n	801160c <_strtod_l+0x454>
 8011a0a:	bf00      	nop
 8011a0c:	08014b00 	.word	0x08014b00
 8011a10:	fffffc02 	.word	0xfffffc02
 8011a14:	39500000 	.word	0x39500000
 8011a18:	7ff00000 	.word	0x7ff00000
 8011a1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011a20:	d165      	bne.n	8011aee <_strtod_l+0x936>
 8011a22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011a24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a28:	b35a      	cbz	r2, 8011a82 <_strtod_l+0x8ca>
 8011a2a:	4a9f      	ldr	r2, [pc, #636]	@ (8011ca8 <_strtod_l+0xaf0>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d12b      	bne.n	8011a88 <_strtod_l+0x8d0>
 8011a30:	9b08      	ldr	r3, [sp, #32]
 8011a32:	4651      	mov	r1, sl
 8011a34:	b303      	cbz	r3, 8011a78 <_strtod_l+0x8c0>
 8011a36:	4b9d      	ldr	r3, [pc, #628]	@ (8011cac <_strtod_l+0xaf4>)
 8011a38:	465a      	mov	r2, fp
 8011a3a:	4013      	ands	r3, r2
 8011a3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011a40:	f04f 32ff 	mov.w	r2, #4294967295
 8011a44:	d81b      	bhi.n	8011a7e <_strtod_l+0x8c6>
 8011a46:	0d1b      	lsrs	r3, r3, #20
 8011a48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a50:	4299      	cmp	r1, r3
 8011a52:	d119      	bne.n	8011a88 <_strtod_l+0x8d0>
 8011a54:	4b96      	ldr	r3, [pc, #600]	@ (8011cb0 <_strtod_l+0xaf8>)
 8011a56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d102      	bne.n	8011a62 <_strtod_l+0x8aa>
 8011a5c:	3101      	adds	r1, #1
 8011a5e:	f43f adca 	beq.w	80115f6 <_strtod_l+0x43e>
 8011a62:	4b92      	ldr	r3, [pc, #584]	@ (8011cac <_strtod_l+0xaf4>)
 8011a64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a66:	401a      	ands	r2, r3
 8011a68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011a6c:	f04f 0a00 	mov.w	sl, #0
 8011a70:	9b08      	ldr	r3, [sp, #32]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d1b8      	bne.n	80119e8 <_strtod_l+0x830>
 8011a76:	e5c9      	b.n	801160c <_strtod_l+0x454>
 8011a78:	f04f 33ff 	mov.w	r3, #4294967295
 8011a7c:	e7e8      	b.n	8011a50 <_strtod_l+0x898>
 8011a7e:	4613      	mov	r3, r2
 8011a80:	e7e6      	b.n	8011a50 <_strtod_l+0x898>
 8011a82:	ea53 030a 	orrs.w	r3, r3, sl
 8011a86:	d0a1      	beq.n	80119cc <_strtod_l+0x814>
 8011a88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a8a:	b1db      	cbz	r3, 8011ac4 <_strtod_l+0x90c>
 8011a8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a8e:	4213      	tst	r3, r2
 8011a90:	d0ee      	beq.n	8011a70 <_strtod_l+0x8b8>
 8011a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a94:	9a08      	ldr	r2, [sp, #32]
 8011a96:	4650      	mov	r0, sl
 8011a98:	4659      	mov	r1, fp
 8011a9a:	b1bb      	cbz	r3, 8011acc <_strtod_l+0x914>
 8011a9c:	f7ff fb6c 	bl	8011178 <sulp>
 8011aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011aa4:	ec53 2b10 	vmov	r2, r3, d0
 8011aa8:	f7ee fbf0 	bl	800028c <__adddf3>
 8011aac:	4682      	mov	sl, r0
 8011aae:	468b      	mov	fp, r1
 8011ab0:	e7de      	b.n	8011a70 <_strtod_l+0x8b8>
 8011ab2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011ab6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011aba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011abe:	f04f 3aff 	mov.w	sl, #4294967295
 8011ac2:	e7d5      	b.n	8011a70 <_strtod_l+0x8b8>
 8011ac4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011ac6:	ea13 0f0a 	tst.w	r3, sl
 8011aca:	e7e1      	b.n	8011a90 <_strtod_l+0x8d8>
 8011acc:	f7ff fb54 	bl	8011178 <sulp>
 8011ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ad4:	ec53 2b10 	vmov	r2, r3, d0
 8011ad8:	f7ee fbd6 	bl	8000288 <__aeabi_dsub>
 8011adc:	2200      	movs	r2, #0
 8011ade:	2300      	movs	r3, #0
 8011ae0:	4682      	mov	sl, r0
 8011ae2:	468b      	mov	fp, r1
 8011ae4:	f7ee fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d0c1      	beq.n	8011a70 <_strtod_l+0x8b8>
 8011aec:	e619      	b.n	8011722 <_strtod_l+0x56a>
 8011aee:	4641      	mov	r1, r8
 8011af0:	4620      	mov	r0, r4
 8011af2:	f7ff facb 	bl	801108c <__ratio>
 8011af6:	ec57 6b10 	vmov	r6, r7, d0
 8011afa:	2200      	movs	r2, #0
 8011afc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011b00:	4630      	mov	r0, r6
 8011b02:	4639      	mov	r1, r7
 8011b04:	f7ee fff4 	bl	8000af0 <__aeabi_dcmple>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d06f      	beq.n	8011bec <_strtod_l+0xa34>
 8011b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d17a      	bne.n	8011c08 <_strtod_l+0xa50>
 8011b12:	f1ba 0f00 	cmp.w	sl, #0
 8011b16:	d158      	bne.n	8011bca <_strtod_l+0xa12>
 8011b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d15a      	bne.n	8011bd8 <_strtod_l+0xa20>
 8011b22:	4b64      	ldr	r3, [pc, #400]	@ (8011cb4 <_strtod_l+0xafc>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	4630      	mov	r0, r6
 8011b28:	4639      	mov	r1, r7
 8011b2a:	f7ee ffd7 	bl	8000adc <__aeabi_dcmplt>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d159      	bne.n	8011be6 <_strtod_l+0xa2e>
 8011b32:	4630      	mov	r0, r6
 8011b34:	4639      	mov	r1, r7
 8011b36:	4b60      	ldr	r3, [pc, #384]	@ (8011cb8 <_strtod_l+0xb00>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f7ee fd5d 	bl	80005f8 <__aeabi_dmul>
 8011b3e:	4606      	mov	r6, r0
 8011b40:	460f      	mov	r7, r1
 8011b42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011b46:	9606      	str	r6, [sp, #24]
 8011b48:	9307      	str	r3, [sp, #28]
 8011b4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b4e:	4d57      	ldr	r5, [pc, #348]	@ (8011cac <_strtod_l+0xaf4>)
 8011b50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b56:	401d      	ands	r5, r3
 8011b58:	4b58      	ldr	r3, [pc, #352]	@ (8011cbc <_strtod_l+0xb04>)
 8011b5a:	429d      	cmp	r5, r3
 8011b5c:	f040 80b2 	bne.w	8011cc4 <_strtod_l+0xb0c>
 8011b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011b66:	ec4b ab10 	vmov	d0, sl, fp
 8011b6a:	f7ff f9c7 	bl	8010efc <__ulp>
 8011b6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b72:	ec51 0b10 	vmov	r0, r1, d0
 8011b76:	f7ee fd3f 	bl	80005f8 <__aeabi_dmul>
 8011b7a:	4652      	mov	r2, sl
 8011b7c:	465b      	mov	r3, fp
 8011b7e:	f7ee fb85 	bl	800028c <__adddf3>
 8011b82:	460b      	mov	r3, r1
 8011b84:	4949      	ldr	r1, [pc, #292]	@ (8011cac <_strtod_l+0xaf4>)
 8011b86:	4a4e      	ldr	r2, [pc, #312]	@ (8011cc0 <_strtod_l+0xb08>)
 8011b88:	4019      	ands	r1, r3
 8011b8a:	4291      	cmp	r1, r2
 8011b8c:	4682      	mov	sl, r0
 8011b8e:	d942      	bls.n	8011c16 <_strtod_l+0xa5e>
 8011b90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011b92:	4b47      	ldr	r3, [pc, #284]	@ (8011cb0 <_strtod_l+0xaf8>)
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d103      	bne.n	8011ba0 <_strtod_l+0x9e8>
 8011b98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	f43f ad2b 	beq.w	80115f6 <_strtod_l+0x43e>
 8011ba0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011cb0 <_strtod_l+0xaf8>
 8011ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8011ba8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011baa:	9805      	ldr	r0, [sp, #20]
 8011bac:	f7fe fe72 	bl	8010894 <_Bfree>
 8011bb0:	9805      	ldr	r0, [sp, #20]
 8011bb2:	4649      	mov	r1, r9
 8011bb4:	f7fe fe6e 	bl	8010894 <_Bfree>
 8011bb8:	9805      	ldr	r0, [sp, #20]
 8011bba:	4641      	mov	r1, r8
 8011bbc:	f7fe fe6a 	bl	8010894 <_Bfree>
 8011bc0:	9805      	ldr	r0, [sp, #20]
 8011bc2:	4621      	mov	r1, r4
 8011bc4:	f7fe fe66 	bl	8010894 <_Bfree>
 8011bc8:	e618      	b.n	80117fc <_strtod_l+0x644>
 8011bca:	f1ba 0f01 	cmp.w	sl, #1
 8011bce:	d103      	bne.n	8011bd8 <_strtod_l+0xa20>
 8011bd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f43f ada5 	beq.w	8011722 <_strtod_l+0x56a>
 8011bd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011c88 <_strtod_l+0xad0>
 8011bdc:	4f35      	ldr	r7, [pc, #212]	@ (8011cb4 <_strtod_l+0xafc>)
 8011bde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011be2:	2600      	movs	r6, #0
 8011be4:	e7b1      	b.n	8011b4a <_strtod_l+0x992>
 8011be6:	4f34      	ldr	r7, [pc, #208]	@ (8011cb8 <_strtod_l+0xb00>)
 8011be8:	2600      	movs	r6, #0
 8011bea:	e7aa      	b.n	8011b42 <_strtod_l+0x98a>
 8011bec:	4b32      	ldr	r3, [pc, #200]	@ (8011cb8 <_strtod_l+0xb00>)
 8011bee:	4630      	mov	r0, r6
 8011bf0:	4639      	mov	r1, r7
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f7ee fd00 	bl	80005f8 <__aeabi_dmul>
 8011bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bfa:	4606      	mov	r6, r0
 8011bfc:	460f      	mov	r7, r1
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d09f      	beq.n	8011b42 <_strtod_l+0x98a>
 8011c02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011c06:	e7a0      	b.n	8011b4a <_strtod_l+0x992>
 8011c08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011c90 <_strtod_l+0xad8>
 8011c0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c10:	ec57 6b17 	vmov	r6, r7, d7
 8011c14:	e799      	b.n	8011b4a <_strtod_l+0x992>
 8011c16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011c1a:	9b08      	ldr	r3, [sp, #32]
 8011c1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d1c1      	bne.n	8011ba8 <_strtod_l+0x9f0>
 8011c24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011c28:	0d1b      	lsrs	r3, r3, #20
 8011c2a:	051b      	lsls	r3, r3, #20
 8011c2c:	429d      	cmp	r5, r3
 8011c2e:	d1bb      	bne.n	8011ba8 <_strtod_l+0x9f0>
 8011c30:	4630      	mov	r0, r6
 8011c32:	4639      	mov	r1, r7
 8011c34:	f7ef f840 	bl	8000cb8 <__aeabi_d2lz>
 8011c38:	f7ee fcb0 	bl	800059c <__aeabi_l2d>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	460b      	mov	r3, r1
 8011c40:	4630      	mov	r0, r6
 8011c42:	4639      	mov	r1, r7
 8011c44:	f7ee fb20 	bl	8000288 <__aeabi_dsub>
 8011c48:	460b      	mov	r3, r1
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011c50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c56:	ea46 060a 	orr.w	r6, r6, sl
 8011c5a:	431e      	orrs	r6, r3
 8011c5c:	d06f      	beq.n	8011d3e <_strtod_l+0xb86>
 8011c5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011c98 <_strtod_l+0xae0>)
 8011c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c64:	f7ee ff3a 	bl	8000adc <__aeabi_dcmplt>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	f47f accf 	bne.w	801160c <_strtod_l+0x454>
 8011c6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011ca0 <_strtod_l+0xae8>)
 8011c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c78:	f7ee ff4e 	bl	8000b18 <__aeabi_dcmpgt>
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	d093      	beq.n	8011ba8 <_strtod_l+0x9f0>
 8011c80:	e4c4      	b.n	801160c <_strtod_l+0x454>
 8011c82:	bf00      	nop
 8011c84:	f3af 8000 	nop.w
 8011c88:	00000000 	.word	0x00000000
 8011c8c:	bff00000 	.word	0xbff00000
 8011c90:	00000000 	.word	0x00000000
 8011c94:	3ff00000 	.word	0x3ff00000
 8011c98:	94a03595 	.word	0x94a03595
 8011c9c:	3fdfffff 	.word	0x3fdfffff
 8011ca0:	35afe535 	.word	0x35afe535
 8011ca4:	3fe00000 	.word	0x3fe00000
 8011ca8:	000fffff 	.word	0x000fffff
 8011cac:	7ff00000 	.word	0x7ff00000
 8011cb0:	7fefffff 	.word	0x7fefffff
 8011cb4:	3ff00000 	.word	0x3ff00000
 8011cb8:	3fe00000 	.word	0x3fe00000
 8011cbc:	7fe00000 	.word	0x7fe00000
 8011cc0:	7c9fffff 	.word	0x7c9fffff
 8011cc4:	9b08      	ldr	r3, [sp, #32]
 8011cc6:	b323      	cbz	r3, 8011d12 <_strtod_l+0xb5a>
 8011cc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011ccc:	d821      	bhi.n	8011d12 <_strtod_l+0xb5a>
 8011cce:	a328      	add	r3, pc, #160	@ (adr r3, 8011d70 <_strtod_l+0xbb8>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	4639      	mov	r1, r7
 8011cd8:	f7ee ff0a 	bl	8000af0 <__aeabi_dcmple>
 8011cdc:	b1a0      	cbz	r0, 8011d08 <_strtod_l+0xb50>
 8011cde:	4639      	mov	r1, r7
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7ee ff61 	bl	8000ba8 <__aeabi_d2uiz>
 8011ce6:	2801      	cmp	r0, #1
 8011ce8:	bf38      	it	cc
 8011cea:	2001      	movcc	r0, #1
 8011cec:	f7ee fc0a 	bl	8000504 <__aeabi_ui2d>
 8011cf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cf2:	4606      	mov	r6, r0
 8011cf4:	460f      	mov	r7, r1
 8011cf6:	b9fb      	cbnz	r3, 8011d38 <_strtod_l+0xb80>
 8011cf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011cfc:	9014      	str	r0, [sp, #80]	@ 0x50
 8011cfe:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011d04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011d0e:	1b5b      	subs	r3, r3, r5
 8011d10:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011d16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011d1a:	f7ff f8ef 	bl	8010efc <__ulp>
 8011d1e:	4650      	mov	r0, sl
 8011d20:	ec53 2b10 	vmov	r2, r3, d0
 8011d24:	4659      	mov	r1, fp
 8011d26:	f7ee fc67 	bl	80005f8 <__aeabi_dmul>
 8011d2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011d2e:	f7ee faad 	bl	800028c <__adddf3>
 8011d32:	4682      	mov	sl, r0
 8011d34:	468b      	mov	fp, r1
 8011d36:	e770      	b.n	8011c1a <_strtod_l+0xa62>
 8011d38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011d3c:	e7e0      	b.n	8011d00 <_strtod_l+0xb48>
 8011d3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011d78 <_strtod_l+0xbc0>)
 8011d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d44:	f7ee feca 	bl	8000adc <__aeabi_dcmplt>
 8011d48:	e798      	b.n	8011c7c <_strtod_l+0xac4>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d52:	6013      	str	r3, [r2, #0]
 8011d54:	f7ff ba6d 	b.w	8011232 <_strtod_l+0x7a>
 8011d58:	2a65      	cmp	r2, #101	@ 0x65
 8011d5a:	f43f ab66 	beq.w	801142a <_strtod_l+0x272>
 8011d5e:	2a45      	cmp	r2, #69	@ 0x45
 8011d60:	f43f ab63 	beq.w	801142a <_strtod_l+0x272>
 8011d64:	2301      	movs	r3, #1
 8011d66:	f7ff bb9e 	b.w	80114a6 <_strtod_l+0x2ee>
 8011d6a:	bf00      	nop
 8011d6c:	f3af 8000 	nop.w
 8011d70:	ffc00000 	.word	0xffc00000
 8011d74:	41dfffff 	.word	0x41dfffff
 8011d78:	94a03595 	.word	0x94a03595
 8011d7c:	3fcfffff 	.word	0x3fcfffff

08011d80 <_strtod_r>:
 8011d80:	4b01      	ldr	r3, [pc, #4]	@ (8011d88 <_strtod_r+0x8>)
 8011d82:	f7ff ba19 	b.w	80111b8 <_strtod_l>
 8011d86:	bf00      	nop
 8011d88:	20000088 	.word	0x20000088

08011d8c <__ssputs_r>:
 8011d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d90:	688e      	ldr	r6, [r1, #8]
 8011d92:	461f      	mov	r7, r3
 8011d94:	42be      	cmp	r6, r7
 8011d96:	680b      	ldr	r3, [r1, #0]
 8011d98:	4682      	mov	sl, r0
 8011d9a:	460c      	mov	r4, r1
 8011d9c:	4690      	mov	r8, r2
 8011d9e:	d82d      	bhi.n	8011dfc <__ssputs_r+0x70>
 8011da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011da4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011da8:	d026      	beq.n	8011df8 <__ssputs_r+0x6c>
 8011daa:	6965      	ldr	r5, [r4, #20]
 8011dac:	6909      	ldr	r1, [r1, #16]
 8011dae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011db2:	eba3 0901 	sub.w	r9, r3, r1
 8011db6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dba:	1c7b      	adds	r3, r7, #1
 8011dbc:	444b      	add	r3, r9
 8011dbe:	106d      	asrs	r5, r5, #1
 8011dc0:	429d      	cmp	r5, r3
 8011dc2:	bf38      	it	cc
 8011dc4:	461d      	movcc	r5, r3
 8011dc6:	0553      	lsls	r3, r2, #21
 8011dc8:	d527      	bpl.n	8011e1a <__ssputs_r+0x8e>
 8011dca:	4629      	mov	r1, r5
 8011dcc:	f7fc fc58 	bl	800e680 <_malloc_r>
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	b360      	cbz	r0, 8011e2e <__ssputs_r+0xa2>
 8011dd4:	6921      	ldr	r1, [r4, #16]
 8011dd6:	464a      	mov	r2, r9
 8011dd8:	f000 fd95 	bl	8012906 <memcpy>
 8011ddc:	89a3      	ldrh	r3, [r4, #12]
 8011dde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011de6:	81a3      	strh	r3, [r4, #12]
 8011de8:	6126      	str	r6, [r4, #16]
 8011dea:	6165      	str	r5, [r4, #20]
 8011dec:	444e      	add	r6, r9
 8011dee:	eba5 0509 	sub.w	r5, r5, r9
 8011df2:	6026      	str	r6, [r4, #0]
 8011df4:	60a5      	str	r5, [r4, #8]
 8011df6:	463e      	mov	r6, r7
 8011df8:	42be      	cmp	r6, r7
 8011dfa:	d900      	bls.n	8011dfe <__ssputs_r+0x72>
 8011dfc:	463e      	mov	r6, r7
 8011dfe:	6820      	ldr	r0, [r4, #0]
 8011e00:	4632      	mov	r2, r6
 8011e02:	4641      	mov	r1, r8
 8011e04:	f000 fd65 	bl	80128d2 <memmove>
 8011e08:	68a3      	ldr	r3, [r4, #8]
 8011e0a:	1b9b      	subs	r3, r3, r6
 8011e0c:	60a3      	str	r3, [r4, #8]
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	4433      	add	r3, r6
 8011e12:	6023      	str	r3, [r4, #0]
 8011e14:	2000      	movs	r0, #0
 8011e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e1a:	462a      	mov	r2, r5
 8011e1c:	f001 f8f1 	bl	8013002 <_realloc_r>
 8011e20:	4606      	mov	r6, r0
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d1e0      	bne.n	8011de8 <__ssputs_r+0x5c>
 8011e26:	6921      	ldr	r1, [r4, #16]
 8011e28:	4650      	mov	r0, sl
 8011e2a:	f7fe fca9 	bl	8010780 <_free_r>
 8011e2e:	230c      	movs	r3, #12
 8011e30:	f8ca 3000 	str.w	r3, [sl]
 8011e34:	89a3      	ldrh	r3, [r4, #12]
 8011e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e3a:	81a3      	strh	r3, [r4, #12]
 8011e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e40:	e7e9      	b.n	8011e16 <__ssputs_r+0x8a>
	...

08011e44 <_svfiprintf_r>:
 8011e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e48:	4698      	mov	r8, r3
 8011e4a:	898b      	ldrh	r3, [r1, #12]
 8011e4c:	061b      	lsls	r3, r3, #24
 8011e4e:	b09d      	sub	sp, #116	@ 0x74
 8011e50:	4607      	mov	r7, r0
 8011e52:	460d      	mov	r5, r1
 8011e54:	4614      	mov	r4, r2
 8011e56:	d510      	bpl.n	8011e7a <_svfiprintf_r+0x36>
 8011e58:	690b      	ldr	r3, [r1, #16]
 8011e5a:	b973      	cbnz	r3, 8011e7a <_svfiprintf_r+0x36>
 8011e5c:	2140      	movs	r1, #64	@ 0x40
 8011e5e:	f7fc fc0f 	bl	800e680 <_malloc_r>
 8011e62:	6028      	str	r0, [r5, #0]
 8011e64:	6128      	str	r0, [r5, #16]
 8011e66:	b930      	cbnz	r0, 8011e76 <_svfiprintf_r+0x32>
 8011e68:	230c      	movs	r3, #12
 8011e6a:	603b      	str	r3, [r7, #0]
 8011e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e70:	b01d      	add	sp, #116	@ 0x74
 8011e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e76:	2340      	movs	r3, #64	@ 0x40
 8011e78:	616b      	str	r3, [r5, #20]
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e7e:	2320      	movs	r3, #32
 8011e80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e88:	2330      	movs	r3, #48	@ 0x30
 8011e8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012028 <_svfiprintf_r+0x1e4>
 8011e8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e92:	f04f 0901 	mov.w	r9, #1
 8011e96:	4623      	mov	r3, r4
 8011e98:	469a      	mov	sl, r3
 8011e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e9e:	b10a      	cbz	r2, 8011ea4 <_svfiprintf_r+0x60>
 8011ea0:	2a25      	cmp	r2, #37	@ 0x25
 8011ea2:	d1f9      	bne.n	8011e98 <_svfiprintf_r+0x54>
 8011ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ea8:	d00b      	beq.n	8011ec2 <_svfiprintf_r+0x7e>
 8011eaa:	465b      	mov	r3, fp
 8011eac:	4622      	mov	r2, r4
 8011eae:	4629      	mov	r1, r5
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	f7ff ff6b 	bl	8011d8c <__ssputs_r>
 8011eb6:	3001      	adds	r0, #1
 8011eb8:	f000 80a7 	beq.w	801200a <_svfiprintf_r+0x1c6>
 8011ebc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ebe:	445a      	add	r2, fp
 8011ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f000 809f 	beq.w	801200a <_svfiprintf_r+0x1c6>
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ed6:	f10a 0a01 	add.w	sl, sl, #1
 8011eda:	9304      	str	r3, [sp, #16]
 8011edc:	9307      	str	r3, [sp, #28]
 8011ede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ee2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ee4:	4654      	mov	r4, sl
 8011ee6:	2205      	movs	r2, #5
 8011ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eec:	484e      	ldr	r0, [pc, #312]	@ (8012028 <_svfiprintf_r+0x1e4>)
 8011eee:	f7ee f96f 	bl	80001d0 <memchr>
 8011ef2:	9a04      	ldr	r2, [sp, #16]
 8011ef4:	b9d8      	cbnz	r0, 8011f2e <_svfiprintf_r+0xea>
 8011ef6:	06d0      	lsls	r0, r2, #27
 8011ef8:	bf44      	itt	mi
 8011efa:	2320      	movmi	r3, #32
 8011efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f00:	0711      	lsls	r1, r2, #28
 8011f02:	bf44      	itt	mi
 8011f04:	232b      	movmi	r3, #43	@ 0x2b
 8011f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f10:	d015      	beq.n	8011f3e <_svfiprintf_r+0xfa>
 8011f12:	9a07      	ldr	r2, [sp, #28]
 8011f14:	4654      	mov	r4, sl
 8011f16:	2000      	movs	r0, #0
 8011f18:	f04f 0c0a 	mov.w	ip, #10
 8011f1c:	4621      	mov	r1, r4
 8011f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f22:	3b30      	subs	r3, #48	@ 0x30
 8011f24:	2b09      	cmp	r3, #9
 8011f26:	d94b      	bls.n	8011fc0 <_svfiprintf_r+0x17c>
 8011f28:	b1b0      	cbz	r0, 8011f58 <_svfiprintf_r+0x114>
 8011f2a:	9207      	str	r2, [sp, #28]
 8011f2c:	e014      	b.n	8011f58 <_svfiprintf_r+0x114>
 8011f2e:	eba0 0308 	sub.w	r3, r0, r8
 8011f32:	fa09 f303 	lsl.w	r3, r9, r3
 8011f36:	4313      	orrs	r3, r2
 8011f38:	9304      	str	r3, [sp, #16]
 8011f3a:	46a2      	mov	sl, r4
 8011f3c:	e7d2      	b.n	8011ee4 <_svfiprintf_r+0xa0>
 8011f3e:	9b03      	ldr	r3, [sp, #12]
 8011f40:	1d19      	adds	r1, r3, #4
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	9103      	str	r1, [sp, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	bfbb      	ittet	lt
 8011f4a:	425b      	neglt	r3, r3
 8011f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f50:	9307      	strge	r3, [sp, #28]
 8011f52:	9307      	strlt	r3, [sp, #28]
 8011f54:	bfb8      	it	lt
 8011f56:	9204      	strlt	r2, [sp, #16]
 8011f58:	7823      	ldrb	r3, [r4, #0]
 8011f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f5c:	d10a      	bne.n	8011f74 <_svfiprintf_r+0x130>
 8011f5e:	7863      	ldrb	r3, [r4, #1]
 8011f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f62:	d132      	bne.n	8011fca <_svfiprintf_r+0x186>
 8011f64:	9b03      	ldr	r3, [sp, #12]
 8011f66:	1d1a      	adds	r2, r3, #4
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	9203      	str	r2, [sp, #12]
 8011f6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f70:	3402      	adds	r4, #2
 8011f72:	9305      	str	r3, [sp, #20]
 8011f74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012038 <_svfiprintf_r+0x1f4>
 8011f78:	7821      	ldrb	r1, [r4, #0]
 8011f7a:	2203      	movs	r2, #3
 8011f7c:	4650      	mov	r0, sl
 8011f7e:	f7ee f927 	bl	80001d0 <memchr>
 8011f82:	b138      	cbz	r0, 8011f94 <_svfiprintf_r+0x150>
 8011f84:	9b04      	ldr	r3, [sp, #16]
 8011f86:	eba0 000a 	sub.w	r0, r0, sl
 8011f8a:	2240      	movs	r2, #64	@ 0x40
 8011f8c:	4082      	lsls	r2, r0
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	3401      	adds	r4, #1
 8011f92:	9304      	str	r3, [sp, #16]
 8011f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f98:	4824      	ldr	r0, [pc, #144]	@ (801202c <_svfiprintf_r+0x1e8>)
 8011f9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f9e:	2206      	movs	r2, #6
 8011fa0:	f7ee f916 	bl	80001d0 <memchr>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d036      	beq.n	8012016 <_svfiprintf_r+0x1d2>
 8011fa8:	4b21      	ldr	r3, [pc, #132]	@ (8012030 <_svfiprintf_r+0x1ec>)
 8011faa:	bb1b      	cbnz	r3, 8011ff4 <_svfiprintf_r+0x1b0>
 8011fac:	9b03      	ldr	r3, [sp, #12]
 8011fae:	3307      	adds	r3, #7
 8011fb0:	f023 0307 	bic.w	r3, r3, #7
 8011fb4:	3308      	adds	r3, #8
 8011fb6:	9303      	str	r3, [sp, #12]
 8011fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fba:	4433      	add	r3, r6
 8011fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fbe:	e76a      	b.n	8011e96 <_svfiprintf_r+0x52>
 8011fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fc4:	460c      	mov	r4, r1
 8011fc6:	2001      	movs	r0, #1
 8011fc8:	e7a8      	b.n	8011f1c <_svfiprintf_r+0xd8>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	3401      	adds	r4, #1
 8011fce:	9305      	str	r3, [sp, #20]
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	f04f 0c0a 	mov.w	ip, #10
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fdc:	3a30      	subs	r2, #48	@ 0x30
 8011fde:	2a09      	cmp	r2, #9
 8011fe0:	d903      	bls.n	8011fea <_svfiprintf_r+0x1a6>
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d0c6      	beq.n	8011f74 <_svfiprintf_r+0x130>
 8011fe6:	9105      	str	r1, [sp, #20]
 8011fe8:	e7c4      	b.n	8011f74 <_svfiprintf_r+0x130>
 8011fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fee:	4604      	mov	r4, r0
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e7f0      	b.n	8011fd6 <_svfiprintf_r+0x192>
 8011ff4:	ab03      	add	r3, sp, #12
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	462a      	mov	r2, r5
 8011ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8012034 <_svfiprintf_r+0x1f0>)
 8011ffc:	a904      	add	r1, sp, #16
 8011ffe:	4638      	mov	r0, r7
 8012000:	f7fc fcf0 	bl	800e9e4 <_printf_float>
 8012004:	1c42      	adds	r2, r0, #1
 8012006:	4606      	mov	r6, r0
 8012008:	d1d6      	bne.n	8011fb8 <_svfiprintf_r+0x174>
 801200a:	89ab      	ldrh	r3, [r5, #12]
 801200c:	065b      	lsls	r3, r3, #25
 801200e:	f53f af2d 	bmi.w	8011e6c <_svfiprintf_r+0x28>
 8012012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012014:	e72c      	b.n	8011e70 <_svfiprintf_r+0x2c>
 8012016:	ab03      	add	r3, sp, #12
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	462a      	mov	r2, r5
 801201c:	4b05      	ldr	r3, [pc, #20]	@ (8012034 <_svfiprintf_r+0x1f0>)
 801201e:	a904      	add	r1, sp, #16
 8012020:	4638      	mov	r0, r7
 8012022:	f7fc ff77 	bl	800ef14 <_printf_i>
 8012026:	e7ed      	b.n	8012004 <_svfiprintf_r+0x1c0>
 8012028:	08014b28 	.word	0x08014b28
 801202c:	08014b32 	.word	0x08014b32
 8012030:	0800e9e5 	.word	0x0800e9e5
 8012034:	08011d8d 	.word	0x08011d8d
 8012038:	08014b2e 	.word	0x08014b2e

0801203c <_sungetc_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	1c4b      	adds	r3, r1, #1
 8012040:	4614      	mov	r4, r2
 8012042:	d103      	bne.n	801204c <_sungetc_r+0x10>
 8012044:	f04f 35ff 	mov.w	r5, #4294967295
 8012048:	4628      	mov	r0, r5
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	8993      	ldrh	r3, [r2, #12]
 801204e:	f023 0320 	bic.w	r3, r3, #32
 8012052:	8193      	strh	r3, [r2, #12]
 8012054:	6853      	ldr	r3, [r2, #4]
 8012056:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012058:	b2cd      	uxtb	r5, r1
 801205a:	b18a      	cbz	r2, 8012080 <_sungetc_r+0x44>
 801205c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801205e:	429a      	cmp	r2, r3
 8012060:	dd08      	ble.n	8012074 <_sungetc_r+0x38>
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	1e5a      	subs	r2, r3, #1
 8012066:	6022      	str	r2, [r4, #0]
 8012068:	f803 5c01 	strb.w	r5, [r3, #-1]
 801206c:	6863      	ldr	r3, [r4, #4]
 801206e:	3301      	adds	r3, #1
 8012070:	6063      	str	r3, [r4, #4]
 8012072:	e7e9      	b.n	8012048 <_sungetc_r+0xc>
 8012074:	4621      	mov	r1, r4
 8012076:	f000 fbf2 	bl	801285e <__submore>
 801207a:	2800      	cmp	r0, #0
 801207c:	d0f1      	beq.n	8012062 <_sungetc_r+0x26>
 801207e:	e7e1      	b.n	8012044 <_sungetc_r+0x8>
 8012080:	6921      	ldr	r1, [r4, #16]
 8012082:	6822      	ldr	r2, [r4, #0]
 8012084:	b141      	cbz	r1, 8012098 <_sungetc_r+0x5c>
 8012086:	4291      	cmp	r1, r2
 8012088:	d206      	bcs.n	8012098 <_sungetc_r+0x5c>
 801208a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801208e:	42a9      	cmp	r1, r5
 8012090:	d102      	bne.n	8012098 <_sungetc_r+0x5c>
 8012092:	3a01      	subs	r2, #1
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	e7ea      	b.n	801206e <_sungetc_r+0x32>
 8012098:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801209c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120a2:	2303      	movs	r3, #3
 80120a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80120a6:	4623      	mov	r3, r4
 80120a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	2301      	movs	r3, #1
 80120b0:	e7de      	b.n	8012070 <_sungetc_r+0x34>

080120b2 <__ssrefill_r>:
 80120b2:	b510      	push	{r4, lr}
 80120b4:	460c      	mov	r4, r1
 80120b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80120b8:	b169      	cbz	r1, 80120d6 <__ssrefill_r+0x24>
 80120ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120be:	4299      	cmp	r1, r3
 80120c0:	d001      	beq.n	80120c6 <__ssrefill_r+0x14>
 80120c2:	f7fe fb5d 	bl	8010780 <_free_r>
 80120c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120c8:	6063      	str	r3, [r4, #4]
 80120ca:	2000      	movs	r0, #0
 80120cc:	6360      	str	r0, [r4, #52]	@ 0x34
 80120ce:	b113      	cbz	r3, 80120d6 <__ssrefill_r+0x24>
 80120d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80120d2:	6023      	str	r3, [r4, #0]
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	6923      	ldr	r3, [r4, #16]
 80120d8:	6023      	str	r3, [r4, #0]
 80120da:	2300      	movs	r3, #0
 80120dc:	6063      	str	r3, [r4, #4]
 80120de:	89a3      	ldrh	r3, [r4, #12]
 80120e0:	f043 0320 	orr.w	r3, r3, #32
 80120e4:	81a3      	strh	r3, [r4, #12]
 80120e6:	f04f 30ff 	mov.w	r0, #4294967295
 80120ea:	e7f3      	b.n	80120d4 <__ssrefill_r+0x22>

080120ec <__ssvfiscanf_r>:
 80120ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120f0:	460c      	mov	r4, r1
 80120f2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80120f6:	2100      	movs	r1, #0
 80120f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80120fc:	49a5      	ldr	r1, [pc, #660]	@ (8012394 <__ssvfiscanf_r+0x2a8>)
 80120fe:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012100:	f10d 0804 	add.w	r8, sp, #4
 8012104:	49a4      	ldr	r1, [pc, #656]	@ (8012398 <__ssvfiscanf_r+0x2ac>)
 8012106:	4fa5      	ldr	r7, [pc, #660]	@ (801239c <__ssvfiscanf_r+0x2b0>)
 8012108:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801210c:	4606      	mov	r6, r0
 801210e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012110:	9300      	str	r3, [sp, #0]
 8012112:	7813      	ldrb	r3, [r2, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 8158 	beq.w	80123ca <__ssvfiscanf_r+0x2de>
 801211a:	5cf9      	ldrb	r1, [r7, r3]
 801211c:	f011 0108 	ands.w	r1, r1, #8
 8012120:	f102 0501 	add.w	r5, r2, #1
 8012124:	d019      	beq.n	801215a <__ssvfiscanf_r+0x6e>
 8012126:	6863      	ldr	r3, [r4, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	dd0f      	ble.n	801214c <__ssvfiscanf_r+0x60>
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	781a      	ldrb	r2, [r3, #0]
 8012130:	5cba      	ldrb	r2, [r7, r2]
 8012132:	0712      	lsls	r2, r2, #28
 8012134:	d401      	bmi.n	801213a <__ssvfiscanf_r+0x4e>
 8012136:	462a      	mov	r2, r5
 8012138:	e7eb      	b.n	8012112 <__ssvfiscanf_r+0x26>
 801213a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801213c:	3201      	adds	r2, #1
 801213e:	9245      	str	r2, [sp, #276]	@ 0x114
 8012140:	6862      	ldr	r2, [r4, #4]
 8012142:	3301      	adds	r3, #1
 8012144:	3a01      	subs	r2, #1
 8012146:	6062      	str	r2, [r4, #4]
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	e7ec      	b.n	8012126 <__ssvfiscanf_r+0x3a>
 801214c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801214e:	4621      	mov	r1, r4
 8012150:	4630      	mov	r0, r6
 8012152:	4798      	blx	r3
 8012154:	2800      	cmp	r0, #0
 8012156:	d0e9      	beq.n	801212c <__ssvfiscanf_r+0x40>
 8012158:	e7ed      	b.n	8012136 <__ssvfiscanf_r+0x4a>
 801215a:	2b25      	cmp	r3, #37	@ 0x25
 801215c:	d012      	beq.n	8012184 <__ssvfiscanf_r+0x98>
 801215e:	4699      	mov	r9, r3
 8012160:	6863      	ldr	r3, [r4, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	f340 8093 	ble.w	801228e <__ssvfiscanf_r+0x1a2>
 8012168:	6822      	ldr	r2, [r4, #0]
 801216a:	7813      	ldrb	r3, [r2, #0]
 801216c:	454b      	cmp	r3, r9
 801216e:	f040 812c 	bne.w	80123ca <__ssvfiscanf_r+0x2de>
 8012172:	6863      	ldr	r3, [r4, #4]
 8012174:	3b01      	subs	r3, #1
 8012176:	6063      	str	r3, [r4, #4]
 8012178:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801217a:	3201      	adds	r2, #1
 801217c:	3301      	adds	r3, #1
 801217e:	6022      	str	r2, [r4, #0]
 8012180:	9345      	str	r3, [sp, #276]	@ 0x114
 8012182:	e7d8      	b.n	8012136 <__ssvfiscanf_r+0x4a>
 8012184:	9141      	str	r1, [sp, #260]	@ 0x104
 8012186:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012188:	7853      	ldrb	r3, [r2, #1]
 801218a:	2b2a      	cmp	r3, #42	@ 0x2a
 801218c:	bf02      	ittt	eq
 801218e:	2310      	moveq	r3, #16
 8012190:	1c95      	addeq	r5, r2, #2
 8012192:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012194:	220a      	movs	r2, #10
 8012196:	46a9      	mov	r9, r5
 8012198:	f819 1b01 	ldrb.w	r1, [r9], #1
 801219c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80121a0:	2b09      	cmp	r3, #9
 80121a2:	d91e      	bls.n	80121e2 <__ssvfiscanf_r+0xf6>
 80121a4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80123a0 <__ssvfiscanf_r+0x2b4>
 80121a8:	2203      	movs	r2, #3
 80121aa:	4650      	mov	r0, sl
 80121ac:	f7ee f810 	bl	80001d0 <memchr>
 80121b0:	b138      	cbz	r0, 80121c2 <__ssvfiscanf_r+0xd6>
 80121b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80121b4:	eba0 000a 	sub.w	r0, r0, sl
 80121b8:	2301      	movs	r3, #1
 80121ba:	4083      	lsls	r3, r0
 80121bc:	4313      	orrs	r3, r2
 80121be:	9341      	str	r3, [sp, #260]	@ 0x104
 80121c0:	464d      	mov	r5, r9
 80121c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80121c6:	2b78      	cmp	r3, #120	@ 0x78
 80121c8:	d806      	bhi.n	80121d8 <__ssvfiscanf_r+0xec>
 80121ca:	2b57      	cmp	r3, #87	@ 0x57
 80121cc:	d810      	bhi.n	80121f0 <__ssvfiscanf_r+0x104>
 80121ce:	2b25      	cmp	r3, #37	@ 0x25
 80121d0:	d0c5      	beq.n	801215e <__ssvfiscanf_r+0x72>
 80121d2:	d857      	bhi.n	8012284 <__ssvfiscanf_r+0x198>
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d065      	beq.n	80122a4 <__ssvfiscanf_r+0x1b8>
 80121d8:	2303      	movs	r3, #3
 80121da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80121dc:	230a      	movs	r3, #10
 80121de:	9342      	str	r3, [sp, #264]	@ 0x108
 80121e0:	e078      	b.n	80122d4 <__ssvfiscanf_r+0x1e8>
 80121e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80121e4:	fb02 1103 	mla	r1, r2, r3, r1
 80121e8:	3930      	subs	r1, #48	@ 0x30
 80121ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80121ec:	464d      	mov	r5, r9
 80121ee:	e7d2      	b.n	8012196 <__ssvfiscanf_r+0xaa>
 80121f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80121f4:	2a20      	cmp	r2, #32
 80121f6:	d8ef      	bhi.n	80121d8 <__ssvfiscanf_r+0xec>
 80121f8:	a101      	add	r1, pc, #4	@ (adr r1, 8012200 <__ssvfiscanf_r+0x114>)
 80121fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80121fe:	bf00      	nop
 8012200:	080122b3 	.word	0x080122b3
 8012204:	080121d9 	.word	0x080121d9
 8012208:	080121d9 	.word	0x080121d9
 801220c:	0801230d 	.word	0x0801230d
 8012210:	080121d9 	.word	0x080121d9
 8012214:	080121d9 	.word	0x080121d9
 8012218:	080121d9 	.word	0x080121d9
 801221c:	080121d9 	.word	0x080121d9
 8012220:	080121d9 	.word	0x080121d9
 8012224:	080121d9 	.word	0x080121d9
 8012228:	080121d9 	.word	0x080121d9
 801222c:	08012323 	.word	0x08012323
 8012230:	08012309 	.word	0x08012309
 8012234:	0801228b 	.word	0x0801228b
 8012238:	0801228b 	.word	0x0801228b
 801223c:	0801228b 	.word	0x0801228b
 8012240:	080121d9 	.word	0x080121d9
 8012244:	080122c5 	.word	0x080122c5
 8012248:	080121d9 	.word	0x080121d9
 801224c:	080121d9 	.word	0x080121d9
 8012250:	080121d9 	.word	0x080121d9
 8012254:	080121d9 	.word	0x080121d9
 8012258:	08012333 	.word	0x08012333
 801225c:	080122cd 	.word	0x080122cd
 8012260:	080122ab 	.word	0x080122ab
 8012264:	080121d9 	.word	0x080121d9
 8012268:	080121d9 	.word	0x080121d9
 801226c:	0801232f 	.word	0x0801232f
 8012270:	080121d9 	.word	0x080121d9
 8012274:	08012309 	.word	0x08012309
 8012278:	080121d9 	.word	0x080121d9
 801227c:	080121d9 	.word	0x080121d9
 8012280:	080122b3 	.word	0x080122b3
 8012284:	3b45      	subs	r3, #69	@ 0x45
 8012286:	2b02      	cmp	r3, #2
 8012288:	d8a6      	bhi.n	80121d8 <__ssvfiscanf_r+0xec>
 801228a:	2305      	movs	r3, #5
 801228c:	e021      	b.n	80122d2 <__ssvfiscanf_r+0x1e6>
 801228e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012290:	4621      	mov	r1, r4
 8012292:	4630      	mov	r0, r6
 8012294:	4798      	blx	r3
 8012296:	2800      	cmp	r0, #0
 8012298:	f43f af66 	beq.w	8012168 <__ssvfiscanf_r+0x7c>
 801229c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801229e:	2800      	cmp	r0, #0
 80122a0:	f040 808b 	bne.w	80123ba <__ssvfiscanf_r+0x2ce>
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	e08b      	b.n	80123c2 <__ssvfiscanf_r+0x2d6>
 80122aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122ac:	f042 0220 	orr.w	r2, r2, #32
 80122b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80122b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80122ba:	2210      	movs	r2, #16
 80122bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80122be:	9242      	str	r2, [sp, #264]	@ 0x108
 80122c0:	d902      	bls.n	80122c8 <__ssvfiscanf_r+0x1dc>
 80122c2:	e005      	b.n	80122d0 <__ssvfiscanf_r+0x1e4>
 80122c4:	2300      	movs	r3, #0
 80122c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80122c8:	2303      	movs	r3, #3
 80122ca:	e002      	b.n	80122d2 <__ssvfiscanf_r+0x1e6>
 80122cc:	2308      	movs	r3, #8
 80122ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80122d0:	2304      	movs	r3, #4
 80122d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80122d4:	6863      	ldr	r3, [r4, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	dd39      	ble.n	801234e <__ssvfiscanf_r+0x262>
 80122da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80122dc:	0659      	lsls	r1, r3, #25
 80122de:	d404      	bmi.n	80122ea <__ssvfiscanf_r+0x1fe>
 80122e0:	6823      	ldr	r3, [r4, #0]
 80122e2:	781a      	ldrb	r2, [r3, #0]
 80122e4:	5cba      	ldrb	r2, [r7, r2]
 80122e6:	0712      	lsls	r2, r2, #28
 80122e8:	d438      	bmi.n	801235c <__ssvfiscanf_r+0x270>
 80122ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80122ec:	2b02      	cmp	r3, #2
 80122ee:	dc47      	bgt.n	8012380 <__ssvfiscanf_r+0x294>
 80122f0:	466b      	mov	r3, sp
 80122f2:	4622      	mov	r2, r4
 80122f4:	a941      	add	r1, sp, #260	@ 0x104
 80122f6:	4630      	mov	r0, r6
 80122f8:	f000 f86c 	bl	80123d4 <_scanf_chars>
 80122fc:	2801      	cmp	r0, #1
 80122fe:	d064      	beq.n	80123ca <__ssvfiscanf_r+0x2de>
 8012300:	2802      	cmp	r0, #2
 8012302:	f47f af18 	bne.w	8012136 <__ssvfiscanf_r+0x4a>
 8012306:	e7c9      	b.n	801229c <__ssvfiscanf_r+0x1b0>
 8012308:	220a      	movs	r2, #10
 801230a:	e7d7      	b.n	80122bc <__ssvfiscanf_r+0x1d0>
 801230c:	4629      	mov	r1, r5
 801230e:	4640      	mov	r0, r8
 8012310:	f000 fa6c 	bl	80127ec <__sccl>
 8012314:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801231a:	9341      	str	r3, [sp, #260]	@ 0x104
 801231c:	4605      	mov	r5, r0
 801231e:	2301      	movs	r3, #1
 8012320:	e7d7      	b.n	80122d2 <__ssvfiscanf_r+0x1e6>
 8012322:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012328:	9341      	str	r3, [sp, #260]	@ 0x104
 801232a:	2300      	movs	r3, #0
 801232c:	e7d1      	b.n	80122d2 <__ssvfiscanf_r+0x1e6>
 801232e:	2302      	movs	r3, #2
 8012330:	e7cf      	b.n	80122d2 <__ssvfiscanf_r+0x1e6>
 8012332:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012334:	06c3      	lsls	r3, r0, #27
 8012336:	f53f aefe 	bmi.w	8012136 <__ssvfiscanf_r+0x4a>
 801233a:	9b00      	ldr	r3, [sp, #0]
 801233c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801233e:	1d19      	adds	r1, r3, #4
 8012340:	9100      	str	r1, [sp, #0]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	07c0      	lsls	r0, r0, #31
 8012346:	bf4c      	ite	mi
 8012348:	801a      	strhmi	r2, [r3, #0]
 801234a:	601a      	strpl	r2, [r3, #0]
 801234c:	e6f3      	b.n	8012136 <__ssvfiscanf_r+0x4a>
 801234e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012350:	4621      	mov	r1, r4
 8012352:	4630      	mov	r0, r6
 8012354:	4798      	blx	r3
 8012356:	2800      	cmp	r0, #0
 8012358:	d0bf      	beq.n	80122da <__ssvfiscanf_r+0x1ee>
 801235a:	e79f      	b.n	801229c <__ssvfiscanf_r+0x1b0>
 801235c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801235e:	3201      	adds	r2, #1
 8012360:	9245      	str	r2, [sp, #276]	@ 0x114
 8012362:	6862      	ldr	r2, [r4, #4]
 8012364:	3a01      	subs	r2, #1
 8012366:	2a00      	cmp	r2, #0
 8012368:	6062      	str	r2, [r4, #4]
 801236a:	dd02      	ble.n	8012372 <__ssvfiscanf_r+0x286>
 801236c:	3301      	adds	r3, #1
 801236e:	6023      	str	r3, [r4, #0]
 8012370:	e7b6      	b.n	80122e0 <__ssvfiscanf_r+0x1f4>
 8012372:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012374:	4621      	mov	r1, r4
 8012376:	4630      	mov	r0, r6
 8012378:	4798      	blx	r3
 801237a:	2800      	cmp	r0, #0
 801237c:	d0b0      	beq.n	80122e0 <__ssvfiscanf_r+0x1f4>
 801237e:	e78d      	b.n	801229c <__ssvfiscanf_r+0x1b0>
 8012380:	2b04      	cmp	r3, #4
 8012382:	dc0f      	bgt.n	80123a4 <__ssvfiscanf_r+0x2b8>
 8012384:	466b      	mov	r3, sp
 8012386:	4622      	mov	r2, r4
 8012388:	a941      	add	r1, sp, #260	@ 0x104
 801238a:	4630      	mov	r0, r6
 801238c:	f000 f87c 	bl	8012488 <_scanf_i>
 8012390:	e7b4      	b.n	80122fc <__ssvfiscanf_r+0x210>
 8012392:	bf00      	nop
 8012394:	0801203d 	.word	0x0801203d
 8012398:	080120b3 	.word	0x080120b3
 801239c:	08014721 	.word	0x08014721
 80123a0:	08014b2e 	.word	0x08014b2e
 80123a4:	4b0a      	ldr	r3, [pc, #40]	@ (80123d0 <__ssvfiscanf_r+0x2e4>)
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f43f aec5 	beq.w	8012136 <__ssvfiscanf_r+0x4a>
 80123ac:	466b      	mov	r3, sp
 80123ae:	4622      	mov	r2, r4
 80123b0:	a941      	add	r1, sp, #260	@ 0x104
 80123b2:	4630      	mov	r0, r6
 80123b4:	f7fc fece 	bl	800f154 <_scanf_float>
 80123b8:	e7a0      	b.n	80122fc <__ssvfiscanf_r+0x210>
 80123ba:	89a3      	ldrh	r3, [r4, #12]
 80123bc:	065b      	lsls	r3, r3, #25
 80123be:	f53f af71 	bmi.w	80122a4 <__ssvfiscanf_r+0x1b8>
 80123c2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80123c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80123cc:	e7f9      	b.n	80123c2 <__ssvfiscanf_r+0x2d6>
 80123ce:	bf00      	nop
 80123d0:	0800f155 	.word	0x0800f155

080123d4 <_scanf_chars>:
 80123d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123d8:	4615      	mov	r5, r2
 80123da:	688a      	ldr	r2, [r1, #8]
 80123dc:	4680      	mov	r8, r0
 80123de:	460c      	mov	r4, r1
 80123e0:	b932      	cbnz	r2, 80123f0 <_scanf_chars+0x1c>
 80123e2:	698a      	ldr	r2, [r1, #24]
 80123e4:	2a00      	cmp	r2, #0
 80123e6:	bf14      	ite	ne
 80123e8:	f04f 32ff 	movne.w	r2, #4294967295
 80123ec:	2201      	moveq	r2, #1
 80123ee:	608a      	str	r2, [r1, #8]
 80123f0:	6822      	ldr	r2, [r4, #0]
 80123f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012484 <_scanf_chars+0xb0>
 80123f6:	06d1      	lsls	r1, r2, #27
 80123f8:	bf5f      	itttt	pl
 80123fa:	681a      	ldrpl	r2, [r3, #0]
 80123fc:	1d11      	addpl	r1, r2, #4
 80123fe:	6019      	strpl	r1, [r3, #0]
 8012400:	6816      	ldrpl	r6, [r2, #0]
 8012402:	2700      	movs	r7, #0
 8012404:	69a0      	ldr	r0, [r4, #24]
 8012406:	b188      	cbz	r0, 801242c <_scanf_chars+0x58>
 8012408:	2801      	cmp	r0, #1
 801240a:	d107      	bne.n	801241c <_scanf_chars+0x48>
 801240c:	682b      	ldr	r3, [r5, #0]
 801240e:	781a      	ldrb	r2, [r3, #0]
 8012410:	6963      	ldr	r3, [r4, #20]
 8012412:	5c9b      	ldrb	r3, [r3, r2]
 8012414:	b953      	cbnz	r3, 801242c <_scanf_chars+0x58>
 8012416:	2f00      	cmp	r7, #0
 8012418:	d031      	beq.n	801247e <_scanf_chars+0xaa>
 801241a:	e022      	b.n	8012462 <_scanf_chars+0x8e>
 801241c:	2802      	cmp	r0, #2
 801241e:	d120      	bne.n	8012462 <_scanf_chars+0x8e>
 8012420:	682b      	ldr	r3, [r5, #0]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012428:	071b      	lsls	r3, r3, #28
 801242a:	d41a      	bmi.n	8012462 <_scanf_chars+0x8e>
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	06da      	lsls	r2, r3, #27
 8012430:	bf5e      	ittt	pl
 8012432:	682b      	ldrpl	r3, [r5, #0]
 8012434:	781b      	ldrbpl	r3, [r3, #0]
 8012436:	f806 3b01 	strbpl.w	r3, [r6], #1
 801243a:	682a      	ldr	r2, [r5, #0]
 801243c:	686b      	ldr	r3, [r5, #4]
 801243e:	3201      	adds	r2, #1
 8012440:	602a      	str	r2, [r5, #0]
 8012442:	68a2      	ldr	r2, [r4, #8]
 8012444:	3b01      	subs	r3, #1
 8012446:	3a01      	subs	r2, #1
 8012448:	606b      	str	r3, [r5, #4]
 801244a:	3701      	adds	r7, #1
 801244c:	60a2      	str	r2, [r4, #8]
 801244e:	b142      	cbz	r2, 8012462 <_scanf_chars+0x8e>
 8012450:	2b00      	cmp	r3, #0
 8012452:	dcd7      	bgt.n	8012404 <_scanf_chars+0x30>
 8012454:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012458:	4629      	mov	r1, r5
 801245a:	4640      	mov	r0, r8
 801245c:	4798      	blx	r3
 801245e:	2800      	cmp	r0, #0
 8012460:	d0d0      	beq.n	8012404 <_scanf_chars+0x30>
 8012462:	6823      	ldr	r3, [r4, #0]
 8012464:	f013 0310 	ands.w	r3, r3, #16
 8012468:	d105      	bne.n	8012476 <_scanf_chars+0xa2>
 801246a:	68e2      	ldr	r2, [r4, #12]
 801246c:	3201      	adds	r2, #1
 801246e:	60e2      	str	r2, [r4, #12]
 8012470:	69a2      	ldr	r2, [r4, #24]
 8012472:	b102      	cbz	r2, 8012476 <_scanf_chars+0xa2>
 8012474:	7033      	strb	r3, [r6, #0]
 8012476:	6923      	ldr	r3, [r4, #16]
 8012478:	443b      	add	r3, r7
 801247a:	6123      	str	r3, [r4, #16]
 801247c:	2000      	movs	r0, #0
 801247e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012482:	bf00      	nop
 8012484:	08014721 	.word	0x08014721

08012488 <_scanf_i>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	4698      	mov	r8, r3
 801248e:	4b74      	ldr	r3, [pc, #464]	@ (8012660 <_scanf_i+0x1d8>)
 8012490:	460c      	mov	r4, r1
 8012492:	4682      	mov	sl, r0
 8012494:	4616      	mov	r6, r2
 8012496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801249a:	b087      	sub	sp, #28
 801249c:	ab03      	add	r3, sp, #12
 801249e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80124a2:	4b70      	ldr	r3, [pc, #448]	@ (8012664 <_scanf_i+0x1dc>)
 80124a4:	69a1      	ldr	r1, [r4, #24]
 80124a6:	4a70      	ldr	r2, [pc, #448]	@ (8012668 <_scanf_i+0x1e0>)
 80124a8:	2903      	cmp	r1, #3
 80124aa:	bf08      	it	eq
 80124ac:	461a      	moveq	r2, r3
 80124ae:	68a3      	ldr	r3, [r4, #8]
 80124b0:	9201      	str	r2, [sp, #4]
 80124b2:	1e5a      	subs	r2, r3, #1
 80124b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80124b8:	bf88      	it	hi
 80124ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80124be:	4627      	mov	r7, r4
 80124c0:	bf82      	ittt	hi
 80124c2:	eb03 0905 	addhi.w	r9, r3, r5
 80124c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80124ca:	60a3      	strhi	r3, [r4, #8]
 80124cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80124d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80124d4:	bf98      	it	ls
 80124d6:	f04f 0900 	movls.w	r9, #0
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	463d      	mov	r5, r7
 80124de:	f04f 0b00 	mov.w	fp, #0
 80124e2:	6831      	ldr	r1, [r6, #0]
 80124e4:	ab03      	add	r3, sp, #12
 80124e6:	7809      	ldrb	r1, [r1, #0]
 80124e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80124ec:	2202      	movs	r2, #2
 80124ee:	f7ed fe6f 	bl	80001d0 <memchr>
 80124f2:	b328      	cbz	r0, 8012540 <_scanf_i+0xb8>
 80124f4:	f1bb 0f01 	cmp.w	fp, #1
 80124f8:	d159      	bne.n	80125ae <_scanf_i+0x126>
 80124fa:	6862      	ldr	r2, [r4, #4]
 80124fc:	b92a      	cbnz	r2, 801250a <_scanf_i+0x82>
 80124fe:	6822      	ldr	r2, [r4, #0]
 8012500:	2108      	movs	r1, #8
 8012502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012506:	6061      	str	r1, [r4, #4]
 8012508:	6022      	str	r2, [r4, #0]
 801250a:	6822      	ldr	r2, [r4, #0]
 801250c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012510:	6022      	str	r2, [r4, #0]
 8012512:	68a2      	ldr	r2, [r4, #8]
 8012514:	1e51      	subs	r1, r2, #1
 8012516:	60a1      	str	r1, [r4, #8]
 8012518:	b192      	cbz	r2, 8012540 <_scanf_i+0xb8>
 801251a:	6832      	ldr	r2, [r6, #0]
 801251c:	1c51      	adds	r1, r2, #1
 801251e:	6031      	str	r1, [r6, #0]
 8012520:	7812      	ldrb	r2, [r2, #0]
 8012522:	f805 2b01 	strb.w	r2, [r5], #1
 8012526:	6872      	ldr	r2, [r6, #4]
 8012528:	3a01      	subs	r2, #1
 801252a:	2a00      	cmp	r2, #0
 801252c:	6072      	str	r2, [r6, #4]
 801252e:	dc07      	bgt.n	8012540 <_scanf_i+0xb8>
 8012530:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012534:	4631      	mov	r1, r6
 8012536:	4650      	mov	r0, sl
 8012538:	4790      	blx	r2
 801253a:	2800      	cmp	r0, #0
 801253c:	f040 8085 	bne.w	801264a <_scanf_i+0x1c2>
 8012540:	f10b 0b01 	add.w	fp, fp, #1
 8012544:	f1bb 0f03 	cmp.w	fp, #3
 8012548:	d1cb      	bne.n	80124e2 <_scanf_i+0x5a>
 801254a:	6863      	ldr	r3, [r4, #4]
 801254c:	b90b      	cbnz	r3, 8012552 <_scanf_i+0xca>
 801254e:	230a      	movs	r3, #10
 8012550:	6063      	str	r3, [r4, #4]
 8012552:	6863      	ldr	r3, [r4, #4]
 8012554:	4945      	ldr	r1, [pc, #276]	@ (801266c <_scanf_i+0x1e4>)
 8012556:	6960      	ldr	r0, [r4, #20]
 8012558:	1ac9      	subs	r1, r1, r3
 801255a:	f000 f947 	bl	80127ec <__sccl>
 801255e:	f04f 0b00 	mov.w	fp, #0
 8012562:	68a3      	ldr	r3, [r4, #8]
 8012564:	6822      	ldr	r2, [r4, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d03d      	beq.n	80125e6 <_scanf_i+0x15e>
 801256a:	6831      	ldr	r1, [r6, #0]
 801256c:	6960      	ldr	r0, [r4, #20]
 801256e:	f891 c000 	ldrb.w	ip, [r1]
 8012572:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012576:	2800      	cmp	r0, #0
 8012578:	d035      	beq.n	80125e6 <_scanf_i+0x15e>
 801257a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801257e:	d124      	bne.n	80125ca <_scanf_i+0x142>
 8012580:	0510      	lsls	r0, r2, #20
 8012582:	d522      	bpl.n	80125ca <_scanf_i+0x142>
 8012584:	f10b 0b01 	add.w	fp, fp, #1
 8012588:	f1b9 0f00 	cmp.w	r9, #0
 801258c:	d003      	beq.n	8012596 <_scanf_i+0x10e>
 801258e:	3301      	adds	r3, #1
 8012590:	f109 39ff 	add.w	r9, r9, #4294967295
 8012594:	60a3      	str	r3, [r4, #8]
 8012596:	6873      	ldr	r3, [r6, #4]
 8012598:	3b01      	subs	r3, #1
 801259a:	2b00      	cmp	r3, #0
 801259c:	6073      	str	r3, [r6, #4]
 801259e:	dd1b      	ble.n	80125d8 <_scanf_i+0x150>
 80125a0:	6833      	ldr	r3, [r6, #0]
 80125a2:	3301      	adds	r3, #1
 80125a4:	6033      	str	r3, [r6, #0]
 80125a6:	68a3      	ldr	r3, [r4, #8]
 80125a8:	3b01      	subs	r3, #1
 80125aa:	60a3      	str	r3, [r4, #8]
 80125ac:	e7d9      	b.n	8012562 <_scanf_i+0xda>
 80125ae:	f1bb 0f02 	cmp.w	fp, #2
 80125b2:	d1ae      	bne.n	8012512 <_scanf_i+0x8a>
 80125b4:	6822      	ldr	r2, [r4, #0]
 80125b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80125ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80125be:	d1bf      	bne.n	8012540 <_scanf_i+0xb8>
 80125c0:	2110      	movs	r1, #16
 80125c2:	6061      	str	r1, [r4, #4]
 80125c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80125c8:	e7a2      	b.n	8012510 <_scanf_i+0x88>
 80125ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80125ce:	6022      	str	r2, [r4, #0]
 80125d0:	780b      	ldrb	r3, [r1, #0]
 80125d2:	f805 3b01 	strb.w	r3, [r5], #1
 80125d6:	e7de      	b.n	8012596 <_scanf_i+0x10e>
 80125d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80125dc:	4631      	mov	r1, r6
 80125de:	4650      	mov	r0, sl
 80125e0:	4798      	blx	r3
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d0df      	beq.n	80125a6 <_scanf_i+0x11e>
 80125e6:	6823      	ldr	r3, [r4, #0]
 80125e8:	05d9      	lsls	r1, r3, #23
 80125ea:	d50d      	bpl.n	8012608 <_scanf_i+0x180>
 80125ec:	42bd      	cmp	r5, r7
 80125ee:	d909      	bls.n	8012604 <_scanf_i+0x17c>
 80125f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80125f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125f8:	4632      	mov	r2, r6
 80125fa:	4650      	mov	r0, sl
 80125fc:	4798      	blx	r3
 80125fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8012602:	464d      	mov	r5, r9
 8012604:	42bd      	cmp	r5, r7
 8012606:	d028      	beq.n	801265a <_scanf_i+0x1d2>
 8012608:	6822      	ldr	r2, [r4, #0]
 801260a:	f012 0210 	ands.w	r2, r2, #16
 801260e:	d113      	bne.n	8012638 <_scanf_i+0x1b0>
 8012610:	702a      	strb	r2, [r5, #0]
 8012612:	6863      	ldr	r3, [r4, #4]
 8012614:	9e01      	ldr	r6, [sp, #4]
 8012616:	4639      	mov	r1, r7
 8012618:	4650      	mov	r0, sl
 801261a:	47b0      	blx	r6
 801261c:	f8d8 3000 	ldr.w	r3, [r8]
 8012620:	6821      	ldr	r1, [r4, #0]
 8012622:	1d1a      	adds	r2, r3, #4
 8012624:	f8c8 2000 	str.w	r2, [r8]
 8012628:	f011 0f20 	tst.w	r1, #32
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	d00f      	beq.n	8012650 <_scanf_i+0x1c8>
 8012630:	6018      	str	r0, [r3, #0]
 8012632:	68e3      	ldr	r3, [r4, #12]
 8012634:	3301      	adds	r3, #1
 8012636:	60e3      	str	r3, [r4, #12]
 8012638:	6923      	ldr	r3, [r4, #16]
 801263a:	1bed      	subs	r5, r5, r7
 801263c:	445d      	add	r5, fp
 801263e:	442b      	add	r3, r5
 8012640:	6123      	str	r3, [r4, #16]
 8012642:	2000      	movs	r0, #0
 8012644:	b007      	add	sp, #28
 8012646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264a:	f04f 0b00 	mov.w	fp, #0
 801264e:	e7ca      	b.n	80125e6 <_scanf_i+0x15e>
 8012650:	07ca      	lsls	r2, r1, #31
 8012652:	bf4c      	ite	mi
 8012654:	8018      	strhmi	r0, [r3, #0]
 8012656:	6018      	strpl	r0, [r3, #0]
 8012658:	e7eb      	b.n	8012632 <_scanf_i+0x1aa>
 801265a:	2001      	movs	r0, #1
 801265c:	e7f2      	b.n	8012644 <_scanf_i+0x1bc>
 801265e:	bf00      	nop
 8012660:	08014660 	.word	0x08014660
 8012664:	0800e88d 	.word	0x0800e88d
 8012668:	0801313d 	.word	0x0801313d
 801266c:	08014b49 	.word	0x08014b49

08012670 <__sflush_r>:
 8012670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012678:	0716      	lsls	r6, r2, #28
 801267a:	4605      	mov	r5, r0
 801267c:	460c      	mov	r4, r1
 801267e:	d454      	bmi.n	801272a <__sflush_r+0xba>
 8012680:	684b      	ldr	r3, [r1, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	dc02      	bgt.n	801268c <__sflush_r+0x1c>
 8012686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012688:	2b00      	cmp	r3, #0
 801268a:	dd48      	ble.n	801271e <__sflush_r+0xae>
 801268c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801268e:	2e00      	cmp	r6, #0
 8012690:	d045      	beq.n	801271e <__sflush_r+0xae>
 8012692:	2300      	movs	r3, #0
 8012694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012698:	682f      	ldr	r7, [r5, #0]
 801269a:	6a21      	ldr	r1, [r4, #32]
 801269c:	602b      	str	r3, [r5, #0]
 801269e:	d030      	beq.n	8012702 <__sflush_r+0x92>
 80126a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126a2:	89a3      	ldrh	r3, [r4, #12]
 80126a4:	0759      	lsls	r1, r3, #29
 80126a6:	d505      	bpl.n	80126b4 <__sflush_r+0x44>
 80126a8:	6863      	ldr	r3, [r4, #4]
 80126aa:	1ad2      	subs	r2, r2, r3
 80126ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126ae:	b10b      	cbz	r3, 80126b4 <__sflush_r+0x44>
 80126b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126b2:	1ad2      	subs	r2, r2, r3
 80126b4:	2300      	movs	r3, #0
 80126b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126b8:	6a21      	ldr	r1, [r4, #32]
 80126ba:	4628      	mov	r0, r5
 80126bc:	47b0      	blx	r6
 80126be:	1c43      	adds	r3, r0, #1
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	d106      	bne.n	80126d2 <__sflush_r+0x62>
 80126c4:	6829      	ldr	r1, [r5, #0]
 80126c6:	291d      	cmp	r1, #29
 80126c8:	d82b      	bhi.n	8012722 <__sflush_r+0xb2>
 80126ca:	4a2a      	ldr	r2, [pc, #168]	@ (8012774 <__sflush_r+0x104>)
 80126cc:	410a      	asrs	r2, r1
 80126ce:	07d6      	lsls	r6, r2, #31
 80126d0:	d427      	bmi.n	8012722 <__sflush_r+0xb2>
 80126d2:	2200      	movs	r2, #0
 80126d4:	6062      	str	r2, [r4, #4]
 80126d6:	04d9      	lsls	r1, r3, #19
 80126d8:	6922      	ldr	r2, [r4, #16]
 80126da:	6022      	str	r2, [r4, #0]
 80126dc:	d504      	bpl.n	80126e8 <__sflush_r+0x78>
 80126de:	1c42      	adds	r2, r0, #1
 80126e0:	d101      	bne.n	80126e6 <__sflush_r+0x76>
 80126e2:	682b      	ldr	r3, [r5, #0]
 80126e4:	b903      	cbnz	r3, 80126e8 <__sflush_r+0x78>
 80126e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80126e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126ea:	602f      	str	r7, [r5, #0]
 80126ec:	b1b9      	cbz	r1, 801271e <__sflush_r+0xae>
 80126ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126f2:	4299      	cmp	r1, r3
 80126f4:	d002      	beq.n	80126fc <__sflush_r+0x8c>
 80126f6:	4628      	mov	r0, r5
 80126f8:	f7fe f842 	bl	8010780 <_free_r>
 80126fc:	2300      	movs	r3, #0
 80126fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8012700:	e00d      	b.n	801271e <__sflush_r+0xae>
 8012702:	2301      	movs	r3, #1
 8012704:	4628      	mov	r0, r5
 8012706:	47b0      	blx	r6
 8012708:	4602      	mov	r2, r0
 801270a:	1c50      	adds	r0, r2, #1
 801270c:	d1c9      	bne.n	80126a2 <__sflush_r+0x32>
 801270e:	682b      	ldr	r3, [r5, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d0c6      	beq.n	80126a2 <__sflush_r+0x32>
 8012714:	2b1d      	cmp	r3, #29
 8012716:	d001      	beq.n	801271c <__sflush_r+0xac>
 8012718:	2b16      	cmp	r3, #22
 801271a:	d11e      	bne.n	801275a <__sflush_r+0xea>
 801271c:	602f      	str	r7, [r5, #0]
 801271e:	2000      	movs	r0, #0
 8012720:	e022      	b.n	8012768 <__sflush_r+0xf8>
 8012722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012726:	b21b      	sxth	r3, r3
 8012728:	e01b      	b.n	8012762 <__sflush_r+0xf2>
 801272a:	690f      	ldr	r7, [r1, #16]
 801272c:	2f00      	cmp	r7, #0
 801272e:	d0f6      	beq.n	801271e <__sflush_r+0xae>
 8012730:	0793      	lsls	r3, r2, #30
 8012732:	680e      	ldr	r6, [r1, #0]
 8012734:	bf08      	it	eq
 8012736:	694b      	ldreq	r3, [r1, #20]
 8012738:	600f      	str	r7, [r1, #0]
 801273a:	bf18      	it	ne
 801273c:	2300      	movne	r3, #0
 801273e:	eba6 0807 	sub.w	r8, r6, r7
 8012742:	608b      	str	r3, [r1, #8]
 8012744:	f1b8 0f00 	cmp.w	r8, #0
 8012748:	dde9      	ble.n	801271e <__sflush_r+0xae>
 801274a:	6a21      	ldr	r1, [r4, #32]
 801274c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801274e:	4643      	mov	r3, r8
 8012750:	463a      	mov	r2, r7
 8012752:	4628      	mov	r0, r5
 8012754:	47b0      	blx	r6
 8012756:	2800      	cmp	r0, #0
 8012758:	dc08      	bgt.n	801276c <__sflush_r+0xfc>
 801275a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012762:	81a3      	strh	r3, [r4, #12]
 8012764:	f04f 30ff 	mov.w	r0, #4294967295
 8012768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276c:	4407      	add	r7, r0
 801276e:	eba8 0800 	sub.w	r8, r8, r0
 8012772:	e7e7      	b.n	8012744 <__sflush_r+0xd4>
 8012774:	dfbffffe 	.word	0xdfbffffe

08012778 <_fflush_r>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	690b      	ldr	r3, [r1, #16]
 801277c:	4605      	mov	r5, r0
 801277e:	460c      	mov	r4, r1
 8012780:	b913      	cbnz	r3, 8012788 <_fflush_r+0x10>
 8012782:	2500      	movs	r5, #0
 8012784:	4628      	mov	r0, r5
 8012786:	bd38      	pop	{r3, r4, r5, pc}
 8012788:	b118      	cbz	r0, 8012792 <_fflush_r+0x1a>
 801278a:	6a03      	ldr	r3, [r0, #32]
 801278c:	b90b      	cbnz	r3, 8012792 <_fflush_r+0x1a>
 801278e:	f7fc ff81 	bl	800f694 <__sinit>
 8012792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d0f3      	beq.n	8012782 <_fflush_r+0xa>
 801279a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801279c:	07d0      	lsls	r0, r2, #31
 801279e:	d404      	bmi.n	80127aa <_fflush_r+0x32>
 80127a0:	0599      	lsls	r1, r3, #22
 80127a2:	d402      	bmi.n	80127aa <_fflush_r+0x32>
 80127a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127a6:	f7fd f96e 	bl	800fa86 <__retarget_lock_acquire_recursive>
 80127aa:	4628      	mov	r0, r5
 80127ac:	4621      	mov	r1, r4
 80127ae:	f7ff ff5f 	bl	8012670 <__sflush_r>
 80127b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127b4:	07da      	lsls	r2, r3, #31
 80127b6:	4605      	mov	r5, r0
 80127b8:	d4e4      	bmi.n	8012784 <_fflush_r+0xc>
 80127ba:	89a3      	ldrh	r3, [r4, #12]
 80127bc:	059b      	lsls	r3, r3, #22
 80127be:	d4e1      	bmi.n	8012784 <_fflush_r+0xc>
 80127c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127c2:	f7fd f961 	bl	800fa88 <__retarget_lock_release_recursive>
 80127c6:	e7dd      	b.n	8012784 <_fflush_r+0xc>

080127c8 <fiprintf>:
 80127c8:	b40e      	push	{r1, r2, r3}
 80127ca:	b503      	push	{r0, r1, lr}
 80127cc:	4601      	mov	r1, r0
 80127ce:	ab03      	add	r3, sp, #12
 80127d0:	4805      	ldr	r0, [pc, #20]	@ (80127e8 <fiprintf+0x20>)
 80127d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80127d6:	6800      	ldr	r0, [r0, #0]
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	f000 fce7 	bl	80131ac <_vfiprintf_r>
 80127de:	b002      	add	sp, #8
 80127e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80127e4:	b003      	add	sp, #12
 80127e6:	4770      	bx	lr
 80127e8:	20000038 	.word	0x20000038

080127ec <__sccl>:
 80127ec:	b570      	push	{r4, r5, r6, lr}
 80127ee:	780b      	ldrb	r3, [r1, #0]
 80127f0:	4604      	mov	r4, r0
 80127f2:	2b5e      	cmp	r3, #94	@ 0x5e
 80127f4:	bf0b      	itete	eq
 80127f6:	784b      	ldrbeq	r3, [r1, #1]
 80127f8:	1c4a      	addne	r2, r1, #1
 80127fa:	1c8a      	addeq	r2, r1, #2
 80127fc:	2100      	movne	r1, #0
 80127fe:	bf08      	it	eq
 8012800:	2101      	moveq	r1, #1
 8012802:	3801      	subs	r0, #1
 8012804:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012808:	f800 1f01 	strb.w	r1, [r0, #1]!
 801280c:	42a8      	cmp	r0, r5
 801280e:	d1fb      	bne.n	8012808 <__sccl+0x1c>
 8012810:	b90b      	cbnz	r3, 8012816 <__sccl+0x2a>
 8012812:	1e50      	subs	r0, r2, #1
 8012814:	bd70      	pop	{r4, r5, r6, pc}
 8012816:	f081 0101 	eor.w	r1, r1, #1
 801281a:	54e1      	strb	r1, [r4, r3]
 801281c:	4610      	mov	r0, r2
 801281e:	4602      	mov	r2, r0
 8012820:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012824:	2d2d      	cmp	r5, #45	@ 0x2d
 8012826:	d005      	beq.n	8012834 <__sccl+0x48>
 8012828:	2d5d      	cmp	r5, #93	@ 0x5d
 801282a:	d016      	beq.n	801285a <__sccl+0x6e>
 801282c:	2d00      	cmp	r5, #0
 801282e:	d0f1      	beq.n	8012814 <__sccl+0x28>
 8012830:	462b      	mov	r3, r5
 8012832:	e7f2      	b.n	801281a <__sccl+0x2e>
 8012834:	7846      	ldrb	r6, [r0, #1]
 8012836:	2e5d      	cmp	r6, #93	@ 0x5d
 8012838:	d0fa      	beq.n	8012830 <__sccl+0x44>
 801283a:	42b3      	cmp	r3, r6
 801283c:	dcf8      	bgt.n	8012830 <__sccl+0x44>
 801283e:	3002      	adds	r0, #2
 8012840:	461a      	mov	r2, r3
 8012842:	3201      	adds	r2, #1
 8012844:	4296      	cmp	r6, r2
 8012846:	54a1      	strb	r1, [r4, r2]
 8012848:	dcfb      	bgt.n	8012842 <__sccl+0x56>
 801284a:	1af2      	subs	r2, r6, r3
 801284c:	3a01      	subs	r2, #1
 801284e:	1c5d      	adds	r5, r3, #1
 8012850:	42b3      	cmp	r3, r6
 8012852:	bfa8      	it	ge
 8012854:	2200      	movge	r2, #0
 8012856:	18ab      	adds	r3, r5, r2
 8012858:	e7e1      	b.n	801281e <__sccl+0x32>
 801285a:	4610      	mov	r0, r2
 801285c:	e7da      	b.n	8012814 <__sccl+0x28>

0801285e <__submore>:
 801285e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012862:	460c      	mov	r4, r1
 8012864:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801286a:	4299      	cmp	r1, r3
 801286c:	d11d      	bne.n	80128aa <__submore+0x4c>
 801286e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012872:	f7fb ff05 	bl	800e680 <_malloc_r>
 8012876:	b918      	cbnz	r0, 8012880 <__submore+0x22>
 8012878:	f04f 30ff 	mov.w	r0, #4294967295
 801287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012884:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012886:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801288a:	6360      	str	r0, [r4, #52]	@ 0x34
 801288c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012890:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012894:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012898:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801289c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80128a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80128a4:	6020      	str	r0, [r4, #0]
 80128a6:	2000      	movs	r0, #0
 80128a8:	e7e8      	b.n	801287c <__submore+0x1e>
 80128aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80128ac:	0077      	lsls	r7, r6, #1
 80128ae:	463a      	mov	r2, r7
 80128b0:	f000 fba7 	bl	8013002 <_realloc_r>
 80128b4:	4605      	mov	r5, r0
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d0de      	beq.n	8012878 <__submore+0x1a>
 80128ba:	eb00 0806 	add.w	r8, r0, r6
 80128be:	4601      	mov	r1, r0
 80128c0:	4632      	mov	r2, r6
 80128c2:	4640      	mov	r0, r8
 80128c4:	f000 f81f 	bl	8012906 <memcpy>
 80128c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80128cc:	f8c4 8000 	str.w	r8, [r4]
 80128d0:	e7e9      	b.n	80128a6 <__submore+0x48>

080128d2 <memmove>:
 80128d2:	4288      	cmp	r0, r1
 80128d4:	b510      	push	{r4, lr}
 80128d6:	eb01 0402 	add.w	r4, r1, r2
 80128da:	d902      	bls.n	80128e2 <memmove+0x10>
 80128dc:	4284      	cmp	r4, r0
 80128de:	4623      	mov	r3, r4
 80128e0:	d807      	bhi.n	80128f2 <memmove+0x20>
 80128e2:	1e43      	subs	r3, r0, #1
 80128e4:	42a1      	cmp	r1, r4
 80128e6:	d008      	beq.n	80128fa <memmove+0x28>
 80128e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128f0:	e7f8      	b.n	80128e4 <memmove+0x12>
 80128f2:	4402      	add	r2, r0
 80128f4:	4601      	mov	r1, r0
 80128f6:	428a      	cmp	r2, r1
 80128f8:	d100      	bne.n	80128fc <memmove+0x2a>
 80128fa:	bd10      	pop	{r4, pc}
 80128fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012900:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012904:	e7f7      	b.n	80128f6 <memmove+0x24>

08012906 <memcpy>:
 8012906:	440a      	add	r2, r1
 8012908:	4291      	cmp	r1, r2
 801290a:	f100 33ff 	add.w	r3, r0, #4294967295
 801290e:	d100      	bne.n	8012912 <memcpy+0xc>
 8012910:	4770      	bx	lr
 8012912:	b510      	push	{r4, lr}
 8012914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012918:	f803 4f01 	strb.w	r4, [r3, #1]!
 801291c:	4291      	cmp	r1, r2
 801291e:	d1f9      	bne.n	8012914 <memcpy+0xe>
 8012920:	bd10      	pop	{r4, pc}
 8012922:	0000      	movs	r0, r0
 8012924:	0000      	movs	r0, r0
	...

08012928 <nan>:
 8012928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012930 <nan+0x8>
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop
 8012930:	00000000 	.word	0x00000000
 8012934:	7ff80000 	.word	0x7ff80000

08012938 <abort>:
 8012938:	b508      	push	{r3, lr}
 801293a:	2006      	movs	r0, #6
 801293c:	f000 fe0a 	bl	8013554 <raise>
 8012940:	2001      	movs	r0, #1
 8012942:	f7f1 fd6d 	bl	8004420 <_exit>

08012946 <_calloc_r>:
 8012946:	b570      	push	{r4, r5, r6, lr}
 8012948:	fba1 5402 	umull	r5, r4, r1, r2
 801294c:	b93c      	cbnz	r4, 801295e <_calloc_r+0x18>
 801294e:	4629      	mov	r1, r5
 8012950:	f7fb fe96 	bl	800e680 <_malloc_r>
 8012954:	4606      	mov	r6, r0
 8012956:	b928      	cbnz	r0, 8012964 <_calloc_r+0x1e>
 8012958:	2600      	movs	r6, #0
 801295a:	4630      	mov	r0, r6
 801295c:	bd70      	pop	{r4, r5, r6, pc}
 801295e:	220c      	movs	r2, #12
 8012960:	6002      	str	r2, [r0, #0]
 8012962:	e7f9      	b.n	8012958 <_calloc_r+0x12>
 8012964:	462a      	mov	r2, r5
 8012966:	4621      	mov	r1, r4
 8012968:	f7fc ff92 	bl	800f890 <memset>
 801296c:	e7f5      	b.n	801295a <_calloc_r+0x14>

0801296e <rshift>:
 801296e:	6903      	ldr	r3, [r0, #16]
 8012970:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012978:	ea4f 1261 	mov.w	r2, r1, asr #5
 801297c:	f100 0414 	add.w	r4, r0, #20
 8012980:	dd45      	ble.n	8012a0e <rshift+0xa0>
 8012982:	f011 011f 	ands.w	r1, r1, #31
 8012986:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801298a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801298e:	d10c      	bne.n	80129aa <rshift+0x3c>
 8012990:	f100 0710 	add.w	r7, r0, #16
 8012994:	4629      	mov	r1, r5
 8012996:	42b1      	cmp	r1, r6
 8012998:	d334      	bcc.n	8012a04 <rshift+0x96>
 801299a:	1a9b      	subs	r3, r3, r2
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	1eea      	subs	r2, r5, #3
 80129a0:	4296      	cmp	r6, r2
 80129a2:	bf38      	it	cc
 80129a4:	2300      	movcc	r3, #0
 80129a6:	4423      	add	r3, r4
 80129a8:	e015      	b.n	80129d6 <rshift+0x68>
 80129aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80129ae:	f1c1 0820 	rsb	r8, r1, #32
 80129b2:	40cf      	lsrs	r7, r1
 80129b4:	f105 0e04 	add.w	lr, r5, #4
 80129b8:	46a1      	mov	r9, r4
 80129ba:	4576      	cmp	r6, lr
 80129bc:	46f4      	mov	ip, lr
 80129be:	d815      	bhi.n	80129ec <rshift+0x7e>
 80129c0:	1a9a      	subs	r2, r3, r2
 80129c2:	0092      	lsls	r2, r2, #2
 80129c4:	3a04      	subs	r2, #4
 80129c6:	3501      	adds	r5, #1
 80129c8:	42ae      	cmp	r6, r5
 80129ca:	bf38      	it	cc
 80129cc:	2200      	movcc	r2, #0
 80129ce:	18a3      	adds	r3, r4, r2
 80129d0:	50a7      	str	r7, [r4, r2]
 80129d2:	b107      	cbz	r7, 80129d6 <rshift+0x68>
 80129d4:	3304      	adds	r3, #4
 80129d6:	1b1a      	subs	r2, r3, r4
 80129d8:	42a3      	cmp	r3, r4
 80129da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80129de:	bf08      	it	eq
 80129e0:	2300      	moveq	r3, #0
 80129e2:	6102      	str	r2, [r0, #16]
 80129e4:	bf08      	it	eq
 80129e6:	6143      	streq	r3, [r0, #20]
 80129e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129ec:	f8dc c000 	ldr.w	ip, [ip]
 80129f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80129f4:	ea4c 0707 	orr.w	r7, ip, r7
 80129f8:	f849 7b04 	str.w	r7, [r9], #4
 80129fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a00:	40cf      	lsrs	r7, r1
 8012a02:	e7da      	b.n	80129ba <rshift+0x4c>
 8012a04:	f851 cb04 	ldr.w	ip, [r1], #4
 8012a08:	f847 cf04 	str.w	ip, [r7, #4]!
 8012a0c:	e7c3      	b.n	8012996 <rshift+0x28>
 8012a0e:	4623      	mov	r3, r4
 8012a10:	e7e1      	b.n	80129d6 <rshift+0x68>

08012a12 <__hexdig_fun>:
 8012a12:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012a16:	2b09      	cmp	r3, #9
 8012a18:	d802      	bhi.n	8012a20 <__hexdig_fun+0xe>
 8012a1a:	3820      	subs	r0, #32
 8012a1c:	b2c0      	uxtb	r0, r0
 8012a1e:	4770      	bx	lr
 8012a20:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012a24:	2b05      	cmp	r3, #5
 8012a26:	d801      	bhi.n	8012a2c <__hexdig_fun+0x1a>
 8012a28:	3847      	subs	r0, #71	@ 0x47
 8012a2a:	e7f7      	b.n	8012a1c <__hexdig_fun+0xa>
 8012a2c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012a30:	2b05      	cmp	r3, #5
 8012a32:	d801      	bhi.n	8012a38 <__hexdig_fun+0x26>
 8012a34:	3827      	subs	r0, #39	@ 0x27
 8012a36:	e7f1      	b.n	8012a1c <__hexdig_fun+0xa>
 8012a38:	2000      	movs	r0, #0
 8012a3a:	4770      	bx	lr

08012a3c <__gethex>:
 8012a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a40:	b085      	sub	sp, #20
 8012a42:	468a      	mov	sl, r1
 8012a44:	9302      	str	r3, [sp, #8]
 8012a46:	680b      	ldr	r3, [r1, #0]
 8012a48:	9001      	str	r0, [sp, #4]
 8012a4a:	4690      	mov	r8, r2
 8012a4c:	1c9c      	adds	r4, r3, #2
 8012a4e:	46a1      	mov	r9, r4
 8012a50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012a54:	2830      	cmp	r0, #48	@ 0x30
 8012a56:	d0fa      	beq.n	8012a4e <__gethex+0x12>
 8012a58:	eba9 0303 	sub.w	r3, r9, r3
 8012a5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012a60:	f7ff ffd7 	bl	8012a12 <__hexdig_fun>
 8012a64:	4605      	mov	r5, r0
 8012a66:	2800      	cmp	r0, #0
 8012a68:	d168      	bne.n	8012b3c <__gethex+0x100>
 8012a6a:	49a0      	ldr	r1, [pc, #640]	@ (8012cec <__gethex+0x2b0>)
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	4648      	mov	r0, r9
 8012a70:	f7fc ff16 	bl	800f8a0 <strncmp>
 8012a74:	4607      	mov	r7, r0
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d167      	bne.n	8012b4a <__gethex+0x10e>
 8012a7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012a7e:	4626      	mov	r6, r4
 8012a80:	f7ff ffc7 	bl	8012a12 <__hexdig_fun>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d062      	beq.n	8012b4e <__gethex+0x112>
 8012a88:	4623      	mov	r3, r4
 8012a8a:	7818      	ldrb	r0, [r3, #0]
 8012a8c:	2830      	cmp	r0, #48	@ 0x30
 8012a8e:	4699      	mov	r9, r3
 8012a90:	f103 0301 	add.w	r3, r3, #1
 8012a94:	d0f9      	beq.n	8012a8a <__gethex+0x4e>
 8012a96:	f7ff ffbc 	bl	8012a12 <__hexdig_fun>
 8012a9a:	fab0 f580 	clz	r5, r0
 8012a9e:	096d      	lsrs	r5, r5, #5
 8012aa0:	f04f 0b01 	mov.w	fp, #1
 8012aa4:	464a      	mov	r2, r9
 8012aa6:	4616      	mov	r6, r2
 8012aa8:	3201      	adds	r2, #1
 8012aaa:	7830      	ldrb	r0, [r6, #0]
 8012aac:	f7ff ffb1 	bl	8012a12 <__hexdig_fun>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d1f8      	bne.n	8012aa6 <__gethex+0x6a>
 8012ab4:	498d      	ldr	r1, [pc, #564]	@ (8012cec <__gethex+0x2b0>)
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	4630      	mov	r0, r6
 8012aba:	f7fc fef1 	bl	800f8a0 <strncmp>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d13f      	bne.n	8012b42 <__gethex+0x106>
 8012ac2:	b944      	cbnz	r4, 8012ad6 <__gethex+0x9a>
 8012ac4:	1c74      	adds	r4, r6, #1
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	4616      	mov	r6, r2
 8012aca:	3201      	adds	r2, #1
 8012acc:	7830      	ldrb	r0, [r6, #0]
 8012ace:	f7ff ffa0 	bl	8012a12 <__hexdig_fun>
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	d1f8      	bne.n	8012ac8 <__gethex+0x8c>
 8012ad6:	1ba4      	subs	r4, r4, r6
 8012ad8:	00a7      	lsls	r7, r4, #2
 8012ada:	7833      	ldrb	r3, [r6, #0]
 8012adc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012ae0:	2b50      	cmp	r3, #80	@ 0x50
 8012ae2:	d13e      	bne.n	8012b62 <__gethex+0x126>
 8012ae4:	7873      	ldrb	r3, [r6, #1]
 8012ae6:	2b2b      	cmp	r3, #43	@ 0x2b
 8012ae8:	d033      	beq.n	8012b52 <__gethex+0x116>
 8012aea:	2b2d      	cmp	r3, #45	@ 0x2d
 8012aec:	d034      	beq.n	8012b58 <__gethex+0x11c>
 8012aee:	1c71      	adds	r1, r6, #1
 8012af0:	2400      	movs	r4, #0
 8012af2:	7808      	ldrb	r0, [r1, #0]
 8012af4:	f7ff ff8d 	bl	8012a12 <__hexdig_fun>
 8012af8:	1e43      	subs	r3, r0, #1
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	2b18      	cmp	r3, #24
 8012afe:	d830      	bhi.n	8012b62 <__gethex+0x126>
 8012b00:	f1a0 0210 	sub.w	r2, r0, #16
 8012b04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012b08:	f7ff ff83 	bl	8012a12 <__hexdig_fun>
 8012b0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012b10:	fa5f fc8c 	uxtb.w	ip, ip
 8012b14:	f1bc 0f18 	cmp.w	ip, #24
 8012b18:	f04f 030a 	mov.w	r3, #10
 8012b1c:	d91e      	bls.n	8012b5c <__gethex+0x120>
 8012b1e:	b104      	cbz	r4, 8012b22 <__gethex+0xe6>
 8012b20:	4252      	negs	r2, r2
 8012b22:	4417      	add	r7, r2
 8012b24:	f8ca 1000 	str.w	r1, [sl]
 8012b28:	b1ed      	cbz	r5, 8012b66 <__gethex+0x12a>
 8012b2a:	f1bb 0f00 	cmp.w	fp, #0
 8012b2e:	bf0c      	ite	eq
 8012b30:	2506      	moveq	r5, #6
 8012b32:	2500      	movne	r5, #0
 8012b34:	4628      	mov	r0, r5
 8012b36:	b005      	add	sp, #20
 8012b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	462c      	mov	r4, r5
 8012b40:	e7b0      	b.n	8012aa4 <__gethex+0x68>
 8012b42:	2c00      	cmp	r4, #0
 8012b44:	d1c7      	bne.n	8012ad6 <__gethex+0x9a>
 8012b46:	4627      	mov	r7, r4
 8012b48:	e7c7      	b.n	8012ada <__gethex+0x9e>
 8012b4a:	464e      	mov	r6, r9
 8012b4c:	462f      	mov	r7, r5
 8012b4e:	2501      	movs	r5, #1
 8012b50:	e7c3      	b.n	8012ada <__gethex+0x9e>
 8012b52:	2400      	movs	r4, #0
 8012b54:	1cb1      	adds	r1, r6, #2
 8012b56:	e7cc      	b.n	8012af2 <__gethex+0xb6>
 8012b58:	2401      	movs	r4, #1
 8012b5a:	e7fb      	b.n	8012b54 <__gethex+0x118>
 8012b5c:	fb03 0002 	mla	r0, r3, r2, r0
 8012b60:	e7ce      	b.n	8012b00 <__gethex+0xc4>
 8012b62:	4631      	mov	r1, r6
 8012b64:	e7de      	b.n	8012b24 <__gethex+0xe8>
 8012b66:	eba6 0309 	sub.w	r3, r6, r9
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	2b07      	cmp	r3, #7
 8012b70:	dc0a      	bgt.n	8012b88 <__gethex+0x14c>
 8012b72:	9801      	ldr	r0, [sp, #4]
 8012b74:	f7fd fe4e 	bl	8010814 <_Balloc>
 8012b78:	4604      	mov	r4, r0
 8012b7a:	b940      	cbnz	r0, 8012b8e <__gethex+0x152>
 8012b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8012cf0 <__gethex+0x2b4>)
 8012b7e:	4602      	mov	r2, r0
 8012b80:	21e4      	movs	r1, #228	@ 0xe4
 8012b82:	485c      	ldr	r0, [pc, #368]	@ (8012cf4 <__gethex+0x2b8>)
 8012b84:	f7fc ff90 	bl	800faa8 <__assert_func>
 8012b88:	3101      	adds	r1, #1
 8012b8a:	105b      	asrs	r3, r3, #1
 8012b8c:	e7ef      	b.n	8012b6e <__gethex+0x132>
 8012b8e:	f100 0a14 	add.w	sl, r0, #20
 8012b92:	2300      	movs	r3, #0
 8012b94:	4655      	mov	r5, sl
 8012b96:	469b      	mov	fp, r3
 8012b98:	45b1      	cmp	r9, r6
 8012b9a:	d337      	bcc.n	8012c0c <__gethex+0x1d0>
 8012b9c:	f845 bb04 	str.w	fp, [r5], #4
 8012ba0:	eba5 050a 	sub.w	r5, r5, sl
 8012ba4:	10ad      	asrs	r5, r5, #2
 8012ba6:	6125      	str	r5, [r4, #16]
 8012ba8:	4658      	mov	r0, fp
 8012baa:	f7fd ff25 	bl	80109f8 <__hi0bits>
 8012bae:	016d      	lsls	r5, r5, #5
 8012bb0:	f8d8 6000 	ldr.w	r6, [r8]
 8012bb4:	1a2d      	subs	r5, r5, r0
 8012bb6:	42b5      	cmp	r5, r6
 8012bb8:	dd54      	ble.n	8012c64 <__gethex+0x228>
 8012bba:	1bad      	subs	r5, r5, r6
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	f7fe fab9 	bl	8011136 <__any_on>
 8012bc4:	4681      	mov	r9, r0
 8012bc6:	b178      	cbz	r0, 8012be8 <__gethex+0x1ac>
 8012bc8:	1e6b      	subs	r3, r5, #1
 8012bca:	1159      	asrs	r1, r3, #5
 8012bcc:	f003 021f 	and.w	r2, r3, #31
 8012bd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012bd4:	f04f 0901 	mov.w	r9, #1
 8012bd8:	fa09 f202 	lsl.w	r2, r9, r2
 8012bdc:	420a      	tst	r2, r1
 8012bde:	d003      	beq.n	8012be8 <__gethex+0x1ac>
 8012be0:	454b      	cmp	r3, r9
 8012be2:	dc36      	bgt.n	8012c52 <__gethex+0x216>
 8012be4:	f04f 0902 	mov.w	r9, #2
 8012be8:	4629      	mov	r1, r5
 8012bea:	4620      	mov	r0, r4
 8012bec:	f7ff febf 	bl	801296e <rshift>
 8012bf0:	442f      	add	r7, r5
 8012bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012bf6:	42bb      	cmp	r3, r7
 8012bf8:	da42      	bge.n	8012c80 <__gethex+0x244>
 8012bfa:	9801      	ldr	r0, [sp, #4]
 8012bfc:	4621      	mov	r1, r4
 8012bfe:	f7fd fe49 	bl	8010894 <_Bfree>
 8012c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c04:	2300      	movs	r3, #0
 8012c06:	6013      	str	r3, [r2, #0]
 8012c08:	25a3      	movs	r5, #163	@ 0xa3
 8012c0a:	e793      	b.n	8012b34 <__gethex+0xf8>
 8012c0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012c10:	2a2e      	cmp	r2, #46	@ 0x2e
 8012c12:	d012      	beq.n	8012c3a <__gethex+0x1fe>
 8012c14:	2b20      	cmp	r3, #32
 8012c16:	d104      	bne.n	8012c22 <__gethex+0x1e6>
 8012c18:	f845 bb04 	str.w	fp, [r5], #4
 8012c1c:	f04f 0b00 	mov.w	fp, #0
 8012c20:	465b      	mov	r3, fp
 8012c22:	7830      	ldrb	r0, [r6, #0]
 8012c24:	9303      	str	r3, [sp, #12]
 8012c26:	f7ff fef4 	bl	8012a12 <__hexdig_fun>
 8012c2a:	9b03      	ldr	r3, [sp, #12]
 8012c2c:	f000 000f 	and.w	r0, r0, #15
 8012c30:	4098      	lsls	r0, r3
 8012c32:	ea4b 0b00 	orr.w	fp, fp, r0
 8012c36:	3304      	adds	r3, #4
 8012c38:	e7ae      	b.n	8012b98 <__gethex+0x15c>
 8012c3a:	45b1      	cmp	r9, r6
 8012c3c:	d8ea      	bhi.n	8012c14 <__gethex+0x1d8>
 8012c3e:	492b      	ldr	r1, [pc, #172]	@ (8012cec <__gethex+0x2b0>)
 8012c40:	9303      	str	r3, [sp, #12]
 8012c42:	2201      	movs	r2, #1
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7fc fe2b 	bl	800f8a0 <strncmp>
 8012c4a:	9b03      	ldr	r3, [sp, #12]
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d1e1      	bne.n	8012c14 <__gethex+0x1d8>
 8012c50:	e7a2      	b.n	8012b98 <__gethex+0x15c>
 8012c52:	1ea9      	subs	r1, r5, #2
 8012c54:	4620      	mov	r0, r4
 8012c56:	f7fe fa6e 	bl	8011136 <__any_on>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d0c2      	beq.n	8012be4 <__gethex+0x1a8>
 8012c5e:	f04f 0903 	mov.w	r9, #3
 8012c62:	e7c1      	b.n	8012be8 <__gethex+0x1ac>
 8012c64:	da09      	bge.n	8012c7a <__gethex+0x23e>
 8012c66:	1b75      	subs	r5, r6, r5
 8012c68:	4621      	mov	r1, r4
 8012c6a:	9801      	ldr	r0, [sp, #4]
 8012c6c:	462a      	mov	r2, r5
 8012c6e:	f7fe f829 	bl	8010cc4 <__lshift>
 8012c72:	1b7f      	subs	r7, r7, r5
 8012c74:	4604      	mov	r4, r0
 8012c76:	f100 0a14 	add.w	sl, r0, #20
 8012c7a:	f04f 0900 	mov.w	r9, #0
 8012c7e:	e7b8      	b.n	8012bf2 <__gethex+0x1b6>
 8012c80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012c84:	42bd      	cmp	r5, r7
 8012c86:	dd6f      	ble.n	8012d68 <__gethex+0x32c>
 8012c88:	1bed      	subs	r5, r5, r7
 8012c8a:	42ae      	cmp	r6, r5
 8012c8c:	dc34      	bgt.n	8012cf8 <__gethex+0x2bc>
 8012c8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	d022      	beq.n	8012cdc <__gethex+0x2a0>
 8012c96:	2b03      	cmp	r3, #3
 8012c98:	d024      	beq.n	8012ce4 <__gethex+0x2a8>
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d115      	bne.n	8012cca <__gethex+0x28e>
 8012c9e:	42ae      	cmp	r6, r5
 8012ca0:	d113      	bne.n	8012cca <__gethex+0x28e>
 8012ca2:	2e01      	cmp	r6, #1
 8012ca4:	d10b      	bne.n	8012cbe <__gethex+0x282>
 8012ca6:	9a02      	ldr	r2, [sp, #8]
 8012ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012cac:	6013      	str	r3, [r2, #0]
 8012cae:	2301      	movs	r3, #1
 8012cb0:	6123      	str	r3, [r4, #16]
 8012cb2:	f8ca 3000 	str.w	r3, [sl]
 8012cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cb8:	2562      	movs	r5, #98	@ 0x62
 8012cba:	601c      	str	r4, [r3, #0]
 8012cbc:	e73a      	b.n	8012b34 <__gethex+0xf8>
 8012cbe:	1e71      	subs	r1, r6, #1
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f7fe fa38 	bl	8011136 <__any_on>
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	d1ed      	bne.n	8012ca6 <__gethex+0x26a>
 8012cca:	9801      	ldr	r0, [sp, #4]
 8012ccc:	4621      	mov	r1, r4
 8012cce:	f7fd fde1 	bl	8010894 <_Bfree>
 8012cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	6013      	str	r3, [r2, #0]
 8012cd8:	2550      	movs	r5, #80	@ 0x50
 8012cda:	e72b      	b.n	8012b34 <__gethex+0xf8>
 8012cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d1f3      	bne.n	8012cca <__gethex+0x28e>
 8012ce2:	e7e0      	b.n	8012ca6 <__gethex+0x26a>
 8012ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d1dd      	bne.n	8012ca6 <__gethex+0x26a>
 8012cea:	e7ee      	b.n	8012cca <__gethex+0x28e>
 8012cec:	08014ad0 	.word	0x08014ad0
 8012cf0:	0801496a 	.word	0x0801496a
 8012cf4:	08014b5c 	.word	0x08014b5c
 8012cf8:	1e6f      	subs	r7, r5, #1
 8012cfa:	f1b9 0f00 	cmp.w	r9, #0
 8012cfe:	d130      	bne.n	8012d62 <__gethex+0x326>
 8012d00:	b127      	cbz	r7, 8012d0c <__gethex+0x2d0>
 8012d02:	4639      	mov	r1, r7
 8012d04:	4620      	mov	r0, r4
 8012d06:	f7fe fa16 	bl	8011136 <__any_on>
 8012d0a:	4681      	mov	r9, r0
 8012d0c:	117a      	asrs	r2, r7, #5
 8012d0e:	2301      	movs	r3, #1
 8012d10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012d14:	f007 071f 	and.w	r7, r7, #31
 8012d18:	40bb      	lsls	r3, r7
 8012d1a:	4213      	tst	r3, r2
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	4620      	mov	r0, r4
 8012d20:	bf18      	it	ne
 8012d22:	f049 0902 	orrne.w	r9, r9, #2
 8012d26:	f7ff fe22 	bl	801296e <rshift>
 8012d2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012d2e:	1b76      	subs	r6, r6, r5
 8012d30:	2502      	movs	r5, #2
 8012d32:	f1b9 0f00 	cmp.w	r9, #0
 8012d36:	d047      	beq.n	8012dc8 <__gethex+0x38c>
 8012d38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d015      	beq.n	8012d6c <__gethex+0x330>
 8012d40:	2b03      	cmp	r3, #3
 8012d42:	d017      	beq.n	8012d74 <__gethex+0x338>
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d109      	bne.n	8012d5c <__gethex+0x320>
 8012d48:	f019 0f02 	tst.w	r9, #2
 8012d4c:	d006      	beq.n	8012d5c <__gethex+0x320>
 8012d4e:	f8da 3000 	ldr.w	r3, [sl]
 8012d52:	ea49 0903 	orr.w	r9, r9, r3
 8012d56:	f019 0f01 	tst.w	r9, #1
 8012d5a:	d10e      	bne.n	8012d7a <__gethex+0x33e>
 8012d5c:	f045 0510 	orr.w	r5, r5, #16
 8012d60:	e032      	b.n	8012dc8 <__gethex+0x38c>
 8012d62:	f04f 0901 	mov.w	r9, #1
 8012d66:	e7d1      	b.n	8012d0c <__gethex+0x2d0>
 8012d68:	2501      	movs	r5, #1
 8012d6a:	e7e2      	b.n	8012d32 <__gethex+0x2f6>
 8012d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d6e:	f1c3 0301 	rsb	r3, r3, #1
 8012d72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0f0      	beq.n	8012d5c <__gethex+0x320>
 8012d7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012d7e:	f104 0314 	add.w	r3, r4, #20
 8012d82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012d86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012d8a:	f04f 0c00 	mov.w	ip, #0
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012d98:	d01b      	beq.n	8012dd2 <__gethex+0x396>
 8012d9a:	3201      	adds	r2, #1
 8012d9c:	6002      	str	r2, [r0, #0]
 8012d9e:	2d02      	cmp	r5, #2
 8012da0:	f104 0314 	add.w	r3, r4, #20
 8012da4:	d13c      	bne.n	8012e20 <__gethex+0x3e4>
 8012da6:	f8d8 2000 	ldr.w	r2, [r8]
 8012daa:	3a01      	subs	r2, #1
 8012dac:	42b2      	cmp	r2, r6
 8012dae:	d109      	bne.n	8012dc4 <__gethex+0x388>
 8012db0:	1171      	asrs	r1, r6, #5
 8012db2:	2201      	movs	r2, #1
 8012db4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012db8:	f006 061f 	and.w	r6, r6, #31
 8012dbc:	fa02 f606 	lsl.w	r6, r2, r6
 8012dc0:	421e      	tst	r6, r3
 8012dc2:	d13a      	bne.n	8012e3a <__gethex+0x3fe>
 8012dc4:	f045 0520 	orr.w	r5, r5, #32
 8012dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dca:	601c      	str	r4, [r3, #0]
 8012dcc:	9b02      	ldr	r3, [sp, #8]
 8012dce:	601f      	str	r7, [r3, #0]
 8012dd0:	e6b0      	b.n	8012b34 <__gethex+0xf8>
 8012dd2:	4299      	cmp	r1, r3
 8012dd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8012dd8:	d8d9      	bhi.n	8012d8e <__gethex+0x352>
 8012dda:	68a3      	ldr	r3, [r4, #8]
 8012ddc:	459b      	cmp	fp, r3
 8012dde:	db17      	blt.n	8012e10 <__gethex+0x3d4>
 8012de0:	6861      	ldr	r1, [r4, #4]
 8012de2:	9801      	ldr	r0, [sp, #4]
 8012de4:	3101      	adds	r1, #1
 8012de6:	f7fd fd15 	bl	8010814 <_Balloc>
 8012dea:	4681      	mov	r9, r0
 8012dec:	b918      	cbnz	r0, 8012df6 <__gethex+0x3ba>
 8012dee:	4b1a      	ldr	r3, [pc, #104]	@ (8012e58 <__gethex+0x41c>)
 8012df0:	4602      	mov	r2, r0
 8012df2:	2184      	movs	r1, #132	@ 0x84
 8012df4:	e6c5      	b.n	8012b82 <__gethex+0x146>
 8012df6:	6922      	ldr	r2, [r4, #16]
 8012df8:	3202      	adds	r2, #2
 8012dfa:	f104 010c 	add.w	r1, r4, #12
 8012dfe:	0092      	lsls	r2, r2, #2
 8012e00:	300c      	adds	r0, #12
 8012e02:	f7ff fd80 	bl	8012906 <memcpy>
 8012e06:	4621      	mov	r1, r4
 8012e08:	9801      	ldr	r0, [sp, #4]
 8012e0a:	f7fd fd43 	bl	8010894 <_Bfree>
 8012e0e:	464c      	mov	r4, r9
 8012e10:	6923      	ldr	r3, [r4, #16]
 8012e12:	1c5a      	adds	r2, r3, #1
 8012e14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e18:	6122      	str	r2, [r4, #16]
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	615a      	str	r2, [r3, #20]
 8012e1e:	e7be      	b.n	8012d9e <__gethex+0x362>
 8012e20:	6922      	ldr	r2, [r4, #16]
 8012e22:	455a      	cmp	r2, fp
 8012e24:	dd0b      	ble.n	8012e3e <__gethex+0x402>
 8012e26:	2101      	movs	r1, #1
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f7ff fda0 	bl	801296e <rshift>
 8012e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e32:	3701      	adds	r7, #1
 8012e34:	42bb      	cmp	r3, r7
 8012e36:	f6ff aee0 	blt.w	8012bfa <__gethex+0x1be>
 8012e3a:	2501      	movs	r5, #1
 8012e3c:	e7c2      	b.n	8012dc4 <__gethex+0x388>
 8012e3e:	f016 061f 	ands.w	r6, r6, #31
 8012e42:	d0fa      	beq.n	8012e3a <__gethex+0x3fe>
 8012e44:	4453      	add	r3, sl
 8012e46:	f1c6 0620 	rsb	r6, r6, #32
 8012e4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012e4e:	f7fd fdd3 	bl	80109f8 <__hi0bits>
 8012e52:	42b0      	cmp	r0, r6
 8012e54:	dbe7      	blt.n	8012e26 <__gethex+0x3ea>
 8012e56:	e7f0      	b.n	8012e3a <__gethex+0x3fe>
 8012e58:	0801496a 	.word	0x0801496a

08012e5c <L_shift>:
 8012e5c:	f1c2 0208 	rsb	r2, r2, #8
 8012e60:	0092      	lsls	r2, r2, #2
 8012e62:	b570      	push	{r4, r5, r6, lr}
 8012e64:	f1c2 0620 	rsb	r6, r2, #32
 8012e68:	6843      	ldr	r3, [r0, #4]
 8012e6a:	6804      	ldr	r4, [r0, #0]
 8012e6c:	fa03 f506 	lsl.w	r5, r3, r6
 8012e70:	432c      	orrs	r4, r5
 8012e72:	40d3      	lsrs	r3, r2
 8012e74:	6004      	str	r4, [r0, #0]
 8012e76:	f840 3f04 	str.w	r3, [r0, #4]!
 8012e7a:	4288      	cmp	r0, r1
 8012e7c:	d3f4      	bcc.n	8012e68 <L_shift+0xc>
 8012e7e:	bd70      	pop	{r4, r5, r6, pc}

08012e80 <__match>:
 8012e80:	b530      	push	{r4, r5, lr}
 8012e82:	6803      	ldr	r3, [r0, #0]
 8012e84:	3301      	adds	r3, #1
 8012e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e8a:	b914      	cbnz	r4, 8012e92 <__match+0x12>
 8012e8c:	6003      	str	r3, [r0, #0]
 8012e8e:	2001      	movs	r0, #1
 8012e90:	bd30      	pop	{r4, r5, pc}
 8012e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012e9a:	2d19      	cmp	r5, #25
 8012e9c:	bf98      	it	ls
 8012e9e:	3220      	addls	r2, #32
 8012ea0:	42a2      	cmp	r2, r4
 8012ea2:	d0f0      	beq.n	8012e86 <__match+0x6>
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	e7f3      	b.n	8012e90 <__match+0x10>

08012ea8 <__hexnan>:
 8012ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eac:	680b      	ldr	r3, [r1, #0]
 8012eae:	6801      	ldr	r1, [r0, #0]
 8012eb0:	115e      	asrs	r6, r3, #5
 8012eb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012eb6:	f013 031f 	ands.w	r3, r3, #31
 8012eba:	b087      	sub	sp, #28
 8012ebc:	bf18      	it	ne
 8012ebe:	3604      	addne	r6, #4
 8012ec0:	2500      	movs	r5, #0
 8012ec2:	1f37      	subs	r7, r6, #4
 8012ec4:	4682      	mov	sl, r0
 8012ec6:	4690      	mov	r8, r2
 8012ec8:	9301      	str	r3, [sp, #4]
 8012eca:	f846 5c04 	str.w	r5, [r6, #-4]
 8012ece:	46b9      	mov	r9, r7
 8012ed0:	463c      	mov	r4, r7
 8012ed2:	9502      	str	r5, [sp, #8]
 8012ed4:	46ab      	mov	fp, r5
 8012ed6:	784a      	ldrb	r2, [r1, #1]
 8012ed8:	1c4b      	adds	r3, r1, #1
 8012eda:	9303      	str	r3, [sp, #12]
 8012edc:	b342      	cbz	r2, 8012f30 <__hexnan+0x88>
 8012ede:	4610      	mov	r0, r2
 8012ee0:	9105      	str	r1, [sp, #20]
 8012ee2:	9204      	str	r2, [sp, #16]
 8012ee4:	f7ff fd95 	bl	8012a12 <__hexdig_fun>
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	d151      	bne.n	8012f90 <__hexnan+0xe8>
 8012eec:	9a04      	ldr	r2, [sp, #16]
 8012eee:	9905      	ldr	r1, [sp, #20]
 8012ef0:	2a20      	cmp	r2, #32
 8012ef2:	d818      	bhi.n	8012f26 <__hexnan+0x7e>
 8012ef4:	9b02      	ldr	r3, [sp, #8]
 8012ef6:	459b      	cmp	fp, r3
 8012ef8:	dd13      	ble.n	8012f22 <__hexnan+0x7a>
 8012efa:	454c      	cmp	r4, r9
 8012efc:	d206      	bcs.n	8012f0c <__hexnan+0x64>
 8012efe:	2d07      	cmp	r5, #7
 8012f00:	dc04      	bgt.n	8012f0c <__hexnan+0x64>
 8012f02:	462a      	mov	r2, r5
 8012f04:	4649      	mov	r1, r9
 8012f06:	4620      	mov	r0, r4
 8012f08:	f7ff ffa8 	bl	8012e5c <L_shift>
 8012f0c:	4544      	cmp	r4, r8
 8012f0e:	d952      	bls.n	8012fb6 <__hexnan+0x10e>
 8012f10:	2300      	movs	r3, #0
 8012f12:	f1a4 0904 	sub.w	r9, r4, #4
 8012f16:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f1a:	f8cd b008 	str.w	fp, [sp, #8]
 8012f1e:	464c      	mov	r4, r9
 8012f20:	461d      	mov	r5, r3
 8012f22:	9903      	ldr	r1, [sp, #12]
 8012f24:	e7d7      	b.n	8012ed6 <__hexnan+0x2e>
 8012f26:	2a29      	cmp	r2, #41	@ 0x29
 8012f28:	d157      	bne.n	8012fda <__hexnan+0x132>
 8012f2a:	3102      	adds	r1, #2
 8012f2c:	f8ca 1000 	str.w	r1, [sl]
 8012f30:	f1bb 0f00 	cmp.w	fp, #0
 8012f34:	d051      	beq.n	8012fda <__hexnan+0x132>
 8012f36:	454c      	cmp	r4, r9
 8012f38:	d206      	bcs.n	8012f48 <__hexnan+0xa0>
 8012f3a:	2d07      	cmp	r5, #7
 8012f3c:	dc04      	bgt.n	8012f48 <__hexnan+0xa0>
 8012f3e:	462a      	mov	r2, r5
 8012f40:	4649      	mov	r1, r9
 8012f42:	4620      	mov	r0, r4
 8012f44:	f7ff ff8a 	bl	8012e5c <L_shift>
 8012f48:	4544      	cmp	r4, r8
 8012f4a:	d936      	bls.n	8012fba <__hexnan+0x112>
 8012f4c:	f1a8 0204 	sub.w	r2, r8, #4
 8012f50:	4623      	mov	r3, r4
 8012f52:	f853 1b04 	ldr.w	r1, [r3], #4
 8012f56:	f842 1f04 	str.w	r1, [r2, #4]!
 8012f5a:	429f      	cmp	r7, r3
 8012f5c:	d2f9      	bcs.n	8012f52 <__hexnan+0xaa>
 8012f5e:	1b3b      	subs	r3, r7, r4
 8012f60:	f023 0303 	bic.w	r3, r3, #3
 8012f64:	3304      	adds	r3, #4
 8012f66:	3401      	adds	r4, #1
 8012f68:	3e03      	subs	r6, #3
 8012f6a:	42b4      	cmp	r4, r6
 8012f6c:	bf88      	it	hi
 8012f6e:	2304      	movhi	r3, #4
 8012f70:	4443      	add	r3, r8
 8012f72:	2200      	movs	r2, #0
 8012f74:	f843 2b04 	str.w	r2, [r3], #4
 8012f78:	429f      	cmp	r7, r3
 8012f7a:	d2fb      	bcs.n	8012f74 <__hexnan+0xcc>
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	b91b      	cbnz	r3, 8012f88 <__hexnan+0xe0>
 8012f80:	4547      	cmp	r7, r8
 8012f82:	d128      	bne.n	8012fd6 <__hexnan+0x12e>
 8012f84:	2301      	movs	r3, #1
 8012f86:	603b      	str	r3, [r7, #0]
 8012f88:	2005      	movs	r0, #5
 8012f8a:	b007      	add	sp, #28
 8012f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f90:	3501      	adds	r5, #1
 8012f92:	2d08      	cmp	r5, #8
 8012f94:	f10b 0b01 	add.w	fp, fp, #1
 8012f98:	dd06      	ble.n	8012fa8 <__hexnan+0x100>
 8012f9a:	4544      	cmp	r4, r8
 8012f9c:	d9c1      	bls.n	8012f22 <__hexnan+0x7a>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fa4:	2501      	movs	r5, #1
 8012fa6:	3c04      	subs	r4, #4
 8012fa8:	6822      	ldr	r2, [r4, #0]
 8012faa:	f000 000f 	and.w	r0, r0, #15
 8012fae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012fb2:	6020      	str	r0, [r4, #0]
 8012fb4:	e7b5      	b.n	8012f22 <__hexnan+0x7a>
 8012fb6:	2508      	movs	r5, #8
 8012fb8:	e7b3      	b.n	8012f22 <__hexnan+0x7a>
 8012fba:	9b01      	ldr	r3, [sp, #4]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d0dd      	beq.n	8012f7c <__hexnan+0xd4>
 8012fc0:	f1c3 0320 	rsb	r3, r3, #32
 8012fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc8:	40da      	lsrs	r2, r3
 8012fca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012fce:	4013      	ands	r3, r2
 8012fd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8012fd4:	e7d2      	b.n	8012f7c <__hexnan+0xd4>
 8012fd6:	3f04      	subs	r7, #4
 8012fd8:	e7d0      	b.n	8012f7c <__hexnan+0xd4>
 8012fda:	2004      	movs	r0, #4
 8012fdc:	e7d5      	b.n	8012f8a <__hexnan+0xe2>

08012fde <__ascii_mbtowc>:
 8012fde:	b082      	sub	sp, #8
 8012fe0:	b901      	cbnz	r1, 8012fe4 <__ascii_mbtowc+0x6>
 8012fe2:	a901      	add	r1, sp, #4
 8012fe4:	b142      	cbz	r2, 8012ff8 <__ascii_mbtowc+0x1a>
 8012fe6:	b14b      	cbz	r3, 8012ffc <__ascii_mbtowc+0x1e>
 8012fe8:	7813      	ldrb	r3, [r2, #0]
 8012fea:	600b      	str	r3, [r1, #0]
 8012fec:	7812      	ldrb	r2, [r2, #0]
 8012fee:	1e10      	subs	r0, r2, #0
 8012ff0:	bf18      	it	ne
 8012ff2:	2001      	movne	r0, #1
 8012ff4:	b002      	add	sp, #8
 8012ff6:	4770      	bx	lr
 8012ff8:	4610      	mov	r0, r2
 8012ffa:	e7fb      	b.n	8012ff4 <__ascii_mbtowc+0x16>
 8012ffc:	f06f 0001 	mvn.w	r0, #1
 8013000:	e7f8      	b.n	8012ff4 <__ascii_mbtowc+0x16>

08013002 <_realloc_r>:
 8013002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013006:	4680      	mov	r8, r0
 8013008:	4615      	mov	r5, r2
 801300a:	460c      	mov	r4, r1
 801300c:	b921      	cbnz	r1, 8013018 <_realloc_r+0x16>
 801300e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013012:	4611      	mov	r1, r2
 8013014:	f7fb bb34 	b.w	800e680 <_malloc_r>
 8013018:	b92a      	cbnz	r2, 8013026 <_realloc_r+0x24>
 801301a:	f7fd fbb1 	bl	8010780 <_free_r>
 801301e:	2400      	movs	r4, #0
 8013020:	4620      	mov	r0, r4
 8013022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013026:	f000 fab1 	bl	801358c <_malloc_usable_size_r>
 801302a:	4285      	cmp	r5, r0
 801302c:	4606      	mov	r6, r0
 801302e:	d802      	bhi.n	8013036 <_realloc_r+0x34>
 8013030:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013034:	d8f4      	bhi.n	8013020 <_realloc_r+0x1e>
 8013036:	4629      	mov	r1, r5
 8013038:	4640      	mov	r0, r8
 801303a:	f7fb fb21 	bl	800e680 <_malloc_r>
 801303e:	4607      	mov	r7, r0
 8013040:	2800      	cmp	r0, #0
 8013042:	d0ec      	beq.n	801301e <_realloc_r+0x1c>
 8013044:	42b5      	cmp	r5, r6
 8013046:	462a      	mov	r2, r5
 8013048:	4621      	mov	r1, r4
 801304a:	bf28      	it	cs
 801304c:	4632      	movcs	r2, r6
 801304e:	f7ff fc5a 	bl	8012906 <memcpy>
 8013052:	4621      	mov	r1, r4
 8013054:	4640      	mov	r0, r8
 8013056:	f7fd fb93 	bl	8010780 <_free_r>
 801305a:	463c      	mov	r4, r7
 801305c:	e7e0      	b.n	8013020 <_realloc_r+0x1e>
	...

08013060 <_strtoul_l.constprop.0>:
 8013060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013064:	4e34      	ldr	r6, [pc, #208]	@ (8013138 <_strtoul_l.constprop.0+0xd8>)
 8013066:	4686      	mov	lr, r0
 8013068:	460d      	mov	r5, r1
 801306a:	4628      	mov	r0, r5
 801306c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013070:	5d37      	ldrb	r7, [r6, r4]
 8013072:	f017 0708 	ands.w	r7, r7, #8
 8013076:	d1f8      	bne.n	801306a <_strtoul_l.constprop.0+0xa>
 8013078:	2c2d      	cmp	r4, #45	@ 0x2d
 801307a:	d12f      	bne.n	80130dc <_strtoul_l.constprop.0+0x7c>
 801307c:	782c      	ldrb	r4, [r5, #0]
 801307e:	2701      	movs	r7, #1
 8013080:	1c85      	adds	r5, r0, #2
 8013082:	f033 0010 	bics.w	r0, r3, #16
 8013086:	d109      	bne.n	801309c <_strtoul_l.constprop.0+0x3c>
 8013088:	2c30      	cmp	r4, #48	@ 0x30
 801308a:	d12c      	bne.n	80130e6 <_strtoul_l.constprop.0+0x86>
 801308c:	7828      	ldrb	r0, [r5, #0]
 801308e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013092:	2858      	cmp	r0, #88	@ 0x58
 8013094:	d127      	bne.n	80130e6 <_strtoul_l.constprop.0+0x86>
 8013096:	786c      	ldrb	r4, [r5, #1]
 8013098:	2310      	movs	r3, #16
 801309a:	3502      	adds	r5, #2
 801309c:	f04f 38ff 	mov.w	r8, #4294967295
 80130a0:	2600      	movs	r6, #0
 80130a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80130a6:	fb03 f908 	mul.w	r9, r3, r8
 80130aa:	ea6f 0909 	mvn.w	r9, r9
 80130ae:	4630      	mov	r0, r6
 80130b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80130b4:	f1bc 0f09 	cmp.w	ip, #9
 80130b8:	d81c      	bhi.n	80130f4 <_strtoul_l.constprop.0+0x94>
 80130ba:	4664      	mov	r4, ip
 80130bc:	42a3      	cmp	r3, r4
 80130be:	dd2a      	ble.n	8013116 <_strtoul_l.constprop.0+0xb6>
 80130c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80130c4:	d007      	beq.n	80130d6 <_strtoul_l.constprop.0+0x76>
 80130c6:	4580      	cmp	r8, r0
 80130c8:	d322      	bcc.n	8013110 <_strtoul_l.constprop.0+0xb0>
 80130ca:	d101      	bne.n	80130d0 <_strtoul_l.constprop.0+0x70>
 80130cc:	45a1      	cmp	r9, r4
 80130ce:	db1f      	blt.n	8013110 <_strtoul_l.constprop.0+0xb0>
 80130d0:	fb00 4003 	mla	r0, r0, r3, r4
 80130d4:	2601      	movs	r6, #1
 80130d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130da:	e7e9      	b.n	80130b0 <_strtoul_l.constprop.0+0x50>
 80130dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80130de:	bf04      	itt	eq
 80130e0:	782c      	ldrbeq	r4, [r5, #0]
 80130e2:	1c85      	addeq	r5, r0, #2
 80130e4:	e7cd      	b.n	8013082 <_strtoul_l.constprop.0+0x22>
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1d8      	bne.n	801309c <_strtoul_l.constprop.0+0x3c>
 80130ea:	2c30      	cmp	r4, #48	@ 0x30
 80130ec:	bf0c      	ite	eq
 80130ee:	2308      	moveq	r3, #8
 80130f0:	230a      	movne	r3, #10
 80130f2:	e7d3      	b.n	801309c <_strtoul_l.constprop.0+0x3c>
 80130f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80130f8:	f1bc 0f19 	cmp.w	ip, #25
 80130fc:	d801      	bhi.n	8013102 <_strtoul_l.constprop.0+0xa2>
 80130fe:	3c37      	subs	r4, #55	@ 0x37
 8013100:	e7dc      	b.n	80130bc <_strtoul_l.constprop.0+0x5c>
 8013102:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013106:	f1bc 0f19 	cmp.w	ip, #25
 801310a:	d804      	bhi.n	8013116 <_strtoul_l.constprop.0+0xb6>
 801310c:	3c57      	subs	r4, #87	@ 0x57
 801310e:	e7d5      	b.n	80130bc <_strtoul_l.constprop.0+0x5c>
 8013110:	f04f 36ff 	mov.w	r6, #4294967295
 8013114:	e7df      	b.n	80130d6 <_strtoul_l.constprop.0+0x76>
 8013116:	1c73      	adds	r3, r6, #1
 8013118:	d106      	bne.n	8013128 <_strtoul_l.constprop.0+0xc8>
 801311a:	2322      	movs	r3, #34	@ 0x22
 801311c:	f8ce 3000 	str.w	r3, [lr]
 8013120:	4630      	mov	r0, r6
 8013122:	b932      	cbnz	r2, 8013132 <_strtoul_l.constprop.0+0xd2>
 8013124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013128:	b107      	cbz	r7, 801312c <_strtoul_l.constprop.0+0xcc>
 801312a:	4240      	negs	r0, r0
 801312c:	2a00      	cmp	r2, #0
 801312e:	d0f9      	beq.n	8013124 <_strtoul_l.constprop.0+0xc4>
 8013130:	b106      	cbz	r6, 8013134 <_strtoul_l.constprop.0+0xd4>
 8013132:	1e69      	subs	r1, r5, #1
 8013134:	6011      	str	r1, [r2, #0]
 8013136:	e7f5      	b.n	8013124 <_strtoul_l.constprop.0+0xc4>
 8013138:	08014721 	.word	0x08014721

0801313c <_strtoul_r>:
 801313c:	f7ff bf90 	b.w	8013060 <_strtoul_l.constprop.0>

08013140 <__ascii_wctomb>:
 8013140:	4603      	mov	r3, r0
 8013142:	4608      	mov	r0, r1
 8013144:	b141      	cbz	r1, 8013158 <__ascii_wctomb+0x18>
 8013146:	2aff      	cmp	r2, #255	@ 0xff
 8013148:	d904      	bls.n	8013154 <__ascii_wctomb+0x14>
 801314a:	228a      	movs	r2, #138	@ 0x8a
 801314c:	601a      	str	r2, [r3, #0]
 801314e:	f04f 30ff 	mov.w	r0, #4294967295
 8013152:	4770      	bx	lr
 8013154:	700a      	strb	r2, [r1, #0]
 8013156:	2001      	movs	r0, #1
 8013158:	4770      	bx	lr

0801315a <__sfputc_r>:
 801315a:	6893      	ldr	r3, [r2, #8]
 801315c:	3b01      	subs	r3, #1
 801315e:	2b00      	cmp	r3, #0
 8013160:	b410      	push	{r4}
 8013162:	6093      	str	r3, [r2, #8]
 8013164:	da08      	bge.n	8013178 <__sfputc_r+0x1e>
 8013166:	6994      	ldr	r4, [r2, #24]
 8013168:	42a3      	cmp	r3, r4
 801316a:	db01      	blt.n	8013170 <__sfputc_r+0x16>
 801316c:	290a      	cmp	r1, #10
 801316e:	d103      	bne.n	8013178 <__sfputc_r+0x1e>
 8013170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013174:	f000 b932 	b.w	80133dc <__swbuf_r>
 8013178:	6813      	ldr	r3, [r2, #0]
 801317a:	1c58      	adds	r0, r3, #1
 801317c:	6010      	str	r0, [r2, #0]
 801317e:	7019      	strb	r1, [r3, #0]
 8013180:	4608      	mov	r0, r1
 8013182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013186:	4770      	bx	lr

08013188 <__sfputs_r>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	4606      	mov	r6, r0
 801318c:	460f      	mov	r7, r1
 801318e:	4614      	mov	r4, r2
 8013190:	18d5      	adds	r5, r2, r3
 8013192:	42ac      	cmp	r4, r5
 8013194:	d101      	bne.n	801319a <__sfputs_r+0x12>
 8013196:	2000      	movs	r0, #0
 8013198:	e007      	b.n	80131aa <__sfputs_r+0x22>
 801319a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801319e:	463a      	mov	r2, r7
 80131a0:	4630      	mov	r0, r6
 80131a2:	f7ff ffda 	bl	801315a <__sfputc_r>
 80131a6:	1c43      	adds	r3, r0, #1
 80131a8:	d1f3      	bne.n	8013192 <__sfputs_r+0xa>
 80131aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080131ac <_vfiprintf_r>:
 80131ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b0:	460d      	mov	r5, r1
 80131b2:	b09d      	sub	sp, #116	@ 0x74
 80131b4:	4614      	mov	r4, r2
 80131b6:	4698      	mov	r8, r3
 80131b8:	4606      	mov	r6, r0
 80131ba:	b118      	cbz	r0, 80131c4 <_vfiprintf_r+0x18>
 80131bc:	6a03      	ldr	r3, [r0, #32]
 80131be:	b90b      	cbnz	r3, 80131c4 <_vfiprintf_r+0x18>
 80131c0:	f7fc fa68 	bl	800f694 <__sinit>
 80131c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131c6:	07d9      	lsls	r1, r3, #31
 80131c8:	d405      	bmi.n	80131d6 <_vfiprintf_r+0x2a>
 80131ca:	89ab      	ldrh	r3, [r5, #12]
 80131cc:	059a      	lsls	r2, r3, #22
 80131ce:	d402      	bmi.n	80131d6 <_vfiprintf_r+0x2a>
 80131d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131d2:	f7fc fc58 	bl	800fa86 <__retarget_lock_acquire_recursive>
 80131d6:	89ab      	ldrh	r3, [r5, #12]
 80131d8:	071b      	lsls	r3, r3, #28
 80131da:	d501      	bpl.n	80131e0 <_vfiprintf_r+0x34>
 80131dc:	692b      	ldr	r3, [r5, #16]
 80131de:	b99b      	cbnz	r3, 8013208 <_vfiprintf_r+0x5c>
 80131e0:	4629      	mov	r1, r5
 80131e2:	4630      	mov	r0, r6
 80131e4:	f000 f938 	bl	8013458 <__swsetup_r>
 80131e8:	b170      	cbz	r0, 8013208 <_vfiprintf_r+0x5c>
 80131ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131ec:	07dc      	lsls	r4, r3, #31
 80131ee:	d504      	bpl.n	80131fa <_vfiprintf_r+0x4e>
 80131f0:	f04f 30ff 	mov.w	r0, #4294967295
 80131f4:	b01d      	add	sp, #116	@ 0x74
 80131f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fa:	89ab      	ldrh	r3, [r5, #12]
 80131fc:	0598      	lsls	r0, r3, #22
 80131fe:	d4f7      	bmi.n	80131f0 <_vfiprintf_r+0x44>
 8013200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013202:	f7fc fc41 	bl	800fa88 <__retarget_lock_release_recursive>
 8013206:	e7f3      	b.n	80131f0 <_vfiprintf_r+0x44>
 8013208:	2300      	movs	r3, #0
 801320a:	9309      	str	r3, [sp, #36]	@ 0x24
 801320c:	2320      	movs	r3, #32
 801320e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013212:	f8cd 800c 	str.w	r8, [sp, #12]
 8013216:	2330      	movs	r3, #48	@ 0x30
 8013218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80133c8 <_vfiprintf_r+0x21c>
 801321c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013220:	f04f 0901 	mov.w	r9, #1
 8013224:	4623      	mov	r3, r4
 8013226:	469a      	mov	sl, r3
 8013228:	f813 2b01 	ldrb.w	r2, [r3], #1
 801322c:	b10a      	cbz	r2, 8013232 <_vfiprintf_r+0x86>
 801322e:	2a25      	cmp	r2, #37	@ 0x25
 8013230:	d1f9      	bne.n	8013226 <_vfiprintf_r+0x7a>
 8013232:	ebba 0b04 	subs.w	fp, sl, r4
 8013236:	d00b      	beq.n	8013250 <_vfiprintf_r+0xa4>
 8013238:	465b      	mov	r3, fp
 801323a:	4622      	mov	r2, r4
 801323c:	4629      	mov	r1, r5
 801323e:	4630      	mov	r0, r6
 8013240:	f7ff ffa2 	bl	8013188 <__sfputs_r>
 8013244:	3001      	adds	r0, #1
 8013246:	f000 80a7 	beq.w	8013398 <_vfiprintf_r+0x1ec>
 801324a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801324c:	445a      	add	r2, fp
 801324e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013250:	f89a 3000 	ldrb.w	r3, [sl]
 8013254:	2b00      	cmp	r3, #0
 8013256:	f000 809f 	beq.w	8013398 <_vfiprintf_r+0x1ec>
 801325a:	2300      	movs	r3, #0
 801325c:	f04f 32ff 	mov.w	r2, #4294967295
 8013260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013264:	f10a 0a01 	add.w	sl, sl, #1
 8013268:	9304      	str	r3, [sp, #16]
 801326a:	9307      	str	r3, [sp, #28]
 801326c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013270:	931a      	str	r3, [sp, #104]	@ 0x68
 8013272:	4654      	mov	r4, sl
 8013274:	2205      	movs	r2, #5
 8013276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801327a:	4853      	ldr	r0, [pc, #332]	@ (80133c8 <_vfiprintf_r+0x21c>)
 801327c:	f7ec ffa8 	bl	80001d0 <memchr>
 8013280:	9a04      	ldr	r2, [sp, #16]
 8013282:	b9d8      	cbnz	r0, 80132bc <_vfiprintf_r+0x110>
 8013284:	06d1      	lsls	r1, r2, #27
 8013286:	bf44      	itt	mi
 8013288:	2320      	movmi	r3, #32
 801328a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801328e:	0713      	lsls	r3, r2, #28
 8013290:	bf44      	itt	mi
 8013292:	232b      	movmi	r3, #43	@ 0x2b
 8013294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013298:	f89a 3000 	ldrb.w	r3, [sl]
 801329c:	2b2a      	cmp	r3, #42	@ 0x2a
 801329e:	d015      	beq.n	80132cc <_vfiprintf_r+0x120>
 80132a0:	9a07      	ldr	r2, [sp, #28]
 80132a2:	4654      	mov	r4, sl
 80132a4:	2000      	movs	r0, #0
 80132a6:	f04f 0c0a 	mov.w	ip, #10
 80132aa:	4621      	mov	r1, r4
 80132ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132b0:	3b30      	subs	r3, #48	@ 0x30
 80132b2:	2b09      	cmp	r3, #9
 80132b4:	d94b      	bls.n	801334e <_vfiprintf_r+0x1a2>
 80132b6:	b1b0      	cbz	r0, 80132e6 <_vfiprintf_r+0x13a>
 80132b8:	9207      	str	r2, [sp, #28]
 80132ba:	e014      	b.n	80132e6 <_vfiprintf_r+0x13a>
 80132bc:	eba0 0308 	sub.w	r3, r0, r8
 80132c0:	fa09 f303 	lsl.w	r3, r9, r3
 80132c4:	4313      	orrs	r3, r2
 80132c6:	9304      	str	r3, [sp, #16]
 80132c8:	46a2      	mov	sl, r4
 80132ca:	e7d2      	b.n	8013272 <_vfiprintf_r+0xc6>
 80132cc:	9b03      	ldr	r3, [sp, #12]
 80132ce:	1d19      	adds	r1, r3, #4
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	9103      	str	r1, [sp, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	bfbb      	ittet	lt
 80132d8:	425b      	neglt	r3, r3
 80132da:	f042 0202 	orrlt.w	r2, r2, #2
 80132de:	9307      	strge	r3, [sp, #28]
 80132e0:	9307      	strlt	r3, [sp, #28]
 80132e2:	bfb8      	it	lt
 80132e4:	9204      	strlt	r2, [sp, #16]
 80132e6:	7823      	ldrb	r3, [r4, #0]
 80132e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80132ea:	d10a      	bne.n	8013302 <_vfiprintf_r+0x156>
 80132ec:	7863      	ldrb	r3, [r4, #1]
 80132ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80132f0:	d132      	bne.n	8013358 <_vfiprintf_r+0x1ac>
 80132f2:	9b03      	ldr	r3, [sp, #12]
 80132f4:	1d1a      	adds	r2, r3, #4
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	9203      	str	r2, [sp, #12]
 80132fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80132fe:	3402      	adds	r4, #2
 8013300:	9305      	str	r3, [sp, #20]
 8013302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80133d8 <_vfiprintf_r+0x22c>
 8013306:	7821      	ldrb	r1, [r4, #0]
 8013308:	2203      	movs	r2, #3
 801330a:	4650      	mov	r0, sl
 801330c:	f7ec ff60 	bl	80001d0 <memchr>
 8013310:	b138      	cbz	r0, 8013322 <_vfiprintf_r+0x176>
 8013312:	9b04      	ldr	r3, [sp, #16]
 8013314:	eba0 000a 	sub.w	r0, r0, sl
 8013318:	2240      	movs	r2, #64	@ 0x40
 801331a:	4082      	lsls	r2, r0
 801331c:	4313      	orrs	r3, r2
 801331e:	3401      	adds	r4, #1
 8013320:	9304      	str	r3, [sp, #16]
 8013322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013326:	4829      	ldr	r0, [pc, #164]	@ (80133cc <_vfiprintf_r+0x220>)
 8013328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801332c:	2206      	movs	r2, #6
 801332e:	f7ec ff4f 	bl	80001d0 <memchr>
 8013332:	2800      	cmp	r0, #0
 8013334:	d03f      	beq.n	80133b6 <_vfiprintf_r+0x20a>
 8013336:	4b26      	ldr	r3, [pc, #152]	@ (80133d0 <_vfiprintf_r+0x224>)
 8013338:	bb1b      	cbnz	r3, 8013382 <_vfiprintf_r+0x1d6>
 801333a:	9b03      	ldr	r3, [sp, #12]
 801333c:	3307      	adds	r3, #7
 801333e:	f023 0307 	bic.w	r3, r3, #7
 8013342:	3308      	adds	r3, #8
 8013344:	9303      	str	r3, [sp, #12]
 8013346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013348:	443b      	add	r3, r7
 801334a:	9309      	str	r3, [sp, #36]	@ 0x24
 801334c:	e76a      	b.n	8013224 <_vfiprintf_r+0x78>
 801334e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013352:	460c      	mov	r4, r1
 8013354:	2001      	movs	r0, #1
 8013356:	e7a8      	b.n	80132aa <_vfiprintf_r+0xfe>
 8013358:	2300      	movs	r3, #0
 801335a:	3401      	adds	r4, #1
 801335c:	9305      	str	r3, [sp, #20]
 801335e:	4619      	mov	r1, r3
 8013360:	f04f 0c0a 	mov.w	ip, #10
 8013364:	4620      	mov	r0, r4
 8013366:	f810 2b01 	ldrb.w	r2, [r0], #1
 801336a:	3a30      	subs	r2, #48	@ 0x30
 801336c:	2a09      	cmp	r2, #9
 801336e:	d903      	bls.n	8013378 <_vfiprintf_r+0x1cc>
 8013370:	2b00      	cmp	r3, #0
 8013372:	d0c6      	beq.n	8013302 <_vfiprintf_r+0x156>
 8013374:	9105      	str	r1, [sp, #20]
 8013376:	e7c4      	b.n	8013302 <_vfiprintf_r+0x156>
 8013378:	fb0c 2101 	mla	r1, ip, r1, r2
 801337c:	4604      	mov	r4, r0
 801337e:	2301      	movs	r3, #1
 8013380:	e7f0      	b.n	8013364 <_vfiprintf_r+0x1b8>
 8013382:	ab03      	add	r3, sp, #12
 8013384:	9300      	str	r3, [sp, #0]
 8013386:	462a      	mov	r2, r5
 8013388:	4b12      	ldr	r3, [pc, #72]	@ (80133d4 <_vfiprintf_r+0x228>)
 801338a:	a904      	add	r1, sp, #16
 801338c:	4630      	mov	r0, r6
 801338e:	f7fb fb29 	bl	800e9e4 <_printf_float>
 8013392:	4607      	mov	r7, r0
 8013394:	1c78      	adds	r0, r7, #1
 8013396:	d1d6      	bne.n	8013346 <_vfiprintf_r+0x19a>
 8013398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801339a:	07d9      	lsls	r1, r3, #31
 801339c:	d405      	bmi.n	80133aa <_vfiprintf_r+0x1fe>
 801339e:	89ab      	ldrh	r3, [r5, #12]
 80133a0:	059a      	lsls	r2, r3, #22
 80133a2:	d402      	bmi.n	80133aa <_vfiprintf_r+0x1fe>
 80133a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133a6:	f7fc fb6f 	bl	800fa88 <__retarget_lock_release_recursive>
 80133aa:	89ab      	ldrh	r3, [r5, #12]
 80133ac:	065b      	lsls	r3, r3, #25
 80133ae:	f53f af1f 	bmi.w	80131f0 <_vfiprintf_r+0x44>
 80133b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133b4:	e71e      	b.n	80131f4 <_vfiprintf_r+0x48>
 80133b6:	ab03      	add	r3, sp, #12
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	462a      	mov	r2, r5
 80133bc:	4b05      	ldr	r3, [pc, #20]	@ (80133d4 <_vfiprintf_r+0x228>)
 80133be:	a904      	add	r1, sp, #16
 80133c0:	4630      	mov	r0, r6
 80133c2:	f7fb fda7 	bl	800ef14 <_printf_i>
 80133c6:	e7e4      	b.n	8013392 <_vfiprintf_r+0x1e6>
 80133c8:	08014b28 	.word	0x08014b28
 80133cc:	08014b32 	.word	0x08014b32
 80133d0:	0800e9e5 	.word	0x0800e9e5
 80133d4:	08013189 	.word	0x08013189
 80133d8:	08014b2e 	.word	0x08014b2e

080133dc <__swbuf_r>:
 80133dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133de:	460e      	mov	r6, r1
 80133e0:	4614      	mov	r4, r2
 80133e2:	4605      	mov	r5, r0
 80133e4:	b118      	cbz	r0, 80133ee <__swbuf_r+0x12>
 80133e6:	6a03      	ldr	r3, [r0, #32]
 80133e8:	b90b      	cbnz	r3, 80133ee <__swbuf_r+0x12>
 80133ea:	f7fc f953 	bl	800f694 <__sinit>
 80133ee:	69a3      	ldr	r3, [r4, #24]
 80133f0:	60a3      	str	r3, [r4, #8]
 80133f2:	89a3      	ldrh	r3, [r4, #12]
 80133f4:	071a      	lsls	r2, r3, #28
 80133f6:	d501      	bpl.n	80133fc <__swbuf_r+0x20>
 80133f8:	6923      	ldr	r3, [r4, #16]
 80133fa:	b943      	cbnz	r3, 801340e <__swbuf_r+0x32>
 80133fc:	4621      	mov	r1, r4
 80133fe:	4628      	mov	r0, r5
 8013400:	f000 f82a 	bl	8013458 <__swsetup_r>
 8013404:	b118      	cbz	r0, 801340e <__swbuf_r+0x32>
 8013406:	f04f 37ff 	mov.w	r7, #4294967295
 801340a:	4638      	mov	r0, r7
 801340c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	6922      	ldr	r2, [r4, #16]
 8013412:	1a98      	subs	r0, r3, r2
 8013414:	6963      	ldr	r3, [r4, #20]
 8013416:	b2f6      	uxtb	r6, r6
 8013418:	4283      	cmp	r3, r0
 801341a:	4637      	mov	r7, r6
 801341c:	dc05      	bgt.n	801342a <__swbuf_r+0x4e>
 801341e:	4621      	mov	r1, r4
 8013420:	4628      	mov	r0, r5
 8013422:	f7ff f9a9 	bl	8012778 <_fflush_r>
 8013426:	2800      	cmp	r0, #0
 8013428:	d1ed      	bne.n	8013406 <__swbuf_r+0x2a>
 801342a:	68a3      	ldr	r3, [r4, #8]
 801342c:	3b01      	subs	r3, #1
 801342e:	60a3      	str	r3, [r4, #8]
 8013430:	6823      	ldr	r3, [r4, #0]
 8013432:	1c5a      	adds	r2, r3, #1
 8013434:	6022      	str	r2, [r4, #0]
 8013436:	701e      	strb	r6, [r3, #0]
 8013438:	6962      	ldr	r2, [r4, #20]
 801343a:	1c43      	adds	r3, r0, #1
 801343c:	429a      	cmp	r2, r3
 801343e:	d004      	beq.n	801344a <__swbuf_r+0x6e>
 8013440:	89a3      	ldrh	r3, [r4, #12]
 8013442:	07db      	lsls	r3, r3, #31
 8013444:	d5e1      	bpl.n	801340a <__swbuf_r+0x2e>
 8013446:	2e0a      	cmp	r6, #10
 8013448:	d1df      	bne.n	801340a <__swbuf_r+0x2e>
 801344a:	4621      	mov	r1, r4
 801344c:	4628      	mov	r0, r5
 801344e:	f7ff f993 	bl	8012778 <_fflush_r>
 8013452:	2800      	cmp	r0, #0
 8013454:	d0d9      	beq.n	801340a <__swbuf_r+0x2e>
 8013456:	e7d6      	b.n	8013406 <__swbuf_r+0x2a>

08013458 <__swsetup_r>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	4b29      	ldr	r3, [pc, #164]	@ (8013500 <__swsetup_r+0xa8>)
 801345c:	4605      	mov	r5, r0
 801345e:	6818      	ldr	r0, [r3, #0]
 8013460:	460c      	mov	r4, r1
 8013462:	b118      	cbz	r0, 801346c <__swsetup_r+0x14>
 8013464:	6a03      	ldr	r3, [r0, #32]
 8013466:	b90b      	cbnz	r3, 801346c <__swsetup_r+0x14>
 8013468:	f7fc f914 	bl	800f694 <__sinit>
 801346c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013470:	0719      	lsls	r1, r3, #28
 8013472:	d422      	bmi.n	80134ba <__swsetup_r+0x62>
 8013474:	06da      	lsls	r2, r3, #27
 8013476:	d407      	bmi.n	8013488 <__swsetup_r+0x30>
 8013478:	2209      	movs	r2, #9
 801347a:	602a      	str	r2, [r5, #0]
 801347c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013480:	81a3      	strh	r3, [r4, #12]
 8013482:	f04f 30ff 	mov.w	r0, #4294967295
 8013486:	e033      	b.n	80134f0 <__swsetup_r+0x98>
 8013488:	0758      	lsls	r0, r3, #29
 801348a:	d512      	bpl.n	80134b2 <__swsetup_r+0x5a>
 801348c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801348e:	b141      	cbz	r1, 80134a2 <__swsetup_r+0x4a>
 8013490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013494:	4299      	cmp	r1, r3
 8013496:	d002      	beq.n	801349e <__swsetup_r+0x46>
 8013498:	4628      	mov	r0, r5
 801349a:	f7fd f971 	bl	8010780 <_free_r>
 801349e:	2300      	movs	r3, #0
 80134a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80134a2:	89a3      	ldrh	r3, [r4, #12]
 80134a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80134a8:	81a3      	strh	r3, [r4, #12]
 80134aa:	2300      	movs	r3, #0
 80134ac:	6063      	str	r3, [r4, #4]
 80134ae:	6923      	ldr	r3, [r4, #16]
 80134b0:	6023      	str	r3, [r4, #0]
 80134b2:	89a3      	ldrh	r3, [r4, #12]
 80134b4:	f043 0308 	orr.w	r3, r3, #8
 80134b8:	81a3      	strh	r3, [r4, #12]
 80134ba:	6923      	ldr	r3, [r4, #16]
 80134bc:	b94b      	cbnz	r3, 80134d2 <__swsetup_r+0x7a>
 80134be:	89a3      	ldrh	r3, [r4, #12]
 80134c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80134c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80134c8:	d003      	beq.n	80134d2 <__swsetup_r+0x7a>
 80134ca:	4621      	mov	r1, r4
 80134cc:	4628      	mov	r0, r5
 80134ce:	f000 f88b 	bl	80135e8 <__smakebuf_r>
 80134d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134d6:	f013 0201 	ands.w	r2, r3, #1
 80134da:	d00a      	beq.n	80134f2 <__swsetup_r+0x9a>
 80134dc:	2200      	movs	r2, #0
 80134de:	60a2      	str	r2, [r4, #8]
 80134e0:	6962      	ldr	r2, [r4, #20]
 80134e2:	4252      	negs	r2, r2
 80134e4:	61a2      	str	r2, [r4, #24]
 80134e6:	6922      	ldr	r2, [r4, #16]
 80134e8:	b942      	cbnz	r2, 80134fc <__swsetup_r+0xa4>
 80134ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80134ee:	d1c5      	bne.n	801347c <__swsetup_r+0x24>
 80134f0:	bd38      	pop	{r3, r4, r5, pc}
 80134f2:	0799      	lsls	r1, r3, #30
 80134f4:	bf58      	it	pl
 80134f6:	6962      	ldrpl	r2, [r4, #20]
 80134f8:	60a2      	str	r2, [r4, #8]
 80134fa:	e7f4      	b.n	80134e6 <__swsetup_r+0x8e>
 80134fc:	2000      	movs	r0, #0
 80134fe:	e7f7      	b.n	80134f0 <__swsetup_r+0x98>
 8013500:	20000038 	.word	0x20000038

08013504 <_raise_r>:
 8013504:	291f      	cmp	r1, #31
 8013506:	b538      	push	{r3, r4, r5, lr}
 8013508:	4605      	mov	r5, r0
 801350a:	460c      	mov	r4, r1
 801350c:	d904      	bls.n	8013518 <_raise_r+0x14>
 801350e:	2316      	movs	r3, #22
 8013510:	6003      	str	r3, [r0, #0]
 8013512:	f04f 30ff 	mov.w	r0, #4294967295
 8013516:	bd38      	pop	{r3, r4, r5, pc}
 8013518:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801351a:	b112      	cbz	r2, 8013522 <_raise_r+0x1e>
 801351c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013520:	b94b      	cbnz	r3, 8013536 <_raise_r+0x32>
 8013522:	4628      	mov	r0, r5
 8013524:	f000 f830 	bl	8013588 <_getpid_r>
 8013528:	4622      	mov	r2, r4
 801352a:	4601      	mov	r1, r0
 801352c:	4628      	mov	r0, r5
 801352e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013532:	f000 b817 	b.w	8013564 <_kill_r>
 8013536:	2b01      	cmp	r3, #1
 8013538:	d00a      	beq.n	8013550 <_raise_r+0x4c>
 801353a:	1c59      	adds	r1, r3, #1
 801353c:	d103      	bne.n	8013546 <_raise_r+0x42>
 801353e:	2316      	movs	r3, #22
 8013540:	6003      	str	r3, [r0, #0]
 8013542:	2001      	movs	r0, #1
 8013544:	e7e7      	b.n	8013516 <_raise_r+0x12>
 8013546:	2100      	movs	r1, #0
 8013548:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801354c:	4620      	mov	r0, r4
 801354e:	4798      	blx	r3
 8013550:	2000      	movs	r0, #0
 8013552:	e7e0      	b.n	8013516 <_raise_r+0x12>

08013554 <raise>:
 8013554:	4b02      	ldr	r3, [pc, #8]	@ (8013560 <raise+0xc>)
 8013556:	4601      	mov	r1, r0
 8013558:	6818      	ldr	r0, [r3, #0]
 801355a:	f7ff bfd3 	b.w	8013504 <_raise_r>
 801355e:	bf00      	nop
 8013560:	20000038 	.word	0x20000038

08013564 <_kill_r>:
 8013564:	b538      	push	{r3, r4, r5, lr}
 8013566:	4d07      	ldr	r5, [pc, #28]	@ (8013584 <_kill_r+0x20>)
 8013568:	2300      	movs	r3, #0
 801356a:	4604      	mov	r4, r0
 801356c:	4608      	mov	r0, r1
 801356e:	4611      	mov	r1, r2
 8013570:	602b      	str	r3, [r5, #0]
 8013572:	f7f0 ff45 	bl	8004400 <_kill>
 8013576:	1c43      	adds	r3, r0, #1
 8013578:	d102      	bne.n	8013580 <_kill_r+0x1c>
 801357a:	682b      	ldr	r3, [r5, #0]
 801357c:	b103      	cbz	r3, 8013580 <_kill_r+0x1c>
 801357e:	6023      	str	r3, [r4, #0]
 8013580:	bd38      	pop	{r3, r4, r5, pc}
 8013582:	bf00      	nop
 8013584:	2000596c 	.word	0x2000596c

08013588 <_getpid_r>:
 8013588:	f7f0 bf32 	b.w	80043f0 <_getpid>

0801358c <_malloc_usable_size_r>:
 801358c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013590:	1f18      	subs	r0, r3, #4
 8013592:	2b00      	cmp	r3, #0
 8013594:	bfbc      	itt	lt
 8013596:	580b      	ldrlt	r3, [r1, r0]
 8013598:	18c0      	addlt	r0, r0, r3
 801359a:	4770      	bx	lr

0801359c <__swhatbuf_r>:
 801359c:	b570      	push	{r4, r5, r6, lr}
 801359e:	460c      	mov	r4, r1
 80135a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135a4:	2900      	cmp	r1, #0
 80135a6:	b096      	sub	sp, #88	@ 0x58
 80135a8:	4615      	mov	r5, r2
 80135aa:	461e      	mov	r6, r3
 80135ac:	da0d      	bge.n	80135ca <__swhatbuf_r+0x2e>
 80135ae:	89a3      	ldrh	r3, [r4, #12]
 80135b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80135b4:	f04f 0100 	mov.w	r1, #0
 80135b8:	bf14      	ite	ne
 80135ba:	2340      	movne	r3, #64	@ 0x40
 80135bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80135c0:	2000      	movs	r0, #0
 80135c2:	6031      	str	r1, [r6, #0]
 80135c4:	602b      	str	r3, [r5, #0]
 80135c6:	b016      	add	sp, #88	@ 0x58
 80135c8:	bd70      	pop	{r4, r5, r6, pc}
 80135ca:	466a      	mov	r2, sp
 80135cc:	f000 f848 	bl	8013660 <_fstat_r>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	dbec      	blt.n	80135ae <__swhatbuf_r+0x12>
 80135d4:	9901      	ldr	r1, [sp, #4]
 80135d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80135da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80135de:	4259      	negs	r1, r3
 80135e0:	4159      	adcs	r1, r3
 80135e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80135e6:	e7eb      	b.n	80135c0 <__swhatbuf_r+0x24>

080135e8 <__smakebuf_r>:
 80135e8:	898b      	ldrh	r3, [r1, #12]
 80135ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135ec:	079d      	lsls	r5, r3, #30
 80135ee:	4606      	mov	r6, r0
 80135f0:	460c      	mov	r4, r1
 80135f2:	d507      	bpl.n	8013604 <__smakebuf_r+0x1c>
 80135f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80135f8:	6023      	str	r3, [r4, #0]
 80135fa:	6123      	str	r3, [r4, #16]
 80135fc:	2301      	movs	r3, #1
 80135fe:	6163      	str	r3, [r4, #20]
 8013600:	b003      	add	sp, #12
 8013602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013604:	ab01      	add	r3, sp, #4
 8013606:	466a      	mov	r2, sp
 8013608:	f7ff ffc8 	bl	801359c <__swhatbuf_r>
 801360c:	9f00      	ldr	r7, [sp, #0]
 801360e:	4605      	mov	r5, r0
 8013610:	4639      	mov	r1, r7
 8013612:	4630      	mov	r0, r6
 8013614:	f7fb f834 	bl	800e680 <_malloc_r>
 8013618:	b948      	cbnz	r0, 801362e <__smakebuf_r+0x46>
 801361a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801361e:	059a      	lsls	r2, r3, #22
 8013620:	d4ee      	bmi.n	8013600 <__smakebuf_r+0x18>
 8013622:	f023 0303 	bic.w	r3, r3, #3
 8013626:	f043 0302 	orr.w	r3, r3, #2
 801362a:	81a3      	strh	r3, [r4, #12]
 801362c:	e7e2      	b.n	80135f4 <__smakebuf_r+0xc>
 801362e:	89a3      	ldrh	r3, [r4, #12]
 8013630:	6020      	str	r0, [r4, #0]
 8013632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013636:	81a3      	strh	r3, [r4, #12]
 8013638:	9b01      	ldr	r3, [sp, #4]
 801363a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801363e:	b15b      	cbz	r3, 8013658 <__smakebuf_r+0x70>
 8013640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013644:	4630      	mov	r0, r6
 8013646:	f000 f81d 	bl	8013684 <_isatty_r>
 801364a:	b128      	cbz	r0, 8013658 <__smakebuf_r+0x70>
 801364c:	89a3      	ldrh	r3, [r4, #12]
 801364e:	f023 0303 	bic.w	r3, r3, #3
 8013652:	f043 0301 	orr.w	r3, r3, #1
 8013656:	81a3      	strh	r3, [r4, #12]
 8013658:	89a3      	ldrh	r3, [r4, #12]
 801365a:	431d      	orrs	r5, r3
 801365c:	81a5      	strh	r5, [r4, #12]
 801365e:	e7cf      	b.n	8013600 <__smakebuf_r+0x18>

08013660 <_fstat_r>:
 8013660:	b538      	push	{r3, r4, r5, lr}
 8013662:	4d07      	ldr	r5, [pc, #28]	@ (8013680 <_fstat_r+0x20>)
 8013664:	2300      	movs	r3, #0
 8013666:	4604      	mov	r4, r0
 8013668:	4608      	mov	r0, r1
 801366a:	4611      	mov	r1, r2
 801366c:	602b      	str	r3, [r5, #0]
 801366e:	f7f0 ff27 	bl	80044c0 <_fstat>
 8013672:	1c43      	adds	r3, r0, #1
 8013674:	d102      	bne.n	801367c <_fstat_r+0x1c>
 8013676:	682b      	ldr	r3, [r5, #0]
 8013678:	b103      	cbz	r3, 801367c <_fstat_r+0x1c>
 801367a:	6023      	str	r3, [r4, #0]
 801367c:	bd38      	pop	{r3, r4, r5, pc}
 801367e:	bf00      	nop
 8013680:	2000596c 	.word	0x2000596c

08013684 <_isatty_r>:
 8013684:	b538      	push	{r3, r4, r5, lr}
 8013686:	4d06      	ldr	r5, [pc, #24]	@ (80136a0 <_isatty_r+0x1c>)
 8013688:	2300      	movs	r3, #0
 801368a:	4604      	mov	r4, r0
 801368c:	4608      	mov	r0, r1
 801368e:	602b      	str	r3, [r5, #0]
 8013690:	f7f0 ff26 	bl	80044e0 <_isatty>
 8013694:	1c43      	adds	r3, r0, #1
 8013696:	d102      	bne.n	801369e <_isatty_r+0x1a>
 8013698:	682b      	ldr	r3, [r5, #0]
 801369a:	b103      	cbz	r3, 801369e <_isatty_r+0x1a>
 801369c:	6023      	str	r3, [r4, #0]
 801369e:	bd38      	pop	{r3, r4, r5, pc}
 80136a0:	2000596c 	.word	0x2000596c

080136a4 <_init>:
 80136a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a6:	bf00      	nop
 80136a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136aa:	bc08      	pop	{r3}
 80136ac:	469e      	mov	lr, r3
 80136ae:	4770      	bx	lr

080136b0 <_fini>:
 80136b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136b2:	bf00      	nop
 80136b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136b6:	bc08      	pop	{r3}
 80136b8:	469e      	mov	lr, r3
 80136ba:	4770      	bx	lr
